
MA44:     file format elf32-littlearm


Disassembly of section .bootloader:

08000000 <resetisr>:
 8000000:	00 10 00 10 bd 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000010:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000020:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000030:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000040:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000050:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000060:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000070:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000080:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000090:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 80000a0:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 80000b0:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 80000c0:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 80000d0:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 80000e0:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 80000f0:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000100:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000110:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000120:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000130:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000140:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000150:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000160:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000170:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000180:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 8000190:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................
 80001a0:	b1 01 00 08 b1 01 00 08 b1 01 00 08 b1 01 00 08     ................

080001b0 <resetDefaultIRQHandler>:
uint64_t common_stack[STACK_SIZE / 8] __attribute__ ((section(".stack"), aligned(8), used));
#define NVICE(arg_name) (uint32_t)(arg_name)

//////////////////////////////////////////////// BOOTLOADER ////////////////////////////////////////////////
static void __attribute__ ((no_instrument_function, interrupt, optimize("-O3"), section(".bootloader"))) resetDefaultIRQHandler(void)
{
 80001b0:	4668      	mov	r0, sp
 80001b2:	f020 0107 	bic.w	r1, r0, #7
 80001b6:	468d      	mov	sp, r1
 80001b8:	b401      	push	{r0}
 80001ba:	e7fe      	b.n	80001ba <resetDefaultIRQHandler+0xa>

080001bc <Boot_Reset_Handler>:

extern uint32_t _new_image[2];
static void Boot_Reset_Handler(void)
{
  //Update FW if new one available
  updateFW();
 80001bc:	f000 f83c 	bl	8000238 <updateFW>

  //Set new interrupt table
  SCB->VTOR = ((uint32_t)_new_image);
 80001c0:	4b06      	ldr	r3, [pc, #24]	; (80001dc <Boot_Reset_Handler+0x20>)
 80001c2:	4a07      	ldr	r2, [pc, #28]	; (80001e0 <Boot_Reset_Handler+0x24>)
 80001c4:	609a      	str	r2, [r3, #8]
  //Set new stack
  __set_MSP(_new_image[0]);
 80001c6:	4b06      	ldr	r3, [pc, #24]	; (80001e0 <Boot_Reset_Handler+0x24>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	461c      	mov	r4, r3

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 80001cc:	f384 8808 	msr	MSP, r4

  //Proceed to main image by calling it's reset
  void (*mainImageReset)(void) = (void*)_new_image[1];
 80001d0:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <Boot_Reset_Handler+0x24>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	461c      	mov	r4, r3
  mainImageReset();
 80001d6:	47a0      	blx	r4
  while(1);
 80001d8:	e7fe      	b.n	80001d8 <Boot_Reset_Handler+0x1c>
 80001da:	bf00      	nop
 80001dc:	e000ed00 	.word	0xe000ed00
 80001e0:	08008000 	.word	0x08008000

080001e4 <cfgInit>:
  (void)cfgSizeTest;
  uint8_t *src = (uint8_t*)&cfgnvs;
  uint8_t *dst = (uint8_t*)&cfg;
  int idx;
  for(idx = 0; idx < sizeof(cfg); idx++)
    dst[idx] = src[idx];
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <cfgInit+0x14>)
 80001e6:	4805      	ldr	r0, [pc, #20]	; (80001fc <cfgInit+0x18>)
{
  (void)cfgSizeTest;
  uint8_t *src = (uint8_t*)&cfgnvs;
  uint8_t *dst = (uint8_t*)&cfg;
  int idx;
  for(idx = 0; idx < sizeof(cfg); idx++)
 80001e8:	2300      	movs	r3, #0
    dst[idx] = src[idx];
 80001ea:	5c19      	ldrb	r1, [r3, r0]
 80001ec:	5499      	strb	r1, [r3, r2]
{
  (void)cfgSizeTest;
  uint8_t *src = (uint8_t*)&cfgnvs;
  uint8_t *dst = (uint8_t*)&cfg;
  int idx;
  for(idx = 0; idx < sizeof(cfg); idx++)
 80001ee:	3301      	adds	r3, #1
 80001f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001f4:	d1f9      	bne.n	80001ea <cfgInit+0x6>
    dst[idx] = src[idx];
}
 80001f6:	4770      	bx	lr
 80001f8:	10001000 	.word	0x10001000
 80001fc:	08004000 	.word	0x08004000

08000200 <cfgFlush>:
void cfgFlush(void)
{
 8000200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR );
 8000202:	20f2      	movs	r0, #242	; 0xf2
 8000204:	f000 fb9c 	bl	8000940 <FLASH_ClearFlag>
  FLASH_Unlock();
 8000208:	f000 fb8c 	bl	8000924 <FLASH_Unlock>
  FLASH_EraseSector(FLASH_Sector_1, VoltageRange_3);
 800020c:	2102      	movs	r1, #2
 800020e:	2008      	movs	r0, #8
  uint32_t *src = (uint32_t*)&cfg;
  uint32_t addr = (uint32_t)&cfgnvs;
  uint32_t eaddr = (uint32_t)&cfgnvs + sizeof(cfgnvs);
 8000210:	4d07      	ldr	r5, [pc, #28]	; (8000230 <cfgFlush+0x30>)
 8000212:	4f08      	ldr	r7, [pc, #32]	; (8000234 <cfgFlush+0x34>)
}
void cfgFlush(void)
{
  FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR );
  FLASH_Unlock();
  FLASH_EraseSector(FLASH_Sector_1, VoltageRange_3);
 8000214:	f000 fbda 	bl	80009cc <FLASH_EraseSector>
  uint32_t *src = (uint32_t*)&cfg;
  uint32_t addr = (uint32_t)&cfgnvs;
  uint32_t eaddr = (uint32_t)&cfgnvs + sizeof(cfgnvs);
  for(; addr < eaddr; addr+=4)
 8000218:	2400      	movs	r4, #0
 800021a:	f5a5 7600 	sub.w	r6, r5, #512	; 0x200
 800021e:	19a0      	adds	r0, r4, r6
 8000220:	4285      	cmp	r5, r0
 8000222:	d904      	bls.n	800022e <cfgFlush+0x2e>
    FLASH_ProgramWord(addr, *(src++));
 8000224:	5939      	ldr	r1, [r7, r4]
 8000226:	f000 fc25 	bl	8000a74 <FLASH_ProgramWord>
 800022a:	3404      	adds	r4, #4
 800022c:	e7f7      	b.n	800021e <cfgFlush+0x1e>
}
 800022e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000230:	08004200 	.word	0x08004200
 8000234:	10001000 	.word	0x10001000

08000238 <updateFW>:

uint8_t __attribute__((section(".storage")))flashStorage[0];
extern uint8_t _nvs[0];
void updateFW(void)
{
 8000238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  cfgInit();
  if(cfg.fSize > 0)
 800023a:	4c23      	ldr	r4, [pc, #140]	; (80002c8 <updateFW+0x90>)

uint8_t __attribute__((section(".storage")))flashStorage[0];
extern uint8_t _nvs[0];
void updateFW(void)
{
  cfgInit();
 800023c:	f7ff ffd2 	bl	80001e4 <cfgInit>
  if(cfg.fSize > 0)
 8000240:	6823      	ldr	r3, [r4, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	dd3e      	ble.n	80002c4 <updateFW+0x8c>
    {
      uint32_t crc = crc32(0, flashStorage, cfg.fSize);
 8000246:	6822      	ldr	r2, [r4, #0]
 8000248:	4920      	ldr	r1, [pc, #128]	; (80002cc <updateFW+0x94>)
 800024a:	2000      	movs	r0, #0
 800024c:	f000 f842 	bl	80002d4 <crc32>
      if((int)crc != cfg.fCRC)
 8000250:	6863      	ldr	r3, [r4, #4]
 8000252:	4283      	cmp	r3, r0
 8000254:	d136      	bne.n	80002c4 <updateFW+0x8c>
        return;

      //Update FW
      FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR );
 8000256:	20f2      	movs	r0, #242	; 0xf2
 8000258:	f000 fb72 	bl	8000940 <FLASH_ClearFlag>
      FLASH_Unlock();
 800025c:	f000 fb62 	bl	8000924 <FLASH_Unlock>
      FLASH_EraseSector(FLASH_Sector_1, VoltageRange_3);
 8000260:	2102      	movs	r1, #2
 8000262:	2008      	movs	r0, #8
 8000264:	f000 fbb2 	bl	80009cc <FLASH_EraseSector>
      FLASH_EraseSector(FLASH_Sector_2, VoltageRange_3);
 8000268:	2102      	movs	r1, #2
 800026a:	2010      	movs	r0, #16
 800026c:	f000 fbae 	bl	80009cc <FLASH_EraseSector>
      FLASH_EraseSector(FLASH_Sector_3, VoltageRange_3);
 8000270:	2102      	movs	r1, #2
 8000272:	2018      	movs	r0, #24
 8000274:	f000 fbaa 	bl	80009cc <FLASH_EraseSector>
      FLASH_EraseSector(FLASH_Sector_4, VoltageRange_3);
 8000278:	2102      	movs	r1, #2
 800027a:	2020      	movs	r0, #32
 800027c:	f000 fba6 	bl	80009cc <FLASH_EraseSector>
      FLASH_EraseSector(FLASH_Sector_5, VoltageRange_3);
 8000280:	2102      	movs	r1, #2
 8000282:	2028      	movs	r0, #40	; 0x28
 8000284:	f000 fba2 	bl	80009cc <FLASH_EraseSector>
      FLASH_EraseSector(FLASH_Sector_6, VoltageRange_3);
 8000288:	2102      	movs	r1, #2
 800028a:	2030      	movs	r0, #48	; 0x30
 800028c:	f000 fb9e 	bl	80009cc <FLASH_EraseSector>
      FLASH_EraseSector(FLASH_Sector_7, VoltageRange_3);
 8000290:	2102      	movs	r1, #2
 8000292:	2038      	movs	r0, #56	; 0x38
 8000294:	f000 fb9a 	bl	80009cc <FLASH_EraseSector>
      uint32_t *src = (uint32_t*)(&flashStorage[16*1024]);//Omit bootloader
      uint32_t addr = (uint32_t)(&_nvs[0]);
      int num =  (cfg.fSize+3-16*1024)/4;
 8000298:	6823      	ldr	r3, [r4, #0]
 800029a:	4e0d      	ldr	r6, [pc, #52]	; (80002d0 <updateFW+0x98>)
      while(num--)
        {
          FLASH_ProgramWord(addr, *src);
 800029c:	4f0b      	ldr	r7, [pc, #44]	; (80002cc <updateFW+0x94>)
 800029e:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
      FLASH_EraseSector(FLASH_Sector_6, VoltageRange_3);
      FLASH_EraseSector(FLASH_Sector_7, VoltageRange_3);
      uint32_t *src = (uint32_t*)(&flashStorage[16*1024]);//Omit bootloader
      uint32_t addr = (uint32_t)(&_nvs[0]);
      int num =  (cfg.fSize+3-16*1024)/4;
      while(num--)
 80002a2:	2500      	movs	r5, #0
 80002a4:	3b3d      	subs	r3, #61	; 0x3d
 80002a6:	2404      	movs	r4, #4
 80002a8:	fb93 f4f4 	sdiv	r4, r3, r4
 80002ac:	00ab      	lsls	r3, r5, #2
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	eb03 0006 	add.w	r0, r3, r6
 80002b4:	d006      	beq.n	80002c4 <updateFW+0x8c>
        {
          FLASH_ProgramWord(addr, *src);
 80002b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80002ba:	3501      	adds	r5, #1
 80002bc:	58f9      	ldr	r1, [r7, r3]
 80002be:	f000 fbd9 	bl	8000a74 <FLASH_ProgramWord>
 80002c2:	e7f3      	b.n	80002ac <updateFW+0x74>
 80002c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002c6:	bf00      	nop
 80002c8:	10001000 	.word	0x10001000
 80002cc:	08080000 	.word	0x08080000
 80002d0:	08004000 	.word	0x08004000

080002d4 <crc32>:
  while (size--) crc = arg_table[(crc ^ *p++) & 0xFF] ^ (crc >> 8);   \
  return (arg_invert)?crc ^ ~0U:crc;                                  \
  }


CRC_FUNC(32, crc32_tab, 1)
 80002d4:	b510      	push	{r4, lr}
 80002d6:	4c08      	ldr	r4, [pc, #32]	; (80002f8 <crc32+0x24>)
 80002d8:	43c0      	mvns	r0, r0
 80002da:	440a      	add	r2, r1
 80002dc:	4291      	cmp	r1, r2
 80002de:	d008      	beq.n	80002f2 <crc32+0x1e>
 80002e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e4:	4043      	eors	r3, r0
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80002ec:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
 80002f0:	e7f4      	b.n	80002dc <crc32+0x8>
 80002f2:	43c0      	mvns	r0, r0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	bf00      	nop
 80002f8:	08000324 	.word	0x08000324

080002fc <crc16>:
CRC_FUNC(16, crc16_tab, 0)
 80002fc:	b510      	push	{r4, lr}
 80002fe:	4c08      	ldr	r4, [pc, #32]	; (8000320 <crc16+0x24>)
 8000300:	440a      	add	r2, r1
 8000302:	4291      	cmp	r1, r2
 8000304:	d00a      	beq.n	800031c <crc16+0x20>
 8000306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800030a:	4043      	eors	r3, r0
 800030c:	b2db      	uxtb	r3, r3
 800030e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000312:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000316:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
 800031a:	e7f2      	b.n	8000302 <crc16+0x6>
 800031c:	bd10      	pop	{r4, pc}
 800031e:	bf00      	nop
 8000320:	08000324 	.word	0x08000324

08000324 <crc32_tab>:
 8000324:	00000000 77073096 ee0e612c 990951ba     .....0.w,a...Q..
 8000334:	076dc419 706af48f e963a535 9e6495a3     ..m...jp5.c...d.
 8000344:	0edb8832 79dcb8a4 e0d5e91e 97d2d988     2......y........
 8000354:	09b64c2b 7eb17cbd e7b82d07 90bf1d91     +L...|.~.-......
 8000364:	1db71064 6ab020f2 f3b97148 84be41de     d.... .jHq...A..
 8000374:	1adad47d 6ddde4eb f4d4b551 83d385c7     }......mQ.......
 8000384:	136c9856 646ba8c0 fd62f97a 8a65c9ec     V.l...kdz.b...e.
 8000394:	14015c4f 63066cd9 fa0f3d63 8d080df5     O\...l.cc=......
 80003a4:	3b6e20c8 4c69105e d56041e4 a2677172     . n;^.iL.A`.rqg.
 80003b4:	3c03e4d1 4b04d447 d20d85fd a50ab56b     ...<G..K....k...
 80003c4:	35b5a8fa 42b2986c dbbbc9d6 acbcf940     ...5l..B....@...
 80003d4:	32d86ce3 45df5c75 dcd60dcf abd13d59     .l.2u\.E....Y=..
 80003e4:	26d930ac 51de003a c8d75180 bfd06116     .0.&:..Q.Q...a..
 80003f4:	21b4f4b5 56b3c423 cfba9599 b8bda50f     ...!#..V........
 8000404:	2802b89e 5f058808 c60cd9b2 b10be924     ...(..._....$...
 8000414:	2f6f7c87 58684c11 c1611dab b6662d3d     .|o/.LhX..a.=-f.
 8000424:	76dc4190 01db7106 98d220bc efd5102a     .A.v.q... ..*...
 8000434:	71b18589 06b6b51f 9fbfe4a5 e8b8d433     ...q........3...
 8000444:	7807c9a2 0f00f934 9609a88e e10e9818     ...x4...........
 8000454:	7f6a0dbb 086d3d2d 91646c97 e6635c01     ..j.-=m..ld..\c.
 8000464:	6b6b51f4 1c6c6162 856530d8 f262004e     .Qkkbal..0e.N.b.
 8000474:	6c0695ed 1b01a57b 8208f4c1 f50fc457     ...l{.......W...
 8000484:	65b0d9c6 12b7e950 8bbeb8ea fcb9887c     ...eP.......|...
 8000494:	62dd1ddf 15da2d49 8cd37cf3 fbd44c65     ...bI-...|..eL..
 80004a4:	4db26158 3ab551ce a3bc0074 d4bb30e2     Xa.M.Q.:t....0..
 80004b4:	4adfa541 3dd895d7 a4d1c46d d3d6f4fb     A..J...=m.......
 80004c4:	4369e96a 346ed9fc ad678846 da60b8d0     j.iC..n4F.g...`.
 80004d4:	44042d73 33031de5 aa0a4c5f dd0d7cc9     s-.D...3_L...|..
 80004e4:	5005713c 270241aa be0b1010 c90c2086     <q.P.A.'..... ..
 80004f4:	5768b525 206f85b3 b966d409 ce61e49f     %.hW..o ..f...a.
 8000504:	5edef90e 29d9c998 b0d09822 c7d7a8b4     ...^...)".......
 8000514:	59b33d17 2eb40d81 b7bd5c3b c0ba6cad     .=.Y....;\...l..
 8000524:	edb88320 9abfb3b6 03b6e20c 74b1d29a      ..............t
 8000534:	ead54739 9dd277af 04db2615 73dc1683     9G...w...&.....s
 8000544:	e3630b12 94643b84 0d6d6a3e 7a6a5aa8     ..c..;d.>jm..Zjz
 8000554:	e40ecf0b 9309ff9d 0a00ae27 7d079eb1     ........'......}
 8000564:	f00f9344 8708a3d2 1e01f268 6906c2fe     D.......h......i
 8000574:	f762575d 806567cb 196c3671 6e6b06e7     ]Wb..ge.q6l...kn
 8000584:	fed41b76 89d32be0 10da7a5a 67dd4acc     v....+..Zz...J.g
 8000594:	f9b9df6f 8ebeeff9 17b7be43 60b08ed5     o.......C......`
 80005a4:	d6d6a3e8 a1d1937e 38d8c2c4 4fdff252     ....~......8R..O
 80005b4:	d1bb67f1 a6bc5767 3fb506dd 48b2364b     .g..gW.....?K6.H
 80005c4:	d80d2bda af0a1b4c 36034af6 41047a60     .+..L....J.6`z.A
 80005d4:	df60efc3 a867df55 316e8eef 4669be79     ..`.U.g...n1y.iF
 80005e4:	cb61b38c bc66831a 256fd2a0 5268e236     ..a...f...o%6.hR
 80005f4:	cc0c7795 bb0b4703 220216b9 5505262f     .w...G....."/&.U
 8000604:	c5ba3bbe b2bd0b28 2bb45a92 5cb36a04     .;..(....Z.+.j.\
 8000614:	c2d7ffa7 b5d0cf31 2cd99e8b 5bdeae1d     ....1......,...[
 8000624:	9b64c2b0 ec63f226 756aa39c 026d930a     ..d.&.c...ju..m.
 8000634:	9c0906a9 eb0e363f 72076785 05005713     ....?6...g.r.W..
 8000644:	95bf4a82 e2b87a14 7bb12bae 0cb61b38     .J...z...+.{8...
 8000654:	92d28e9b e5d5be0d 7cdcefb7 0bdbdf21     ...........|!...
 8000664:	86d3d2d4 f1d4e242 68ddb3f8 1fda836e     ....B......hn...
 8000674:	81be16cd f6b9265b 6fb077e1 18b74777     ....[&...w.owG..
 8000684:	88085ae6 ff0f6a70 66063bca 11010b5c     .Z..pj...;.f\...
 8000694:	8f659eff f862ae69 616bffd3 166ccf45     ..e.i.b...kaE.l.
 80006a4:	a00ae278 d70dd2ee 4e048354 3903b3c2     x.......T..N...9
 80006b4:	a7672661 d06016f7 4969474d 3e6e77db     a&g...`.MGiI.wn>
 80006c4:	aed16a4a d9d65adc 40df0b66 37d83bf0     Jj...Z..f..@.;.7
 80006d4:	a9bcae53 debb9ec5 47b2cf7f 30b5ffe9     S..........G...0
 80006e4:	bdbdf21c cabac28a 53b39330 24b4a3a6     ........0..S...$
 80006f4:	bad03605 cdd70693 54de5729 23d967bf     .6......)W.T.g.#
 8000704:	b3667a2e c4614ab8 5d681b02 2a6f2b94     .zf..Ja...h].+o*
 8000714:	b40bbe37 c30c8ea1 5a05df1b 2d02ef8d     7..........Z...-

08000724 <crc16_tab>:
 8000724:	c0c10000 0140c181 03c0c301 c2410280     ......@.......A.
 8000734:	06c0c601 c7410780 c5c10500 0440c481     ......A.......@.
 8000744:	0cc0cc01 cd410d80 cfc10f00 0e40ce81     ......A.......@.
 8000754:	cac10a00 0b40cb81 09c0c901 c8410880     ......@.......A.
 8000764:	18c0d801 d9411980 dbc11b00 1a40da81     ......A.......@.
 8000774:	dec11e00 1f40df81 1dc0dd01 dc411c80     ......@.......A.
 8000784:	d4c11400 1540d581 17c0d701 d6411680     ......@.......A.
 8000794:	12c0d201 d3411380 d1c11100 1040d081     ......A.......@.
 80007a4:	30c0f001 f1413180 f3c13300 3240f281     ...0.1A..3....@2
 80007b4:	f6c13600 3740f781 35c0f501 f4413480     .6....@7...5.4A.
 80007c4:	fcc13c00 3d40fd81 3fc0ff01 fe413e80     .<....@=...?.>A.
 80007d4:	3ac0fa01 fb413b80 f9c13900 3840f881     ...:.;A..9....@8
 80007e4:	e8c12800 2940e981 2bc0eb01 ea412a80     .(....@)...+.*A.
 80007f4:	2ec0ee01 ef412f80 edc12d00 2c40ec81     ...../A..-....@,
 8000804:	24c0e401 e5412580 e7c12700 2640e681     ...$.%A..'....@&
 8000814:	e2c12200 2340e381 21c0e101 e0412080     ."....@#...!. A.
 8000824:	60c0a001 a1416180 a3c16300 6240a281     ...`.aA..c....@b
 8000834:	a6c16600 6740a781 65c0a501 a4416480     .f....@g...e.dA.
 8000844:	acc16c00 6d40ad81 6fc0af01 ae416e80     .l....@m...o.nA.
 8000854:	6ac0aa01 ab416b80 a9c16900 6840a881     ...j.kA..i....@h
 8000864:	b8c17800 7940b981 7bc0bb01 ba417a80     .x....@y...{.zA.
 8000874:	7ec0be01 bf417f80 bdc17d00 7c40bc81     ...~..A..}....@|
 8000884:	74c0b401 b5417580 b7c17700 7640b681     ...t.uA..w....@v
 8000894:	b2c17200 7340b381 71c0b101 b0417080     .r....@s...q.pA.
 80008a4:	90c15000 51409181 53c09301 92415280     .P....@Q...S.RA.
 80008b4:	56c09601 97415780 95c15500 54409481     ...V.WA..U....@T
 80008c4:	5cc09c01 9d415d80 9fc15f00 5e409e81     ...\.]A.._....@^
 80008d4:	9ac15a00 5b409b81 59c09901 98415880     .Z....@[...Y.XA.
 80008e4:	48c08801 89414980 8bc14b00 4a408a81     ...H.IA..K....@J
 80008f4:	8ec14e00 4f408f81 4dc08d01 8c414c80     .N....@O...M.LA.
 8000904:	84c14400 45408581 47c08701 86414680     .D....@E...G.FA.
 8000914:	42c08201 83414380 81c14100 40408081     ...B.CA..A....@@

08000924 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <FLASH_Unlock+0x14>)
 8000926:	691a      	ldr	r2, [r3, #16]
 8000928:	2a00      	cmp	r2, #0
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800092a:	bfbf      	itttt	lt
 800092c:	4a03      	ldrlt	r2, [pc, #12]	; (800093c <FLASH_Unlock+0x18>)
 800092e:	605a      	strlt	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8000930:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8000934:	605a      	strlt	r2, [r3, #4]
 8000936:	4770      	bx	lr
 8000938:	40023c00 	.word	0x40023c00
 800093c:	45670123 	.word	0x45670123

08000940 <FLASH_ClearFlag>:
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
 8000940:	f420 73f9 	bic.w	r3, r0, #498	; 0x1f2
 8000944:	f023 0301 	bic.w	r3, r3, #1
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42/43xxx and STM32F401xx devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8000948:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
 800094a:	b923      	cbnz	r3, 8000956 <FLASH_ClearFlag+0x16>
 800094c:	b118      	cbz	r0, 8000956 <FLASH_ClearFlag+0x16>
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <FLASH_ClearFlag+0x24>)
 8000950:	60d8      	str	r0, [r3, #12]
}
 8000952:	b002      	add	sp, #8
 8000954:	4770      	bx	lr
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
 8000956:	2301      	movs	r3, #1
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	9b01      	ldr	r3, [sp, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1fc      	bne.n	800095a <FLASH_ClearFlag+0x1a>
 8000960:	e7f5      	b.n	800094e <FLASH_ClearFlag+0xe>
 8000962:	bf00      	nop
 8000964:	40023c00 	.word	0x40023c00

08000968 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <FLASH_GetStatus+0x3c>)
 800096a:	68da      	ldr	r2, [r3, #12]
 800096c:	03d2      	lsls	r2, r2, #15
 800096e:	d410      	bmi.n	8000992 <FLASH_GetStatus+0x2a>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8000970:	68da      	ldr	r2, [r3, #12]
 8000972:	06d1      	lsls	r1, r2, #27
 8000974:	d40f      	bmi.n	8000996 <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_WRP;
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8000976:	68da      	ldr	r2, [r3, #12]
 8000978:	05d2      	lsls	r2, r2, #23
 800097a:	d40e      	bmi.n	800099a <FLASH_GetStatus+0x32>
      { 
        flashstatus = FLASH_ERROR_RD;
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 800097c:	68da      	ldr	r2, [r3, #12]
 800097e:	f012 0fef 	tst.w	r2, #239	; 0xef
 8000982:	d10c      	bne.n	800099e <FLASH_GetStatus+0x36>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	f013 0f02 	tst.w	r3, #2
          {
            flashstatus = FLASH_ERROR_OPERATION;
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 800098a:	bf14      	ite	ne
 800098c:	2008      	movne	r0, #8
 800098e:	2009      	moveq	r0, #9
 8000990:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8000992:	2001      	movs	r0, #1
 8000994:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
    { 
      flashstatus = FLASH_ERROR_WRP;
 8000996:	2006      	movs	r0, #6
 8000998:	4770      	bx	lr
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
      { 
        flashstatus = FLASH_ERROR_RD;
 800099a:	2002      	movs	r0, #2
 800099c:	4770      	bx	lr
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 800099e:	2007      	movs	r0, #7
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023c00 	.word	0x40023c00

080009a8 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 80009a8:	b507      	push	{r0, r1, r2, lr}
  __IO FLASH_Status status = FLASH_COMPLETE;
 80009aa:	2309      	movs	r3, #9
 80009ac:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
  {
    status = FLASH_GetStatus();
 80009b0:	f7ff ffda 	bl	8000968 <FLASH_GetStatus>
 80009b4:	f88d 0007 	strb.w	r0, [sp, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80009b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d0f7      	beq.n	80009b0 <FLASH_WaitForLastOperation+0x8>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 80009c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80009c4:	b003      	add	sp, #12
 80009c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080009cc <FLASH_EraseSector>:
{
  uint32_t tmp_psize = 0x0;
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
 80009cc:	f030 0318 	bics.w	r3, r0, #24
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 80009d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80009d2:	4606      	mov	r6, r0
  uint32_t tmp_psize = 0x0;
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
 80009d4:	d104      	bne.n	80009e0 <FLASH_EraseSector+0x14>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 80009d6:	2903      	cmp	r1, #3
 80009d8:	d916      	bls.n	8000a08 <FLASH_EraseSector+0x3c>
 80009da:	2301      	movs	r3, #1
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	e00f      	b.n	8000a00 <FLASH_EraseSector+0x34>
{
  uint32_t tmp_psize = 0x0;
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
 80009e0:	2b20      	cmp	r3, #32
 80009e2:	d0f8      	beq.n	80009d6 <FLASH_EraseSector+0xa>
 80009e4:	2b40      	cmp	r3, #64	; 0x40
 80009e6:	d0f6      	beq.n	80009d6 <FLASH_EraseSector+0xa>
 80009e8:	2b80      	cmp	r3, #128	; 0x80
 80009ea:	d0f4      	beq.n	80009d6 <FLASH_EraseSector+0xa>
 80009ec:	2ba0      	cmp	r3, #160	; 0xa0
 80009ee:	d0f2      	beq.n	80009d6 <FLASH_EraseSector+0xa>
 80009f0:	2bc0      	cmp	r3, #192	; 0xc0
 80009f2:	d0f0      	beq.n	80009d6 <FLASH_EraseSector+0xa>
 80009f4:	2301      	movs	r3, #1
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	9b00      	ldr	r3, [sp, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1fc      	bne.n	80009f8 <FLASH_EraseSector+0x2c>
 80009fe:	e7ea      	b.n	80009d6 <FLASH_EraseSector+0xa>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8000a00:	9b01      	ldr	r3, [sp, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1fc      	bne.n	8000a00 <FLASH_EraseSector+0x34>
 8000a06:	e002      	b.n	8000a0e <FLASH_EraseSector+0x42>
  
  if(VoltageRange == VoltageRange_1)
 8000a08:	b159      	cbz	r1, 8000a22 <FLASH_EraseSector+0x56>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 8000a0a:	2901      	cmp	r1, #1
 8000a0c:	d006      	beq.n	8000a1c <FLASH_EraseSector+0x50>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == VoltageRange_3)
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8000a0e:	2902      	cmp	r1, #2
 8000a10:	bf14      	ite	ne
 8000a12:	f44f 7540 	movne.w	r5, #768	; 0x300
 8000a16:	f44f 7500 	moveq.w	r5, #512	; 0x200
 8000a1a:	e003      	b.n	8000a24 <FLASH_EraseSector+0x58>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000a1c:	f44f 7580 	mov.w	r5, #256	; 0x100
 8000a20:	e000      	b.n	8000a24 <FLASH_EraseSector+0x58>
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8000a22:	460d      	mov	r5, r1
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8000a24:	f7ff ffc0 	bl	80009a8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8000a28:	2809      	cmp	r0, #9
 8000a2a:	d11e      	bne.n	8000a6a <FLASH_EraseSector+0x9e>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8000a2c:	4c10      	ldr	r4, [pc, #64]	; (8000a70 <FLASH_EraseSector+0xa4>)
 8000a2e:	6923      	ldr	r3, [r4, #16]
 8000a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a34:	6123      	str	r3, [r4, #16]
    FLASH->CR |= tmp_psize;
 8000a36:	6921      	ldr	r1, [r4, #16]
 8000a38:	4329      	orrs	r1, r5
 8000a3a:	6121      	str	r1, [r4, #16]
    FLASH->CR &= SECTOR_MASK;
 8000a3c:	6923      	ldr	r3, [r4, #16]
 8000a3e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a42:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8000a44:	6923      	ldr	r3, [r4, #16]
 8000a46:	f043 0302 	orr.w	r3, r3, #2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	6126      	str	r6, [r4, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8000a4e:	6923      	ldr	r3, [r4, #16]
 8000a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a54:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8000a56:	f7ff ffa7 	bl	80009a8 <FLASH_WaitForLastOperation>
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8000a5a:	6923      	ldr	r3, [r4, #16]
 8000a5c:	f023 0302 	bic.w	r3, r3, #2
 8000a60:	6123      	str	r3, [r4, #16]
    FLASH->CR &= SECTOR_MASK; 
 8000a62:	6923      	ldr	r3, [r4, #16]
 8000a64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a68:	6123      	str	r3, [r4, #16]
  }
  /* Return the Erase Status */
  return status;
}
 8000a6a:	b002      	add	sp, #8
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023c00 	.word	0x40023c00

08000a74 <FLASH_ProgramWord>:
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <FLASH_ProgramWord+0x64>)
 8000a76:	f100 4278 	add.w	r2, r0, #4160749568	; 0xf8000000
 8000a7a:	429a      	cmp	r2, r3
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8000a7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000a7e:	4605      	mov	r5, r0
 8000a80:	460e      	mov	r6, r1
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8000a82:	d818      	bhi.n	8000ab6 <FLASH_ProgramWord+0x42>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8000a84:	f7ff ff90 	bl	80009a8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8000a88:	2809      	cmp	r0, #9
 8000a8a:	d122      	bne.n	8000ad2 <FLASH_ProgramWord+0x5e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8000a8c:	4c13      	ldr	r4, [pc, #76]	; (8000adc <FLASH_ProgramWord+0x68>)
 8000a8e:	6923      	ldr	r3, [r4, #16]
 8000a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a94:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8000a96:	6923      	ldr	r3, [r4, #16]
 8000a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9c:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_PG;
 8000a9e:	6923      	ldr	r3, [r4, #16]
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6123      	str	r3, [r4, #16]
  
    *(__IO uint32_t*)Address = Data;
 8000aa6:	602e      	str	r6, [r5, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8000aa8:	f7ff ff7e 	bl	80009a8 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000aac:	6923      	ldr	r3, [r4, #16]
 8000aae:	f023 0301 	bic.w	r3, r3, #1
 8000ab2:	6123      	str	r3, [r4, #16]
 8000ab4:	e00d      	b.n	8000ad2 <FLASH_ProgramWord+0x5e>
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8000ab6:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 8000aba:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 8000abe:	f240 220e 	movw	r2, #526	; 0x20e
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d9de      	bls.n	8000a84 <FLASH_ProgramWord+0x10>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	9b01      	ldr	r3, [sp, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1fc      	bne.n	8000aca <FLASH_ProgramWord+0x56>
 8000ad0:	e7d8      	b.n	8000a84 <FLASH_ProgramWord+0x10>
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
  } 
  /* Return the Program Status */
  return status;
}
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	bf00      	nop
 8000ad8:	001ffffe 	.word	0x001ffffe
 8000adc:	40023c00 	.word	0x40023c00

Disassembly of section .text:

08008000 <_new_image>:
 8008000:	10001000 	.word	0x10001000
 8008004:	08008641 	.word	0x08008641
 8008008:	080086f5 	.word	0x080086f5
 800800c:	0800890d 	.word	0x0800890d
 8008010:	080086f5 	.word	0x080086f5
 8008014:	080086f5 	.word	0x080086f5
 8008018:	080086f5 	.word	0x080086f5
 800801c:	080086b5 	.word	0x080086b5
 8008020:	080086b5 	.word	0x080086b5
 8008024:	080086b5 	.word	0x080086b5
 8008028:	080086b5 	.word	0x080086b5
 800802c:	0800a341 	.word	0x0800a341
 8008030:	080086f5 	.word	0x080086f5
 8008034:	080086b5 	.word	0x080086b5
 8008038:	0800a3e5 	.word	0x0800a3e5
 800803c:	0800878d 	.word	0x0800878d
 8008040:	080086b5 	.word	0x080086b5
 8008044:	080086b5 	.word	0x080086b5
 8008048:	080086b5 	.word	0x080086b5
 800804c:	080086b5 	.word	0x080086b5
 8008050:	080086b5 	.word	0x080086b5
 8008054:	080086b5 	.word	0x080086b5
 8008058:	080086b5 	.word	0x080086b5
 800805c:	080086b5 	.word	0x080086b5
 8008060:	080086b5 	.word	0x080086b5
 8008064:	080086b5 	.word	0x080086b5
 8008068:	080086b5 	.word	0x080086b5
 800806c:	080086b5 	.word	0x080086b5
 8008070:	080086b5 	.word	0x080086b5
 8008074:	080086b5 	.word	0x080086b5
 8008078:	080086b5 	.word	0x080086b5
 800807c:	080086b5 	.word	0x080086b5
 8008080:	080086b5 	.word	0x080086b5
 8008084:	080086b5 	.word	0x080086b5
 8008088:	080086b5 	.word	0x080086b5
 800808c:	080086b5 	.word	0x080086b5
 8008090:	080086b5 	.word	0x080086b5
 8008094:	080086b5 	.word	0x080086b5
 8008098:	080086b5 	.word	0x080086b5
 800809c:	080086b5 	.word	0x080086b5
 80080a0:	080086b5 	.word	0x080086b5
 80080a4:	080086b5 	.word	0x080086b5
 80080a8:	080086b5 	.word	0x080086b5
 80080ac:	080086b5 	.word	0x080086b5
 80080b0:	080086b5 	.word	0x080086b5
 80080b4:	080086b5 	.word	0x080086b5
 80080b8:	080086b5 	.word	0x080086b5
 80080bc:	080086b5 	.word	0x080086b5
 80080c0:	080086b5 	.word	0x080086b5
 80080c4:	080086b5 	.word	0x080086b5
 80080c8:	080086b5 	.word	0x080086b5
 80080cc:	080086b5 	.word	0x080086b5
 80080d0:	080086b5 	.word	0x080086b5
 80080d4:	080086b5 	.word	0x080086b5
 80080d8:	080086b5 	.word	0x080086b5
 80080dc:	080086b5 	.word	0x080086b5
 80080e0:	080086b5 	.word	0x080086b5
 80080e4:	080086b5 	.word	0x080086b5
 80080e8:	080086b5 	.word	0x080086b5
 80080ec:	080086b5 	.word	0x080086b5
 80080f0:	080086b5 	.word	0x080086b5
 80080f4:	080086b5 	.word	0x080086b5
 80080f8:	080086b5 	.word	0x080086b5
 80080fc:	080086b5 	.word	0x080086b5
 8008100:	080086b5 	.word	0x080086b5
 8008104:	080086b5 	.word	0x080086b5
 8008108:	080086b5 	.word	0x080086b5
 800810c:	080086b5 	.word	0x080086b5
 8008110:	080086b5 	.word	0x080086b5
 8008114:	080086b5 	.word	0x080086b5
 8008118:	080086b5 	.word	0x080086b5
 800811c:	080086b5 	.word	0x080086b5
 8008120:	080086b5 	.word	0x080086b5
 8008124:	080086b5 	.word	0x080086b5
 8008128:	080086b5 	.word	0x080086b5
 800812c:	080086b5 	.word	0x080086b5
 8008130:	080086b5 	.word	0x080086b5
 8008134:	080086b5 	.word	0x080086b5
 8008138:	080086b5 	.word	0x080086b5
 800813c:	080086b5 	.word	0x080086b5
 8008140:	080086b5 	.word	0x080086b5
 8008144:	080086b5 	.word	0x080086b5
 8008148:	080086b5 	.word	0x080086b5
 800814c:	080086b5 	.word	0x080086b5
 8008150:	080086b5 	.word	0x080086b5
 8008154:	080086b5 	.word	0x080086b5
 8008158:	080086b5 	.word	0x080086b5
 800815c:	080086b5 	.word	0x080086b5
 8008160:	080086b5 	.word	0x080086b5
 8008164:	080086b5 	.word	0x080086b5
 8008168:	080086b5 	.word	0x080086b5
 800816c:	080086b5 	.word	0x080086b5
 8008170:	080086b5 	.word	0x080086b5
 8008174:	080086b5 	.word	0x080086b5
 8008178:	080086b5 	.word	0x080086b5
 800817c:	080086b5 	.word	0x080086b5
 8008180:	080086b5 	.word	0x080086b5
 8008184:	080086b5 	.word	0x080086b5
 8008188:	080086b5 	.word	0x080086b5
 800818c:	080086b5 	.word	0x080086b5
 8008190:	080086b5 	.word	0x080086b5
 8008194:	080086b5 	.word	0x080086b5
 8008198:	080086b5 	.word	0x080086b5
 800819c:	080086b5 	.word	0x080086b5
 80081a0:	080086b5 	.word	0x080086b5
 80081a4:	080086b5 	.word	0x080086b5
 80081a8:	080086b5 	.word	0x080086b5
 80081ac:	080086b5 	.word	0x080086b5

080081b0 <_init>:
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b2:	bf00      	nop
 80081b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b6:	bc08      	pop	{r3}
 80081b8:	469e      	mov	lr, r3
 80081ba:	4770      	bx	lr

080081bc <_fini>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr

080081c8 <testTrimm>:
      case 15:buf->data[i] = arg16;break;				\
      }

static int testInputPatternNum = 0;
void testTrimm(unsigned int count)
{
 80081c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  bBuffer_t *buf = bAlloc(LEN);
 80081cc:	f44f 7040 	mov.w	r0, #768	; 0x300
 80081d0:	f00c fed4 	bl	8014f7c <bAlloc>
  int i;
  buf->size = LEN;
 80081d4:	2300      	movs	r3, #0
 80081d6:	7003      	strb	r3, [r0, #0]
 80081d8:	2303      	movs	r3, #3
 80081da:	7043      	strb	r3, [r0, #1]
  switch (testInputPatternNum)
 80081dc:	4ba1      	ldr	r3, [pc, #644]	; (8008464 <testTrimm+0x29c>)
 80081de:	681b      	ldr	r3, [r3, #0]

static int testInputPatternNum = 0;
void testTrimm(unsigned int count)
{

  bBuffer_t *buf = bAlloc(LEN);
 80081e0:	4604      	mov	r4, r0
  int i;
  buf->size = LEN;
  switch (testInputPatternNum)
 80081e2:	2b17      	cmp	r3, #23
 80081e4:	f200 81b4 	bhi.w	8008550 <testTrimm+0x388>
 80081e8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80081ec:	00180018 	.word	0x00180018
 80081f0:	00340034 	.word	0x00340034
 80081f4:	00340034 	.word	0x00340034
 80081f8:	00680068 	.word	0x00680068
 80081fc:	00960096 	.word	0x00960096
 8008200:	00960096 	.word	0x00960096
 8008204:	00da00da 	.word	0x00da00da
 8008208:	00ff00ff 	.word	0x00ff00ff
 800820c:	00ff00ff 	.word	0x00ff00ff
 8008210:	013e013e 	.word	0x013e013e
 8008214:	016d016d 	.word	0x016d016d
 8008218:	016d016d 	.word	0x016d016d
 800821c:	f100 0314 	add.w	r3, r0, #20
 8008220:	2200      	movs	r2, #0
    {
    case 0 ... 1:
      // IF_16L16P normal sampling
      SET4(0x01, 0x02, 0x11, 0x12)
 8008222:	2011      	movs	r0, #17
 8008224:	2512      	movs	r5, #18
 8008226:	2602      	movs	r6, #2
 8008228:	2701      	movs	r7, #1
 800822a:	f002 0103 	and.w	r1, r2, #3
 800822e:	2902      	cmp	r1, #2
 8008230:	d006      	beq.n	8008240 <testTrimm+0x78>
 8008232:	2903      	cmp	r1, #3
 8008234:	d006      	beq.n	8008244 <testTrimm+0x7c>
 8008236:	2901      	cmp	r1, #1
 8008238:	bf14      	ite	ne
 800823a:	701f      	strbne	r7, [r3, #0]
 800823c:	701e      	strbeq	r6, [r3, #0]
 800823e:	e002      	b.n	8008246 <testTrimm+0x7e>
 8008240:	7018      	strb	r0, [r3, #0]
 8008242:	e000      	b.n	8008246 <testTrimm+0x7e>
 8008244:	701d      	strb	r5, [r3, #0]
 8008246:	3201      	adds	r2, #1
 8008248:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800824c:	f103 0301 	add.w	r3, r3, #1
 8008250:	d1eb      	bne.n	800822a <testTrimm+0x62>
 8008252:	e17d      	b.n	8008550 <testTrimm+0x388>
 8008254:	f100 0314 	add.w	r3, r0, #20
{

  bBuffer_t *buf = bAlloc(LEN);
  int i;
  buf->size = LEN;
  switch (testInputPatternNum)
 8008258:	2200      	movs	r2, #0
      // IF_16L16P normal sampling
      SET4(0x01, 0x02, 0x11, 0x12)
      break;
    case 2 ... 5:
      // IF_16L16P half sampling
      SET8(0x01, 0x02, 0x11, 0x12, 0x81, 0x82, 0x91, 0x92)
 800825a:	2092      	movs	r0, #146	; 0x92
 800825c:	2591      	movs	r5, #145	; 0x91
 800825e:	2682      	movs	r6, #130	; 0x82
 8008260:	2781      	movs	r7, #129	; 0x81
 8008262:	f04f 0e12 	mov.w	lr, #18
 8008266:	f04f 0c11 	mov.w	ip, #17
 800826a:	f04f 0802 	mov.w	r8, #2
 800826e:	f04f 0901 	mov.w	r9, #1
 8008272:	f002 0107 	and.w	r1, r2, #7
 8008276:	3901      	subs	r1, #1
 8008278:	2906      	cmp	r1, #6
 800827a:	d805      	bhi.n	8008288 <testTrimm+0xc0>
 800827c:	e8df f001 	tbb	[pc, r1]
 8008280:	100d0a07 	.word	0x100d0a07
 8008284:	1412      	.short	0x1412
 8008286:	16          	.byte	0x16
 8008287:	00          	.byte	0x00
 8008288:	f883 9000 	strb.w	r9, [r3]
 800828c:	e00f      	b.n	80082ae <testTrimm+0xe6>
 800828e:	f883 8000 	strb.w	r8, [r3]
 8008292:	e00c      	b.n	80082ae <testTrimm+0xe6>
 8008294:	f883 c000 	strb.w	ip, [r3]
 8008298:	e009      	b.n	80082ae <testTrimm+0xe6>
 800829a:	f883 e000 	strb.w	lr, [r3]
 800829e:	e006      	b.n	80082ae <testTrimm+0xe6>
 80082a0:	701f      	strb	r7, [r3, #0]
 80082a2:	e004      	b.n	80082ae <testTrimm+0xe6>
 80082a4:	701e      	strb	r6, [r3, #0]
 80082a6:	e002      	b.n	80082ae <testTrimm+0xe6>
 80082a8:	701d      	strb	r5, [r3, #0]
 80082aa:	e000      	b.n	80082ae <testTrimm+0xe6>
 80082ac:	7018      	strb	r0, [r3, #0]
 80082ae:	3201      	adds	r2, #1
 80082b0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80082b4:	f103 0301 	add.w	r3, r3, #1
 80082b8:	d1db      	bne.n	8008272 <testTrimm+0xaa>
 80082ba:	e149      	b.n	8008550 <testTrimm+0x388>
 80082bc:	f100 0314 	add.w	r3, r0, #20
{

  bBuffer_t *buf = bAlloc(LEN);
  int i;
  buf->size = LEN;
  switch (testInputPatternNum)
 80082c0:	2100      	movs	r1, #0
      // IF_16L16P half sampling
      SET8(0x01, 0x02, 0x11, 0x12, 0x81, 0x82, 0x91, 0x92)
      break;
    case 6 ... 7:
      //IF_24L24P normal sampling
      SET6(0x01, 0x02, 0x03, 0x11, 0x12, 0x13)
 80082c2:	2006      	movs	r0, #6
 80082c4:	2513      	movs	r5, #19
 80082c6:	2612      	movs	r6, #18
 80082c8:	2711      	movs	r7, #17
 80082ca:	f04f 0e03 	mov.w	lr, #3
 80082ce:	f04f 0c02 	mov.w	ip, #2
 80082d2:	f04f 0801 	mov.w	r8, #1
 80082d6:	fb91 f2f0 	sdiv	r2, r1, r0
 80082da:	fb00 1212 	mls	r2, r0, r2, r1
 80082de:	3a01      	subs	r2, #1
 80082e0:	2a04      	cmp	r2, #4
 80082e2:	d804      	bhi.n	80082ee <testTrimm+0x126>
 80082e4:	e8df f002 	tbb	[pc, r2]
 80082e8:	0e0c0906 	.word	0x0e0c0906
 80082ec:	10          	.byte	0x10
 80082ed:	00          	.byte	0x00
 80082ee:	f883 8000 	strb.w	r8, [r3]
 80082f2:	e00a      	b.n	800830a <testTrimm+0x142>
 80082f4:	f883 c000 	strb.w	ip, [r3]
 80082f8:	e007      	b.n	800830a <testTrimm+0x142>
 80082fa:	f883 e000 	strb.w	lr, [r3]
 80082fe:	e004      	b.n	800830a <testTrimm+0x142>
 8008300:	701f      	strb	r7, [r3, #0]
 8008302:	e002      	b.n	800830a <testTrimm+0x142>
 8008304:	701e      	strb	r6, [r3, #0]
 8008306:	e000      	b.n	800830a <testTrimm+0x142>
 8008308:	701d      	strb	r5, [r3, #0]
 800830a:	3101      	adds	r1, #1
 800830c:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8008310:	f103 0301 	add.w	r3, r3, #1
 8008314:	d1df      	bne.n	80082d6 <testTrimm+0x10e>
 8008316:	e11b      	b.n	8008550 <testTrimm+0x388>
 8008318:	f100 0314 	add.w	r3, r0, #20
{

  bBuffer_t *buf = bAlloc(LEN);
  int i;
  buf->size = LEN;
  switch (testInputPatternNum)
 800831c:	2100      	movs	r1, #0
      //IF_24L24P normal sampling
      SET6(0x01, 0x02, 0x03, 0x11, 0x12, 0x13)
      break;
    case 8 ... 11:
      //IF_24L24P half sampling
      SET12(0x01, 0x02, 0x03, 0x11, 0x12, 0x13, 0x81, 0x82, 0x83, 0x91, 0x92, 0x93)
 800831e:	200c      	movs	r0, #12
 8008320:	2593      	movs	r5, #147	; 0x93
 8008322:	2692      	movs	r6, #146	; 0x92
 8008324:	2791      	movs	r7, #145	; 0x91
 8008326:	f04f 0e83 	mov.w	lr, #131	; 0x83
 800832a:	f04f 0c82 	mov.w	ip, #130	; 0x82
 800832e:	f04f 0881 	mov.w	r8, #129	; 0x81
 8008332:	f04f 0913 	mov.w	r9, #19
 8008336:	f04f 0a12 	mov.w	sl, #18
 800833a:	fb91 f2f0 	sdiv	r2, r1, r0
 800833e:	fb00 1212 	mls	r2, r0, r2, r1
 8008342:	3a01      	subs	r2, #1
 8008344:	2a0a      	cmp	r2, #10
 8008346:	d807      	bhi.n	8008358 <testTrimm+0x190>
 8008348:	e8df f002 	tbb	[pc, r2]
 800834c:	0f0d0b08 	.word	0x0f0d0b08
 8008350:	1b181512 	.word	0x1b181512
 8008354:	201e      	.short	0x201e
 8008356:	22          	.byte	0x22
 8008357:	00          	.byte	0x00
 8008358:	2201      	movs	r2, #1
 800835a:	e000      	b.n	800835e <testTrimm+0x196>
 800835c:	2202      	movs	r2, #2
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	e017      	b.n	8008392 <testTrimm+0x1ca>
 8008362:	2203      	movs	r2, #3
 8008364:	e7fb      	b.n	800835e <testTrimm+0x196>
 8008366:	2211      	movs	r2, #17
 8008368:	e7f9      	b.n	800835e <testTrimm+0x196>
 800836a:	f883 a000 	strb.w	sl, [r3]
 800836e:	e010      	b.n	8008392 <testTrimm+0x1ca>
 8008370:	f883 9000 	strb.w	r9, [r3]
 8008374:	e00d      	b.n	8008392 <testTrimm+0x1ca>
 8008376:	f883 8000 	strb.w	r8, [r3]
 800837a:	e00a      	b.n	8008392 <testTrimm+0x1ca>
 800837c:	f883 c000 	strb.w	ip, [r3]
 8008380:	e007      	b.n	8008392 <testTrimm+0x1ca>
 8008382:	f883 e000 	strb.w	lr, [r3]
 8008386:	e004      	b.n	8008392 <testTrimm+0x1ca>
 8008388:	701f      	strb	r7, [r3, #0]
 800838a:	e002      	b.n	8008392 <testTrimm+0x1ca>
 800838c:	701e      	strb	r6, [r3, #0]
 800838e:	e000      	b.n	8008392 <testTrimm+0x1ca>
 8008390:	701d      	strb	r5, [r3, #0]
 8008392:	3101      	adds	r1, #1
 8008394:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8008398:	f103 0301 	add.w	r3, r3, #1
 800839c:	d1cd      	bne.n	800833a <testTrimm+0x172>
 800839e:	e0d7      	b.n	8008550 <testTrimm+0x388>
{

  bBuffer_t *buf = bAlloc(LEN);
  int i;
  buf->size = LEN;
  switch (testInputPatternNum)
 80083a0:	2200      	movs	r2, #0
 80083a2:	f100 0314 	add.w	r3, r0, #20
      //IF_24L24P half sampling
      SET12(0x01, 0x02, 0x03, 0x11, 0x12, 0x13, 0x81, 0x82, 0x83, 0x91, 0x92, 0x93)
      break;
    case 12 ... 13:
      // IF_16L16N16P16N normal sampling
      SET8(0x01, 0x02, 0x00, 0x00, 0x11, 0x12, 0x00, 0x00)
 80083a6:	4611      	mov	r1, r2
 80083a8:	2512      	movs	r5, #18
 80083aa:	2611      	movs	r6, #17
 80083ac:	2702      	movs	r7, #2
 80083ae:	f04f 0e01 	mov.w	lr, #1
 80083b2:	f002 0007 	and.w	r0, r2, #7
 80083b6:	3801      	subs	r0, #1
 80083b8:	2806      	cmp	r0, #6
 80083ba:	d805      	bhi.n	80083c8 <testTrimm+0x200>
 80083bc:	e8df f000 	tbb	[pc, r0]
 80083c0:	090d0d07 	.word	0x090d0d07
 80083c4:	0d0b      	.short	0x0d0b
 80083c6:	0d          	.byte	0x0d
 80083c7:	00          	.byte	0x00
 80083c8:	f883 e000 	strb.w	lr, [r3]
 80083cc:	e006      	b.n	80083dc <testTrimm+0x214>
 80083ce:	701f      	strb	r7, [r3, #0]
 80083d0:	e004      	b.n	80083dc <testTrimm+0x214>
 80083d2:	701e      	strb	r6, [r3, #0]
 80083d4:	e002      	b.n	80083dc <testTrimm+0x214>
 80083d6:	701d      	strb	r5, [r3, #0]
 80083d8:	e000      	b.n	80083dc <testTrimm+0x214>
 80083da:	7019      	strb	r1, [r3, #0]
 80083dc:	3201      	adds	r2, #1
 80083de:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80083e2:	f103 0301 	add.w	r3, r3, #1
 80083e6:	d1e4      	bne.n	80083b2 <testTrimm+0x1ea>
 80083e8:	e0b2      	b.n	8008550 <testTrimm+0x388>
{

  bBuffer_t *buf = bAlloc(LEN);
  int i;
  buf->size = LEN;
  switch (testInputPatternNum)
 80083ea:	2100      	movs	r1, #0
 80083ec:	f100 0314 	add.w	r3, r0, #20
      // IF_16L16N16P16N normal sampling
      SET8(0x01, 0x02, 0x00, 0x00, 0x11, 0x12, 0x00, 0x00)
      break;
    case 14 ... 17:
      // IF_16L16N16P16N half sampling
      SET16(0x01, 0x02, 0x00, 0x00, 0x11, 0x12, 0x00, 0x00, 0x81, 0x82, 0x00, 0x00, 0x91, 0x92, 0x00, 0x00)
 80083f0:	460a      	mov	r2, r1
 80083f2:	2592      	movs	r5, #146	; 0x92
 80083f4:	2691      	movs	r6, #145	; 0x91
 80083f6:	2782      	movs	r7, #130	; 0x82
 80083f8:	f04f 0e81 	mov.w	lr, #129	; 0x81
 80083fc:	f04f 0c12 	mov.w	ip, #18
 8008400:	f04f 0811 	mov.w	r8, #17
 8008404:	f04f 0902 	mov.w	r9, #2
 8008408:	f04f 0a01 	mov.w	sl, #1
 800840c:	f001 000f 	and.w	r0, r1, #15
 8008410:	3801      	subs	r0, #1
 8008412:	280e      	cmp	r0, #14
 8008414:	d809      	bhi.n	800842a <testTrimm+0x262>
 8008416:	e8df f000 	tbb	[pc, r0]
 800841a:	1d0b      	.short	0x1d0b
 800841c:	1d110e1d 	.word	0x1d110e1d
 8008420:	1d17141d 	.word	0x1d17141d
 8008424:	1d1b191d 	.word	0x1d1b191d
 8008428:	1d          	.byte	0x1d
 8008429:	00          	.byte	0x00
 800842a:	f883 a000 	strb.w	sl, [r3]
 800842e:	e012      	b.n	8008456 <testTrimm+0x28e>
 8008430:	f883 9000 	strb.w	r9, [r3]
 8008434:	e00f      	b.n	8008456 <testTrimm+0x28e>
 8008436:	f883 8000 	strb.w	r8, [r3]
 800843a:	e00c      	b.n	8008456 <testTrimm+0x28e>
 800843c:	f883 c000 	strb.w	ip, [r3]
 8008440:	e009      	b.n	8008456 <testTrimm+0x28e>
 8008442:	f883 e000 	strb.w	lr, [r3]
 8008446:	e006      	b.n	8008456 <testTrimm+0x28e>
 8008448:	701f      	strb	r7, [r3, #0]
 800844a:	e004      	b.n	8008456 <testTrimm+0x28e>
 800844c:	701e      	strb	r6, [r3, #0]
 800844e:	e002      	b.n	8008456 <testTrimm+0x28e>
 8008450:	701d      	strb	r5, [r3, #0]
 8008452:	e000      	b.n	8008456 <testTrimm+0x28e>
 8008454:	701a      	strb	r2, [r3, #0]
 8008456:	3101      	adds	r1, #1
 8008458:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800845c:	f103 0301 	add.w	r3, r3, #1
 8008460:	d1d4      	bne.n	800840c <testTrimm+0x244>
 8008462:	e075      	b.n	8008550 <testTrimm+0x388>
 8008464:	10002b08 	.word	0x10002b08
{

  bBuffer_t *buf = bAlloc(LEN);
  int i;
  buf->size = LEN;
  switch (testInputPatternNum)
 8008468:	2200      	movs	r2, #0
 800846a:	f100 0314 	add.w	r3, r0, #20
      // IF_16L16N16P16N half sampling
      SET16(0x01, 0x02, 0x00, 0x00, 0x11, 0x12, 0x00, 0x00, 0x81, 0x82, 0x00, 0x00, 0x91, 0x92, 0x00, 0x00)
      break;
    case 18 ... 19:
      // IF_16L8L8N16P8P8N normal sampling
      SET8(0x02, 0x03, 0x00, 0x01, 0x82, 0x83, 0x00, 0x81)
 800846e:	2581      	movs	r5, #129	; 0x81
 8008470:	4610      	mov	r0, r2
 8008472:	2683      	movs	r6, #131	; 0x83
 8008474:	2782      	movs	r7, #130	; 0x82
 8008476:	f04f 0e01 	mov.w	lr, #1
 800847a:	f04f 0c03 	mov.w	ip, #3
 800847e:	f04f 0802 	mov.w	r8, #2
 8008482:	f002 0107 	and.w	r1, r2, #7
 8008486:	3901      	subs	r1, #1
 8008488:	2906      	cmp	r1, #6
 800848a:	d805      	bhi.n	8008498 <testTrimm+0x2d0>
 800848c:	e8df f001 	tbb	[pc, r1]
 8008490:	0d0a1107 	.word	0x0d0a1107
 8008494:	110f      	.short	0x110f
 8008496:	13          	.byte	0x13
 8008497:	00          	.byte	0x00
 8008498:	f883 8000 	strb.w	r8, [r3]
 800849c:	e00c      	b.n	80084b8 <testTrimm+0x2f0>
 800849e:	f883 c000 	strb.w	ip, [r3]
 80084a2:	e009      	b.n	80084b8 <testTrimm+0x2f0>
 80084a4:	f883 e000 	strb.w	lr, [r3]
 80084a8:	e006      	b.n	80084b8 <testTrimm+0x2f0>
 80084aa:	701f      	strb	r7, [r3, #0]
 80084ac:	e004      	b.n	80084b8 <testTrimm+0x2f0>
 80084ae:	701e      	strb	r6, [r3, #0]
 80084b0:	e002      	b.n	80084b8 <testTrimm+0x2f0>
 80084b2:	7018      	strb	r0, [r3, #0]
 80084b4:	e000      	b.n	80084b8 <testTrimm+0x2f0>
 80084b6:	701d      	strb	r5, [r3, #0]
 80084b8:	3201      	adds	r2, #1
 80084ba:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80084be:	f103 0301 	add.w	r3, r3, #1
 80084c2:	d1de      	bne.n	8008482 <testTrimm+0x2ba>
 80084c4:	e044      	b.n	8008550 <testTrimm+0x388>
{

  bBuffer_t *buf = bAlloc(LEN);
  int i;
  buf->size = LEN;
  switch (testInputPatternNum)
 80084c6:	2200      	movs	r2, #0
 80084c8:	f100 0314 	add.w	r3, r0, #20
      // IF_16L8L8N16P8P8N normal sampling
      SET8(0x02, 0x03, 0x00, 0x01, 0x82, 0x83, 0x00, 0x81)
      break;
    case 20 ... 23:
      // IF_16L8L8N16P8P8N half sampling
      SET16(0x02, 0x03, 0x00, 0x01, 0x12, 0x13, 0x00, 0x11, 0x82, 0x83, 0x00, 0x81, 0x92, 0x93, 0x00, 0x91)
 80084cc:	2591      	movs	r5, #145	; 0x91
 80084ce:	4611      	mov	r1, r2
 80084d0:	2693      	movs	r6, #147	; 0x93
 80084d2:	2792      	movs	r7, #146	; 0x92
 80084d4:	f04f 0e81 	mov.w	lr, #129	; 0x81
 80084d8:	f04f 0c83 	mov.w	ip, #131	; 0x83
 80084dc:	f04f 0882 	mov.w	r8, #130	; 0x82
 80084e0:	f04f 0911 	mov.w	r9, #17
 80084e4:	f04f 0a13 	mov.w	sl, #19
 80084e8:	f002 000f 	and.w	r0, r2, #15
 80084ec:	3801      	subs	r0, #1
 80084ee:	280e      	cmp	r0, #14
 80084f0:	d809      	bhi.n	8008506 <testTrimm+0x33e>
 80084f2:	e8df f000 	tbb	[pc, r0]
 80084f6:	240a      	.short	0x240a
 80084f8:	24110f0d 	.word	0x24110f0d
 80084fc:	241a1714 	.word	0x241a1714
 8008500:	2422201d 	.word	0x2422201d
 8008504:	26          	.byte	0x26
 8008505:	00          	.byte	0x00
 8008506:	2002      	movs	r0, #2
 8008508:	e000      	b.n	800850c <testTrimm+0x344>
 800850a:	2003      	movs	r0, #3
 800850c:	7018      	strb	r0, [r3, #0]
 800850e:	e019      	b.n	8008544 <testTrimm+0x37c>
 8008510:	2001      	movs	r0, #1
 8008512:	e7fb      	b.n	800850c <testTrimm+0x344>
 8008514:	2012      	movs	r0, #18
 8008516:	e7f9      	b.n	800850c <testTrimm+0x344>
 8008518:	f883 a000 	strb.w	sl, [r3]
 800851c:	e012      	b.n	8008544 <testTrimm+0x37c>
 800851e:	f883 9000 	strb.w	r9, [r3]
 8008522:	e00f      	b.n	8008544 <testTrimm+0x37c>
 8008524:	f883 8000 	strb.w	r8, [r3]
 8008528:	e00c      	b.n	8008544 <testTrimm+0x37c>
 800852a:	f883 c000 	strb.w	ip, [r3]
 800852e:	e009      	b.n	8008544 <testTrimm+0x37c>
 8008530:	f883 e000 	strb.w	lr, [r3]
 8008534:	e006      	b.n	8008544 <testTrimm+0x37c>
 8008536:	701f      	strb	r7, [r3, #0]
 8008538:	e004      	b.n	8008544 <testTrimm+0x37c>
 800853a:	701e      	strb	r6, [r3, #0]
 800853c:	e002      	b.n	8008544 <testTrimm+0x37c>
 800853e:	7019      	strb	r1, [r3, #0]
 8008540:	e000      	b.n	8008544 <testTrimm+0x37c>
 8008542:	701d      	strb	r5, [r3, #0]
 8008544:	3201      	adds	r2, #1
 8008546:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800854a:	f103 0301 	add.w	r3, r3, #1
 800854e:	d1cb      	bne.n	80084e8 <testTrimm+0x320>
      break;
    }


  if (bEnqueue(&inQueueTest, buf) < 0)
 8008550:	4621      	mov	r1, r4
 8008552:	4806      	ldr	r0, [pc, #24]	; (800856c <testTrimm+0x3a4>)
 8008554:	f00c fc9f 	bl	8014e96 <bEnqueue>
 8008558:	2800      	cmp	r0, #0
 800855a:	da04      	bge.n	8008566 <testTrimm+0x39e>
    bFree(buf);
 800855c:	4620      	mov	r0, r4
}
 800855e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      break;
    }


  if (bEnqueue(&inQueueTest, buf) < 0)
    bFree(buf);
 8008562:	f00c bf65 	b.w	8015430 <bFree>
 8008566:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856a:	bf00      	nop
 800856c:	10002748 	.word	0x10002748

08008570 <testInputPatternChange>:
}

int testInputPatternChange(int pattern)
{
  testInputPatternNum = pattern;
 8008570:	4b1f      	ldr	r3, [pc, #124]	; (80085f0 <testInputPatternChange+0x80>)
  if (bEnqueue(&inQueueTest, buf) < 0)
    bFree(buf);
}

int testInputPatternChange(int pattern)
{
 8008572:	b510      	push	{r4, lr}
 8008574:	4604      	mov	r4, r0
  testInputPatternNum = pattern;
 8008576:	6018      	str	r0, [r3, #0]
  switch (testInputPatternNum)
 8008578:	2817      	cmp	r0, #23
 800857a:	d832      	bhi.n	80085e2 <testInputPatternChange+0x72>
 800857c:	e8df f000 	tbb	[pc, r0]
 8008580:	0c0c0c0c 	.word	0x0c0c0c0c
 8008584:	11110c0c 	.word	0x11110c0c
 8008588:	11111111 	.word	0x11111111
 800858c:	1b1b1b1b 	.word	0x1b1b1b1b
 8008590:	25251b1b 	.word	0x25251b1b
 8008594:	25252525 	.word	0x25252525
    {
    case 0 ... 5:
      formatChange(INPUT_TEST, IF_16L16P, testRate[testInputPatternNum%TEST_RATES]);
 8008598:	4b16      	ldr	r3, [pc, #88]	; (80085f4 <testInputPatternChange+0x84>)
 800859a:	2100      	movs	r1, #0
 800859c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80085a0:	e01c      	b.n	80085dc <testInputPatternChange+0x6c>
      break;
    case 6 ... 11:
      formatChange(INPUT_TEST, IF_24L24P, testRate[testInputPatternNum%TEST_RATES]);
 80085a2:	2206      	movs	r2, #6
 80085a4:	fb90 f3f2 	sdiv	r3, r0, r2
 80085a8:	fb02 0313 	mls	r3, r2, r3, r0
 80085ac:	4a11      	ldr	r2, [pc, #68]	; (80085f4 <testInputPatternChange+0x84>)
 80085ae:	2102      	movs	r1, #2
 80085b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085b4:	e012      	b.n	80085dc <testInputPatternChange+0x6c>
      break;
    case 12 ... 17:
      formatChange(INPUT_TEST, IF_16L16N16P16N, testRate[testInputPatternNum%TEST_RATES]);
 80085b6:	2206      	movs	r2, #6
 80085b8:	fb90 f3f2 	sdiv	r3, r0, r2
 80085bc:	fb02 0313 	mls	r3, r2, r3, r0
 80085c0:	4a0c      	ldr	r2, [pc, #48]	; (80085f4 <testInputPatternChange+0x84>)
 80085c2:	2101      	movs	r1, #1
 80085c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085c8:	e008      	b.n	80085dc <testInputPatternChange+0x6c>
      break;
    case 18 ... 23:
      formatChange(INPUT_TEST, IF_16L8L8N16P8P8N, testRate[testInputPatternNum%TEST_RATES]);
 80085ca:	2206      	movs	r2, #6
 80085cc:	fb90 f3f2 	sdiv	r3, r0, r2
 80085d0:	fb02 0313 	mls	r3, r2, r3, r0
 80085d4:	4a07      	ldr	r2, [pc, #28]	; (80085f4 <testInputPatternChange+0x84>)
 80085d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085da:	2104      	movs	r1, #4
 80085dc:	2007      	movs	r0, #7
 80085de:	f00d fd31 	bl	8016044 <formatChange>
      break;
    }
  return (pattern+1)%TEST_PATTERNS_NUM;
 80085e2:	3401      	adds	r4, #1
 80085e4:	2318      	movs	r3, #24
 80085e6:	fb94 f0f3 	sdiv	r0, r4, r3
}
 80085ea:	fb03 4010 	mls	r0, r3, r0, r4
 80085ee:	bd10      	pop	{r4, pc}
 80085f0:	10002b08 	.word	0x10002b08
 80085f4:	0801d31c 	.word	0x0801d31c

080085f8 <systemInit>:


void systemInit(void)
{
 80085f8:	b508      	push	{r3, lr}
  hwBoardInit();
 80085fa:	f005 ffb1 	bl	800e560 <hwBoardInit>
  LEDInit();
 80085fe:	f004 fdad 	bl	800d15c <LEDInit>

  void messageProcessorInit(void);
  messageProcessorInit();
 8008602:	f000 fb45 	bl	8008c90 <messageProcessorInit>

  /* Initialize tasks */

  spiHelperInit();
 8008606:	f003 fe35 	bl	800c274 <spiHelperInit>
  CommunicatorInit();
 800860a:	f002 ff9d 	bl	800b548 <CommunicatorInit>
  HWCommInit();
 800860e:	f003 fbe7 	bl	800bde0 <HWCommInit>
  saiInit();
 8008612:	f00b ff21 	bl	8014458 <saiInit>
  aConvInit();
 8008616:	f00e fa1d 	bl	8016a54 <aConvInit>

  debugInit();
 800861a:	f005 fceb 	bl	800dff4 <debugInit>
  tasksInitEnd();

}
 800861e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HWCommInit();
  saiInit();
  aConvInit();

  debugInit();
  tasksInitEnd();
 8008622:	f000 b9f5 	b.w	8008a10 <tasksInitEnd>

08008626 <main>:

}
/*-----------------------------------------------------------*/
int main(void)
{
 8008626:	b508      	push	{r3, lr}

  /* Set up the clocks and memory interface. */
  /* Initialize HW ports, ADCs. LEDs */
  NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8008628:	f44f 7040 	mov.w	r0, #768	; 0x300
 800862c:	f007 fffe 	bl	801062c <NVIC_PriorityGroupConfig>
  SystemInit();
 8008630:	f007 ff74 	bl	801051c <SystemInit>

  watchdogInit();
 8008634:	f005 fd64 	bl	800e100 <watchdogInit>


  vTaskStartScheduler();
 8008638:	f002 f93e 	bl	800a8b8 <vTaskStartScheduler>
 800863c:	e7fe      	b.n	800863c <main+0x16>
	...

08008640 <Reset_Handler>:


void Reset_Handler(void)
{
#ifdef DEBUG
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008640:	4a12      	ldr	r2, [pc, #72]	; (800868c <Reset_Handler+0x4c>)

  //Move initialization data int RAM
  uint32_t *dst = (uint32_t *) & __sdata;
  uint32_t *src = (uint32_t *) & __etext;

  while (dst < (uint32_t *) & __edata)
 8008642:	4913      	ldr	r1, [pc, #76]	; (8008690 <Reset_Handler+0x50>)


void Reset_Handler(void)
{
#ifdef DEBUG
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008644:	68d3      	ldr	r3, [r2, #12]
 8008646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800864a:	60d3      	str	r3, [r2, #12]
 800864c:	4a11      	ldr	r2, [pc, #68]	; (8008694 <Reset_Handler+0x54>)
 800864e:	4b12      	ldr	r3, [pc, #72]	; (8008698 <Reset_Handler+0x58>)

  //Move initialization data int RAM
  uint32_t *dst = (uint32_t *) & __sdata;
  uint32_t *src = (uint32_t *) & __etext;

  while (dst < (uint32_t *) & __edata)
 8008650:	428b      	cmp	r3, r1
 8008652:	d204      	bcs.n	800865e <Reset_Handler+0x1e>
    *(dst++) = *(src++);
 8008654:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008658:	f843 0b04 	str.w	r0, [r3], #4
 800865c:	e7f8      	b.n	8008650 <Reset_Handler+0x10>

  int irq;

  for (irq = 0; irq < IRQ_HANDLER_POOL; irq++)
    pool[irq].next = &pool[irq + 1];
 800865e:	490f      	ldr	r1, [pc, #60]	; (800869c <Reset_Handler+0x5c>)
 8008660:	2300      	movs	r3, #0
 8008662:	f103 0208 	add.w	r2, r3, #8
 8008666:	1888      	adds	r0, r1, r2
  while (dst < (uint32_t *) & __edata)
    *(dst++) = *(src++);

  int irq;

  for (irq = 0; irq < IRQ_HANDLER_POOL; irq++)
 8008668:	f5b2 7f58 	cmp.w	r2, #864	; 0x360
    pool[irq].next = &pool[irq + 1];
 800866c:	5058      	str	r0, [r3, r1]
 800866e:	4613      	mov	r3, r2
 8008670:	4a0b      	ldr	r2, [pc, #44]	; (80086a0 <Reset_Handler+0x60>)
  while (dst < (uint32_t *) & __edata)
    *(dst++) = *(src++);

  int irq;

  for (irq = 0; irq < IRQ_HANDLER_POOL; irq++)
 8008672:	d1f6      	bne.n	8008662 <Reset_Handler+0x22>
    pool[irq].next = &pool[irq + 1];
  pool[IRQ_HANDLER_POOL - 1].next = NULL;
 8008674:	2300      	movs	r3, #0
 8008676:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  for (irq = 0; irq < ISR_SIZE; irq++)
    handlers[irq] = NULL;
 800867a:	4619      	mov	r1, r3
 800867c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  int irq;

  for (irq = 0; irq < IRQ_HANDLER_POOL; irq++)
    pool[irq].next = &pool[irq + 1];
  pool[IRQ_HANDLER_POOL - 1].next = NULL;
  for (irq = 0; irq < ISR_SIZE; irq++)
 8008680:	3301      	adds	r3, #1
 8008682:	2b6c      	cmp	r3, #108	; 0x6c
 8008684:	d1fa      	bne.n	800867c <Reset_Handler+0x3c>
    handlers[irq] = NULL;

  main();
 8008686:	f7ff bfce 	b.w	8008626 <main>
 800868a:	bf00      	nop
 800868c:	e000edf0 	.word	0xe000edf0
 8008690:	10003c9c 	.word	0x10003c9c
 8008694:	0803f900 	.word	0x0803f900
 8008698:	10001200 	.word	0x10001200
 800869c:	200181b0 	.word	0x200181b0
 80086a0:	20018000 	.word	0x20018000

080086a4 <amIInIRQ>:
}

static int irqRef = 0;
int amIInIRQ(void)
{
  return (irqRef != 0);
 80086a4:	4b02      	ldr	r3, [pc, #8]	; (80086b0 <amIInIRQ+0xc>)
 80086a6:	6818      	ldr	r0, [r3, #0]
}
 80086a8:	3000      	adds	r0, #0
 80086aa:	bf18      	it	ne
 80086ac:	2001      	movne	r0, #1
 80086ae:	4770      	bx	lr
 80086b0:	10002b0c 	.word	0x10002b0c

080086b4 <IRQHandler>:

static void __attribute__ ((no_instrument_function, interrupt, optimize("-O3"))) IRQHandler(void)
{
 80086b4:	4668      	mov	r0, sp
 80086b6:	f020 0107 	bic.w	r1, r0, #7
 80086ba:	468d      	mov	sp, r1
 80086bc:	b531      	push	{r0, r4, r5, lr}
  irqRef++;
 80086be:	4d0b      	ldr	r5, [pc, #44]	; (80086ec <IRQHandler+0x38>)
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	3301      	adds	r3, #1
 80086c4:	602b      	str	r3, [r5, #0]

  irqHandler_t *handle = handlers[getIrqNum()];
 80086c6:	f000 f8af 	bl	8008828 <getIrqNum>
 80086ca:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <IRQHandler+0x3c>)
 80086cc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]

  while (handle)
 80086d0:	b124      	cbz	r4, 80086dc <IRQHandler+0x28>
    {
      handle->handler();
 80086d2:	6863      	ldr	r3, [r4, #4]
 80086d4:	4798      	blx	r3
      handle = handle->next;
 80086d6:	6824      	ldr	r4, [r4, #0]
{
  irqRef++;

  irqHandler_t *handle = handlers[getIrqNum()];

  while (handle)
 80086d8:	2c00      	cmp	r4, #0
 80086da:	d1fa      	bne.n	80086d2 <IRQHandler+0x1e>
    {
      handle->handler();
      handle = handle->next;
    }
  irqRef--;
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	3b01      	subs	r3, #1
 80086e0:	602b      	str	r3, [r5, #0]
}
 80086e2:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
 80086e6:	4685      	mov	sp, r0
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	10002b0c 	.word	0x10002b0c
 80086f0:	20018000 	.word	0x20018000

080086f4 <BusFault_Handler>:

static void __attribute__ ((no_instrument_function, interrupt)) Unused_Handler(void)
{
 80086f4:	4668      	mov	r0, sp
 80086f6:	f020 0107 	bic.w	r1, r0, #7
 80086fa:	468d      	mov	sp, r1
 80086fc:	b501      	push	{r0, lr}
}
 80086fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8008702:	4685      	mov	sp, r0
 8008704:	4770      	bx	lr
	...

08008708 <registerIRQ>:


int registerIRQ(int irq, void (*handler) (void))
{
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4604      	mov	r4, r0
 800870c:	460d      	mov	r5, r1
  taskENTER_CRITICAL();
 800870e:	f001 fe4d 	bl	800a3ac <vPortEnterCritical>
  if (!poolFree)
 8008712:	4a19      	ldr	r2, [pc, #100]	; (8008778 <registerIRQ+0x70>)
 8008714:	6813      	ldr	r3, [r2, #0]
 8008716:	b95b      	cbnz	r3, 8008730 <registerIRQ+0x28>
    {
      taskEXIT_CRITICAL();
 8008718:	f001 fe5a 	bl	800a3d0 <vPortExitCritical>
      dprintf(LL_ERROR, "IRQ handlers pool depleted.");
 800871c:	4b17      	ldr	r3, [pc, #92]	; (800877c <registerIRQ+0x74>)
 800871e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	db22      	blt.n	800876a <registerIRQ+0x62>
 8008724:	4816      	ldr	r0, [pc, #88]	; (8008780 <registerIRQ+0x78>)
 8008726:	f000 fa7f 	bl	8008c28 <xprintf>
      return -1;
 800872a:	f04f 30ff 	mov.w	r0, #4294967295
 800872e:	bd38      	pop	{r3, r4, r5, pc}
    }
  irq += 16;
 8008730:	f104 0010 	add.w	r0, r4, #16
  if (irq >= ISR_SIZE)
 8008734:	286b      	cmp	r0, #107	; 0x6b
 8008736:	dd0b      	ble.n	8008750 <registerIRQ+0x48>
    {
      taskEXIT_CRITICAL();
 8008738:	f001 fe4a 	bl	800a3d0 <vPortExitCritical>
      dprintf(LL_ERROR, "IRQ handler index invalid.");
 800873c:	4b0f      	ldr	r3, [pc, #60]	; (800877c <registerIRQ+0x74>)
 800873e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	db15      	blt.n	8008770 <registerIRQ+0x68>
 8008744:	480f      	ldr	r0, [pc, #60]	; (8008784 <registerIRQ+0x7c>)
 8008746:	f000 fa6f 	bl	8008c28 <xprintf>
      return -2;
 800874a:	f06f 0001 	mvn.w	r0, #1
 800874e:	bd38      	pop	{r3, r4, r5, pc}
    }
  irqHandler_t *handle = poolFree;

  poolFree = poolFree->next;
 8008750:	6819      	ldr	r1, [r3, #0]
 8008752:	6011      	str	r1, [r2, #0]

  handle->next = handlers[irq];
 8008754:	4a0c      	ldr	r2, [pc, #48]	; (8008788 <registerIRQ+0x80>)
 8008756:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 800875a:	6019      	str	r1, [r3, #0]
  handlers[irq] = handle;
 800875c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  handle->handler = handler;
 8008760:	605d      	str	r5, [r3, #4]
  taskEXIT_CRITICAL();
 8008762:	f001 fe35 	bl	800a3d0 <vPortExitCritical>
  return 0;
 8008766:	2000      	movs	r0, #0
 8008768:	bd38      	pop	{r3, r4, r5, pc}
  taskENTER_CRITICAL();
  if (!poolFree)
    {
      taskEXIT_CRITICAL();
      dprintf(LL_ERROR, "IRQ handlers pool depleted.");
      return -1;
 800876a:	f04f 30ff 	mov.w	r0, #4294967295
 800876e:	bd38      	pop	{r3, r4, r5, pc}
  irq += 16;
  if (irq >= ISR_SIZE)
    {
      taskEXIT_CRITICAL();
      dprintf(LL_ERROR, "IRQ handler index invalid.");
      return -2;
 8008770:	f06f 0001 	mvn.w	r0, #1
  handle->next = handlers[irq];
  handlers[irq] = handle;
  handle->handler = handler;
  taskEXIT_CRITICAL();
  return 0;
}
 8008774:	bd38      	pop	{r3, r4, r5, pc}
 8008776:	bf00      	nop
 8008778:	10001200 	.word	0x10001200
 800877c:	10001000 	.word	0x10001000
 8008780:	0801d334 	.word	0x0801d334
 8008784:	0801d350 	.word	0x0801d350
 8008788:	20018000 	.word	0x20018000

0800878c <sysTickHandler>:
void xPortSysTickHandler(void);
static uint64_t uptime = 0;
static uint64_t preciseUptime = 0;

void sysTickHandler(void)
{
 800878c:	4668      	mov	r0, sp
 800878e:	f020 0107 	bic.w	r1, r0, #7
 8008792:	468d      	mov	sp, r1
 8008794:	b531      	push	{r0, r4, r5, lr}
  uptime += 1000000ULL;
 8008796:	4908      	ldr	r1, [pc, #32]	; (80087b8 <sysTickHandler+0x2c>)
 8008798:	4a08      	ldr	r2, [pc, #32]	; (80087bc <sysTickHandler+0x30>)
 800879a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800879e:	2300      	movs	r3, #0
 80087a0:	1912      	adds	r2, r2, r4
 80087a2:	416b      	adcs	r3, r5
 80087a4:	e9c1 2300 	strd	r2, r3, [r1]
  preciseUptime = uptime;
 80087a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  xPortSysTickHandler();
 80087ac:	f001 fe38 	bl	800a420 <xPortSysTickHandler>
}
 80087b0:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
 80087b4:	4685      	mov	sp, r0
 80087b6:	4770      	bx	lr
 80087b8:	10002b10 	.word	0x10002b10
 80087bc:	000f4240 	.word	0x000f4240

080087c0 <getUptimePrecise>:
  volatile uint32_t tick = (uint32_t)SysTick->VAL;
  return (uint64_t)((((SystemCoreClock/1000UL) - tick)*1000UL)/(SystemCoreClock/1000000UL));
}

uint64_t getUptimePrecise(void)
{
 80087c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint64_t prevUptime = 0;
  int mask =  portSET_INTERRUPT_MASK_FROM_ISR();
 80087c2:	f001 fdd9 	bl	800a378 <ulPortSetInterruptMask>
  preciseUptime = uptime;
  xPortSysTickHandler();
}
static inline uint64_t sysTickOffset(void)
{
  volatile uint32_t tick = (uint32_t)SysTick->VAL;
 80087c6:	4b14      	ldr	r3, [pc, #80]	; (8008818 <getUptimePrecise+0x58>)

uint64_t getUptimePrecise(void)
{
  uint64_t prevUptime = 0;
  int mask =  portSET_INTERRUPT_MASK_FROM_ISR();
  prevUptime = preciseUptime;
 80087c8:	4c14      	ldr	r4, [pc, #80]	; (800881c <getUptimePrecise+0x5c>)
  preciseUptime = uptime;
  xPortSysTickHandler();
}
static inline uint64_t sysTickOffset(void)
{
  volatile uint32_t tick = (uint32_t)SysTick->VAL;
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	9301      	str	r3, [sp, #4]
  return (uint64_t)((((SystemCoreClock/1000UL) - tick)*1000UL)/(SystemCoreClock/1000000UL));
 80087ce:	9d01      	ldr	r5, [sp, #4]
 80087d0:	4b13      	ldr	r3, [pc, #76]	; (8008820 <getUptimePrecise+0x60>)
 80087d2:	681a      	ldr	r2, [r3, #0]
uint64_t getUptimePrecise(void)
{
  uint64_t prevUptime = 0;
  int mask =  portSET_INTERRUPT_MASK_FROM_ISR();
  prevUptime = preciseUptime;
  preciseUptime = uptime + sysTickOffset();
 80087d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80087dc:	1b49      	subs	r1, r1, r5
 80087de:	434b      	muls	r3, r1
 80087e0:	4910      	ldr	r1, [pc, #64]	; (8008824 <getUptimePrecise+0x64>)
 80087e2:	fbb2 f1f1 	udiv	r1, r2, r1
 80087e6:	fbb3 f1f1 	udiv	r1, r3, r1
 80087ea:	e9d4 2300 	ldrd	r2, r3, [r4]

uint64_t getUptimePrecise(void)
{
  uint64_t prevUptime = 0;
  int mask =  portSET_INTERRUPT_MASK_FROM_ISR();
  prevUptime = preciseUptime;
 80087ee:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
  preciseUptime = uptime + sysTickOffset();
 80087f2:	1852      	adds	r2, r2, r1
 80087f4:	f143 0300 	adc.w	r3, r3, #0

  if(prevUptime > preciseUptime)
 80087f8:	42bb      	cmp	r3, r7
 80087fa:	bf08      	it	eq
 80087fc:	42b2      	cmpeq	r2, r6
 80087fe:	d203      	bcs.n	8008808 <getUptimePrecise+0x48>
    preciseUptime += 1000000ULL;
 8008800:	4e08      	ldr	r6, [pc, #32]	; (8008824 <getUptimePrecise+0x64>)
 8008802:	2700      	movs	r7, #0
 8008804:	1992      	adds	r2, r2, r6
 8008806:	417b      	adcs	r3, r7
 8008808:	e9c4 2302 	strd	r2, r3, [r4, #8]

  portCLEAR_INTERRUPT_MASK_FROM_ISR(mask);
 800880c:	f001 fddc 	bl	800a3c8 <vPortClearInterruptMask>

  return preciseUptime;
}
 8008810:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8008814:	b003      	add	sp, #12
 8008816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008818:	e000e010 	.word	0xe000e010
 800881c:	10002b10 	.word	0x10002b10
 8008820:	1000237c 	.word	0x1000237c
 8008824:	000f4240 	.word	0x000f4240

08008828 <getIrqNum>:
  return primask & 1;
}
int getIrqNum(void)
{
  uint32_t irqNum;
  asm volatile ("mrs %0, ipsr":"=r" (irqNum));
 8008828:	f3ef 8005 	mrs	r0, IPSR
  return irqNum;
}
 800882c:	4770      	bx	lr

0800882e <vApplicationStackOverflowHook>:
    __asm volatile ("cpsie i");
}
/*-----------------------------------------------------------*/
void vApplicationStackOverflowHook(xTaskHandle pxTask, signed char *pcTaskName);
void vApplicationStackOverflowHook(xTaskHandle pxTask, signed char *pcTaskName)
{
 800882e:	b082      	sub	sp, #8
     parameters are corrupt then inspect pxCurrentTCB to find which was the
     offending task. */
  (void)pxTask;
  (void)pcTaskName;
  {
    volatile int s = 1;
 8008830:	2301      	movs	r3, #1
 8008832:	9301      	str	r3, [sp, #4]
    while (s);
 8008834:	9b01      	ldr	r3, [sp, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1fc      	bne.n	8008834 <vApplicationStackOverflowHook+0x6>
  }
}
 800883a:	b002      	add	sp, #8
 800883c:	4770      	bx	lr
	...

08008840 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void);
void vApplicationMallocFailedHook(void)
{
 8008840:	b507      	push	{r0, r1, r2, lr}
  dprintf(LL_ERROR, "Heap depleted\n");
 8008842:	4b07      	ldr	r3, [pc, #28]	; (8008860 <vApplicationMallocFailedHook+0x20>)
 8008844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	db02      	blt.n	8008850 <vApplicationMallocFailedHook+0x10>
 800884a:	4806      	ldr	r0, [pc, #24]	; (8008864 <vApplicationMallocFailedHook+0x24>)
 800884c:	f000 f9ec 	bl	8008c28 <xprintf>
  {
    volatile int s = 1;
 8008850:	2301      	movs	r3, #1
 8008852:	9301      	str	r3, [sp, #4]
    while (s);
 8008854:	9b01      	ldr	r3, [sp, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1fc      	bne.n	8008854 <vApplicationMallocFailedHook+0x14>
  }
}
 800885a:	b003      	add	sp, #12
 800885c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008860:	10001000 	.word	0x10001000
 8008864:	0801d3d7 	.word	0x0801d3d7

08008868 <getRegistersFromStack>:

void HardFault_Handler(void);
#if 1
void  __attribute__ ((optimize("-O0"))) getRegistersFromStack( uint32_t *pulFaultStackAddress );
void  __attribute__ ((optimize("-O0"))) getRegistersFromStack( uint32_t *pulFaultStackAddress )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af02      	add	r7, sp, #8
 800886e:	6078      	str	r0, [r7, #4]
  uint32_t sptr;
  asm("mov %0, sp": "=r" (sptr));
 8008870:	466b      	mov	r3, sp
 8008872:	60fb      	str	r3, [r7, #12]
  dprintf(LL_ERROR, "HARDFAULT!!\n");
 8008874:	4b20      	ldr	r3, [pc, #128]	; (80088f8 <getRegistersFromStack+0x90>)
 8008876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008878:	2b00      	cmp	r3, #0
 800887a:	db02      	blt.n	8008882 <getRegistersFromStack+0x1a>
 800887c:	481f      	ldr	r0, [pc, #124]	; (80088fc <getRegistersFromStack+0x94>)
 800887e:	f000 f9d3 	bl	8008c28 <xprintf>
  dprintf(LL_ERROR, "r0   %08x r1  %08x r2  %08x r3  %08x \n", pulFaultStackAddress[0], pulFaultStackAddress[1], pulFaultStackAddress[2], pulFaultStackAddress[3]);
 8008882:	4b1d      	ldr	r3, [pc, #116]	; (80088f8 <getRegistersFromStack+0x90>)
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	db0f      	blt.n	80088aa <getRegistersFromStack+0x42>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6819      	ldr	r1, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3304      	adds	r3, #4
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3308      	adds	r3, #8
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	330c      	adds	r3, #12
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	4603      	mov	r3, r0
 80088a4:	4816      	ldr	r0, [pc, #88]	; (8008900 <getRegistersFromStack+0x98>)
 80088a6:	f000 f9bf 	bl	8008c28 <xprintf>
  dprintf(LL_ERROR, "r12  %08x lr  %08x pc  %08x psr %08x \n", pulFaultStackAddress[4], pulFaultStackAddress[5], pulFaultStackAddress[6], pulFaultStackAddress[7]);
 80088aa:	4b13      	ldr	r3, [pc, #76]	; (80088f8 <getRegistersFromStack+0x90>)
 80088ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	db10      	blt.n	80088d4 <getRegistersFromStack+0x6c>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	3310      	adds	r3, #16
 80088b6:	6819      	ldr	r1, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3314      	adds	r3, #20
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3318      	adds	r3, #24
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	331c      	adds	r3, #28
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	4603      	mov	r3, r0
 80088ce:	480d      	ldr	r0, [pc, #52]	; (8008904 <getRegistersFromStack+0x9c>)
 80088d0:	f000 f9aa 	bl	8008c28 <xprintf>
  dprintf(LL_ERROR, "sp   %08x\n", sptr);
 80088d4:	4b08      	ldr	r3, [pc, #32]	; (80088f8 <getRegistersFromStack+0x90>)
 80088d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d8:	2b00      	cmp	r3, #0
 80088da:	db03      	blt.n	80088e4 <getRegistersFromStack+0x7c>
 80088dc:	68f9      	ldr	r1, [r7, #12]
 80088de:	480a      	ldr	r0, [pc, #40]	; (8008908 <getRegistersFromStack+0xa0>)
 80088e0:	f000 f9a2 	bl	8008c28 <xprintf>
  {
    volatile int s = 1;
 80088e4:	2301      	movs	r3, #1
 80088e6:	60bb      	str	r3, [r7, #8]
    while (s);
 80088e8:	bf00      	nop
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1fc      	bne.n	80088ea <getRegistersFromStack+0x82>
  }
}
 80088f0:	bf00      	nop
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	10001000 	.word	0x10001000
 80088fc:	0801d36c 	.word	0x0801d36c
 8008900:	0801d37c 	.word	0x0801d37c
 8008904:	0801d3a4 	.word	0x0801d3a4
 8008908:	0801d3cc 	.word	0x0801d3cc

0800890c <HardFault_Handler>:
void __attribute__ ((optimize("-O0"),no_instrument_function,naked)) HardFault_Handler(void)
{
  __asm volatile
 800890c:	f01e 0f04 	tst.w	lr, #4
 8008910:	bf0c      	ite	eq
 8008912:	f3ef 8008 	mrseq	r0, MSP
 8008916:	f3ef 8009 	mrsne	r0, PSP
 800891a:	6981      	ldr	r1, [r0, #24]
 800891c:	4a00      	ldr	r2, [pc, #0]	; (8008920 <handler2_address_const>)
 800891e:	4710      	bx	r2

08008920 <handler2_address_const>:
 8008920:	08008869 	.word	0x08008869
    " ldr r1, [r0, #24]\n"
    " ldr r2, handler2_address_const\n"
    " bx r2\n"
    " handler2_address_const: .word getRegistersFromStack \n"
  );
}
 8008924:	bf00      	nop

08008926 <intSafeMalloc>:
  }
}
#endif

void *intSafeMalloc(int size)
{
 8008926:	b538      	push	{r3, r4, r5, lr}
 8008928:	4605      	mov	r5, r0
  int irq = amIInIRQ();
 800892a:	f7ff febb 	bl	80086a4 <amIInIRQ>
  if(!irq) taskENTER_CRITICAL();
 800892e:	4604      	mov	r4, r0
 8008930:	b908      	cbnz	r0, 8008936 <intSafeMalloc+0x10>
 8008932:	f001 fd3b 	bl	800a3ac <vPortEnterCritical>
  void *buf =  pvPortMalloc(size);
 8008936:	4628      	mov	r0, r5
 8008938:	f001 fe2a 	bl	800a590 <pvPortMalloc>
 800893c:	4605      	mov	r5, r0
  if(!irq) taskEXIT_CRITICAL();
 800893e:	b90c      	cbnz	r4, 8008944 <intSafeMalloc+0x1e>
 8008940:	f001 fd46 	bl	800a3d0 <vPortExitCritical>
  return buf;
}
 8008944:	4628      	mov	r0, r5
 8008946:	bd38      	pop	{r3, r4, r5, pc}

08008948 <intSafeFree>:
void intSafeFree(void *buf)
{
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4605      	mov	r5, r0
  int irq = amIInIRQ();
 800894c:	f7ff feaa 	bl	80086a4 <amIInIRQ>
  if(!irq) taskENTER_CRITICAL();
 8008950:	4604      	mov	r4, r0
 8008952:	b908      	cbnz	r0, 8008958 <intSafeFree+0x10>
 8008954:	f001 fd2a 	bl	800a3ac <vPortEnterCritical>
  vPortFree(buf);
 8008958:	4628      	mov	r0, r5
 800895a:	f001 fe85 	bl	800a668 <vPortFree>
  if(!irq) taskEXIT_CRITICAL();
 800895e:	b91c      	cbnz	r4, 8008968 <intSafeFree+0x20>
}
 8008960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void intSafeFree(void *buf)
{
  int irq = amIInIRQ();
  if(!irq) taskENTER_CRITICAL();
  vPortFree(buf);
  if(!irq) taskEXIT_CRITICAL();
 8008964:	f001 bd34 	b.w	800a3d0 <vPortExitCritical>
 8008968:	bd38      	pop	{r3, r4, r5, pc}
	...

0800896c <consoleLock>:

uint8_t refresh = 0;
#ifdef DEBUG_UART
static int consoleLocked = 0;
void consoleLock(void)
{
 800896c:	b510      	push	{r4, lr}
  taskENTER_CRITICAL();
 800896e:	f001 fd1d 	bl	800a3ac <vPortEnterCritical>
  while(consoleLocked)
 8008972:	4c09      	ldr	r4, [pc, #36]	; (8008998 <consoleLock+0x2c>)
 8008974:	6963      	ldr	r3, [r4, #20]
 8008976:	b13b      	cbz	r3, 8008988 <consoleLock+0x1c>
    {
      taskEXIT_CRITICAL();
 8008978:	f001 fd2a 	bl	800a3d0 <vPortExitCritical>
      mdelay(1);
 800897c:	2001      	movs	r0, #1
 800897e:	f002 f8c3 	bl	800ab08 <vTaskDelay>
      taskENTER_CRITICAL();
 8008982:	f001 fd13 	bl	800a3ac <vPortEnterCritical>
 8008986:	e7f5      	b.n	8008974 <consoleLock+0x8>
    }
  consoleLocked = 1;
 8008988:	4b03      	ldr	r3, [pc, #12]	; (8008998 <consoleLock+0x2c>)
 800898a:	2201      	movs	r2, #1
 800898c:	615a      	str	r2, [r3, #20]
  taskEXIT_CRITICAL();
}
 800898e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      taskEXIT_CRITICAL();
      mdelay(1);
      taskENTER_CRITICAL();
    }
  consoleLocked = 1;
  taskEXIT_CRITICAL();
 8008992:	f001 bd1d 	b.w	800a3d0 <vPortExitCritical>
 8008996:	bf00      	nop
 8008998:	10002b10 	.word	0x10002b10

0800899c <consoleUnlock>:
}

void consoleUnlock(void)
{
 800899c:	b508      	push	{r3, lr}
  taskENTER_CRITICAL();
 800899e:	f001 fd05 	bl	800a3ac <vPortEnterCritical>
  consoleLocked = 0;
 80089a2:	4b03      	ldr	r3, [pc, #12]	; (80089b0 <consoleUnlock+0x14>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	615a      	str	r2, [r3, #20]
  taskEXIT_CRITICAL();
}
 80089a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void consoleUnlock(void)
{
  taskENTER_CRITICAL();
  consoleLocked = 0;
  taskEXIT_CRITICAL();
 80089ac:	f001 bd10 	b.w	800a3d0 <vPortExitCritical>
 80089b0:	10002b10 	.word	0x10002b10

080089b4 <putChar>:
}

void putChar(unsigned char ch)
{
 80089b4:	b510      	push	{r4, lr}
 80089b6:	4604      	mov	r4, r0
  while(!USART_GetFlagStatus(DEBUG_UART, USART_FLAG_TXE));
 80089b8:	2180      	movs	r1, #128	; 0x80
 80089ba:	4805      	ldr	r0, [pc, #20]	; (80089d0 <putChar+0x1c>)
 80089bc:	f008 fc40 	bl	8011240 <USART_GetFlagStatus>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d0f9      	beq.n	80089b8 <putChar+0x4>
  USART_SendData(DEBUG_UART, ch);
 80089c4:	4621      	mov	r1, r4
 80089c6:	4802      	ldr	r0, [pc, #8]	; (80089d0 <putChar+0x1c>)
}
 80089c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void putChar(unsigned char ch)
{
  while(!USART_GetFlagStatus(DEBUG_UART, USART_FLAG_TXE));
  USART_SendData(DEBUG_UART, ch);
 80089cc:	f008 bb38 	b.w	8011040 <USART_SendData>
 80089d0:	40007c00 	.word	0x40007c00

080089d4 <sendChar>:
  if(USART_GetFlagStatus(DEBUG_UART, USART_FLAG_RXNE))
    return USART_ReceiveData(DEBUG_UART);
  return -1;
}
void sendChar(unsigned char ch)
{
 80089d4:	b510      	push	{r4, lr}
 80089d6:	4604      	mov	r4, r0
  consoleLock();
 80089d8:	f7ff ffc8 	bl	800896c <consoleLock>
  putChar(ch);
 80089dc:	4620      	mov	r0, r4
 80089de:	f7ff ffe9 	bl	80089b4 <putChar>
  if(ch == '\n')refresh = 1;
 80089e2:	2c0a      	cmp	r4, #10
 80089e4:	bf02      	ittt	eq
 80089e6:	4b03      	ldreq	r3, [pc, #12]	; (80089f4 <sendChar+0x20>)
 80089e8:	2201      	moveq	r2, #1
 80089ea:	741a      	strbeq	r2, [r3, #16]
  consoleUnlock();

}
 80089ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void sendChar(unsigned char ch)
{
  consoleLock();
  putChar(ch);
  if(ch == '\n')refresh = 1;
  consoleUnlock();
 80089f0:	f7ff bfd4 	b.w	800899c <consoleUnlock>
 80089f4:	10002b10 	.word	0x10002b10

080089f8 <taskWaitInit>:
    }
}

static int taskInitWait = 1;
void taskWaitInit(void)
{
 80089f8:	b510      	push	{r4, lr}
  while(taskInitWait)
 80089fa:	4c04      	ldr	r4, [pc, #16]	; (8008a0c <taskWaitInit+0x14>)
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	b11b      	cbz	r3, 8008a08 <taskWaitInit+0x10>
    mdelay(1);
 8008a00:	2001      	movs	r0, #1
 8008a02:	f002 f881 	bl	800ab08 <vTaskDelay>
 8008a06:	e7f9      	b.n	80089fc <taskWaitInit+0x4>
}
 8008a08:	bd10      	pop	{r4, pc}
 8008a0a:	bf00      	nop
 8008a0c:	10001204 	.word	0x10001204

08008a10 <tasksInitEnd>:

void tasksInitEnd(void)
{
  taskInitWait = 0;
 8008a10:	4b01      	ldr	r3, [pc, #4]	; (8008a18 <tasksInitEnd+0x8>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	4770      	bx	lr
 8008a18:	10001204 	.word	0x10001204

08008a1c <xprintf_init>:
#if _USE_XFUNC_OUT
#include <stdarg.h>
void (*xfunc_out)(unsigned char);	/* Pointer to the output stream */
static xSemaphoreHandle mutex;
void xprintf_init(void (*xfunc)(unsigned char))
{
 8008a1c:	b510      	push	{r4, lr}
 8008a1e:	4604      	mov	r4, r0
  mutex = xSemaphoreCreateMutex();
 8008a20:	2001      	movs	r0, #1
 8008a22:	f002 fb84 	bl	800b12e <xQueueCreateMutex>
 8008a26:	4b02      	ldr	r3, [pc, #8]	; (8008a30 <xprintf_init+0x14>)
 8008a28:	6018      	str	r0, [r3, #0]
  xfunc_out = xfunc;
 8008a2a:	4b02      	ldr	r3, [pc, #8]	; (8008a34 <xprintf_init+0x18>)
 8008a2c:	601c      	str	r4, [r3, #0]
 8008a2e:	bd10      	pop	{r4, pc}
 8008a30:	10002b28 	.word	0x10002b28
 8008a34:	100032b4 	.word	0x100032b4

08008a38 <xputc>:
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
  if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8008a38:	280a      	cmp	r0, #10
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8008a3a:	b510      	push	{r4, lr}
 8008a3c:	4604      	mov	r4, r0
  if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8008a3e:	d102      	bne.n	8008a46 <xputc+0xe>
 8008a40:	200d      	movs	r0, #13
 8008a42:	f7ff fff9 	bl	8008a38 <xputc>

  if (outptr)
 8008a46:	4a07      	ldr	r2, [pc, #28]	; (8008a64 <xputc+0x2c>)
 8008a48:	6853      	ldr	r3, [r2, #4]
 8008a4a:	b11b      	cbz	r3, 8008a54 <xputc+0x1c>
    {
      *outptr++ = (unsigned char)c;
 8008a4c:	1c59      	adds	r1, r3, #1
 8008a4e:	6051      	str	r1, [r2, #4]
 8008a50:	701c      	strb	r4, [r3, #0]
      return;
 8008a52:	bd10      	pop	{r4, pc}
    }

  if (xfunc_out) xfunc_out((unsigned char)c);
 8008a54:	4b04      	ldr	r3, [pc, #16]	; (8008a68 <xputc+0x30>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	b11b      	cbz	r3, 8008a62 <xputc+0x2a>
 8008a5a:	4620      	mov	r0, r4
}
 8008a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      *outptr++ = (unsigned char)c;
      return;
    }

  if (xfunc_out) xfunc_out((unsigned char)c);
 8008a60:	4718      	bx	r3
 8008a62:	bd10      	pop	{r4, pc}
 8008a64:	10002b28 	.word	0x10002b28
 8008a68:	100032b4 	.word	0x100032b4

08008a6c <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
  const char* str				/* Pointer to the string */
)
{
 8008a6c:	b510      	push	{r4, lr}
 8008a6e:	1e44      	subs	r4, r0, #1
  while (*str)
 8008a70:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8008a74:	b110      	cbz	r0, 8008a7c <xputs+0x10>
    xputc(*str++);
 8008a76:	f7ff ffdf 	bl	8008a38 <xputc>
 8008a7a:	e7f9      	b.n	8008a70 <xputs+0x4>
}
 8008a7c:	bd10      	pop	{r4, pc}

08008a7e <xvprintf>:
static
void xvprintf (
  const char*	fmt,	/* Pointer to the format string */
  va_list arp			/* Pointer to arguments */
)
{
 8008a7e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a82:	4602      	mov	r2, r0
 8008a84:	460d      	mov	r5, r1
  char s[16], c, d, *p;


  for (;;)
    {
      c = *fmt++;					/* Get a char */
 8008a86:	7810      	ldrb	r0, [r2, #0]
      if (!c) break;				/* End of format? */
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	f000 80c9 	beq.w	8008c20 <xvprintf+0x1a2>
      if (c != '%')  				/* Pass through it if not a % sequense */
 8008a8e:	2825      	cmp	r0, #37	; 0x25
 8008a90:	d001      	beq.n	8008a96 <xvprintf+0x18>
  char s[16], c, d, *p;


  for (;;)
    {
      c = *fmt++;					/* Get a char */
 8008a92:	1c57      	adds	r7, r2, #1
 8008a94:	e06b      	b.n	8008b6e <xvprintf+0xf0>
        {
          xputc(c);
          continue;
        }
      f = 0;
      c = *fmt++;					/* Get first char of the sequense */
 8008a96:	7853      	ldrb	r3, [r2, #1]
      if (c == '0')  				/* Flag: '0' padded */
 8008a98:	2b30      	cmp	r3, #48	; 0x30
 8008a9a:	d103      	bne.n	8008aa4 <xvprintf+0x26>
        {
          f = 1;
          c = *fmt++;
 8008a9c:	1cd7      	adds	r7, r2, #3
 8008a9e:	7893      	ldrb	r3, [r2, #2]
        }
      f = 0;
      c = *fmt++;					/* Get first char of the sequense */
      if (c == '0')  				/* Flag: '0' padded */
        {
          f = 1;
 8008aa0:	2601      	movs	r6, #1
 8008aa2:	e007      	b.n	8008ab4 <xvprintf+0x36>
          c = *fmt++;
        }
      else
        {
          if (c == '-')  			/* Flag: left justified */
 8008aa4:	2b2d      	cmp	r3, #45	; 0x2d
            {
              f = 2;
              c = *fmt++;
 8008aa6:	bf0d      	iteet	eq
 8008aa8:	7893      	ldrbeq	r3, [r2, #2]
        {
          xputc(c);
          continue;
        }
      f = 0;
      c = *fmt++;					/* Get first char of the sequense */
 8008aaa:	1c97      	addne	r7, r2, #2
      if (c != '%')  				/* Pass through it if not a % sequense */
        {
          xputc(c);
          continue;
        }
      f = 0;
 8008aac:	2600      	movne	r6, #0
      else
        {
          if (c == '-')  			/* Flag: left justified */
            {
              f = 2;
              c = *fmt++;
 8008aae:	1cd7      	addeq	r7, r2, #3
        }
      else
        {
          if (c == '-')  			/* Flag: left justified */
            {
              f = 2;
 8008ab0:	bf08      	it	eq
 8008ab2:	2602      	moveq	r6, #2
              c = *fmt++;
            }
        }
      for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8008ab4:	f04f 0800 	mov.w	r8, #0
        w = w * 10 + c - '0';
 8008ab8:	210a      	movs	r1, #10
            {
              f = 2;
              c = *fmt++;
            }
        }
      for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8008aba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008abe:	2a09      	cmp	r2, #9
 8008ac0:	d806      	bhi.n	8008ad0 <xvprintf+0x52>
        w = w * 10 + c - '0';
 8008ac2:	fb01 3808 	mla	r8, r1, r8, r3
 8008ac6:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
            {
              f = 2;
              c = *fmt++;
            }
        }
      for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8008aca:	f817 3b01 	ldrb.w	r3, [r7], #1
 8008ace:	e7f4      	b.n	8008aba <xvprintf+0x3c>
        w = w * 10 + c - '0';
      if (c == 'l' || c == 'L')  	/* Prefix: Size is long int */
 8008ad0:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8008ad4:	2a4c      	cmp	r2, #76	; 0x4c
        {
          f |= 4;
          c = *fmt++;
 8008ad6:	bf02      	ittt	eq
 8008ad8:	783b      	ldrbeq	r3, [r7, #0]
        }
      for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
        w = w * 10 + c - '0';
      if (c == 'l' || c == 'L')  	/* Prefix: Size is long int */
        {
          f |= 4;
 8008ada:	f046 0604 	orreq.w	r6, r6, #4
          c = *fmt++;
 8008ade:	3701      	addeq	r7, #1
        }
      if (!c) break;				/* End of format? */
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 809d 	beq.w	8008c20 <xvprintf+0x1a2>
      d = c;
      if (d >= 'a') d -= 0x20;
 8008ae6:	2b60      	cmp	r3, #96	; 0x60
 8008ae8:	bf86      	itte	hi
 8008aea:	f1a3 0220 	subhi.w	r2, r3, #32
 8008aee:	b2d2      	uxtbhi	r2, r2
 8008af0:	461a      	movls	r2, r3
      switch (d)  				/* Type is... */
 8008af2:	2a4f      	cmp	r2, #79	; 0x4f
 8008af4:	d012      	beq.n	8008b1c <xvprintf+0x9e>
 8008af6:	d806      	bhi.n	8008b06 <xvprintf+0x88>
 8008af8:	2a43      	cmp	r2, #67	; 0x43
 8008afa:	d030      	beq.n	8008b5e <xvprintf+0xe0>
 8008afc:	2a44      	cmp	r2, #68	; 0x44
 8008afe:	d03c      	beq.n	8008b7a <xvprintf+0xfc>
 8008b00:	2a42      	cmp	r2, #66	; 0x42
 8008b02:	d038      	beq.n	8008b76 <xvprintf+0xf8>
 8008b04:	e032      	b.n	8008b6c <xvprintf+0xee>
 8008b06:	2a55      	cmp	r2, #85	; 0x55
 8008b08:	d037      	beq.n	8008b7a <xvprintf+0xfc>
 8008b0a:	2a58      	cmp	r2, #88	; 0x58
 8008b0c:	d02c      	beq.n	8008b68 <xvprintf+0xea>
 8008b0e:	2a53      	cmp	r2, #83	; 0x53
 8008b10:	d12c      	bne.n	8008b6c <xvprintf+0xee>
        {
        case 'S' :					/* String */
          p = va_arg(arp, char*);
 8008b12:	f8d5 9000 	ldr.w	r9, [r5]
 8008b16:	1d2c      	adds	r4, r5, #4
          for (j = 0; p[j]; j++) ;
 8008b18:	464b      	mov	r3, r9
 8008b1a:	e001      	b.n	8008b20 <xvprintf+0xa2>
          continue;
        case 'B' :					/* Binary */
          r = 2;
          break;
        case 'O' :					/* Octal */
          r = 8;
 8008b1c:	2008      	movs	r0, #8
 8008b1e:	e02d      	b.n	8008b7c <xvprintf+0xfe>
 8008b20:	ebc9 0503 	rsb	r5, r9, r3
      if (d >= 'a') d -= 0x20;
      switch (d)  				/* Type is... */
        {
        case 'S' :					/* String */
          p = va_arg(arp, char*);
          for (j = 0; p[j]; j++) ;
 8008b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b28:	2a00      	cmp	r2, #0
 8008b2a:	d1f9      	bne.n	8008b20 <xvprintf+0xa2>
          while (!(f & 2) && j++ < w) xputc(' ');
 8008b2c:	07b0      	lsls	r0, r6, #30
 8008b2e:	d409      	bmi.n	8008b44 <xvprintf+0xc6>
 8008b30:	4545      	cmp	r5, r8
 8008b32:	f105 0601 	add.w	r6, r5, #1
 8008b36:	d204      	bcs.n	8008b42 <xvprintf+0xc4>
 8008b38:	2020      	movs	r0, #32
 8008b3a:	f7ff ff7d 	bl	8008a38 <xputc>
 8008b3e:	4635      	mov	r5, r6
 8008b40:	e7f6      	b.n	8008b30 <xvprintf+0xb2>
 8008b42:	4635      	mov	r5, r6
          xputs(p);
 8008b44:	4648      	mov	r0, r9
 8008b46:	f7ff ff91 	bl	8008a6c <xputs>
          while (j++ < w) xputc(' ');
 8008b4a:	45a8      	cmp	r8, r5
 8008b4c:	d802      	bhi.n	8008b54 <xvprintf+0xd6>
        case 'X' :					/* Hexdecimal */
          r = 16;
          break;
        default:					/* Unknown type (passthrough) */
          xputc(c);
          continue;
 8008b4e:	4625      	mov	r5, r4
 8008b50:	463a      	mov	r2, r7
 8008b52:	e798      	b.n	8008a86 <xvprintf+0x8>
        case 'S' :					/* String */
          p = va_arg(arp, char*);
          for (j = 0; p[j]; j++) ;
          while (!(f & 2) && j++ < w) xputc(' ');
          xputs(p);
          while (j++ < w) xputc(' ');
 8008b54:	2020      	movs	r0, #32
 8008b56:	f7ff ff6f 	bl	8008a38 <xputc>
 8008b5a:	3501      	adds	r5, #1
 8008b5c:	e7f5      	b.n	8008b4a <xvprintf+0xcc>
          continue;
        case 'C' :					/* Character */
          xputc((char)va_arg(arp, int));
 8008b5e:	7828      	ldrb	r0, [r5, #0]
 8008b60:	1d2c      	adds	r4, r5, #4
 8008b62:	f7ff ff69 	bl	8008a38 <xputc>
          continue;
 8008b66:	e7f2      	b.n	8008b4e <xvprintf+0xd0>
        case 'D' :					/* Signed decimal */
        case 'U' :					/* Unsigned decimal */
          r = 10;
          break;
        case 'X' :					/* Hexdecimal */
          r = 16;
 8008b68:	2010      	movs	r0, #16
          break;
 8008b6a:	e007      	b.n	8008b7c <xvprintf+0xfe>
        default:					/* Unknown type (passthrough) */
          xputc(c);
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7ff ff63 	bl	8008a38 <xputc>
          continue;
 8008b72:	462c      	mov	r4, r5
 8008b74:	e7eb      	b.n	8008b4e <xvprintf+0xd0>
          continue;
        case 'C' :					/* Character */
          xputc((char)va_arg(arp, int));
          continue;
        case 'B' :					/* Binary */
          r = 2;
 8008b76:	2002      	movs	r0, #2
 8008b78:	e000      	b.n	8008b7c <xvprintf+0xfe>
        case 'O' :					/* Octal */
          r = 8;
          break;
        case 'D' :					/* Signed decimal */
        case 'U' :					/* Unsigned decimal */
          r = 10;
 8008b7a:	200a      	movs	r0, #10
          xputc(c);
          continue;
        }

      /* Get an argument and put it in numeral */
      v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8008b7c:	2a44      	cmp	r2, #68	; 0x44
 8008b7e:	6829      	ldr	r1, [r5, #0]
 8008b80:	f105 0404 	add.w	r4, r5, #4
 8008b84:	d104      	bne.n	8008b90 <xvprintf+0x112>
      if (d == 'D' && (v & 0x80000000))
 8008b86:	2900      	cmp	r1, #0
        {
          v = 0 - v;
 8008b88:	bfbc      	itt	lt
 8008b8a:	4249      	neglt	r1, r1
          f |= 8;
 8008b8c:	f046 0608 	orrlt.w	r6, r6, #8
 8008b90:	2b78      	cmp	r3, #120	; 0x78
 8008b92:	bf14      	ite	ne
 8008b94:	f04f 0c07 	movne.w	ip, #7
 8008b98:	f04f 0c27 	moveq.w	ip, #39	; 0x27
        }
      i = 0;
 8008b9c:	2200      	movs	r2, #0
      do
        {
          d = (char)(v % r);
 8008b9e:	fbb1 fef0 	udiv	lr, r1, r0
 8008ba2:	fb00 151e 	mls	r5, r0, lr, r1
 8008ba6:	b2eb      	uxtb	r3, r5
          v /= r;
          if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008ba8:	2d09      	cmp	r5, #9
 8008baa:	bf84      	itt	hi
 8008bac:	4463      	addhi	r3, ip
 8008bae:	b2db      	uxtbhi	r3, r3
          s[i++] = d + '0';
 8008bb0:	3330      	adds	r3, #48	; 0x30
        }
      i = 0;
      do
        {
          d = (char)(v % r);
          v /= r;
 8008bb2:	4671      	mov	r1, lr
          if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
          s[i++] = d + '0';
 8008bb4:	1c55      	adds	r5, r2, #1
 8008bb6:	f80d 3002 	strb.w	r3, [sp, r2]
        }
      while (v && i < sizeof(s));
 8008bba:	f1be 0f00 	cmp.w	lr, #0
 8008bbe:	d004      	beq.n	8008bca <xvprintf+0x14c>
 8008bc0:	2d10      	cmp	r5, #16
 8008bc2:	d001      	beq.n	8008bc8 <xvprintf+0x14a>
 8008bc4:	462a      	mov	r2, r5
 8008bc6:	e7ea      	b.n	8008b9e <xvprintf+0x120>
 8008bc8:	220f      	movs	r2, #15
      if (f & 8) s[i++] = '-';
 8008bca:	0731      	lsls	r1, r6, #28
 8008bcc:	d505      	bpl.n	8008bda <xvprintf+0x15c>
 8008bce:	ab04      	add	r3, sp, #16
 8008bd0:	441d      	add	r5, r3
 8008bd2:	232d      	movs	r3, #45	; 0x2d
 8008bd4:	f805 3c10 	strb.w	r3, [r5, #-16]
 8008bd8:	1c95      	adds	r5, r2, #2
      j = i;
      d = (f & 1) ? '0' : ' ';
 8008bda:	f016 0f01 	tst.w	r6, #1
 8008bde:	bf14      	ite	ne
 8008be0:	f04f 0a30 	movne.w	sl, #48	; 0x30
 8008be4:	f04f 0a20 	moveq.w	sl, #32
      while (!(f & 2) && j++ < w) xputc(d);
 8008be8:	07b3      	lsls	r3, r6, #30
          if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
          s[i++] = d + '0';
        }
      while (v && i < sizeof(s));
      if (f & 8) s[i++] = '-';
      j = i;
 8008bea:	46a9      	mov	r9, r5
      d = (f & 1) ? '0' : ' ';
      while (!(f & 2) && j++ < w) xputc(d);
 8008bec:	d409      	bmi.n	8008c02 <xvprintf+0x184>
 8008bee:	45c1      	cmp	r9, r8
 8008bf0:	f109 0601 	add.w	r6, r9, #1
 8008bf4:	d204      	bcs.n	8008c00 <xvprintf+0x182>
 8008bf6:	4650      	mov	r0, sl
 8008bf8:	f7ff ff1e 	bl	8008a38 <xputc>
 8008bfc:	46b1      	mov	r9, r6
 8008bfe:	e7f6      	b.n	8008bee <xvprintf+0x170>
 8008c00:	46b1      	mov	r9, r6
      do xputc(s[--i]);
 8008c02:	3d01      	subs	r5, #1
 8008c04:	f81d 0005 	ldrb.w	r0, [sp, r5]
 8008c08:	f7ff ff16 	bl	8008a38 <xputc>
      while(i);
 8008c0c:	2d00      	cmp	r5, #0
 8008c0e:	d1f8      	bne.n	8008c02 <xvprintf+0x184>
      while (j++ < w) xputc(' ');
 8008c10:	45c8      	cmp	r8, r9
 8008c12:	d99c      	bls.n	8008b4e <xvprintf+0xd0>
 8008c14:	2020      	movs	r0, #32
 8008c16:	f7ff ff0f 	bl	8008a38 <xputc>
 8008c1a:	f109 0901 	add.w	r9, r9, #1
 8008c1e:	e7f7      	b.n	8008c10 <xvprintf+0x192>
    }
}
 8008c20:	b004      	add	sp, #16
 8008c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08008c28 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
  const char*	fmt,	/* Pointer to the format string */
  ...					/* Optional arguments */
)
{
 8008c28:	b40f      	push	{r0, r1, r2, r3}
 8008c2a:	b513      	push	{r0, r1, r4, lr}
  va_list arp;
  if( xSemaphoreTake( mutex, 100 ) == pdTRUE )
 8008c2c:	4c0c      	ldr	r4, [pc, #48]	; (8008c60 <xprintf+0x38>)
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2264      	movs	r2, #100	; 0x64
 8008c32:	4619      	mov	r1, r3
 8008c34:	6820      	ldr	r0, [r4, #0]
 8008c36:	f002 faf3 	bl	800b220 <xQueueGenericReceive>
 8008c3a:	2801      	cmp	r0, #1
 8008c3c:	d10a      	bne.n	8008c54 <xprintf+0x2c>
    {

      va_start(arp, fmt);
 8008c3e:	a905      	add	r1, sp, #20
      xvprintf(fmt, arp);
 8008c40:	9804      	ldr	r0, [sp, #16]
{
  va_list arp;
  if( xSemaphoreTake( mutex, 100 ) == pdTRUE )
    {

      va_start(arp, fmt);
 8008c42:	9101      	str	r1, [sp, #4]
      xvprintf(fmt, arp);
 8008c44:	f7ff ff1b 	bl	8008a7e <xvprintf>
      va_end(arp);
      xSemaphoreGive(mutex);
 8008c48:	2300      	movs	r3, #0
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6820      	ldr	r0, [r4, #0]
 8008c50:	f002 f9e3 	bl	800b01a <xQueueGenericSend>
    }
}
 8008c54:	b002      	add	sp, #8
 8008c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c5a:	b004      	add	sp, #16
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	10002b28 	.word	0x10002b28

08008c64 <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
  char* buff,			/* Pointer to the output buffer */
  const char*	fmt,	/* Pointer to the format string */
  ...					/* Optional arguments */
)
{
 8008c64:	b40e      	push	{r1, r2, r3}
 8008c66:	b517      	push	{r0, r1, r2, r4, lr}
 8008c68:	a905      	add	r1, sp, #20
  va_list arp;


  outptr = buff;		/* Switch destination for memory */
 8008c6a:	4c08      	ldr	r4, [pc, #32]	; (8008c8c <xsprintf+0x28>)
void xsprintf (			/* Put a formatted string to the memory */
  char* buff,			/* Pointer to the output buffer */
  const char*	fmt,	/* Pointer to the format string */
  ...					/* Optional arguments */
)
{
 8008c6c:	f851 3b04 	ldr.w	r3, [r1], #4
  va_list arp;


  outptr = buff;		/* Switch destination for memory */
 8008c70:	6060      	str	r0, [r4, #4]

  va_start(arp, fmt);
  xvprintf(fmt, arp);
 8008c72:	4618      	mov	r0, r3
  va_list arp;


  outptr = buff;		/* Switch destination for memory */

  va_start(arp, fmt);
 8008c74:	9101      	str	r1, [sp, #4]
  xvprintf(fmt, arp);
 8008c76:	f7ff ff02 	bl	8008a7e <xvprintf>
  va_end(arp);

  *outptr = 0;		/* Terminate output string with a \0 */
 8008c7a:	6862      	ldr	r2, [r4, #4]
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	7013      	strb	r3, [r2, #0]
  outptr = 0;			/* Switch destination for device */
 8008c80:	6063      	str	r3, [r4, #4]
}
 8008c82:	b003      	add	sp, #12
 8008c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c88:	b003      	add	sp, #12
 8008c8a:	4770      	bx	lr
 8008c8c:	10002b28 	.word	0x10002b28

08008c90 <messageProcessorInit>:
#define LEDBLINK(arg_diode, arg_num) LEDblink(arg_diode, arg_num, 400, 300, 200, 400)


void messageProcessorInit(void);
void messageProcessorInit(void)
{
 8008c90:	4770      	bx	lr
	...

08008c94 <msgTab>:
comm_t *msgTab(uint8_t code)
{
  int i;
  for (i = 0; i < sizeof(MSG_TYPES_TAB) / sizeof(MSG_TYPES_TAB[0]); i++)
    {
      if(MSG_TYPES_TAB[i].size == 0) continue;
 8008c94:	4908      	ldr	r1, [pc, #32]	; (8008cb8 <msgTab+0x24>)
{
}

//Get MSG_TYPES_TAB entry from message code
comm_t *msgTab(uint8_t code)
{
 8008c96:	b530      	push	{r4, r5, lr}
  int i;
  for (i = 0; i < sizeof(MSG_TYPES_TAB) / sizeof(MSG_TYPES_TAB[0]); i++)
 8008c98:	2200      	movs	r2, #0
    {
      if(MSG_TYPES_TAB[i].size == 0) continue;
 8008c9a:	247c      	movs	r4, #124	; 0x7c
 8008c9c:	fb04 1302 	mla	r3, r4, r2, r1
 8008ca0:	685d      	ldr	r5, [r3, #4]
 8008ca2:	b125      	cbz	r5, 8008cae <msgTab+0x1a>
      if (code == MSG_TYPES_TAB[i].code)
 8008ca4:	681d      	ldr	r5, [r3, #0]
 8008ca6:	42a8      	cmp	r0, r5
 8008ca8:	d101      	bne.n	8008cae <msgTab+0x1a>
        return &MSG_TYPES_TAB[i];//Found message in MSG_TYPES_TAB
 8008caa:	4618      	mov	r0, r3
 8008cac:	bd30      	pop	{r4, r5, pc}

//Get MSG_TYPES_TAB entry from message code
comm_t *msgTab(uint8_t code)
{
  int i;
  for (i = 0; i < sizeof(MSG_TYPES_TAB) / sizeof(MSG_TYPES_TAB[0]); i++)
 8008cae:	3201      	adds	r2, #1
 8008cb0:	2a1a      	cmp	r2, #26
 8008cb2:	d1f3      	bne.n	8008c9c <msgTab+0x8>
    {
      if(MSG_TYPES_TAB[i].size == 0) continue;
      if (code == MSG_TYPES_TAB[i].code)
        return &MSG_TYPES_TAB[i];//Found message in MSG_TYPES_TAB
    }
  return NULL;
 8008cb4:	2000      	movs	r0, #0
}
 8008cb6:	bd30      	pop	{r4, r5, pc}
 8008cb8:	10001234 	.word	0x10001234

08008cbc <expectedMsgSize>:

//Get expected message type
int expectedMsgSize(portNum_t portNum, comm_t *msgType)
{
  if (msgType) return (portNum == CEN_PORT)?msgType->size:msgType->size_RX;
 8008cbc:	b121      	cbz	r1, 8008cc8 <expectedMsgSize+0xc>
 8008cbe:	b908      	cbnz	r0, 8008cc4 <expectedMsgSize+0x8>
 8008cc0:	6848      	ldr	r0, [r1, #4]
 8008cc2:	4770      	bx	lr
 8008cc4:	6948      	ldr	r0, [r1, #20]
 8008cc6:	4770      	bx	lr
  return 0;
 8008cc8:	4608      	mov	r0, r1
}
 8008cca:	4770      	bx	lr

08008ccc <communicatorRx>:
      bits >>= 1;
    }
}

void communicatorRx(portNum_t portNum, char *buffer, int bufferSize, uint8_t gen)
{
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  //Check message type and size
  comm_t *msgType = msgTab(buffer[0]);
 8008cd0:	460f      	mov	r7, r1
      bits >>= 1;
    }
}

void communicatorRx(portNum_t portNum, char *buffer, int bufferSize, uint8_t gen)
{
 8008cd2:	b087      	sub	sp, #28

  //Check message type and size
  comm_t *msgType = msgTab(buffer[0]);
 8008cd4:	f817 a914 	ldrb.w	sl, [r7], #-20
      bits >>= 1;
    }
}

void communicatorRx(portNum_t portNum, char *buffer, int bufferSize, uint8_t gen)
{
 8008cd8:	4680      	mov	r8, r0

  //Check message type and size
  comm_t *msgType = msgTab(buffer[0]);
 8008cda:	4650      	mov	r0, sl
      bits >>= 1;
    }
}

void communicatorRx(portNum_t portNum, char *buffer, int bufferSize, uint8_t gen)
{
 8008cdc:	460d      	mov	r5, r1
 8008cde:	4614      	mov	r4, r2
 8008ce0:	4699      	mov	r9, r3

  //Check message type and size
  comm_t *msgType = msgTab(buffer[0]);
 8008ce2:	f7ff ffd7 	bl	8008c94 <msgTab>
  if (!msgType)
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	b950      	cbnz	r0, 8008d00 <communicatorRx+0x34>
    {
      dprintf(LL_WARNING, "Unknown message %x received on port %d\n", buffer[0], portNum);
 8008cea:	4b9b      	ldr	r3, [pc, #620]	; (8008f58 <communicatorRx+0x28c>)
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f340 8103 	ble.w	8008efa <communicatorRx+0x22e>
 8008cf4:	4642      	mov	r2, r8
 8008cf6:	4651      	mov	r1, sl
 8008cf8:	4898      	ldr	r0, [pc, #608]	; (8008f5c <communicatorRx+0x290>)
 8008cfa:	f7ff ff95 	bl	8008c28 <xprintf>
 8008cfe:	e0fc      	b.n	8008efa <communicatorRx+0x22e>
      dFree(buffer);
      return;
    }

  //Check message size
  if (expectedMsgSize(portNum, msgType) > bufferSize)
 8008d00:	4601      	mov	r1, r0
 8008d02:	4640      	mov	r0, r8
 8008d04:	f7ff ffda 	bl	8008cbc <expectedMsgSize>
 8008d08:	42a0      	cmp	r0, r4
 8008d0a:	dd0e      	ble.n	8008d2a <communicatorRx+0x5e>
    {
      dprintf(LL_WARNING, "Incomplete message %x received on port %d\n", buffer[0], portNum);
 8008d0c:	4b92      	ldr	r3, [pc, #584]	; (8008f58 <communicatorRx+0x28c>)
 8008d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	dd04      	ble.n	8008d1e <communicatorRx+0x52>
 8008d14:	4642      	mov	r2, r8
 8008d16:	4651      	mov	r1, sl
 8008d18:	4891      	ldr	r0, [pc, #580]	; (8008f60 <communicatorRx+0x294>)
 8008d1a:	f7ff ff85 	bl	8008c28 <xprintf>
      //Timeout on receive. Message too short
      Timeout_Data(portNum, buffer, bufferSize);
 8008d1e:	4622      	mov	r2, r4
 8008d20:	4629      	mov	r1, r5
 8008d22:	4640      	mov	r0, r8
 8008d24:	f001 f95c 	bl	8009fe0 <Timeout_Data>
 8008d28:	e0e7      	b.n	8008efa <communicatorRx+0x22e>
      dFree(buffer);
      return;
    }

  bBuffer_t *bBuffer = bBufferFromData(buffer);
  bBuffer->size = bufferSize;
 8008d2a:	f825 4c14 	strh.w	r4, [r5, #-20]
  bBuffer->timestamp = xTaskGetTickCount() + msgType->timeout;
 8008d2e:	f001 fdf5 	bl	800a91c <xTaskGetTickCount>
 8008d32:	6a33      	ldr	r3, [r6, #32]
 8008d34:	eb06 0288 	add.w	r2, r6, r8, lsl #2
 8008d38:	4418      	add	r0, r3
  bBuffer->privateData = 0;
 8008d3a:	2300      	movs	r3, #0
      return;
    }

  bBuffer_t *bBuffer = bBufferFromData(buffer);
  bBuffer->size = bufferSize;
  bBuffer->timestamp = xTaskGetTickCount() + msgType->timeout;
 8008d3c:	f845 0c0c 	str.w	r0, [r5, #-12]
  bBuffer->privateData = 0;
 8008d40:	f845 3c08 	str.w	r3, [r5, #-8]
  msgType->received[portNum]++;
 8008d44:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008d46:	3301      	adds	r3, #1
 8008d48:	6293      	str	r3, [r2, #40]	; 0x28

  if(msgType->blocked)
 8008d4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f040 80d4 	bne.w	8008efa <communicatorRx+0x22e>
    {
      dFree(buffer);
      return;
    }

  if(cfg.trace_messages)
 8008d52:	4c81      	ldr	r4, [pc, #516]	; (8008f58 <communicatorRx+0x28c>)
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d044      	beq.n	8008de4 <communicatorRx+0x118>
    {
      switch(buffer[0])
 8008d5a:	782b      	ldrb	r3, [r5, #0]
 8008d5c:	2bb1      	cmp	r3, #177	; 0xb1
 8008d5e:	d805      	bhi.n	8008d6c <communicatorRx+0xa0>
 8008d60:	2bb0      	cmp	r3, #176	; 0xb0
 8008d62:	d208      	bcs.n	8008d76 <communicatorRx+0xaa>
 8008d64:	2b55      	cmp	r3, #85	; 0x55
 8008d66:	d003      	beq.n	8008d70 <communicatorRx+0xa4>
 8008d68:	2ba2      	cmp	r3, #162	; 0xa2
 8008d6a:	e000      	b.n	8008d6e <communicatorRx+0xa2>
 8008d6c:	2bcc      	cmp	r3, #204	; 0xcc
 8008d6e:	d105      	bne.n	8008d7c <communicatorRx+0xb0>
        {
        case 0xA2:
        case 0xCC:
        case 0x55:
          if(cfg.trace_messages < 3)
 8008d70:	6922      	ldr	r2, [r4, #16]
 8008d72:	2a02      	cmp	r2, #2
 8008d74:	dd36      	ble.n	8008de4 <communicatorRx+0x118>
            break;
        case 0xB0:
        case 0xB1:
          if(cfg.trace_messages < 2)
 8008d76:	6922      	ldr	r2, [r4, #16]
 8008d78:	2a01      	cmp	r2, #1
 8008d7a:	dd33      	ble.n	8008de4 <communicatorRx+0x118>
            break;
        default:
        {
          if(cfg.trace_messages <= 3 || cfg.trace_messages == buffer[0])
 8008d7c:	6922      	ldr	r2, [r4, #16]
 8008d7e:	2a03      	cmp	r2, #3
 8008d80:	dd03      	ble.n	8008d8a <communicatorRx+0xbe>
 8008d82:	4a75      	ldr	r2, [pc, #468]	; (8008f58 <communicatorRx+0x28c>)
 8008d84:	6912      	ldr	r2, [r2, #16]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d12c      	bne.n	8008de4 <communicatorRx+0x118>
            {
              dprintf(LL_INFO, "(%010d)Msg %x %s from %s(size %d): ", xTaskGetTickCount(), buffer[0], gen?"gen":"rcvd", portStr[portNum], bBuffer->size);
 8008d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	dd13      	ble.n	8008db8 <communicatorRx+0xec>
 8008d90:	f001 fdc4 	bl	800a91c <xTaskGetTickCount>
 8008d94:	f835 3c14 	ldrh.w	r3, [r5, #-20]
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	4b72      	ldr	r3, [pc, #456]	; (8008f64 <communicatorRx+0x298>)
 8008d9c:	4972      	ldr	r1, [pc, #456]	; (8008f68 <communicatorRx+0x29c>)
 8008d9e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	4b71      	ldr	r3, [pc, #452]	; (8008f6c <communicatorRx+0x2a0>)
 8008da6:	782a      	ldrb	r2, [r5, #0]
 8008da8:	f1b9 0f00 	cmp.w	r9, #0
 8008dac:	bf18      	it	ne
 8008dae:	460b      	movne	r3, r1
 8008db0:	4601      	mov	r1, r0
 8008db2:	486f      	ldr	r0, [pc, #444]	; (8008f70 <communicatorRx+0x2a4>)
 8008db4:	f7ff ff38 	bl	8008c28 <xprintf>
 8008db8:	f04f 0900 	mov.w	r9, #0
              int i;
              for(i = 0; i < bBuffer->size; i++)
 8008dbc:	f835 3c14 	ldrh.w	r3, [r5, #-20]
 8008dc0:	4599      	cmp	r9, r3
                dprintf(LL_INFO, "%02x ", buffer[i]);
 8008dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        {
          if(cfg.trace_messages <= 3 || cfg.trace_messages == buffer[0])
            {
              dprintf(LL_INFO, "(%010d)Msg %x %s from %s(size %d): ", xTaskGetTickCount(), buffer[0], gen?"gen":"rcvd", portStr[portNum], bBuffer->size);
              int i;
              for(i = 0; i < bBuffer->size; i++)
 8008dc4:	da09      	bge.n	8008dda <communicatorRx+0x10e>
                dprintf(LL_INFO, "%02x ", buffer[i]);
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	dd04      	ble.n	8008dd4 <communicatorRx+0x108>
 8008dca:	f815 1009 	ldrb.w	r1, [r5, r9]
 8008dce:	4869      	ldr	r0, [pc, #420]	; (8008f74 <communicatorRx+0x2a8>)
 8008dd0:	f7ff ff2a 	bl	8008c28 <xprintf>
        {
          if(cfg.trace_messages <= 3 || cfg.trace_messages == buffer[0])
            {
              dprintf(LL_INFO, "(%010d)Msg %x %s from %s(size %d): ", xTaskGetTickCount(), buffer[0], gen?"gen":"rcvd", portStr[portNum], bBuffer->size);
              int i;
              for(i = 0; i < bBuffer->size; i++)
 8008dd4:	f109 0901 	add.w	r9, r9, #1
 8008dd8:	e7f0      	b.n	8008dbc <communicatorRx+0xf0>
                dprintf(LL_INFO, "%02x ", buffer[i]);
              dprintf(LL_INFO, "\n");
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	dd02      	ble.n	8008de4 <communicatorRx+0x118>
 8008dde:	4866      	ldr	r0, [pc, #408]	; (8008f78 <communicatorRx+0x2ac>)
 8008de0:	f7ff ff22 	bl	8008c28 <xprintf>
        break;
        }
    }

  int processLocally = 0;
  if (portNum == CEN_PORT)
 8008de4:	f1b8 0f00 	cmp.w	r8, #0
 8008de8:	d051      	beq.n	8008e8e <communicatorRx+0x1c2>
      processLocally = 1;
    }
  else
    {
      //from PER
      if (msgType->type == NEG_CONFIRMATION)
 8008dea:	68b4      	ldr	r4, [r6, #8]
 8008dec:	2c01      	cmp	r4, #1
 8008dee:	d124      	bne.n	8008e3a <communicatorRx+0x16e>
        {
          //Negative confirmation
          //Find a message refered by this nACK
          comm_t *msgACK = msgTab(msgType->nackCode);
 8008df0:	68f0      	ldr	r0, [r6, #12]
 8008df2:	b2c0      	uxtb	r0, r0
 8008df4:	f7ff ff4e 	bl	8008c94 <msgTab>
          bBuffer_t *buf = msgACK->buffers;
 8008df8:	4683      	mov	fp, r0
          while(buf)
            {
              bBuffer_t *next = buf->next;
              if (!memcmp(&buf->data[1], &bBuffer->data[1], msgACK->size_RX-1))
 8008dfa:	1c6b      	adds	r3, r5, #1
      if (msgType->type == NEG_CONFIRMATION)
        {
          //Negative confirmation
          //Find a message refered by this nACK
          comm_t *msgACK = msgTab(msgType->nackCode);
          bBuffer_t *buf = msgACK->buffers;
 8008dfc:	f85b 9f78 	ldr.w	r9, [fp, #120]!
          while(buf)
            {
              bBuffer_t *next = buf->next;
              if (!memcmp(&buf->data[1], &bBuffer->data[1], msgACK->size_RX-1))
 8008e00:	9303      	str	r3, [sp, #12]
      //from PER
      if (msgType->type == NEG_CONFIRMATION)
        {
          //Negative confirmation
          //Find a message refered by this nACK
          comm_t *msgACK = msgTab(msgType->nackCode);
 8008e02:	4682      	mov	sl, r0
        }
        break;
        }
    }

  int processLocally = 0;
 8008e04:	2400      	movs	r4, #0
        {
          //Negative confirmation
          //Find a message refered by this nACK
          comm_t *msgACK = msgTab(msgType->nackCode);
          bBuffer_t *buf = msgACK->buffers;
          while(buf)
 8008e06:	f1b9 0f00 	cmp.w	r9, #0
 8008e0a:	d043      	beq.n	8008e94 <communicatorRx+0x1c8>
            {
              bBuffer_t *next = buf->next;
 8008e0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e10:	9302      	str	r3, [sp, #8]
              if (!memcmp(&buf->data[1], &bBuffer->data[1], msgACK->size_RX-1))
 8008e12:	f8da 2014 	ldr.w	r2, [sl, #20]
 8008e16:	9903      	ldr	r1, [sp, #12]
 8008e18:	3a01      	subs	r2, #1
 8008e1a:	f109 0015 	add.w	r0, r9, #21
 8008e1e:	f014 f8dd 	bl	801cfdc <memcmp>
 8008e22:	b938      	cbnz	r0, 8008e34 <communicatorRx+0x168>
                {
                  //Message found. Delete it
                  bRemove(&(msgACK->buffers), buf);
 8008e24:	4649      	mov	r1, r9
 8008e26:	4658      	mov	r0, fp
 8008e28:	f00c f808 	bl	8014e3c <bRemove>
                  bFree(buf);
 8008e2c:	4648      	mov	r0, r9
 8008e2e:	f00c faff 	bl	8015430 <bFree>
                  processLocally = 1;
 8008e32:	2401      	movs	r4, #1
 8008e34:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008e38:	e7e5      	b.n	8008e06 <communicatorRx+0x13a>
 8008e3a:	2201      	movs	r2, #1
              buf = next;
            }
        }
      else
        {
          if(msgType->type == CONF_TIMEOUT)
 8008e3c:	bb4c      	cbnz	r4, 8008e92 <communicatorRx+0x1c6>
            {
              //Positive confirmation
              //Find a message refered by this ACK
              bBuffer_t *buf = msgType->buffers;
 8008e3e:	46b3      	mov	fp, r6
                  bBuffer_t *next = buf->next;
                  if (!memcmp(buf->data, bBuffer->data, msgType->size_RX))
                    {
                      //Message found.
                      //Clear flag
                      buf->privateData &= ~(1<<(portNum - PER1_PORT));
 8008e40:	f108 3aff 	add.w	sl, r8, #4294967295
 8008e44:	fa02 fa0a 	lsl.w	sl, r2, sl
        {
          if(msgType->type == CONF_TIMEOUT)
            {
              //Positive confirmation
              //Find a message refered by this ACK
              bBuffer_t *buf = msgType->buffers;
 8008e48:	f85b 9f78 	ldr.w	r9, [fp, #120]!
                  bBuffer_t *next = buf->next;
                  if (!memcmp(buf->data, bBuffer->data, msgType->size_RX))
                    {
                      //Message found.
                      //Clear flag
                      buf->privateData &= ~(1<<(portNum - PER1_PORT));
 8008e4c:	ea6f 0a0a 	mvn.w	sl, sl
          if(msgType->type == CONF_TIMEOUT)
            {
              //Positive confirmation
              //Find a message refered by this ACK
              bBuffer_t *buf = msgType->buffers;
              while(buf)
 8008e50:	f1b9 0f00 	cmp.w	r9, #0
 8008e54:	d01e      	beq.n	8008e94 <communicatorRx+0x1c8>
                {
                  bBuffer_t *next = buf->next;
 8008e56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e5a:	9302      	str	r3, [sp, #8]
                  if (!memcmp(buf->data, bBuffer->data, msgType->size_RX))
 8008e5c:	6972      	ldr	r2, [r6, #20]
 8008e5e:	4629      	mov	r1, r5
 8008e60:	f109 0014 	add.w	r0, r9, #20
 8008e64:	f014 f8ba 	bl	801cfdc <memcmp>
 8008e68:	b970      	cbnz	r0, 8008e88 <communicatorRx+0x1bc>
                    {
                      //Message found.
                      //Clear flag
                      buf->privateData &= ~(1<<(portNum - PER1_PORT));
 8008e6a:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8008e6e:	ea0a 0202 	and.w	r2, sl, r2
 8008e72:	f8c9 200c 	str.w	r2, [r9, #12]
                      if(!buf->privateData)
 8008e76:	b93a      	cbnz	r2, 8008e88 <communicatorRx+0x1bc>
                        {
                          //No more confirmations needed
                          bRemove(&(msgType->buffers), buf);
 8008e78:	4649      	mov	r1, r9
 8008e7a:	4658      	mov	r0, fp
 8008e7c:	f00b ffde 	bl	8014e3c <bRemove>
                          bFree(buf);
 8008e80:	4648      	mov	r0, r9
 8008e82:	f00c fad5 	bl	8015430 <bFree>

                          processLocally = 1;
 8008e86:	2401      	movs	r4, #1
 8008e88:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008e8c:	e7e0      	b.n	8008e50 <communicatorRx+0x184>
  if (portNum == CEN_PORT)
    {
      //from CEN

      //Process locally if necessary
      processLocally = 1;
 8008e8e:	2401      	movs	r4, #1
 8008e90:	e000      	b.n	8008e94 <communicatorRx+0x1c8>
 8008e92:	4614      	mov	r4, r2
        }
    }

  int send = 0;

  uint8_t forwardMask = msgType->spk_flags;
 8008e94:	6933      	ldr	r3, [r6, #16]
 8008e96:	f88d 3017 	strb.w	r3, [sp, #23]
  if(processLocally)
 8008e9a:	b34c      	cbz	r4, 8008ef0 <communicatorRx+0x224>
    {
      if(msgType->type == NEG_CONFIRMATION) send |= CB_RET_nACK;
 8008e9c:	68b4      	ldr	r4, [r6, #8]
      if(msgType->type == CONF_TIMEOUT) send |= CB_RET_ACK;
      if(msgType->callback)
 8008e9e:	f8d6 9070 	ldr.w	r9, [r6, #112]	; 0x70
  int send = 0;

  uint8_t forwardMask = msgType->spk_flags;
  if(processLocally)
    {
      if(msgType->type == NEG_CONFIRMATION) send |= CB_RET_nACK;
 8008ea2:	2c01      	cmp	r4, #1
              processLocally = 1;
            }
        }
    }

  int send = 0;
 8008ea4:	bf1a      	itte	ne
 8008ea6:	fab4 f484 	clzne	r4, r4
 8008eaa:	0964      	lsrne	r4, r4, #5

  uint8_t forwardMask = msgType->spk_flags;
  if(processLocally)
    {
      if(msgType->type == NEG_CONFIRMATION) send |= CB_RET_nACK;
 8008eac:	2402      	moveq	r4, #2
      if(msgType->type == CONF_TIMEOUT) send |= CB_RET_ACK;
      if(msgType->callback)
 8008eae:	f1b9 0f00 	cmp.w	r9, #0
 8008eb2:	d006      	beq.n	8008ec2 <communicatorRx+0x1f6>
        send = msgType->callback(portNum, msgType, bBuffer, &forwardMask);
 8008eb4:	f10d 0317 	add.w	r3, sp, #23
 8008eb8:	463a      	mov	r2, r7
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	47c8      	blx	r9
 8008ec0:	4604      	mov	r4, r0

      if(((send & CB_RET_nACK) && msgType->type == CONF_TIMEOUT)
 8008ec2:	07a3      	lsls	r3, r4, #30
 8008ec4:	d501      	bpl.n	8008eca <communicatorRx+0x1fe>
 8008ec6:	68b3      	ldr	r3, [r6, #8]
 8008ec8:	b123      	cbz	r3, 8008ed4 <communicatorRx+0x208>
          || ((send & CB_RET_ACK) && msgType->type == NEG_CONFIRMATION))
 8008eca:	07e0      	lsls	r0, r4, #31
 8008ecc:	d504      	bpl.n	8008ed8 <communicatorRx+0x20c>
 8008ece:	68b3      	ldr	r3, [r6, #8]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d101      	bne.n	8008ed8 <communicatorRx+0x20c>
        bBuffer->data[0] = msgType->nackCode;
 8008ed4:	68f3      	ldr	r3, [r6, #12]
 8008ed6:	702b      	strb	r3, [r5, #0]

      if(send&(CB_RET_nACK | CB_RET_ACK))
 8008ed8:	07a1      	lsls	r1, r4, #30
 8008eda:	d009      	beq.n	8008ef0 <communicatorRx+0x224>
        {
          bRef(bBuffer);
 8008edc:	4638      	mov	r0, r7
 8008ede:	f00c fbe5 	bl	80156ac <bRef>
          messageTx(CEN_PORT, (void*)bBuffer->data, bBuffer->size, (uint32_t)bBuffer);
 8008ee2:	463b      	mov	r3, r7
 8008ee4:	f835 2c14 	ldrh.w	r2, [r5, #-20]
 8008ee8:	4629      	mov	r1, r5
 8008eea:	2000      	movs	r0, #0
 8008eec:	f002 ff88 	bl	800be00 <messageTx>
          forwardMask = 0;
        }
    }
#endif
  //Send further?
  if(forwardMask && DIRECTION(portNum) && (send & CB_RET_nACK) == 0)
 8008ef0:	f89d 9017 	ldrb.w	r9, [sp, #23]
 8008ef4:	f1b9 0f00 	cmp.w	r9, #0
 8008ef8:	d105      	bne.n	8008f06 <communicatorRx+0x23a>
    forwardMessage(bBuffer, msgType, forwardMask);


  //Release the incoming buffer
  bFree(bBuffer);
 8008efa:	4638      	mov	r0, r7
 8008efc:	f00c fa98 	bl	8015430 <bFree>
}
 8008f00:	b007      	add	sp, #28
 8008f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          forwardMask = 0;
        }
    }
#endif
  //Send further?
  if(forwardMask && DIRECTION(portNum) && (send & CB_RET_nACK) == 0)
 8008f06:	f1b8 0f00 	cmp.w	r8, #0
 8008f0a:	d1f6      	bne.n	8008efa <communicatorRx+0x22e>
 8008f0c:	07a2      	lsls	r2, r4, #30
 8008f0e:	d4f4      	bmi.n	8008efa <communicatorRx+0x22e>
}

static void forwardMessage(bBuffer_t *bBuffer, comm_t *msgType, uint8_t forwardMask)
{
  //Store the message
  bBuffer->timestamp = xTaskGetTickCount() + msgType->timeout;
 8008f10:	f001 fd04 	bl	800a91c <xTaskGetTickCount>
 8008f14:	6a33      	ldr	r3, [r6, #32]
  bBuffer->privateData = forwardMask;
 8008f16:	f845 9c08 	str.w	r9, [r5, #-8]
}

static void forwardMessage(bBuffer_t *bBuffer, comm_t *msgType, uint8_t forwardMask)
{
  //Store the message
  bBuffer->timestamp = xTaskGetTickCount() + msgType->timeout;
 8008f1a:	4418      	add	r0, r3
 8008f1c:	f845 0c0c 	str.w	r0, [r5, #-12]
  bBuffer->privateData = forwardMask;
  bAdd(&(msgType->buffers), bBuffer);
 8008f20:	4639      	mov	r1, r7
 8008f22:	f106 0078 	add.w	r0, r6, #120	; 0x78
 8008f26:	f00b ff85 	bl	8014e34 <bAdd>
  bRef(bBuffer);
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	f00c fbbe 	bl	80156ac <bRef>
  int bits = forwardMask;
 8008f30:	464c      	mov	r4, r9
  portNum_t sendPort = PER1_PORT;
 8008f32:	2601      	movs	r6, #1
  while(bits)
    {
      if(bits & 1)
 8008f34:	07e3      	lsls	r3, r4, #31
 8008f36:	d509      	bpl.n	8008f4c <communicatorRx+0x280>
        {
          //Send to the port
          bRef(bBuffer);
 8008f38:	4638      	mov	r0, r7
 8008f3a:	f00c fbb7 	bl	80156ac <bRef>
          messageTx(sendPort, (void*)bBuffer->data, bBuffer->size, (uint32_t)bBuffer);
 8008f3e:	463b      	mov	r3, r7
 8008f40:	f835 2c14 	ldrh.w	r2, [r5, #-20]
 8008f44:	4629      	mov	r1, r5
 8008f46:	4630      	mov	r0, r6
 8008f48:	f002 ff5a 	bl	800be00 <messageTx>
        }
      sendPort++;
 8008f4c:	3601      	adds	r6, #1
  bBuffer->privateData = forwardMask;
  bAdd(&(msgType->buffers), bBuffer);
  bRef(bBuffer);
  int bits = forwardMask;
  portNum_t sendPort = PER1_PORT;
  while(bits)
 8008f4e:	1064      	asrs	r4, r4, #1
        {
          //Send to the port
          bRef(bBuffer);
          messageTx(sendPort, (void*)bBuffer->data, bBuffer->size, (uint32_t)bBuffer);
        }
      sendPort++;
 8008f50:	b2f6      	uxtb	r6, r6
  bBuffer->privateData = forwardMask;
  bAdd(&(msgType->buffers), bBuffer);
  bRef(bBuffer);
  int bits = forwardMask;
  portNum_t sendPort = PER1_PORT;
  while(bits)
 8008f52:	d1ef      	bne.n	8008f34 <communicatorRx+0x268>
 8008f54:	e7d1      	b.n	8008efa <communicatorRx+0x22e>
 8008f56:	bf00      	nop
 8008f58:	10001000 	.word	0x10001000
 8008f5c:	0801d40a 	.word	0x0801d40a
 8008f60:	0801d432 	.word	0x0801d432
 8008f64:	10002348 	.word	0x10002348
 8008f68:	0801d401 	.word	0x0801d401
 8008f6c:	0801d405 	.word	0x0801d405
 8008f70:	0801d45d 	.word	0x0801d45d
 8008f74:	0801d481 	.word	0x0801d481
 8008f78:	0803de8a 	.word	0x0803de8a

08008f7c <msgGenSend>:
}

void msgGenSend(bBuffer_t *msg)
{
  //Simulate message receiving from CEN. It will be sent further
  messageRx(CEN_PORT, (void*)msg->data, msg->size, 1);
 8008f7c:	4601      	mov	r1, r0
 8008f7e:	2301      	movs	r3, #1
 8008f80:	f831 2b14 	ldrh.w	r2, [r1], #20
 8008f84:	2000      	movs	r0, #0
 8008f86:	f002 bae5 	b.w	800b554 <messageRx>

08008f8a <communicatorTxComplete>:
}

void communicatorTxComplete(portNum_t portNum, int status, uint32_t handle)
{
 8008f8a:	4770      	bx	lr

08008f8c <communicatorPeriodic>:
}

void communicatorPeriodic(void)
{
 8008f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  communicatorPeriodicPrivate();
 8008f90:	f001 f8d6 	bl	800a140 <communicatorPeriodicPrivate>
  int i;
  for (i = 0; i < sizeof(MSG_TYPES_TAB) / sizeof(MSG_TYPES_TAB[0]); i++)
    {
      if(MSG_TYPES_TAB[i].size == 0) continue;
 8008f94:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8009040 <communicatorPeriodic+0xb4>

void communicatorPeriodic(void)
{
  communicatorPeriodicPrivate();
  int i;
  for (i = 0; i < sizeof(MSG_TYPES_TAB) / sizeof(MSG_TYPES_TAB[0]); i++)
 8008f98:	2700      	movs	r7, #0
    {
      if(MSG_TYPES_TAB[i].size == 0) continue;
 8008f9a:	f04f 0b7c 	mov.w	fp, #124	; 0x7c
 8008f9e:	fb0b f507 	mul.w	r5, fp, r7
 8008fa2:	eb09 0605 	add.w	r6, r9, r5
 8008fa6:	6873      	ldr	r3, [r6, #4]
 8008fa8:	b92b      	cbnz	r3, 8008fb6 <communicatorPeriodic+0x2a>

void communicatorPeriodic(void)
{
  communicatorPeriodicPrivate();
  int i;
  for (i = 0; i < sizeof(MSG_TYPES_TAB) / sizeof(MSG_TYPES_TAB[0]); i++)
 8008faa:	3701      	adds	r7, #1
 8008fac:	2f1a      	cmp	r7, #26
 8008fae:	d1f6      	bne.n	8008f9e <communicatorPeriodic+0x12>
                }
              buf = next;
            }
        }
    }
}
 8008fb0:	b003      	add	sp, #12
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  communicatorPeriodicPrivate();
  int i;
  for (i = 0; i < sizeof(MSG_TYPES_TAB) / sizeof(MSG_TYPES_TAB[0]); i++)
    {
      if(MSG_TYPES_TAB[i].size == 0) continue;
      if(MSG_TYPES_TAB[i].type == CONF_TIMEOUT)
 8008fb6:	68b3      	ldr	r3, [r6, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1f6      	bne.n	8008faa <communicatorPeriodic+0x1e>
 8008fbc:	3578      	adds	r5, #120	; 0x78
        {
          bBuffer_t *buf = MSG_TYPES_TAB[i].buffers;
 8008fbe:	6fb4      	ldr	r4, [r6, #120]	; 0x78
 8008fc0:	444d      	add	r5, r9
                        {

#ifdef MADO
                          //                          SPIevent(portNum, SPI_EV_TYPE_LINK_ERROR);
#endif
                          if(MSG_TYPES_TAB[i].timeoutCallback)
 8008fc2:	46b2      	mov	sl, r6
    {
      if(MSG_TYPES_TAB[i].size == 0) continue;
      if(MSG_TYPES_TAB[i].type == CONF_TIMEOUT)
        {
          bBuffer_t *buf = MSG_TYPES_TAB[i].buffers;
          while(buf)
 8008fc4:	2c00      	cmp	r4, #0
 8008fc6:	d0f0      	beq.n	8008faa <communicatorPeriodic+0x1e>
            {
              bBuffer_t *next = buf->next;
 8008fc8:	6923      	ldr	r3, [r4, #16]

              //Now check timeout expiry
              if (buf->timestamp < xTaskGetTickCount())
 8008fca:	f8d4 8008 	ldr.w	r8, [r4, #8]
      if(MSG_TYPES_TAB[i].type == CONF_TIMEOUT)
        {
          bBuffer_t *buf = MSG_TYPES_TAB[i].buffers;
          while(buf)
            {
              bBuffer_t *next = buf->next;
 8008fce:	9300      	str	r3, [sp, #0]

              //Now check timeout expiry
              if (buf->timestamp < xTaskGetTickCount())
 8008fd0:	f001 fca4 	bl	800a91c <xTaskGetTickCount>
 8008fd4:	4580      	cmp	r8, r0
 8008fd6:	d230      	bcs.n	800903a <communicatorPeriodic+0xae>
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f04f 0802 	mov.w	r8, #2
                  //Check which speakers did not repond. Restart link.
                  portNum_t portNum;
                  int send = CB_RET_nACK;//assume nACK
                  for(portNum = PER1_PORT; portNum < PORTS_NUM; portNum++)
                    {
                      if((buf->privateData & (1<<(portNum-1))))
 8008fde:	2101      	movs	r1, #1
 8008fe0:	1c53      	adds	r3, r2, #1
 8008fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8008fe6:	68e1      	ldr	r1, [r4, #12]
 8008fe8:	420a      	tst	r2, r1
 8008fea:	b2d8      	uxtb	r0, r3
 8008fec:	d007      	beq.n	8008ffe <communicatorPeriodic+0x72>
                        {

#ifdef MADO
                          //                          SPIevent(portNum, SPI_EV_TYPE_LINK_ERROR);
#endif
                          if(MSG_TYPES_TAB[i].timeoutCallback)
 8008fee:	f8da 2074 	ldr.w	r2, [sl, #116]	; 0x74
 8008ff2:	b122      	cbz	r2, 8008ffe <communicatorPeriodic+0x72>
                            send = MSG_TYPES_TAB[i].timeoutCallback(portNum,  &MSG_TYPES_TAB[i]);
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	4790      	blx	r2
 8008ffa:	9b01      	ldr	r3, [sp, #4]
 8008ffc:	4680      	mov	r8, r0
                {

                  //Check which speakers did not repond. Restart link.
                  portNum_t portNum;
                  int send = CB_RET_nACK;//assume nACK
                  for(portNum = PER1_PORT; portNum < PORTS_NUM; portNum++)
 8008ffe:	2b08      	cmp	r3, #8
 8009000:	461a      	mov	r2, r3
 8009002:	d1ec      	bne.n	8008fde <communicatorPeriodic+0x52>
                          if(MSG_TYPES_TAB[i].timeoutCallback)
                            send = MSG_TYPES_TAB[i].timeoutCallback(portNum,  &MSG_TYPES_TAB[i]);
                        }
                    }

                  if(buf->privateData)
 8009004:	68e3      	ldr	r3, [r4, #12]
 8009006:	b1c3      	cbz	r3, 800903a <communicatorPeriodic+0xae>
                    {
                      //No confirmation came
                      //Remove message from table and send it as nACK
                      bRemove(&(MSG_TYPES_TAB[i].buffers), buf);
 8009008:	4621      	mov	r1, r4
 800900a:	4628      	mov	r0, r5
 800900c:	f00b ff16 	bl	8014e3c <bRemove>

                      if(MSG_TYPES_TAB[i].nackCode && send)
 8009010:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009014:	b173      	cbz	r3, 8009034 <communicatorPeriodic+0xa8>
 8009016:	f1b8 0f00 	cmp.w	r8, #0
 800901a:	d00b      	beq.n	8009034 <communicatorPeriodic+0xa8>
                        {
                          //Send nACK/ACK to CEN
                          if(send &CB_RET_nACK)
 800901c:	f018 0f02 	tst.w	r8, #2
                            buf->data[0] = MSG_TYPES_TAB[i].nackCode;
                          messageTx(CEN_PORT, (void*)buf->data, buf->size, (uint32_t)buf);
 8009020:	4621      	mov	r1, r4

                      if(MSG_TYPES_TAB[i].nackCode && send)
                        {
                          //Send nACK/ACK to CEN
                          if(send &CB_RET_nACK)
                            buf->data[0] = MSG_TYPES_TAB[i].nackCode;
 8009022:	bf18      	it	ne
 8009024:	7523      	strbne	r3, [r4, #20]
                          messageTx(CEN_PORT, (void*)buf->data, buf->size, (uint32_t)buf);
 8009026:	f831 2b14 	ldrh.w	r2, [r1], #20
 800902a:	4623      	mov	r3, r4
 800902c:	2000      	movs	r0, #0
 800902e:	f002 fee7 	bl	800be00 <messageTx>
 8009032:	e002      	b.n	800903a <communicatorPeriodic+0xae>
                        }
                      else
                        bFree(buf);
 8009034:	4620      	mov	r0, r4
 8009036:	f00c f9fb 	bl	8015430 <bFree>
 800903a:	9c00      	ldr	r4, [sp, #0]
 800903c:	e7c2      	b.n	8008fc4 <communicatorPeriodic+0x38>
 800903e:	bf00      	nop
 8009040:	10001234 	.word	0x10001234

08009044 <connectionState>:
 8009044:	4770      	bx	lr

08009046 <getSecondPort>:
{
}

portNum_t getSecondPort(portNum_t portNum)
{
  if(portNum >= PER1_PORT && portNum < PORTS_NUM)
 8009046:	1e42      	subs	r2, r0, #1
 8009048:	b2d3      	uxtb	r3, r2
 800904a:	2b07      	cmp	r3, #7
 800904c:	d804      	bhi.n	8009058 <getSecondPort+0x12>
    {
      if( (portNum - PER1_PORT)&1) return portNum - 1;
 800904e:	07d2      	lsls	r2, r2, #31
 8009050:	d404      	bmi.n	800905c <getSecondPort+0x16>
      else  return portNum + 1;
 8009052:	3001      	adds	r0, #1
 8009054:	b2c0      	uxtb	r0, r0
 8009056:	4770      	bx	lr
    }
  return CEN_PORT;
 8009058:	2000      	movs	r0, #0
 800905a:	4770      	bx	lr
 800905c:	4618      	mov	r0, r3
}
 800905e:	4770      	bx	lr

08009060 <lockNonFlashMessages>:
void lockNonFlashMessages(uint8_t lock)
{
  int i;
  for (i = 0; i < sizeof(MSG_TYPES_TAB) / sizeof(MSG_TYPES_TAB[0]); i++)
    {
      if(MSG_TYPES_TAB[i].size == 0) continue;
 8009060:	490d      	ldr	r1, [pc, #52]	; (8009098 <lockNonFlashMessages+0x38>)
    }
  return CEN_PORT;
}

void lockNonFlashMessages(uint8_t lock)
{
 8009062:	b570      	push	{r4, r5, r6, lr}
  int i;
  for (i = 0; i < sizeof(MSG_TYPES_TAB) / sizeof(MSG_TYPES_TAB[0]); i++)
 8009064:	2300      	movs	r3, #0
    {
      if(MSG_TYPES_TAB[i].size == 0) continue;
 8009066:	247c      	movs	r4, #124	; 0x7c
 8009068:	460d      	mov	r5, r1
 800906a:	fb04 1203 	mla	r2, r4, r3, r1
 800906e:	6856      	ldr	r6, [r2, #4]
 8009070:	b16e      	cbz	r6, 800908e <lockNonFlashMessages+0x2e>
      switch(MSG_TYPES_TAB[i].code)
 8009072:	6812      	ldr	r2, [r2, #0]
 8009074:	2ac2      	cmp	r2, #194	; 0xc2
 8009076:	dc05      	bgt.n	8009084 <lockNonFlashMessages+0x24>
 8009078:	2ac1      	cmp	r2, #193	; 0xc1
 800907a:	da08      	bge.n	800908e <lockNonFlashMessages+0x2e>
 800907c:	2a55      	cmp	r2, #85	; 0x55
 800907e:	d006      	beq.n	800908e <lockNonFlashMessages+0x2e>
 8009080:	2aa2      	cmp	r2, #162	; 0xa2
 8009082:	e000      	b.n	8009086 <lockNonFlashMessages+0x26>
 8009084:	2acc      	cmp	r2, #204	; 0xcc
        case 0xC1:
        case 0xC2:
          //Do not block
          break;
        default:
          MSG_TYPES_TAB[i].blocked = lock;
 8009086:	bf1c      	itt	ne
 8009088:	fb04 5203 	mlane	r2, r4, r3, r5
 800908c:	6250      	strne	r0, [r2, #36]	; 0x24
}

void lockNonFlashMessages(uint8_t lock)
{
  int i;
  for (i = 0; i < sizeof(MSG_TYPES_TAB) / sizeof(MSG_TYPES_TAB[0]); i++)
 800908e:	3301      	adds	r3, #1
 8009090:	2b1a      	cmp	r3, #26
 8009092:	d1ea      	bne.n	800906a <lockNonFlashMessages+0xa>
          break;

        }
    }

}
 8009094:	bd70      	pop	{r4, r5, r6, pc}
 8009096:	bf00      	nop
 8009098:	10001234 	.word	0x10001234

0800909c <msgnACK>:
/* MSGACK(5A); */
static int msgnACK(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
  if (DIRECTION(portNum)) return 0;
  return 0;
}
 800909c:	2000      	movs	r0, #0
 800909e:	4770      	bx	lr

080090a0 <onOffFailed>:
}


static int onOffFailed(portNum_t portNum, comm_t *comm)
{
  onOffPending = 0;
 80090a0:	4b08      	ldr	r3, [pc, #32]	; (80090c4 <onOffFailed+0x24>)
  int spkNum = (portNum - PER1_PORT)>>1;
  if(cfg.ack50)
 80090a2:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <onOffFailed+0x28>)
}


static int onOffFailed(portNum_t portNum, comm_t *comm)
{
  onOffPending = 0;
 80090a4:	2100      	movs	r1, #0
 80090a6:	6019      	str	r1, [r3, #0]
  int spkNum = (portNum - PER1_PORT)>>1;
  if(cfg.ack50)
 80090a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80090aa:	b142      	cbz	r2, 80090be <onOffFailed+0x1e>
    {
      spkSet[spkNum].reqOn = 0;
 80090ac:	3801      	subs	r0, #1
 80090ae:	1040      	asrs	r0, r0, #1
 80090b0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80090b4:	4403      	add	r3, r0
 80090b6:	7a1a      	ldrb	r2, [r3, #8]
 80090b8:	f361 0200 	bfi	r2, r1, #0, #1
 80090bc:	721a      	strb	r2, [r3, #8]
    }
  return CB_RET_nACK;
}
 80090be:	2002      	movs	r0, #2
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	10002b30 	.word	0x10002b30
 80090c8:	10001000 	.word	0x10001000

080090cc <kondPom2SpkNum>:
static int onOffPending = 0;
static int sendVolume(int kondPom);
static int sendSHARK(int kondPom, int msg60);

static int kondPom2SpkNum(int kondPom)
{
 80090cc:	b508      	push	{r3, lr}
  portNum_t p = getPortNum(kondPom, 0);
 80090ce:	2100      	movs	r1, #0
 80090d0:	f003 fa1c 	bl	800c50c <getPortNum>
  if(p < PER1_PORT || p >= PORTS_NUM)
 80090d4:	3801      	subs	r0, #1
 80090d6:	b2c3      	uxtb	r3, r0
 80090d8:	2b07      	cmp	r3, #7
    return -1;
  int spkNum = (p - PER1_PORT)>>1;
 80090da:	bf94      	ite	ls
 80090dc:	1040      	asrls	r0, r0, #1

static int kondPom2SpkNum(int kondPom)
{
  portNum_t p = getPortNum(kondPom, 0);
  if(p < PER1_PORT || p >= PORTS_NUM)
    return -1;
 80090de:	f04f 30ff 	movhi.w	r0, #4294967295
  int spkNum = (p - PER1_PORT)>>1;
  return spkNum;
}
 80090e2:	bd08      	pop	{r3, pc}

080090e4 <sendVolume>:
  sendBroadcast(bBuffer, data->kondPom, offsetof(msg_B1_t, guiTp));
  return 0;
}

static int sendVolume(int kondPom)
{
 80090e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e8:	4607      	mov	r7, r0
  int spkNum =  kondPom2SpkNum(kondPom);
 80090ea:	f7ff ffef 	bl	80090cc <kondPom2SpkNum>
  if(spkNum < 0) return -1;
 80090ee:	2800      	cmp	r0, #0
 80090f0:	db2c      	blt.n	800914c <sendVolume+0x68>
 80090f2:	4e18      	ldr	r6, [pc, #96]	; (8009154 <sendVolume+0x70>)
  int i = 0;
  for(i = 0; i < 2; i++)
    {
      if(cfg.smok_mask & (1<<i))
 80090f4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8009158 <sendVolume+0x74>
 80090f8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80090fc:	4406      	add	r6, r0
}

static int sendVolume(int kondPom)
{
  int spkNum =  kondPom2SpkNum(kondPom);
  if(spkNum < 0) return -1;
 80090fe:	2500      	movs	r5, #0
    {
      if(cfg.smok_mask & (1<<i))
        {

          bBuffer_t *msg = bAlloc(MSG_LEN);
          msg->size = sizeof(msg_80_t);
 8009100:	f04f 0806 	mov.w	r8, #6
  int spkNum =  kondPom2SpkNum(kondPom);
  if(spkNum < 0) return -1;
  int i = 0;
  for(i = 0; i < 2; i++)
    {
      if(cfg.smok_mask & (1<<i))
 8009104:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009108:	412b      	asrs	r3, r5
 800910a:	f013 0f01 	tst.w	r3, #1
 800910e:	f105 0a01 	add.w	sl, r5, #1
 8009112:	d015      	beq.n	8009140 <sendVolume+0x5c>
        {

          bBuffer_t *msg = bAlloc(MSG_LEN);
 8009114:	2020      	movs	r0, #32
 8009116:	f00b ff31 	bl	8014f7c <bAlloc>
          msg->size = sizeof(msg_80_t);
          msg_80_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
 800911a:	2220      	movs	r2, #32
  for(i = 0; i < 2; i++)
    {
      if(cfg.smok_mask & (1<<i))
        {

          bBuffer_t *msg = bAlloc(MSG_LEN);
 800911c:	4604      	mov	r4, r0
          msg->size = sizeof(msg_80_t);
          msg_80_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
 800911e:	2100      	movs	r1, #0
    {
      if(cfg.smok_mask & (1<<i))
        {

          bBuffer_t *msg = bAlloc(MSG_LEN);
          msg->size = sizeof(msg_80_t);
 8009120:	f820 8b14 	strh.w	r8, [r0], #20
          msg_80_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
 8009124:	f014 f826 	bl	801d174 <memset>
          data->kod = 0x80;
 8009128:	2380      	movs	r3, #128	; 0x80
 800912a:	7523      	strb	r3, [r4, #20]
          data->kondPom = kondPom;
 800912c:	7567      	strb	r7, [r4, #21]
          data->urzadzenie = 1 + i;
 800912e:	f884 a016 	strb.w	sl, [r4, #22]
          data->volume = spkSet[spkNum].volume[i];
 8009132:	5d73      	ldrb	r3, [r6, r5]
 8009134:	75e3      	strb	r3, [r4, #23]
          data->guiTp = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	7663      	strb	r3, [r4, #25]
          msgGenSend(msg);
 800913a:	4620      	mov	r0, r4
 800913c:	f7ff ff1e 	bl	8008f7c <msgGenSend>
static int sendVolume(int kondPom)
{
  int spkNum =  kondPom2SpkNum(kondPom);
  if(spkNum < 0) return -1;
  int i = 0;
  for(i = 0; i < 2; i++)
 8009140:	4655      	mov	r5, sl
 8009142:	2d02      	cmp	r5, #2
 8009144:	d1de      	bne.n	8009104 <sendVolume+0x20>
          data->volume = spkSet[spkNum].volume[i];
          data->guiTp = 0;
          msgGenSend(msg);
        }
    }
  return 0;
 8009146:	2000      	movs	r0, #0
 8009148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
}

static int sendVolume(int kondPom)
{
  int spkNum =  kondPom2SpkNum(kondPom);
  if(spkNum < 0) return -1;
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
          data->guiTp = 0;
          msgGenSend(msg);
        }
    }
  return 0;
}
 8009150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009154:	10002b34 	.word	0x10002b34
 8009158:	10001000 	.word	0x10001000

0800915c <msgFlash>:
    }
  return CB_RET_ACK;
}

static int msgFlash(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	4614      	mov	r4, r2
  msg_A2_t *data = (void*)bBuffer->data;
  if(DIRECTION(portNum))
 8009160:	4605      	mov	r5, r0
 8009162:	bb80      	cbnz	r0, 80091c6 <msgFlash+0x6a>
    {
      A2Data_t *buf = (A2Data_t *)data;
      *forwardMask = buf->mask;
 8009164:	8ad2      	ldrh	r2, [r2, #22]
 8009166:	701a      	strb	r2, [r3, #0]
      if(buf->mask == 0)
 8009168:	8ae2      	ldrh	r2, [r4, #22]
 800916a:	7d63      	ldrb	r3, [r4, #21]
 800916c:	2a00      	cmp	r2, #0
 800916e:	d170      	bne.n	8009252 <msgFlash+0xf6>
        {
          bBuffer->size = sizeof(msg_A2r_t);
 8009170:	2106      	movs	r1, #6
          //I am the destination
          switch(buf->subCode)
 8009172:	2b03      	cmp	r3, #3
    {
      A2Data_t *buf = (A2Data_t *)data;
      *forwardMask = buf->mask;
      if(buf->mask == 0)
        {
          bBuffer->size = sizeof(msg_A2r_t);
 8009174:	8021      	strh	r1, [r4, #0]
          //I am the destination
          switch(buf->subCode)
 8009176:	d028      	beq.n	80091ca <msgFlash+0x6e>
 8009178:	2b04      	cmp	r3, #4
 800917a:	d002      	beq.n	8009182 <msgFlash+0x26>
 800917c:	2b01      	cmp	r3, #1
 800917e:	d172      	bne.n	8009266 <msgFlash+0x10a>
 8009180:	e043      	b.n	800920a <msgFlash+0xae>
            {
            case FILE_INIT:
            {
              lockNonFlashMessages(1);
 8009182:	2001      	movs	r0, #1
 8009184:	f7ff ff6c 	bl	8009060 <lockNonFlashMessages>

              //Erase FLASH
              FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR );
 8009188:	20f2      	movs	r0, #242	; 0xf2
 800918a:	f7f7 fbd9 	bl	8000940 <FLASH_ClearFlag>
              FLASH_Unlock();
 800918e:	f7f7 fbc9 	bl	8000924 <FLASH_Unlock>
              IWDG_ReloadCounter();
 8009192:	f009 ffd5 	bl	8013140 <IWDG_ReloadCounter>
              FLASH_EraseSector(FLASH_Sector_8, VoltageRange_3);
 8009196:	2102      	movs	r1, #2
 8009198:	2040      	movs	r0, #64	; 0x40
 800919a:	f7f7 fc17 	bl	80009cc <FLASH_EraseSector>
              IWDG_ReloadCounter();
 800919e:	f009 ffcf 	bl	8013140 <IWDG_ReloadCounter>
              FLASH_EraseSector(FLASH_Sector_9, VoltageRange_3);
 80091a2:	2102      	movs	r1, #2
 80091a4:	2048      	movs	r0, #72	; 0x48
 80091a6:	f7f7 fc11 	bl	80009cc <FLASH_EraseSector>
              IWDG_ReloadCounter();
 80091aa:	f009 ffc9 	bl	8013140 <IWDG_ReloadCounter>
              FLASH_EraseSector(FLASH_Sector_10, VoltageRange_3);
 80091ae:	2102      	movs	r1, #2
 80091b0:	2050      	movs	r0, #80	; 0x50
 80091b2:	f7f7 fc0b 	bl	80009cc <FLASH_EraseSector>
              IWDG_ReloadCounter();
 80091b6:	f009 ffc3 	bl	8013140 <IWDG_ReloadCounter>
              FLASH_EraseSector(FLASH_Sector_11, VoltageRange_3);
 80091ba:	2102      	movs	r1, #2
 80091bc:	2058      	movs	r0, #88	; 0x58
 80091be:	f7f7 fc05 	bl	80009cc <FLASH_EraseSector>
              IWDG_ReloadCounter();
 80091c2:	f009 ffbd 	bl	8013140 <IWDG_ReloadCounter>

              //Send ACK od nACK
              return CB_RET_ACK;
 80091c6:	2001      	movs	r0, #1
 80091c8:	bd70      	pop	{r4, r5, r6, pc}
            }
            case FILE_BUFFER:
            {
              //Store in flash
              int crc = buf->cmd_buffer.crc;
 80091ca:	8e65      	ldrh	r5, [r4, #50]	; 0x32
              buf->cmd_buffer.crc = 0;
 80091cc:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
 80091d0:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
              if(crc != crc16(0, buf, sizeof(A2Data_t)))
 80091d4:	f104 0114 	add.w	r1, r4, #20
 80091d8:	2220      	movs	r2, #32
 80091da:	f7f7 f88f 	bl	80002fc <crc16>
 80091de:	4285      	cmp	r5, r0
 80091e0:	d141      	bne.n	8009266 <msgFlash+0x10a>
                return CB_RET_nACK;

              int offset = buf->cmd_buffer.chunkIdx*sizeof(buf->cmd_buffer.data);
              uint32_t *src = (uint32_t*)buf->cmd_buffer.data;
              uint32_t addr = (uint32_t)(&flashStorage[offset]);
 80091e2:	8b23      	ldrh	r3, [r4, #24]
 80091e4:	4a22      	ldr	r2, [pc, #136]	; (8009270 <msgFlash+0x114>)
              buf->cmd_buffer.crc = 0;
              if(crc != crc16(0, buf, sizeof(A2Data_t)))
                return CB_RET_nACK;

              int offset = buf->cmd_buffer.chunkIdx*sizeof(buf->cmd_buffer.data);
              uint32_t *src = (uint32_t*)buf->cmd_buffer.data;
 80091e6:	f104 051a 	add.w	r5, r4, #26
              uint32_t addr = (uint32_t)(&flashStorage[offset]);
 80091ea:	2418      	movs	r4, #24
 80091ec:	fb04 2403 	mla	r4, r4, r3, r2
 80091f0:	f104 0618 	add.w	r6, r4, #24
              int num =  sizeof(buf->cmd_buffer.data)/4;
              while(num--)
 80091f4:	42b4      	cmp	r4, r6
 80091f6:	d0e6      	beq.n	80091c6 <msgFlash+0x6a>
                {
                  if(FLASH_ProgramWord(addr, *(src++)) != FLASH_COMPLETE)
 80091f8:	f855 1b04 	ldr.w	r1, [r5], #4
 80091fc:	4620      	mov	r0, r4
 80091fe:	f7f7 fc39 	bl	8000a74 <FLASH_ProgramWord>
 8009202:	2809      	cmp	r0, #9
 8009204:	d12f      	bne.n	8009266 <msgFlash+0x10a>
                    return CB_RET_nACK;
                  addr+=4;
 8009206:	3404      	adds	r4, #4
 8009208:	e7f4      	b.n	80091f4 <msgFlash+0x98>
              return CB_RET_ACK;
            }
            case FILE_STM:
            {

              dprintf(LL_DEBUG, "Verifying flash image\n");
 800920a:	4d1a      	ldr	r5, [pc, #104]	; (8009274 <msgFlash+0x118>)
 800920c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800920e:	2b02      	cmp	r3, #2
 8009210:	dd02      	ble.n	8009218 <msgFlash+0xbc>
 8009212:	4819      	ldr	r0, [pc, #100]	; (8009278 <msgFlash+0x11c>)
 8009214:	f7ff fd08 	bl	8008c28 <xprintf>
              //Calculate checksum and prepare for update
              uint32_t crc = crc32(0, flashStorage, buf->cmd_finish.size);
 8009218:	69a2      	ldr	r2, [r4, #24]
 800921a:	4915      	ldr	r1, [pc, #84]	; (8009270 <msgFlash+0x114>)
 800921c:	2000      	movs	r0, #0
 800921e:	f7f7 f859 	bl	80002d4 <crc32>
              if(crc != buf->cmd_finish.crc32)
 8009222:	69e3      	ldr	r3, [r4, #28]
 8009224:	4298      	cmp	r0, r3
                {
                  dprintf(LL_DEBUG, "Flash image NOT Ok\n");
 8009226:	6c2b      	ldr	r3, [r5, #64]	; 0x40
            {

              dprintf(LL_DEBUG, "Verifying flash image\n");
              //Calculate checksum and prepare for update
              uint32_t crc = crc32(0, flashStorage, buf->cmd_finish.size);
              if(crc != buf->cmd_finish.crc32)
 8009228:	d005      	beq.n	8009236 <msgFlash+0xda>
                {
                  dprintf(LL_DEBUG, "Flash image NOT Ok\n");
 800922a:	2b02      	cmp	r3, #2
 800922c:	dd1b      	ble.n	8009266 <msgFlash+0x10a>
 800922e:	4813      	ldr	r0, [pc, #76]	; (800927c <msgFlash+0x120>)
 8009230:	f7ff fcfa 	bl	8008c28 <xprintf>
 8009234:	e017      	b.n	8009266 <msgFlash+0x10a>
                  return CB_RET_nACK;
                }

              dprintf(LL_DEBUG, "Flash image Ok\n");
 8009236:	2b02      	cmp	r3, #2
 8009238:	dd02      	ble.n	8009240 <msgFlash+0xe4>
 800923a:	4811      	ldr	r0, [pc, #68]	; (8009280 <msgFlash+0x124>)
 800923c:	f7ff fcf4 	bl	8008c28 <xprintf>
              //Update by bootloader
              cfg.fSize = buf->cmd_finish.size;
 8009240:	69a3      	ldr	r3, [r4, #24]
 8009242:	602b      	str	r3, [r5, #0]
              cfg.fCRC = buf->cmd_finish.crc32;
 8009244:	69e3      	ldr	r3, [r4, #28]
 8009246:	606b      	str	r3, [r5, #4]
              cfgFlush();
 8009248:	f7f6 ffda 	bl	8000200 <cfgFlush>
              watchdogReset();//Delayed reset
 800924c:	f004 ff08 	bl	800e060 <watchdogReset>
 8009250:	e7b9      	b.n	80091c6 <msgFlash+0x6a>
            }
        }
      else
        {
          //Forward message
          switch(buf->subCode)
 8009252:	b153      	cbz	r3, 800926a <msgFlash+0x10e>
 8009254:	2b02      	cmp	r3, #2
 8009256:	d902      	bls.n	800925e <msgFlash+0x102>
 8009258:	2b04      	cmp	r3, #4
 800925a:	d106      	bne.n	800926a <msgFlash+0x10e>
            {
            case FILE_INIT:
              lockNonFlashMessages(1);
 800925c:	2001      	movs	r0, #1
              break;
            case FILE_BUFFER:
              break;
            case FILE_STM:
            case FILE_SHARC:
              lockNonFlashMessages(0);
 800925e:	f7ff feff 	bl	8009060 <lockNonFlashMessages>
              break;
            default:
              break;
            }
          //Send further
          return 0;
 8009262:	4628      	mov	r0, r5
            case FILE_BUFFER:
              break;
            case FILE_STM:
            case FILE_SHARC:
              lockNonFlashMessages(0);
              break;
 8009264:	bd70      	pop	{r4, r5, r6, pc}

              //Send ACK od nACK
              return CB_RET_ACK;
            }
            default:
              return CB_RET_nACK;
 8009266:	2002      	movs	r0, #2
 8009268:	bd70      	pop	{r4, r5, r6, pc}
              break;
            default:
              break;
            }
          //Send further
          return 0;
 800926a:	2000      	movs	r0, #0
        }
    }
  return CB_RET_ACK;
}
 800926c:	bd70      	pop	{r4, r5, r6, pc}
 800926e:	bf00      	nop
 8009270:	08080000 	.word	0x08080000
 8009274:	10001000 	.word	0x10001000
 8009278:	0801d493 	.word	0x0801d493
 800927c:	0801d4aa 	.word	0x0801d4aa
 8009280:	0801d4be 	.word	0x0801d4be

08009284 <msgDisconnect>:
  data->VolumeR = spkSet[spkNum].volume[1];
  return CB_RET_ACK;
}

static int msgDisconnect(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009284:	b570      	push	{r4, r5, r6, lr}
  msg_98_t *data = (void *)bBuffer->data;
  int tpGui = data->guiTp;
  tpGui_t *gui = tp_gui;
 8009286:	4b10      	ldr	r3, [pc, #64]	; (80092c8 <msgDisconnect+0x44>)
}

static int msgDisconnect(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
  msg_98_t *data = (void *)bBuffer->data;
  int tpGui = data->guiTp;
 8009288:	7e51      	ldrb	r1, [r2, #25]
  tpGui_t *gui = tp_gui;
 800928a:	6a1c      	ldr	r4, [r3, #32]
  tpGui_t *prev = NULL;
 800928c:	2600      	movs	r6, #0
 800928e:	461d      	mov	r5, r3
  //Check if already registered
  while (gui)
 8009290:	b1bc      	cbz	r4, 80092c2 <msgDisconnect+0x3e>
    {
      if (gui->id == tpGui && gui->kond_pom == data->kondPom)
 8009292:	6863      	ldr	r3, [r4, #4]
 8009294:	4299      	cmp	r1, r3
 8009296:	d103      	bne.n	80092a0 <msgDisconnect+0x1c>
 8009298:	7a20      	ldrb	r0, [r4, #8]
 800929a:	7d53      	ldrb	r3, [r2, #21]
 800929c:	4298      	cmp	r0, r3
 800929e:	d002      	beq.n	80092a6 <msgDisconnect+0x22>
        break;
      prev = gui;
      gui = gui->next;
 80092a0:	4626      	mov	r6, r4
 80092a2:	6824      	ldr	r4, [r4, #0]
 80092a4:	e7f4      	b.n	8009290 <msgDisconnect+0xc>
    }
  if (gui != NULL)
    {
      dprintf(LL_INFO, "Deregistered GUI/TP %d\n", tpGui);
 80092a6:	4b09      	ldr	r3, [pc, #36]	; (80092cc <msgDisconnect+0x48>)
 80092a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	dd02      	ble.n	80092b4 <msgDisconnect+0x30>
 80092ae:	4808      	ldr	r0, [pc, #32]	; (80092d0 <msgDisconnect+0x4c>)
 80092b0:	f7ff fcba 	bl	8008c28 <xprintf>
      if (prev)
 80092b4:	b90e      	cbnz	r6, 80092ba <msgDisconnect+0x36>
        prev = gui->next;
      else
        tp_gui = gui->next;
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	622b      	str	r3, [r5, #32]
      dFree(gui);
 80092ba:	f1a4 0014 	sub.w	r0, r4, #20
 80092be:	f00c f8b7 	bl	8015430 <bFree>
    }
  return CB_RET_ACK;
}
 80092c2:	2001      	movs	r0, #1
 80092c4:	bd70      	pop	{r4, r5, r6, pc}
 80092c6:	bf00      	nop
 80092c8:	10002b30 	.word	0x10002b30
 80092cc:	10001000 	.word	0x10001000
 80092d0:	0801d4ce 	.word	0x0801d4ce

080092d4 <sendBroadcast>:
  int spkNum = (p - PER1_PORT)>>1;
  return spkNum;
}

static int sendBroadcast(bBuffer_t *buffer, uint8_t kondPom, uint8_t tpGuiOffset)
{
 80092d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int ret = CB_RET_ACK;//In case TP is not registered
  tpGui_t *gui = tp_gui;
 80092d8:	4b19      	ldr	r3, [pc, #100]	; (8009340 <sendBroadcast+0x6c>)
 80092da:	6a1c      	ldr	r4, [r3, #32]
  int noneFound = 1;
 80092dc:	2301      	movs	r3, #1
  int spkNum = (p - PER1_PORT)>>1;
  return spkNum;
}

static int sendBroadcast(bBuffer_t *buffer, uint8_t kondPom, uint8_t tpGuiOffset)
{
 80092de:	4607      	mov	r7, r0
 80092e0:	4688      	mov	r8, r1
 80092e2:	4615      	mov	r5, r2
  int ret = CB_RET_ACK;//In case TP is not registered
 80092e4:	461e      	mov	r6, r3
  int noneFound = 1;
  while (gui)
    {
      if (gui->kond_pom == kondPom)
        {
          if (buffer->data[tpGuiOffset] == gui->id) ret = 0; //Do not duplicate message guiTp
 80092e6:	eb00 0902 	add.w	r9, r0, r2
static int sendBroadcast(bBuffer_t *buffer, uint8_t kondPom, uint8_t tpGuiOffset)
{
  int ret = CB_RET_ACK;//In case TP is not registered
  tpGui_t *gui = tp_gui;
  int noneFound = 1;
  while (gui)
 80092ea:	b1c4      	cbz	r4, 800931e <sendBroadcast+0x4a>
    {
      if (gui->kond_pom == kondPom)
 80092ec:	7a22      	ldrb	r2, [r4, #8]
 80092ee:	4542      	cmp	r2, r8
 80092f0:	d113      	bne.n	800931a <sendBroadcast+0x46>
        {
          if (buffer->data[tpGuiOffset] == gui->id) ret = 0; //Do not duplicate message guiTp
 80092f2:	f899 2014 	ldrb.w	r2, [r9, #20]
 80092f6:	6863      	ldr	r3, [r4, #4]
          //Send broadcast
          bBuffer_t *new = bCopy(buffer);
 80092f8:	4638      	mov	r0, r7
  int noneFound = 1;
  while (gui)
    {
      if (gui->kond_pom == kondPom)
        {
          if (buffer->data[tpGuiOffset] == gui->id) ret = 0; //Do not duplicate message guiTp
 80092fa:	429a      	cmp	r2, r3
 80092fc:	bf08      	it	eq
 80092fe:	2600      	moveq	r6, #0
          //Send broadcast
          bBuffer_t *new = bCopy(buffer);
 8009300:	f00c f9e0 	bl	80156c4 <bCopy>
          new->data[tpGuiOffset] = gui->id;
 8009304:	1943      	adds	r3, r0, r5
 8009306:	6862      	ldr	r2, [r4, #4]
 8009308:	751a      	strb	r2, [r3, #20]
          messageTx(CEN_PORT, (void *)new->data, new->size, (uint32_t)new);
 800930a:	4601      	mov	r1, r0
 800930c:	4603      	mov	r3, r0
 800930e:	f831 2b14 	ldrh.w	r2, [r1], #20
 8009312:	2000      	movs	r0, #0
 8009314:	f002 fd74 	bl	800be00 <messageTx>
          noneFound = 0;
 8009318:	2300      	movs	r3, #0
        }
      gui = gui->next;
 800931a:	6824      	ldr	r4, [r4, #0]
 800931c:	e7e5      	b.n	80092ea <sendBroadcast+0x16>
    }
  if(noneFound)
 800931e:	b15b      	cbz	r3, 8009338 <sendBroadcast+0x64>
    {
      //Send broadcast with GUI = 0
      bBuffer_t *new = bCopy(buffer);
 8009320:	4638      	mov	r0, r7
 8009322:	f00c f9cf 	bl	80156c4 <bCopy>
      new->data[tpGuiOffset] = 0x00;
 8009326:	4405      	add	r5, r0
      messageTx(CEN_PORT, (void *)new->data, new->size, (uint32_t)new);
 8009328:	4601      	mov	r1, r0
    }
  if(noneFound)
    {
      //Send broadcast with GUI = 0
      bBuffer_t *new = bCopy(buffer);
      new->data[tpGuiOffset] = 0x00;
 800932a:	752c      	strb	r4, [r5, #20]
      messageTx(CEN_PORT, (void *)new->data, new->size, (uint32_t)new);
 800932c:	4603      	mov	r3, r0
 800932e:	f831 2b14 	ldrh.w	r2, [r1], #20
 8009332:	4620      	mov	r0, r4
 8009334:	f002 fd64 	bl	800be00 <messageTx>
      noneFound = 0;
    }
  return ret;
}
 8009338:	4630      	mov	r0, r6
 800933a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800933e:	bf00      	nop
 8009340:	10002b30 	.word	0x10002b30

08009344 <msgPWMInfo>:
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_60_t, guiTp));
}

static int msgPWMInfo(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009344:	4610      	mov	r0, r2
  bBuffer->size = sizeof(msg_70_t);
 8009346:	2307      	movs	r3, #7
 8009348:	8013      	strh	r3, [r2, #0]
  msg_70_t *data = (void *)bBuffer->data;
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_70_t, guiTp));
 800934a:	7d41      	ldrb	r1, [r0, #21]
 800934c:	2206      	movs	r2, #6
 800934e:	f7ff bfc1 	b.w	80092d4 <sendBroadcast>
	...

08009354 <msgSharcInfo>:
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_55_t, guiTp));
  return 0;
}

static int msgSharcInfo(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  bBuffer->size = sizeof(msg_60_t);
 8009358:	2307      	movs	r3, #7
 800935a:	8013      	strh	r3, [r2, #0]
  msg_60_t *data = (void *)bBuffer->data;

  int spkNum =  kondPom2SpkNum(data->kondPom);
 800935c:	7d50      	ldrb	r0, [r2, #21]
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_55_t, guiTp));
  return 0;
}

static int msgSharcInfo(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 800935e:	4614      	mov	r4, r2
  bBuffer->size = sizeof(msg_60_t);
  msg_60_t *data = (void *)bBuffer->data;

  int spkNum =  kondPom2SpkNum(data->kondPom);
 8009360:	f7ff feb4 	bl	80090cc <kondPom2SpkNum>
  if(spkNum >= 0)
 8009364:	2800      	cmp	r0, #0
 8009366:	db40      	blt.n	80093ea <msgSharcInfo+0x96>
    {
      switch(data->Sharc_msg2)
 8009368:	7de7      	ldrb	r7, [r4, #23]
 800936a:	2f58      	cmp	r7, #88	; 0x58
 800936c:	d018      	beq.n	80093a0 <msgSharcInfo+0x4c>
 800936e:	2f80      	cmp	r7, #128	; 0x80
 8009370:	d13b      	bne.n	80093ea <msgSharcInfo+0x96>
          sendSHARK(data->kondPom, data->Sharc_msg1);
        }
        break;
        case 0x80:
        {
          int thisSpk = data->urzadzenie-1;
 8009372:	7da2      	ldrb	r2, [r4, #22]
          int complementarySpk = 1 - thisSpk;
          int newThisVolume = data->Sharc_msg1;
          int newComplementaryVolume = (int)spkSet[spkNum].volume[complementarySpk] +  newThisVolume - (int)spkSet[spkNum].volume[thisSpk];
 8009374:	4b20      	ldr	r3, [pc, #128]	; (80093f8 <msgSharcInfo+0xa4>)
        break;
        case 0x80:
        {
          int thisSpk = data->urzadzenie-1;
          int complementarySpk = 1 - thisSpk;
          int newThisVolume = data->Sharc_msg1;
 8009376:	7e25      	ldrb	r5, [r4, #24]
          sendSHARK(data->kondPom, data->Sharc_msg1);
        }
        break;
        case 0x80:
        {
          int thisSpk = data->urzadzenie-1;
 8009378:	3a01      	subs	r2, #1
          int complementarySpk = 1 - thisSpk;
          int newThisVolume = data->Sharc_msg1;
          int newComplementaryVolume = (int)spkSet[spkNum].volume[complementarySpk] +  newThisVolume - (int)spkSet[spkNum].volume[thisSpk];
 800937a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800937e:	4418      	add	r0, r3
        }
        break;
        case 0x80:
        {
          int thisSpk = data->urzadzenie-1;
          int complementarySpk = 1 - thisSpk;
 8009380:	f1c2 0101 	rsb	r1, r2, #1
          int newThisVolume = data->Sharc_msg1;
          int newComplementaryVolume = (int)spkSet[spkNum].volume[complementarySpk] +  newThisVolume - (int)spkSet[spkNum].volume[thisSpk];
 8009384:	4401      	add	r1, r0
 8009386:	4410      	add	r0, r2
 8009388:	790b      	ldrb	r3, [r1, #4]
 800938a:	7902      	ldrb	r2, [r0, #4]
          if(newComplementaryVolume < 0) newComplementaryVolume = 0;
          spkSet[spkNum].volume[thisSpk] = newThisVolume;
 800938c:	7105      	strb	r5, [r0, #4]
        case 0x80:
        {
          int thisSpk = data->urzadzenie-1;
          int complementarySpk = 1 - thisSpk;
          int newThisVolume = data->Sharc_msg1;
          int newComplementaryVolume = (int)spkSet[spkNum].volume[complementarySpk] +  newThisVolume - (int)spkSet[spkNum].volume[thisSpk];
 800938e:	442b      	add	r3, r5
 8009390:	1a9b      	subs	r3, r3, r2
          if(newComplementaryVolume < 0) newComplementaryVolume = 0;
          spkSet[spkNum].volume[thisSpk] = newThisVolume;
          spkSet[spkNum].volume[complementarySpk] = newComplementaryVolume;
 8009392:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009396:	710b      	strb	r3, [r1, #4]
          //Send new volumes
          sendVolume(data->kondPom);
 8009398:	7d60      	ldrb	r0, [r4, #21]
 800939a:	f7ff fea3 	bl	80090e4 <sendVolume>
        }
        break;
 800939e:	e024      	b.n	80093ea <msgSharcInfo+0x96>
    {
      switch(data->Sharc_msg2)
        {
        case 0x58:
        {
          sendSHARK(data->kondPom, data->Sharc_msg1);
 80093a0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80093a4:	f894 9018 	ldrb.w	r9, [r4, #24]
  return 0;
}

static int sendSHARK(int kondPom, int msg60)
{
  int spkNum =  kondPom2SpkNum(kondPom);
 80093a8:	4640      	mov	r0, r8
 80093aa:	f7ff fe8f 	bl	80090cc <kondPom2SpkNum>
  if(spkNum < 0) return -1;
 80093ae:	1e06      	subs	r6, r0, #0
 80093b0:	db1b      	blt.n	80093ea <msgSharcInfo+0x96>
  bBuffer_t *msg = bAlloc(MSG_LEN);
 80093b2:	2020      	movs	r0, #32
 80093b4:	f00b fde2 	bl	8014f7c <bAlloc>
  msg->size = sizeof(msg_58_t);
 80093b8:	2306      	movs	r3, #6

static int sendSHARK(int kondPom, int msg60)
{
  int spkNum =  kondPom2SpkNum(kondPom);
  if(spkNum < 0) return -1;
  bBuffer_t *msg = bAlloc(MSG_LEN);
 80093ba:	4605      	mov	r5, r0
  msg->size = sizeof(msg_58_t);
  msg_58_t *data = (void *)msg->data;
  memset(data, 0, MSG_LEN);
 80093bc:	2220      	movs	r2, #32
static int sendSHARK(int kondPom, int msg60)
{
  int spkNum =  kondPom2SpkNum(kondPom);
  if(spkNum < 0) return -1;
  bBuffer_t *msg = bAlloc(MSG_LEN);
  msg->size = sizeof(msg_58_t);
 80093be:	f820 3b14 	strh.w	r3, [r0], #20
  msg_58_t *data = (void *)msg->data;
  memset(data, 0, MSG_LEN);
 80093c2:	2100      	movs	r1, #0
 80093c4:	f013 fed6 	bl	801d174 <memset>
  data->kod = 0x58;
  data->kondPom = kondPom;
  data->urzadzenie = 0;
  data->msg60 = msg60;
  data->Sharc_komenda = spkSet[spkNum].cSharc;
 80093c8:	4a0b      	ldr	r2, [pc, #44]	; (80093f8 <msgSharcInfo+0xa4>)
  if(spkNum < 0) return -1;
  bBuffer_t *msg = bAlloc(MSG_LEN);
  msg->size = sizeof(msg_58_t);
  msg_58_t *data = (void *)msg->data;
  memset(data, 0, MSG_LEN);
  data->kod = 0x58;
 80093ca:	752f      	strb	r7, [r5, #20]
  data->kondPom = kondPom;
  data->urzadzenie = 0;
  data->msg60 = msg60;
  data->Sharc_komenda = spkSet[spkNum].cSharc;
 80093cc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
  msg->size = sizeof(msg_58_t);
  msg_58_t *data = (void *)msg->data;
  memset(data, 0, MSG_LEN);
  data->kod = 0x58;
  data->kondPom = kondPom;
  data->urzadzenie = 0;
 80093d0:	2300      	movs	r3, #0
  data->msg60 = msg60;
  data->Sharc_komenda = spkSet[spkNum].cSharc;
 80093d2:	4416      	add	r6, r2
  bBuffer_t *msg = bAlloc(MSG_LEN);
  msg->size = sizeof(msg_58_t);
  msg_58_t *data = (void *)msg->data;
  memset(data, 0, MSG_LEN);
  data->kod = 0x58;
  data->kondPom = kondPom;
 80093d4:	f885 8015 	strb.w	r8, [r5, #21]
  data->urzadzenie = 0;
 80093d8:	762b      	strb	r3, [r5, #24]
  data->msg60 = msg60;
 80093da:	f885 9017 	strb.w	r9, [r5, #23]
  data->Sharc_komenda = spkSet[spkNum].cSharc;
 80093de:	79b2      	ldrb	r2, [r6, #6]
 80093e0:	75aa      	strb	r2, [r5, #22]
  data->guiTp = 0;
 80093e2:	766b      	strb	r3, [r5, #25]
  msgGenSend(msg);
 80093e4:	4628      	mov	r0, r5
 80093e6:	f7ff fdc9 	bl	8008f7c <msgGenSend>
        }
        break;
        }
    }
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_60_t, guiTp));
 80093ea:	7d61      	ldrb	r1, [r4, #21]
 80093ec:	4620      	mov	r0, r4
 80093ee:	2206      	movs	r2, #6
}
 80093f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        }
        break;
        }
    }
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_60_t, guiTp));
 80093f4:	f7ff bf6e 	b.w	80092d4 <sendBroadcast>
 80093f8:	10002b30 	.word	0x10002b30

080093fc <msgInputSet>:
      inputChange(INPUT_SPDIF2, source, spkSet, outputMode);
    }
}
static int testPtrn = 0;
static int msgInputSet(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 80093fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg_94_t *data = (void *)bBuffer->data;
  int pipeNum = getPipeNum(data->kondPom);
 80093fe:	7d50      	ldrb	r0, [r2, #21]
      inputChange(INPUT_SPDIF2, source, spkSet, outputMode);
    }
}
static int testPtrn = 0;
static int msgInputSet(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009400:	4615      	mov	r5, r2
  msg_94_t *data = (void *)bBuffer->data;
  int pipeNum = getPipeNum(data->kondPom);
 8009402:	f00c fcf5 	bl	8015df0 <getPipeNum>
  if(pipeNum < 0)
 8009406:	2800      	cmp	r0, #0
 8009408:	f2c0 80b1 	blt.w	800956e <msgInputSet+0x172>
    return 0;
  outputMode_e outputMode;
  switch (data->msg)
 800940c:	7deb      	ldrb	r3, [r5, #23]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d006      	beq.n	8009420 <msgInputSet+0x24>
 8009412:	2b02      	cmp	r3, #2
 8009414:	d109      	bne.n	800942a <msgInputSet+0x2e>
    {
    case 0x1:
      outputMode = (cfg.proto & 0x08)?OM_CABLE:OM_RADIO;
      break;
    case 0x2:
      outputMode = (cfg.proto & 0x08)?OM_RADIO:OM_CABLE;
 8009416:	4b57      	ldr	r3, [pc, #348]	; (8009574 <msgInputSet+0x178>)
 8009418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941a:	f083 0308 	eor.w	r3, r3, #8
 800941e:	e001      	b.n	8009424 <msgInputSet+0x28>
    return 0;
  outputMode_e outputMode;
  switch (data->msg)
    {
    case 0x1:
      outputMode = (cfg.proto & 0x08)?OM_CABLE:OM_RADIO;
 8009420:	4b54      	ldr	r3, [pc, #336]	; (8009574 <msgInputSet+0x178>)
 8009422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      break;
    case 0x2:
      outputMode = (cfg.proto & 0x08)?OM_RADIO:OM_CABLE;
 8009424:	f3c3 03c0 	ubfx	r3, r3, #3, #1
      break;
 8009428:	e000      	b.n	800942c <msgInputSet+0x30>
    default:
      outputMode = OM_NO_CHANGE;
 800942a:	2303      	movs	r3, #3
      break;
    }
  switch (data->konfigWejsc)
 800942c:	7dac      	ldrb	r4, [r5, #22]
 800942e:	2c34      	cmp	r4, #52	; 0x34
 8009430:	d809      	bhi.n	8009446 <msgInputSet+0x4a>
 8009432:	2c31      	cmp	r4, #49	; 0x31
 8009434:	d260      	bcs.n	80094f8 <msgInputSet+0xfc>
 8009436:	2c11      	cmp	r4, #17
 8009438:	f0c0 8094 	bcc.w	8009564 <msgInputSet+0x168>
 800943c:	2c12      	cmp	r4, #18
 800943e:	d90b      	bls.n	8009458 <msgInputSet+0x5c>
 8009440:	2c21      	cmp	r4, #33	; 0x21
 8009442:	d013      	beq.n	800946c <msgInputSet+0x70>
 8009444:	e08e      	b.n	8009564 <msgInputSet+0x168>
 8009446:	2c41      	cmp	r4, #65	; 0x41
 8009448:	d056      	beq.n	80094f8 <msgInputSet+0xfc>
 800944a:	f0c0 808b 	bcc.w	8009564 <msgInputSet+0x168>
 800944e:	f1a4 0199 	sub.w	r1, r4, #153	; 0x99
 8009452:	2917      	cmp	r1, #23
 8009454:	d97c      	bls.n	8009550 <msgInputSet+0x154>
 8009456:	e085      	b.n	8009564 <msgInputSet+0x168>
    {
    case 0x11:
    case 0x12:
      if(pipeNum == 1)
 8009458:	2801      	cmp	r0, #1
 800945a:	7d6a      	ldrb	r2, [r5, #21]
        {
          inputChange(INPUT_SPI2, 0, data->kondPom, outputMode);
 800945c:	f04f 0100 	mov.w	r1, #0
 8009460:	bf0c      	ite	eq
 8009462:	2004      	moveq	r0, #4
        }
      else
        {
          inputChange(INPUT_SPI1, 0, data->kondPom, outputMode);
 8009464:	2003      	movne	r0, #3
 8009466:	f00c fce1 	bl	8015e2c <inputChange>
 800946a:	e07b      	b.n	8009564 <msgInputSet+0x168>
        }
      break;
    case 0x21:
      if(cfg.proto & 0x20)
 800946c:	4e41      	ldr	r6, [pc, #260]	; (8009574 <msgInputSet+0x178>)
 800946e:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8009470:	f012 0f20 	tst.w	r2, #32
 8009474:	d026      	beq.n	80094c4 <msgInputSet+0xc8>
        {
          //Start stream capture
          taskENTER_CRITICAL();
 8009476:	f000 ff99 	bl	800a3ac <vPortEnterCritical>
          streamCaptureBuffer = bAlloc(STREAM_CAPTURE_BUFFER_SIZE);
 800947a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800947c:	0e1b      	lsrs	r3, r3, #24
 800947e:	bf1d      	ittte	ne
 8009480:	6b70      	ldrne	r0, [r6, #52]	; 0x34
 8009482:	1600      	asrne	r0, r0, #24
 8009484:	0280      	lslne	r0, r0, #10
 8009486:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800948a:	f00b fd77 	bl	8014f7c <bAlloc>
 800948e:	4b3a      	ldr	r3, [pc, #232]	; (8009578 <msgInputSet+0x17c>)
 8009490:	6018      	str	r0, [r3, #0]
 8009492:	461c      	mov	r4, r3
          if(streamCaptureBuffer)
 8009494:	b168      	cbz	r0, 80094b2 <msgInputSet+0xb6>
            {
              streamCaptureBuffer->offset = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	8083      	strh	r3, [r0, #4]
              streamCaptureBuffer->size = STREAM_CAPTURE_BUFFER_SIZE;
 800949a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800949c:	0e1b      	lsrs	r3, r3, #24
 800949e:	bf1f      	itttt	ne
 80094a0:	4b34      	ldrne	r3, [pc, #208]	; (8009574 <msgInputSet+0x178>)
 80094a2:	6b5b      	ldrne	r3, [r3, #52]	; 0x34
 80094a4:	0b9b      	lsrne	r3, r3, #14
 80094a6:	f403 437c 	andne.w	r3, r3, #64512	; 0xfc00
 80094aa:	bf08      	it	eq
 80094ac:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
 80094b0:	8003      	strh	r3, [r0, #0]
            }
          taskEXIT_CRITICAL();
 80094b2:	f000 ff8d 	bl	800a3d0 <vPortExitCritical>
          if(!streamCaptureBuffer)
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d153      	bne.n	8009564 <msgInputSet+0x168>
            {
              xprintf("capture buffer not allocated!!!!\n");
 80094bc:	482f      	ldr	r0, [pc, #188]	; (800957c <msgInputSet+0x180>)
 80094be:	f7ff fbb3 	bl	8008c28 <xprintf>
 80094c2:	e04f      	b.n	8009564 <msgInputSet+0x168>
            }
          break;
        }

      if(cfg.proto & 0x04)
 80094c4:	6b71      	ldr	r1, [r6, #52]	; 0x34
 80094c6:	7d6a      	ldrb	r2, [r5, #21]
 80094c8:	f011 0104 	ands.w	r1, r1, #4
 80094cc:	d00c      	beq.n	80094e8 <msgInputSet+0xec>
        {
          //Use USB input as test patterns
          inputChange(INPUT_TEST,testPtrn , data->kondPom, outputMode);
 80094ce:	4c2c      	ldr	r4, [pc, #176]	; (8009580 <msgInputSet+0x184>)
 80094d0:	2007      	movs	r0, #7
 80094d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80094d4:	f00c fcaa 	bl	8015e2c <inputChange>
          if (testInputPatternChange)
 80094d8:	4b2a      	ldr	r3, [pc, #168]	; (8009584 <msgInputSet+0x188>)
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d042      	beq.n	8009564 <msgInputSet+0x168>
            testPtrn = testInputPatternChange(testPtrn);
 80094de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80094e0:	f7ff f846 	bl	8008570 <testInputPatternChange>
 80094e4:	6260      	str	r0, [r4, #36]	; 0x24
 80094e6:	e03d      	b.n	8009564 <msgInputSet+0x168>
          break;
        }

      if(cfg.proto & 0x10)
 80094e8:	6b76      	ldr	r6, [r6, #52]	; 0x34
 80094ea:	06f6      	lsls	r6, r6, #27
 80094ec:	d504      	bpl.n	80094f8 <msgInputSet+0xfc>
        {
	  if(pipeNum == 1)
 80094ee:	2801      	cmp	r0, #1
	    inputChange(INPUT_USB2, 0, data->kondPom, outputMode);
 80094f0:	bf0c      	ite	eq
 80094f2:	2002      	moveq	r0, #2
	  else
	    inputChange(INPUT_USB1, 0, data->kondPom, outputMode);
 80094f4:	2001      	movne	r0, #1
 80094f6:	e7b6      	b.n	8009466 <msgInputSet+0x6a>
}

static void setSPDIF(int pipeNum, int konfigIn, uint8_t spkSet, outputMode_e outputMode)
{
  int source = 0;
  switch(konfigIn)
 80094f8:	2c33      	cmp	r4, #51	; 0x33
	    
          break;
        }
    case 0x31 ... 0x34:
    case 0x41:
      setSPDIF(pipeNum, data->konfigWejsc, data->kondPom, outputMode);
 80094fa:	7d6a      	ldrb	r2, [r5, #21]
}

static void setSPDIF(int pipeNum, int konfigIn, uint8_t spkSet, outputMode_e outputMode)
{
  int source = 0;
  switch(konfigIn)
 80094fc:	d012      	beq.n	8009524 <msgInputSet+0x128>
 80094fe:	d80b      	bhi.n	8009518 <msgInputSet+0x11c>
 8009500:	2c21      	cmp	r4, #33	; 0x21
 8009502:	d00d      	beq.n	8009520 <msgInputSet+0x124>
 8009504:	2c32      	cmp	r4, #50	; 0x32
 8009506:	d11d      	bne.n	8009544 <msgInputSet+0x148>
    {
    case 0x31:
      source = WM88XX_RECV_CHANNEL0;
      break;
    case 0x32:
      source = (cfg.proto & 0x04)?WM88XX_RECV_CHANNEL5:WM88XX_RECV_CHANNEL1;
 8009508:	491a      	ldr	r1, [pc, #104]	; (8009574 <msgInputSet+0x178>)
 800950a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800950c:	f011 0f04 	tst.w	r1, #4
 8009510:	bf14      	ite	ne
 8009512:	2105      	movne	r1, #5
 8009514:	2101      	moveq	r1, #1
 8009516:	e016      	b.n	8009546 <msgInputSet+0x14a>
}

static void setSPDIF(int pipeNum, int konfigIn, uint8_t spkSet, outputMode_e outputMode)
{
  int source = 0;
  switch(konfigIn)
 8009518:	2c34      	cmp	r4, #52	; 0x34
 800951a:	d00b      	beq.n	8009534 <msgInputSet+0x138>
 800951c:	2c41      	cmp	r4, #65	; 0x41
 800951e:	d111      	bne.n	8009544 <msgInputSet+0x148>
    case 0x34:
      source = (cfg.proto & 0x04)?WM88XX_RECV_CHANNEL7:WM88XX_RECV_CHANNEL3;
      break;
    case 0x41:
    case 0x21:
      source = WM88XX_RECV_CHANNEL4;
 8009520:	2104      	movs	r1, #4
 8009522:	e010      	b.n	8009546 <msgInputSet+0x14a>
      break;
    case 0x32:
      source = (cfg.proto & 0x04)?WM88XX_RECV_CHANNEL5:WM88XX_RECV_CHANNEL1;
      break;
    case 0x33:
      source = (cfg.proto & 0x04)?WM88XX_RECV_CHANNEL6:WM88XX_RECV_CHANNEL2;
 8009524:	4913      	ldr	r1, [pc, #76]	; (8009574 <msgInputSet+0x178>)
 8009526:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009528:	f011 0f04 	tst.w	r1, #4
 800952c:	bf14      	ite	ne
 800952e:	2106      	movne	r1, #6
 8009530:	2102      	moveq	r1, #2
 8009532:	e008      	b.n	8009546 <msgInputSet+0x14a>
      break;
    case 0x34:
      source = (cfg.proto & 0x04)?WM88XX_RECV_CHANNEL7:WM88XX_RECV_CHANNEL3;
 8009534:	490f      	ldr	r1, [pc, #60]	; (8009574 <msgInputSet+0x178>)
 8009536:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009538:	f011 0f04 	tst.w	r1, #4
 800953c:	bf14      	ite	ne
 800953e:	2107      	movne	r1, #7
 8009540:	2103      	moveq	r1, #3
 8009542:	e000      	b.n	8009546 <msgInputSet+0x14a>
  return 0;
}

static void setSPDIF(int pipeNum, int konfigIn, uint8_t spkSet, outputMode_e outputMode)
{
  int source = 0;
 8009544:	2100      	movs	r1, #0
    case 0x21:
      source = WM88XX_RECV_CHANNEL4;
      break;

    }
  if(pipeNum == 1)
 8009546:	2801      	cmp	r0, #1
    {
      inputChange(INPUT_SPDIF1, source, spkSet, outputMode);
 8009548:	bf0c      	ite	eq
 800954a:	2005      	moveq	r0, #5
    }
  else
    {
      inputChange(INPUT_SPDIF2, source, spkSet, outputMode);
 800954c:	2006      	movne	r0, #6
 800954e:	e78a      	b.n	8009466 <msgInputSet+0x6a>
    case 0x31 ... 0x34:
    case 0x41:
      setSPDIF(pipeNum, data->konfigWejsc, data->kondPom, outputMode);
      break;
    case 0x99 ... 0x99+TEST_PATTERNS_NUM-1:
      inputChange(INPUT_TEST, data->konfigWejsc - 0x99, data->kondPom, outputMode);
 8009550:	7d6a      	ldrb	r2, [r5, #21]
 8009552:	2007      	movs	r0, #7
 8009554:	f00c fc6a 	bl	8015e2c <inputChange>
      if (testInputPatternChange)
 8009558:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <msgInputSet+0x188>)
 800955a:	b11b      	cbz	r3, 8009564 <msgInputSet+0x168>
        testInputPatternChange(data->konfigWejsc - 0x99);
 800955c:	7da8      	ldrb	r0, [r5, #22]
 800955e:	3899      	subs	r0, #153	; 0x99
 8009560:	f7ff f806 	bl	8008570 <testInputPatternChange>
      break;
    }

  //Send ACK broadcast
  sendBroadcast(bBuffer, data->kondPom, offsetof(msg_94_t, guiTp));
 8009564:	2205      	movs	r2, #5
 8009566:	7d69      	ldrb	r1, [r5, #21]
 8009568:	4628      	mov	r0, r5
 800956a:	f7ff feb3 	bl	80092d4 <sendBroadcast>
  return 0;
}
 800956e:	2000      	movs	r0, #0
 8009570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009572:	bf00      	nop
 8009574:	10001000 	.word	0x10001000
 8009578:	10002e44 	.word	0x10002e44
 800957c:	0801d4e6 	.word	0x0801d4e6
 8009580:	10002b30 	.word	0x10002b30
 8009584:	08008571 	.word	0x08008571

08009588 <msgOn>:
}



static int msgOn(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800958c:	4680      	mov	r8, r0
  msg_50_t *data = (void *)bBuffer->data;
  int spkNum =  kondPom2SpkNum(data->kondPom);
 800958e:	7d50      	ldrb	r0, [r2, #21]
}



static int msgOn(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009590:	4615      	mov	r5, r2
 8009592:	461e      	mov	r6, r3
  msg_50_t *data = (void *)bBuffer->data;
  int spkNum =  kondPom2SpkNum(data->kondPom);
 8009594:	f7ff fd9a 	bl	80090cc <kondPom2SpkNum>
  if(spkNum < 0) return 0;
 8009598:	1e04      	subs	r4, r0, #0
 800959a:	da02      	bge.n	80095a2 <msgOn+0x1a>
 800959c:	2000      	movs	r0, #0
 800959e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int pipeNum = getPipeNum(data->kondPom);
 80095a2:	7d68      	ldrb	r0, [r5, #21]
 80095a4:	f00c fc24 	bl	8015df0 <getPipeNum>
  if(pipeNum < 0)
 80095a8:	2800      	cmp	r0, #0
 80095aa:	dbf7      	blt.n	800959c <msgOn+0x14>
    {
      return 0;
    }
  *forwardMask <<= spkNum*2;
 80095ac:	7833      	ldrb	r3, [r6, #0]
 80095ae:	4f1d      	ldr	r7, [pc, #116]	; (8009624 <msgOn+0x9c>)
 80095b0:	491d      	ldr	r1, [pc, #116]	; (8009628 <msgOn+0xa0>)
 80095b2:	0062      	lsls	r2, r4, #1
 80095b4:	4093      	lsls	r3, r2
 80095b6:	7033      	strb	r3, [r6, #0]
  if (DIRECTION(portNum))
 80095b8:	f1b8 0f00 	cmp.w	r8, #0
 80095bc:	d11a      	bne.n	80095f4 <msgOn+0x6c>
    {
      onOffPending = 1;
      spkSet[spkNum].reqOn = 1;
 80095be:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80095c2:	443c      	add	r4, r7
      return 0;
    }
  *forwardMask <<= spkNum*2;
  if (DIRECTION(portNum))
    {
      onOffPending = 1;
 80095c4:	2601      	movs	r6, #1
      spkSet[spkNum].reqOn = 1;
 80095c6:	7a22      	ldrb	r2, [r4, #8]
      return 0;
    }
  *forwardMask <<= spkNum*2;
  if (DIRECTION(portNum))
    {
      onOffPending = 1;
 80095c8:	603e      	str	r6, [r7, #0]
      spkSet[spkNum].reqOn = 1;
 80095ca:	4332      	orrs	r2, r6
 80095cc:	7222      	strb	r2, [r4, #8]
      spkSet[spkNum].cSharc = data->cSharc;
 80095ce:	7daa      	ldrb	r2, [r5, #22]
 80095d0:	71a2      	strb	r2, [r4, #6]
      spkSet[spkNum].cPWM = data->cPWM;
 80095d2:	7dea      	ldrb	r2, [r5, #23]
 80095d4:	71e2      	strb	r2, [r4, #7]

      //Przekaz komende dalej i czekaj na potwierdzenia
      if(cfg.ack50)
 80095d6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80095d8:	2a00      	cmp	r2, #0
 80095da:	d1df      	bne.n	800959c <msgOn+0x14>
        return 0;

      spkSet[spkNum].isOn = 1;
 80095dc:	7a22      	ldrb	r2, [r4, #8]
 80095de:	f042 0202 	orr.w	r2, r2, #2
 80095e2:	7222      	strb	r2, [r4, #8]
      sendStreamInfo(pipeNum);
 80095e4:	f00c fbb6 	bl	8015d54 <sendStreamInfo>
      sendVolume(data->kondPom);
 80095e8:	7d68      	ldrb	r0, [r5, #21]
 80095ea:	f7ff fd7b 	bl	80090e4 <sendVolume>

      return CB_RET_ACK;
 80095ee:	4630      	mov	r0, r6
 80095f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

  if(cfg.ack50)
 80095f4:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80095f6:	b15b      	cbz	r3, 8009610 <msgOn+0x88>
    {
      spkSet[spkNum].isOn = 1;
 80095f8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80095fc:	443b      	add	r3, r7
 80095fe:	7a1a      	ldrb	r2, [r3, #8]
 8009600:	f042 0202 	orr.w	r2, r2, #2
 8009604:	721a      	strb	r2, [r3, #8]
      sendStreamInfo(pipeNum);
 8009606:	f00c fba5 	bl	8015d54 <sendStreamInfo>
      sendVolume(data->kondPom);
 800960a:	7d68      	ldrb	r0, [r5, #21]
 800960c:	f7ff fd6a 	bl	80090e4 <sendVolume>
    }
  onOffPending = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	603b      	str	r3, [r7, #0]
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_50_t, guiTp));
 8009614:	7d69      	ldrb	r1, [r5, #21]
 8009616:	4628      	mov	r0, r5
 8009618:	2205      	movs	r2, #5
}
 800961a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sendStreamInfo(pipeNum);
      sendVolume(data->kondPom);
    }
  onOffPending = 0;
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_50_t, guiTp));
 800961e:	f7ff be59 	b.w	80092d4 <sendBroadcast>
 8009622:	bf00      	nop
 8009624:	10002b30 	.word	0x10002b30
 8009628:	10001000 	.word	0x10001000

0800962c <syncSMOKState.part.1>:
      spkSet[spkNum].reqOn = 0;
    }
  return CB_RET_nACK;
}

static void syncSMOKState(portNum_t portNum)
 800962c:	b570      	push	{r4, r5, r6, lr}
  if(!onOffPending)
    {
      int spkNum = (portNum - PER1_PORT)>>1;
      //Turn off both speakers if one is off

      if((cfg.smok_mask & (1<<(portData[portNum].urzadzenie-1))) && !spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].isOn && spkSet[spkNum].reqOn)
 800962e:	4b1d      	ldr	r3, [pc, #116]	; (80096a4 <syncSMOKState.part.1+0x78>)
 8009630:	689a      	ldr	r2, [r3, #8]
 8009632:	4b1d      	ldr	r3, [pc, #116]	; (80096a8 <syncSMOKState.part.1+0x7c>)
 8009634:	2450      	movs	r4, #80	; 0x50
 8009636:	fb04 3400 	mla	r4, r4, r0, r3
 800963a:	7ea3      	ldrb	r3, [r4, #26]
 800963c:	3b01      	subs	r3, #1
 800963e:	411a      	asrs	r2, r3
 8009640:	07d1      	lsls	r1, r2, #31
 8009642:	d52e      	bpl.n	80096a2 <syncSMOKState.part.1+0x76>

static void syncSMOKState(portNum_t portNum)
{
  if(!onOffPending)
    {
      int spkNum = (portNum - PER1_PORT)>>1;
 8009644:	3801      	subs	r0, #1
 8009646:	1040      	asrs	r0, r0, #1
      //Turn off both speakers if one is off

      if((cfg.smok_mask & (1<<(portData[portNum].urzadzenie-1))) && !spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].isOn && spkSet[spkNum].reqOn)
 8009648:	4e18      	ldr	r6, [pc, #96]	; (80096ac <syncSMOKState.part.1+0x80>)
 800964a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800964e:	220e      	movs	r2, #14
 8009650:	fb02 3300 	mla	r3, r2, r0, r3
 8009654:	4433      	add	r3, r6
 8009656:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
 800965a:	f3c5 0540 	ubfx	r5, r5, #1, #1
 800965e:	bb05      	cbnz	r5, 80096a2 <syncSMOKState.part.1+0x76>
 8009660:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009664:	4430      	add	r0, r6
 8009666:	3004      	adds	r0, #4
 8009668:	7903      	ldrb	r3, [r0, #4]
 800966a:	07da      	lsls	r2, r3, #31
 800966c:	d519      	bpl.n	80096a2 <syncSMOKState.part.1+0x76>
        {
          spkSet[spkNum].reqOn = 0;
 800966e:	f365 0300 	bfi	r3, r5, #0, #1
          spkSet[spkNum].isOn = 0;
 8009672:	f365 0341 	bfi	r3, r5, #1, #1
 8009676:	7103      	strb	r3, [r0, #4]
          //Send 52 to GUI
          bBuffer_t *msg = bAlloc(MSG_LEN);
 8009678:	2020      	movs	r0, #32
 800967a:	f00b fc7f 	bl	8014f7c <bAlloc>
          msg->size = sizeof(msg_52_t);
 800967e:	2306      	movs	r3, #6
      if((cfg.smok_mask & (1<<(portData[portNum].urzadzenie-1))) && !spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].isOn && spkSet[spkNum].reqOn)
        {
          spkSet[spkNum].reqOn = 0;
          spkSet[spkNum].isOn = 0;
          //Send 52 to GUI
          bBuffer_t *msg = bAlloc(MSG_LEN);
 8009680:	4606      	mov	r6, r0
          msg->size = sizeof(msg_52_t);
          msg_52_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
 8009682:	4629      	mov	r1, r5
        {
          spkSet[spkNum].reqOn = 0;
          spkSet[spkNum].isOn = 0;
          //Send 52 to GUI
          bBuffer_t *msg = bAlloc(MSG_LEN);
          msg->size = sizeof(msg_52_t);
 8009684:	f820 3b14 	strh.w	r3, [r0], #20
          msg_52_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
 8009688:	2220      	movs	r2, #32
 800968a:	f013 fd73 	bl	801d174 <memset>
          data->kod = 0x52;
 800968e:	2352      	movs	r3, #82	; 0x52
 8009690:	7533      	strb	r3, [r6, #20]
          data->kondPom = portData[portNum].kond_pom;
 8009692:	7e61      	ldrb	r1, [r4, #25]
 8009694:	7571      	strb	r1, [r6, #21]
          sendBroadcast(msg, data->kondPom, offsetof(msg_52_t, guiTp));
 8009696:	4630      	mov	r0, r6
 8009698:	2205      	movs	r2, #5
        }
    }
}
 800969a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          msg->size = sizeof(msg_52_t);
          msg_52_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
          data->kod = 0x52;
          data->kondPom = portData[portNum].kond_pom;
          sendBroadcast(msg, data->kondPom, offsetof(msg_52_t, guiTp));
 800969e:	f7ff be19 	b.w	80092d4 <sendBroadcast>
 80096a2:	bd70      	pop	{r4, r5, r6, pc}
 80096a4:	10001000 	.word	0x10001000
 80096a8:	10002038 	.word	0x10002038
 80096ac:	10002b30 	.word	0x10002b30

080096b0 <msgProgram>:
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_80_t, guiTp));
}

static int spk = -1;
static int msgProgram(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 80096b0:	b510      	push	{r4, lr}
  msg_9C_t *data = (void*)bBuffer->data;
  if(DIRECTION(portNum))
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d13c      	bne.n	8009730 <msgProgram+0x80>
    {
      if(data->flags&MSG9C_FLAGS_MASTER_MASK)
 80096b6:	7e51      	ldrb	r1, [r2, #25]
 80096b8:	4c24      	ldr	r4, [pc, #144]	; (800974c <msgProgram+0x9c>)
 80096ba:	f011 0f10 	tst.w	r1, #16
 80096be:	d010      	beq.n	80096e2 <msgProgram+0x32>
        {
          *forwardMask = 0;//Do not send to slaves
 80096c0:	7018      	strb	r0, [r3, #0]
          cfg.manId = (((uint32_t)data->man_id3) << 24) | (((uint32_t)data->man_id2) << 16) | (((uint32_t)data->man_id1) << 8);
 80096c2:	7dd3      	ldrb	r3, [r2, #23]
 80096c4:	7d91      	ldrb	r1, [r2, #22]
 80096c6:	041b      	lsls	r3, r3, #16
 80096c8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80096cc:	7e11      	ldrb	r1, [r2, #24]
 80096ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80096d2:	61e3      	str	r3, [r4, #28]
          cfg.kondPom = data->kondPom;
 80096d4:	7d53      	ldrb	r3, [r2, #21]
 80096d6:	6223      	str	r3, [r4, #32]
          //Program master
          cfgFlush();
 80096d8:	f7f6 fd92 	bl	8000200 <cfgFlush>
          watchdogReset();
 80096dc:	f004 fcc0 	bl	800e060 <watchdogReset>
 80096e0:	e032      	b.n	8009748 <msgProgram+0x98>
          return CB_RET_ACK;
        }
      spk = -1;
 80096e2:	4a1b      	ldr	r2, [pc, #108]	; (8009750 <msgProgram+0xa0>)
 80096e4:	f04f 31ff 	mov.w	r1, #4294967295
 80096e8:	6011      	str	r1, [r2, #0]
      //if(cable) spk = 3;
      if(spk == -1 && cfg.kondPomSPK[1] == 0) spk = 0;
 80096ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80096ec:	b901      	cbnz	r1, 80096f0 <msgProgram+0x40>
 80096ee:	6011      	str	r1, [r2, #0]
      if(spk == -1 && cfg.kondPomSPK[2] == 0) spk = 1;
 80096f0:	6811      	ldr	r1, [r2, #0]
 80096f2:	3101      	adds	r1, #1
 80096f4:	d104      	bne.n	8009700 <msgProgram+0x50>
 80096f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80096f8:	b911      	cbnz	r1, 8009700 <msgProgram+0x50>
 80096fa:	4915      	ldr	r1, [pc, #84]	; (8009750 <msgProgram+0xa0>)
 80096fc:	2001      	movs	r0, #1
 80096fe:	6008      	str	r0, [r1, #0]
      if(spk == -1 && cfg.kondPomSPK[3] == 0) spk = 3;
 8009700:	6811      	ldr	r1, [r2, #0]
 8009702:	3101      	adds	r1, #1
 8009704:	d104      	bne.n	8009710 <msgProgram+0x60>
 8009706:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009708:	b911      	cbnz	r1, 8009710 <msgProgram+0x60>
 800970a:	4911      	ldr	r1, [pc, #68]	; (8009750 <msgProgram+0xa0>)
 800970c:	2003      	movs	r0, #3
 800970e:	6008      	str	r0, [r1, #0]
      if(spk == -1 && cfg.kondPomSPK[0] == 0) spk = 2;
 8009710:	6811      	ldr	r1, [r2, #0]
 8009712:	3101      	adds	r1, #1
 8009714:	d104      	bne.n	8009720 <msgProgram+0x70>
 8009716:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009718:	b911      	cbnz	r1, 8009720 <msgProgram+0x70>
 800971a:	490d      	ldr	r1, [pc, #52]	; (8009750 <msgProgram+0xa0>)
 800971c:	2002      	movs	r0, #2
 800971e:	6008      	str	r0, [r1, #0]

      if(spk == -1)
 8009720:	6812      	ldr	r2, [r2, #0]
 8009722:	3201      	adds	r2, #1
 8009724:	f04f 0000 	mov.w	r0, #0
 8009728:	d10f      	bne.n	800974a <msgProgram+0x9a>
        {
          //No free slot for slave
          *forwardMask = 0;//Do not send to slaves
 800972a:	7018      	strb	r0, [r3, #0]
          return CB_RET_nACK;
 800972c:	2002      	movs	r0, #2
 800972e:	bd10      	pop	{r4, pc}
      //Program slave
      return 0;
    }

  //Slave programmed. Remember in own config
  if(spk >= 0 && spk <= 3)
 8009730:	4b07      	ldr	r3, [pc, #28]	; (8009750 <msgProgram+0xa0>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b03      	cmp	r3, #3
 8009736:	d807      	bhi.n	8009748 <msgProgram+0x98>
    {
      cfg.kondPomSPK[spk] = data->kondPom;
 8009738:	7d51      	ldrb	r1, [r2, #21]
 800973a:	4a04      	ldr	r2, [pc, #16]	; (800974c <msgProgram+0x9c>)
 800973c:	3308      	adds	r3, #8
 800973e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009742:	6059      	str	r1, [r3, #4]
      cfgFlush();
 8009744:	f7f6 fd5c 	bl	8000200 <cfgFlush>
    }
  return CB_RET_ACK;
 8009748:	2001      	movs	r0, #1
}
 800974a:	bd10      	pop	{r4, pc}
 800974c:	10001000 	.word	0x10001000
 8009750:	10001208 	.word	0x10001208

08009754 <msgConnect>:
  sendBroadcast(bBuffer, data->kondPom, offsetof(msg_94_t, guiTp));
  return 0;
}

static int msgConnect(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg_96_t *data     = (void *)bBuffer->data;

  int pipeNum = getPipeNum(data->kondPom);
 8009756:	7d50      	ldrb	r0, [r2, #21]
  sendBroadcast(bBuffer, data->kondPom, offsetof(msg_94_t, guiTp));
  return 0;
}

static int msgConnect(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009758:	4614      	mov	r4, r2
  msg_96_t *data     = (void *)bBuffer->data;

  int pipeNum = getPipeNum(data->kondPom);
 800975a:	f00c fb49 	bl	8015df0 <getPipeNum>
  if(pipeNum < 0)
 800975e:	2800      	cmp	r0, #0
 8009760:	da09      	bge.n	8009776 <msgConnect+0x22>
    {
      dprintf(LL_WARNING, "MSG96: pipe number for konPom %02x not found\n", data->kondPom);
 8009762:	4b26      	ldr	r3, [pc, #152]	; (80097fc <msgConnect+0xa8>)
 8009764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009766:	2b00      	cmp	r3, #0
 8009768:	dd03      	ble.n	8009772 <msgConnect+0x1e>
 800976a:	7d61      	ldrb	r1, [r4, #21]
 800976c:	4824      	ldr	r0, [pc, #144]	; (8009800 <msgConnect+0xac>)
 800976e:	f7ff fa5b 	bl	8008c28 <xprintf>
      return 0;
 8009772:	2000      	movs	r0, #0
 8009774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  int spkNum =  kondPom2SpkNum(data->kondPom);
 8009776:	7d60      	ldrb	r0, [r4, #21]
 8009778:	f7ff fca8 	bl	80090cc <kondPom2SpkNum>
  if(spkNum < 0) return 0;
 800977c:	1e06      	subs	r6, r0, #0
 800977e:	dbf8      	blt.n	8009772 <msgConnect+0x1e>

  //  msg_96r_t *dataRet = (void*)bBuffer->data;
  int tpGui = data->guiTp;

  //Check if already registered
  tpGui_t *gui = tp_gui;
 8009780:	4d20      	ldr	r5, [pc, #128]	; (8009804 <msgConnect+0xb0>)
    }
  int spkNum =  kondPom2SpkNum(data->kondPom);
  if(spkNum < 0) return 0;

  //  msg_96r_t *dataRet = (void*)bBuffer->data;
  int tpGui = data->guiTp;
 8009782:	7f67      	ldrb	r7, [r4, #29]

  //Check if already registered
  tpGui_t *gui = tp_gui;
 8009784:	6a2b      	ldr	r3, [r5, #32]
  while (gui)
 8009786:	b30b      	cbz	r3, 80097cc <msgConnect+0x78>
    {
      if (gui->id == tpGui && gui->kond_pom == data->kondPom)
 8009788:	685a      	ldr	r2, [r3, #4]
 800978a:	4297      	cmp	r7, r2
 800978c:	d103      	bne.n	8009796 <msgConnect+0x42>
 800978e:	7a19      	ldrb	r1, [r3, #8]
 8009790:	7d62      	ldrb	r2, [r4, #21]
 8009792:	4291      	cmp	r1, r2
 8009794:	d001      	beq.n	800979a <msgConnect+0x46>
        break;
      gui = gui->next;
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	e7f5      	b.n	8009786 <msgConnect+0x32>
      gui->kond_pom = data->kondPom;
      gui->id = tpGui;
    }
  else
    {
      dprintf(LL_WARNING, "Already registered GUI/TP %d\n", tpGui);
 800979a:	4b18      	ldr	r3, [pc, #96]	; (80097fc <msgConnect+0xa8>)
 800979c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979e:	2b00      	cmp	r3, #0
 80097a0:	dd03      	ble.n	80097aa <msgConnect+0x56>
 80097a2:	4639      	mov	r1, r7
 80097a4:	4818      	ldr	r0, [pc, #96]	; (8009808 <msgConnect+0xb4>)
 80097a6:	f7ff fa3f 	bl	8008c28 <xprintf>
    }

  //Fill status
  data->gStatus = spkSet[spkNum].isOn;
 80097aa:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80097ae:	4435      	add	r5, r6
  data->cSharc = spkSet[spkNum].cSharc;
  data->cPWM = spkSet[spkNum].cPWM;
  data->VolumeL = spkSet[spkNum].volume[0];
  data->VolumeR = spkSet[spkNum].volume[1];
  return CB_RET_ACK;
 80097b0:	2001      	movs	r0, #1
    {
      dprintf(LL_WARNING, "Already registered GUI/TP %d\n", tpGui);
    }

  //Fill status
  data->gStatus = spkSet[spkNum].isOn;
 80097b2:	7a2b      	ldrb	r3, [r5, #8]
 80097b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80097b8:	7623      	strb	r3, [r4, #24]
  data->cSharc = spkSet[spkNum].cSharc;
 80097ba:	79ab      	ldrb	r3, [r5, #6]
 80097bc:	75a3      	strb	r3, [r4, #22]
  data->cPWM = spkSet[spkNum].cPWM;
 80097be:	79eb      	ldrb	r3, [r5, #7]
 80097c0:	75e3      	strb	r3, [r4, #23]
  data->VolumeL = spkSet[spkNum].volume[0];
 80097c2:	792b      	ldrb	r3, [r5, #4]
 80097c4:	7663      	strb	r3, [r4, #25]
  data->VolumeR = spkSet[spkNum].volume[1];
 80097c6:	796b      	ldrb	r3, [r5, #5]
 80097c8:	76a3      	strb	r3, [r4, #26]
 80097ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        break;
      gui = gui->next;
    }
  if (gui == NULL)
    {
      dprintf(LL_INFO, "Registered GUI/TP %d\n", tpGui);
 80097cc:	4b0b      	ldr	r3, [pc, #44]	; (80097fc <msgConnect+0xa8>)
 80097ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	dd03      	ble.n	80097dc <msgConnect+0x88>
 80097d4:	4639      	mov	r1, r7
 80097d6:	480d      	ldr	r0, [pc, #52]	; (800980c <msgConnect+0xb8>)
 80097d8:	f7ff fa26 	bl	8008c28 <xprintf>
      tpGui_t *gui = dAlloc(sizeof(tpGui_t));
 80097dc:	2009      	movs	r0, #9
 80097de:	f00b fbcd 	bl	8014f7c <bAlloc>
 80097e2:	b140      	cbz	r0, 80097f6 <msgConnect+0xa2>
      gui->next = tp_gui;
 80097e4:	4603      	mov	r3, r0
 80097e6:	6a2a      	ldr	r2, [r5, #32]
 80097e8:	f843 2f14 	str.w	r2, [r3, #20]!
      tp_gui = gui;
 80097ec:	622b      	str	r3, [r5, #32]
      gui->kond_pom = data->kondPom;
 80097ee:	7d63      	ldrb	r3, [r4, #21]
 80097f0:	7703      	strb	r3, [r0, #28]
      gui->id = tpGui;
 80097f2:	6187      	str	r7, [r0, #24]
 80097f4:	e7d9      	b.n	80097aa <msgConnect+0x56>
    }
  if (gui == NULL)
    {
      dprintf(LL_INFO, "Registered GUI/TP %d\n", tpGui);
      tpGui_t *gui = dAlloc(sizeof(tpGui_t));
      gui->next = tp_gui;
 80097f6:	6a2b      	ldr	r3, [r5, #32]
 80097f8:	6003      	str	r3, [r0, #0]
 80097fa:	deff      	udf	#255	; 0xff
 80097fc:	10001000 	.word	0x10001000
 8009800:	0801d508 	.word	0x0801d508
 8009804:	10002b30 	.word	0x10002b30
 8009808:	0801d54c 	.word	0x0801d54c
 800980c:	0801d536 	.word	0x0801d536

08009810 <msgVolume>:
  data->guiTp = 0;
  msgGenSend(msg);
  return 0;
}
static int msgVolume(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	4606      	mov	r6, r0
  msg_80_t *data = (void *)bBuffer->data;
  int pipeNum = getPipeNum(data->kondPom);
 8009814:	7d50      	ldrb	r0, [r2, #21]
  data->guiTp = 0;
  msgGenSend(msg);
  return 0;
}
static int msgVolume(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009816:	4614      	mov	r4, r2
 8009818:	461d      	mov	r5, r3
  msg_80_t *data = (void *)bBuffer->data;
  int pipeNum = getPipeNum(data->kondPom);
 800981a:	f00c fae9 	bl	8015df0 <getPipeNum>
  if(pipeNum < 0)
 800981e:	2800      	cmp	r0, #0
 8009820:	db33      	blt.n	800988a <msgVolume+0x7a>
    {
      return 0;
    }
  int spkNum =  kondPom2SpkNum(data->kondPom);
 8009822:	7d60      	ldrb	r0, [r4, #21]
 8009824:	f7ff fc52 	bl	80090cc <kondPom2SpkNum>
  if(spkNum < 0) return 0;
 8009828:	2800      	cmp	r0, #0
 800982a:	db2e      	blt.n	800988a <msgVolume+0x7a>
 800982c:	7da2      	ldrb	r2, [r4, #22]
  if (DIRECTION(portNum))
 800982e:	b956      	cbnz	r6, 8009846 <msgVolume+0x36>
    {
      switch(data->urzadzenie)
 8009830:	2a01      	cmp	r2, #1
 8009832:	d001      	beq.n	8009838 <msgVolume+0x28>
 8009834:	2a02      	cmp	r2, #2
 8009836:	d100      	bne.n	800983a <msgVolume+0x2a>
          break;
        case 1:
          *forwardMask = 0x01;
          break;
        case 2:
          *forwardMask = 0x02;
 8009838:	702a      	strb	r2, [r5, #0]
          break;
        }
      *forwardMask <<= 2*spkNum;
 800983a:	782b      	ldrb	r3, [r5, #0]
 800983c:	0040      	lsls	r0, r0, #1
 800983e:	fa03 f000 	lsl.w	r0, r3, r0
 8009842:	7028      	strb	r0, [r5, #0]
 8009844:	e021      	b.n	800988a <msgVolume+0x7a>
      return 0;
    }
  switch(data->urzadzenie)
 8009846:	2a01      	cmp	r2, #1
 8009848:	d010      	beq.n	800986c <msgVolume+0x5c>
 800984a:	d307      	bcc.n	800985c <msgVolume+0x4c>
 800984c:	2a02      	cmp	r2, #2
 800984e:	d115      	bne.n	800987c <msgVolume+0x6c>
      break;
    case 1:
      spkSet[spkNum].volume[0] = data->volume;
      break;
    case 2:
      spkSet[spkNum].volume[1] = data->volume;
 8009850:	4a0f      	ldr	r2, [pc, #60]	; (8009890 <msgVolume+0x80>)
 8009852:	7de3      	ldrb	r3, [r4, #23]
 8009854:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009858:	4410      	add	r0, r2
 800985a:	e00e      	b.n	800987a <msgVolume+0x6a>
      return 0;
    }
  switch(data->urzadzenie)
    {
    case 0:
      spkSet[spkNum].volume[0] = data->volume;
 800985c:	4a0c      	ldr	r2, [pc, #48]	; (8009890 <msgVolume+0x80>)
 800985e:	7de3      	ldrb	r3, [r4, #23]
 8009860:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009864:	4410      	add	r0, r2
 8009866:	7103      	strb	r3, [r0, #4]
      spkSet[spkNum].volume[1] = data->volume;
 8009868:	7de3      	ldrb	r3, [r4, #23]
 800986a:	e006      	b.n	800987a <msgVolume+0x6a>
      break;
    case 1:
      spkSet[spkNum].volume[0] = data->volume;
 800986c:	4a08      	ldr	r2, [pc, #32]	; (8009890 <msgVolume+0x80>)
 800986e:	7de3      	ldrb	r3, [r4, #23]
 8009870:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009874:	4410      	add	r0, r2
 8009876:	7103      	strb	r3, [r0, #4]
 8009878:	e000      	b.n	800987c <msgVolume+0x6c>
      break;
    case 2:
      spkSet[spkNum].volume[1] = data->volume;
 800987a:	7143      	strb	r3, [r0, #5]
      break;
    }

  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_80_t, guiTp));
 800987c:	7d61      	ldrb	r1, [r4, #21]
 800987e:	4620      	mov	r0, r4
 8009880:	2205      	movs	r2, #5
}
 8009882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    case 2:
      spkSet[spkNum].volume[1] = data->volume;
      break;
    }

  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_80_t, guiTp));
 8009886:	f7ff bd25 	b.w	80092d4 <sendBroadcast>
}
 800988a:	2000      	movs	r0, #0
 800988c:	bd70      	pop	{r4, r5, r6, pc}
 800988e:	bf00      	nop
 8009890:	10002b30 	.word	0x10002b30

08009894 <msgPWMCmd>:
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_58_t, guiTp));
}

static int msgPWMCmd(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	461d      	mov	r5, r3
  bBuffer->size = sizeof(msg_5A_t);
 8009898:	2306      	movs	r3, #6
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_58_t, guiTp));
}

static int msgPWMCmd(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 800989a:	4606      	mov	r6, r0
  bBuffer->size = sizeof(msg_5A_t);
 800989c:	8013      	strh	r3, [r2, #0]
  msg_5A_t *data = (void *)bBuffer->data;
  int pipeNum = getPipeNum(data->kondPom);
 800989e:	7d50      	ldrb	r0, [r2, #21]
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_58_t, guiTp));
}

static int msgPWMCmd(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 80098a0:	4614      	mov	r4, r2
  bBuffer->size = sizeof(msg_5A_t);
  msg_5A_t *data = (void *)bBuffer->data;
  int pipeNum = getPipeNum(data->kondPom);
 80098a2:	f00c faa5 	bl	8015df0 <getPipeNum>
  if(pipeNum < 0)
 80098a6:	2800      	cmp	r0, #0
 80098a8:	db18      	blt.n	80098dc <msgPWMCmd+0x48>
    {
      return 0;
    }

  int spkNum =  kondPom2SpkNum(data->kondPom);
 80098aa:	7d60      	ldrb	r0, [r4, #21]
 80098ac:	f7ff fc0e 	bl	80090cc <kondPom2SpkNum>
  if(spkNum < 0) return 0;
 80098b0:	2800      	cmp	r0, #0
 80098b2:	db13      	blt.n	80098dc <msgPWMCmd+0x48>
  if (DIRECTION(portNum))
 80098b4:	b92e      	cbnz	r6, 80098c2 <msgPWMCmd+0x2e>
    {
      *forwardMask <<= spkNum*2;
 80098b6:	782b      	ldrb	r3, [r5, #0]
 80098b8:	0040      	lsls	r0, r0, #1
 80098ba:	fa03 f000 	lsl.w	r0, r3, r0
 80098be:	7028      	strb	r0, [r5, #0]
 80098c0:	e00c      	b.n	80098dc <msgPWMCmd+0x48>
      return 0;
    }
  spkSet[spkNum].cPWM = data->PWM_komenda;
 80098c2:	4a07      	ldr	r2, [pc, #28]	; (80098e0 <msgPWMCmd+0x4c>)
 80098c4:	7de3      	ldrb	r3, [r4, #23]
 80098c6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80098ca:	4410      	add	r0, r2

  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_5A_t, guiTp));
 80098cc:	2205      	movs	r2, #5
  if (DIRECTION(portNum))
    {
      *forwardMask <<= spkNum*2;
      return 0;
    }
  spkSet[spkNum].cPWM = data->PWM_komenda;
 80098ce:	71c3      	strb	r3, [r0, #7]

  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_5A_t, guiTp));
 80098d0:	7d61      	ldrb	r1, [r4, #21]
 80098d2:	4620      	mov	r0, r4
}
 80098d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return 0;
    }
  spkSet[spkNum].cPWM = data->PWM_komenda;

  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_5A_t, guiTp));
 80098d8:	f7ff bcfc 	b.w	80092d4 <sendBroadcast>
}
 80098dc:	2000      	movs	r0, #0
 80098de:	bd70      	pop	{r4, r5, r6, pc}
 80098e0:	10002b30 	.word	0x10002b30

080098e4 <msgSharcCmd>:
    }
  return ret;
}

static int msgSharcCmd(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	461d      	mov	r5, r3
  bBuffer->size = sizeof(msg_58_t);
 80098e8:	2306      	movs	r3, #6
    }
  return ret;
}

static int msgSharcCmd(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 80098ea:	4606      	mov	r6, r0
  bBuffer->size = sizeof(msg_58_t);
 80098ec:	8013      	strh	r3, [r2, #0]
  msg_58_t *data = (void *)bBuffer->data;
  int pipeNum = getPipeNum(data->kondPom);
 80098ee:	7d50      	ldrb	r0, [r2, #21]
    }
  return ret;
}

static int msgSharcCmd(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 80098f0:	4614      	mov	r4, r2
  bBuffer->size = sizeof(msg_58_t);
  msg_58_t *data = (void *)bBuffer->data;
  int pipeNum = getPipeNum(data->kondPom);
 80098f2:	f00c fa7d 	bl	8015df0 <getPipeNum>
  if(pipeNum < 0)
 80098f6:	2800      	cmp	r0, #0
 80098f8:	db18      	blt.n	800992c <msgSharcCmd+0x48>
    {
      return 0;
    }

  int spkNum =  kondPom2SpkNum(data->kondPom);
 80098fa:	7d60      	ldrb	r0, [r4, #21]
 80098fc:	f7ff fbe6 	bl	80090cc <kondPom2SpkNum>
  if(spkNum < 0) return 0;
 8009900:	2800      	cmp	r0, #0
 8009902:	db13      	blt.n	800992c <msgSharcCmd+0x48>
  if (DIRECTION(portNum))
 8009904:	b92e      	cbnz	r6, 8009912 <msgSharcCmd+0x2e>
    {
      *forwardMask <<= spkNum*2;
 8009906:	782b      	ldrb	r3, [r5, #0]
 8009908:	0040      	lsls	r0, r0, #1
 800990a:	fa03 f000 	lsl.w	r0, r3, r0
 800990e:	7028      	strb	r0, [r5, #0]
 8009910:	e00c      	b.n	800992c <msgSharcCmd+0x48>
      return 0;
    }
  spkSet[spkNum].cSharc = data->Sharc_komenda;
 8009912:	4a07      	ldr	r2, [pc, #28]	; (8009930 <msgSharcCmd+0x4c>)
 8009914:	7da3      	ldrb	r3, [r4, #22]
 8009916:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800991a:	4410      	add	r0, r2
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_58_t, guiTp));
 800991c:	2205      	movs	r2, #5
  if (DIRECTION(portNum))
    {
      *forwardMask <<= spkNum*2;
      return 0;
    }
  spkSet[spkNum].cSharc = data->Sharc_komenda;
 800991e:	7183      	strb	r3, [r0, #6]
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_58_t, guiTp));
 8009920:	7d61      	ldrb	r1, [r4, #21]
 8009922:	4620      	mov	r0, r4
}
 8009924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      *forwardMask <<= spkNum*2;
      return 0;
    }
  spkSet[spkNum].cSharc = data->Sharc_komenda;
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_58_t, guiTp));
 8009928:	f7ff bcd4 	b.w	80092d4 <sendBroadcast>
}
 800992c:	2000      	movs	r0, #0
 800992e:	bd70      	pop	{r4, r5, r6, pc}
 8009930:	10002b30 	.word	0x10002b30

08009934 <msgChangeFreq>:
  fillMsgActiveTransmiters(data);
  return CB_RET_ACK;
}

static int msgChangeFreq(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	4607      	mov	r7, r0
  msg_92_t *data = (void *)bBuffer->data;

  int pipeNum = getPipeNum(data->kondPom);
 8009938:	7d50      	ldrb	r0, [r2, #21]
  fillMsgActiveTransmiters(data);
  return CB_RET_ACK;
}

static int msgChangeFreq(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 800993a:	4614      	mov	r4, r2
 800993c:	461e      	mov	r6, r3
  msg_92_t *data = (void *)bBuffer->data;

  int pipeNum = getPipeNum(data->kondPom);
 800993e:	f00c fa57 	bl	8015df0 <getPipeNum>
 8009942:	4605      	mov	r5, r0
  if (DIRECTION(portNum))
 8009944:	b967      	cbnz	r7, 8009960 <msgChangeFreq+0x2c>
    {
      //Forward
      if(pipeNum < 0)
 8009946:	2800      	cmp	r0, #0
 8009948:	db1c      	blt.n	8009984 <msgChangeFreq+0x50>
        {
          return 0;
        }
      int spkNum =  kondPom2SpkNum(data->kondPom);
 800994a:	7d60      	ldrb	r0, [r4, #21]
 800994c:	f7ff fbbe 	bl	80090cc <kondPom2SpkNum>
      if(spkNum < 0) return 0;
 8009950:	2800      	cmp	r0, #0
 8009952:	db17      	blt.n	8009984 <msgChangeFreq+0x50>
      *forwardMask <<= spkNum*2;
 8009954:	7833      	ldrb	r3, [r6, #0]
 8009956:	0040      	lsls	r0, r0, #1
 8009958:	fa03 f000 	lsl.w	r0, r3, r0
 800995c:	7030      	strb	r0, [r6, #0]
 800995e:	e011      	b.n	8009984 <msgChangeFreq+0x50>
      return 0;
    }

  if(pipeNum >= 0)
 8009960:	2800      	cmp	r0, #0
 8009962:	db0a      	blt.n	800997a <msgChangeFreq+0x46>
    {
      if(radioReinitOnACK92)
 8009964:	4a08      	ldr	r2, [pc, #32]	; (8009988 <msgChangeFreq+0x54>)
 8009966:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8009968:	b123      	cbz	r3, 8009974 <msgChangeFreq+0x40>
        {
          if((--radioReinitOnACK92) == 0)
 800996a:	3b01      	subs	r3, #1
 800996c:	6613      	str	r3, [r2, #96]	; 0x60
 800996e:	b90b      	cbnz	r3, 8009974 <msgChangeFreq+0x40>
            radioReinit();
 8009970:	f002 fbfe 	bl	800c170 <radioReinit>
        }
      unMute(pipeNum);
 8009974:	4628      	mov	r0, r5
 8009976:	f00c fb2b 	bl	8015fd0 <unMute>
    }

  // send ACK broadcast
  sendBroadcast(bBuffer, data->kondPom, offsetof(msg_70_t, guiTp));
 800997a:	2206      	movs	r2, #6
 800997c:	7d61      	ldrb	r1, [r4, #21]
 800997e:	4620      	mov	r0, r4
 8009980:	f7ff fca8 	bl	80092d4 <sendBroadcast>
  return 0;
}
 8009984:	2000      	movs	r0, #0
 8009986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009988:	10002b30 	.word	0x10002b30

0800998c <msgKeepAlive>:
        }
    }
}

static int msgKeepAlive(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 800998c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  msg_55_t *data = (void *)bBuffer->data;
  int pipeNum = getPipeNum(portData[portNum].kond_pom);
 8009990:	4e36      	ldr	r6, [pc, #216]	; (8009a6c <msgKeepAlive+0xe0>)
 8009992:	f04f 0950 	mov.w	r9, #80	; 0x50
 8009996:	fb09 6900 	mla	r9, r9, r0, r6
        }
    }
}

static int msgKeepAlive(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 800999a:	4607      	mov	r7, r0
  msg_55_t *data = (void *)bBuffer->data;
  int pipeNum = getPipeNum(portData[portNum].kond_pom);
 800999c:	f899 0019 	ldrb.w	r0, [r9, #25]
        }
    }
}

static int msgKeepAlive(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 80099a0:	4614      	mov	r4, r2
  msg_55_t *data = (void *)bBuffer->data;
  int pipeNum = getPipeNum(portData[portNum].kond_pom);
 80099a2:	f00c fa25 	bl	8015df0 <getPipeNum>
  if(pipeNum < 0)
 80099a6:	2800      	cmp	r0, #0
 80099a8:	46b0      	mov	r8, r6
 80099aa:	f107 35ff 	add.w	r5, r7, #4294967295
 80099ae:	da07      	bge.n	80099c0 <msgKeepAlive+0x34>
    {
      //Registerinto default pipe
      pipeNum = (data->flags55&FLAGS55_DEFAULT_PIPE)?1:0;
      pipeSetSpkSet(pipeNum, portData[portNum].kond_pom, (portNum-PER1_PORT)>>1);
 80099b0:	7de0      	ldrb	r0, [r4, #23]
 80099b2:	f899 1019 	ldrb.w	r1, [r9, #25]
 80099b6:	106a      	asrs	r2, r5, #1
 80099b8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80099bc:	f00c f9f2 	bl	8015da4 <pipeSetSpkSet>
    }

  portData[portNum].tsLastSeen = xTaskGetTickCount();
 80099c0:	f000 ffac 	bl	800a91c <xTaskGetTickCount>
 80099c4:	2650      	movs	r6, #80	; 0x50
 80099c6:	fb06 8907 	mla	r9, r6, r7, r8
  upTime8[1] = data->uptime1;
  upTime8[0] = data->uptime0;
  portData[portNum].uptime = upTime;

  //Get actual SMOK state
  int spkNum = (portNum - PER1_PORT)>>1;
 80099ca:	106d      	asrs	r5, r5, #1
      //Registerinto default pipe
      pipeNum = (data->flags55&FLAGS55_DEFAULT_PIPE)?1:0;
      pipeSetSpkSet(pipeNum, portData[portNum].kond_pom, (portNum-PER1_PORT)>>1);
    }

  portData[portNum].tsLastSeen = xTaskGetTickCount();
 80099cc:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
  portData[portNum].keepAlive = xTaskGetTickCount();
 80099d0:	f000 ffa4 	bl	800a91c <xTaskGetTickCount>
 80099d4:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24

  //Get peer uptime
  uint32_t upTime;
  uint8_t *upTime8 = (uint8_t*) &upTime;
  upTime8[3] = data->uptime3;
 80099d8:	7e23      	ldrb	r3, [r4, #24]
 80099da:	f88d 3007 	strb.w	r3, [sp, #7]
  upTime8[2] = data->uptime2;
 80099de:	7e63      	ldrb	r3, [r4, #25]
 80099e0:	f88d 3006 	strb.w	r3, [sp, #6]
  upTime8[1] = data->uptime1;
 80099e4:	7ea3      	ldrb	r3, [r4, #26]
 80099e6:	f88d 3005 	strb.w	r3, [sp, #5]
  upTime8[0] = data->uptime0;
 80099ea:	7ee3      	ldrb	r3, [r4, #27]
 80099ec:	f88d 3004 	strb.w	r3, [sp, #4]
  portData[portNum].uptime = upTime;
 80099f0:	9b01      	ldr	r3, [sp, #4]
 80099f2:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34

  //Get actual SMOK state
  int spkNum = (portNum - PER1_PORT)>>1;
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].cSharc     = data->cSharc;
 80099f6:	f899 301a 	ldrb.w	r3, [r9, #26]
 80099fa:	4a1d      	ldr	r2, [pc, #116]	; (8009a70 <msgKeepAlive+0xe4>)
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].cPWM       = data->cPWM;
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].signalType = data->signalType;
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].outputType = data->outputType;
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].volume[0]  = data->volume;
 80099fc:	f894 0020 	ldrb.w	r0, [r4, #32]
  upTime8[0] = data->uptime0;
  portData[portNum].uptime = upTime;

  //Get actual SMOK state
  int spkNum = (portNum - PER1_PORT)>>1;
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].cSharc     = data->cSharc;
 8009a00:	3b01      	subs	r3, #1
 8009a02:	210e      	movs	r1, #14
 8009a04:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009a08:	fb01 3305 	mla	r3, r1, r5, r3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	7f21      	ldrb	r1, [r4, #28]
 8009a10:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].cPWM       = data->cPWM;
 8009a14:	7f61      	ldrb	r1, [r4, #29]
 8009a16:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].signalType = data->signalType;
 8009a1a:	7fa1      	ldrb	r1, [r4, #30]
 8009a1c:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].outputType = data->outputType;
 8009a20:	7fe1      	ldrb	r1, [r4, #31]
 8009a22:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].volume[0]  = data->volume;
 8009a26:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009a2a:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].isOn       = ((data->flags55&FLAGS55_SMOK_ON)!=0);
 8009a2e:	7de3      	ldrb	r3, [r4, #23]
 8009a30:	7908      	ldrb	r0, [r1, #4]
 8009a32:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009a36:	f363 0041 	bfi	r0, r3, #1, #1
  return CB_RET_nACK;
}

static void syncSMOKState(portNum_t portNum)
{
  if(!onOffPending)
 8009a3a:	6813      	ldr	r3, [r2, #0]
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].cSharc     = data->cSharc;
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].cPWM       = data->cPWM;
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].signalType = data->signalType;
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].outputType = data->outputType;
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].volume[0]  = data->volume;
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].isOn       = ((data->flags55&FLAGS55_SMOK_ON)!=0);
 8009a3c:	7108      	strb	r0, [r1, #4]
  return CB_RET_nACK;
}

static void syncSMOKState(portNum_t portNum)
{
  if(!onOffPending)
 8009a3e:	b913      	cbnz	r3, 8009a46 <msgKeepAlive+0xba>
 8009a40:	4638      	mov	r0, r7
 8009a42:	f7ff fdf3 	bl	800962c <syncSMOKState.part.1>
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].isOn       = ((data->flags55&FLAGS55_SMOK_ON)!=0);


  syncSMOKState(portNum);

  portData[portNum].ka++;
 8009a46:	fb06 8607 	mla	r6, r6, r7, r8
  SPIevent(portNum, SPI_EV_TYPE_LINK_ESTABLISHED);
 8009a4a:	2103      	movs	r1, #3
  spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].isOn       = ((data->flags55&FLAGS55_SMOK_ON)!=0);


  syncSMOKState(portNum);

  portData[portNum].ka++;
 8009a4c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8009a50:	3301      	adds	r3, #1
 8009a52:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
  SPIevent(portNum, SPI_EV_TYPE_LINK_ESTABLISHED);
 8009a56:	4638      	mov	r0, r7
 8009a58:	f002 fba2 	bl	800c1a0 <SPIevent>

  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_55_t, guiTp));
 8009a5c:	7d61      	ldrb	r1, [r4, #21]
 8009a5e:	220e      	movs	r2, #14
 8009a60:	4620      	mov	r0, r4
  return 0;
}
 8009a62:	b003      	add	sp, #12
 8009a64:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  portData[portNum].ka++;
  SPIevent(portNum, SPI_EV_TYPE_LINK_ESTABLISHED);

  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_55_t, guiTp));
 8009a68:	f7ff bc34 	b.w	80092d4 <sendBroadcast>
 8009a6c:	10002038 	.word	0x10002038
 8009a70:	10002b30 	.word	0x10002b30

08009a74 <showSpkSets>:
} spkSet_t;
static spkSet_t spkSet[4];
static spkSet_t spkSetSMOKs[4][2];

void showSpkSets(int *bufSize, char *bufPtr)
{
 8009a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a78:	4d2d      	ldr	r5, [pc, #180]	; (8009b30 <showSpkSets+0xbc>)
 8009a7a:	b093      	sub	sp, #76	; 0x4c
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	4689      	mov	r9, r1
 8009a80:	f105 0424 	add.w	r4, r5, #36	; 0x24
  int i;
  for(i = 0; i < 4; i++)
 8009a84:	2600      	movs	r6, #0
    {
      DPRINTF("%d) isOn:%d/%d/%d reqOn:%d cSharc:%x/%x/%x cPWM:%x/%x/%x signalType %x/%x outputType %x/%x volume %d/%d:%d/%d"CLEAR_LINE"\n", i,
 8009a86:	f241 2b87 	movw	fp, #4743	; 0x1287
 8009a8a:	f1a5 0a06 	sub.w	sl, r5, #6
 8009a8e:	f8d8 0000 	ldr.w	r0, [r8]
 8009a92:	4558      	cmp	r0, fp
 8009a94:	dc42      	bgt.n	8009b1c <showSpkSets+0xa8>
 8009a96:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 8009a9a:	4453      	add	r3, sl
 8009a9c:	7962      	ldrb	r2, [r4, #5]
 8009a9e:	7a1b      	ldrb	r3, [r3, #8]
 8009aa0:	9210      	str	r2, [sp, #64]	; 0x40
 8009aa2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009aa6:	920f      	str	r2, [sp, #60]	; 0x3c
 8009aa8:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 8009aac:	920e      	str	r2, [sp, #56]	; 0x38
 8009aae:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8009ab2:	920d      	str	r2, [sp, #52]	; 0x34
 8009ab4:	7922      	ldrb	r2, [r4, #4]
 8009ab6:	920c      	str	r2, [sp, #48]	; 0x30
 8009ab8:	792a      	ldrb	r2, [r5, #4]
 8009aba:	920b      	str	r2, [sp, #44]	; 0x2c
 8009abc:	78e2      	ldrb	r2, [r4, #3]
 8009abe:	920a      	str	r2, [sp, #40]	; 0x28
 8009ac0:	78ea      	ldrb	r2, [r5, #3]
 8009ac2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ac4:	7a22      	ldrb	r2, [r4, #8]
 8009ac6:	9208      	str	r2, [sp, #32]
 8009ac8:	7862      	ldrb	r2, [r4, #1]
 8009aca:	9207      	str	r2, [sp, #28]
 8009acc:	786a      	ldrb	r2, [r5, #1]
 8009ace:	9206      	str	r2, [sp, #24]
 8009ad0:	79e2      	ldrb	r2, [r4, #7]
 8009ad2:	9205      	str	r2, [sp, #20]
 8009ad4:	7822      	ldrb	r2, [r4, #0]
 8009ad6:	9204      	str	r2, [sp, #16]
 8009ad8:	782a      	ldrb	r2, [r5, #0]
 8009ada:	9203      	str	r2, [sp, #12]
 8009adc:	f003 0201 	and.w	r2, r3, #1
 8009ae0:	9202      	str	r2, [sp, #8]
 8009ae2:	220e      	movs	r2, #14
 8009ae4:	fb02 a206 	mla	r2, r2, r6, sl
 8009ae8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009aec:	f892 1033 	ldrb.w	r1, [r2, #51]	; 0x33
 8009af0:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8009af4:	9101      	str	r1, [sp, #4]
 8009af6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8009afa:	490e      	ldr	r1, [pc, #56]	; (8009b34 <showSpkSets+0xc0>)
 8009afc:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8009b00:	9200      	str	r2, [sp, #0]
 8009b02:	4448      	add	r0, r9
 8009b04:	4632      	mov	r2, r6
 8009b06:	f7ff f8ad 	bl	8008c64 <xsprintf>
 8009b0a:	f8d8 7000 	ldr.w	r7, [r8]
 8009b0e:	eb09 0007 	add.w	r0, r9, r7
 8009b12:	f013 fb95 	bl	801d240 <strlen>
 8009b16:	4438      	add	r0, r7
 8009b18:	f8c8 0000 	str.w	r0, [r8]
static spkSet_t spkSetSMOKs[4][2];

void showSpkSets(int *bufSize, char *bufPtr)
{
  int i;
  for(i = 0; i < 4; i++)
 8009b1c:	3601      	adds	r6, #1
 8009b1e:	2e04      	cmp	r6, #4
 8009b20:	f105 0507 	add.w	r5, r5, #7
 8009b24:	f104 040e 	add.w	r4, r4, #14
 8009b28:	d1b1      	bne.n	8009a8e <showSpkSets+0x1a>
              spkSet[i].signalType, spkSetSMOKs[i][0].signalType,
              spkSet[i].outputType, spkSetSMOKs[i][0].outputType,
              spkSet[i].volume[0], spkSetSMOKs[i][0].volume[0],
              spkSet[i].volume[1], spkSetSMOKs[i][1].volume[0]);
    }
}
 8009b2a:	b013      	add	sp, #76	; 0x4c
 8009b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b30:	10002b36 	.word	0x10002b36
 8009b34:	0801d56a 	.word	0x0801d56a

08009b38 <sendOnOff>:
/*   int spkNum = (p - PER1_PORT)>>1; */
/*   return spkSet[spkNum].isOn; */
/* } */

int sendOnOff(portNum_t portNum, int on)
{
 8009b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(!onOffPending)
 8009b3c:	4c23      	ldr	r4, [pc, #140]	; (8009bcc <sendOnOff+0x94>)
 8009b3e:	6823      	ldr	r3, [r4, #0]
/*   int spkNum = (p - PER1_PORT)>>1; */
/*   return spkSet[spkNum].isOn; */
/* } */

int sendOnOff(portNum_t portNum, int on)
{
 8009b40:	460d      	mov	r5, r1
 8009b42:	4626      	mov	r6, r4
  if(!onOffPending)
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d13d      	bne.n	8009bc4 <sendOnOff+0x8c>
    {
      int kondPom = portData[portNum].kond_pom;
 8009b48:	4b21      	ldr	r3, [pc, #132]	; (8009bd0 <sendOnOff+0x98>)
 8009b4a:	2250      	movs	r2, #80	; 0x50
 8009b4c:	fb02 3000 	mla	r0, r2, r0, r3
 8009b50:	7e47      	ldrb	r7, [r0, #25]
      int spkNum =  kondPom2SpkNum(kondPom);
 8009b52:	4638      	mov	r0, r7
 8009b54:	f7ff faba 	bl	80090cc <kondPom2SpkNum>
      if(spkNum < 0) return 0;
 8009b58:	1e04      	subs	r4, r0, #0
 8009b5a:	db33      	blt.n	8009bc4 <sendOnOff+0x8c>
      if(on == -1) on = spkSet[spkNum].isOn;
 8009b5c:	1c6b      	adds	r3, r5, #1
 8009b5e:	bf04      	itt	eq
 8009b60:	ebc4 03c4 	rsbeq	r3, r4, r4, lsl #3
 8009b64:	199b      	addeq	r3, r3, r6
 8009b66:	f04f 0806 	mov.w	r8, #6
 8009b6a:	bf04      	itt	eq
 8009b6c:	7a1d      	ldrbeq	r5, [r3, #8]
 8009b6e:	f3c5 0540 	ubfxeq	r5, r5, #1, #1
      if(on)
        {
          //Send 50
          bBuffer_t *msg = bAlloc(MSG_LEN);
 8009b72:	2020      	movs	r0, #32
    {
      int kondPom = portData[portNum].kond_pom;
      int spkNum =  kondPom2SpkNum(kondPom);
      if(spkNum < 0) return 0;
      if(on == -1) on = spkSet[spkNum].isOn;
      if(on)
 8009b74:	b1b5      	cbz	r5, 8009ba4 <sendOnOff+0x6c>
        {
          //Send 50
          bBuffer_t *msg = bAlloc(MSG_LEN);
 8009b76:	f00b fa01 	bl	8014f7c <bAlloc>
          msg->size = sizeof(msg_50_t);
          msg_50_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
          data->kod = 0x50;
          data->kondPom = kondPom;
          data->cSharc = spkSet[spkNum].cSharc;
 8009b7a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
      if(spkNum < 0) return 0;
      if(on == -1) on = spkSet[spkNum].isOn;
      if(on)
        {
          //Send 50
          bBuffer_t *msg = bAlloc(MSG_LEN);
 8009b7e:	4605      	mov	r5, r0
          msg->size = sizeof(msg_50_t);
          msg_50_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
 8009b80:	2220      	movs	r2, #32
      if(on == -1) on = spkSet[spkNum].isOn;
      if(on)
        {
          //Send 50
          bBuffer_t *msg = bAlloc(MSG_LEN);
          msg->size = sizeof(msg_50_t);
 8009b82:	f820 8b14 	strh.w	r8, [r0], #20
          msg_50_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
 8009b86:	2100      	movs	r1, #0
 8009b88:	f013 faf4 	bl	801d174 <memset>
          data->kod = 0x50;
          data->kondPom = kondPom;
          data->cSharc = spkSet[spkNum].cSharc;
 8009b8c:	4434      	add	r4, r6
          //Send 50
          bBuffer_t *msg = bAlloc(MSG_LEN);
          msg->size = sizeof(msg_50_t);
          msg_50_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
          data->kod = 0x50;
 8009b8e:	2350      	movs	r3, #80	; 0x50
 8009b90:	752b      	strb	r3, [r5, #20]
          data->kondPom = kondPom;
 8009b92:	756f      	strb	r7, [r5, #21]
          data->cSharc = spkSet[spkNum].cSharc;
 8009b94:	79a3      	ldrb	r3, [r4, #6]
 8009b96:	75ab      	strb	r3, [r5, #22]
          data->cPWM = spkSet[spkNum].cPWM;
 8009b98:	79e3      	ldrb	r3, [r4, #7]
 8009b9a:	75eb      	strb	r3, [r5, #23]
          data->guiTp = 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	766b      	strb	r3, [r5, #25]
          msgGenSend(msg);
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	e00d      	b.n	8009bc0 <sendOnOff+0x88>
        }
      else
        {
          //Send 52
          bBuffer_t *msg = bAlloc(MSG_LEN);
 8009ba4:	f00b f9ea 	bl	8014f7c <bAlloc>
          msg->size = sizeof(msg_52_t);
          msg_52_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
 8009ba8:	2220      	movs	r2, #32
          msgGenSend(msg);
        }
      else
        {
          //Send 52
          bBuffer_t *msg = bAlloc(MSG_LEN);
 8009baa:	4604      	mov	r4, r0
          msg->size = sizeof(msg_52_t);
          msg_52_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
 8009bac:	4629      	mov	r1, r5
        }
      else
        {
          //Send 52
          bBuffer_t *msg = bAlloc(MSG_LEN);
          msg->size = sizeof(msg_52_t);
 8009bae:	f820 8b14 	strh.w	r8, [r0], #20
          msg_52_t *data = (void *)msg->data;
          memset(data, 0, MSG_LEN);
 8009bb2:	f013 fadf 	bl	801d174 <memset>
          data->kod = 0x52;
 8009bb6:	2352      	movs	r3, #82	; 0x52
 8009bb8:	7523      	strb	r3, [r4, #20]
          data->kondPom = kondPom;
 8009bba:	7567      	strb	r7, [r4, #21]
          data->guiTp = 0;
 8009bbc:	7665      	strb	r5, [r4, #25]
          msgGenSend(msg);
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f7ff f9dc 	bl	8008f7c <msgGenSend>
        }
    }
  return 0;
}
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bca:	bf00      	nop
 8009bcc:	10002b30 	.word	0x10002b30
 8009bd0:	10002038 	.word	0x10002038

08009bd4 <sendKANow>:
}

static int radioReinitOnACK92 = 0;
static int kaNow[PORTS_NUM] = {0};
void sendKANow(portNum_t portNum)
{
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	4604      	mov	r4, r0
  taskENTER_CRITICAL();
 8009bd8:	f000 fbe8 	bl	800a3ac <vPortEnterCritical>
  kaNow[portNum]=1;
 8009bdc:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <sendKANow+0x20>)
 8009bde:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009be2:	2301      	movs	r3, #1
 8009be4:	6643      	str	r3, [r0, #100]	; 0x64
  messageCommNULL();
 8009be6:	f001 fcf9 	bl	800b5dc <messageCommNULL>
  taskEXIT_CRITICAL();
}
 8009bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void sendKANow(portNum_t portNum)
{
  taskENTER_CRITICAL();
  kaNow[portNum]=1;
  messageCommNULL();
  taskEXIT_CRITICAL();
 8009bee:	f000 bbef 	b.w	800a3d0 <vPortExitCritical>
 8009bf2:	bf00      	nop
 8009bf4:	10002b30 	.word	0x10002b30

08009bf8 <updateAllSMOKs>:
              spkSet[i].volume[1], spkSetSMOKs[i][1].volume[0]);
    }
}

void updateAllSMOKs(void)
{
 8009bf8:	b510      	push	{r4, lr}
  portNum_t p;
  for(p = PER1_PORT; p < PORTS_NUM; p+=1)
 8009bfa:	2401      	movs	r4, #1
    sendKANow(p);
 8009bfc:	4620      	mov	r0, r4
}

void updateAllSMOKs(void)
{
  portNum_t p;
  for(p = PER1_PORT; p < PORTS_NUM; p+=1)
 8009bfe:	3401      	adds	r4, #1
 8009c00:	b2e4      	uxtb	r4, r4
    sendKANow(p);
 8009c02:	f7ff ffe7 	bl	8009bd4 <sendKANow>
}

void updateAllSMOKs(void)
{
  portNum_t p;
  for(p = PER1_PORT; p < PORTS_NUM; p+=1)
 8009c06:	2c09      	cmp	r4, #9
 8009c08:	d1f8      	bne.n	8009bfc <updateAllSMOKs+0x4>
    sendKANow(p);
}
 8009c0a:	bd10      	pop	{r4, pc}

08009c0c <msgStatusLong>:
  sendBroadcast(bBuffer, data->kondPom, offsetof(msg_B0_t, guiTp));
  return 0;
}

static int msgStatusLong(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009c0c:	b570      	push	{r4, r5, r6, lr}
  bBuffer->size = sizeof(msg_B1_t);
 8009c0e:	2309      	movs	r3, #9
 8009c10:	8013      	strh	r3, [r2, #0]
  msg_B1_t *data = (void *)bBuffer->data;

  if(!cfg.disable_alerts)
 8009c12:	4b14      	ldr	r3, [pc, #80]	; (8009c64 <msgStatusLong+0x58>)
 8009c14:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  sendBroadcast(bBuffer, data->kondPom, offsetof(msg_B0_t, guiTp));
  return 0;
}

static int msgStatusLong(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009c16:	4606      	mov	r6, r0
 8009c18:	4614      	mov	r4, r2
  bBuffer->size = sizeof(msg_B1_t);
  msg_B1_t *data = (void *)bBuffer->data;

  if(!cfg.disable_alerts)
 8009c1a:	b9e5      	cbnz	r5, 8009c56 <msgStatusLong+0x4a>
    if(data->Smok_msgType >= 0xB0 && data->Smok_msgType <= 0xBF)
 8009c1c:	7dd3      	ldrb	r3, [r2, #23]
 8009c1e:	3350      	adds	r3, #80	; 0x50
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b0f      	cmp	r3, #15
 8009c24:	d817      	bhi.n	8009c56 <msgStatusLong+0x4a>
      {
        int spkNum =  kondPom2SpkNum(data->kondPom);
 8009c26:	7d50      	ldrb	r0, [r2, #21]
 8009c28:	f7ff fa50 	bl	80090cc <kondPom2SpkNum>
        if(spkNum >=0)
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	db12      	blt.n	8009c56 <msgStatusLong+0x4a>
          {
            spkSet[spkNum].reqOn = 0;
 8009c30:	4b0d      	ldr	r3, [pc, #52]	; (8009c68 <msgStatusLong+0x5c>)
 8009c32:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009c36:	4418      	add	r0, r3
 8009c38:	7903      	ldrb	r3, [r0, #4]
 8009c3a:	f365 0300 	bfi	r3, r5, #0, #1
 8009c3e:	7103      	strb	r3, [r0, #4]
            if(spkSet[spkNum].isOn)
 8009c40:	079b      	lsls	r3, r3, #30
 8009c42:	d506      	bpl.n	8009c52 <msgStatusLong+0x46>
              {
                portNum_t p = getSecondPort(portNum);
 8009c44:	4630      	mov	r0, r6
 8009c46:	f7ff f9fe 	bl	8009046 <getSecondPort>
                //Send off to the other SMOK
                if(p != CEN_PORT)
 8009c4a:	b110      	cbz	r0, 8009c52 <msgStatusLong+0x46>
                  sendOnOff(p, 0);
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	f7ff ff73 	bl	8009b38 <sendOnOff>
              }
            updateAllSMOKs();
 8009c52:	f7ff ffd1 	bl	8009bf8 <updateAllSMOKs>
          }
      }

  // send ACK broadcast
  sendBroadcast(bBuffer, data->kondPom, offsetof(msg_B1_t, guiTp));
 8009c56:	2208      	movs	r2, #8
 8009c58:	7d61      	ldrb	r1, [r4, #21]
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f7ff fb3a 	bl	80092d4 <sendBroadcast>
  return 0;
}
 8009c60:	2000      	movs	r0, #0
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	10001000 	.word	0x10001000
 8009c68:	10002b34 	.word	0x10002b34

08009c6c <msgStatus>:
    }
  return CB_RET_ACK;
}

static int msgStatus(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009c6c:	b570      	push	{r4, r5, r6, lr}
  bBuffer->size = sizeof(msg_B0_t);
 8009c6e:	2307      	movs	r3, #7
 8009c70:	8013      	strh	r3, [r2, #0]
  msg_B0_t *data = (void *)bBuffer->data;
  if(!cfg.disable_alerts)
 8009c72:	4b14      	ldr	r3, [pc, #80]	; (8009cc4 <msgStatus+0x58>)
 8009c74:	6d1d      	ldr	r5, [r3, #80]	; 0x50
    }
  return CB_RET_ACK;
}

static int msgStatus(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009c76:	4606      	mov	r6, r0
 8009c78:	4614      	mov	r4, r2
  bBuffer->size = sizeof(msg_B0_t);
  msg_B0_t *data = (void *)bBuffer->data;
  if(!cfg.disable_alerts)
 8009c7a:	b9e5      	cbnz	r5, 8009cb6 <msgStatus+0x4a>
    if(data->Smok_msgType >= 0xB0 && data->Smok_msgType <= 0xBF)
 8009c7c:	7dd3      	ldrb	r3, [r2, #23]
 8009c7e:	3350      	adds	r3, #80	; 0x50
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b0f      	cmp	r3, #15
 8009c84:	d817      	bhi.n	8009cb6 <msgStatus+0x4a>
      {
        int spkNum =  kondPom2SpkNum(data->kondPom);
 8009c86:	7d50      	ldrb	r0, [r2, #21]
 8009c88:	f7ff fa20 	bl	80090cc <kondPom2SpkNum>
        if(spkNum >=0)
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	db12      	blt.n	8009cb6 <msgStatus+0x4a>
          {
            spkSet[spkNum].reqOn = 0;
 8009c90:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <msgStatus+0x5c>)
 8009c92:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009c96:	4418      	add	r0, r3
 8009c98:	7903      	ldrb	r3, [r0, #4]
 8009c9a:	f365 0300 	bfi	r3, r5, #0, #1
 8009c9e:	7103      	strb	r3, [r0, #4]
            if(spkSet[spkNum].isOn)
 8009ca0:	079b      	lsls	r3, r3, #30
 8009ca2:	d506      	bpl.n	8009cb2 <msgStatus+0x46>
              {
                portNum_t p = getSecondPort(portNum);
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	f7ff f9ce 	bl	8009046 <getSecondPort>
                //Send off to the other SMOK
                if(p != CEN_PORT)
 8009caa:	b110      	cbz	r0, 8009cb2 <msgStatus+0x46>
                  sendOnOff(p, 0);
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7ff ff43 	bl	8009b38 <sendOnOff>
              }
            updateAllSMOKs();
 8009cb2:	f7ff ffa1 	bl	8009bf8 <updateAllSMOKs>
          }
      }

  // send ACK broadcast
  sendBroadcast(bBuffer, data->kondPom, offsetof(msg_B0_t, guiTp));
 8009cb6:	2206      	movs	r2, #6
 8009cb8:	7d61      	ldrb	r1, [r4, #21]
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff fb0a 	bl	80092d4 <sendBroadcast>
  return 0;
}
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}
 8009cc4:	10001000 	.word	0x10001000
 8009cc8:	10002b34 	.word	0x10002b34

08009ccc <msgOff>:
    }
  return 0;
}

static int msgOff(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	4606      	mov	r6, r0
  msg_52_t *data = (void *)bBuffer->data;
  int spkNum =  kondPom2SpkNum(data->kondPom);
 8009cd0:	7d50      	ldrb	r0, [r2, #21]
    }
  return 0;
}

static int msgOff(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009cd2:	4614      	mov	r4, r2
 8009cd4:	461f      	mov	r7, r3
  msg_52_t *data = (void *)bBuffer->data;
  int spkNum =  kondPom2SpkNum(data->kondPom);
 8009cd6:	f7ff f9f9 	bl	80090cc <kondPom2SpkNum>
  if(spkNum < 0) return 0;
 8009cda:	1e05      	subs	r5, r0, #0
 8009cdc:	da01      	bge.n	8009ce2 <msgOff+0x16>
 8009cde:	2000      	movs	r0, #0
 8009ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int pipeNum = getPipeNum(data->kondPom);
 8009ce2:	7d60      	ldrb	r0, [r4, #21]
 8009ce4:	f00c f884 	bl	8015df0 <getPipeNum>
  if(pipeNum < 0)
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	dbf8      	blt.n	8009cde <msgOff+0x12>
    {
      return 0;
    }

  *forwardMask <<= spkNum*2;
 8009cec:	783b      	ldrb	r3, [r7, #0]
 8009cee:	006a      	lsls	r2, r5, #1
 8009cf0:	4093      	lsls	r3, r2
 8009cf2:	703b      	strb	r3, [r7, #0]
 8009cf4:	00ea      	lsls	r2, r5, #3
 8009cf6:	4b11      	ldr	r3, [pc, #68]	; (8009d3c <msgOff+0x70>)
  if (DIRECTION(portNum))
 8009cf8:	b97e      	cbnz	r6, 8009d1a <msgOff+0x4e>
    {
      //Przekaz komende dalej i czekaj na potwierdzenia
      onOffPending = 1;
      spkSet[spkNum].reqOn = 0;
 8009cfa:	1b52      	subs	r2, r2, r5
 8009cfc:	441a      	add	r2, r3

  *forwardMask <<= spkNum*2;
  if (DIRECTION(portNum))
    {
      //Przekaz komende dalej i czekaj na potwierdzenia
      onOffPending = 1;
 8009cfe:	2101      	movs	r1, #1
 8009d00:	6019      	str	r1, [r3, #0]
      spkSet[spkNum].reqOn = 0;
 8009d02:	7a13      	ldrb	r3, [r2, #8]
 8009d04:	f366 0300 	bfi	r3, r6, #0, #1
 8009d08:	7213      	strb	r3, [r2, #8]
      updateAllSMOKs();
 8009d0a:	f7ff ff75 	bl	8009bf8 <updateAllSMOKs>
      if(cfg.ack50)
 8009d0e:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <msgOff+0x74>)
 8009d10:	6cd8      	ldr	r0, [r3, #76]	; 0x4c

static int msgOff(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
  msg_52_t *data = (void *)bBuffer->data;
  int spkNum =  kondPom2SpkNum(data->kondPom);
  if(spkNum < 0) return 0;
 8009d12:	fab0 f080 	clz	r0, r0
 8009d16:	0940      	lsrs	r0, r0, #5
 8009d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      updateAllSMOKs();
      if(cfg.ack50)
        return 0;
      return CB_RET_ACK;
    }
  onOffPending = 0;
 8009d1a:	2100      	movs	r1, #0
  spkSet[spkNum].isOn = 0;
 8009d1c:	1b52      	subs	r2, r2, r5
      updateAllSMOKs();
      if(cfg.ack50)
        return 0;
      return CB_RET_ACK;
    }
  onOffPending = 0;
 8009d1e:	6019      	str	r1, [r3, #0]
  spkSet[spkNum].isOn = 0;
 8009d20:	4413      	add	r3, r2
 8009d22:	3304      	adds	r3, #4
 8009d24:	791a      	ldrb	r2, [r3, #4]
 8009d26:	f361 0241 	bfi	r2, r1, #1, #1
 8009d2a:	711a      	strb	r2, [r3, #4]
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_52_t, guiTp));
 8009d2c:	7d61      	ldrb	r1, [r4, #21]
 8009d2e:	4620      	mov	r0, r4
 8009d30:	2205      	movs	r2, #5
}
 8009d32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return 0;
      return CB_RET_ACK;
    }
  onOffPending = 0;
  spkSet[spkNum].isOn = 0;
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_52_t, guiTp));
 8009d36:	f7ff bacd 	b.w	80092d4 <sendBroadcast>
 8009d3a:	bf00      	nop
 8009d3c:	10002b30 	.word	0x10002b30
 8009d40:	10001000 	.word	0x10001000

08009d44 <msgNegOn>:
  // send ACK broadcast
  return sendBroadcast(bBuffer, data->kondPom, offsetof(msg_50_t, guiTp));
}

static int msgNegOn(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009d44:	b508      	push	{r3, lr}
  //  msg_51_t *data = (void *)bBuffer->data;
  onOffPending = 0;
 8009d46:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <msgNegOn+0x28>)
  if(cfg.ack50)
 8009d48:	4a09      	ldr	r2, [pc, #36]	; (8009d70 <msgNegOn+0x2c>)
}

static int msgNegOn(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
  //  msg_51_t *data = (void *)bBuffer->data;
  onOffPending = 0;
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	6019      	str	r1, [r3, #0]
  if(cfg.ack50)
 8009d4e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009d50:	b152      	cbz	r2, 8009d68 <msgNegOn+0x24>
    {
      int spkNum = (portNum - PER1_PORT)>>1;
      spkSet[spkNum].reqOn = 0;
 8009d52:	3801      	subs	r0, #1
 8009d54:	1040      	asrs	r0, r0, #1
 8009d56:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009d5a:	4403      	add	r3, r0
 8009d5c:	7a1a      	ldrb	r2, [r3, #8]
 8009d5e:	f361 0200 	bfi	r2, r1, #0, #1
 8009d62:	721a      	strb	r2, [r3, #8]
      updateAllSMOKs();
 8009d64:	f7ff ff48 	bl	8009bf8 <updateAllSMOKs>
    }
  return 0;
}
 8009d68:	2000      	movs	r0, #0
 8009d6a:	bd08      	pop	{r3, pc}
 8009d6c:	10002b30 	.word	0x10002b30
 8009d70:	10001000 	.word	0x10001000

08009d74 <msgActiveTransmiters>:
  [3] = RM_MULTISLAVE_STEREO,
  [4] = RM_SINGLESLAVE,
};

static int msgActiveTransmiters(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  msg_90_t *data = (void *)bBuffer->data;
  portNum_t p;
  switch(rMode)
 8009d78:	4f91      	ldr	r7, [pc, #580]	; (8009fc0 <msgActiveTransmiters+0x24c>)
 8009d7a:	783d      	ldrb	r5, [r7, #0]
  [3] = RM_MULTISLAVE_STEREO,
  [4] = RM_SINGLESLAVE,
};

static int msgActiveTransmiters(portNum_t portNum, comm_t *comm, bBuffer_t *bBuffer, uint8_t *forwardMask)
{
 8009d7c:	4614      	mov	r4, r2
  msg_90_t *data = (void *)bBuffer->data;
  portNum_t p;
  switch(rMode)
 8009d7e:	b97d      	cbnz	r5, 8009da0 <msgActiveTransmiters+0x2c>
    case RM_MULTISLAVE:
    {
      portNum_t p;
      for(p = PER1_PORT; p < PORTS_NUM; p++)
        {
          msPipeNum[p] = getPipeNum(portData[p].kond_pom);
 8009d80:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8009fd8 <msgActiveTransmiters+0x264>
 8009d84:	4e8f      	ldr	r6, [pc, #572]	; (8009fc4 <msgActiveTransmiters+0x250>)
 8009d86:	f04f 0914 	mov.w	r9, #20
 8009d8a:	fb09 8305 	mla	r3, r9, r5, r8
 8009d8e:	f893 0069 	ldrb.w	r0, [r3, #105]	; 0x69
 8009d92:	f00c f82d 	bl	8015df0 <getPipeNum>
 8009d96:	1973      	adds	r3, r6, r5
 8009d98:	3504      	adds	r5, #4
  switch(rMode)
    {
    case RM_MULTISLAVE:
    {
      portNum_t p;
      for(p = PER1_PORT; p < PORTS_NUM; p++)
 8009d9a:	2d20      	cmp	r5, #32
        {
          msPipeNum[p] = getPipeNum(portData[p].kond_pom);
 8009d9c:	6058      	str	r0, [r3, #4]
  switch(rMode)
    {
    case RM_MULTISLAVE:
    {
      portNum_t p;
      for(p = PER1_PORT; p < PORTS_NUM; p++)
 8009d9e:	d1f4      	bne.n	8009d8a <msgActiveTransmiters+0x16>
    break;
    default:
      break;
    }

  if(rMode !=  RM_SINGLESLAVE && data->konfig_ZG >= 1 && data->konfig_ZG <= 3)
 8009da0:	783b      	ldrb	r3, [r7, #0]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d052      	beq.n	8009e4c <msgActiveTransmiters+0xd8>
 8009da6:	7e22      	ldrb	r2, [r4, #24]
 8009da8:	1e51      	subs	r1, r2, #1
 8009daa:	2902      	cmp	r1, #2
 8009dac:	d84e      	bhi.n	8009e4c <msgActiveTransmiters+0xd8>
    {
      radioMode_e newRadioMode = radioModeMap[data->konfig_ZG];
 8009dae:	4986      	ldr	r1, [pc, #536]	; (8009fc8 <msgActiveTransmiters+0x254>)
 8009db0:	5c8d      	ldrb	r5, [r1, r2]
      if(newRadioMode != rMode)
 8009db2:	42ab      	cmp	r3, r5
 8009db4:	d04c      	beq.n	8009e50 <msgActiveTransmiters+0xdc>
        {
          /*Change pipe*/

          if(newRadioMode == RM_MULTISLAVE_STEREO)
 8009db6:	2d01      	cmp	r5, #1
 8009db8:	4e84      	ldr	r6, [pc, #528]	; (8009fcc <msgActiveTransmiters+0x258>)
 8009dba:	d12c      	bne.n	8009e16 <msgActiveTransmiters+0xa2>
            {
              msStSpkSet = data->ZkondPomA1;
 8009dbc:	7da1      	ldrb	r1, [r4, #22]
 8009dbe:	6071      	str	r1, [r6, #4]
              rmChange(RM_MULTISLAVE_STEREO, msStSpkSet, 1);
 8009dc0:	462a      	mov	r2, r5
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f00c f8b6 	bl	8015f34 <rmChange>
              //Clear all spkSets
              pipeSetSpkSet(-1, -1, 0);
 8009dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8009dcc:	4608      	mov	r0, r1
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f00b ffe8 	bl	8015da4 <pipeSetSpkSet>
              pipeSetSpkSet(-1, -1, 1);
 8009dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8009dd8:	4608      	mov	r0, r1
 8009dda:	462a      	mov	r2, r5
 8009ddc:	f00b ffe2 	bl	8015da4 <pipeSetSpkSet>
              pipeSetSpkSet(-1, -1, 2);
 8009de0:	f04f 31ff 	mov.w	r1, #4294967295
 8009de4:	4608      	mov	r0, r1
 8009de6:	2202      	movs	r2, #2
 8009de8:	f00b ffdc 	bl	8015da4 <pipeSetSpkSet>
              pipeSetSpkSet(-1, -1, 3);
 8009dec:	f04f 31ff 	mov.w	r1, #4294967295
 8009df0:	4608      	mov	r0, r1
 8009df2:	2203      	movs	r2, #3
 8009df4:	f00b ffd6 	bl	8015da4 <pipeSetSpkSet>
              //Set new spkSet
              pipeSetSpkSet(0, msStSpkSet, -1/*Find*/);
 8009df8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfc:	6871      	ldr	r1, [r6, #4]
 8009dfe:	2000      	movs	r0, #0
 8009e00:	f00b ffd0 	bl	8015da4 <pipeSetSpkSet>
                if(portData[p].kond_pom > 0)
                  pipeSetSpkSet(msPipeNum[p], portData[p].kond_pom, (p-PER1_PORT)>>1);
            }

          if(newRadioMode == RM_MULTISLAVE_STEREO)
            radioReinitOnACK92 = (cfg.smok_mask == 0x3)?2:1;
 8009e04:	4b72      	ldr	r3, [pc, #456]	; (8009fd0 <msgActiveTransmiters+0x25c>)
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	2b03      	cmp	r3, #3
 8009e0a:	4b72      	ldr	r3, [pc, #456]	; (8009fd4 <msgActiveTransmiters+0x260>)
 8009e0c:	bf0c      	ite	eq
 8009e0e:	2202      	moveq	r2, #2
 8009e10:	2201      	movne	r2, #1
 8009e12:	661a      	str	r2, [r3, #96]	; 0x60
 8009e14:	e01a      	b.n	8009e4c <msgActiveTransmiters+0xd8>
              //sendStreamInfoSpk(msStSpkSet);

            }
          else
            {
              rmChange(RM_MULTISLAVE, msStSpkSet, 1);
 8009e16:	6871      	ldr	r1, [r6, #4]
              /* pipeSetSpkSet(-1, -1, 1); */
              /* pipeSetSpkSet(-1, -1, 2); */
              /* pipeSetSpkSet(-1, -1, 3); */
              //              pipeSetSpkSet(-1, -1, 0);
              for(p = PER1_PORT; p < PORTS_NUM; p+=2)
                if(portData[p].kond_pom > 0)
 8009e18:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009fd8 <msgActiveTransmiters+0x264>
                  pipeSetSpkSet(msPipeNum[p], portData[p].kond_pom, (p-PER1_PORT)>>1);
 8009e1c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8009fc4 <msgActiveTransmiters+0x250>
              //sendStreamInfoSpk(msStSpkSet);

            }
          else
            {
              rmChange(RM_MULTISLAVE, msStSpkSet, 1);
 8009e20:	2201      	movs	r2, #1
 8009e22:	2000      	movs	r0, #0
 8009e24:	f00c f886 	bl	8015f34 <rmChange>
 8009e28:	2500      	movs	r5, #0
              /* pipeSetSpkSet(-1, -1, 1); */
              /* pipeSetSpkSet(-1, -1, 2); */
              /* pipeSetSpkSet(-1, -1, 3); */
              //              pipeSetSpkSet(-1, -1, 0);
              for(p = PER1_PORT; p < PORTS_NUM; p+=2)
                if(portData[p].kond_pom > 0)
 8009e2a:	2650      	movs	r6, #80	; 0x50
 8009e2c:	fb06 8305 	mla	r3, r6, r5, r8
 8009e30:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
 8009e34:	b129      	cbz	r1, 8009e42 <msgActiveTransmiters+0xce>
                  pipeSetSpkSet(msPipeNum[p], portData[p].kond_pom, (p-PER1_PORT)>>1);
 8009e36:	eb09 0385 	add.w	r3, r9, r5, lsl #2
 8009e3a:	106a      	asrs	r2, r5, #1
 8009e3c:	6858      	ldr	r0, [r3, #4]
 8009e3e:	f00b ffb1 	bl	8015da4 <pipeSetSpkSet>
 8009e42:	3502      	adds	r5, #2
              /* pipeSetSpkSet(-1, -1, 0); */
              /* pipeSetSpkSet(-1, -1, 1); */
              /* pipeSetSpkSet(-1, -1, 2); */
              /* pipeSetSpkSet(-1, -1, 3); */
              //              pipeSetSpkSet(-1, -1, 0);
              for(p = PER1_PORT; p < PORTS_NUM; p+=2)
 8009e44:	2d08      	cmp	r5, #8
 8009e46:	d1f1      	bne.n	8009e2c <msgActiveTransmiters+0xb8>
            }

          if(newRadioMode == RM_MULTISLAVE_STEREO)
            radioReinitOnACK92 = (cfg.smok_mask == 0x3)?2:1;
          else
            radioReinit();
 8009e48:	f002 f992 	bl	800c170 <radioReinit>
 8009e4c:	2501      	movs	r5, #1
 8009e4e:	e066      	b.n	8009f1e <msgActiveTransmiters+0x1aa>
        }
      else
        {
          CHANGE_PIPE(data->ZkondPomA1, 1);
 8009e50:	7da0      	ldrb	r0, [r4, #22]
 8009e52:	b1b8      	cbz	r0, 8009e84 <msgActiveTransmiters+0x110>
 8009e54:	f00b ffcc 	bl	8015df0 <getPipeNum>
 8009e58:	2801      	cmp	r0, #1
 8009e5a:	d113      	bne.n	8009e84 <msgActiveTransmiters+0x110>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	495e      	ldr	r1, [pc, #376]	; (8009fd8 <msgActiveTransmiters+0x264>)
 8009e60:	4618      	mov	r0, r3
 8009e62:	185a      	adds	r2, r3, r1
 8009e64:	7da5      	ldrb	r5, [r4, #22]
 8009e66:	f892 6069 	ldrb.w	r6, [r2, #105]	; 0x69
 8009e6a:	3350      	adds	r3, #80	; 0x50
 8009e6c:	42ae      	cmp	r6, r5
 8009e6e:	bf08      	it	eq
 8009e70:	66d0      	streq	r0, [r2, #108]	; 0x6c
 8009e72:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009e76:	d1f4      	bne.n	8009e62 <msgActiveTransmiters+0xee>
 8009e78:	f04f 32ff 	mov.w	r2, #4294967295
 8009e7c:	7da1      	ldrb	r1, [r4, #22]
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f00b ff90 	bl	8015da4 <pipeSetSpkSet>
          CHANGE_PIPE(data->ZkondPomA2, 1);
 8009e84:	7de0      	ldrb	r0, [r4, #23]
 8009e86:	b1b8      	cbz	r0, 8009eb8 <msgActiveTransmiters+0x144>
 8009e88:	f00b ffb2 	bl	8015df0 <getPipeNum>
 8009e8c:	2801      	cmp	r0, #1
 8009e8e:	d113      	bne.n	8009eb8 <msgActiveTransmiters+0x144>
 8009e90:	2300      	movs	r3, #0
 8009e92:	4951      	ldr	r1, [pc, #324]	; (8009fd8 <msgActiveTransmiters+0x264>)
 8009e94:	4618      	mov	r0, r3
 8009e96:	185a      	adds	r2, r3, r1
 8009e98:	7de5      	ldrb	r5, [r4, #23]
 8009e9a:	f892 6069 	ldrb.w	r6, [r2, #105]	; 0x69
 8009e9e:	3350      	adds	r3, #80	; 0x50
 8009ea0:	42ae      	cmp	r6, r5
 8009ea2:	bf08      	it	eq
 8009ea4:	66d0      	streq	r0, [r2, #108]	; 0x6c
 8009ea6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009eaa:	d1f4      	bne.n	8009e96 <msgActiveTransmiters+0x122>
 8009eac:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb0:	7de1      	ldrb	r1, [r4, #23]
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	f00b ff76 	bl	8015da4 <pipeSetSpkSet>
          CHANGE_PIPE(data->ZkondPomB1, 0);
 8009eb8:	7e60      	ldrb	r0, [r4, #25]
 8009eba:	b1a8      	cbz	r0, 8009ee8 <msgActiveTransmiters+0x174>
 8009ebc:	f00b ff98 	bl	8015df0 <getPipeNum>
 8009ec0:	b990      	cbnz	r0, 8009ee8 <msgActiveTransmiters+0x174>
 8009ec2:	4a45      	ldr	r2, [pc, #276]	; (8009fd8 <msgActiveTransmiters+0x264>)
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	1883      	adds	r3, r0, r2
 8009ec8:	7e65      	ldrb	r5, [r4, #25]
 8009eca:	f893 6069 	ldrb.w	r6, [r3, #105]	; 0x69
 8009ece:	3050      	adds	r0, #80	; 0x50
 8009ed0:	42ae      	cmp	r6, r5
 8009ed2:	bf08      	it	eq
 8009ed4:	66d9      	streq	r1, [r3, #108]	; 0x6c
 8009ed6:	f5b0 7f20 	cmp.w	r0, #640	; 0x280
 8009eda:	d1f4      	bne.n	8009ec6 <msgActiveTransmiters+0x152>
 8009edc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee0:	7e61      	ldrb	r1, [r4, #25]
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	f00b ff5e 	bl	8015da4 <pipeSetSpkSet>
          CHANGE_PIPE(data->ZkondPomB2, 0);
 8009ee8:	7ea0      	ldrb	r0, [r4, #26]
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d0ae      	beq.n	8009e4c <msgActiveTransmiters+0xd8>
 8009eee:	f00b ff7f 	bl	8015df0 <getPipeNum>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d1aa      	bne.n	8009e4c <msgActiveTransmiters+0xd8>
 8009ef6:	4a38      	ldr	r2, [pc, #224]	; (8009fd8 <msgActiveTransmiters+0x264>)
 8009ef8:	2101      	movs	r1, #1
 8009efa:	1883      	adds	r3, r0, r2
 8009efc:	7ea5      	ldrb	r5, [r4, #26]
 8009efe:	f893 6069 	ldrb.w	r6, [r3, #105]	; 0x69
 8009f02:	3050      	adds	r0, #80	; 0x50
 8009f04:	42ae      	cmp	r6, r5
 8009f06:	bf08      	it	eq
 8009f08:	66d9      	streq	r1, [r3, #108]	; 0x6c
 8009f0a:	f5b0 7f20 	cmp.w	r0, #640	; 0x280
 8009f0e:	d1f4      	bne.n	8009efa <msgActiveTransmiters+0x186>
 8009f10:	f04f 32ff 	mov.w	r2, #4294967295
 8009f14:	7ea1      	ldrb	r1, [r4, #26]
 8009f16:	4610      	mov	r0, r2
 8009f18:	f00b ff44 	bl	8015da4 <pipeSetSpkSet>
 8009f1c:	e796      	b.n	8009e4c <msgActiveTransmiters+0xd8>
        }
    }

  for(p = PER1_PORT; p < PORTS_NUM; p+=1)
    sendKANow(p);
 8009f1e:	4628      	mov	r0, r5
          CHANGE_PIPE(data->ZkondPomB1, 0);
          CHANGE_PIPE(data->ZkondPomB2, 0);
        }
    }

  for(p = PER1_PORT; p < PORTS_NUM; p+=1)
 8009f20:	3501      	adds	r5, #1
 8009f22:	b2ed      	uxtb	r5, r5
    sendKANow(p);
 8009f24:	f7ff fe56 	bl	8009bd4 <sendKANow>
          CHANGE_PIPE(data->ZkondPomB1, 0);
          CHANGE_PIPE(data->ZkondPomB2, 0);
        }
    }

  for(p = PER1_PORT; p < PORTS_NUM; p+=1)
 8009f28:	2d09      	cmp	r5, #9
 8009f2a:	d1f8      	bne.n	8009f1e <msgActiveTransmiters+0x1aa>
static int msPipeNum[PORTS_NUM] = {0};
static int msStSpkSet = {-1};
static void fillMsgActiveTransmiters(msg_90_t *data)
{
  portNum_t p;
  data->kod = 0x90;
 8009f2c:	2390      	movs	r3, #144	; 0x90
  data->kondPomMADO = portData[CEN_PORT].kond_pom;
 8009f2e:	4e2a      	ldr	r6, [pc, #168]	; (8009fd8 <msgActiveTransmiters+0x264>)
static int msPipeNum[PORTS_NUM] = {0};
static int msStSpkSet = {-1};
static void fillMsgActiveTransmiters(msg_90_t *data)
{
  portNum_t p;
  data->kod = 0x90;
 8009f30:	7523      	strb	r3, [r4, #20]
  data->kondPomMADO = portData[CEN_PORT].kond_pom;
  if(data->konfig_ZG)return;
 8009f32:	7e25      	ldrb	r5, [r4, #24]
static int msStSpkSet = {-1};
static void fillMsgActiveTransmiters(msg_90_t *data)
{
  portNum_t p;
  data->kod = 0x90;
  data->kondPomMADO = portData[CEN_PORT].kond_pom;
 8009f34:	7e73      	ldrb	r3, [r6, #25]
 8009f36:	7563      	strb	r3, [r4, #21]
  if(data->konfig_ZG)return;
 8009f38:	2d00      	cmp	r5, #0
 8009f3a:	d13e      	bne.n	8009fba <msgActiveTransmiters+0x246>
  data->ZkondPomA2 = 0;
  data->ZkondPomB1 = 0;
  data->ZkondPomB2 = 0;

  //Assume multislave
  switch(rMode)
 8009f3c:	783b      	ldrb	r3, [r7, #0]
{
  portNum_t p;
  data->kod = 0x90;
  data->kondPomMADO = portData[CEN_PORT].kond_pom;
  if(data->konfig_ZG)return;
  data->ZkondPomA1 = 0;
 8009f3e:	75a5      	strb	r5, [r4, #22]
  data->ZkondPomA2 = 0;
  data->ZkondPomB1 = 0;
  data->ZkondPomB2 = 0;

  //Assume multislave
  switch(rMode)
 8009f40:	2b01      	cmp	r3, #1
  portNum_t p;
  data->kod = 0x90;
  data->kondPomMADO = portData[CEN_PORT].kond_pom;
  if(data->konfig_ZG)return;
  data->ZkondPomA1 = 0;
  data->ZkondPomA2 = 0;
 8009f42:	75e5      	strb	r5, [r4, #23]
  data->ZkondPomB1 = 0;
 8009f44:	7665      	strb	r5, [r4, #25]
  data->ZkondPomB2 = 0;
 8009f46:	76a5      	strb	r5, [r4, #26]

  //Assume multislave
  switch(rMode)
 8009f48:	d008      	beq.n	8009f5c <msgActiveTransmiters+0x1e8>
 8009f4a:	d30d      	bcc.n	8009f68 <msgActiveTransmiters+0x1f4>
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d133      	bne.n	8009fb8 <msgActiveTransmiters+0x244>
    {
    case RM_SINGLESLAVE:
      data->konfig_ZG = 4;
 8009f50:	2304      	movs	r3, #4
 8009f52:	7623      	strb	r3, [r4, #24]
      data->ZkondPomA1 = portData[PER1_PORT].kond_pom;
 8009f54:	f896 3069 	ldrb.w	r3, [r6, #105]	; 0x69
 8009f58:	75a3      	strb	r3, [r4, #22]
 8009f5a:	e02e      	b.n	8009fba <msgActiveTransmiters+0x246>
      break;
    case RM_MULTISLAVE_STEREO:
      data->ZkondPomA1 = msStSpkSet;
 8009f5c:	4b1b      	ldr	r3, [pc, #108]	; (8009fcc <msgActiveTransmiters+0x258>)
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	75a3      	strb	r3, [r4, #22]
      data->konfig_ZG = 3;
 8009f62:	2303      	movs	r3, #3
 8009f64:	7623      	strb	r3, [r4, #24]
 8009f66:	e028      	b.n	8009fba <msgActiveTransmiters+0x246>
      break;
    case RM_MULTISLAVE:
      data->konfig_ZG = isHD()?2:1;
 8009f68:	f00b fe3c 	bl	8015be4 <isHD>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	bf14      	ite	ne
 8009f70:	2302      	movne	r3, #2
 8009f72:	2301      	moveq	r3, #1
      for(p = PER1_PORT; p < PORTS_NUM; p+=2)
        {
          switch(msPipeNum[p])
 8009f74:	4913      	ldr	r1, [pc, #76]	; (8009fc4 <msgActiveTransmiters+0x250>)
    case RM_MULTISLAVE_STEREO:
      data->ZkondPomA1 = msStSpkSet;
      data->konfig_ZG = 3;
      break;
    case RM_MULTISLAVE:
      data->konfig_ZG = isHD()?2:1;
 8009f76:	7623      	strb	r3, [r4, #24]
 8009f78:	4633      	mov	r3, r6
      for(p = PER1_PORT; p < PORTS_NUM; p+=2)
        {
          switch(msPipeNum[p])
 8009f7a:	194a      	adds	r2, r1, r5
 8009f7c:	6852      	ldr	r2, [r2, #4]
 8009f7e:	b112      	cbz	r2, 8009f86 <msgActiveTransmiters+0x212>
 8009f80:	2a01      	cmp	r2, #1
 8009f82:	d00a      	beq.n	8009f9a <msgActiveTransmiters+0x226>
 8009f84:	e012      	b.n	8009fac <msgActiveTransmiters+0x238>
            {
            case 0:
            {
              if(data->ZkondPomA1 == 0) data->ZkondPomA1 = portData[p].kond_pom;
 8009f86:	7da2      	ldrb	r2, [r4, #22]
 8009f88:	b91a      	cbnz	r2, 8009f92 <msgActiveTransmiters+0x21e>
 8009f8a:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8009f8e:	75a2      	strb	r2, [r4, #22]
 8009f90:	e00c      	b.n	8009fac <msgActiveTransmiters+0x238>
              else                      data->ZkondPomA2 = portData[p].kond_pom;
 8009f92:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8009f96:	75e2      	strb	r2, [r4, #23]
 8009f98:	e008      	b.n	8009fac <msgActiveTransmiters+0x238>
            }
            break;
            case 1:
            {
              if(data->ZkondPomB1 == 0) data->ZkondPomB1 = portData[p].kond_pom;
 8009f9a:	7e62      	ldrb	r2, [r4, #25]
 8009f9c:	b91a      	cbnz	r2, 8009fa6 <msgActiveTransmiters+0x232>
 8009f9e:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8009fa2:	7662      	strb	r2, [r4, #25]
 8009fa4:	e002      	b.n	8009fac <msgActiveTransmiters+0x238>
              else                      data->ZkondPomB2 = portData[p].kond_pom;
 8009fa6:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8009faa:	76a2      	strb	r2, [r4, #26]
 8009fac:	3508      	adds	r5, #8
      data->ZkondPomA1 = msStSpkSet;
      data->konfig_ZG = 3;
      break;
    case RM_MULTISLAVE:
      data->konfig_ZG = isHD()?2:1;
      for(p = PER1_PORT; p < PORTS_NUM; p+=2)
 8009fae:	2d20      	cmp	r5, #32
 8009fb0:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8009fb4:	d1e1      	bne.n	8009f7a <msgActiveTransmiters+0x206>
 8009fb6:	e000      	b.n	8009fba <msgActiveTransmiters+0x246>
            break;
            }
        }
      break;
    default:
      data->konfig_ZG = 0;
 8009fb8:	7625      	strb	r5, [r4, #24]
    sendKANow(p);

  //Fill
  fillMsgActiveTransmiters(data);
  return CB_RET_ACK;
}
 8009fba:	2001      	movs	r0, #1
 8009fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fc0:	100024f4 	.word	0x100024f4
 8009fc4:	10002bb8 	.word	0x10002bb8
 8009fc8:	0801d487 	.word	0x0801d487
 8009fcc:	10001208 	.word	0x10001208
 8009fd0:	10001000 	.word	0x10001000
 8009fd4:	10002b30 	.word	0x10002b30
 8009fd8:	10002038 	.word	0x10002038

08009fdc <sendNetworkStatus>:
  sendBroadcast(bBuffer, data->kondPom, offsetof(msg_A0_t, guiTp));
  bFree(bBuffer);

  sendNetworkStatusB0(portNum);
  return 0;
}
 8009fdc:	2000      	movs	r0, #0
 8009fde:	4770      	bx	lr

08009fe0 <Timeout_Data>:

void Timeout_Data(portNum_t portNum, char *buffer, int bufferSize)
{
 8009fe0:	4770      	bx	lr
	...

08009fe4 <sendKA>:
  1000+600,
  1000+700,
  1000+800,
};
void sendKA(portNum_t sendPort)
{
 8009fe4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe8:	4606      	mov	r6, r0
  bBuffer_t *buf = bAlloc(MSG_LEN);
 8009fea:	2020      	movs	r0, #32
 8009fec:	f00a ffc6 	bl	8014f7c <bAlloc>
  massert(buf);
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	b368      	cbz	r0, 800a050 <sendKA+0x6c>
  int spkNum = (sendPort - PER1_PORT)>>1;
  int pipeNum = getPipeNum(portData[sendPort].kond_pom);
 8009ff4:	4f4b      	ldr	r7, [pc, #300]	; (800a124 <sendKA+0x140>)
 8009ff6:	2550      	movs	r5, #80	; 0x50
 8009ff8:	fb05 7506 	mla	r5, r5, r6, r7

  buf->size = sizeof(msg_55_t);
 8009ffc:	46a0      	mov	r8, r4
void sendKA(portNum_t sendPort)
{
  bBuffer_t *buf = bAlloc(MSG_LEN);
  massert(buf);
  int spkNum = (sendPort - PER1_PORT)>>1;
  int pipeNum = getPipeNum(portData[sendPort].kond_pom);
 8009ffe:	7e68      	ldrb	r0, [r5, #25]
 800a000:	f00b fef6 	bl	8015df0 <getPipeNum>

  buf->size = sizeof(msg_55_t);
 800a004:	220f      	movs	r2, #15
 800a006:	f828 2b14 	strh.w	r2, [r8], #20
  msg_55_t *msg = (void *)buf->data;
  memset(msg, 0, sizeof(msg_55_t));
 800a00a:	2100      	movs	r1, #0
void sendKA(portNum_t sendPort)
{
  bBuffer_t *buf = bAlloc(MSG_LEN);
  massert(buf);
  int spkNum = (sendPort - PER1_PORT)>>1;
  int pipeNum = getPipeNum(portData[sendPort].kond_pom);
 800a00c:	4681      	mov	r9, r0

  buf->size = sizeof(msg_55_t);
  msg_55_t *msg = (void *)buf->data;
  memset(msg, 0, sizeof(msg_55_t));
 800a00e:	4640      	mov	r0, r8
 800a010:	f013 f8b0 	bl	801d174 <memset>
  msg->kod = 0x55;
 800a014:	2355      	movs	r3, #85	; 0x55
 800a016:	7523      	strb	r3, [r4, #20]

  uint32_t upTime = xTaskGetTickCount();
 800a018:	f000 fc80 	bl	800a91c <xTaskGetTickCount>
  uint8_t *upTime8 = (uint8_t*) &upTime;
  msg->uptime3 = upTime8[3];
 800a01c:	0e03      	lsrs	r3, r0, #24
 800a01e:	7623      	strb	r3, [r4, #24]
  msg->uptime2 = upTime8[2];
 800a020:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a024:	7663      	strb	r3, [r4, #25]
  msg->uptime1 = upTime8[1];
 800a026:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a02a:	76a3      	strb	r3, [r4, #26]
  msg->uptime0 = upTime8[0];
 800a02c:	76e0      	strb	r0, [r4, #27]

  msg->kondPom = portData[sendPort].kond_pom;
 800a02e:	7e6b      	ldrb	r3, [r5, #25]
 800a030:	7563      	strb	r3, [r4, #21]
  if(portData[sendPort].connState == DEV_CONN || portData[sendPort].connState == DEV_UCONN)
 800a032:	f895 3020 	ldrb.w	r3, [r5, #32]
  buf->size = sizeof(msg_55_t);
  msg_55_t *msg = (void *)buf->data;
  memset(msg, 0, sizeof(msg_55_t));
  msg->kod = 0x55;

  uint32_t upTime = xTaskGetTickCount();
 800a036:	9001      	str	r0, [sp, #4]
  msg->uptime2 = upTime8[2];
  msg->uptime1 = upTime8[1];
  msg->uptime0 = upTime8[0];

  msg->kondPom = portData[sendPort].kond_pom;
  if(portData[sendPort].connState == DEV_CONN || portData[sendPort].connState == DEV_UCONN)
 800a038:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
};
void sendKA(portNum_t sendPort)
{
  bBuffer_t *buf = bAlloc(MSG_LEN);
  massert(buf);
  int spkNum = (sendPort - PER1_PORT)>>1;
 800a03c:	f106 3aff 	add.w	sl, r6, #4294967295
  msg->uptime2 = upTime8[2];
  msg->uptime1 = upTime8[1];
  msg->uptime0 = upTime8[0];

  msg->kondPom = portData[sendPort].kond_pom;
  if(portData[sendPort].connState == DEV_CONN || portData[sendPort].connState == DEV_UCONN)
 800a040:	2b01      	cmp	r3, #1
};
void sendKA(portNum_t sendPort)
{
  bBuffer_t *buf = bAlloc(MSG_LEN);
  massert(buf);
  int spkNum = (sendPort - PER1_PORT)>>1;
 800a042:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 800a046:	7de3      	ldrb	r3, [r4, #23]
  msg->uptime2 = upTime8[2];
  msg->uptime1 = upTime8[1];
  msg->uptime0 = upTime8[0];

  msg->kondPom = portData[sendPort].kond_pom;
  if(portData[sendPort].connState == DEV_CONN || portData[sendPort].connState == DEV_UCONN)
 800a048:	d10f      	bne.n	800a06a <sendKA+0x86>
    msg->flags55 |= FLAGS55_CONNECTION_ACTIVE;
 800a04a:	f043 0310 	orr.w	r3, r3, #16
 800a04e:	e00e      	b.n	800a06e <sendKA+0x8a>
  1000+800,
};
void sendKA(portNum_t sendPort)
{
  bBuffer_t *buf = bAlloc(MSG_LEN);
  massert(buf);
 800a050:	4b35      	ldr	r3, [pc, #212]	; (800a128 <sendKA+0x144>)
 800a052:	4936      	ldr	r1, [pc, #216]	; (800a12c <sendKA+0x148>)
 800a054:	4836      	ldr	r0, [pc, #216]	; (800a130 <sendKA+0x14c>)
 800a056:	f240 42d7 	movw	r2, #1239	; 0x4d7
 800a05a:	f7fe fde5 	bl	8008c28 <xprintf>
 800a05e:	2301      	movs	r3, #1
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	9b00      	ldr	r3, [sp, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1fc      	bne.n	800a062 <sendKA+0x7e>
 800a068:	e7c4      	b.n	8009ff4 <sendKA+0x10>

  msg->kondPom = portData[sendPort].kond_pom;
  if(portData[sendPort].connState == DEV_CONN || portData[sendPort].connState == DEV_UCONN)
    msg->flags55 |= FLAGS55_CONNECTION_ACTIVE;
  else
    msg->flags55 &= ~(FLAGS55_CONNECTION_ACTIVE);
 800a06a:	f023 0310 	bic.w	r3, r3, #16

  if(spkSet[spkNum].reqOn)
 800a06e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a072:	4d30      	ldr	r5, [pc, #192]	; (800a134 <sendKA+0x150>)

  msg->kondPom = portData[sendPort].kond_pom;
  if(portData[sendPort].connState == DEV_CONN || portData[sendPort].connState == DEV_UCONN)
    msg->flags55 |= FLAGS55_CONNECTION_ACTIVE;
  else
    msg->flags55 &= ~(FLAGS55_CONNECTION_ACTIVE);
 800a074:	75e3      	strb	r3, [r4, #23]

  if(spkSet[spkNum].reqOn)
 800a076:	ebca 0302 	rsb	r3, sl, r2
 800a07a:	442b      	add	r3, r5
    msg->flags55 |= FLAGS55_SMOK_ON;
  else
    msg->flags55 &= ~(FLAGS55_SMOK_ON);

  msg->cSharc     = spkSet[spkNum].cSharc;
 800a07c:	ebca 0a02 	rsb	sl, sl, r2
  if(portData[sendPort].connState == DEV_CONN || portData[sendPort].connState == DEV_UCONN)
    msg->flags55 |= FLAGS55_CONNECTION_ACTIVE;
  else
    msg->flags55 &= ~(FLAGS55_CONNECTION_ACTIVE);

  if(spkSet[spkNum].reqOn)
 800a080:	7a1b      	ldrb	r3, [r3, #8]
 800a082:	f013 0f01 	tst.w	r3, #1
 800a086:	7de3      	ldrb	r3, [r4, #23]
    msg->flags55 |= FLAGS55_SMOK_ON;
  else
    msg->flags55 &= ~(FLAGS55_SMOK_ON);

  msg->cSharc     = spkSet[spkNum].cSharc;
 800a088:	4455      	add	r5, sl
    msg->flags55 |= FLAGS55_CONNECTION_ACTIVE;
  else
    msg->flags55 &= ~(FLAGS55_CONNECTION_ACTIVE);

  if(spkSet[spkNum].reqOn)
    msg->flags55 |= FLAGS55_SMOK_ON;
 800a08a:	bf14      	ite	ne
 800a08c:	f043 0304 	orrne.w	r3, r3, #4
  else
    msg->flags55 &= ~(FLAGS55_SMOK_ON);
 800a090:	f023 0304 	biceq.w	r3, r3, #4
 800a094:	75e3      	strb	r3, [r4, #23]

  msg->cSharc     = spkSet[spkNum].cSharc;
 800a096:	79ab      	ldrb	r3, [r5, #6]
 800a098:	7723      	strb	r3, [r4, #28]
  msg->cPWM       = spkSet[spkNum].cPWM;
 800a09a:	79eb      	ldrb	r3, [r5, #7]
 800a09c:	7763      	strb	r3, [r4, #29]
  msg->signalType = spkSet[spkNum].signalType = getOutputType(pipeNum);
 800a09e:	4648      	mov	r0, r9
 800a0a0:	f00b fe34 	bl	8015d0c <getOutputType>
 800a0a4:	b2c0      	uxtb	r0, r0
 800a0a6:	7268      	strb	r0, [r5, #9]
 800a0a8:	77a0      	strb	r0, [r4, #30]
  msg->outputType = spkSet[spkNum].outputType = getOutputMode(pipeNum);
 800a0aa:	4648      	mov	r0, r9
 800a0ac:	f00b fe44 	bl	8015d38 <getOutputMode>
  msg->volume     = spkSet[spkNum].volume[portData[sendPort].urzadzenie-1];
 800a0b0:	2350      	movs	r3, #80	; 0x50
    msg->flags55 &= ~(FLAGS55_SMOK_ON);

  msg->cSharc     = spkSet[spkNum].cSharc;
  msg->cPWM       = spkSet[spkNum].cPWM;
  msg->signalType = spkSet[spkNum].signalType = getOutputType(pipeNum);
  msg->outputType = spkSet[spkNum].outputType = getOutputMode(pipeNum);
 800a0b2:	b2c0      	uxtb	r0, r0
  msg->volume     = spkSet[spkNum].volume[portData[sendPort].urzadzenie-1];
 800a0b4:	fb03 7306 	mla	r3, r3, r6, r7
    msg->flags55 &= ~(FLAGS55_SMOK_ON);

  msg->cSharc     = spkSet[spkNum].cSharc;
  msg->cPWM       = spkSet[spkNum].cPWM;
  msg->signalType = spkSet[spkNum].signalType = getOutputType(pipeNum);
  msg->outputType = spkSet[spkNum].outputType = getOutputMode(pipeNum);
 800a0b8:	77e0      	strb	r0, [r4, #31]
  msg->volume     = spkSet[spkNum].volume[portData[sendPort].urzadzenie-1];
 800a0ba:	7e9a      	ldrb	r2, [r3, #26]
    msg->flags55 &= ~(FLAGS55_SMOK_ON);

  msg->cSharc     = spkSet[spkNum].cSharc;
  msg->cPWM       = spkSet[spkNum].cPWM;
  msg->signalType = spkSet[spkNum].signalType = getOutputType(pipeNum);
  msg->outputType = spkSet[spkNum].outputType = getOutputMode(pipeNum);
 800a0bc:	72a8      	strb	r0, [r5, #10]
  msg->volume     = spkSet[spkNum].volume[portData[sendPort].urzadzenie-1];
 800a0be:	4415      	add	r5, r2
 800a0c0:	78ea      	ldrb	r2, [r5, #3]
 800a0c2:	f884 2020 	strb.w	r2, [r4, #32]

  if(portData[sendPort].kond_pom)
 800a0c6:	7e58      	ldrb	r0, [r3, #25]
 800a0c8:	b1d8      	cbz	r0, 800a102 <sendKA+0x11e>
    {
      if(portData[sendPort].reqPipe >= 0)
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	db01      	blt.n	800a0d4 <sendKA+0xf0>
        msg->pipeNum = portData[sendPort].reqPipe;
 800a0d0:	75a3      	strb	r3, [r4, #22]
 800a0d2:	e002      	b.n	800a0da <sendKA+0xf6>
      else
        msg->pipeNum = getPipeNum(portData[sendPort].kond_pom);
 800a0d4:	f00b fe8c 	bl	8015df0 <getPipeNum>
 800a0d8:	75a0      	strb	r0, [r4, #22]

      if(twoOutputs) msg->flags55 |= FLAGS55_IS_TWO_OUTPUS;
 800a0da:	4b17      	ldr	r3, [pc, #92]	; (800a138 <sendKA+0x154>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	b11b      	cbz	r3, 800a0e8 <sendKA+0x104>
 800a0e0:	7de3      	ldrb	r3, [r4, #23]
 800a0e2:	f043 0301 	orr.w	r3, r3, #1
 800a0e6:	75e3      	strb	r3, [r4, #23]
      if(stereoSpkSet == portData[sendPort].kond_pom) msg->flags55 |= FLAGS55_AM_I_STEREO;
 800a0e8:	2350      	movs	r3, #80	; 0x50
 800a0ea:	fb03 7306 	mla	r3, r3, r6, r7
 800a0ee:	7e5a      	ldrb	r2, [r3, #25]
 800a0f0:	4b12      	ldr	r3, [pc, #72]	; (800a13c <sendKA+0x158>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d106      	bne.n	800a106 <sendKA+0x122>
 800a0f8:	7de3      	ldrb	r3, [r4, #23]
 800a0fa:	f043 0302 	orr.w	r3, r3, #2
 800a0fe:	75e3      	strb	r3, [r4, #23]
 800a100:	e001      	b.n	800a106 <sendKA+0x122>
    }
  else
    msg->pipeNum = 0xFF;
 800a102:	23ff      	movs	r3, #255	; 0xff
 800a104:	75a3      	strb	r3, [r4, #22]

  msg->urzadzenie = portData[sendPort].urzadzenie;
 800a106:	2350      	movs	r3, #80	; 0x50
 800a108:	fb03 7706 	mla	r7, r3, r6, r7
  messageTx(sendPort, (void *)buf->data, buf->size, (uint32_t)buf);
 800a10c:	8822      	ldrh	r2, [r4, #0]
      if(stereoSpkSet == portData[sendPort].kond_pom) msg->flags55 |= FLAGS55_AM_I_STEREO;
    }
  else
    msg->pipeNum = 0xFF;

  msg->urzadzenie = portData[sendPort].urzadzenie;
 800a10e:	7ebb      	ldrb	r3, [r7, #26]
 800a110:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  messageTx(sendPort, (void *)buf->data, buf->size, (uint32_t)buf);
 800a114:	4641      	mov	r1, r8
 800a116:	4623      	mov	r3, r4
 800a118:	4630      	mov	r0, r6
 800a11a:	f001 fe71 	bl	800be00 <messageTx>
}
 800a11e:	b002      	add	sp, #8
 800a120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a124:	10002038 	.word	0x10002038
 800a128:	0801d5d9 	.word	0x0801d5d9
 800a12c:	0801d48c 	.word	0x0801d48c
 800a130:	0801d5dd 	.word	0x0801d5dd
 800a134:	10002b30 	.word	0x10002b30
 800a138:	10002da0 	.word	0x10002da0
 800a13c:	100024f8 	.word	0x100024f8

0800a140 <communicatorPeriodicPrivate>:

int tur = 0;
void communicatorPeriodicPrivate(void)
{
 800a140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a144:	4c6d      	ldr	r4, [pc, #436]	; (800a2fc <communicatorPeriodicPrivate+0x1bc>)
 800a146:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a308 <communicatorPeriodicPrivate+0x1c8>
  portNum_t sendPort;
  for (sendPort = PER1_PORT; sendPort < PORTS_NUM; sendPort++)
    if (kaNow[sendPort] || timestamp[sendPort] < xTaskGetTickCount())
      {
        sendKA(sendPort);
        timestamp[sendPort] = xTaskGetTickCount() + cfg.ka_period;
 800a14a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 800a304 <communicatorPeriodicPrivate+0x1c4>
  messageTx(sendPort, (void *)buf->data, buf->size, (uint32_t)buf);
}

int tur = 0;
void communicatorPeriodicPrivate(void)
{
 800a14e:	4625      	mov	r5, r4
 800a150:	2701      	movs	r7, #1
  
  portNum_t sendPort;
  for (sendPort = PER1_PORT; sendPort < PORTS_NUM; sendPort++)
    if (kaNow[sendPort] || timestamp[sendPort] < xTaskGetTickCount())
 800a152:	f858 3b04 	ldr.w	r3, [r8], #4
 800a156:	fa5f fb87 	uxtb.w	fp, r7
 800a15a:	00be      	lsls	r6, r7, #2
 800a15c:	b31b      	cbz	r3, 800a1a6 <communicatorPeriodicPrivate+0x66>
      {
        sendKA(sendPort);
 800a15e:	4658      	mov	r0, fp
 800a160:	f7ff ff40 	bl	8009fe4 <sendKA>
        timestamp[sendPort] = xTaskGetTickCount() + cfg.ka_period;
 800a164:	f000 fbda 	bl	800a91c <xTaskGetTickCount>
 800a168:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a16c:	4418      	add	r0, r3
 800a16e:	4b64      	ldr	r3, [pc, #400]	; (800a300 <communicatorPeriodicPrivate+0x1c0>)
 800a170:	4433      	add	r3, r6
 800a172:	6098      	str	r0, [r3, #8]
        timestamp[sendPort] /= cfg.ka_period;
 800a174:	f8da 1014 	ldr.w	r1, [sl, #20]
 800a178:	689a      	ldr	r2, [r3, #8]
 800a17a:	fbb2 f2f1 	udiv	r2, r2, r1
 800a17e:	609a      	str	r2, [r3, #8]
        timestamp[sendPort] *= cfg.ka_period;
 800a180:	f8da 1014 	ldr.w	r1, [sl, #20]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	434a      	muls	r2, r1
 800a188:	609a      	str	r2, [r3, #8]
        timestamp[sendPort] += 100*sendPort;
 800a18a:	689a      	ldr	r2, [r3, #8]
 800a18c:	2164      	movs	r1, #100	; 0x64
 800a18e:	fb01 2207 	mla	r2, r1, r7, r2
 800a192:	609a      	str	r2, [r3, #8]
        taskENTER_CRITICAL();
 800a194:	f000 f90a 	bl	800a3ac <vPortEnterCritical>
        if(kaNow[sendPort])
 800a198:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800a19c:	b163      	cbz	r3, 800a1b8 <communicatorPeriodicPrivate+0x78>
          kaNow[sendPort]--;
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	f848 3c04 	str.w	r3, [r8, #-4]
 800a1a4:	e008      	b.n	800a1b8 <communicatorPeriodicPrivate+0x78>
void communicatorPeriodicPrivate(void)
{
  
  portNum_t sendPort;
  for (sendPort = PER1_PORT; sendPort < PORTS_NUM; sendPort++)
    if (kaNow[sendPort] || timestamp[sendPort] < xTaskGetTickCount())
 800a1a6:	4b56      	ldr	r3, [pc, #344]	; (800a300 <communicatorPeriodicPrivate+0x1c0>)
 800a1a8:	4433      	add	r3, r6
 800a1aa:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800a1ae:	f000 fbb5 	bl	800a91c <xTaskGetTickCount>
 800a1b2:	4581      	cmp	r9, r0
 800a1b4:	d3d3      	bcc.n	800a15e <communicatorPeriodicPrivate+0x1e>
 800a1b6:	e051      	b.n	800a25c <communicatorPeriodicPrivate+0x11c>
        timestamp[sendPort] *= cfg.ka_period;
        timestamp[sendPort] += 100*sendPort;
        taskENTER_CRITICAL();
        if(kaNow[sendPort])
          kaNow[sendPort]--;
        taskEXIT_CRITICAL();
 800a1b8:	f000 f90a 	bl	800a3d0 <vPortExitCritical>
  COMM_TBL_SET(B1, 00, PER_GEN,            0,    0, msgStatusLong,        NULL),
};

static int sendNetworkStatusB0(portNum_t portNum)
{
  if(portData[portNum].kond_pom == 0)
 800a1bc:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d04b      	beq.n	800a25c <communicatorPeriodicPrivate+0x11c>
    return -2;

  uint8_t subMsgC = 0;
  uint8_t subMsgD = 0;
  switch(portData[portNum].connState)
 800a1c4:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d009      	beq.n	800a1e0 <communicatorPeriodicPrivate+0xa0>
 800a1cc:	d304      	bcc.n	800a1d8 <communicatorPeriodicPrivate+0x98>
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d144      	bne.n	800a25c <communicatorPeriodicPrivate+0x11c>
      break;
    case DEV_PCONN:
      //Main connection restored
      subMsgC = 0xC3;
      //datagram lost
      subMsgD = 0xD1;
 800a1d2:	f04f 0bd1 	mov.w	fp, #209	; 0xd1
 800a1d6:	e005      	b.n	800a1e4 <communicatorPeriodicPrivate+0xa4>
      break;
    case DEV_NCONN:
      //Main connection lost
      subMsgC = 0xC1;
      //datagram lost
      subMsgD = 0xD1;
 800a1d8:	f04f 0bd1 	mov.w	fp, #209	; 0xd1
      //datagram lost
      subMsgD = 0xD1;
      break;
    case DEV_NCONN:
      //Main connection lost
      subMsgC = 0xC1;
 800a1dc:	22c1      	movs	r2, #193	; 0xc1
 800a1de:	e002      	b.n	800a1e6 <communicatorPeriodicPrivate+0xa6>
    {
    case DEV_CONN:
      //Main connection restored
      subMsgC = 0xC3;
      //datagram restored
      subMsgD = 0xD3;
 800a1e0:	f04f 0bd3 	mov.w	fp, #211	; 0xd3
  uint8_t subMsgD = 0;
  switch(portData[portNum].connState)
    {
    case DEV_CONN:
      //Main connection restored
      subMsgC = 0xC3;
 800a1e4:	22c3      	movs	r2, #195	; 0xc3
      return -1;
    }

  {
    //Send B0 Cx
    bBuffer_t *bBuffer = bAlloc(MSG_LEN);
 800a1e6:	2020      	movs	r0, #32
 800a1e8:	9201      	str	r2, [sp, #4]
 800a1ea:	f00a fec7 	bl	8014f7c <bAlloc>
    bBuffer->size = sizeof(msg_B0_t);
 800a1ee:	2307      	movs	r3, #7
 800a1f0:	8003      	strh	r3, [r0, #0]
 800a1f2:	9300      	str	r3, [sp, #0]
    msg_B0_t *data = (void*)bBuffer->data;
    data->kod = 0xB0;
 800a1f4:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 800a1f8:	7503      	strb	r3, [r0, #20]
    data->kondPom = portData[portNum].kond_pom;
 800a1fa:	f895 1069 	ldrb.w	r1, [r5, #105]	; 0x69
 800a1fe:	7541      	strb	r1, [r0, #21]
    data->urzadzenie = portData[portNum].urzadzenie;
 800a200:	f895 e06a 	ldrb.w	lr, [r5, #106]	; 0x6a
    data->Smok_msgType = 0;
    data->Smok_msg1 = 0;
    data->Smok_msg2 = 0;
    data->Smok_msgType = subMsgC;
 800a204:	9a01      	ldr	r2, [sp, #4]
    bBuffer_t *bBuffer = bAlloc(MSG_LEN);
    bBuffer->size = sizeof(msg_B0_t);
    msg_B0_t *data = (void*)bBuffer->data;
    data->kod = 0xB0;
    data->kondPom = portData[portNum].kond_pom;
    data->urzadzenie = portData[portNum].urzadzenie;
 800a206:	f880 e016 	strb.w	lr, [r0, #22]
    data->Smok_msgType = 0;
    data->Smok_msg1 = 0;
 800a20a:	f04f 0900 	mov.w	r9, #0
      return -1;
    }

  {
    //Send B0 Cx
    bBuffer_t *bBuffer = bAlloc(MSG_LEN);
 800a20e:	4606      	mov	r6, r0
    data->kondPom = portData[portNum].kond_pom;
    data->urzadzenie = portData[portNum].urzadzenie;
    data->Smok_msgType = 0;
    data->Smok_msg1 = 0;
    data->Smok_msg2 = 0;
    data->Smok_msgType = subMsgC;
 800a210:	75c2      	strb	r2, [r0, #23]
    msg_B0_t *data = (void*)bBuffer->data;
    data->kod = 0xB0;
    data->kondPom = portData[portNum].kond_pom;
    data->urzadzenie = portData[portNum].urzadzenie;
    data->Smok_msgType = 0;
    data->Smok_msg1 = 0;
 800a212:	f880 9018 	strb.w	r9, [r0, #24]
    data->Smok_msg2 = 0;
    data->Smok_msgType = subMsgC;
    sendBroadcast(bBuffer, data->kondPom, offsetof(msg_B0_t, guiTp));
 800a216:	2206      	movs	r2, #6
    data->kod = 0xB0;
    data->kondPom = portData[portNum].kond_pom;
    data->urzadzenie = portData[portNum].urzadzenie;
    data->Smok_msgType = 0;
    data->Smok_msg1 = 0;
    data->Smok_msg2 = 0;
 800a218:	f880 9019 	strb.w	r9, [r0, #25]
    data->Smok_msgType = subMsgC;
    sendBroadcast(bBuffer, data->kondPom, offsetof(msg_B0_t, guiTp));
 800a21c:	f7ff f85a 	bl	80092d4 <sendBroadcast>
    bFree(bBuffer);
 800a220:	4630      	mov	r0, r6
 800a222:	f00b f905 	bl	8015430 <bFree>
  }
  {
    //Send B0 Dx
    bBuffer_t *bBuffer = bAlloc(MSG_LEN);
 800a226:	2020      	movs	r0, #32
 800a228:	f00a fea8 	bl	8014f7c <bAlloc>
    bBuffer->size = sizeof(msg_B0_t);
 800a22c:	9b00      	ldr	r3, [sp, #0]
 800a22e:	8003      	strh	r3, [r0, #0]
    msg_B0_t *data = (void*)bBuffer->data;
    data->kod = 0xB0;
 800a230:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 800a234:	7503      	strb	r3, [r0, #20]
    data->kondPom = portData[portNum].kond_pom;
 800a236:	f895 1069 	ldrb.w	r1, [r5, #105]	; 0x69
 800a23a:	7541      	strb	r1, [r0, #21]
    data->urzadzenie = portData[portNum].urzadzenie;
 800a23c:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
 800a240:	7583      	strb	r3, [r0, #22]
    sendBroadcast(bBuffer, data->kondPom, offsetof(msg_B0_t, guiTp));
    bFree(bBuffer);
  }
  {
    //Send B0 Dx
    bBuffer_t *bBuffer = bAlloc(MSG_LEN);
 800a242:	4606      	mov	r6, r0
    msg_B0_t *data = (void*)bBuffer->data;
    data->kod = 0xB0;
    data->kondPom = portData[portNum].kond_pom;
    data->urzadzenie = portData[portNum].urzadzenie;
    data->Smok_msgType = 0;
    data->Smok_msg1 = 0;
 800a244:	f880 9018 	strb.w	r9, [r0, #24]
    data->Smok_msg2 = 0;
 800a248:	f880 9019 	strb.w	r9, [r0, #25]
    data->Smok_msgType = subMsgD;
 800a24c:	f880 b017 	strb.w	fp, [r0, #23]
    sendBroadcast(bBuffer, data->kondPom, offsetof(msg_B0_t, guiTp));
 800a250:	2206      	movs	r2, #6
 800a252:	f7ff f83f 	bl	80092d4 <sendBroadcast>
    bFree(bBuffer);
 800a256:	4630      	mov	r0, r6
 800a258:	f00b f8ea 	bl	8015430 <bFree>
 800a25c:	3701      	adds	r7, #1
int tur = 0;
void communicatorPeriodicPrivate(void)
{
  
  portNum_t sendPort;
  for (sendPort = PER1_PORT; sendPort < PORTS_NUM; sendPort++)
 800a25e:	2f09      	cmp	r7, #9
 800a260:	f105 0550 	add.w	r5, r5, #80	; 0x50
 800a264:	f47f af75 	bne.w	800a152 <communicatorPeriodicPrivate+0x12>

  //Check link
  portNum_t portNum;
  for (portNum = PER1_PORT; portNum < PORTS_NUM; portNum++)
    {
      if (abs(portData[portNum].keepAlive - xTaskGetTickCount()) > cfg.ka_timeout)
 800a268:	4f26      	ldr	r7, [pc, #152]	; (800a304 <communicatorPeriodicPrivate+0x1c4>)
            {
              SPIevent(portNum, SPI_EV_TYPE_DLINK_ERROR);

              int spkNum = (portNum - PER1_PORT)>>1;
              //assume SMOK is off.
              spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].isOn = 0;
 800a26a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800a30c <communicatorPeriodicPrivate+0x1cc>
 800a26e:	2500      	movs	r5, #0

  //Check link
  portNum_t portNum;
  for (portNum = PER1_PORT; portNum < PORTS_NUM; portNum++)
    {
      if (abs(portData[portNum].keepAlive - xTaskGetTickCount()) > cfg.ka_timeout)
 800a270:	f8d4 a074 	ldr.w	sl, [r4, #116]	; 0x74
 800a274:	f000 fb52 	bl	800a91c <xTaskGetTickCount>
 800a278:	ebc0 000a 	rsb	r0, r0, sl
 800a27c:	1c6e      	adds	r6, r5, #1
 800a27e:	2800      	cmp	r0, #0
 800a280:	fa5f f986 	uxtb.w	r9, r6
 800a284:	f8d4 a074 	ldr.w	sl, [r4, #116]	; 0x74
 800a288:	da04      	bge.n	800a294 <communicatorPeriodicPrivate+0x154>
 800a28a:	f000 fb47 	bl	800a91c <xTaskGetTickCount>
 800a28e:	ebca 0000 	rsb	r0, sl, r0
 800a292:	e003      	b.n	800a29c <communicatorPeriodicPrivate+0x15c>
 800a294:	f000 fb42 	bl	800a91c <xTaskGetTickCount>
 800a298:	ebc0 000a 	rsb	r0, r0, sl
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	4298      	cmp	r0, r3
 800a2a0:	dd24      	ble.n	800a2ec <communicatorPeriodicPrivate+0x1ac>
        {
          portData[portNum].keepAlive = xTaskGetTickCount();
 800a2a2:	f000 fb3b 	bl	800a91c <xTaskGetTickCount>
          if(cfg.smok_mask & (1<<(portData[portNum].urzadzenie-1)))
 800a2a6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
  portNum_t portNum;
  for (portNum = PER1_PORT; portNum < PORTS_NUM; portNum++)
    {
      if (abs(portData[portNum].keepAlive - xTaskGetTickCount()) > cfg.ka_timeout)
        {
          portData[portNum].keepAlive = xTaskGetTickCount();
 800a2aa:	6760      	str	r0, [r4, #116]	; 0x74
          if(cfg.smok_mask & (1<<(portData[portNum].urzadzenie-1)))
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	fa42 f303 	asr.w	r3, r2, r3
 800a2b4:	07db      	lsls	r3, r3, #31
 800a2b6:	d519      	bpl.n	800a2ec <communicatorPeriodicPrivate+0x1ac>
            {
              SPIevent(portNum, SPI_EV_TYPE_DLINK_ERROR);
 800a2b8:	2102      	movs	r1, #2
 800a2ba:	4648      	mov	r0, r9
 800a2bc:	f001 ff70 	bl	800c1a0 <SPIevent>

              int spkNum = (portNum - PER1_PORT)>>1;
              //assume SMOK is off.
              spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].isOn = 0;
 800a2c0:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 800a2c4:	3a01      	subs	r2, #1
 800a2c6:	106b      	asrs	r3, r5, #1
 800a2c8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800a2cc:	250e      	movs	r5, #14
 800a2ce:	fb05 2503 	mla	r5, r5, r3, r2
 800a2d2:	4445      	add	r5, r8
 800a2d4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800a2d8:	f36f 0341 	bfc	r3, #1, #1
 800a2dc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  return CB_RET_nACK;
}

static void syncSMOKState(portNum_t portNum)
{
  if(!onOffPending)
 800a2e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a2e4:	b913      	cbnz	r3, 800a2ec <communicatorPeriodicPrivate+0x1ac>
 800a2e6:	4648      	mov	r0, r9
 800a2e8:	f7ff f9a0 	bl	800962c <syncSMOKState.part.1>
        sendNetworkStatusB0(sendPort);
      }

  //Check link
  portNum_t portNum;
  for (portNum = PER1_PORT; portNum < PORTS_NUM; portNum++)
 800a2ec:	2e08      	cmp	r6, #8
 800a2ee:	4635      	mov	r5, r6
 800a2f0:	f104 0450 	add.w	r4, r4, #80	; 0x50
 800a2f4:	d1bc      	bne.n	800a270 <communicatorPeriodicPrivate+0x130>
              spkSetSMOKs[spkNum][portData[portNum].urzadzenie-1].isOn = 0;
              syncSMOKState(portNum);
            }
        }
    }
}
 800a2f6:	b003      	add	sp, #12
 800a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fc:	10002038 	.word	0x10002038
 800a300:	10001208 	.word	0x10001208
 800a304:	10001000 	.word	0x10001000
 800a308:	10002b98 	.word	0x10002b98
 800a30c:	10002b30 	.word	0x10002b30

0800a310 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a310:	4803      	ldr	r0, [pc, #12]	; (800a320 <prvPortStartFirstTask+0x10>)
 800a312:	6800      	ldr	r0, [r0, #0]
 800a314:	6800      	ldr	r0, [r0, #0]
 800a316:	f380 8808 	msr	MSP, r0
 800a31a:	b662      	cpsie	i
 800a31c:	df00      	svc	0
 800a31e:	bf00      	nop
 800a320:	e000ed08 	.word	0xe000ed08

0800a324 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 800a328:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 800a32c:	4b03      	ldr	r3, [pc, #12]	; (800a33c <pxPortInitialiseStack+0x18>)
 800a32e:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 800a332:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 800a336:	3840      	subs	r0, #64	; 0x40
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	0800a389 	.word	0x0800a389

0800a340 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a340:	4b06      	ldr	r3, [pc, #24]	; (800a35c <pxCurrentTCBConst2>)
 800a342:	6819      	ldr	r1, [r3, #0]
 800a344:	6808      	ldr	r0, [r1, #0]
 800a346:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a34a:	f380 8809 	msr	PSP, r0
 800a34e:	f04f 0000 	mov.w	r0, #0
 800a352:	f380 8811 	msr	BASEPRI, r0
 800a356:	f04e 0e0d 	orr.w	lr, lr, #13
 800a35a:	4770      	bx	lr

0800a35c <pxCurrentTCBConst2>:
 800a35c:	10002c5c 	.word	0x10002c5c

0800a360 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a360:	4b04      	ldr	r3, [pc, #16]	; (800a374 <vPortYield+0x14>)
 800a362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a366:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 800a368:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	e000ed04 	.word	0xe000ed04

0800a378 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 800a378:	f3ef 8011 	mrs	r0, BASEPRI
 800a37c:	f04f 01bf 	mov.w	r1, #191	; 0xbf
 800a380:	f381 8811 	msr	BASEPRI, r1
 800a384:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 800a386:	2000      	movs	r0, #0

0800a388 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a388:	b507      	push	{r0, r1, r2, lr}
	its caller as there is nothing to return to.  If a task wants to exit it 
	should instead call vTaskDelete( NULL ).
	
	Artificially force an assert() to be triggered if configASSERT() is 
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a38a:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <prvTaskExitError+0x20>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3301      	adds	r3, #1
 800a390:	d102      	bne.n	800a398 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();	
 800a392:	f7ff fff1 	bl	800a378 <ulPortSetInterruptMask>
 800a396:	e005      	b.n	800a3a4 <prvTaskExitError+0x1c>
	its caller as there is nothing to return to.  If a task wants to exit it 
	should instead call vTaskDelete( NULL ).
	
	Artificially force an assert() to be triggered if configASSERT() is 
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a398:	2301      	movs	r3, #1
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	9b01      	ldr	r3, [sp, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1fc      	bne.n	800a39c <prvTaskExitError+0x14>
 800a3a2:	e7f6      	b.n	800a392 <prvTaskExitError+0xa>
 800a3a4:	e7fe      	b.n	800a3a4 <prvTaskExitError+0x1c>
 800a3a6:	bf00      	nop
 800a3a8:	10001ecc 	.word	0x10001ecc

0800a3ac <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3ac:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
 800a3ae:	f7ff ffe3 	bl	800a378 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 800a3b2:	4a04      	ldr	r2, [pc, #16]	; (800a3c4 <vPortEnterCritical+0x18>)
 800a3b4:	6813      	ldr	r3, [r2, #0]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800a3ba:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	bd08      	pop	{r3, pc}
 800a3c4:	10001ecc 	.word	0x10001ecc

0800a3c8 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 800a3c8:	f380 8811 	msr	BASEPRI, r0
 800a3cc:	4770      	bx	lr
	...

0800a3d0 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	uxCriticalNesting--;
 800a3d0:	4b03      	ldr	r3, [pc, #12]	; (800a3e0 <vPortExitCritical+0x10>)
 800a3d2:	6818      	ldr	r0, [r3, #0]
 800a3d4:	3801      	subs	r0, #1
 800a3d6:	6018      	str	r0, [r3, #0]
	if( uxCriticalNesting == 0 )
 800a3d8:	b908      	cbnz	r0, 800a3de <vPortExitCritical+0xe>
	{
		portENABLE_INTERRUPTS();
 800a3da:	f7ff bff5 	b.w	800a3c8 <vPortClearInterruptMask>
 800a3de:	4770      	bx	lr
 800a3e0:	10001ecc 	.word	0x10001ecc

0800a3e4 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3e4:	f3ef 8009 	mrs	r0, PSP
 800a3e8:	4b0c      	ldr	r3, [pc, #48]	; (800a41c <pxCurrentTCBConst>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a3f0:	6010      	str	r0, [r2, #0]
 800a3f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a3f6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800a3fa:	f380 8811 	msr	BASEPRI, r0
 800a3fe:	f000 fb9d 	bl	800ab3c <vTaskSwitchContext>
 800a402:	f04f 0000 	mov.w	r0, #0
 800a406:	f380 8811 	msr	BASEPRI, r0
 800a40a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a40e:	6819      	ldr	r1, [r3, #0]
 800a410:	6808      	ldr	r0, [r1, #0]
 800a412:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a416:	f380 8809 	msr	PSP, r0
 800a41a:	4770      	bx	lr

0800a41c <pxCurrentTCBConst>:
 800a41c:	10002c5c 	.word	0x10002c5c

0800a420 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a420:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 800a422:	f7ff ffa9 	bl	800a378 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a426:	f000 fa85 	bl	800a934 <xTaskIncrementTick>
 800a42a:	b118      	cbz	r0, 800a434 <xPortSysTickHandler+0x14>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a42c:	4b04      	ldr	r3, [pc, #16]	; (800a440 <xPortSysTickHandler+0x20>)
 800a42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a432:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 800a434:	2000      	movs	r0, #0
}
 800a436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 800a43a:	f7ff bfc5 	b.w	800a3c8 <vPortClearInterruptMask>
 800a43e:	bf00      	nop
 800a440:	e000ed04 	.word	0xe000ed04

0800a444 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 800a444:	4b06      	ldr	r3, [pc, #24]	; (800a460 <vPortSetupTimerInterrupt+0x1c>)
 800a446:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a450:	4a04      	ldr	r2, [pc, #16]	; (800a464 <vPortSetupTimerInterrupt+0x20>)
 800a452:	3b01      	subs	r3, #1
 800a454:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800a456:	4b04      	ldr	r3, [pc, #16]	; (800a468 <vPortSetupTimerInterrupt+0x24>)
 800a458:	2207      	movs	r2, #7
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	1000237c 	.word	0x1000237c
 800a464:	e000e014 	.word	0xe000e014
 800a468:	e000e010 	.word	0xe000e010

0800a46c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 800a46c:	b513      	push	{r0, r1, r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 800a46e:	4b1f      	ldr	r3, [pc, #124]	; (800a4ec <xPortStartScheduler+0x80>)
 800a470:	781a      	ldrb	r2, [r3, #0]
 800a472:	b2d2      	uxtb	r2, r2
 800a474:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a476:	22ff      	movs	r2, #255	; 0xff
 800a478:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a482:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a486:	4b1a      	ldr	r3, [pc, #104]	; (800a4f0 <xPortStartScheduler+0x84>)
 800a488:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 800a48c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a48e:	2207      	movs	r2, #7
 800a490:	605a      	str	r2, [r3, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a492:	2100      	movs	r1, #0
 800a494:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800a498:	0600      	lsls	r0, r0, #24
 800a49a:	f102 34ff 	add.w	r4, r2, #4294967295
 800a49e:	d508      	bpl.n	800a4b2 <xPortStartScheduler+0x46>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 800a4a0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a4a4:	0052      	lsls	r2, r2, #1
 800a4a6:	b2d2      	uxtb	r2, r2
 800a4a8:	f88d 2003 	strb.w	r2, [sp, #3]
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	4622      	mov	r2, r4
 800a4b0:	e7f0      	b.n	800a494 <xPortStartScheduler+0x28>
 800a4b2:	b101      	cbz	r1, 800a4b6 <xPortStartScheduler+0x4a>
 800a4b4:	605a      	str	r2, [r3, #4]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	0212      	lsls	r2, r2, #8
 800a4ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800a4be:	605a      	str	r2, [r3, #4]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 800a4c0:	9b01      	ldr	r3, [sp, #4]
 800a4c2:	4a0a      	ldr	r2, [pc, #40]	; (800a4ec <xPortStartScheduler+0x80>)
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4c8:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <xPortStartScheduler+0x88>)
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 800a4d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 800a4d8:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4da:	f7ff ffb3 	bl	800a444 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4de:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <xPortStartScheduler+0x8c>)
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	6018      	str	r0, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4e4:	f7ff ff14 	bl	800a310 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
}
 800a4e8:	b002      	add	sp, #8
 800a4ea:	bd10      	pop	{r4, pc}
 800a4ec:	e000e400 	.word	0xe000e400
 800a4f0:	10002be0 	.word	0x10002be0
 800a4f4:	e000ed20 	.word	0xe000ed20
 800a4f8:	10001ecc 	.word	0x10001ecc

0800a4fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4fc:	b082      	sub	sp, #8
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800a4fe:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a502:	2b0f      	cmp	r3, #15
 800a504:	4a0d      	ldr	r2, [pc, #52]	; (800a53c <vPortValidateInterruptPriority+0x40>)
 800a506:	d809      	bhi.n	800a51c <vPortValidateInterruptPriority+0x20>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a508:	4b0d      	ldr	r3, [pc, #52]	; (800a540 <vPortValidateInterruptPriority+0x44>)
 800a50a:	6852      	ldr	r2, [r2, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a512:	4293      	cmp	r3, r2
 800a514:	d910      	bls.n	800a538 <vPortValidateInterruptPriority+0x3c>
 800a516:	2301      	movs	r3, #1
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	e00a      	b.n	800a532 <vPortValidateInterruptPriority+0x36>

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a51c:	4909      	ldr	r1, [pc, #36]	; (800a544 <vPortValidateInterruptPriority+0x48>)
 800a51e:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a520:	7811      	ldrb	r1, [r2, #0]
 800a522:	4299      	cmp	r1, r3
 800a524:	d9f0      	bls.n	800a508 <vPortValidateInterruptPriority+0xc>
 800a526:	2301      	movs	r3, #1
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	9b00      	ldr	r3, [sp, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d1fc      	bne.n	800a52a <vPortValidateInterruptPriority+0x2e>
 800a530:	e7ea      	b.n	800a508 <vPortValidateInterruptPriority+0xc>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a532:	9b01      	ldr	r3, [sp, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1fc      	bne.n	800a532 <vPortValidateInterruptPriority+0x36>
	}
 800a538:	b002      	add	sp, #8
 800a53a:	4770      	bx	lr
 800a53c:	10002be0 	.word	0x10002be0
 800a540:	e000ed0c 	.word	0xe000ed0c
 800a544:	e000e3f0 	.word	0xe000e3f0

0800a548 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a548:	4b10      	ldr	r3, [pc, #64]	; (800a58c <prvInsertBlockIntoFreeList+0x44>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
 800a54a:	b530      	push	{r4, r5, lr}
 800a54c:	461c      	mov	r4, r3
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	4282      	cmp	r2, r0
 800a552:	d201      	bcs.n	800a558 <prvInsertBlockIntoFreeList+0x10>
 800a554:	4613      	mov	r3, r2
 800a556:	e7fa      	b.n	800a54e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
 800a558:	6859      	ldr	r1, [r3, #4]
 800a55a:	185d      	adds	r5, r3, r1
 800a55c:	42a8      	cmp	r0, r5
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a55e:	bf01      	itttt	eq
 800a560:	6840      	ldreq	r0, [r0, #4]
 800a562:	1809      	addeq	r1, r1, r0
 800a564:	4618      	moveq	r0, r3
 800a566:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 800a568:	6841      	ldr	r1, [r0, #4]
 800a56a:	1845      	adds	r5, r0, r1
 800a56c:	42aa      	cmp	r2, r5
 800a56e:	d107      	bne.n	800a580 <prvInsertBlockIntoFreeList+0x38>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a570:	68a4      	ldr	r4, [r4, #8]
 800a572:	42a2      	cmp	r2, r4
 800a574:	d004      	beq.n	800a580 <prvInsertBlockIntoFreeList+0x38>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a576:	6852      	ldr	r2, [r2, #4]
 800a578:	4411      	add	r1, r2
 800a57a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
 800a580:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a582:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a584:	bf18      	it	ne
 800a586:	6018      	strne	r0, [r3, #0]
 800a588:	bd30      	pop	{r4, r5, pc}
 800a58a:	bf00      	nop
 800a58c:	10002be8 	.word	0x10002be8

0800a590 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a594:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800a596:	f000 f9b7 	bl	800a908 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a59a:	492f      	ldr	r1, [pc, #188]	; (800a658 <pvPortMalloc+0xc8>)
 800a59c:	688b      	ldr	r3, [r1, #8]
 800a59e:	b9bb      	cbnz	r3, 800a5d0 <pvPortMalloc+0x40>
{
xBlockLink *pxFirstFreeBlock;
unsigned char *pucHeapEnd, *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 800a5a0:	4a2e      	ldr	r2, [pc, #184]	; (800a65c <pvPortMalloc+0xcc>)
 800a5a2:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = pucAlignedHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
 800a5a6:	f502 35bf 	add.w	r5, r2, #97792	; 0x17e00
	pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 800a5aa:	e881 000c 	stmia.w	r1, {r2, r3}
	at the end of the heap space. */
	pucHeapEnd = pucAlignedHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
 800a5ae:	f8c5 31f4 	str.w	r3, [r5, #500]	; 0x1f4
	pxEnd->pxNextFreeBlock = NULL;
 800a5b2:	f8c5 31f0 	str.w	r3, [r5, #496]	; 0x1f0

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
 800a5b6:	4b2a      	ldr	r3, [pc, #168]	; (800a660 <pvPortMalloc+0xd0>)
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = pucAlignedHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
 800a5b8:	f505 70f8 	add.w	r0, r5, #496	; 0x1f0

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5bc:	e882 0009 	stmia.w	r2, {r0, r3}

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 800a5c0:	4a28      	ldr	r2, [pc, #160]	; (800a664 <pvPortMalloc+0xd4>)

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = pucAlignedHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
 800a5c2:	6088      	str	r0, [r1, #8]
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 800a5c4:	6813      	ldr	r3, [r2, #0]
 800a5c6:	3b08      	subs	r3, #8
 800a5c8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5ce:	60cb      	str	r3, [r1, #12]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the xBlockLink structure 
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5d0:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800a5d4:	ea18 0f04 	tst.w	r8, r4
 800a5d8:	d135      	bne.n	800a646 <pvPortMalloc+0xb6>
		{
			/* The wanted size is increased so it can contain a xBlockLink
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5da:	2c00      	cmp	r4, #0
 800a5dc:	d034      	beq.n	800a648 <pvPortMalloc+0xb8>
			{
				xWantedSize += heapSTRUCT_SIZE;
 800a5de:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number 
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5e2:	075a      	lsls	r2, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5e4:	bf1c      	itt	ne
 800a5e6:	f023 0307 	bicne.w	r3, r3, #7
 800a5ea:	3308      	addne	r3, #8
				}
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5ec:	b34b      	cbz	r3, 800a642 <pvPortMalloc+0xb2>
 800a5ee:	4e1d      	ldr	r6, [pc, #116]	; (800a664 <pvPortMalloc+0xd4>)
 800a5f0:	6837      	ldr	r7, [r6, #0]
 800a5f2:	42bb      	cmp	r3, r7
 800a5f4:	d827      	bhi.n	800a646 <pvPortMalloc+0xb6>
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800a5f6:	680d      	ldr	r5, [r1, #0]

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5f8:	4a17      	ldr	r2, [pc, #92]	; (800a658 <pvPortMalloc+0xc8>)
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5fa:	6868      	ldr	r0, [r5, #4]
 800a5fc:	4283      	cmp	r3, r0
 800a5fe:	d803      	bhi.n	800a608 <pvPortMalloc+0x78>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size 
				was	not found. */
				if( pxBlock != pxEnd )
 800a600:	6889      	ldr	r1, [r1, #8]
 800a602:	428d      	cmp	r5, r1
 800a604:	d106      	bne.n	800a614 <pvPortMalloc+0x84>
 800a606:	e01e      	b.n	800a646 <pvPortMalloc+0xb6>
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a608:	6828      	ldr	r0, [r5, #0]
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d0f8      	beq.n	800a600 <pvPortMalloc+0x70>
 800a60e:	462a      	mov	r2, r5
 800a610:	4605      	mov	r5, r0
 800a612:	e7f2      	b.n	800a5fa <pvPortMalloc+0x6a>
					xBlockLink structure at its start. */
					pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );

					/* This block is being returned for use so must be taken out 
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a614:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the 
					xBlockLink structure at its start. */
					pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800a616:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out 
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a618:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into 
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a61a:	686a      	ldr	r2, [r5, #4]
 800a61c:	1ad2      	subs	r2, r2, r3
 800a61e:	2a10      	cmp	r2, #16
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the 
					xBlockLink structure at its start. */
					pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800a620:	f104 0408 	add.w	r4, r4, #8
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into 
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a624:	d904      	bls.n	800a630 <pvPortMalloc+0xa0>
					{
						/* This block is to be split into two.  Create a new 
						block following the number of bytes requested. The void 
						cast is used to prevent byte alignment warnings from the 
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 800a626:	18e8      	adds	r0, r5, r3

						/* Calculate the sizes of two blocks split from the 
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a628:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a62a:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800a62c:	f7ff ff8c 	bl	800a548 <prvInsertBlockIntoFreeList>
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a630:	686b      	ldr	r3, [r5, #4]
 800a632:	1aff      	subs	r7, r7, r3

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a634:	ea48 0303 	orr.w	r3, r8, r3
 800a638:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a63a:	2300      	movs	r3, #0

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a63c:	6037      	str	r7, [r6, #0]

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 800a63e:	602b      	str	r3, [r5, #0]
 800a640:	e002      	b.n	800a648 <pvPortMalloc+0xb8>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a642:	461c      	mov	r4, r3
 800a644:	e000      	b.n	800a648 <pvPortMalloc+0xb8>
 800a646:	2400      	movs	r4, #0
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	xTaskResumeAll();
 800a648:	f000 f9f6 	bl	800aa38 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a64c:	b90c      	cbnz	r4, 800a652 <pvPortMalloc+0xc2>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a64e:	f7fe f8f7 	bl	8008840 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
 800a652:	4620      	mov	r0, r4
 800a654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a658:	10002be8 	.word	0x10002be8
 800a65c:	20000008 	.word	0x20000008
 800a660:	00017ff0 	.word	0x00017ff0
 800a664:	10001ed0 	.word	0x10001ed0

0800a668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a668:	b513      	push	{r0, r1, r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
 800a66a:	4604      	mov	r4, r0
 800a66c:	b348      	cbz	r0, 800a6c2 <vPortFree+0x5a>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a66e:	4a16      	ldr	r2, [pc, #88]	; (800a6c8 <vPortFree+0x60>)
 800a670:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a674:	68d2      	ldr	r2, [r2, #12]
 800a676:	ea13 0102 	ands.w	r1, r3, r2
 800a67a:	d005      	beq.n	800a688 <vPortFree+0x20>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a67c:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800a680:	b160      	cbz	r0, 800a69c <vPortFree+0x34>
 800a682:	2301      	movs	r3, #1
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	e005      	b.n	800a694 <vPortFree+0x2c>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a688:	2001      	movs	r0, #1
 800a68a:	9000      	str	r0, [sp, #0]
 800a68c:	9800      	ldr	r0, [sp, #0]
 800a68e:	2800      	cmp	r0, #0
 800a690:	d1fc      	bne.n	800a68c <vPortFree+0x24>
 800a692:	e7f3      	b.n	800a67c <vPortFree+0x14>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a694:	9b01      	ldr	r3, [sp, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1fc      	bne.n	800a694 <vPortFree+0x2c>
 800a69a:	e012      	b.n	800a6c2 <vPortFree+0x5a>
		
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a69c:	b189      	cbz	r1, 800a6c2 <vPortFree+0x5a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a69e:	ea23 0302 	bic.w	r3, r3, r2
 800a6a2:	f844 3c04 	str.w	r3, [r4, #-4]

				vTaskSuspendAll();
 800a6a6:	f000 f92f 	bl	800a908 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6aa:	4a08      	ldr	r2, [pc, #32]	; (800a6cc <vPortFree+0x64>)
 800a6ac:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a6b0:	6813      	ldr	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 800a6b2:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6b6:	440b      	add	r3, r1
 800a6b8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 800a6ba:	f7ff ff45 	bl	800a548 <prvInsertBlockIntoFreeList>
					traceFREE( pv, pxLink->xBlockSize );
				}
				xTaskResumeAll();
 800a6be:	f000 f9bb 	bl	800aa38 <xTaskResumeAll>
			}
		}
	}
}
 800a6c2:	b002      	add	sp, #8
 800a6c4:	bd10      	pop	{r4, pc}
 800a6c6:	bf00      	nop
 800a6c8:	10002be8 	.word	0x10002be8
 800a6cc:	10001ed0 	.word	0x10001ed0

0800a6d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6d0:	b508      	push	{r3, lr}

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 800a6d2:	4c03      	ldr	r4, [pc, #12]	; (800a6e0 <prvIdleTask+0x10>)
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d9fd      	bls.n	800a6d6 <prvIdleTask+0x6>
			{
				taskYIELD();
 800a6da:	f7ff fe41 	bl	800a360 <vPortYield>
 800a6de:	e7f9      	b.n	800a6d4 <prvIdleTask+0x4>
 800a6e0:	10002bf8 	.word	0x10002bf8

0800a6e4 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 800a6e4:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800a6e6:	4b0c      	ldr	r3, [pc, #48]	; (800a718 <prvAddCurrentTaskToDelayedList+0x34>)
 800a6e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a6ea:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 800a6ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a6ee:	4290      	cmp	r0, r2
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 800a6f0:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 800a6f2:	d206      	bcs.n	800a702 <prvAddCurrentTaskToDelayedList+0x1e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800a6f4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a6f6:	6e59      	ldr	r1, [r3, #100]	; 0x64
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
 800a6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800a6fc:	3104      	adds	r1, #4
 800a6fe:	f000 bb8d 	b.w	800ae1c <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800a702:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a704:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800a706:	3104      	adds	r1, #4
 800a708:	f000 fb88 	bl	800ae1c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 800a70c:	4b03      	ldr	r3, [pc, #12]	; (800a71c <prvAddCurrentTaskToDelayedList+0x38>)
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 800a712:	bf38      	it	cc
 800a714:	601c      	strcc	r4, [r3, #0]
 800a716:	bd10      	pop	{r4, pc}
 800a718:	10002bf8 	.word	0x10002bf8
 800a71c:	10001ed4 	.word	0x10001ed4

0800a720 <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 800a720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	ae0c      	add	r6, sp, #48	; 0x30
 800a726:	460f      	mov	r7, r1
 800a728:	4615      	mov	r5, r2
 800a72a:	469a      	mov	sl, r3
 800a72c:	e896 0940 	ldmia.w	r6, {r6, r8, fp}
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 800a730:	4681      	mov	r9, r0
 800a732:	b110      	cbz	r0, 800a73a <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 800a734:	2e04      	cmp	r6, #4
 800a736:	d806      	bhi.n	800a746 <xTaskGenericCreate+0x26>
 800a738:	e00a      	b.n	800a750 <xTaskGenericCreate+0x30>
signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 800a73a:	2301      	movs	r3, #1
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	9b00      	ldr	r3, [sp, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1fc      	bne.n	800a73e <xTaskGenericCreate+0x1e>
 800a744:	e7f6      	b.n	800a734 <xTaskGenericCreate+0x14>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 800a746:	2301      	movs	r3, #1
 800a748:	9301      	str	r3, [sp, #4]
 800a74a:	9b01      	ldr	r3, [sp, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1fc      	bne.n	800a74a <xTaskGenericCreate+0x2a>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 800a750:	2050      	movs	r0, #80	; 0x50
 800a752:	f7ff ff1d 	bl	800a590 <pvPortMalloc>

	if( pxNewTCB != NULL )
 800a756:	4604      	mov	r4, r0
 800a758:	2800      	cmp	r0, #0
 800a75a:	f000 80a6 	beq.w	800a8aa <xTaskGenericCreate+0x18a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a75e:	f1bb 0f00 	cmp.w	fp, #0
 800a762:	d103      	bne.n	800a76c <xTaskGenericCreate+0x4c>
 800a764:	00a8      	lsls	r0, r5, #2
 800a766:	f7ff ff13 	bl	800a590 <pvPortMalloc>
 800a76a:	e000      	b.n	800a76e <xTaskGenericCreate+0x4e>
 800a76c:	4658      	mov	r0, fp
 800a76e:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 800a770:	b918      	cbnz	r0, 800a77a <xTaskGenericCreate+0x5a>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 800a772:	4620      	mov	r0, r4
 800a774:	f7ff ff78 	bl	800a668 <vPortFree>
 800a778:	e097      	b.n	800a8aa <xTaskGenericCreate+0x18a>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 800a77a:	00ad      	lsls	r5, r5, #2
 800a77c:	462a      	mov	r2, r5
 800a77e:	21a5      	movs	r1, #165	; 0xa5
 800a780:	f012 fcf8 	bl	801d174 <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a784:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a786:	3d04      	subs	r5, #4
 800a788:	441d      	add	r5, r3
 800a78a:	f025 0507 	bic.w	r5, r5, #7
 800a78e:	1e7b      	subs	r3, r7, #1
 800a790:	f104 0233 	add.w	r2, r4, #51	; 0x33
 800a794:	370f      	adds	r7, #15
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800a796:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 800a79a:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a79e:	f993 1000 	ldrsb.w	r1, [r3]
 800a7a2:	b109      	cbz	r1, 800a7a8 <xTaskGenericCreate+0x88>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 800a7a4:	42bb      	cmp	r3, r7
 800a7a6:	d1f6      	bne.n	800a796 <xTaskGenericCreate+0x76>
 800a7a8:	2e04      	cmp	r6, #4
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 800a7aa:	f04f 0300 	mov.w	r3, #0
 800a7ae:	46b3      	mov	fp, r6
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800a7b0:	f104 0704 	add.w	r7, r4, #4
 800a7b4:	bf28      	it	cs
 800a7b6:	f04f 0b04 	movcs.w	fp, #4
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 800a7ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800a7be:	4638      	mov	r0, r7
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
 800a7c0:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 800a7c4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800a7c8:	f000 fb19 	bl	800adfe <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800a7cc:	f104 0018 	add.w	r0, r4, #24
 800a7d0:	f000 fb15 	bl	800adfe <vListInitialiseItem>
	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d4:	f1cb 0305 	rsb	r3, fp, #5
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800a7d8:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7da:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800a7dc:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7de:	4652      	mov	r2, sl
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f7ff fd9e 	bl	800a324 <pxPortInitialiseStack>
 800a7e8:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 800a7ea:	f1b8 0f00 	cmp.w	r8, #0
 800a7ee:	d001      	beq.n	800a7f4 <xTaskGenericCreate+0xd4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 800a7f0:	f8c8 4000 	str.w	r4, [r8]

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 800a7f4:	4d2f      	ldr	r5, [pc, #188]	; (800a8b4 <xTaskGenericCreate+0x194>)
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 800a7f6:	f7ff fdd9 	bl	800a3ac <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 800a7fa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	676b      	str	r3, [r5, #116]	; 0x74
			if( pxCurrentTCB == NULL )
 800a800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a802:	bb33      	cbnz	r3, 800a852 <xTaskGenericCreate+0x132>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 800a804:	666c      	str	r4, [r5, #100]	; 0x64

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 800a806:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 800a808:	2a01      	cmp	r2, #1
 800a80a:	d12a      	bne.n	800a862 <xTaskGenericCreate+0x142>
 800a80c:	4698      	mov	r8, r3
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a80e:	eb05 0008 	add.w	r0, r5, r8
 800a812:	f108 0814 	add.w	r8, r8, #20
 800a816:	f000 fae7 	bl	800ade8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 800a81a:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a81e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800a8b4 <xTaskGenericCreate+0x194>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 800a822:	d1f4      	bne.n	800a80e <xTaskGenericCreate+0xee>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800a824:	f109 0a78 	add.w	sl, r9, #120	; 0x78
 800a828:	4650      	mov	r0, sl
	vListInitialise( &xDelayedTaskList2 );
 800a82a:	f109 088c 	add.w	r8, r9, #140	; 0x8c
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800a82e:	f000 fadb 	bl	800ade8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a832:	4640      	mov	r0, r8
 800a834:	f000 fad8 	bl	800ade8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a838:	f109 00a0 	add.w	r0, r9, #160	; 0xa0
 800a83c:	f000 fad4 	bl	800ade8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a840:	f109 00b4 	add.w	r0, r9, #180	; 0xb4
 800a844:	f000 fad0 	bl	800ade8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a848:	f8c9 a070 	str.w	sl, [r9, #112]	; 0x70
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a84c:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 800a850:	e007      	b.n	800a862 <xTaskGenericCreate+0x142>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 800a852:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
 800a856:	b923      	cbnz	r3, 800a862 <xTaskGenericCreate+0x142>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800a858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85c:	429e      	cmp	r6, r3
					{
						pxCurrentTCB = pxNewTCB;
 800a85e:	bf28      	it	cs
 800a860:	666c      	strcs	r4, [r5, #100]	; 0x64
					}
				}
			}

			uxTaskNumber++;
 800a862:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800a866:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
						pxCurrentTCB = pxNewTCB;
					}
				}
			}

			uxTaskNumber++;
 800a86a:	3301      	adds	r3, #1
 800a86c:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a870:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800a872:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a874:	4293      	cmp	r3, r2
 800a876:	bf88      	it	hi
 800a878:	4a0e      	ldrhi	r2, [pc, #56]	; (800a8b4 <xTaskGenericCreate+0x194>)
 800a87a:	f04f 0014 	mov.w	r0, #20
 800a87e:	fb00 5003 	mla	r0, r0, r3, r5
 800a882:	4639      	mov	r1, r7
 800a884:	bf88      	it	hi
 800a886:	f8c2 30d0 	strhi.w	r3, [r2, #208]	; 0xd0
 800a88a:	f000 fabb 	bl	800ae04 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800a88e:	f7ff fd9f 	bl	800a3d0 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 800a892:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
 800a896:	b133      	cbz	r3, 800a8a6 <xTaskGenericCreate+0x186>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 800a898:	4b06      	ldr	r3, [pc, #24]	; (800a8b4 <xTaskGenericCreate+0x194>)
 800a89a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89e:	429e      	cmp	r6, r3
 800a8a0:	d901      	bls.n	800a8a6 <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
 800a8a2:	f7ff fd5d 	bl	800a360 <vPortYield>
 800a8a6:	2001      	movs	r0, #1
 800a8a8:	e001      	b.n	800a8ae <xTaskGenericCreate+0x18e>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a8aa:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
 800a8ae:	b003      	add	sp, #12
 800a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b4:	10002bf8 	.word	0x10002bf8

0800a8b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a8b8:	b530      	push	{r4, r5, lr}
 800a8ba:	b087      	sub	sp, #28
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800a8bc:	2400      	movs	r4, #0
 800a8be:	9403      	str	r4, [sp, #12]
 800a8c0:	9402      	str	r4, [sp, #8]
 800a8c2:	9401      	str	r4, [sp, #4]
 800a8c4:	9400      	str	r4, [sp, #0]
 800a8c6:	4623      	mov	r3, r4
 800a8c8:	2278      	movs	r2, #120	; 0x78
 800a8ca:	490c      	ldr	r1, [pc, #48]	; (800a8fc <vTaskStartScheduler+0x44>)
 800a8cc:	480c      	ldr	r0, [pc, #48]	; (800a900 <vTaskStartScheduler+0x48>)
 800a8ce:	f7ff ff27 	bl	800a720 <xTaskGenericCreate>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8d2:	2801      	cmp	r0, #1
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800a8d4:	4605      	mov	r5, r0
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8d6:	d108      	bne.n	800a8ea <vTaskStartScheduler+0x32>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800a8d8:	f7ff fd4e 	bl	800a378 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 800a8dc:	4b09      	ldr	r3, [pc, #36]	; (800a904 <vTaskStartScheduler+0x4c>)
 800a8de:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
		xTickCount = ( portTickType ) 0U;
 800a8e2:	669c      	str	r4, [r3, #104]	; 0x68
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8e4:	f7ff fdc2 	bl	800a46c <xPortStartScheduler>
 800a8e8:	e005      	b.n	800a8f6 <vTaskStartScheduler+0x3e>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 800a8ea:	b920      	cbnz	r0, 800a8f6 <vTaskStartScheduler+0x3e>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	9305      	str	r3, [sp, #20]
 800a8f0:	9b05      	ldr	r3, [sp, #20]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1fc      	bne.n	800a8f0 <vTaskStartScheduler+0x38>
	}
}
 800a8f6:	b007      	add	sp, #28
 800a8f8:	bd30      	pop	{r4, r5, pc}
 800a8fa:	bf00      	nop
 800a8fc:	0801d607 	.word	0x0801d607
 800a900:	0800a6d1 	.word	0x0800a6d1
 800a904:	10002bf8 	.word	0x10002bf8

0800a908 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 800a908:	4a03      	ldr	r2, [pc, #12]	; (800a918 <vTaskSuspendAll+0x10>)
 800a90a:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 800a90e:	3301      	adds	r3, #1
 800a910:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	10002bf8 	.word	0x10002bf8

0800a91c <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 800a91c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 800a91e:	f7ff fd45 	bl	800a3ac <vPortEnterCritical>
	{
		xTicks = xTickCount;
 800a922:	4b03      	ldr	r3, [pc, #12]	; (800a930 <xTaskGetTickCount+0x14>)
 800a924:	6e9c      	ldr	r4, [r3, #104]	; 0x68
	}
	taskEXIT_CRITICAL();
 800a926:	f7ff fd53 	bl	800a3d0 <vPortExitCritical>

	return xTicks;
}
 800a92a:	4620      	mov	r0, r4
 800a92c:	bd10      	pop	{r4, pc}
 800a92e:	bf00      	nop
 800a930:	10002bf8 	.word	0x10002bf8

0800a934 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 800a934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800a938:	4c3d      	ldr	r4, [pc, #244]	; (800aa30 <xTaskIncrementTick+0xfc>)
 800a93a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d147      	bne.n	800a9d2 <xTaskIncrementTick+0x9e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 800a942:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a944:	3301      	adds	r3, #1
 800a946:	66a3      	str	r3, [r4, #104]	; 0x68

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 800a948:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68

			if( xConstTickCount == ( portTickType ) 0U )
 800a94c:	f1b8 0f00 	cmp.w	r8, #0
 800a950:	d11e      	bne.n	800a990 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
 800a952:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	b97b      	cbnz	r3, 800a978 <xTaskIncrementTick+0x44>
 800a958:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a95a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a95c:	6722      	str	r2, [r4, #112]	; 0x70
 800a95e:	66e3      	str	r3, [r4, #108]	; 0x6c
 800a960:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800a964:	3301      	adds	r3, #1
 800a966:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800a96a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	4b31      	ldr	r3, [pc, #196]	; (800aa34 <xTaskIncrementTick+0x100>)
 800a970:	b942      	cbnz	r2, 800a984 <xTaskIncrementTick+0x50>
 800a972:	f04f 32ff 	mov.w	r2, #4294967295
 800a976:	e00a      	b.n	800a98e <xTaskIncrementTick+0x5a>
 800a978:	2301      	movs	r3, #1
 800a97a:	9301      	str	r3, [sp, #4]
 800a97c:	9b01      	ldr	r3, [sp, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1fc      	bne.n	800a97c <xTaskIncrementTick+0x48>
 800a982:	e7e9      	b.n	800a958 <xTaskIncrementTick+0x24>
 800a984:	4a2a      	ldr	r2, [pc, #168]	; (800aa30 <xTaskIncrementTick+0xfc>)
 800a986:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a988:	68d2      	ldr	r2, [r2, #12]
 800a98a:	68d2      	ldr	r2, [r2, #12]
 800a98c:	6852      	ldr	r2, [r2, #4]
 800a98e:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 800a990:	4f28      	ldr	r7, [pc, #160]	; (800aa34 <xTaskIncrementTick+0x100>)
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	4598      	cmp	r8, r3
 800a996:	f04f 0500 	mov.w	r5, #0
 800a99a:	d311      	bcc.n	800a9c0 <xTaskIncrementTick+0x8c>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a99c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800aa30 <xTaskIncrementTick+0xfc>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800a9a0:	f04f 0b14 	mov.w	fp, #20
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	b913      	cbnz	r3, 800a9b0 <xTaskIncrementTick+0x7c>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800a9aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ae:	e006      	b.n	800a9be <xTaskIncrementTick+0x8a>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a9b0:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	68de      	ldr	r6, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800a9b8:	6873      	ldr	r3, [r6, #4]

						if( xConstTickCount < xItemValue )
 800a9ba:	4598      	cmp	r8, r3
 800a9bc:	d210      	bcs.n	800a9e0 <xTaskIncrementTick+0xac>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800a9be:	603b      	str	r3, [r7, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 800a9c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c4:	2314      	movs	r3, #20
 800a9c6:	4353      	muls	r3, r2
 800a9c8:	58e3      	ldr	r3, [r4, r3]
			{
				xSwitchRequired = pdTRUE;
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	bf28      	it	cs
 800a9ce:	2501      	movcs	r5, #1
 800a9d0:	e024      	b.n	800aa1c <xTaskIncrementTick+0xe8>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 800a9d2:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc

portBASE_TYPE xTaskIncrementTick( void )
{
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 800a9dc:	2500      	movs	r5, #0
 800a9de:	e01d      	b.n	800aa1c <xTaskIncrementTick+0xe8>
							xNextTaskUnblockTime = xItemValue;
							break;
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800a9e0:	f106 0a04 	add.w	sl, r6, #4
 800a9e4:	4650      	mov	r0, sl
 800a9e6:	f000 fa31 	bl	800ae4c <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9ea:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800a9ec:	b11b      	cbz	r3, 800a9f6 <xTaskIncrementTick+0xc2>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9ee:	f106 0018 	add.w	r0, r6, #24
 800a9f2:	f000 fa2b 	bl	800ae4c <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800a9f6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800a9f8:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800a9fc:	4298      	cmp	r0, r3
 800a9fe:	bf88      	it	hi
 800aa00:	f8c9 00d0 	strhi.w	r0, [r9, #208]	; 0xd0
 800aa04:	4651      	mov	r1, sl
 800aa06:	fb0b 4000 	mla	r0, fp, r0, r4
 800aa0a:	f000 f9fb 	bl	800ae04 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa10:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800aa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 800aa14:	429a      	cmp	r2, r3
 800aa16:	bf28      	it	cs
 800aa18:	2501      	movcs	r5, #1
 800aa1a:	e7c3      	b.n	800a9a4 <xTaskIncrementTick+0x70>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aa1c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
		{
			xSwitchRequired = pdTRUE;
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	bf18      	it	ne
 800aa24:	2501      	movne	r5, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 800aa26:	4628      	mov	r0, r5
 800aa28:	b003      	add	sp, #12
 800aa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2e:	bf00      	nop
 800aa30:	10002bf8 	.word	0x10002bf8
 800aa34:	10001ed4 	.word	0x10001ed4

0800aa38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 800aa38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa3c:	4c31      	ldr	r4, [pc, #196]	; (800ab04 <xTaskResumeAll+0xcc>)
 800aa3e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800aa42:	b15b      	cbz	r3, 800aa5c <xTaskResumeAll+0x24>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa44:	f7ff fcb2 	bl	800a3ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa48:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800aa4c:	4d2d      	ldr	r5, [pc, #180]	; (800ab04 <xTaskResumeAll+0xcc>)
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800aa54:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800aa58:	b143      	cbz	r3, 800aa6c <xTaskResumeAll+0x34>
 800aa5a:	e005      	b.n	800aa68 <xTaskResumeAll+0x30>
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	9301      	str	r3, [sp, #4]
 800aa60:	9b01      	ldr	r3, [sp, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1fc      	bne.n	800aa60 <xTaskResumeAll+0x28>
 800aa66:	e7ed      	b.n	800aa44 <xTaskResumeAll+0xc>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 800aa68:	2400      	movs	r4, #0
 800aa6a:	e044      	b.n	800aaf6 <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 800aa6c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0fa      	beq.n	800aa68 <xTaskResumeAll+0x30>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 800aa72:	f04f 0814 	mov.w	r8, #20
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa76:	46a9      	mov	r9, r5
 800aa78:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800aa7c:	4b21      	ldr	r3, [pc, #132]	; (800ab04 <xTaskResumeAll+0xcc>)
 800aa7e:	b1fa      	cbz	r2, 800aac0 <xTaskResumeAll+0x88>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800aa80:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800aa84:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800aa86:	1d37      	adds	r7, r6, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa88:	f106 0018 	add.w	r0, r6, #24
 800aa8c:	f000 f9de 	bl	800ae4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800aa90:	4638      	mov	r0, r7
 800aa92:	f000 f9db 	bl	800ae4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa96:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800aa98:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 800aa9c:	4298      	cmp	r0, r3
 800aa9e:	bf88      	it	hi
 800aaa0:	f8c5 00d0 	strhi.w	r0, [r5, #208]	; 0xd0
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	fb08 4000 	mla	r0, r8, r0, r4
 800aaaa:	f000 f9ab 	bl	800ae04 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aaae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aab0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800aab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d3df      	bcc.n	800aa78 <xTaskResumeAll+0x40>
					{
						xYieldPending = pdTRUE;
 800aab8:	2301      	movs	r3, #1
 800aaba:	f8c9 30e0 	str.w	r3, [r9, #224]	; 0xe0
 800aabe:	e7db      	b.n	800aa78 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 800aac0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800aac4:	b932      	cbnz	r2, 800aad4 <xTaskResumeAll+0x9c>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 800aac6:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800aaca:	2c01      	cmp	r4, #1
 800aacc:	d1cc      	bne.n	800aa68 <xTaskResumeAll+0x30>
				{
					xAlreadyYielded = pdTRUE;
					portYIELD_WITHIN_API();
 800aace:	f7ff fc47 	bl	800a360 <vPortYield>
 800aad2:	e010      	b.n	800aaf6 <xTaskResumeAll+0xbe>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 800aad4:	461d      	mov	r5, r3
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 800aad6:	2601      	movs	r6, #1
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 800aad8:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d0f2      	beq.n	800aac6 <xTaskResumeAll+0x8e>
					{
						if( xTaskIncrementTick() != pdFALSE )
 800aae0:	f7ff ff28 	bl	800a934 <xTaskIncrementTick>
 800aae4:	b108      	cbz	r0, 800aaea <xTaskResumeAll+0xb2>
						{
							xYieldPending = pdTRUE;
 800aae6:	f8c5 60e0 	str.w	r6, [r5, #224]	; 0xe0
						}
						--uxPendedTicks;
 800aaea:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800aaf4:	e7f0      	b.n	800aad8 <xTaskResumeAll+0xa0>
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 800aaf6:	f7ff fc6b 	bl	800a3d0 <vPortExitCritical>

	return xAlreadyYielded;
}
 800aafa:	4620      	mov	r0, r4
 800aafc:	b003      	add	sp, #12
 800aafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab02:	bf00      	nop
 800ab04:	10002bf8 	.word	0x10002bf8

0800ab08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 800ab08:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 800ab0a:	b918      	cbnz	r0, 800ab14 <vTaskDelay+0xc>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 800ab0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 800ab10:	f7ff bc26 	b.w	800a360 <vPortYield>
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
		{
			vTaskSuspendAll();
 800ab14:	f7ff fef8 	bl	800a908 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800ab18:	4a07      	ldr	r2, [pc, #28]	; (800ab38 <vTaskDelay+0x30>)
 800ab1a:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800ab1c:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800ab1e:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800ab20:	3004      	adds	r0, #4
 800ab22:	f000 f993 	bl	800ae4c <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ab26:	4620      	mov	r0, r4
 800ab28:	f7ff fddc 	bl	800a6e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ab2c:	f7ff ff84 	bl	800aa38 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d0eb      	beq.n	800ab0c <vTaskDelay+0x4>
		{
			portYIELD_WITHIN_API();
		}
	}
 800ab34:	bd10      	pop	{r4, pc}
 800ab36:	bf00      	nop
 800ab38:	10002bf8 	.word	0x10002bf8

0800ab3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 800ab3e:	4b28      	ldr	r3, [pc, #160]	; (800abe0 <vTaskSwitchContext+0xa4>)
 800ab40:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800ab44:	461c      	mov	r4, r3
 800ab46:	b11a      	cbz	r2, 800ab50 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ab4e:	e045      	b.n	800abdc <vTaskSwitchContext+0xa0>
	}
	else
	{
		xYieldPending = pdFALSE;
 800ab50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800ab54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ab56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab58:	6812      	ldr	r2, [r2, #0]
 800ab5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d804      	bhi.n	800ab6a <vTaskSwitchContext+0x2e>
 800ab60:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800ab62:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ab64:	3134      	adds	r1, #52	; 0x34
 800ab66:	f7fd fe62 	bl	800882e <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800ab6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab6c:	491d      	ldr	r1, [pc, #116]	; (800abe4 <vTaskSwitchContext+0xa8>)
 800ab6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab70:	4d1b      	ldr	r5, [pc, #108]	; (800abe0 <vTaskSwitchContext+0xa4>)
 800ab72:	2214      	movs	r2, #20
 800ab74:	f012 fa32 	bl	801cfdc <memcmp>
 800ab78:	b120      	cbz	r0, 800ab84 <vTaskSwitchContext+0x48>
 800ab7a:	6e68      	ldr	r0, [r5, #100]	; 0x64
 800ab7c:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800ab7e:	3134      	adds	r1, #52	; 0x34
 800ab80:	f7fd fe55 	bl	800882e <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ab84:	4916      	ldr	r1, [pc, #88]	; (800abe0 <vTaskSwitchContext+0xa4>)
 800ab86:	2214      	movs	r2, #20
 800ab88:	2001      	movs	r0, #1
 800ab8a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800ab8e:	4d14      	ldr	r5, [pc, #80]	; (800abe0 <vTaskSwitchContext+0xa4>)
 800ab90:	4353      	muls	r3, r2
 800ab92:	58e3      	ldr	r3, [r4, r3]
 800ab94:	b96b      	cbnz	r3, 800abb2 <vTaskSwitchContext+0x76>
 800ab96:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 800ab9a:	b12b      	cbz	r3, 800aba8 <vTaskSwitchContext+0x6c>
 800ab9c:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800aba0:	3b01      	subs	r3, #1
 800aba2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 800aba6:	e7f0      	b.n	800ab8a <vTaskSwitchContext+0x4e>
 800aba8:	9001      	str	r0, [sp, #4]
 800abaa:	9b01      	ldr	r3, [sp, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1fc      	bne.n	800abaa <vTaskSwitchContext+0x6e>
 800abb0:	e7f4      	b.n	800ab9c <vTaskSwitchContext+0x60>
 800abb2:	f8d5 10d0 	ldr.w	r1, [r5, #208]	; 0xd0
 800abb6:	2214      	movs	r2, #20
 800abb8:	fb02 f301 	mul.w	r3, r2, r1
 800abbc:	18ea      	adds	r2, r5, r3
 800abbe:	3308      	adds	r3, #8
 800abc0:	6850      	ldr	r0, [r2, #4]
 800abc2:	6840      	ldr	r0, [r0, #4]
 800abc4:	6050      	str	r0, [r2, #4]
 800abc6:	442b      	add	r3, r5
 800abc8:	4298      	cmp	r0, r3
 800abca:	bf04      	itt	eq
 800abcc:	6843      	ldreq	r3, [r0, #4]
 800abce:	6053      	streq	r3, [r2, #4]
 800abd0:	2314      	movs	r3, #20
 800abd2:	fb03 4101 	mla	r1, r3, r1, r4
 800abd6:	684b      	ldr	r3, [r1, #4]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	6663      	str	r3, [r4, #100]	; 0x64
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abdc:	b003      	add	sp, #12
 800abde:	bd30      	pop	{r4, r5, pc}
 800abe0:	10002bf8 	.word	0x10002bf8
 800abe4:	0801d5f3 	.word	0x0801d5f3

0800abe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 800abe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abea:	460d      	mov	r5, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
 800abec:	b188      	cbz	r0, 800ac12 <vTaskPlaceOnEventList+0x2a>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abee:	4c0f      	ldr	r4, [pc, #60]	; (800ac2c <vTaskPlaceOnEventList+0x44>)
 800abf0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800abf2:	3118      	adds	r1, #24
 800abf4:	f000 f912 	bl	800ae1c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800abf8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800abfa:	3004      	adds	r0, #4
 800abfc:	f000 f926 	bl	800ae4c <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 800ac00:	1c6b      	adds	r3, r5, #1
 800ac02:	d10c      	bne.n	800ac1e <vTaskPlaceOnEventList+0x36>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ac04:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ac06:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 800ac0a:	3104      	adds	r1, #4
 800ac0c:	f000 f8fa 	bl	800ae04 <vListInsertEnd>
 800ac10:	e009      	b.n	800ac26 <vTaskPlaceOnEventList+0x3e>

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
portTickType xTimeToWake;

	configASSERT( pxEventList );
 800ac12:	2301      	movs	r3, #1
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	9b01      	ldr	r3, [sp, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1fc      	bne.n	800ac16 <vTaskPlaceOnEventList+0x2e>
 800ac1c:	e7e7      	b.n	800abee <vTaskPlaceOnEventList+0x6>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 800ac1e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ac20:	4428      	add	r0, r5
 800ac22:	f7ff fd5f 	bl	800a6e4 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac26:	b003      	add	sp, #12
 800ac28:	bd30      	pop	{r4, r5, pc}
 800ac2a:	bf00      	nop
 800ac2c:	10002bf8 	.word	0x10002bf8

0800ac30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 800ac30:	b573      	push	{r0, r1, r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ac32:	68c3      	ldr	r3, [r0, #12]
 800ac34:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ac36:	b1c5      	cbz	r5, 800ac6a <xTaskRemoveFromEventList+0x3a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac38:	f105 0618 	add.w	r6, r5, #24

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800ac3c:	4c16      	ldr	r4, [pc, #88]	; (800ac98 <xTaskRemoveFromEventList+0x68>)

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac3e:	4630      	mov	r0, r6
 800ac40:	f000 f904 	bl	800ae4c <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800ac44:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800ac48:	b9ab      	cbnz	r3, 800ac76 <xTaskRemoveFromEventList+0x46>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800ac4a:	1d2e      	adds	r6, r5, #4
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	f000 f8fd 	bl	800ae4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac52:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ac54:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 800ac58:	2014      	movs	r0, #20
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	bf88      	it	hi
 800ac5e:	f8c4 30d0 	strhi.w	r3, [r4, #208]	; 0xd0
 800ac62:	4631      	mov	r1, r6
 800ac64:	fb00 4003 	mla	r0, r0, r3, r4
 800ac68:	e008      	b.n	800ac7c <xTaskRemoveFromEventList+0x4c>
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
	configASSERT( pxUnblockedTCB );
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	9301      	str	r3, [sp, #4]
 800ac6e:	9b01      	ldr	r3, [sp, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1fc      	bne.n	800ac6e <xTaskRemoveFromEventList+0x3e>
 800ac74:	e7e0      	b.n	800ac38 <xTaskRemoveFromEventList+0x8>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac76:	4631      	mov	r1, r6
 800ac78:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 800ac7c:	f000 f8c2 	bl	800ae04 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac82:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ac84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac86:	429a      	cmp	r2, r3
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac88:	bf25      	ittet	cs
 800ac8a:	4b03      	ldrcs	r3, [pc, #12]	; (800ac98 <xTaskRemoveFromEventList+0x68>)
 800ac8c:	2001      	movcs	r0, #1
	}
	else
	{
		xReturn = pdFALSE;
 800ac8e:	2000      	movcc	r0, #0
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac90:	f8c3 00e0 	strcs.w	r0, [r3, #224]	; 0xe0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800ac94:	b002      	add	sp, #8
 800ac96:	bd70      	pop	{r4, r5, r6, pc}
 800ac98:	10002bf8 	.word	0x10002bf8

0800ac9c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 800ac9c:	b082      	sub	sp, #8
	configASSERT( pxTimeOut );
 800ac9e:	b138      	cbz	r0, 800acb0 <vTaskSetTimeOutState+0x14>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aca0:	4b06      	ldr	r3, [pc, #24]	; (800acbc <vTaskSetTimeOutState+0x20>)
 800aca2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aca8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800acaa:	6043      	str	r3, [r0, #4]
}
 800acac:	b002      	add	sp, #8
 800acae:	4770      	bx	lr
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
 800acb0:	2301      	movs	r3, #1
 800acb2:	9301      	str	r3, [sp, #4]
 800acb4:	9b01      	ldr	r3, [sp, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1fc      	bne.n	800acb4 <vTaskSetTimeOutState+0x18>
 800acba:	e7f1      	b.n	800aca0 <vTaskSetTimeOutState+0x4>
 800acbc:	10002bf8 	.word	0x10002bf8

0800acc0 <xTaskCheckForTimeOut>:
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 800acc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acc2:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 800acc4:	4604      	mov	r4, r0
 800acc6:	b108      	cbz	r0, 800accc <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
 800acc8:	b95d      	cbnz	r5, 800ace2 <xTaskCheckForTimeOut+0x22>
 800acca:	e005      	b.n	800acd8 <xTaskCheckForTimeOut+0x18>

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 800accc:	2301      	movs	r3, #1
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	9b00      	ldr	r3, [sp, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1fc      	bne.n	800acd0 <xTaskCheckForTimeOut+0x10>
 800acd6:	e7f7      	b.n	800acc8 <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
 800acd8:	2301      	movs	r3, #1
 800acda:	9301      	str	r3, [sp, #4]
 800acdc:	9b01      	ldr	r3, [sp, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1fc      	bne.n	800acdc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800ace2:	f7ff fb63 	bl	800a3ac <vPortEnterCritical>

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800ace6:	682b      	ldr	r3, [r5, #0]
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 800ace8:	4a0e      	ldr	r2, [pc, #56]	; (800ad24 <xTaskCheckForTimeOut+0x64>)

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800acea:	1c58      	adds	r0, r3, #1
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 800acec:	6e91      	ldr	r1, [r2, #104]	; 0x68

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800acee:	d010      	beq.n	800ad12 <xTaskCheckForTimeOut+0x52>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acf0:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 800acf4:	6820      	ldr	r0, [r4, #0]
 800acf6:	4290      	cmp	r0, r2
 800acf8:	6862      	ldr	r2, [r4, #4]
 800acfa:	d001      	beq.n	800ad00 <xTaskCheckForTimeOut+0x40>
 800acfc:	4291      	cmp	r1, r2
 800acfe:	d20a      	bcs.n	800ad16 <xTaskCheckForTimeOut+0x56>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ad00:	1a88      	subs	r0, r1, r2
 800ad02:	4283      	cmp	r3, r0
 800ad04:	d907      	bls.n	800ad16 <xTaskCheckForTimeOut+0x56>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ad06:	1a52      	subs	r2, r2, r1
 800ad08:	4413      	add	r3, r2
 800ad0a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f7ff ffc5 	bl	800ac9c <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 800ad12:	2400      	movs	r4, #0
 800ad14:	e000      	b.n	800ad18 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 800ad16:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 800ad18:	f7ff fb5a 	bl	800a3d0 <vPortExitCritical>

	return xReturn;
}
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	b003      	add	sp, #12
 800ad20:	bd30      	pop	{r4, r5, pc}
 800ad22:	bf00      	nop
 800ad24:	10002bf8 	.word	0x10002bf8

0800ad28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 800ad28:	4b02      	ldr	r3, [pc, #8]	; (800ad34 <vTaskMissedYield+0xc>)
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	10002bf8 	.word	0x10002bf8

0800ad38 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ad38:	4b01      	ldr	r3, [pc, #4]	; (800ad40 <xTaskGetCurrentTaskHandle+0x8>)
 800ad3a:	6e58      	ldr	r0, [r3, #100]	; 0x64

		return xReturn;
	}
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	10002bf8 	.word	0x10002bf8

0800ad44 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 800ad44:	b570      	push	{r4, r5, r6, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800ad46:	4604      	mov	r4, r0
 800ad48:	b348      	cbz	r0, 800ad9e <vTaskPriorityInherit+0x5a>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ad4a:	4b15      	ldr	r3, [pc, #84]	; (800ada0 <vTaskPriorityInherit+0x5c>)
 800ad4c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ad4e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ad50:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800ad52:	428a      	cmp	r2, r1
 800ad54:	461d      	mov	r5, r3
 800ad56:	d222      	bcs.n	800ad9e <vTaskPriorityInherit+0x5a>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad58:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ad5a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800ad5c:	f1c1 0105 	rsb	r1, r1, #5
 800ad60:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ad62:	2114      	movs	r1, #20
 800ad64:	fb01 3202 	mla	r2, r1, r2, r3
 800ad68:	6941      	ldr	r1, [r0, #20]
 800ad6a:	4291      	cmp	r1, r2
 800ad6c:	d114      	bne.n	800ad98 <vTaskPriorityInherit+0x54>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800ad6e:	1d06      	adds	r6, r0, #4
 800ad70:	4630      	mov	r0, r6
 800ad72:	f000 f86b 	bl	800ae4c <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
					prvAddTaskToReadyList( pxTCB );
 800ad78:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d901      	bls.n	800ad88 <vTaskPriorityInherit+0x44>
 800ad84:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
 800ad88:	2014      	movs	r0, #20
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	fb00 5003 	mla	r0, r0, r3, r5
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 800ad90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 800ad94:	f000 b836 	b.w	800ae04 <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800ad9e:	bd70      	pop	{r4, r5, r6, pc}
 800ada0:	10002bf8 	.word	0x10002bf8

0800ada4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 800ada4:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
 800ada6:	4604      	mov	r4, r0
 800ada8:	b1d8      	cbz	r0, 800ade2 <vTaskPriorityDisinherit+0x3e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800adaa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800adac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800adae:	429a      	cmp	r2, r3
 800adb0:	d017      	beq.n	800ade2 <vTaskPriorityDisinherit+0x3e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800adb2:	1d05      	adds	r5, r0, #4
 800adb4:	4628      	mov	r0, r5
 800adb6:	f000 f849 	bl	800ae4c <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 800adba:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800adbc:	62e2      	str	r2, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adbe:	f1c2 0305 	rsb	r3, r2, #5
 800adc2:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList( pxTCB );
 800adc4:	4b07      	ldr	r3, [pc, #28]	; (800ade4 <vTaskPriorityDisinherit+0x40>)
 800adc6:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 800adca:	428a      	cmp	r2, r1
 800adcc:	bf88      	it	hi
 800adce:	f8c3 20d0 	strhi.w	r2, [r3, #208]	; 0xd0
 800add2:	2014      	movs	r0, #20
 800add4:	4629      	mov	r1, r5
 800add6:	fb00 3002 	mla	r0, r0, r2, r3
			}
		}
	}
 800adda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
				prvAddTaskToReadyList( pxTCB );
 800adde:	f000 b811 	b.w	800ae04 <vListInsertEnd>
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	10002bf8 	.word	0x10002bf8

0800ade8 <vListInitialise>:
void vListInitialise( xList * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ade8:	f100 0308 	add.w	r3, r0, #8
 800adec:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800adee:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adf2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adf4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 800adf6:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800adf8:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 800adfa:	6003      	str	r3, [r0, #0]
 800adfc:	4770      	bx	lr

0800adfe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800adfe:	2300      	movs	r3, #0
 800ae00:	6103      	str	r3, [r0, #16]
 800ae02:	4770      	bx	lr

0800ae04 <vListInsertEnd>:
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 800ae04:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex;
 800ae06:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ae08:	689a      	ldr	r2, [r3, #8]
 800ae0a:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ae0c:	689a      	ldr	r2, [r3, #8]
 800ae0e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ae10:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ae12:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ae14:	6803      	ldr	r3, [r0, #0]
 800ae16:	3301      	adds	r3, #1
 800ae18:	6003      	str	r3, [r0, #0]
 800ae1a:	4770      	bx	lr

0800ae1c <vListInsert>:
{
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 800ae1c:	680a      	ldr	r2, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ae1e:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 800ae20:	b530      	push	{r4, r5, lr}
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ae22:	d101      	bne.n	800ae28 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae24:	6903      	ldr	r3, [r0, #16]
 800ae26:	e007      	b.n	800ae38 <vListInsert+0x1c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae28:	f100 0308 	add.w	r3, r0, #8
 800ae2c:	685c      	ldr	r4, [r3, #4]
 800ae2e:	6825      	ldr	r5, [r4, #0]
 800ae30:	42aa      	cmp	r2, r5
 800ae32:	d301      	bcc.n	800ae38 <vListInsert+0x1c>
 800ae34:	4623      	mov	r3, r4
 800ae36:	e7f9      	b.n	800ae2c <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae3c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae3e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae40:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ae42:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ae44:	6803      	ldr	r3, [r0, #0]
 800ae46:	3301      	adds	r3, #1
 800ae48:	6003      	str	r3, [r0, #0]
 800ae4a:	bd30      	pop	{r4, r5, pc}

0800ae4c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae4c:	6843      	ldr	r3, [r0, #4]
 800ae4e:	6882      	ldr	r2, [r0, #8]
 800ae50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae52:	6883      	ldr	r3, [r0, #8]
 800ae54:	6842      	ldr	r2, [r0, #4]
 800ae56:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 800ae58:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae5e:	bf04      	itt	eq
 800ae60:	6882      	ldreq	r2, [r0, #8]
 800ae62:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 800ae64:	2200      	movs	r2, #0
 800ae66:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ae68:	6818      	ldr	r0, [r3, #0]
 800ae6a:	3801      	subs	r0, #1
 800ae6c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800ae6e:	4770      	bx	lr

0800ae70 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 800ae74:	6c02      	ldr	r2, [r0, #64]	; 0x40

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 800ae76:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 800ae78:	b932      	cbnz	r2, 800ae88 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae7a:	6805      	ldr	r5, [r0, #0]
 800ae7c:	bb3d      	cbnz	r5, 800aece <prvCopyDataToQueue+0x5e>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ae7e:	6840      	ldr	r0, [r0, #4]
 800ae80:	f7ff ff90 	bl	800ada4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800ae84:	6065      	str	r5, [r4, #4]
 800ae86:	e022      	b.n	800aece <prvCopyDataToQueue+0x5e>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae88:	b965      	cbnz	r5, 800aea4 <prvCopyDataToQueue+0x34>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ae8a:	6880      	ldr	r0, [r0, #8]
 800ae8c:	f012 f8d8 	bl	801d040 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ae90:	68a2      	ldr	r2, [r4, #8]
 800ae92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae94:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae96:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ae98:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d317      	bcc.n	800aece <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	60a3      	str	r3, [r4, #8]
 800aea2:	e014      	b.n	800aece <prvCopyDataToQueue+0x5e>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aea4:	68c0      	ldr	r0, [r0, #12]
 800aea6:	f012 f8cb 	bl	801d040 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800aeaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aeac:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aeae:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800aeb0:	425b      	negs	r3, r3
 800aeb2:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aeb4:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800aeb6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800aeb8:	bf3e      	ittt	cc
 800aeba:	6862      	ldrcc	r2, [r4, #4]
 800aebc:	189b      	addcc	r3, r3, r2
 800aebe:	60e3      	strcc	r3, [r4, #12]
		}

		if( xPosition == queueOVERWRITE )
 800aec0:	2d02      	cmp	r5, #2
 800aec2:	d104      	bne.n	800aece <prvCopyDataToQueue+0x5e>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 800aec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aec6:	b113      	cbz	r3, 800aece <prvCopyDataToQueue+0x5e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 800aec8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aeca:	3b01      	subs	r3, #1
 800aecc:	63a3      	str	r3, [r4, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800aece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aed0:	3301      	adds	r3, #1
 800aed2:	63a3      	str	r3, [r4, #56]	; 0x38
 800aed4:	bd38      	pop	{r3, r4, r5, pc}

0800aed6 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 800aed6:	4603      	mov	r3, r0
 800aed8:	b430      	push	{r4, r5}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 800aeda:	681c      	ldr	r4, [r3, #0]
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 800aedc:	4608      	mov	r0, r1
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 800aede:	b15c      	cbz	r4, 800aef8 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800aee0:	68d9      	ldr	r1, [r3, #12]
 800aee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aee4:	685d      	ldr	r5, [r3, #4]

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800aee6:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aee8:	42a9      	cmp	r1, r5

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800aeea:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800aeec:	bf28      	it	cs
 800aeee:	60dc      	strcs	r4, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800aef0:	68d9      	ldr	r1, [r3, #12]
	}
}
 800aef2:	bc30      	pop	{r4, r5}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800aef4:	f012 b8a4 	b.w	801d040 <memcpy>
	}
}
 800aef8:	bc30      	pop	{r4, r5}
 800aefa:	4770      	bx	lr

0800aefc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af00:	f7ff fa54 	bl	800a3ac <vPortEnterCritical>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af04:	f104 0524 	add.w	r5, r4, #36	; 0x24
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800af08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	dd0b      	ble.n	800af26 <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af10:	b14b      	cbz	r3, 800af26 <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af12:	4628      	mov	r0, r5
 800af14:	f7ff fe8c 	bl	800ac30 <xTaskRemoveFromEventList>
 800af18:	b108      	cbz	r0, 800af1e <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800af1a:	f7ff ff05 	bl	800ad28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800af1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800af20:	3b01      	subs	r3, #1
 800af22:	64a3      	str	r3, [r4, #72]	; 0x48
 800af24:	e7f0      	b.n	800af08 <prvUnlockQueue+0xc>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800af26:	f04f 33ff 	mov.w	r3, #4294967295
 800af2a:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800af2c:	f7ff fa50 	bl	800a3d0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af30:	f7ff fa3c 	bl	800a3ac <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af34:	f104 0510 	add.w	r5, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800af38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	dd0b      	ble.n	800af56 <prvUnlockQueue+0x5a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af3e:	6923      	ldr	r3, [r4, #16]
 800af40:	b14b      	cbz	r3, 800af56 <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af42:	4628      	mov	r0, r5
 800af44:	f7ff fe74 	bl	800ac30 <xTaskRemoveFromEventList>
 800af48:	b108      	cbz	r0, 800af4e <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 800af4a:	f7ff feed 	bl	800ad28 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 800af4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800af50:	3b01      	subs	r3, #1
 800af52:	6463      	str	r3, [r4, #68]	; 0x44
 800af54:	e7f0      	b.n	800af38 <prvUnlockQueue+0x3c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800af56:	f04f 33ff 	mov.w	r3, #4294967295
 800af5a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800af5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 800af60:	f7ff ba36 	b.w	800a3d0 <vPortExitCritical>

0800af64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 800af64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af66:	460d      	mov	r5, r1
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;

	configASSERT( pxQueue );
 800af68:	4604      	mov	r4, r0
 800af6a:	b198      	cbz	r0, 800af94 <xQueueGenericReset+0x30>

	taskENTER_CRITICAL();
 800af6c:	f7ff fa1e 	bl	800a3ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800af70:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800af72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af74:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800af76:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800af78:	4343      	muls	r3, r0
 800af7a:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 800af7c:	1a1b      	subs	r3, r3, r0
 800af7e:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800af80:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 800af82:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 800af84:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 800af86:	f04f 33ff 	mov.w	r3, #4294967295
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 800af8a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 800af8c:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800af8e:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 800af90:	b135      	cbz	r5, 800afa0 <xQueueGenericReset+0x3c>
 800af92:	e010      	b.n	800afb6 <xQueueGenericReset+0x52>

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;

	configASSERT( pxQueue );
 800af94:	2301      	movs	r3, #1
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	9b01      	ldr	r3, [sp, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1fc      	bne.n	800af98 <xQueueGenericReset+0x34>
 800af9e:	e7e5      	b.n	800af6c <xQueueGenericReset+0x8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afa0:	6923      	ldr	r3, [r4, #16]
 800afa2:	b183      	cbz	r3, 800afc6 <xQueueGenericReset+0x62>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800afa4:	f104 0010 	add.w	r0, r4, #16
 800afa8:	f7ff fe42 	bl	800ac30 <xTaskRemoveFromEventList>
 800afac:	2801      	cmp	r0, #1
 800afae:	d10a      	bne.n	800afc6 <xQueueGenericReset+0x62>
				{
					portYIELD_WITHIN_API();
 800afb0:	f7ff f9d6 	bl	800a360 <vPortYield>
 800afb4:	e007      	b.n	800afc6 <xQueueGenericReset+0x62>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800afb6:	f104 0010 	add.w	r0, r4, #16
 800afba:	f7ff ff15 	bl	800ade8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800afbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800afc2:	f7ff ff11 	bl	800ade8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800afc6:	f7ff fa03 	bl	800a3d0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800afca:	2001      	movs	r0, #1
 800afcc:	b003      	add	sp, #12
 800afce:	bd30      	pop	{r4, r5, pc}

0800afd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 800afd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afd2:	460e      	mov	r6, r1
 800afd4:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 800afd6:	4605      	mov	r5, r0
 800afd8:	b1b8      	cbz	r0, 800b00a <xQueueGenericCreate+0x3a>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 800afda:	2050      	movs	r0, #80	; 0x50
 800afdc:	f7ff fad8 	bl	800a590 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800afe0:	4604      	mov	r4, r0
 800afe2:	b190      	cbz	r0, 800b00a <xQueueGenericCreate+0x3a>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 800afe4:	fb06 f005 	mul.w	r0, r6, r5
 800afe8:	3001      	adds	r0, #1
 800afea:	f7ff fad1 	bl	800a590 <pvPortMalloc>
 800afee:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
 800aff0:	b140      	cbz	r0, 800b004 <xQueueGenericCreate+0x34>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 800aff2:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 800aff4:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aff6:	2101      	movs	r1, #1
 800aff8:	4620      	mov	r0, r4
 800affa:	f7ff ffb3 	bl	800af64 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 800affe:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
 800b002:	e007      	b.n	800b014 <xQueueGenericCreate+0x44>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 800b004:	4620      	mov	r0, r4
 800b006:	f7ff fb2f 	bl	800a668 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 800b00a:	2301      	movs	r3, #1
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	9c01      	ldr	r4, [sp, #4]
 800b010:	2c00      	cmp	r4, #0
 800b012:	d1fc      	bne.n	800b00e <xQueueGenericCreate+0x3e>

	return xReturn;
}
 800b014:	4620      	mov	r0, r4
 800b016:	b003      	add	sp, #12
 800b018:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b01a <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 800b01a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b01e:	b089      	sub	sp, #36	; 0x24
 800b020:	4688      	mov	r8, r1
 800b022:	9201      	str	r2, [sp, #4]
 800b024:	461e      	mov	r6, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;

	configASSERT( pxQueue );
 800b026:	4604      	mov	r4, r0
 800b028:	b118      	cbz	r0, 800b032 <xQueueGenericSend+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800b02a:	f1b8 0f00 	cmp.w	r8, #0
 800b02e:	d10d      	bne.n	800b04c <xQueueGenericSend+0x32>
 800b030:	e005      	b.n	800b03e <xQueueGenericSend+0x24>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;

	configASSERT( pxQueue );
 800b032:	2301      	movs	r3, #1
 800b034:	9303      	str	r3, [sp, #12]
 800b036:	9b03      	ldr	r3, [sp, #12]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1fc      	bne.n	800b036 <xQueueGenericSend+0x1c>
 800b03c:	e7f5      	b.n	800b02a <xQueueGenericSend+0x10>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800b03e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b040:	b123      	cbz	r3, 800b04c <xQueueGenericSend+0x32>
 800b042:	2301      	movs	r3, #1
 800b044:	9304      	str	r3, [sp, #16]
 800b046:	9b04      	ldr	r3, [sp, #16]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1fc      	bne.n	800b046 <xQueueGenericSend+0x2c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b04c:	2e02      	cmp	r6, #2
 800b04e:	d107      	bne.n	800b060 <xQueueGenericSend+0x46>
 800b050:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b052:	2b01      	cmp	r3, #1
 800b054:	d004      	beq.n	800b060 <xQueueGenericSend+0x46>
 800b056:	2301      	movs	r3, #1
 800b058:	9305      	str	r3, [sp, #20]
 800b05a:	9b05      	ldr	r3, [sp, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d1fc      	bne.n	800b05a <xQueueGenericSend+0x40>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 800b060:	2700      	movs	r7, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 800b062:	46b9      	mov	r9, r7
 800b064:	e02f      	b.n	800b0c6 <xQueueGenericSend+0xac>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
 800b066:	b917      	cbnz	r7, 800b06e <xQueueGenericSend+0x54>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800b068:	a806      	add	r0, sp, #24
 800b06a:	f7ff fe17 	bl	800ac9c <vTaskSetTimeOutState>
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 800b06e:	f7ff f9af 	bl	800a3d0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b072:	f7ff fc49 	bl	800a908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b076:	f7ff f999 	bl	800a3ac <vPortEnterCritical>
 800b07a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b07c:	3301      	adds	r3, #1
 800b07e:	bf08      	it	eq
 800b080:	f8c4 9044 	streq.w	r9, [r4, #68]	; 0x44
 800b084:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b086:	3301      	adds	r3, #1
 800b088:	bf08      	it	eq
 800b08a:	f8c4 9048 	streq.w	r9, [r4, #72]	; 0x48
 800b08e:	f7ff f99f 	bl	800a3d0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b092:	a901      	add	r1, sp, #4
 800b094:	a806      	add	r0, sp, #24
 800b096:	f7ff fe13 	bl	800acc0 <xTaskCheckForTimeOut>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d13e      	bne.n	800b11c <xQueueGenericSend+0x102>

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 800b09e:	f7ff f985 	bl	800a3ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0a2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800b0a4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b0a6:	f7ff f993 	bl	800a3d0 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b0aa:	42af      	cmp	r7, r5
 800b0ac:	d130      	bne.n	800b110 <xQueueGenericSend+0xf6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b0ae:	9901      	ldr	r1, [sp, #4]
 800b0b0:	f104 0010 	add.w	r0, r4, #16
 800b0b4:	f7ff fd98 	bl	800abe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f7ff ff1f 	bl	800aefc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b0be:	f7ff fcbb 	bl	800aa38 <xTaskResumeAll>
 800b0c2:	b310      	cbz	r0, 800b10a <xQueueGenericSend+0xf0>
 800b0c4:	2701      	movs	r7, #1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0c6:	f7ff f971 	bl	800a3ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b0cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d301      	bcc.n	800b0d6 <xQueueGenericSend+0xbc>
 800b0d2:	2e02      	cmp	r6, #2
 800b0d4:	d112      	bne.n	800b0fc <xQueueGenericSend+0xe2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0d6:	4632      	mov	r2, r6
 800b0d8:	4641      	mov	r1, r8
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f7ff fec8 	bl	800ae70 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0e2:	b13b      	cbz	r3, 800b0f4 <xQueueGenericSend+0xda>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800b0e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b0e8:	f7ff fda2 	bl	800ac30 <xTaskRemoveFromEventList>
 800b0ec:	2801      	cmp	r0, #1
 800b0ee:	d101      	bne.n	800b0f4 <xQueueGenericSend+0xda>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 800b0f0:	f7ff f936 	bl	800a360 <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b0f4:	f7ff f96c 	bl	800a3d0 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 800b0f8:	2001      	movs	r0, #1
 800b0fa:	e015      	b.n	800b128 <xQueueGenericSend+0x10e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800b0fc:	9d01      	ldr	r5, [sp, #4]
 800b0fe:	2d00      	cmp	r5, #0
 800b100:	d1b1      	bne.n	800b066 <xQueueGenericSend+0x4c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b102:	f7ff f965 	bl	800a3d0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b106:	4628      	mov	r0, r5
 800b108:	e00e      	b.n	800b128 <xQueueGenericSend+0x10e>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 800b10a:	f7ff f929 	bl	800a360 <vPortYield>
 800b10e:	e7d9      	b.n	800b0c4 <xQueueGenericSend+0xaa>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b110:	4620      	mov	r0, r4
 800b112:	f7ff fef3 	bl	800aefc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b116:	f7ff fc8f 	bl	800aa38 <xTaskResumeAll>
 800b11a:	e7d3      	b.n	800b0c4 <xQueueGenericSend+0xaa>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b11c:	4620      	mov	r0, r4
 800b11e:	f7ff feed 	bl	800aefc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b122:	f7ff fc89 	bl	800aa38 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b126:	2000      	movs	r0, #0
		}
	}
}
 800b128:	b009      	add	sp, #36	; 0x24
 800b12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b12e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
 800b12e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b130:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 800b132:	2050      	movs	r0, #80	; 0x50
 800b134:	f7ff fa2c 	bl	800a590 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800b138:	4604      	mov	r4, r0
 800b13a:	b1e0      	cbz	r0, 800b176 <xQueueCreateMutex+0x48>

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 800b13c:	2301      	movs	r3, #1
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800b13e:	2500      	movs	r5, #0

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 800b140:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 800b142:	f04f 33ff 	mov.w	r3, #4294967295
			pxNewQueue->u.pcReadFrom = NULL;

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 800b146:	6385      	str	r5, [r0, #56]	; 0x38
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800b148:	6045      	str	r5, [r0, #4]
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 800b14a:	6443      	str	r3, [r0, #68]	; 0x44
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b14c:	6005      	str	r5, [r0, #0]
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;
 800b14e:	6483      	str	r3, [r0, #72]	; 0x48
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 800b150:	6085      	str	r5, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 800b152:	60c5      	str	r5, [r0, #12]
			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 800b154:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
 800b156:	f880 604d 	strb.w	r6, [r0, #77]	; 0x4d
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 800b15a:	3010      	adds	r0, #16
 800b15c:	f7ff fe44 	bl	800ade8 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 800b160:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b164:	f7ff fe40 	bl	800ade8 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 800b168:	462b      	mov	r3, r5
 800b16a:	462a      	mov	r2, r5
 800b16c:	4629      	mov	r1, r5
 800b16e:	4620      	mov	r0, r4
 800b170:	f7ff ff53 	bl	800b01a <xQueueGenericSend>
 800b174:	e004      	b.n	800b180 <xQueueCreateMutex+0x52>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
 800b176:	2301      	movs	r3, #1
 800b178:	9301      	str	r3, [sp, #4]
 800b17a:	9b01      	ldr	r3, [sp, #4]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1fc      	bne.n	800b17a <xQueueCreateMutex+0x4c>
		return pxNewQueue;
	}
 800b180:	4620      	mov	r0, r4
 800b182:	b002      	add	sp, #8
 800b184:	bd70      	pop	{r4, r5, r6, pc}

0800b186 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 800b186:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b18a:	4688      	mov	r8, r1
 800b18c:	4616      	mov	r6, r2
 800b18e:	461d      	mov	r5, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;

	configASSERT( pxQueue );
 800b190:	4604      	mov	r4, r0
 800b192:	b118      	cbz	r0, 800b19c <xQueueGenericSendFromISR+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800b194:	f1b8 0f00 	cmp.w	r8, #0
 800b198:	d10d      	bne.n	800b1b6 <xQueueGenericSendFromISR+0x30>
 800b19a:	e005      	b.n	800b1a8 <xQueueGenericSendFromISR+0x22>
{
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;

	configASSERT( pxQueue );
 800b19c:	2301      	movs	r3, #1
 800b19e:	9301      	str	r3, [sp, #4]
 800b1a0:	9b01      	ldr	r3, [sp, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1fc      	bne.n	800b1a0 <xQueueGenericSendFromISR+0x1a>
 800b1a6:	e7f5      	b.n	800b194 <xQueueGenericSendFromISR+0xe>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800b1a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1aa:	b123      	cbz	r3, 800b1b6 <xQueueGenericSendFromISR+0x30>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	9302      	str	r3, [sp, #8]
 800b1b0:	9b02      	ldr	r3, [sp, #8]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1fc      	bne.n	800b1b0 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1b6:	2d02      	cmp	r5, #2
 800b1b8:	d107      	bne.n	800b1ca <xQueueGenericSendFromISR+0x44>
 800b1ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d004      	beq.n	800b1ca <xQueueGenericSendFromISR+0x44>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	9303      	str	r3, [sp, #12]
 800b1c4:	9b03      	ldr	r3, [sp, #12]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1fc      	bne.n	800b1c4 <xQueueGenericSendFromISR+0x3e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1ca:	f7ff f997 	bl	800a4fc <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1ce:	f7ff f8d3 	bl	800a378 <ulPortSetInterruptMask>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b1d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b1d6:	429a      	cmp	r2, r3
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1d8:	4607      	mov	r7, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1da:	d301      	bcc.n	800b1e0 <xQueueGenericSendFromISR+0x5a>
 800b1dc:	2d02      	cmp	r5, #2
 800b1de:	d117      	bne.n	800b210 <xQueueGenericSendFromISR+0x8a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1e0:	462a      	mov	r2, r5
 800b1e2:	4641      	mov	r1, r8
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f7ff fe43 	bl	800ae70 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 800b1ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	d10a      	bne.n	800b206 <xQueueGenericSendFromISR+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1f2:	b15b      	cbz	r3, 800b20c <xQueueGenericSendFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b1f8:	f7ff fd1a 	bl	800ac30 <xTaskRemoveFromEventList>
 800b1fc:	b130      	cbz	r0, 800b20c <xQueueGenericSendFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b1fe:	b12e      	cbz	r6, 800b20c <xQueueGenericSendFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b200:	2401      	movs	r4, #1
 800b202:	6034      	str	r4, [r6, #0]
 800b204:	e005      	b.n	800b212 <xQueueGenericSendFromISR+0x8c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 800b206:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b208:	3301      	adds	r3, #1
 800b20a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 800b20c:	2401      	movs	r4, #1
 800b20e:	e000      	b.n	800b212 <xQueueGenericSendFromISR+0x8c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b210:	2400      	movs	r4, #0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b212:	4638      	mov	r0, r7
 800b214:	f7ff f8d8 	bl	800a3c8 <vPortClearInterruptMask>

	return xReturn;
}
 800b218:	4620      	mov	r0, r4
 800b21a:	b004      	add	sp, #16
 800b21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b220 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 800b220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b224:	b087      	sub	sp, #28
 800b226:	460f      	mov	r7, r1
 800b228:	9201      	str	r2, [sp, #4]
 800b22a:	4699      	mov	r9, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;

	configASSERT( pxQueue );
 800b22c:	4604      	mov	r4, r0
 800b22e:	b108      	cbz	r0, 800b234 <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800b230:	b96f      	cbnz	r7, 800b24e <xQueueGenericReceive+0x2e>
 800b232:	e005      	b.n	800b240 <xQueueGenericReceive+0x20>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;

	configASSERT( pxQueue );
 800b234:	2301      	movs	r3, #1
 800b236:	9302      	str	r3, [sp, #8]
 800b238:	9b02      	ldr	r3, [sp, #8]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1fc      	bne.n	800b238 <xQueueGenericReceive+0x18>
 800b23e:	e7f7      	b.n	800b230 <xQueueGenericReceive+0x10>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800b240:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b242:	b123      	cbz	r3, 800b24e <xQueueGenericReceive+0x2e>
 800b244:	2301      	movs	r3, #1
 800b246:	9303      	str	r3, [sp, #12]
 800b248:	9b03      	ldr	r3, [sp, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1fc      	bne.n	800b248 <xQueueGenericReceive+0x28>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 800b24e:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 800b250:	46b0      	mov	r8, r6
 800b252:	e038      	b.n	800b2c6 <xQueueGenericReceive+0xa6>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
 800b254:	b916      	cbnz	r6, 800b25c <xQueueGenericReceive+0x3c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800b256:	a804      	add	r0, sp, #16
 800b258:	f7ff fd20 	bl	800ac9c <vTaskSetTimeOutState>
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 800b25c:	f7ff f8b8 	bl	800a3d0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b260:	f7ff fb52 	bl	800a908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b264:	f7ff f8a2 	bl	800a3ac <vPortEnterCritical>
 800b268:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b26a:	3301      	adds	r3, #1
 800b26c:	bf08      	it	eq
 800b26e:	f8c4 8044 	streq.w	r8, [r4, #68]	; 0x44
 800b272:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b274:	3301      	adds	r3, #1
 800b276:	bf08      	it	eq
 800b278:	f8c4 8048 	streq.w	r8, [r4, #72]	; 0x48
 800b27c:	f7ff f8a8 	bl	800a3d0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b280:	a901      	add	r1, sp, #4
 800b282:	a804      	add	r0, sp, #16
 800b284:	f7ff fd1c 	bl	800acc0 <xTaskCheckForTimeOut>
 800b288:	2800      	cmp	r0, #0
 800b28a:	d158      	bne.n	800b33e <xQueueGenericReceive+0x11e>

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 800b28c:	f7ff f88e 	bl	800a3ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 800b290:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b292:	f7ff f89d 	bl	800a3d0 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b296:	2d00      	cmp	r5, #0
 800b298:	d14b      	bne.n	800b332 <xQueueGenericReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b29a:	6823      	ldr	r3, [r4, #0]
 800b29c:	b933      	cbnz	r3, 800b2ac <xQueueGenericReceive+0x8c>
					{
						portENTER_CRITICAL();
 800b29e:	f7ff f885 	bl	800a3ac <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800b2a2:	6860      	ldr	r0, [r4, #4]
 800b2a4:	f7ff fd4e 	bl	800ad44 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 800b2a8:	f7ff f892 	bl	800a3d0 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2ac:	9901      	ldr	r1, [sp, #4]
 800b2ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b2b2:	f7ff fc99 	bl	800abe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f7ff fe20 	bl	800aefc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2bc:	f7ff fbbc 	bl	800aa38 <xTaskResumeAll>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d033      	beq.n	800b32c <xQueueGenericReceive+0x10c>
 800b2c4:	2601      	movs	r6, #1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2c6:	f7ff f871 	bl	800a3ac <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 800b2ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b2cc:	b33b      	cbz	r3, 800b31e <xQueueGenericReceive+0xfe>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	4620      	mov	r0, r4
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800b2d2:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2d4:	f7ff fdff 	bl	800aed6 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800b2d8:	f1b9 0f00 	cmp.w	r9, #0
 800b2dc:	d112      	bne.n	800b304 <xQueueGenericReceive+0xe4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 800b2de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	b913      	cbnz	r3, 800b2ee <xQueueGenericReceive+0xce>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 800b2e8:	f7ff fd26 	bl	800ad38 <xTaskGetCurrentTaskHandle>
 800b2ec:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2ee:	6923      	ldr	r3, [r4, #16]
 800b2f0:	b18b      	cbz	r3, 800b316 <xQueueGenericReceive+0xf6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800b2f2:	f104 0010 	add.w	r0, r4, #16
 800b2f6:	f7ff fc9b 	bl	800ac30 <xTaskRemoveFromEventList>
 800b2fa:	2801      	cmp	r0, #1
 800b2fc:	d10b      	bne.n	800b316 <xQueueGenericReceive+0xf6>
						{
							portYIELD_WITHIN_API();
 800b2fe:	f7ff f82f 	bl	800a360 <vPortYield>
 800b302:	e008      	b.n	800b316 <xQueueGenericReceive+0xf6>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b304:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800b306:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b308:	b12b      	cbz	r3, 800b316 <xQueueGenericReceive+0xf6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b30a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b30e:	f7ff fc8f 	bl	800ac30 <xTaskRemoveFromEventList>
 800b312:	2800      	cmp	r0, #0
 800b314:	d1f3      	bne.n	800b2fe <xQueueGenericReceive+0xde>
							portYIELD_WITHIN_API();
						}
					}
				}

				taskEXIT_CRITICAL();
 800b316:	f7ff f85b 	bl	800a3d0 <vPortExitCritical>
				return pdPASS;
 800b31a:	2001      	movs	r0, #1
 800b31c:	e015      	b.n	800b34a <xQueueGenericReceive+0x12a>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800b31e:	9d01      	ldr	r5, [sp, #4]
 800b320:	2d00      	cmp	r5, #0
 800b322:	d197      	bne.n	800b254 <xQueueGenericReceive+0x34>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b324:	f7ff f854 	bl	800a3d0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b328:	4628      	mov	r0, r5
 800b32a:	e00e      	b.n	800b34a <xQueueGenericReceive+0x12a>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 800b32c:	f7ff f818 	bl	800a360 <vPortYield>
 800b330:	e7c8      	b.n	800b2c4 <xQueueGenericReceive+0xa4>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b332:	4620      	mov	r0, r4
 800b334:	f7ff fde2 	bl	800aefc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b338:	f7ff fb7e 	bl	800aa38 <xTaskResumeAll>
 800b33c:	e7c2      	b.n	800b2c4 <xQueueGenericReceive+0xa4>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800b33e:	4620      	mov	r0, r4
 800b340:	f7ff fddc 	bl	800aefc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b344:	f7ff fb78 	bl	800aa38 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 800b348:	2000      	movs	r0, #0
		}
	}
}
 800b34a:	b007      	add	sp, #28
 800b34c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b350 <moduleTask>:
  taskEXIT_CRITICAL();
  return (status == pdTRUE) ? 0 : -1;
}

static void moduleTask(void *pvParameters)
{
 800b350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b352:	4604      	mov	r4, r0
  // Get module data
  moduleModule_t *moduleTaskData = (moduleModule_t *) pvParameters;
  queueMessage_t message;

  taskWaitInit();
 800b354:	f7fd fb50 	bl	80089f8 <taskWaitInit>

  if(moduleTaskData->initCallback)
 800b358:	68e3      	ldr	r3, [r4, #12]
 800b35a:	b10b      	cbz	r3, 800b360 <moduleTask+0x10>
    moduleTaskData->initCallback(moduleTaskData->privateData);
 800b35c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b35e:	4798      	blx	r3

  while(1)
    {
      //receive a command from the queue. Wait only a specified time.
      if (xQueueReceive(moduleTaskData->queueHandle, (void *)&message, moduleTaskData->timeout) == pdTRUE)
 800b360:	2300      	movs	r3, #0
 800b362:	6862      	ldr	r2, [r4, #4]
 800b364:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b366:	a902      	add	r1, sp, #8
 800b368:	f7ff ff5a 	bl	800b220 <xQueueGenericReceive>
 800b36c:	2801      	cmp	r0, #1
 800b36e:	d120      	bne.n	800b3b2 <moduleTask+0x62>
        {
          moduleTaskData->dequeues++;
 800b370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b372:	3301      	adds	r3, #1
 800b374:	63e3      	str	r3, [r4, #60]	; 0x3c
          massert(message.command >=0 && message.command < moduleTaskData->commandsNum);
 800b376:	9b02      	ldr	r3, [sp, #8]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	db07      	blt.n	800b38c <moduleTask+0x3c>
 800b37c:	68a2      	ldr	r2, [r4, #8]
 800b37e:	4293      	cmp	r3, r2
 800b380:	da04      	bge.n	800b38c <moduleTask+0x3c>
          if (moduleTaskData->commandsNum > message.command && moduleTaskData->commandCallback
 800b382:	9a02      	ldr	r2, [sp, #8]
 800b384:	68a3      	ldr	r3, [r4, #8]
 800b386:	4293      	cmp	r3, r2
 800b388:	dc0c      	bgt.n	800b3a4 <moduleTask+0x54>
 800b38a:	e016      	b.n	800b3ba <moduleTask+0x6a>
    {
      //receive a command from the queue. Wait only a specified time.
      if (xQueueReceive(moduleTaskData->queueHandle, (void *)&message, moduleTaskData->timeout) == pdTRUE)
        {
          moduleTaskData->dequeues++;
          massert(message.command >=0 && message.command < moduleTaskData->commandsNum);
 800b38c:	4b0d      	ldr	r3, [pc, #52]	; (800b3c4 <moduleTask+0x74>)
 800b38e:	490e      	ldr	r1, [pc, #56]	; (800b3c8 <moduleTask+0x78>)
 800b390:	480e      	ldr	r0, [pc, #56]	; (800b3cc <moduleTask+0x7c>)
 800b392:	224b      	movs	r2, #75	; 0x4b
 800b394:	f7fd fc48 	bl	8008c28 <xprintf>
 800b398:	2301      	movs	r3, #1
 800b39a:	9301      	str	r3, [sp, #4]
 800b39c:	9b01      	ldr	r3, [sp, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1fc      	bne.n	800b39c <moduleTask+0x4c>
 800b3a2:	e7ee      	b.n	800b382 <moduleTask+0x32>
          if (moduleTaskData->commandsNum > message.command && moduleTaskData->commandCallback
 800b3a4:	6923      	ldr	r3, [r4, #16]
 800b3a6:	b143      	cbz	r3, 800b3ba <moduleTask+0x6a>
              && moduleTaskData->commandCallback[message.command])
 800b3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ac:	b12b      	cbz	r3, 800b3ba <moduleTask+0x6a>
            moduleTaskData->commandCallback[message.command] (message.data);
 800b3ae:	9803      	ldr	r0, [sp, #12]
 800b3b0:	e002      	b.n	800b3b8 <moduleTask+0x68>
        }
      else
        {
          //Timeout. No command received in the specified time
          if (moduleTaskData->timeoutCallback)
 800b3b2:	6963      	ldr	r3, [r4, #20]
 800b3b4:	b10b      	cbz	r3, 800b3ba <moduleTask+0x6a>
            moduleTaskData->timeoutCallback(moduleTaskData);
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	4798      	blx	r3
        }

      //Either timeout or command
      if (moduleTaskData->alwaysCallback)
 800b3ba:	69a3      	ldr	r3, [r4, #24]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d0cf      	beq.n	800b360 <moduleTask+0x10>
        moduleTaskData->alwaysCallback(moduleTaskData);
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	e7cc      	b.n	800b35e <moduleTask+0xe>
 800b3c4:	0801d634 	.word	0x0801d634
 800b3c8:	0801d60c 	.word	0x0801d60c
 800b3cc:	0801d5dd 	.word	0x0801d5dd

0800b3d0 <moduleSendCommand>:
  int command;
  void *data;
} queueMessage_t;

int moduleSendCommand(moduleModule_t * moduleTaskData, int command, void *data)
{
 800b3d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (moduleTaskData->queueHandle == NULL)
 800b3d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  int command;
  void *data;
} queueMessage_t;

int moduleSendCommand(moduleModule_t * moduleTaskData, int command, void *data)
{
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	460d      	mov	r5, r1
 800b3d8:	4616      	mov	r6, r2
  if (moduleTaskData->queueHandle == NULL)
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d03f      	beq.n	800b45e <moduleSendCommand+0x8e>
    {
      //Queue not initialized
      //massert(0);
      return -1;
    }
  massert(command >=0 && command < moduleTaskData->commandsNum);
 800b3de:	2900      	cmp	r1, #0
 800b3e0:	db09      	blt.n	800b3f6 <moduleSendCommand+0x26>
 800b3e2:	6883      	ldr	r3, [r0, #8]
 800b3e4:	4299      	cmp	r1, r3
 800b3e6:	da06      	bge.n	800b3f6 <moduleSendCommand+0x26>
  queueMessage_t message =
 800b3e8:	9502      	str	r5, [sp, #8]
 800b3ea:	9603      	str	r6, [sp, #12]
    .data = data,
  };
  portBASE_TYPE status;

  //Check if this is a call from interrupt and use proper enqueue
  if (amIInIRQ())
 800b3ec:	f7fd f95a 	bl	80086a4 <amIInIRQ>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	b960      	cbnz	r0, 800b40e <moduleSendCommand+0x3e>
 800b3f4:	e01b      	b.n	800b42e <moduleSendCommand+0x5e>
    {
      //Queue not initialized
      //massert(0);
      return -1;
    }
  massert(command >=0 && command < moduleTaskData->commandsNum);
 800b3f6:	4b1c      	ldr	r3, [pc, #112]	; (800b468 <moduleSendCommand+0x98>)
 800b3f8:	491c      	ldr	r1, [pc, #112]	; (800b46c <moduleSendCommand+0x9c>)
 800b3fa:	481d      	ldr	r0, [pc, #116]	; (800b470 <moduleSendCommand+0xa0>)
 800b3fc:	221b      	movs	r2, #27
 800b3fe:	f7fd fc13 	bl	8008c28 <xprintf>
 800b402:	2301      	movs	r3, #1
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	9b00      	ldr	r3, [sp, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1fc      	bne.n	800b406 <moduleSendCommand+0x36>
 800b40c:	e7ec      	b.n	800b3e8 <moduleSendCommand+0x18>
  portBASE_TYPE status;

  //Check if this is a call from interrupt and use proper enqueue
  if (amIInIRQ())
    {
      portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800b40e:	aa04      	add	r2, sp, #16
 800b410:	2300      	movs	r3, #0
 800b412:	f842 3d0c 	str.w	r3, [r2, #-12]!

      status = xQueueSendFromISR(moduleTaskData->queueHandle, &message, &xHigherPriorityTaskWoken);
 800b416:	a902      	add	r1, sp, #8
 800b418:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b41a:	f7ff feb4 	bl	800b186 <xQueueGenericSendFromISR>

      //Switch context if necessary
      portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800b41e:	9b01      	ldr	r3, [sp, #4]
  //Check if this is a call from interrupt and use proper enqueue
  if (amIInIRQ())
    {
      portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;

      status = xQueueSendFromISR(moduleTaskData->queueHandle, &message, &xHigherPriorityTaskWoken);
 800b420:	4605      	mov	r5, r0

      //Switch context if necessary
      portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800b422:	b153      	cbz	r3, 800b43a <moduleSendCommand+0x6a>
 800b424:	4b13      	ldr	r3, [pc, #76]	; (800b474 <moduleSendCommand+0xa4>)
 800b426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	e005      	b.n	800b43a <moduleSendCommand+0x6a>
    }
  else
    {
      status = xQueueSend(moduleTaskData->queueHandle, &message, 0 /*Do not wait for a free entry */ );
 800b42e:	4602      	mov	r2, r0
 800b430:	a902      	add	r1, sp, #8
 800b432:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b434:	f7ff fdf1 	bl	800b01a <xQueueGenericSend>
 800b438:	4605      	mov	r5, r0
    }
  taskENTER_CRITICAL();
 800b43a:	f7fe ffb7 	bl	800a3ac <vPortEnterCritical>
  if(status)
 800b43e:	b11d      	cbz	r5, 800b448 <moduleSendCommand+0x78>
    moduleTaskData->enqueues++;
 800b440:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b442:	3301      	adds	r3, #1
 800b444:	6363      	str	r3, [r4, #52]	; 0x34
 800b446:	e002      	b.n	800b44e <moduleSendCommand+0x7e>
  else
    moduleTaskData->fenqueues++;
 800b448:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b44a:	3301      	adds	r3, #1
 800b44c:	63a3      	str	r3, [r4, #56]	; 0x38
  taskEXIT_CRITICAL();
 800b44e:	f7fe ffbf 	bl	800a3d0 <vPortExitCritical>
  return (status == pdTRUE) ? 0 : -1;
 800b452:	f115 30ff 	adds.w	r0, r5, #4294967295
 800b456:	bf18      	it	ne
 800b458:	f04f 30ff 	movne.w	r0, #4294967295
 800b45c:	e001      	b.n	800b462 <moduleSendCommand+0x92>
{
  if (moduleTaskData->queueHandle == NULL)
    {
      //Queue not initialized
      //massert(0);
      return -1;
 800b45e:	f04f 30ff 	mov.w	r0, #4294967295
    moduleTaskData->enqueues++;
  else
    moduleTaskData->fenqueues++;
  taskEXIT_CRITICAL();
  return (status == pdTRUE) ? 0 : -1;
}
 800b462:	b004      	add	sp, #16
 800b464:	bd70      	pop	{r4, r5, r6, pc}
 800b466:	bf00      	nop
 800b468:	0801d679 	.word	0x0801d679
 800b46c:	0801d617 	.word	0x0801d617
 800b470:	0801d5dd 	.word	0x0801d5dd
 800b474:	e000ed04 	.word	0xe000ed04

0800b478 <moduleInit>:
        moduleTaskData->alwaysCallback(moduleTaskData);
    }
}

void moduleInit(moduleModule_t * moduleTaskData)
{
 800b478:	b510      	push	{r4, lr}
  //Create a queue for command reception
  massert((moduleTaskData->queueHandle = xQueueCreate(moduleTaskData->queueLength, sizeof(queueMessage_t))));
 800b47a:	2200      	movs	r2, #0
        moduleTaskData->alwaysCallback(moduleTaskData);
    }
}

void moduleInit(moduleModule_t * moduleTaskData)
{
 800b47c:	4604      	mov	r4, r0
 800b47e:	b086      	sub	sp, #24
  //Create a queue for command reception
  massert((moduleTaskData->queueHandle = xQueueCreate(moduleTaskData->queueLength, sizeof(queueMessage_t))));
 800b480:	2108      	movs	r1, #8
 800b482:	6800      	ldr	r0, [r0, #0]
 800b484:	f7ff fda4 	bl	800afd0 <xQueueGenericCreate>
 800b488:	62e0      	str	r0, [r4, #44]	; 0x2c
 800b48a:	b1d8      	cbz	r0, 800b4c4 <moduleInit+0x4c>

  //Create the task
  massert(xTaskGenericCreate(moduleTask,
 800b48c:	6a23      	ldr	r3, [r4, #32]
 800b48e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b490:	9102      	str	r1, [sp, #8]
 800b492:	2204      	movs	r2, #4
 800b494:	fb93 f2f2 	sdiv	r2, r3, r2
 800b498:	2300      	movs	r3, #0
 800b49a:	9303      	str	r3, [sp, #12]
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	69e3      	ldr	r3, [r4, #28]
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	b292      	uxth	r2, r2
 800b4a4:	4623      	mov	r3, r4
 800b4a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b4a8:	480f      	ldr	r0, [pc, #60]	; (800b4e8 <moduleInit+0x70>)
 800b4aa:	f7ff f939 	bl	800a720 <xTaskGenericCreate>
 800b4ae:	2801      	cmp	r0, #1
 800b4b0:	d017      	beq.n	800b4e2 <moduleInit+0x6a>
 800b4b2:	4b0e      	ldr	r3, [pc, #56]	; (800b4ec <moduleInit+0x74>)
 800b4b4:	490e      	ldr	r1, [pc, #56]	; (800b4f0 <moduleInit+0x78>)
 800b4b6:	480f      	ldr	r0, [pc, #60]	; (800b4f4 <moduleInit+0x7c>)
 800b4b8:	2265      	movs	r2, #101	; 0x65
 800b4ba:	f7fd fbb5 	bl	8008c28 <xprintf>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	9305      	str	r3, [sp, #20]
 800b4c2:	e00b      	b.n	800b4dc <moduleInit+0x64>
}

void moduleInit(moduleModule_t * moduleTaskData)
{
  //Create a queue for command reception
  massert((moduleTaskData->queueHandle = xQueueCreate(moduleTaskData->queueLength, sizeof(queueMessage_t))));
 800b4c4:	4b0c      	ldr	r3, [pc, #48]	; (800b4f8 <moduleInit+0x80>)
 800b4c6:	490a      	ldr	r1, [pc, #40]	; (800b4f0 <moduleInit+0x78>)
 800b4c8:	480a      	ldr	r0, [pc, #40]	; (800b4f4 <moduleInit+0x7c>)
 800b4ca:	2260      	movs	r2, #96	; 0x60
 800b4cc:	f7fd fbac 	bl	8008c28 <xprintf>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	9304      	str	r3, [sp, #16]
 800b4d4:	9b04      	ldr	r3, [sp, #16]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1fc      	bne.n	800b4d4 <moduleInit+0x5c>
 800b4da:	e7d7      	b.n	800b48c <moduleInit+0x14>

  //Create the task
  massert(xTaskGenericCreate(moduleTask,
 800b4dc:	9b05      	ldr	r3, [sp, #20]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1fc      	bne.n	800b4dc <moduleInit+0x64>
                             (signed char *)moduleTaskData->name, moduleTaskData->stackSize/4, (void *)moduleTaskData, moduleTaskData->priority, NULL,
                             moduleTaskData->stack, NULL) == pdPASS);
}
 800b4e2:	b006      	add	sp, #24
 800b4e4:	bd10      	pop	{r4, pc}
 800b4e6:	bf00      	nop
 800b4e8:	0800b351 	.word	0x0800b351
 800b4ec:	0801d710 	.word	0x0801d710
 800b4f0:	0801d629 	.word	0x0801d629
 800b4f4:	0801d5dd 	.word	0x0801d5dd
 800b4f8:	0801d6ae 	.word	0x0801d6ae

0800b4fc <timeOut>:
  dFree(message);
}

/////////////////////////////////////////////////////////////////////
static void timeOut(void *data)
{
 800b4fc:	b508      	push	{r3, lr}
  communicatorPeriodic();
 800b4fe:	f7fd fd45 	bl	8008f8c <communicatorPeriodic>
#ifdef WATCHDOG_COMM
  wdogFeed(WATCHDOG_COMM(0));
 800b502:	2008      	movs	r0, #8
#endif

}
 800b504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/////////////////////////////////////////////////////////////////////
static void timeOut(void *data)
{
  communicatorPeriodic();
#ifdef WATCHDOG_COMM
  wdogFeed(WATCHDOG_COMM(0));
 800b508:	f002 bd9c 	b.w	800e044 <wdogFeed>

0800b50c <commNULL>:

static void commNULL(void *data)
{
  messageCommNULL_t *message = data;

  dFree(message);
 800b50c:	3814      	subs	r0, #20
 800b50e:	f009 bf8f 	b.w	8015430 <bFree>

0800b512 <commPortTxComplete>:
    }
  return 0;
}

static void commPortTxComplete(void *data)
{
 800b512:	b510      	push	{r4, lr}
 800b514:	4604      	mov	r4, r0
  messageTxCompleteData_t *message = data;

  communicatorTxComplete(message->portNum, message->status, message->handle);
 800b516:	6882      	ldr	r2, [r0, #8]
 800b518:	6841      	ldr	r1, [r0, #4]
 800b51a:	7800      	ldrb	r0, [r0, #0]
 800b51c:	f7fd fd35 	bl	8008f8a <communicatorTxComplete>
  dFree(message);
 800b520:	f1a4 0014 	sub.w	r0, r4, #20
}
 800b524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void commPortTxComplete(void *data)
{
  messageTxCompleteData_t *message = data;

  communicatorTxComplete(message->portNum, message->status, message->handle);
  dFree(message);
 800b528:	f009 bf82 	b.w	8015430 <bFree>

0800b52c <commPortRx>:
    }
  return 0;
}

static void commPortRx(void *data)
{
 800b52c:	b510      	push	{r4, lr}
 800b52e:	4604      	mov	r4, r0
  messageRxData_t *message = data;

  communicatorRx(message->portNum, message->buffer, message->bufferSize, message->gen);
 800b530:	7b03      	ldrb	r3, [r0, #12]
 800b532:	6882      	ldr	r2, [r0, #8]
 800b534:	6841      	ldr	r1, [r0, #4]
 800b536:	7800      	ldrb	r0, [r0, #0]
 800b538:	f7fd fbc8 	bl	8008ccc <communicatorRx>
  dFree(message);
 800b53c:	f1a4 0014 	sub.w	r0, r4, #20
}
 800b540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void commPortRx(void *data)
{
  messageRxData_t *message = data;

  communicatorRx(message->portNum, message->buffer, message->bufferSize, message->gen);
  dFree(message);
 800b544:	f009 bf74 	b.w	8015430 <bFree>

0800b548 <CommunicatorInit>:
};

void CommunicatorInit(void)
{
  //Initialize Communicator
  moduleInit(&moduleComm);
 800b548:	4801      	ldr	r0, [pc, #4]	; (800b550 <CommunicatorInit+0x8>)
 800b54a:	f7ff bf95 	b.w	800b478 <moduleInit>
 800b54e:	bf00      	nop
 800b550:	10001ed8 	.word	0x10001ed8

0800b554 <messageRx>:
  uint8_t gen;
} messageRxData_t;

//A function for the port module to send message to the Communicator
int messageRx(portNum_t portNum, char *buffer, int bufferSize, uint8_t gen)
{
 800b554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b558:	4680      	mov	r8, r0
  //Allocate resources for data transfer
  messageRxData_t *message = dAlloc(sizeof(messageRxData_t));
 800b55a:	2010      	movs	r0, #16
  uint8_t gen;
} messageRxData_t;

//A function for the port module to send message to the Communicator
int messageRx(portNum_t portNum, char *buffer, int bufferSize, uint8_t gen)
{
 800b55c:	460f      	mov	r7, r1
 800b55e:	4616      	mov	r6, r2
 800b560:	461d      	mov	r5, r3
  //Allocate resources for data transfer
  messageRxData_t *message = dAlloc(sizeof(messageRxData_t));
 800b562:	f009 fd0b 	bl	8014f7c <bAlloc>
 800b566:	4604      	mov	r4, r0
 800b568:	b180      	cbz	r0, 800b58c <messageRx+0x38>

  if (message == NULL)
    return -1;

  //Fill message
  message->portNum = portNum;
 800b56a:	f880 8014 	strb.w	r8, [r0, #20]
  message->buffer = buffer;
 800b56e:	6187      	str	r7, [r0, #24]
  message->bufferSize = bufferSize;
 800b570:	61c6      	str	r6, [r0, #28]
  message->gen = gen;//Locally generated message
 800b572:	f880 5020 	strb.w	r5, [r0, #32]

  //Send the message to communicator
  if (moduleSendCommand(&moduleComm, CMD_COMM_PORT_RX, message) < 0)
 800b576:	f100 0214 	add.w	r2, r0, #20
 800b57a:	2100      	movs	r1, #0
 800b57c:	4807      	ldr	r0, [pc, #28]	; (800b59c <messageRx+0x48>)
 800b57e:	f7ff ff27 	bl	800b3d0 <moduleSendCommand>
 800b582:	2800      	cmp	r0, #0
 800b584:	da06      	bge.n	800b594 <messageRx+0x40>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 800b586:	4620      	mov	r0, r4
 800b588:	f009 ff52 	bl	8015430 <bFree>
{
  //Allocate resources for data transfer
  messageRxData_t *message = dAlloc(sizeof(messageRxData_t));

  if (message == NULL)
    return -1;
 800b58c:	f04f 30ff 	mov.w	r0, #4294967295
 800b590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      //Sending failed
      //Free allocated resources
      dFree(message);
      return -1;
    }
  return 0;
 800b594:	2000      	movs	r0, #0
}
 800b596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b59a:	bf00      	nop
 800b59c:	10001ed8 	.word	0x10001ed8

0800b5a0 <messageTxComplete>:
  int status;
  uint32_t handle;
} messageTxCompleteData_t;

int messageTxComplete(portNum_t portNum, int status, uint32_t handle)
{
 800b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a2:	4607      	mov	r7, r0
  //Allocate resources for data transfer
  messageTxCompleteData_t *message = dAlloc(sizeof(messageTxCompleteData_t));
 800b5a4:	200c      	movs	r0, #12
  int status;
  uint32_t handle;
} messageTxCompleteData_t;

int messageTxComplete(portNum_t portNum, int status, uint32_t handle)
{
 800b5a6:	460e      	mov	r6, r1
 800b5a8:	4615      	mov	r5, r2
  //Allocate resources for data transfer
  messageTxCompleteData_t *message = dAlloc(sizeof(messageTxCompleteData_t));
 800b5aa:	f009 fce7 	bl	8014f7c <bAlloc>
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	b168      	cbz	r0, 800b5ce <messageTxComplete+0x2e>

  if (message == NULL)
    return -1;

  //Fill message
  message->portNum = portNum;
 800b5b2:	7507      	strb	r7, [r0, #20]
  message->status = status;
 800b5b4:	6186      	str	r6, [r0, #24]
  message->handle = handle;
 800b5b6:	61c5      	str	r5, [r0, #28]

  //Send the message to communicator
  if (moduleSendCommand(&moduleComm, CMD_COMM_PORT_TX_COMPLETE, message) < 0)
 800b5b8:	f100 0214 	add.w	r2, r0, #20
 800b5bc:	2101      	movs	r1, #1
 800b5be:	4806      	ldr	r0, [pc, #24]	; (800b5d8 <messageTxComplete+0x38>)
 800b5c0:	f7ff ff06 	bl	800b3d0 <moduleSendCommand>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	da05      	bge.n	800b5d4 <messageTxComplete+0x34>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f009 ff31 	bl	8015430 <bFree>
{
  //Allocate resources for data transfer
  messageTxCompleteData_t *message = dAlloc(sizeof(messageTxCompleteData_t));

  if (message == NULL)
    return -1;
 800b5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      //Sending failed
      //Free allocated resources
      dFree(message);
      return -1;
    }
  return 0;
 800b5d4:	2000      	movs	r0, #0
}
 800b5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5d8:	10001ed8 	.word	0x10001ed8

0800b5dc <messageCommNULL>:
{
  int null;
} messageCommNULL_t;

int messageCommNULL(void)
{
 800b5dc:	b510      	push	{r4, lr}
  //Allocate resources for data transfer
  messageCommNULL_t *message = dAlloc(sizeof(messageCommNULL_t));
 800b5de:	2004      	movs	r0, #4
 800b5e0:	f009 fccc 	bl	8014f7c <bAlloc>
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	b150      	cbz	r0, 800b5fe <messageCommNULL+0x22>

  if (message == NULL)
    return -1;

  //Send the message to communicator
  if (moduleSendCommand(&moduleComm, CMD_COMM_NULL, message) < 0)
 800b5e8:	f100 0214 	add.w	r2, r0, #20
 800b5ec:	2103      	movs	r1, #3
 800b5ee:	4806      	ldr	r0, [pc, #24]	; (800b608 <messageCommNULL+0x2c>)
 800b5f0:	f7ff feee 	bl	800b3d0 <moduleSendCommand>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	da05      	bge.n	800b604 <messageCommNULL+0x28>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f009 ff19 	bl	8015430 <bFree>
{
  //Allocate resources for data transfer
  messageCommNULL_t *message = dAlloc(sizeof(messageCommNULL_t));

  if (message == NULL)
    return -1;
 800b5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b602:	bd10      	pop	{r4, pc}
      //Sending failed
      //Free allocated resources
      dFree(message);
      return -1;
    }
  return 0;
 800b604:	2000      	movs	r0, #0
}
 800b606:	bd10      	pop	{r4, pc}
 800b608:	10001ed8 	.word	0x10001ed8

0800b60c <communicatorADCMeasure>:

}
void __attribute__((weak)) communicatorADCMeasure(int samplesNum,int sampleSensADC,
    int V1accu, int V2accu,
    int I1max, int V2I1max, int I1accu, int I2accu)
{
 800b60c:	4770      	bx	lr

0800b60e <adcMeasure>:
    }
  return 0;
}

static void adcMeasure(void *data)
{
 800b60e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  messageADCMeasureData_t *message = data;

  communicatorADCMeasure(message->samplesNum, message->sampleSensADC,
 800b610:	69c3      	ldr	r3, [r0, #28]
 800b612:	9303      	str	r3, [sp, #12]
 800b614:	6983      	ldr	r3, [r0, #24]
 800b616:	9302      	str	r3, [sp, #8]
 800b618:	6943      	ldr	r3, [r0, #20]
 800b61a:	9301      	str	r3, [sp, #4]
 800b61c:	6903      	ldr	r3, [r0, #16]
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	4604      	mov	r4, r0
 800b622:	1d01      	adds	r1, r0, #4
 800b624:	c90e      	ldmia	r1, {r1, r2, r3}
 800b626:	f854 0914 	ldr.w	r0, [r4], #-20
 800b62a:	f7ff ffef 	bl	800b60c <communicatorADCMeasure>
                         message->V1accu, message->V2accu,
                         message->I1max, message->V2I1max, message->I1accu, message->I2accu);
  dFree(message);
 800b62e:	4620      	mov	r0, r4
}
 800b630:	b004      	add	sp, #16
 800b632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  messageADCMeasureData_t *message = data;

  communicatorADCMeasure(message->samplesNum, message->sampleSensADC,
                         message->V1accu, message->V2accu,
                         message->I1max, message->V2I1max, message->I1accu, message->I2accu);
  dFree(message);
 800b636:	f009 befb 	b.w	8015430 <bFree>
	...

0800b63c <allEvents>:
}

/////////////////////////////////////////////////////////////////////
//Handle timeouts
static void allEvents(void *data)
{
 800b63c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  (void)data;
  //This function is always called. Regardles of the event type.
#ifdef WATCHDOG_HWCOMM
  wdogFeed(WATCHDOG_HWCOMM(0));
 800b640:	2004      	movs	r0, #4
  //check for receive timeout
  portNum_t portNum;
  int subPortNum;
  for (portNum = 0; portNum < PORTS_NUM; portNum++)
    for (subPortNum = 0; subPortNum < 2; subPortNum++)
      if (PORT_BUFFER.rxBufferSize > 0)
 800b642:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800b720 <allEvents+0xe4>
static void allEvents(void *data)
{
  (void)data;
  //This function is always called. Regardles of the event type.
#ifdef WATCHDOG_HWCOMM
  wdogFeed(WATCHDOG_HWCOMM(0));
 800b646:	f002 fcfd 	bl	800e044 <wdogFeed>
 800b64a:	2600      	movs	r6, #0
 800b64c:	4647      	mov	r7, r8
  //check for receive timeout
  portNum_t portNum;
  int subPortNum;
  for (portNum = 0; portNum < PORTS_NUM; portNum++)
    for (subPortNum = 0; subPortNum < 2; subPortNum++)
      if (PORT_BUFFER.rxBufferSize > 0)
 800b64e:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800b652:	fa5f f986 	uxtb.w	r9, r6
}

/////////////////////////////////////////////////////////////////////
//Handle timeouts
static void allEvents(void *data)
{
 800b656:	2400      	movs	r4, #0
  //check for receive timeout
  portNum_t portNum;
  int subPortNum;
  for (portNum = 0; portNum < PORTS_NUM; portNum++)
    for (subPortNum = 0; subPortNum < 2; subPortNum++)
      if (PORT_BUFFER.rxBufferSize > 0)
 800b658:	4375      	muls	r5, r6
 800b65a:	f04f 0ae0 	mov.w	sl, #224	; 0xe0
 800b65e:	fb0a 5a04 	mla	sl, sl, r4, r5
 800b662:	44c2      	add	sl, r8
 800b664:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	dd48      	ble.n	800b6fe <allEvents+0xc2>
        {
          if (xTaskGetTickCount() - PORT_BUFFER.timestamp > TIMEOUT_DATA_MS)
 800b66c:	f7ff f956 	bl	800a91c <xTaskGetTickCount>
 800b670:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b674:	1ac0      	subs	r0, r0, r3
 800b676:	2814      	cmp	r0, #20
 800b678:	d941      	bls.n	800b6fe <allEvents+0xc2>
            {
              massert(PORT_BUFFER.rxBufferSize > 0);
 800b67a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	dd0c      	ble.n	800b69c <allEvents+0x60>

              //Send the buffer to Communicator
              if (messageRx(portNum, PORT_BUFFER.rxBuffer, PORT_BUFFER.rxBufferSize, 0) >= 0)
 800b682:	21e0      	movs	r1, #224	; 0xe0
 800b684:	fb01 5104 	mla	r1, r1, r4, r5
 800b688:	4439      	add	r1, r7
 800b68a:	2300      	movs	r3, #0
 800b68c:	684a      	ldr	r2, [r1, #4]
 800b68e:	6809      	ldr	r1, [r1, #0]
 800b690:	4648      	mov	r0, r9
 800b692:	f7ff ff5f 	bl	800b554 <messageRx>
 800b696:	2800      	cmp	r0, #0
 800b698:	da0d      	bge.n	800b6b6 <allEvents+0x7a>
 800b69a:	e022      	b.n	800b6e2 <allEvents+0xa6>
    for (subPortNum = 0; subPortNum < 2; subPortNum++)
      if (PORT_BUFFER.rxBufferSize > 0)
        {
          if (xTaskGetTickCount() - PORT_BUFFER.timestamp > TIMEOUT_DATA_MS)
            {
              massert(PORT_BUFFER.rxBufferSize > 0);
 800b69c:	4b1c      	ldr	r3, [pc, #112]	; (800b710 <allEvents+0xd4>)
 800b69e:	491d      	ldr	r1, [pc, #116]	; (800b714 <allEvents+0xd8>)
 800b6a0:	481d      	ldr	r0, [pc, #116]	; (800b718 <allEvents+0xdc>)
 800b6a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b6a6:	f7fd fabf 	bl	8008c28 <xprintf>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	9b00      	ldr	r3, [sp, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1fc      	bne.n	800b6ae <allEvents+0x72>
 800b6b4:	e7e5      	b.n	800b682 <allEvents+0x46>

              //Send the buffer to Communicator
              if (messageRx(portNum, PORT_BUFFER.rxBuffer, PORT_BUFFER.rxBufferSize, 0) >= 0)
                {
                  //Buffer is now owned by Communicator. New one needs to be allocated
                  PORT_BUFFER.rxBuffer = dAlloc(MAX_DATA_SIZE);
 800b6b6:	2020      	movs	r0, #32
 800b6b8:	f009 fc60 	bl	8014f7c <bAlloc>
 800b6bc:	b100      	cbz	r0, 800b6c0 <allEvents+0x84>
 800b6be:	3014      	adds	r0, #20
 800b6c0:	23e0      	movs	r3, #224	; 0xe0
 800b6c2:	fb03 5304 	mla	r3, r3, r4, r5
 800b6c6:	50f8      	str	r0, [r7, r3]
                  massert(PORT_BUFFER.rxBuffer);
 800b6c8:	b958      	cbnz	r0, 800b6e2 <allEvents+0xa6>
 800b6ca:	4b14      	ldr	r3, [pc, #80]	; (800b71c <allEvents+0xe0>)
 800b6cc:	4911      	ldr	r1, [pc, #68]	; (800b714 <allEvents+0xd8>)
 800b6ce:	4812      	ldr	r0, [pc, #72]	; (800b718 <allEvents+0xdc>)
 800b6d0:	f240 1273 	movw	r2, #371	; 0x173
 800b6d4:	f7fd faa8 	bl	8008c28 <xprintf>
 800b6d8:	2301      	movs	r3, #1
 800b6da:	9301      	str	r3, [sp, #4]
 800b6dc:	9b01      	ldr	r3, [sp, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1fc      	bne.n	800b6dc <allEvents+0xa0>
                }
              PORT_BUFFER.rxBufferSize = 0;
 800b6e2:	23e0      	movs	r3, #224	; 0xe0
 800b6e4:	fb03 5304 	mla	r3, r3, r4, r5
 800b6e8:	443b      	add	r3, r7
 800b6ea:	2200      	movs	r2, #0
              PORT_BUFFER.rxExpectedSize = MAX_DATA_SIZE;
 800b6ec:	2020      	movs	r0, #32
                {
                  //Buffer is now owned by Communicator. New one needs to be allocated
                  PORT_BUFFER.rxBuffer = dAlloc(MAX_DATA_SIZE);
                  massert(PORT_BUFFER.rxBuffer);
                }
              PORT_BUFFER.rxBufferSize = 0;
 800b6ee:	711a      	strb	r2, [r3, #4]
 800b6f0:	715a      	strb	r2, [r3, #5]
 800b6f2:	719a      	strb	r2, [r3, #6]
 800b6f4:	71da      	strb	r2, [r3, #7]
              PORT_BUFFER.rxExpectedSize = MAX_DATA_SIZE;
 800b6f6:	7218      	strb	r0, [r3, #8]
 800b6f8:	725a      	strb	r2, [r3, #9]
 800b6fa:	729a      	strb	r2, [r3, #10]
 800b6fc:	72da      	strb	r2, [r3, #11]

  //check for receive timeout
  portNum_t portNum;
  int subPortNum;
  for (portNum = 0; portNum < PORTS_NUM; portNum++)
    for (subPortNum = 0; subPortNum < 2; subPortNum++)
 800b6fe:	3401      	adds	r4, #1
 800b700:	2c02      	cmp	r4, #2
 800b702:	d1aa      	bne.n	800b65a <allEvents+0x1e>
 800b704:	3601      	adds	r6, #1


  //check for receive timeout
  portNum_t portNum;
  int subPortNum;
  for (portNum = 0; portNum < PORTS_NUM; portNum++)
 800b706:	2e09      	cmp	r6, #9
 800b708:	d1a1      	bne.n	800b64e <allEvents+0x12>
                }
              PORT_BUFFER.rxBufferSize = 0;
              PORT_BUFFER.rxExpectedSize = MAX_DATA_SIZE;
            }
        }
}
 800b70a:	b002      	add	sp, #8
 800b70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b710:	0801d84c 	.word	0x0801d84c
 800b714:	0801d7e0 	.word	0x0801d7e0
 800b718:	0801d5dd 	.word	0x0801d5dd
 800b71c:	0801d869 	.word	0x0801d869
 800b720:	20018510 	.word	0x20018510

0800b724 <switchPort>:
  return 0;

}

static void switchPort(void *data)
{
 800b724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  messageSwitchPort_t *message = data;
  portNum_t portNum = message->portNum;
 800b728:	7804      	ldrb	r4, [r0, #0]
  int type = message->type;
 800b72a:	f8d0 7001 	ldr.w	r7, [r0, #1]

  massert(portNum < PORTS_NUM);
 800b72e:	2c08      	cmp	r4, #8
  return 0;

}

static void switchPort(void *data)
{
 800b730:	b087      	sub	sp, #28
 800b732:	4605      	mov	r5, r0
  messageSwitchPort_t *message = data;
  portNum_t portNum = message->portNum;
  int type = message->type;

  massert(portNum < PORTS_NUM);
 800b734:	d814      	bhi.n	800b760 <switchPort+0x3c>
  if(type == portData[portNum].portType)
 800b736:	4e3c      	ldr	r6, [pc, #240]	; (800b828 <switchPort+0x104>)
 800b738:	2350      	movs	r3, #80	; 0x50
 800b73a:	fb03 6304 	mla	r3, r3, r4, r6
 800b73e:	7e1b      	ldrb	r3, [r3, #24]
 800b740:	429f      	cmp	r7, r3
 800b742:	f04f 0300 	mov.w	r3, #0
 800b746:	d06a      	beq.n	800b81e <switchPort+0xfa>
 800b748:	f44f 78e0 	mov.w	r8, #448	; 0x1c0

  int subPortNum;
  for(subPortNum = 0; subPortNum < 2; subPortNum++)
    {
      //Release all buffers
      if(PORT_BUFFER.rxBuffer)
 800b74c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800b838 <switchPort+0x114>
 800b750:	fb08 f204 	mul.w	r2, r8, r4
 800b754:	9201      	str	r2, [sp, #4]
  messageSwitchPort_t *message = data;
  portNum_t portNum = message->portNum;
  int type = message->type;

  massert(portNum < PORTS_NUM);
  if(type == portData[portNum].portType)
 800b756:	4698      	mov	r8, r3

  int subPortNum;
  for(subPortNum = 0; subPortNum < 2; subPortNum++)
    {
      //Release all buffers
      if(PORT_BUFFER.rxBuffer)
 800b758:	f04f 0be0 	mov.w	fp, #224	; 0xe0
 800b75c:	46ca      	mov	sl, r9
 800b75e:	e02f      	b.n	800b7c0 <switchPort+0x9c>
{
  messageSwitchPort_t *message = data;
  portNum_t portNum = message->portNum;
  int type = message->type;

  massert(portNum < PORTS_NUM);
 800b760:	4b32      	ldr	r3, [pc, #200]	; (800b82c <switchPort+0x108>)
 800b762:	4933      	ldr	r1, [pc, #204]	; (800b830 <switchPort+0x10c>)
 800b764:	4833      	ldr	r0, [pc, #204]	; (800b834 <switchPort+0x110>)
 800b766:	f240 12a5 	movw	r2, #421	; 0x1a5
 800b76a:	f7fd fa5d 	bl	8008c28 <xprintf>
 800b76e:	2301      	movs	r3, #1
 800b770:	9305      	str	r3, [sp, #20]
 800b772:	9b05      	ldr	r3, [sp, #20]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1fc      	bne.n	800b772 <switchPort+0x4e>
 800b778:	e7dd      	b.n	800b736 <switchPort+0x12>
          dFree(PORT_BUFFER.rxBuffer);
          PORT_BUFFER.rxBuffer=NULL;
        }
      int txQueueSize;
      for(txQueueSize = 0; txQueueSize < WAIT_QUEUE_SIZE; txQueueSize++)
        if(PORT_BUFFER.txBuffer[txQueueSize])
 800b77a:	2170      	movs	r1, #112	; 0x70
 800b77c:	4361      	muls	r1, r4
 800b77e:	2038      	movs	r0, #56	; 0x38
  messageSwitchPort_t *message = data;
  portNum_t portNum = message->portNum;
  int type = message->type;

  massert(portNum < PORTS_NUM);
  if(type == portData[portNum].portType)
 800b780:	2200      	movs	r2, #0
          dFree(PORT_BUFFER.rxBuffer);
          PORT_BUFFER.rxBuffer=NULL;
        }
      int txQueueSize;
      for(txQueueSize = 0; txQueueSize < WAIT_QUEUE_SIZE; txQueueSize++)
        if(PORT_BUFFER.txBuffer[txQueueSize])
 800b782:	fb00 1108 	mla	r1, r0, r8, r1
 800b786:	1888      	adds	r0, r1, r2
 800b788:	3006      	adds	r0, #6
 800b78a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800b78e:	6840      	ldr	r0, [r0, #4]
 800b790:	b130      	cbz	r0, 800b7a0 <switchPort+0x7c>
          {
            dFree(PORT_BUFFER.txBuffer[txQueueSize]);
 800b792:	3814      	subs	r0, #20
 800b794:	9103      	str	r1, [sp, #12]
 800b796:	9202      	str	r2, [sp, #8]
 800b798:	f009 fe4a 	bl	8015430 <bFree>
 800b79c:	9903      	ldr	r1, [sp, #12]
 800b79e:	9a02      	ldr	r2, [sp, #8]
        {
          dFree(PORT_BUFFER.rxBuffer);
          PORT_BUFFER.rxBuffer=NULL;
        }
      int txQueueSize;
      for(txQueueSize = 0; txQueueSize < WAIT_QUEUE_SIZE; txQueueSize++)
 800b7a0:	3201      	adds	r2, #1
 800b7a2:	2a10      	cmp	r2, #16
 800b7a4:	d1ef      	bne.n	800b786 <switchPort+0x62>
        if(PORT_BUFFER.txBuffer[txQueueSize])
          {
            dFree(PORT_BUFFER.txBuffer[txQueueSize]);
          }
      memset(&PORT_BUFFER, 0, sizeof(portBuffer[0][0]));
 800b7a6:	9b01      	ldr	r3, [sp, #4]
 800b7a8:	fb0b 3008 	mla	r0, fp, r8, r3
 800b7ac:	22e0      	movs	r2, #224	; 0xe0
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	4450      	add	r0, sl
      message->wait = 0;
      return;
    }

  int subPortNum;
  for(subPortNum = 0; subPortNum < 2; subPortNum++)
 800b7b2:	f108 0801 	add.w	r8, r8, #1
      for(txQueueSize = 0; txQueueSize < WAIT_QUEUE_SIZE; txQueueSize++)
        if(PORT_BUFFER.txBuffer[txQueueSize])
          {
            dFree(PORT_BUFFER.txBuffer[txQueueSize]);
          }
      memset(&PORT_BUFFER, 0, sizeof(portBuffer[0][0]));
 800b7b6:	f011 fcdd 	bl	801d174 <memset>
      message->wait = 0;
      return;
    }

  int subPortNum;
  for(subPortNum = 0; subPortNum < 2; subPortNum++)
 800b7ba:	f1b8 0f02 	cmp.w	r8, #2
 800b7be:	d017      	beq.n	800b7f0 <switchPort+0xcc>
    {
      //Release all buffers
      if(PORT_BUFFER.rxBuffer)
 800b7c0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800b7c4:	4362      	muls	r2, r4
 800b7c6:	fb0b 2208 	mla	r2, fp, r8, r2
 800b7ca:	eb09 0102 	add.w	r1, r9, r2
 800b7ce:	9203      	str	r2, [sp, #12]
 800b7d0:	6808      	ldr	r0, [r1, #0]
 800b7d2:	9102      	str	r1, [sp, #8]
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d0d0      	beq.n	800b77a <switchPort+0x56>
        {
          dFree(PORT_BUFFER.rxBuffer);
 800b7d8:	3814      	subs	r0, #20
 800b7da:	f009 fe29 	bl	8015430 <bFree>
          PORT_BUFFER.rxBuffer=NULL;
 800b7de:	9902      	ldr	r1, [sp, #8]
 800b7e0:	9a03      	ldr	r2, [sp, #12]
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	f809 0002 	strb.w	r0, [r9, r2]
 800b7e8:	7048      	strb	r0, [r1, #1]
 800b7ea:	7088      	strb	r0, [r1, #2]
 800b7ec:	70c8      	strb	r0, [r1, #3]
 800b7ee:	e7c4      	b.n	800b77a <switchPort+0x56>
 800b7f0:	2350      	movs	r3, #80	; 0x50
          {
            dFree(PORT_BUFFER.txBuffer[txQueueSize]);
          }
      memset(&PORT_BUFFER, 0, sizeof(portBuffer[0][0]));
    }
  if(type == PORT_TYPE_USART && portData[portNum].UARThelper)
 800b7f2:	b937      	cbnz	r7, 800b802 <switchPort+0xde>
 800b7f4:	fb03 6304 	mla	r3, r3, r4, r6
 800b7f8:	695a      	ldr	r2, [r3, #20]
 800b7fa:	b152      	cbz	r2, 800b812 <switchPort+0xee>
    {
      portData[portNum].portType    = PORT_TYPE_USART;
 800b7fc:	761f      	strb	r7, [r3, #24]
      message->wait = 0;
 800b7fe:	716f      	strb	r7, [r5, #5]
      return;
 800b800:	e00e      	b.n	800b820 <switchPort+0xfc>
    }
  if(type == PORT_TYPE_SPI && portData[portNum].SPIhelper)
 800b802:	2f01      	cmp	r7, #1
 800b804:	d105      	bne.n	800b812 <switchPort+0xee>
 800b806:	fb03 6304 	mla	r3, r3, r4, r6
 800b80a:	691a      	ldr	r2, [r3, #16]
 800b80c:	b10a      	cbz	r2, 800b812 <switchPort+0xee>
    {
      portData[portNum].portType    = PORT_TYPE_SPI;
 800b80e:	761f      	strb	r7, [r3, #24]
 800b810:	e004      	b.n	800b81c <switchPort+0xf8>
      message->wait = 0;
      return;
    }
  portData[portNum].portType    = PORT_TYPE_NONE;
 800b812:	2350      	movs	r3, #80	; 0x50
 800b814:	fb03 6404 	mla	r4, r3, r4, r6
 800b818:	2302      	movs	r3, #2
 800b81a:	7623      	strb	r3, [r4, #24]
  message->wait = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	716b      	strb	r3, [r5, #5]
}
 800b820:	b007      	add	sp, #28
 800b822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b826:	bf00      	nop
 800b828:	10002038 	.word	0x10002038
 800b82c:	0801d87e 	.word	0x0801d87e
 800b830:	0801d7ea 	.word	0x0801d7ea
 800b834:	0801d5dd 	.word	0x0801d5dd
 800b838:	20018510 	.word	0x20018510

0800b83c <portRx>:
        }
    }
}

static void portRx(void *data)
{
 800b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  portSubport_t message = {.raw = (uint32_t) data};
  portNum_t portNum = message.portNum;
 800b840:	b2c5      	uxtb	r5, r0
        }
    }
}

static void portRx(void *data)
{
 800b842:	b085      	sub	sp, #20

  portSubport_t message = {.raw = (uint32_t) data};
  portNum_t portNum = message.portNum;
  int subPortNum = message.subPortNum;
  massert(portNum < PORTS_NUM);
 800b844:	2d08      	cmp	r5, #8
}

static void portRx(void *data)
{

  portSubport_t message = {.raw = (uint32_t) data};
 800b846:	9000      	str	r0, [sp, #0]
  portNum_t portNum = message.portNum;
  int subPortNum = message.subPortNum;
 800b848:	f3c0 2607 	ubfx	r6, r0, #8, #8
  massert(portNum < PORTS_NUM);
 800b84c:	d80b      	bhi.n	800b866 <portRx+0x2a>

  //Get data from the port if available
  int size;

  if (PORT_BUFFER.rxBuffer == NULL)
 800b84e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800b852:	fb03 f205 	mul.w	r2, r3, r5
 800b856:	23e0      	movs	r3, #224	; 0xe0
 800b858:	4f62      	ldr	r7, [pc, #392]	; (800b9e4 <portRx+0x1a8>)
 800b85a:	fb03 2306 	mla	r3, r3, r6, r2
 800b85e:	58fb      	ldr	r3, [r7, r3]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d13a      	bne.n	800b8da <portRx+0x9e>
 800b864:	e00c      	b.n	800b880 <portRx+0x44>
{

  portSubport_t message = {.raw = (uint32_t) data};
  portNum_t portNum = message.portNum;
  int subPortNum = message.subPortNum;
  massert(portNum < PORTS_NUM);
 800b866:	4b60      	ldr	r3, [pc, #384]	; (800b9e8 <portRx+0x1ac>)
 800b868:	4960      	ldr	r1, [pc, #384]	; (800b9ec <portRx+0x1b0>)
 800b86a:	4861      	ldr	r0, [pc, #388]	; (800b9f0 <portRx+0x1b4>)
 800b86c:	f240 1229 	movw	r2, #297	; 0x129
 800b870:	f7fd f9da 	bl	8008c28 <xprintf>
 800b874:	2301      	movs	r3, #1
 800b876:	9301      	str	r3, [sp, #4]
 800b878:	9b01      	ldr	r3, [sp, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1fc      	bne.n	800b878 <portRx+0x3c>
 800b87e:	e7e6      	b.n	800b84e <portRx+0x12>
  int size;

  if (PORT_BUFFER.rxBuffer == NULL)
    {
      //Allocate a buffer for the message
      PORT_BUFFER.rxBuffer = dAlloc(MAX_DATA_SIZE);
 800b880:	2020      	movs	r0, #32
 800b882:	f009 fb7b 	bl	8014f7c <bAlloc>
 800b886:	b100      	cbz	r0, 800b88a <portRx+0x4e>
 800b888:	3014      	adds	r0, #20
 800b88a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800b88e:	fb03 f205 	mul.w	r2, r3, r5
 800b892:	23e0      	movs	r3, #224	; 0xe0
 800b894:	fb03 2306 	mla	r3, r3, r6, r2
 800b898:	50f8      	str	r0, [r7, r3]
      massert(PORT_BUFFER.rxBuffer);
 800b89a:	b188      	cbz	r0, 800b8c0 <portRx+0x84>
      PORT_BUFFER.rxBufferSize = 0;
 800b89c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800b8a0:	22e0      	movs	r2, #224	; 0xe0
 800b8a2:	436b      	muls	r3, r5
 800b8a4:	fb02 3306 	mla	r3, r2, r6, r3
 800b8a8:	443b      	add	r3, r7
 800b8aa:	2200      	movs	r2, #0
      PORT_BUFFER.rxExpectedSize = 1;
 800b8ac:	2001      	movs	r0, #1
  if (PORT_BUFFER.rxBuffer == NULL)
    {
      //Allocate a buffer for the message
      PORT_BUFFER.rxBuffer = dAlloc(MAX_DATA_SIZE);
      massert(PORT_BUFFER.rxBuffer);
      PORT_BUFFER.rxBufferSize = 0;
 800b8ae:	711a      	strb	r2, [r3, #4]
 800b8b0:	715a      	strb	r2, [r3, #5]
 800b8b2:	719a      	strb	r2, [r3, #6]
 800b8b4:	71da      	strb	r2, [r3, #7]
      PORT_BUFFER.rxExpectedSize = 1;
 800b8b6:	7218      	strb	r0, [r3, #8]
 800b8b8:	725a      	strb	r2, [r3, #9]
 800b8ba:	729a      	strb	r2, [r3, #10]
 800b8bc:	72da      	strb	r2, [r3, #11]
 800b8be:	e00c      	b.n	800b8da <portRx+0x9e>

  if (PORT_BUFFER.rxBuffer == NULL)
    {
      //Allocate a buffer for the message
      PORT_BUFFER.rxBuffer = dAlloc(MAX_DATA_SIZE);
      massert(PORT_BUFFER.rxBuffer);
 800b8c0:	4b4c      	ldr	r3, [pc, #304]	; (800b9f4 <portRx+0x1b8>)
 800b8c2:	494a      	ldr	r1, [pc, #296]	; (800b9ec <portRx+0x1b0>)
 800b8c4:	484a      	ldr	r0, [pc, #296]	; (800b9f0 <portRx+0x1b4>)
 800b8c6:	f44f 7299 	mov.w	r2, #306	; 0x132
 800b8ca:	f7fd f9ad 	bl	8008c28 <xprintf>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	9302      	str	r3, [sp, #8]
 800b8d2:	9b02      	ldr	r3, [sp, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1fc      	bne.n	800b8d2 <portRx+0x96>
 800b8d8:	e7e0      	b.n	800b89c <portRx+0x60>
      PORT_BUFFER.rxBufferSize = 0;
      PORT_BUFFER.rxExpectedSize = 1;
    }
  //Get data from receiver
  while((size = portData[portNum].receiveData[subPortNum](portNum, &(PORT_BUFFER.rxBuffer[PORT_BUFFER.rxBufferSize]),
 800b8da:	f04f 0814 	mov.w	r8, #20
 800b8de:	fb08 6805 	mla	r8, r8, r5, r6
 800b8e2:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800b8e6:	436c      	muls	r4, r5
 800b8e8:	23e0      	movs	r3, #224	; 0xe0
 800b8ea:	fb03 4406 	mla	r4, r3, r6, r4
 800b8ee:	443c      	add	r4, r7
                PORT_BUFFER.rxExpectedSize - PORT_BUFFER.rxBufferSize)))
 800b8f0:	46a2      	mov	sl, r4
      massert(PORT_BUFFER.rxBuffer);
      PORT_BUFFER.rxBufferSize = 0;
      PORT_BUFFER.rxExpectedSize = 1;
    }
  //Get data from receiver
  while((size = portData[portNum].receiveData[subPortNum](portNum, &(PORT_BUFFER.rxBuffer[PORT_BUFFER.rxBufferSize]),
 800b8f2:	6861      	ldr	r1, [r4, #4]
 800b8f4:	6820      	ldr	r0, [r4, #0]
                PORT_BUFFER.rxExpectedSize - PORT_BUFFER.rxBufferSize)))
 800b8f6:	f85a 2f08 	ldr.w	r2, [sl, #8]!
      massert(PORT_BUFFER.rxBuffer);
      PORT_BUFFER.rxBufferSize = 0;
      PORT_BUFFER.rxExpectedSize = 1;
    }
  //Get data from receiver
  while((size = portData[portNum].receiveData[subPortNum](portNum, &(PORT_BUFFER.rxBuffer[PORT_BUFFER.rxBufferSize]),
 800b8fa:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800b9f8 <portRx+0x1bc>
 800b8fe:	1a52      	subs	r2, r2, r1
 800b900:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
 800b904:	4401      	add	r1, r0
 800b906:	4628      	mov	r0, r5
 800b908:	4798      	blx	r3
 800b90a:	4683      	mov	fp, r0
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d065      	beq.n	800b9dc <portRx+0x1a0>
                PORT_BUFFER.rxExpectedSize - PORT_BUFFER.rxBufferSize)))
    {
      if (PORT_BUFFER.rxBufferSize == 0)
 800b910:	6863      	ldr	r3, [r4, #4]
 800b912:	b963      	cbnz	r3, 800b92e <portRx+0xf2>
        {
          //This is a first byte of message. Get expected size and remember time for timeout.
          PORT_BUFFER.rxExpectedSize = expectedMsgSize(portNum, msgTab(PORT_BUFFER.rxBuffer[0]));
 800b914:	6823      	ldr	r3, [r4, #0]
 800b916:	7818      	ldrb	r0, [r3, #0]
 800b918:	f7fd f9bc 	bl	8008c94 <msgTab>
 800b91c:	4601      	mov	r1, r0
 800b91e:	4628      	mov	r0, r5
 800b920:	f7fd f9cc 	bl	8008cbc <expectedMsgSize>
 800b924:	60a0      	str	r0, [r4, #8]
          PORT_BUFFER.timestamp = xTaskGetTickCount();
 800b926:	f7fe fff9 	bl	800a91c <xTaskGetTickCount>
 800b92a:	f8ca 0004 	str.w	r0, [sl, #4]
        }
      PORT_BUFFER.rxBufferSize += size;
 800b92e:	6860      	ldr	r0, [r4, #4]

      //Is the message complete?
      if (PORT_BUFFER.rxBufferSize >= PORT_BUFFER.rxExpectedSize)
 800b930:	68a3      	ldr	r3, [r4, #8]
        {
          //This is a first byte of message. Get expected size and remember time for timeout.
          PORT_BUFFER.rxExpectedSize = expectedMsgSize(portNum, msgTab(PORT_BUFFER.rxBuffer[0]));
          PORT_BUFFER.timestamp = xTaskGetTickCount();
        }
      PORT_BUFFER.rxBufferSize += size;
 800b932:	4458      	add	r0, fp

      //Is the message complete?
      if (PORT_BUFFER.rxBufferSize >= PORT_BUFFER.rxExpectedSize)
 800b934:	4298      	cmp	r0, r3
        {
          //This is a first byte of message. Get expected size and remember time for timeout.
          PORT_BUFFER.rxExpectedSize = expectedMsgSize(portNum, msgTab(PORT_BUFFER.rxBuffer[0]));
          PORT_BUFFER.timestamp = xTaskGetTickCount();
        }
      PORT_BUFFER.rxBufferSize += size;
 800b936:	6060      	str	r0, [r4, #4]

      //Is the message complete?
      if (PORT_BUFFER.rxBufferSize >= PORT_BUFFER.rxExpectedSize)
 800b938:	dbda      	blt.n	800b8f0 <portRx+0xb4>
        {
          //Connection keepalive
          if(PORT_BUFFER.rxBuffer[0] == 0x55 || (PORT_BUFFER.rxBuffer[0]&0xc0) == 0xc0)
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	2b55      	cmp	r3, #85	; 0x55
 800b940:	d003      	beq.n	800b94a <portRx+0x10e>
 800b942:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b946:	2bc0      	cmp	r3, #192	; 0xc0
 800b948:	d104      	bne.n	800b954 <portRx+0x118>
            portData[portNum].tsLastSeenSubPort[subPortNum] = xTaskGetTickCount();
 800b94a:	f7fe ffe7 	bl	800a91c <xTaskGetTickCount>
 800b94e:	eb09 0388 	add.w	r3, r9, r8, lsl #2
 800b952:	63d8      	str	r0, [r3, #60]	; 0x3c
          //Send the buffer to Communicator
          if(portData[portNum].portType == subPortNum)
 800b954:	2350      	movs	r3, #80	; 0x50
 800b956:	fb03 9905 	mla	r9, r3, r5, r9
 800b95a:	f899 3018 	ldrb.w	r3, [r9, #24]
 800b95e:	429e      	cmp	r6, r3
 800b960:	d011      	beq.n	800b986 <portRx+0x14a>
                  //Buffer is now owned by Communicator. New one needs to be allocated
                  PORT_BUFFER.rxBuffer = dAlloc(MAX_DATA_SIZE);
                  massert(PORT_BUFFER.rxBuffer);
                }
            }
          PORT_BUFFER.rxBufferSize = 0;
 800b962:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800b966:	22e0      	movs	r2, #224	; 0xe0
 800b968:	436b      	muls	r3, r5
 800b96a:	fb02 3306 	mla	r3, r2, r6, r3
 800b96e:	443b      	add	r3, r7
 800b970:	2200      	movs	r2, #0
          PORT_BUFFER.rxExpectedSize = 1;
 800b972:	2001      	movs	r0, #1
                  //Buffer is now owned by Communicator. New one needs to be allocated
                  PORT_BUFFER.rxBuffer = dAlloc(MAX_DATA_SIZE);
                  massert(PORT_BUFFER.rxBuffer);
                }
            }
          PORT_BUFFER.rxBufferSize = 0;
 800b974:	711a      	strb	r2, [r3, #4]
 800b976:	715a      	strb	r2, [r3, #5]
 800b978:	719a      	strb	r2, [r3, #6]
 800b97a:	71da      	strb	r2, [r3, #7]
          PORT_BUFFER.rxExpectedSize = 1;
 800b97c:	7218      	strb	r0, [r3, #8]
 800b97e:	725a      	strb	r2, [r3, #9]
 800b980:	729a      	strb	r2, [r3, #10]
 800b982:	72da      	strb	r2, [r3, #11]
 800b984:	e7ad      	b.n	800b8e2 <portRx+0xa6>
          if(PORT_BUFFER.rxBuffer[0] == 0x55 || (PORT_BUFFER.rxBuffer[0]&0xc0) == 0xc0)
            portData[portNum].tsLastSeenSubPort[subPortNum] = xTaskGetTickCount();
          //Send the buffer to Communicator
          if(portData[portNum].portType == subPortNum)
            {
              if (messageRx(portNum, PORT_BUFFER.rxBuffer, PORT_BUFFER.rxBufferSize, 0) >= 0)
 800b986:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800b98a:	23e0      	movs	r3, #224	; 0xe0
 800b98c:	4369      	muls	r1, r5
 800b98e:	fb03 1106 	mla	r1, r3, r6, r1
 800b992:	4439      	add	r1, r7
 800b994:	2300      	movs	r3, #0
 800b996:	684a      	ldr	r2, [r1, #4]
 800b998:	6809      	ldr	r1, [r1, #0]
 800b99a:	4628      	mov	r0, r5
 800b99c:	f7ff fdda 	bl	800b554 <messageRx>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	dbde      	blt.n	800b962 <portRx+0x126>
                {
                  //Buffer is now owned by Communicator. New one needs to be allocated
                  PORT_BUFFER.rxBuffer = dAlloc(MAX_DATA_SIZE);
 800b9a4:	2020      	movs	r0, #32
 800b9a6:	f009 fae9 	bl	8014f7c <bAlloc>
 800b9aa:	b100      	cbz	r0, 800b9ae <portRx+0x172>
 800b9ac:	3014      	adds	r0, #20
 800b9ae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800b9b2:	fb03 f205 	mul.w	r2, r3, r5
 800b9b6:	23e0      	movs	r3, #224	; 0xe0
 800b9b8:	fb03 2306 	mla	r3, r3, r6, r2
 800b9bc:	50f8      	str	r0, [r7, r3]
                  massert(PORT_BUFFER.rxBuffer);
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d1cf      	bne.n	800b962 <portRx+0x126>
 800b9c2:	4b0c      	ldr	r3, [pc, #48]	; (800b9f4 <portRx+0x1b8>)
 800b9c4:	4909      	ldr	r1, [pc, #36]	; (800b9ec <portRx+0x1b0>)
 800b9c6:	480a      	ldr	r0, [pc, #40]	; (800b9f0 <portRx+0x1b4>)
 800b9c8:	f240 124f 	movw	r2, #335	; 0x14f
 800b9cc:	f7fd f92c 	bl	8008c28 <xprintf>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	9303      	str	r3, [sp, #12]
 800b9d4:	9b03      	ldr	r3, [sp, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1fc      	bne.n	800b9d4 <portRx+0x198>
 800b9da:	e7c2      	b.n	800b962 <portRx+0x126>
            }
          PORT_BUFFER.rxBufferSize = 0;
          PORT_BUFFER.rxExpectedSize = 1;
        }
    }
}
 800b9dc:	b005      	add	sp, #20
 800b9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20018510 	.word	0x20018510
 800b9e8:	0801d87e 	.word	0x0801d87e
 800b9ec:	0801d7f5 	.word	0x0801d7f5
 800b9f0:	0801d5dd 	.word	0x0801d5dd
 800b9f4:	0801d869 	.word	0x0801d869
 800b9f8:	10002038 	.word	0x10002038

0800b9fc <portTx>:
    }
  return 0;
}

static void portTx(void *data)
{
 800b9fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  portSubport_t message = {.raw = (uint32_t) data};
  portNum_t portNum = message.portNum;
 800ba00:	b2c4      	uxtb	r4, r0
  massert(portNum < PORTS_NUM);
 800ba02:	2c08      	cmp	r4, #8
  return 0;
}

static void portTx(void *data)
{
  portSubport_t message = {.raw = (uint32_t) data};
 800ba04:	9000      	str	r0, [sp, #0]
  portNum_t portNum = message.portNum;
  massert(portNum < PORTS_NUM);
 800ba06:	d817      	bhi.n	800ba38 <portTx+0x3c>
  int subPortNum = message.subPortNum;
 800ba08:	f89d 7001 	ldrb.w	r7, [sp, #1]
  if (TX_BUFFER_H)
 800ba0c:	4856      	ldr	r0, [pc, #344]	; (800bb68 <portTx+0x16c>)
 800ba0e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800ba12:	23e0      	movs	r3, #224	; 0xe0
 800ba14:	4362      	muls	r2, r4
 800ba16:	fb03 2207 	mla	r2, r3, r7, r2
 800ba1a:	4402      	add	r2, r0
 800ba1c:	2170      	movs	r1, #112	; 0x70
 800ba1e:	4361      	muls	r1, r4
 800ba20:	6913      	ldr	r3, [r2, #16]
 800ba22:	2538      	movs	r5, #56	; 0x38
 800ba24:	fb05 1507 	mla	r5, r5, r7, r1
 800ba28:	442b      	add	r3, r5
 800ba2a:	1d99      	adds	r1, r3, #6
 800ba2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba30:	4680      	mov	r8, r0
 800ba32:	6849      	ldr	r1, [r1, #4]
 800ba34:	b969      	cbnz	r1, 800ba52 <portTx+0x56>
 800ba36:	e094      	b.n	800bb62 <portTx+0x166>

static void portTx(void *data)
{
  portSubport_t message = {.raw = (uint32_t) data};
  portNum_t portNum = message.portNum;
  massert(portNum < PORTS_NUM);
 800ba38:	4b4c      	ldr	r3, [pc, #304]	; (800bb6c <portTx+0x170>)
 800ba3a:	494d      	ldr	r1, [pc, #308]	; (800bb70 <portTx+0x174>)
 800ba3c:	484d      	ldr	r0, [pc, #308]	; (800bb74 <portTx+0x178>)
 800ba3e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ba42:	f7fd f8f1 	bl	8008c28 <xprintf>
 800ba46:	2301      	movs	r3, #1
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	9b01      	ldr	r3, [sp, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1fc      	bne.n	800ba4a <portTx+0x4e>
 800ba50:	e7da      	b.n	800ba08 <portTx+0xc>
  int subPortNum = message.subPortNum;
  if (TX_BUFFER_H)
    {
      if (TX_BUFFER_SIZE_H == 0)
 800ba52:	3316      	adds	r3, #22
 800ba54:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d147      	bne.n	800baee <portTx+0xf2>
        {
          //All data transmitted. Send Tx Complete message
          while (messageTxComplete(portNum, COMM_TX_SUCCESS, TX_HANDLE_H) < 0)
 800ba5e:	4616      	mov	r6, r2
 800ba60:	46b1      	mov	r9, r6
 800ba62:	2101      	movs	r1, #1
 800ba64:	f859 3f10 	ldr.w	r3, [r9, #16]!
 800ba68:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 800bb68 <portTx+0x16c>
 800ba6c:	442b      	add	r3, r5
 800ba6e:	3326      	adds	r3, #38	; 0x26
 800ba70:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800ba74:	4620      	mov	r0, r4
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	f7ff fd92 	bl	800b5a0 <messageTxComplete>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	da03      	bge.n	800ba88 <portTx+0x8c>
            {
              //Sending failed. Try again
              vTaskDelay(1);
 800ba80:	2001      	movs	r0, #1
 800ba82:	f7ff f841 	bl	800ab08 <vTaskDelay>
 800ba86:	e7eb      	b.n	800ba60 <portTx+0x64>
            }
          dFree(TX_BUFFER_H);
 800ba88:	f8d9 3000 	ldr.w	r3, [r9]
 800ba8c:	442b      	add	r3, r5
 800ba8e:	3306      	adds	r3, #6
 800ba90:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800ba94:	6858      	ldr	r0, [r3, #4]
 800ba96:	3814      	subs	r0, #20
 800ba98:	f009 fcca 	bl	8015430 <bFree>
          TX_BUFFER_H = NULL;
 800ba9c:	f8d9 1000 	ldr.w	r1, [r9]
 800baa0:	440d      	add	r5, r1
 800baa2:	3506      	adds	r5, #6
 800baa4:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 800baa8:	2300      	movs	r3, #0
 800baaa:	712b      	strb	r3, [r5, #4]
 800baac:	716b      	strb	r3, [r5, #5]
 800baae:	71ab      	strb	r3, [r5, #6]
 800bab0:	71eb      	strb	r3, [r5, #7]
          TX_BUFFER_OFFSET = 0;
 800bab2:	f886 30dc 	strb.w	r3, [r6, #220]	; 0xdc
 800bab6:	f886 30dd 	strb.w	r3, [r6, #221]	; 0xdd
 800baba:	f886 30de 	strb.w	r3, [r6, #222]	; 0xde
 800babe:	f886 30df 	strb.w	r3, [r6, #223]	; 0xdf
          TX_HEAD = (TX_HEAD + 1) % WAIT_QUEUE_SIZE;
 800bac2:	4b2d      	ldr	r3, [pc, #180]	; (800bb78 <portTx+0x17c>)
 800bac4:	3101      	adds	r1, #1
 800bac6:	400b      	ands	r3, r1
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bfbe      	ittt	lt
 800bacc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bad0:	f063 030f 	ornlt	r3, r3, #15
 800bad4:	3301      	addlt	r3, #1
 800bad6:	f8c9 3000 	str.w	r3, [r9]
          TX_NUM--;
 800bada:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800bade:	22e0      	movs	r2, #224	; 0xe0
 800bae0:	4363      	muls	r3, r4
 800bae2:	fb02 3307 	mla	r3, r2, r7, r3
 800bae6:	4443      	add	r3, r8
 800bae8:	699a      	ldr	r2, [r3, #24]
 800baea:	3a01      	subs	r2, #1
 800baec:	619a      	str	r2, [r3, #24]
        }
      if (TX_NUM)
 800baee:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800baf2:	23e0      	movs	r3, #224	; 0xe0
 800baf4:	4365      	muls	r5, r4
 800baf6:	fb03 5507 	mla	r5, r3, r7, r5
 800bafa:	4445      	add	r5, r8
 800bafc:	4e1a      	ldr	r6, [pc, #104]	; (800bb68 <portTx+0x16c>)
 800bafe:	69ab      	ldr	r3, [r5, #24]
 800bb00:	b37b      	cbz	r3, 800bb62 <portTx+0x166>
        {
          //Next buffer is waiting
          int sentSize = portData[portNum].sendData[subPortNum](portNum, &(TX_BUFFER_H[TX_BUFFER_OFFSET]), TX_BUFFER_SIZE_H);
 800bb02:	46a9      	mov	r9, r5
 800bb04:	f04f 0870 	mov.w	r8, #112	; 0x70
 800bb08:	f859 3f10 	ldr.w	r3, [r9, #16]!
 800bb0c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800bb10:	fb08 f204 	mul.w	r2, r8, r4
 800bb14:	f04f 0838 	mov.w	r8, #56	; 0x38
 800bb18:	fb08 2807 	mla	r8, r8, r7, r2
 800bb1c:	4443      	add	r3, r8
 800bb1e:	f103 0216 	add.w	r2, r3, #22
 800bb22:	3306      	adds	r3, #6
 800bb24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bb28:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800bb2c:	6859      	ldr	r1, [r3, #4]
 800bb2e:	6852      	ldr	r2, [r2, #4]
 800bb30:	2314      	movs	r3, #20
 800bb32:	fb03 7704 	mla	r7, r3, r4, r7
 800bb36:	3702      	adds	r7, #2
 800bb38:	4b10      	ldr	r3, [pc, #64]	; (800bb7c <portTx+0x180>)
 800bb3a:	4401      	add	r1, r0
 800bb3c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800bb40:	4620      	mov	r0, r4
 800bb42:	4798      	blx	r3

          TX_BUFFER_OFFSET += sentSize;
 800bb44:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
 800bb48:	4403      	add	r3, r0
 800bb4a:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
          TX_BUFFER_SIZE_H -= sentSize;
 800bb4e:	f8d9 3000 	ldr.w	r3, [r9]
 800bb52:	4498      	add	r8, r3
 800bb54:	f108 0816 	add.w	r8, r8, #22
 800bb58:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 800bb5c:	6873      	ldr	r3, [r6, #4]
 800bb5e:	1a18      	subs	r0, r3, r0
 800bb60:	6070      	str	r0, [r6, #4]
        }
    }
}
 800bb62:	b002      	add	sp, #8
 800bb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb68:	20018510 	.word	0x20018510
 800bb6c:	0801d87e 	.word	0x0801d87e
 800bb70:	0801d7fc 	.word	0x0801d7fc
 800bb74:	0801d5dd 	.word	0x0801d5dd
 800bb78:	8000000f 	.word	0x8000000f
 800bb7c:	10002038 	.word	0x10002038

0800bb80 <commTx>:
#define TX_BUFFER_SIZE_T PORT_BUFFER.txBufferSize[TX_TAIL]
#define TX_HANDLE_T      PORT_BUFFER.handle[TX_TAIL]

#define TX_BUFFER_OFFSET PORT_BUFFER.txBufferOffset
static void commTx(void *data)
{
 800bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  messageTxData_t *message = data;
  portNum_t portNum = message->portNum;
 800bb84:	7805      	ldrb	r5, [r0, #0]

  massert(portNum < PORTS_NUM);
 800bb86:	2d08      	cmp	r5, #8
#define TX_BUFFER_SIZE_T PORT_BUFFER.txBufferSize[TX_TAIL]
#define TX_HANDLE_T      PORT_BUFFER.handle[TX_TAIL]

#define TX_BUFFER_OFFSET PORT_BUFFER.txBufferOffset
static void commTx(void *data)
{
 800bb88:	b085      	sub	sp, #20
 800bb8a:	4604      	mov	r4, r0
  messageTxData_t *message = data;
  portNum_t portNum = message->portNum;

  massert(portNum < PORTS_NUM);
 800bb8c:	d806      	bhi.n	800bb9c <commTx+0x1c>

  comm_t *msgType = msgTab(message->buffer[0]);
 800bb8e:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800bb92:	7818      	ldrb	r0, [r3, #0]
 800bb94:	f7fd f87e 	bl	8008c94 <msgTab>
  if(msgType)
 800bb98:	b960      	cbnz	r0, 800bbb4 <commTx+0x34>
 800bb9a:	e014      	b.n	800bbc6 <commTx+0x46>
static void commTx(void *data)
{
  messageTxData_t *message = data;
  portNum_t portNum = message->portNum;

  massert(portNum < PORTS_NUM);
 800bb9c:	4b84      	ldr	r3, [pc, #528]	; (800bdb0 <commTx+0x230>)
 800bb9e:	4985      	ldr	r1, [pc, #532]	; (800bdb4 <commTx+0x234>)
 800bba0:	4885      	ldr	r0, [pc, #532]	; (800bdb8 <commTx+0x238>)
 800bba2:	229b      	movs	r2, #155	; 0x9b
 800bba4:	f7fd f840 	bl	8008c28 <xprintf>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	9302      	str	r3, [sp, #8]
 800bbac:	9b02      	ldr	r3, [sp, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1fc      	bne.n	800bbac <commTx+0x2c>
 800bbb2:	e7ec      	b.n	800bb8e <commTx+0xe>
 800bbb4:	eb00 0285 	add.w	r2, r0, r5, lsl #2

  comm_t *msgType = msgTab(message->buffer[0]);
  if(msgType)
    {
      msgType->sent[portNum]++;
 800bbb8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800bbba:	3301      	adds	r3, #1
 800bbbc:	64d3      	str	r3, [r2, #76]	; 0x4c
      if(msgType->blocked)
 800bbbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f040 80e9 	bne.w	800bd98 <commTx+0x218>
          dFree(message->buffer);
          dFree(message);
          return;
        }
    }
  if(cfg.trace_messages)
 800bbc6:	4e7d      	ldr	r6, [pc, #500]	; (800bdbc <commTx+0x23c>)
 800bbc8:	6933      	ldr	r3, [r6, #16]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d03d      	beq.n	800bc4a <commTx+0xca>
    {
      switch(message->buffer[0])
 800bbce:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2bb1      	cmp	r3, #177	; 0xb1
 800bbd6:	d805      	bhi.n	800bbe4 <commTx+0x64>
 800bbd8:	2bb0      	cmp	r3, #176	; 0xb0
 800bbda:	d208      	bcs.n	800bbee <commTx+0x6e>
 800bbdc:	2b55      	cmp	r3, #85	; 0x55
 800bbde:	d003      	beq.n	800bbe8 <commTx+0x68>
 800bbe0:	2ba2      	cmp	r3, #162	; 0xa2
 800bbe2:	e000      	b.n	800bbe6 <commTx+0x66>
 800bbe4:	2bcc      	cmp	r3, #204	; 0xcc
 800bbe6:	d105      	bne.n	800bbf4 <commTx+0x74>
        {
        case 0xA2:
        case 0x55:
        case 0xCC:
          if(cfg.trace_messages < 3)
 800bbe8:	6932      	ldr	r2, [r6, #16]
 800bbea:	2a02      	cmp	r2, #2
 800bbec:	dd2d      	ble.n	800bc4a <commTx+0xca>
            break;
        case 0xB0:
        case 0xB1:
          if(cfg.trace_messages < 2)
 800bbee:	6932      	ldr	r2, [r6, #16]
 800bbf0:	2a01      	cmp	r2, #1
 800bbf2:	dd2a      	ble.n	800bc4a <commTx+0xca>
            break;
        default:
        {
          if(cfg.trace_messages <= 3 || cfg.trace_messages == message->buffer[0])
 800bbf4:	6932      	ldr	r2, [r6, #16]
 800bbf6:	2a03      	cmp	r2, #3
 800bbf8:	dd03      	ble.n	800bc02 <commTx+0x82>
 800bbfa:	4a70      	ldr	r2, [pc, #448]	; (800bdbc <commTx+0x23c>)
 800bbfc:	6912      	ldr	r2, [r2, #16]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d123      	bne.n	800bc4a <commTx+0xca>
            {
              dprintf(LL_DEBUG, "(%010d)Msg %x sent to %s:", xTaskGetTickCount(), message->buffer[0], portStr[portNum]);
 800bc02:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800bc04:	2b02      	cmp	r3, #2
 800bc06:	dd0b      	ble.n	800bc20 <commTx+0xa0>
 800bc08:	f7fe fe88 	bl	800a91c <xTaskGetTickCount>
 800bc0c:	f8d4 2001 	ldr.w	r2, [r4, #1]
 800bc10:	4b6b      	ldr	r3, [pc, #428]	; (800bdc0 <commTx+0x240>)
 800bc12:	7812      	ldrb	r2, [r2, #0]
 800bc14:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bc18:	4601      	mov	r1, r0
 800bc1a:	486a      	ldr	r0, [pc, #424]	; (800bdc4 <commTx+0x244>)
 800bc1c:	f7fd f804 	bl	8008c28 <xprintf>
#define TX_BUFFER_SIZE_T PORT_BUFFER.txBufferSize[TX_TAIL]
#define TX_HANDLE_T      PORT_BUFFER.handle[TX_TAIL]

#define TX_BUFFER_OFFSET PORT_BUFFER.txBufferOffset
static void commTx(void *data)
{
 800bc20:	2700      	movs	r7, #0
        {
          if(cfg.trace_messages <= 3 || cfg.trace_messages == message->buffer[0])
            {
              dprintf(LL_DEBUG, "(%010d)Msg %x sent to %s:", xTaskGetTickCount(), message->buffer[0], portStr[portNum]);
              int i;
              for(i = 0; i < message->bufferSize; i++)
 800bc22:	f8d4 3005 	ldr.w	r3, [r4, #5]
 800bc26:	429f      	cmp	r7, r3
                dprintf(LL_DEBUG, "%02x ", message->buffer[i]);
 800bc28:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          if(cfg.trace_messages <= 3 || cfg.trace_messages == message->buffer[0])
            {
              dprintf(LL_DEBUG, "(%010d)Msg %x sent to %s:", xTaskGetTickCount(), message->buffer[0], portStr[portNum]);
              int i;
              for(i = 0; i < message->bufferSize; i++)
 800bc2a:	da09      	bge.n	800bc40 <commTx+0xc0>
                dprintf(LL_DEBUG, "%02x ", message->buffer[i]);
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	dd05      	ble.n	800bc3c <commTx+0xbc>
 800bc30:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800bc34:	4864      	ldr	r0, [pc, #400]	; (800bdc8 <commTx+0x248>)
 800bc36:	5dd9      	ldrb	r1, [r3, r7]
 800bc38:	f7fc fff6 	bl	8008c28 <xprintf>
        {
          if(cfg.trace_messages <= 3 || cfg.trace_messages == message->buffer[0])
            {
              dprintf(LL_DEBUG, "(%010d)Msg %x sent to %s:", xTaskGetTickCount(), message->buffer[0], portStr[portNum]);
              int i;
              for(i = 0; i < message->bufferSize; i++)
 800bc3c:	3701      	adds	r7, #1
 800bc3e:	e7f0      	b.n	800bc22 <commTx+0xa2>
                dprintf(LL_DEBUG, "%02x ", message->buffer[i]);
              dprintf(LL_DEBUG, "\n");
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	dd02      	ble.n	800bc4a <commTx+0xca>
 800bc44:	4861      	ldr	r0, [pc, #388]	; (800bdcc <commTx+0x24c>)
 800bc46:	f7fc ffef 	bl	8008c28 <xprintf>
 800bc4a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bc4e:	4b60      	ldr	r3, [pc, #384]	; (800bdd0 <commTx+0x250>)
  int subPortNum;
  for(subPortNum = 0; subPortNum < 2; subPortNum++)
    if((subPortNum == PORT_TYPE_SPI && portData[portNum].SPIhelper)
        ||(subPortNum == PORT_TYPE_USART && portData[portNum].UARThelper))
      {
        if (TX_NUM == WAIT_QUEUE_SIZE)
 800bc50:	f8df 9188 	ldr.w	r9, [pc, #392]	; 800bddc <commTx+0x25c>
 800bc54:	9301      	str	r3, [sp, #4]
 800bc56:	fb08 f805 	mul.w	r8, r8, r5
 800bc5a:	f108 0808 	add.w	r8, r8, #8
 800bc5e:	4498      	add	r8, r3
#define TX_BUFFER_SIZE_T PORT_BUFFER.txBufferSize[TX_TAIL]
#define TX_HANDLE_T      PORT_BUFFER.handle[TX_TAIL]

#define TX_BUFFER_OFFSET PORT_BUFFER.txBufferOffset
static void commTx(void *data)
{
 800bc60:	2700      	movs	r7, #0
 800bc62:	46ca      	mov	sl, r9
        }
    }

  int subPortNum;
  for(subPortNum = 0; subPortNum < 2; subPortNum++)
    if((subPortNum == PORT_TYPE_SPI && portData[portNum].SPIhelper)
 800bc64:	9a01      	ldr	r2, [sp, #4]
 800bc66:	2350      	movs	r3, #80	; 0x50
 800bc68:	2f01      	cmp	r7, #1
 800bc6a:	fb03 2305 	mla	r3, r3, r5, r2
 800bc6e:	d102      	bne.n	800bc76 <commTx+0xf6>
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	b923      	cbnz	r3, 800bc7e <commTx+0xfe>
 800bc74:	e090      	b.n	800bd98 <commTx+0x218>
        ||(subPortNum == PORT_TYPE_USART && portData[portNum].UARThelper))
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f000 8087 	beq.w	800bd8c <commTx+0x20c>
      {
        if (TX_NUM == WAIT_QUEUE_SIZE)
 800bc7e:	f44f 76e0 	mov.w	r6, #448	; 0x1c0
 800bc82:	23e0      	movs	r3, #224	; 0xe0
 800bc84:	436e      	muls	r6, r5
 800bc86:	fb03 6607 	mla	r6, r3, r7, r6
 800bc8a:	444e      	add	r6, r9
 800bc8c:	69b3      	ldr	r3, [r6, #24]
 800bc8e:	2b10      	cmp	r3, #16
 800bc90:	d10b      	bne.n	800bcaa <commTx+0x12a>
          {
            //wait queue is full
            while (messageTxComplete(portNum, COMM_TX_FAILED, message->handle) < 0)
 800bc92:	f8d4 2009 	ldr.w	r2, [r4, #9]
 800bc96:	2100      	movs	r1, #0
 800bc98:	4628      	mov	r0, r5
 800bc9a:	f7ff fc81 	bl	800b5a0 <messageTxComplete>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	da74      	bge.n	800bd8c <commTx+0x20c>
              {
                //Sending failed. Try again
                vTaskDelay(1);
 800bca2:	2001      	movs	r0, #1
 800bca4:	f7fe ff30 	bl	800ab08 <vTaskDelay>
 800bca8:	e7f3      	b.n	800bc92 <commTx+0x112>
              }
            continue;
          }

        dRef(message->buffer);
 800bcaa:	f8d4 0001 	ldr.w	r0, [r4, #1]
        TX_BUFFER_SIZE_T = message->bufferSize;
 800bcae:	3610      	adds	r6, #16
                vTaskDelay(1);
              }
            continue;
          }

        dRef(message->buffer);
 800bcb0:	3814      	subs	r0, #20
 800bcb2:	f009 fcfb 	bl	80156ac <bRef>
        TX_BUFFER_SIZE_T = message->bufferSize;
 800bcb6:	2370      	movs	r3, #112	; 0x70
 800bcb8:	6872      	ldr	r2, [r6, #4]
 800bcba:	f8d4 0005 	ldr.w	r0, [r4, #5]
 800bcbe:	2138      	movs	r1, #56	; 0x38
 800bcc0:	436b      	muls	r3, r5
 800bcc2:	fb01 3307 	mla	r3, r1, r7, r3
 800bcc6:	4413      	add	r3, r2
 800bcc8:	eb09 0183 	add.w	r1, r9, r3, lsl #2
        TX_BUFFER_T = message->buffer;
        TX_HANDLE_T = message->handle;
 800bccc:	eb09 0383 	add.w	r3, r9, r3, lsl #2
              }
            continue;
          }

        dRef(message->buffer);
        TX_BUFFER_SIZE_T = message->bufferSize;
 800bcd0:	65c8      	str	r0, [r1, #92]	; 0x5c
        TX_BUFFER_T = message->buffer;
 800bcd2:	f8d4 0001 	ldr.w	r0, [r4, #1]
 800bcd6:	61c8      	str	r0, [r1, #28]
        TX_HANDLE_T = message->handle;
 800bcd8:	f8d4 1009 	ldr.w	r1, [r4, #9]
 800bcdc:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
        TX_TAIL = (TX_TAIL + 1) % WAIT_QUEUE_SIZE;
 800bce0:	4b3c      	ldr	r3, [pc, #240]	; (800bdd4 <commTx+0x254>)
 800bce2:	3201      	adds	r2, #1
 800bce4:	4013      	ands	r3, r2
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	bfbe      	ittt	lt
 800bcea:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bcee:	f063 030f 	ornlt	r3, r3, #15
 800bcf2:	3301      	addlt	r3, #1
 800bcf4:	6073      	str	r3, [r6, #4]
        TX_NUM++;
 800bcf6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800bcfa:	436b      	muls	r3, r5
 800bcfc:	22e0      	movs	r2, #224	; 0xe0
 800bcfe:	fb02 3307 	mla	r3, r2, r7, r3
 800bd02:	4453      	add	r3, sl
 800bd04:	699e      	ldr	r6, [r3, #24]
 800bd06:	3601      	adds	r6, #1

        //Send first data if necessary
        if (TX_NUM == 1)
 800bd08:	2e01      	cmp	r6, #1
        dRef(message->buffer);
        TX_BUFFER_SIZE_T = message->bufferSize;
        TX_BUFFER_T = message->buffer;
        TX_HANDLE_T = message->handle;
        TX_TAIL = (TX_TAIL + 1) % WAIT_QUEUE_SIZE;
        TX_NUM++;
 800bd0a:	619e      	str	r6, [r3, #24]

        //Send first data if necessary
        if (TX_NUM == 1)
 800bd0c:	d13e      	bne.n	800bd8c <commTx+0x20c>
          {
            massert(TX_BUFFER_OFFSET == 0);
 800bd0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bd12:	bb83      	cbnz	r3, 800bd76 <commTx+0x1f6>
            int sentSize = portData[portNum].sendData[subPortNum](portNum, &(TX_BUFFER_H[TX_BUFFER_OFFSET]), TX_BUFFER_SIZE_H);
 800bd14:	f44f 76e0 	mov.w	r6, #448	; 0x1c0
 800bd18:	23e0      	movs	r3, #224	; 0xe0
 800bd1a:	436e      	muls	r6, r5
 800bd1c:	fb03 6607 	mla	r6, r3, r7, r6
 800bd20:	4456      	add	r6, sl
 800bd22:	46b3      	mov	fp, r6
 800bd24:	2270      	movs	r2, #112	; 0x70
 800bd26:	f85b 3f10 	ldr.w	r3, [fp, #16]!
 800bd2a:	2138      	movs	r1, #56	; 0x38
 800bd2c:	436a      	muls	r2, r5
 800bd2e:	fb01 2207 	mla	r2, r1, r7, r2
 800bd32:	4413      	add	r3, r2
 800bd34:	9200      	str	r2, [sp, #0]
 800bd36:	f103 0216 	add.w	r2, r3, #22
 800bd3a:	3306      	adds	r3, #6
 800bd3c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800bd40:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
 800bd44:	6858      	ldr	r0, [r3, #4]
 800bd46:	f8d8 3000 	ldr.w	r3, [r8]
 800bd4a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800bd4e:	4401      	add	r1, r0
 800bd50:	6852      	ldr	r2, [r2, #4]
 800bd52:	4628      	mov	r0, r5
 800bd54:	4798      	blx	r3

            TX_BUFFER_OFFSET += sentSize;
 800bd56:	f8d6 30dc 	ldr.w	r3, [r6, #220]	; 0xdc
            TX_BUFFER_SIZE_H -= sentSize;
 800bd5a:	9a00      	ldr	r2, [sp, #0]
        if (TX_NUM == 1)
          {
            massert(TX_BUFFER_OFFSET == 0);
            int sentSize = portData[portNum].sendData[subPortNum](portNum, &(TX_BUFFER_H[TX_BUFFER_OFFSET]), TX_BUFFER_SIZE_H);

            TX_BUFFER_OFFSET += sentSize;
 800bd5c:	4403      	add	r3, r0
 800bd5e:	f8c6 30dc 	str.w	r3, [r6, #220]	; 0xdc
            TX_BUFFER_SIZE_H -= sentSize;
 800bd62:	f8db 3000 	ldr.w	r3, [fp]
 800bd66:	4413      	add	r3, r2
 800bd68:	3316      	adds	r3, #22
 800bd6a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	1a10      	subs	r0, r2, r0
 800bd72:	6058      	str	r0, [r3, #4]
 800bd74:	e00a      	b.n	800bd8c <commTx+0x20c>
        TX_NUM++;

        //Send first data if necessary
        if (TX_NUM == 1)
          {
            massert(TX_BUFFER_OFFSET == 0);
 800bd76:	4b18      	ldr	r3, [pc, #96]	; (800bdd8 <commTx+0x258>)
 800bd78:	490e      	ldr	r1, [pc, #56]	; (800bdb4 <commTx+0x234>)
 800bd7a:	480f      	ldr	r0, [pc, #60]	; (800bdb8 <commTx+0x238>)
 800bd7c:	22de      	movs	r2, #222	; 0xde
 800bd7e:	f7fc ff53 	bl	8008c28 <xprintf>
 800bd82:	9603      	str	r6, [sp, #12]
 800bd84:	9b03      	ldr	r3, [sp, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1fc      	bne.n	800bd84 <commTx+0x204>
 800bd8a:	e7c3      	b.n	800bd14 <commTx+0x194>
        break;
        }
    }

  int subPortNum;
  for(subPortNum = 0; subPortNum < 2; subPortNum++)
 800bd8c:	3701      	adds	r7, #1
 800bd8e:	2f02      	cmp	r7, #2
 800bd90:	f108 0804 	add.w	r8, r8, #4
 800bd94:	f47f af66 	bne.w	800bc64 <commTx+0xe4>

            TX_BUFFER_OFFSET += sentSize;
            TX_BUFFER_SIZE_H -= sentSize;
          }
      }
  dFree(message->buffer);
 800bd98:	f8d4 0001 	ldr.w	r0, [r4, #1]
 800bd9c:	3814      	subs	r0, #20
 800bd9e:	f009 fb47 	bl	8015430 <bFree>
  dFree(message);
 800bda2:	f1a4 0014 	sub.w	r0, r4, #20
 800bda6:	f009 fb43 	bl	8015430 <bFree>
}
 800bdaa:	b005      	add	sp, #20
 800bdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb0:	0801d87e 	.word	0x0801d87e
 800bdb4:	0801d803 	.word	0x0801d803
 800bdb8:	0801d5dd 	.word	0x0801d5dd
 800bdbc:	10001000 	.word	0x10001000
 800bdc0:	10002348 	.word	0x10002348
 800bdc4:	0801d892 	.word	0x0801d892
 800bdc8:	0801d481 	.word	0x0801d481
 800bdcc:	0803de8a 	.word	0x0803de8a
 800bdd0:	10002038 	.word	0x10002038
 800bdd4:	8000000f 	.word	0x8000000f
 800bdd8:	0801d8ac 	.word	0x0801d8ac
 800bddc:	20018510 	.word	0x20018510

0800bde0 <HWCommInit>:
  .stackSize = 2 * 1024,
  .name = "portCommunicator",
};

void HWCommInit(void)
{
 800bde0:	b508      	push	{r3, lr}
  //Initialize ports module
  memset(portBuffer, 0, sizeof(portBuffer));
 800bde2:	f44f 627c 	mov.w	r2, #4032	; 0xfc0
 800bde6:	2100      	movs	r1, #0
 800bde8:	4803      	ldr	r0, [pc, #12]	; (800bdf8 <HWCommInit+0x18>)
 800bdea:	f011 f9c3 	bl	801d174 <memset>
  moduleInit(&moduleHWComm);
 800bdee:	4803      	ldr	r0, [pc, #12]	; (800bdfc <HWCommInit+0x1c>)
}
 800bdf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void HWCommInit(void)
{
  //Initialize ports module
  memset(portBuffer, 0, sizeof(portBuffer));
  moduleInit(&moduleHWComm);
 800bdf4:	f7ff bb40 	b.w	800b478 <moduleInit>
 800bdf8:	20018510 	.word	0x20018510
 800bdfc:	10001f18 	.word	0x10001f18

0800be00 <messageTx>:
  int bufferSize;
  uint32_t handle;
} messageTxData_t;

int messageTx(portNum_t portNum, char *buffer, int bufferSize, uint32_t handle)
{
 800be00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800be04:	4605      	mov	r5, r0
  //Allocate resources for data transfer
  messageTxData_t *message = dAlloc(sizeof(messageTxData_t));
 800be06:	200d      	movs	r0, #13
  int bufferSize;
  uint32_t handle;
} messageTxData_t;

int messageTx(portNum_t portNum, char *buffer, int bufferSize, uint32_t handle)
{
 800be08:	460e      	mov	r6, r1
 800be0a:	4617      	mov	r7, r2
 800be0c:	4698      	mov	r8, r3
  //Allocate resources for data transfer
  messageTxData_t *message = dAlloc(sizeof(messageTxData_t));
 800be0e:	f009 f8b5 	bl	8014f7c <bAlloc>
 800be12:	b120      	cbz	r0, 800be1e <messageTx+0x1e>

  massert(portNum < PORTS_NUM);
 800be14:	2d08      	cmp	r5, #8
} messageTxData_t;

int messageTx(portNum_t portNum, char *buffer, int bufferSize, uint32_t handle)
{
  //Allocate resources for data transfer
  messageTxData_t *message = dAlloc(sizeof(messageTxData_t));
 800be16:	f100 0414 	add.w	r4, r0, #20

  massert(portNum < PORTS_NUM);
 800be1a:	d90f      	bls.n	800be3c <messageTx+0x3c>
 800be1c:	e002      	b.n	800be24 <messageTx+0x24>
 800be1e:	2d08      	cmp	r5, #8
 800be20:	d91e      	bls.n	800be60 <messageTx+0x60>
} messageTxData_t;

int messageTx(portNum_t portNum, char *buffer, int bufferSize, uint32_t handle)
{
  //Allocate resources for data transfer
  messageTxData_t *message = dAlloc(sizeof(messageTxData_t));
 800be22:	4604      	mov	r4, r0

  massert(portNum < PORTS_NUM);
 800be24:	4b12      	ldr	r3, [pc, #72]	; (800be70 <messageTx+0x70>)
 800be26:	4913      	ldr	r1, [pc, #76]	; (800be74 <messageTx+0x74>)
 800be28:	4813      	ldr	r0, [pc, #76]	; (800be78 <messageTx+0x78>)
 800be2a:	2273      	movs	r2, #115	; 0x73
 800be2c:	f7fc fefc 	bl	8008c28 <xprintf>
 800be30:	2301      	movs	r3, #1
 800be32:	9301      	str	r3, [sp, #4]
 800be34:	9b01      	ldr	r3, [sp, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1fc      	bne.n	800be34 <messageTx+0x34>
  if (message == NULL)
 800be3a:	b18c      	cbz	r4, 800be60 <messageTx+0x60>
    return -1;

  //Fill message
  message->portNum = portNum;
 800be3c:	7025      	strb	r5, [r4, #0]
  message->buffer = buffer;
 800be3e:	f8c4 6001 	str.w	r6, [r4, #1]
  message->bufferSize = bufferSize;
 800be42:	f8c4 7005 	str.w	r7, [r4, #5]
  message->handle = handle;
 800be46:	f8c4 8009 	str.w	r8, [r4, #9]

  //Send the message to the communicator
  if (moduleSendCommand(&moduleHWComm, CMD_COMM_TX, message) < 0)
 800be4a:	4622      	mov	r2, r4
 800be4c:	2100      	movs	r1, #0
 800be4e:	480b      	ldr	r0, [pc, #44]	; (800be7c <messageTx+0x7c>)
 800be50:	f7ff fabe 	bl	800b3d0 <moduleSendCommand>
 800be54:	2800      	cmp	r0, #0
 800be56:	da06      	bge.n	800be66 <messageTx+0x66>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 800be58:	f1a4 0014 	sub.w	r0, r4, #20
 800be5c:	f009 fae8 	bl	8015430 <bFree>
      return -1;
 800be60:	f04f 30ff 	mov.w	r0, #4294967295
 800be64:	e000      	b.n	800be68 <messageTx+0x68>
    }
  return 0;
 800be66:	2000      	movs	r0, #0
}
 800be68:	b002      	add	sp, #8
 800be6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be6e:	bf00      	nop
 800be70:	0801d87e 	.word	0x0801d87e
 800be74:	0801d80a 	.word	0x0801d80a
 800be78:	0801d5dd 	.word	0x0801d5dd
 800be7c:	10001f18 	.word	0x10001f18

0800be80 <portDataTxRxComplete>:

/////////////////////////////////////////////////////////////////////
//Handle transmission.
int portDataTxRxComplete(portNum_t portNum, portType_e portType, rxTxComplete_e dir)
{
  massert(portNum < PORTS_NUM);
 800be80:	2808      	cmp	r0, #8
}

/////////////////////////////////////////////////////////////////////
//Handle transmission.
int portDataTxRxComplete(portNum_t portNum, portType_e portType, rxTxComplete_e dir)
{
 800be82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be84:	4605      	mov	r5, r0
 800be86:	460e      	mov	r6, r1
 800be88:	4614      	mov	r4, r2
  massert(portNum < PORTS_NUM);
 800be8a:	d808      	bhi.n	800be9e <portDataTxRxComplete+0x1e>
  portSubport_t message = {.portNum = portNum, .subPortNum = portType};
 800be8c:	2300      	movs	r3, #0
 800be8e:	9301      	str	r3, [sp, #4]
  if (dir & RXTX_COMPLETE_TX)
 800be90:	07e3      	lsls	r3, r4, #31
/////////////////////////////////////////////////////////////////////
//Handle transmission.
int portDataTxRxComplete(portNum_t portNum, portType_e portType, rxTxComplete_e dir)
{
  massert(portNum < PORTS_NUM);
  portSubport_t message = {.portNum = portNum, .subPortNum = portType};
 800be92:	f88d 5004 	strb.w	r5, [sp, #4]
 800be96:	f88d 6005 	strb.w	r6, [sp, #5]
  if (dir & RXTX_COMPLETE_TX)
 800be9a:	d50c      	bpl.n	800beb6 <portDataTxRxComplete+0x36>
 800be9c:	e017      	b.n	800bece <portDataTxRxComplete+0x4e>

/////////////////////////////////////////////////////////////////////
//Handle transmission.
int portDataTxRxComplete(portNum_t portNum, portType_e portType, rxTxComplete_e dir)
{
  massert(portNum < PORTS_NUM);
 800be9e:	4b11      	ldr	r3, [pc, #68]	; (800bee4 <portDataTxRxComplete+0x64>)
 800bea0:	4911      	ldr	r1, [pc, #68]	; (800bee8 <portDataTxRxComplete+0x68>)
 800bea2:	4812      	ldr	r0, [pc, #72]	; (800beec <portDataTxRxComplete+0x6c>)
 800bea4:	22ed      	movs	r2, #237	; 0xed
 800bea6:	f7fc febf 	bl	8008c28 <xprintf>
 800beaa:	2301      	movs	r3, #1
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	9b00      	ldr	r3, [sp, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1fc      	bne.n	800beae <portDataTxRxComplete+0x2e>
 800beb4:	e7ea      	b.n	800be8c <portDataTxRxComplete+0xc>
        {
          //Sending failed
          return -1;
        }
    }
  if (dir & RXTX_COMPLETE_RX)
 800beb6:	f004 0402 	and.w	r4, r4, #2
 800beba:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 800bebe:	b17c      	cbz	r4, 800bee0 <portDataTxRxComplete+0x60>
    {
      if (moduleSendCommand(&moduleHWComm, CMD_PORT_RX, (void *)message.raw) < 0)
 800bec0:	9a01      	ldr	r2, [sp, #4]
 800bec2:	480b      	ldr	r0, [pc, #44]	; (800bef0 <portDataTxRxComplete+0x70>)
 800bec4:	2102      	movs	r1, #2
 800bec6:	f7ff fa83 	bl	800b3d0 <moduleSendCommand>
 800beca:	17c0      	asrs	r0, r0, #31
 800becc:	e008      	b.n	800bee0 <portDataTxRxComplete+0x60>
{
  massert(portNum < PORTS_NUM);
  portSubport_t message = {.portNum = portNum, .subPortNum = portType};
  if (dir & RXTX_COMPLETE_TX)
    {
      if (moduleSendCommand(&moduleHWComm, CMD_PORT_TX, (void *)message.raw) < 0)
 800bece:	9a01      	ldr	r2, [sp, #4]
 800bed0:	4807      	ldr	r0, [pc, #28]	; (800bef0 <portDataTxRxComplete+0x70>)
 800bed2:	2101      	movs	r1, #1
 800bed4:	f7ff fa7c 	bl	800b3d0 <moduleSendCommand>
 800bed8:	2800      	cmp	r0, #0
 800beda:	daec      	bge.n	800beb6 <portDataTxRxComplete+0x36>
        {
          //Sending failed
          return -1;
 800bedc:	f04f 30ff 	mov.w	r0, #4294967295
          //Sending failed
          return -1;
        }
    }
  return 0;
}
 800bee0:	b002      	add	sp, #8
 800bee2:	bd70      	pop	{r4, r5, r6, pc}
 800bee4:	0801d87e 	.word	0x0801d87e
 800bee8:	0801d814 	.word	0x0801d814
 800beec:	0801d5dd 	.word	0x0801d5dd
 800bef0:	10001f18 	.word	0x10001f18

0800bef4 <switchPortHelper>:
  int type;
  uint8_t wait;
} messageSwitchPort_t;

int switchPortHelper(portNum_t portNum, int type)
{
 800bef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bef6:	4605      	mov	r5, r0
  //Allocate resources for data transfer
  messageSwitchPort_t *message = dAlloc(sizeof(messageSwitchPort_t));
 800bef8:	2006      	movs	r0, #6
  int type;
  uint8_t wait;
} messageSwitchPort_t;

int switchPortHelper(portNum_t portNum, int type)
{
 800befa:	460e      	mov	r6, r1
  //Allocate resources for data transfer
  messageSwitchPort_t *message = dAlloc(sizeof(messageSwitchPort_t));
 800befc:	f009 f83e 	bl	8014f7c <bAlloc>
 800bf00:	b120      	cbz	r0, 800bf0c <switchPortHelper+0x18>

  massert(portNum < PORTS_NUM);
 800bf02:	2d08      	cmp	r5, #8
} messageSwitchPort_t;

int switchPortHelper(portNum_t portNum, int type)
{
  //Allocate resources for data transfer
  messageSwitchPort_t *message = dAlloc(sizeof(messageSwitchPort_t));
 800bf04:	f100 0414 	add.w	r4, r0, #20

  massert(portNum < PORTS_NUM);
 800bf08:	d910      	bls.n	800bf2c <switchPortHelper+0x38>
 800bf0a:	e002      	b.n	800bf12 <switchPortHelper+0x1e>
 800bf0c:	2d08      	cmp	r5, #8
 800bf0e:	d91d      	bls.n	800bf4c <switchPortHelper+0x58>
} messageSwitchPort_t;

int switchPortHelper(portNum_t portNum, int type)
{
  //Allocate resources for data transfer
  messageSwitchPort_t *message = dAlloc(sizeof(messageSwitchPort_t));
 800bf10:	4604      	mov	r4, r0

  massert(portNum < PORTS_NUM);
 800bf12:	4b16      	ldr	r3, [pc, #88]	; (800bf6c <switchPortHelper+0x78>)
 800bf14:	4916      	ldr	r1, [pc, #88]	; (800bf70 <switchPortHelper+0x7c>)
 800bf16:	4817      	ldr	r0, [pc, #92]	; (800bf74 <switchPortHelper+0x80>)
 800bf18:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800bf1c:	f7fc fe84 	bl	8008c28 <xprintf>
 800bf20:	2301      	movs	r3, #1
 800bf22:	9301      	str	r3, [sp, #4]
 800bf24:	9b01      	ldr	r3, [sp, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1fc      	bne.n	800bf24 <switchPortHelper+0x30>
  if (message == NULL)
 800bf2a:	b17c      	cbz	r4, 800bf4c <switchPortHelper+0x58>
    return -1;

  //Fill message
  message->portNum = portNum;
  message->type = type;
  message->wait = 1;
 800bf2c:	2301      	movs	r3, #1
  massert(portNum < PORTS_NUM);
  if (message == NULL)
    return -1;

  //Fill message
  message->portNum = portNum;
 800bf2e:	7025      	strb	r5, [r4, #0]
  message->type = type;
 800bf30:	f8c4 6001 	str.w	r6, [r4, #1]
  message->wait = 1;
 800bf34:	7163      	strb	r3, [r4, #5]

  //Send the message to the communicator
  if (moduleSendCommand(&moduleHWComm, CMD_SWITCH_PORT, message) < 0)
 800bf36:	4622      	mov	r2, r4
 800bf38:	2103      	movs	r1, #3
 800bf3a:	480f      	ldr	r0, [pc, #60]	; (800bf78 <switchPortHelper+0x84>)
 800bf3c:	f7ff fa48 	bl	800b3d0 <moduleSendCommand>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	da06      	bge.n	800bf52 <switchPortHelper+0x5e>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 800bf44:	f1a4 0014 	sub.w	r0, r4, #20
 800bf48:	f009 fa72 	bl	8015430 <bFree>
      return -1;
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	e00a      	b.n	800bf68 <switchPortHelper+0x74>
    }
  while(message->wait) mdelay(1);
 800bf52:	7965      	ldrb	r5, [r4, #5]
 800bf54:	b11d      	cbz	r5, 800bf5e <switchPortHelper+0x6a>
 800bf56:	2001      	movs	r0, #1
 800bf58:	f7fe fdd6 	bl	800ab08 <vTaskDelay>
 800bf5c:	e7f9      	b.n	800bf52 <switchPortHelper+0x5e>
  dFree(message);
 800bf5e:	f1a4 0014 	sub.w	r0, r4, #20
 800bf62:	f009 fa65 	bl	8015430 <bFree>
  return 0;
 800bf66:	4628      	mov	r0, r5

}
 800bf68:	b002      	add	sp, #8
 800bf6a:	bd70      	pop	{r4, r5, r6, pc}
 800bf6c:	0801d87e 	.word	0x0801d87e
 800bf70:	0801d829 	.word	0x0801d829
 800bf74:	0801d5dd 	.word	0x0801d5dd
 800bf78:	10001f18 	.word	0x10001f18

0800bf7c <rrGet>:
  message->wait = 0;
}

//Get byte from round robin buffer
int rrGet(roundRobin_t *rr)
{
 800bf7c:	b538      	push	{r3, r4, r5, lr}
 800bf7e:	4604      	mov	r4, r0
  taskENTER_CRITICAL();
 800bf80:	f7fe fa14 	bl	800a3ac <vPortEnterCritical>
  int ch = -1;
  if (rr->num > 0)
 800bf84:	68a2      	ldr	r2, [r4, #8]
 800bf86:	2a00      	cmp	r2, #0
 800bf88:	dd10      	ble.n	800bfac <rrGet+0x30>
    {
      ch = rr->buffer[rr->head];
 800bf8a:	6823      	ldr	r3, [r4, #0]
 800bf8c:	18e1      	adds	r1, r4, r3
      rr->head = (rr->head + 1) % ROUND_ROBIN_SIZE;
      rr->num--;
 800bf8e:	3a01      	subs	r2, #1
{
  taskENTER_CRITICAL();
  int ch = -1;
  if (rr->num > 0)
    {
      ch = rr->buffer[rr->head];
 800bf90:	7b0d      	ldrb	r5, [r1, #12]
      rr->head = (rr->head + 1) % ROUND_ROBIN_SIZE;
      rr->num--;
 800bf92:	60a2      	str	r2, [r4, #8]
  taskENTER_CRITICAL();
  int ch = -1;
  if (rr->num > 0)
    {
      ch = rr->buffer[rr->head];
      rr->head = (rr->head + 1) % ROUND_ROBIN_SIZE;
 800bf94:	1c59      	adds	r1, r3, #1
 800bf96:	4b08      	ldr	r3, [pc, #32]	; (800bfb8 <rrGet+0x3c>)
 800bf98:	400b      	ands	r3, r1
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	bfbe      	ittt	lt
 800bf9e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bfa2:	f063 03ff 	ornlt	r3, r3, #255	; 0xff
 800bfa6:	3301      	addlt	r3, #1
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	e001      	b.n	800bfb0 <rrGet+0x34>

//Get byte from round robin buffer
int rrGet(roundRobin_t *rr)
{
  taskENTER_CRITICAL();
  int ch = -1;
 800bfac:	f04f 35ff 	mov.w	r5, #4294967295
    {
      ch = rr->buffer[rr->head];
      rr->head = (rr->head + 1) % ROUND_ROBIN_SIZE;
      rr->num--;
    }
  taskEXIT_CRITICAL();
 800bfb0:	f7fe fa0e 	bl	800a3d0 <vPortExitCritical>
  return ch;
}
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	bd38      	pop	{r3, r4, r5, pc}
 800bfb8:	800000ff 	.word	0x800000ff

0800bfbc <rrPut>:

//Put a byte into round robin buffer
int rrPut(roundRobin_t *rr, char ch)
{
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	460d      	mov	r5, r1
  int res = 0;
  taskENTER_CRITICAL();
 800bfc2:	f7fe f9f3 	bl	800a3ac <vPortEnterCritical>
  if (rr->num < ROUND_ROBIN_SIZE)
 800bfc6:	68a2      	ldr	r2, [r4, #8]
 800bfc8:	2aff      	cmp	r2, #255	; 0xff
 800bfca:	dc11      	bgt.n	800bff0 <rrPut+0x34>
    {
      rr->buffer[rr->tail] = ch;
 800bfcc:	6863      	ldr	r3, [r4, #4]
 800bfce:	18e0      	adds	r0, r4, r3
      rr->tail = (rr->tail + 1) % ROUND_ROBIN_SIZE;
 800bfd0:	1c59      	adds	r1, r3, #1
 800bfd2:	4b0a      	ldr	r3, [pc, #40]	; (800bffc <rrPut+0x40>)
{
  int res = 0;
  taskENTER_CRITICAL();
  if (rr->num < ROUND_ROBIN_SIZE)
    {
      rr->buffer[rr->tail] = ch;
 800bfd4:	7305      	strb	r5, [r0, #12]
      rr->tail = (rr->tail + 1) % ROUND_ROBIN_SIZE;
 800bfd6:	400b      	ands	r3, r1
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	bfbe      	ittt	lt
 800bfdc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bfe0:	f063 03ff 	ornlt	r3, r3, #255	; 0xff
 800bfe4:	3301      	addlt	r3, #1
      rr->num++;
 800bfe6:	3201      	adds	r2, #1
  int res = 0;
  taskENTER_CRITICAL();
  if (rr->num < ROUND_ROBIN_SIZE)
    {
      rr->buffer[rr->tail] = ch;
      rr->tail = (rr->tail + 1) % ROUND_ROBIN_SIZE;
 800bfe8:	6063      	str	r3, [r4, #4]
      rr->num++;
 800bfea:	60a2      	str	r2, [r4, #8]
}

//Put a byte into round robin buffer
int rrPut(roundRobin_t *rr, char ch)
{
  int res = 0;
 800bfec:	2400      	movs	r4, #0
 800bfee:	e001      	b.n	800bff4 <rrPut+0x38>
    {
      rr->buffer[rr->tail] = ch;
      rr->tail = (rr->tail + 1) % ROUND_ROBIN_SIZE;
      rr->num++;
    }
  else res = -1;
 800bff0:	f04f 34ff 	mov.w	r4, #4294967295
  taskEXIT_CRITICAL();
 800bff4:	f7fe f9ec 	bl	800a3d0 <vPortExitCritical>
  return res;
}
 800bff8:	4620      	mov	r0, r4
 800bffa:	bd38      	pop	{r3, r4, r5, pc}
 800bffc:	800000ff 	.word	0x800000ff

0800c000 <USARTreceiveData>:
#include STMINCP()
#include STMINCS(_usart)

//Pick data from USART Rx buffer
int USARTreceiveData(portNum_t portNum, char *buffer, int maxSize)
{
 800c000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int getNum = 0;
  while (maxSize)
    {
      int data = rrGet(&(((usartHelper_t *)portData[portNum].UARThelper)->rrRx));
 800c004:	2650      	movs	r6, #80	; 0x50
 800c006:	f8df 9034 	ldr.w	r9, [pc, #52]	; 800c03c <USARTreceiveData+0x3c>
#include STMINCP()
#include STMINCS(_usart)

//Pick data from USART Rx buffer
int USARTreceiveData(portNum_t portNum, char *buffer, int maxSize)
{
 800c00a:	460d      	mov	r5, r1
 800c00c:	eb01 0802 	add.w	r8, r1, r2
  int getNum = 0;
  while (maxSize)
 800c010:	460c      	mov	r4, r1
    {
      int data = rrGet(&(((usartHelper_t *)portData[portNum].UARThelper)->rrRx));
 800c012:	4346      	muls	r6, r0

//Pick data from USART Rx buffer
int USARTreceiveData(portNum_t portNum, char *buffer, int maxSize)
{
  int getNum = 0;
  while (maxSize)
 800c014:	4544      	cmp	r4, r8
 800c016:	eba4 0705 	sub.w	r7, r4, r5
 800c01a:	d00b      	beq.n	800c034 <USARTreceiveData+0x34>
    {
      int data = rrGet(&(((usartHelper_t *)portData[portNum].UARThelper)->rrRx));
 800c01c:	eb09 0306 	add.w	r3, r9, r6
 800c020:	6958      	ldr	r0, [r3, #20]
 800c022:	f500 7086 	add.w	r0, r0, #268	; 0x10c
 800c026:	f7ff ffa9 	bl	800bf7c <rrGet>
      if (data < 0) break;
 800c02a:	2800      	cmp	r0, #0
 800c02c:	db02      	blt.n	800c034 <USARTreceiveData+0x34>
      *buffer = data;
 800c02e:	f804 0b01 	strb.w	r0, [r4], #1
 800c032:	e7ef      	b.n	800c014 <USARTreceiveData+0x14>
      buffer++;
      maxSize--;
      getNum++;
    }
  return getNum;
}
 800c034:	4638      	mov	r0, r7
 800c036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c03a:	bf00      	nop
 800c03c:	10002038 	.word	0x10002038

0800c040 <USARTsendData>:

//Put data into USART Tx buffer and initiate transmission.
int USARTsendData (portNum_t portNum, char *buffer, int size)
{
 800c040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int putNum = 0;
  taskENTER_CRITICAL();
  while (size)
    {
      if (rrPut(&(((usartHelper_t *)portData[portNum].UARThelper)->rrTx), *buffer) < 0) break;
 800c044:	4f13      	ldr	r7, [pc, #76]	; (800c094 <USARTsendData+0x54>)
  return getNum;
}

//Put data into USART Tx buffer and initiate transmission.
int USARTsendData (portNum_t portNum, char *buffer, int size)
{
 800c046:	460e      	mov	r6, r1
 800c048:	4680      	mov	r8, r0
 800c04a:	4615      	mov	r5, r2
  int putNum = 0;
  taskENTER_CRITICAL();
 800c04c:	f7fe f9ae 	bl	800a3ac <vPortEnterCritical>
  while (size)
    {
      if (rrPut(&(((usartHelper_t *)portData[portNum].UARThelper)->rrTx), *buffer) < 0) break;
 800c050:	2350      	movs	r3, #80	; 0x50
 800c052:	4435      	add	r5, r6
//Put data into USART Tx buffer and initiate transmission.
int USARTsendData (portNum_t portNum, char *buffer, int size)
{
  int putNum = 0;
  taskENTER_CRITICAL();
  while (size)
 800c054:	4634      	mov	r4, r6
    {
      if (rrPut(&(((usartHelper_t *)portData[portNum].UARThelper)->rrTx), *buffer) < 0) break;
 800c056:	fb03 7708 	mla	r7, r3, r8, r7
//Put data into USART Tx buffer and initiate transmission.
int USARTsendData (portNum_t portNum, char *buffer, int size)
{
  int putNum = 0;
  taskENTER_CRITICAL();
  while (size)
 800c05a:	42ac      	cmp	r4, r5
 800c05c:	ebc6 0904 	rsb	r9, r6, r4
 800c060:	d006      	beq.n	800c070 <USARTsendData+0x30>
    {
      if (rrPut(&(((usartHelper_t *)portData[portNum].UARThelper)->rrTx), *buffer) < 0) break;
 800c062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c066:	6978      	ldr	r0, [r7, #20]
 800c068:	f7ff ffa8 	bl	800bfbc <rrPut>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	daf4      	bge.n	800c05a <USARTsendData+0x1a>
      buffer++;
      size--;
      putNum++;
    }
  taskEXIT_CRITICAL();
 800c070:	f7fe f9ae 	bl	800a3d0 <vPortExitCritical>
  USART_ITConfig(((usartHelper_t *)portData[portNum].UARThelper)->usart, USART_IT_TXE, ENABLE);
 800c074:	4807      	ldr	r0, [pc, #28]	; (800c094 <USARTsendData+0x54>)
 800c076:	2350      	movs	r3, #80	; 0x50
 800c078:	fb03 0008 	mla	r0, r3, r8, r0
 800c07c:	2201      	movs	r2, #1
 800c07e:	6943      	ldr	r3, [r0, #20]
 800c080:	f240 7127 	movw	r1, #1831	; 0x727
 800c084:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
 800c088:	f005 f83e 	bl	8011108 <USART_ITConfig>
  return putNum;
}
 800c08c:	4648      	mov	r0, r9
 800c08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c092:	bf00      	nop
 800c094:	10002038 	.word	0x10002038

0800c098 <getImageChunk>:


#ifdef RADIO_IMAGE

static void getImageChunk(uint8_t *chunk, const uint8_t *image, int offset, int size, uint32_t manId, uint32_t prodId)
{
 800c098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint8_t *buff = intSafeMalloc(size+8);
 800c09c:	f103 0a08 	add.w	sl, r3, #8


#ifdef RADIO_IMAGE

static void getImageChunk(uint8_t *chunk, const uint8_t *image, int offset, int size, uint32_t manId, uint32_t prodId)
{
 800c0a0:	4681      	mov	r9, r0

  uint8_t *buff = intSafeMalloc(size+8);
 800c0a2:	4650      	mov	r0, sl


#ifdef RADIO_IMAGE

static void getImageChunk(uint8_t *chunk, const uint8_t *image, int offset, int size, uint32_t manId, uint32_t prodId)
{
 800c0a4:	468b      	mov	fp, r1
 800c0a6:	4690      	mov	r8, r2
 800c0a8:	461d      	mov	r5, r3
 800c0aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c0ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c

  uint8_t *buff = intSafeMalloc(size+8);
 800c0ae:	f7fc fc3a 	bl	8008926 <intSafeMalloc>
  uint32_t prodIdbe = END_SWAP_32(prodId);
  uint32_t manIdbe = END_SWAP_32(manId);
  memcpy(buff, image-4+offset, size+8);
 800c0b2:	f1a8 0104 	sub.w	r1, r8, #4
 800c0b6:	4652      	mov	r2, sl
 800c0b8:	4459      	add	r1, fp
#ifdef RADIO_IMAGE

static void getImageChunk(uint8_t *chunk, const uint8_t *image, int offset, int size, uint32_t manId, uint32_t prodId)
{

  uint8_t *buff = intSafeMalloc(size+8);
 800c0ba:	4604      	mov	r4, r0
  uint32_t prodIdbe = END_SWAP_32(prodId);
  uint32_t manIdbe = END_SWAP_32(manId);
  memcpy(buff, image-4+offset, size+8);
 800c0bc:	f010 ffc0 	bl	801d040 <memcpy>
  int p;
  for(p = 0; p < size+8-3;)
    {
      uint32_t *id = (uint32_t*)&buff[p];
      switch(*id)
 800c0c0:	4810      	ldr	r0, [pc, #64]	; (800c104 <getImageChunk+0x6c>)
 800c0c2:	f8df e044 	ldr.w	lr, [pc, #68]	; 800c108 <getImageChunk+0x70>
 800c0c6:	ba36      	rev	r6, r6
 800c0c8:	ba3f      	rev	r7, r7
  uint8_t *buff = intSafeMalloc(size+8);
  uint32_t prodIdbe = END_SWAP_32(prodId);
  uint32_t manIdbe = END_SWAP_32(manId);
  memcpy(buff, image-4+offset, size+8);
  int p;
  for(p = 0; p < size+8-3;)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	1d29      	adds	r1, r5, #4
 800c0ce:	428a      	cmp	r2, r1
 800c0d0:	dc0e      	bgt.n	800c0f0 <getImageChunk+0x58>
    {
      uint32_t *id = (uint32_t*)&buff[p];
      switch(*id)
 800c0d2:	58a3      	ldr	r3, [r4, r2]
 800c0d4:	4283      	cmp	r3, r0
  uint32_t manIdbe = END_SWAP_32(manId);
  memcpy(buff, image-4+offset, size+8);
  int p;
  for(p = 0; p < size+8-3;)
    {
      uint32_t *id = (uint32_t*)&buff[p];
 800c0d6:	eb04 0c02 	add.w	ip, r4, r2
      switch(*id)
 800c0da:	d004      	beq.n	800c0e6 <getImageChunk+0x4e>
 800c0dc:	4573      	cmp	r3, lr
 800c0de:	d105      	bne.n	800c0ec <getImageChunk+0x54>
        case 0x01EFCDAB:
          *id = manIdbe;
          p+= 4;
          break;
        case 0x02EFCDAB:
          *id = prodIdbe;
 800c0e0:	f8cc 6000 	str.w	r6, [ip]
 800c0e4:	e000      	b.n	800c0e8 <getImageChunk+0x50>
    {
      uint32_t *id = (uint32_t*)&buff[p];
      switch(*id)
        {
        case 0x01EFCDAB:
          *id = manIdbe;
 800c0e6:	50a7      	str	r7, [r4, r2]
          p+= 4;
          break;
        case 0x02EFCDAB:
          *id = prodIdbe;
          p+= 4;
 800c0e8:	3204      	adds	r2, #4
          break;
 800c0ea:	e7f0      	b.n	800c0ce <getImageChunk+0x36>
        default:
          p+=1;
 800c0ec:	3201      	adds	r2, #1
          break;
 800c0ee:	e7ee      	b.n	800c0ce <getImageChunk+0x36>
        }
    }
  memcpy(chunk, buff+4, size);
 800c0f0:	462a      	mov	r2, r5
 800c0f2:	1d21      	adds	r1, r4, #4
 800c0f4:	4648      	mov	r0, r9
 800c0f6:	f010 ffa3 	bl	801d040 <memcpy>
  intSafeFree(buff);
 800c0fa:	4620      	mov	r0, r4
}
 800c0fc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          p+=1;
          break;
        }
    }
  memcpy(chunk, buff+4, size);
  intSafeFree(buff);
 800c100:	f7fc bc22 	b.w	8008948 <intSafeFree>
 800c104:	01efcdab 	.word	0x01efcdab
 800c108:	02efcdab 	.word	0x02efcdab

0800c10c <getImageCRC>:
}

static uint32_t getImageCRC(const uint8_t *image, uint32_t manId, uint32_t prodId)
{
 800c10c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t imageSize = (image[0x1E] << 8) | image[0x1F];
 800c110:	7f84      	ldrb	r4, [r0, #30]
 800c112:	7fc3      	ldrb	r3, [r0, #31]
  memcpy(chunk, buff+4, size);
  intSafeFree(buff);
}

static uint32_t getImageCRC(const uint8_t *image, uint32_t manId, uint32_t prodId)
{
 800c114:	4680      	mov	r8, r0
  uint32_t imageSize = (image[0x1E] << 8) | image[0x1F];
  uint8_t *buff = intSafeMalloc(0x100);
 800c116:	f44f 7080 	mov.w	r0, #256	; 0x100
  memcpy(chunk, buff+4, size);
  intSafeFree(buff);
}

static uint32_t getImageCRC(const uint8_t *image, uint32_t manId, uint32_t prodId)
{
 800c11a:	4689      	mov	r9, r1
 800c11c:	4692      	mov	sl, r2
  uint32_t imageSize = (image[0x1E] << 8) | image[0x1F];
 800c11e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  uint8_t *buff = intSafeMalloc(0x100);
 800c122:	f7fc fc00 	bl	8008926 <intSafeMalloc>
  int sizeLeft = imageSize;
  uint32_t offset = 0;
  uint32_t crc = 0x0;
 800c126:	2500      	movs	r5, #0
}

static uint32_t getImageCRC(const uint8_t *image, uint32_t manId, uint32_t prodId)
{
  uint32_t imageSize = (image[0x1E] << 8) | image[0x1F];
  uint8_t *buff = intSafeMalloc(0x100);
 800c128:	4606      	mov	r6, r0
  int sizeLeft = imageSize;
  uint32_t offset = 0;
 800c12a:	462f      	mov	r7, r5
  uint32_t crc = 0x0;
  while(sizeLeft > 0)
 800c12c:	2c00      	cmp	r4, #0
 800c12e:	dd18      	ble.n	800c162 <getImageCRC+0x56>
    {
      int chunk = (sizeLeft >= 0x100)?0x100:sizeLeft;
 800c130:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800c134:	46a3      	mov	fp, r4
      getImageChunk(buff, image, offset, 0x100, manId, prodId);
 800c136:	463a      	mov	r2, r7
  int sizeLeft = imageSize;
  uint32_t offset = 0;
  uint32_t crc = 0x0;
  while(sizeLeft > 0)
    {
      int chunk = (sizeLeft >= 0x100)?0x100:sizeLeft;
 800c138:	bfa8      	it	ge
 800c13a:	f44f 7b80 	movge.w	fp, #256	; 0x100
      getImageChunk(buff, image, offset, 0x100, manId, prodId);
 800c13e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c142:	4641      	mov	r1, r8
 800c144:	4630      	mov	r0, r6
 800c146:	e88d 0600 	stmia.w	sp, {r9, sl}
 800c14a:	f7ff ffa5 	bl	800c098 <getImageChunk>
      offset   += chunk;
      sizeLeft -= chunk;

      crc = crc32(crc, buff, chunk);
 800c14e:	4628      	mov	r0, r5
 800c150:	465a      	mov	r2, fp
 800c152:	4631      	mov	r1, r6
 800c154:	f7f4 f8be 	bl	80002d4 <crc32>
  uint32_t crc = 0x0;
  while(sizeLeft > 0)
    {
      int chunk = (sizeLeft >= 0x100)?0x100:sizeLeft;
      getImageChunk(buff, image, offset, 0x100, manId, prodId);
      offset   += chunk;
 800c158:	445f      	add	r7, fp
      sizeLeft -= chunk;
 800c15a:	ebcb 0404 	rsb	r4, fp, r4

      crc = crc32(crc, buff, chunk);
 800c15e:	4605      	mov	r5, r0
 800c160:	e7e4      	b.n	800c12c <getImageCRC+0x20>
    }
  intSafeFree(buff);
 800c162:	4630      	mov	r0, r6
 800c164:	f7fc fbf0 	bl	8008948 <intSafeFree>
  return END_SWAP_32(crc);
}
 800c168:	ba28      	rev	r0, r5
 800c16a:	b003      	add	sp, #12
 800c16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c170 <radioReinit>:
{
  uint8_t res;
} messageRadioReinit_t;

int radioReinit(void)
{
 800c170:	b510      	push	{r4, lr}
  //Allocate resources for data transfer
  messageRadioReinit_t *message = dAlloc(sizeof(messageRadioReinit_t));
 800c172:	2001      	movs	r0, #1
 800c174:	f008 ff02 	bl	8014f7c <bAlloc>
 800c178:	4604      	mov	r4, r0
 800c17a:	b150      	cbz	r0, 800c192 <radioReinit+0x22>
    return -1;

  //Fill message

  //Send the message to communicator
  if (moduleSendCommand(&moduleSPI, CMD_RADIO_REINIT, message) < 0)
 800c17c:	f100 0214 	add.w	r2, r0, #20
 800c180:	2102      	movs	r1, #2
 800c182:	4806      	ldr	r0, [pc, #24]	; (800c19c <radioReinit+0x2c>)
 800c184:	f7ff f924 	bl	800b3d0 <moduleSendCommand>
 800c188:	2800      	cmp	r0, #0
 800c18a:	da05      	bge.n	800c198 <radioReinit+0x28>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 800c18c:	4620      	mov	r0, r4
 800c18e:	f009 f94f 	bl	8015430 <bFree>
{
  //Allocate resources for data transfer
  messageRadioReinit_t *message = dAlloc(sizeof(messageRadioReinit_t));

  if (message == NULL)
    return -1;
 800c192:	f04f 30ff 	mov.w	r0, #4294967295
 800c196:	bd10      	pop	{r4, pc}
      //Sending failed
      //Free allocated resources
      dFree(message);
      return -1;
    }
  return 0;
 800c198:	2000      	movs	r0, #0
}
 800c19a:	bd10      	pop	{r4, pc}
 800c19c:	10001f58 	.word	0x10001f58

0800c1a0 <SPIevent>:
  } __attribute__((packed));
  uint32_t raw;
} __attribute__((packed)) ev_t;

int SPIevent(portNum_t portNum, uint8_t evType)
{
 800c1a0:	b507      	push	{r0, r1, r2, lr}
  ev_t ev = {.portNum = portNum, .evType = evType};
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	9301      	str	r3, [sp, #4]
 800c1a6:	f88d 0004 	strb.w	r0, [sp, #4]
 800c1aa:	f88d 1005 	strb.w	r1, [sp, #5]
  if (moduleSendCommand(&moduleSPI, CMD_EVENT, (void *)ev.raw) < 0)
 800c1ae:	9a01      	ldr	r2, [sp, #4]
 800c1b0:	4803      	ldr	r0, [pc, #12]	; (800c1c0 <SPIevent+0x20>)
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	f7ff f90c 	bl	800b3d0 <moduleSendCommand>
    {
      //Sending failed
      return -1;
    }
  return 0;
}
 800c1b8:	17c0      	asrs	r0, r0, #31
 800c1ba:	b003      	add	sp, #12
 800c1bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1c0:	10001f58 	.word	0x10001f58

0800c1c4 <SPIreceiveData>:

  eventType = 1;//Timeout by default
}

int SPIreceiveData(portNum_t portNum, char *buffer, int maxSize)
{
 800c1c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c1c8:	460e      	mov	r6, r1
  int getNum = 0;
  spiHelper_t *helper = (spiHelper_t *)portData[portNum].SPIhelper;
 800c1ca:	4917      	ldr	r1, [pc, #92]	; (800c228 <SPIreceiveData+0x64>)
 800c1cc:	2350      	movs	r3, #80	; 0x50
 800c1ce:	fb03 1300 	mla	r3, r3, r0, r1

  eventType = 1;//Timeout by default
}

int SPIreceiveData(portNum_t portNum, char *buffer, int maxSize)
{
 800c1d2:	4607      	mov	r7, r0
  int getNum = 0;
  spiHelper_t *helper = (spiHelper_t *)portData[portNum].SPIhelper;
 800c1d4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800c1d8:	4615      	mov	r5, r2
  eventType = 1;//Timeout by default
}

int SPIreceiveData(portNum_t portNum, char *buffer, int maxSize)
{
  int getNum = 0;
 800c1da:	2400      	movs	r4, #0
  spiHelper_t *helper = (spiHelper_t *)portData[portNum].SPIhelper;
  while (maxSize--)
 800c1dc:	b14d      	cbz	r5, 800c1f2 <SPIreceiveData+0x2e>
    {
      int data = rrGet(&(helper->rr));
 800c1de:	4640      	mov	r0, r8
 800c1e0:	f7ff fecc 	bl	800bf7c <rrGet>
      if (data >= 0)
 800c1e4:	2800      	cmp	r0, #0
        {
          *(buffer++) = data;
 800c1e6:	bfa2      	ittt	ge
 800c1e8:	7030      	strbge	r0, [r6, #0]
          getNum++;
 800c1ea:	3401      	addge	r4, #1
  while (maxSize--)
    {
      int data = rrGet(&(helper->rr));
      if (data >= 0)
        {
          *(buffer++) = data;
 800c1ec:	3601      	addge	r6, #1
 800c1ee:	3d01      	subs	r5, #1
 800c1f0:	e7f4      	b.n	800c1dc <SPIreceiveData+0x18>
          getNum++;
        }
    }
  if (helper->rr.num > 0)
 800c1f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	dd12      	ble.n	800c220 <SPIreceiveData+0x5c>
    massert(portDataTxRxComplete(portNum, PORT_TYPE_SPI, RXTX_COMPLETE_RX) >= 0);
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	4638      	mov	r0, r7
 800c200:	f7ff fe3e 	bl	800be80 <portDataTxRxComplete>
 800c204:	2800      	cmp	r0, #0
 800c206:	da0b      	bge.n	800c220 <SPIreceiveData+0x5c>
 800c208:	4b08      	ldr	r3, [pc, #32]	; (800c22c <SPIreceiveData+0x68>)
 800c20a:	4909      	ldr	r1, [pc, #36]	; (800c230 <SPIreceiveData+0x6c>)
 800c20c:	4809      	ldr	r0, [pc, #36]	; (800c234 <SPIreceiveData+0x70>)
 800c20e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800c212:	f7fc fd09 	bl	8008c28 <xprintf>
 800c216:	2301      	movs	r3, #1
 800c218:	9301      	str	r3, [sp, #4]
 800c21a:	9b01      	ldr	r3, [sp, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1fc      	bne.n	800c21a <SPIreceiveData+0x56>
  return getNum;
}
 800c220:	4620      	mov	r0, r4
 800c222:	b002      	add	sp, #8
 800c224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c228:	10002038 	.word	0x10002038
 800c22c:	0803d92c 	.word	0x0803d92c
 800c230:	0801d8d4 	.word	0x0801d8d4
 800c234:	0801d5dd 	.word	0x0801d5dd

0800c238 <SPIsendData>:

int SPIsendData (portNum_t portNum, char *buffer, int size)
{
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	4606      	mov	r6, r0
} messageSendBuffer_t;

static int SPISendBuffer(portNum_t portNum, char *buffer, int bufferLen)
{
  //Allocate resources for data transfer
  messageSendBuffer_t *message = dAlloc(sizeof(messageSendBuffer_t));
 800c23c:	2009      	movs	r0, #9
    massert(portDataTxRxComplete(portNum, PORT_TYPE_SPI, RXTX_COMPLETE_RX) >= 0);
  return getNum;
}

int SPIsendData (portNum_t portNum, char *buffer, int size)
{
 800c23e:	460f      	mov	r7, r1
 800c240:	4615      	mov	r5, r2
} messageSendBuffer_t;

static int SPISendBuffer(portNum_t portNum, char *buffer, int bufferLen)
{
  //Allocate resources for data transfer
  messageSendBuffer_t *message = dAlloc(sizeof(messageSendBuffer_t));
 800c242:	f008 fe9b 	bl	8014f7c <bAlloc>
 800c246:	4604      	mov	r4, r0
 800c248:	b178      	cbz	r0, 800c26a <SPIsendData+0x32>

  if (message == NULL)
    return -1;

  //Fill message
  message->buffer = buffer;
 800c24a:	6147      	str	r7, [r0, #20]
  message->bufLen = bufferLen;
 800c24c:	6185      	str	r5, [r0, #24]
  message->portNum = portNum;
 800c24e:	7706      	strb	r6, [r0, #28]

  //Send the message to communicator
  if (moduleSendCommand(&moduleSPI, CMD_SEND_BUFFER, message) < 0)
 800c250:	f100 0214 	add.w	r2, r0, #20
 800c254:	2101      	movs	r1, #1
 800c256:	4806      	ldr	r0, [pc, #24]	; (800c270 <SPIsendData+0x38>)
 800c258:	f7ff f8ba 	bl	800b3d0 <moduleSendCommand>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	da05      	bge.n	800c26c <SPIsendData+0x34>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 800c260:	4620      	mov	r0, r4
 800c262:	f009 f8e5 	bl	8015430 <bFree>
  return getNum;
}

int SPIsendData (portNum_t portNum, char *buffer, int size)
{
  int putNum = 0;
 800c266:	2500      	movs	r5, #0
 800c268:	e000      	b.n	800c26c <SPIsendData+0x34>
 800c26a:	4605      	mov	r5, r0
  if (SPISendBuffer(portNum, buffer, size) >= 0 )
    putNum = size;
  return putNum;
}
 800c26c:	4628      	mov	r0, r5
 800c26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c270:	10001f58 	.word	0x10001f58

0800c274 <spiHelperInit>:

void spiHelperInit(void)
{
 800c274:	b507      	push	{r0, r1, r2, lr}
  massert((mutex = xSemaphoreCreateMutex()));
 800c276:	2001      	movs	r0, #1
 800c278:	f7fe ff59 	bl	800b12e <xQueueCreateMutex>
 800c27c:	4b0b      	ldr	r3, [pc, #44]	; (800c2ac <spiHelperInit+0x38>)
 800c27e:	6018      	str	r0, [r3, #0]
 800c280:	b130      	cbz	r0, 800c290 <spiHelperInit+0x1c>
  moduleSPI.privateData = &moduleSPI;
 800c282:	480b      	ldr	r0, [pc, #44]	; (800c2b0 <spiHelperInit+0x3c>)
 800c284:	6300      	str	r0, [r0, #48]	; 0x30
  moduleInit(&(moduleSPI));
 800c286:	f7ff f8f7 	bl	800b478 <moduleInit>
}
 800c28a:	b003      	add	sp, #12
 800c28c:	f85d fb04 	ldr.w	pc, [sp], #4
  return putNum;
}

void spiHelperInit(void)
{
  massert((mutex = xSemaphoreCreateMutex()));
 800c290:	4b08      	ldr	r3, [pc, #32]	; (800c2b4 <spiHelperInit+0x40>)
 800c292:	4909      	ldr	r1, [pc, #36]	; (800c2b8 <spiHelperInit+0x44>)
 800c294:	4809      	ldr	r0, [pc, #36]	; (800c2bc <spiHelperInit+0x48>)
 800c296:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c29a:	f7fc fcc5 	bl	8008c28 <xprintf>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	9b01      	ldr	r3, [sp, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1fc      	bne.n	800c2a2 <spiHelperInit+0x2e>
 800c2a8:	e7eb      	b.n	800c282 <spiHelperInit+0xe>
 800c2aa:	bf00      	nop
 800c2ac:	10002cdc 	.word	0x10002cdc
 800c2b0:	10001f58 	.word	0x10001f58
 800c2b4:	0803d970 	.word	0x0803d970
 800c2b8:	0801d8e3 	.word	0x0801d8e3
 800c2bc:	0801d5dd 	.word	0x0801d5dd

0800c2c0 <ehifStart>:
}

static spi_t *EHIF_SPI_HOOK = NULL;

int ehifStart(spi_t *spi)
{
 800c2c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  massert(spi);
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	b160      	cbz	r0, 800c2e0 <ehifStart+0x20>
  if( xSemaphoreTake( mutex, portMAX_DELAY) == pdTRUE )
 800c2c6:	4c0f      	ldr	r4, [pc, #60]	; (800c304 <ehifStart+0x44>)
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6820      	ldr	r0, [r4, #0]
 800c2d2:	f7fe ffa5 	bl	800b220 <xQueueGenericReceive>
 800c2d6:	2801      	cmp	r0, #1
 800c2d8:	d00f      	beq.n	800c2fa <ehifStart+0x3a>
    {
      EHIF_SPI_HOOK = spi;
      return 0;
    }
  return -1;
 800c2da:	f04f 30ff 	mov.w	r0, #4294967295
 800c2de:	e00e      	b.n	800c2fe <ehifStart+0x3e>

static spi_t *EHIF_SPI_HOOK = NULL;

int ehifStart(spi_t *spi)
{
  massert(spi);
 800c2e0:	4b09      	ldr	r3, [pc, #36]	; (800c308 <ehifStart+0x48>)
 800c2e2:	490a      	ldr	r1, [pc, #40]	; (800c30c <ehifStart+0x4c>)
 800c2e4:	480a      	ldr	r0, [pc, #40]	; (800c310 <ehifStart+0x50>)
 800c2e6:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c2ea:	f7fc fc9d 	bl	8008c28 <xprintf>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	9301      	str	r3, [sp, #4]
 800c2f2:	9b01      	ldr	r3, [sp, #4]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d1fc      	bne.n	800c2f2 <ehifStart+0x32>
 800c2f8:	e7e5      	b.n	800c2c6 <ehifStart+0x6>
  if( xSemaphoreTake( mutex, portMAX_DELAY) == pdTRUE )
    {
      EHIF_SPI_HOOK = spi;
 800c2fa:	6065      	str	r5, [r4, #4]
      return 0;
 800c2fc:	2000      	movs	r0, #0
    }
  return -1;
}
 800c2fe:	b003      	add	sp, #12
 800c300:	bd30      	pop	{r4, r5, pc}
 800c302:	bf00      	nop
 800c304:	10002cdc 	.word	0x10002cdc
 800c308:	0803d992 	.word	0x0803d992
 800c30c:	0801d8f1 	.word	0x0801d8f1
 800c310:	0801d5dd 	.word	0x0801d5dd

0800c314 <ehifStop>:

void ehifStop(void)
{
  if(EHIF_SPI_HOOK)
 800c314:	4805      	ldr	r0, [pc, #20]	; (800c32c <ehifStop+0x18>)
 800c316:	6843      	ldr	r3, [r0, #4]
 800c318:	b133      	cbz	r3, 800c328 <ehifStop+0x14>
    {
      EHIF_SPI_HOOK = NULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	6043      	str	r3, [r0, #4]
      xSemaphoreGive(mutex);
 800c31e:	461a      	mov	r2, r3
 800c320:	4619      	mov	r1, r3
 800c322:	6800      	ldr	r0, [r0, #0]
 800c324:	f7fe be79 	b.w	800b01a <xQueueGenericSend>
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	10002cdc 	.word	0x10002cdc

0800c330 <checkDataReady>:

  massert(portDataTxRxComplete(message->portNum, PORT_TYPE_SPI, RXTX_COMPLETE_TX) >= 0);
  dFree(message);
}
static void checkDataReady(void)
{
 800c330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c334:	4c6a      	ldr	r4, [pc, #424]	; (800c4e0 <checkDataReady+0x1b0>)
    {
      // data rx
      portNum_t p;
      for (p = 0; p < PORTS_NUM; p++)
        {
          spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
 800c336:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 800c508 <checkDataReady+0x1d8>

  massert(portDataTxRxComplete(message->portNum, PORT_TYPE_SPI, RXTX_COMPLETE_TX) >= 0);
  dFree(message);
}
static void checkDataReady(void)
{
 800c33a:	b08f      	sub	sp, #60	; 0x3c
  int radioNum;
  for (radioNum = 0 ; radioNum < RADIO_MODULES; radioNum++)
 800c33c:	2500      	movs	r5, #0
 800c33e:	4627      	mov	r7, r4
 800c340:	46c1      	mov	r9, r8
    {
      radioModule_t *rm = &(radioModule[radioNum]);
      if(rm->spi.spi)
 800c342:	233b      	movs	r3, #59	; 0x3b
 800c344:	fb03 7305 	mla	r3, r3, r5, r7
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d14e      	bne.n	800c3ec <checkDataReady+0xbc>
  dFree(message);
}
static void checkDataReady(void)
{
  int radioNum;
  for (radioNum = 0 ; radioNum < RADIO_MODULES; radioNum++)
 800c34e:	3501      	adds	r5, #1
 800c350:	2d02      	cmp	r5, #2
 800c352:	f104 043b 	add.w	r4, r4, #59	; 0x3b
 800c356:	d1f4      	bne.n	800c342 <checkDataReady+0x12>
                  massert(portDataTxRxComplete(p, PORT_TYPE_SPI, RXTX_COMPLETE_RX) >= 0);
                }
            }
        }
    }
}
 800c358:	b00f      	add	sp, #60	; 0x3c
 800c35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static int SPI_Check(radioModule_t *rm, int eventType)
{
  int ret = 0;
  if (rm && rm->spi.spi)
    {
      ehifStart(&rm->spi);
 800c35e:	4620      	mov	r0, r4
 800c360:	f7ff ffae 	bl	800c2c0 <ehifStart>
      //Check if data is ready
      rm->status = ehifGetStatus();
 800c364:	f007 fa1b 	bl	801379e <ehifGetStatus>
      if(rm->status != 0xFFFF)
 800c368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c36c:	4298      	cmp	r0, r3
  int ret = 0;
  if (rm && rm->spi.spi)
    {
      ehifStart(&rm->spi);
      //Check if data is ready
      rm->status = ehifGetStatus();
 800c36e:	4606      	mov	r6, r0
 800c370:	f8aa 0038 	strh.w	r0, [sl, #56]	; 0x38
      if(rm->status != 0xFFFF)
 800c374:	d076      	beq.n	800c464 <checkDataReady+0x134>
        {
          uint16_t clrMask = (uint32_t)rm->status & (BV_EHIF_EVT_VOL_CHG | BV_EHIF_EVT_PS_CHG | BV_EHIF_EVT_NWK_CHG | BV_EHIF_EVT_SR_CHG | BV_EHIF_EVT_DSC_RESET);
          if(clrMask)
 800c376:	f010 0a2f 	ands.w	sl, r0, #47	; 0x2f
 800c37a:	d140      	bne.n	800c3fe <checkDataReady+0xce>
                  rm->nwkStateChange++;
                }
              if(clrMask&BV_EHIF_EVT_SR_CHG)    dprintf(LL_INFO, "Sample rate has changed\n");
              clearFlags(clrMask);
            }
          if ( rm->status & BV_EHIF_STAT_CONNECTED )  //0xFFFF when no CS or no cable connection
 800c37c:	233b      	movs	r3, #59	; 0x3b
 800c37e:	fb03 7305 	mla	r3, r3, r5, r7
 800c382:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
#endif
}

static int SPI_Check(radioModule_t *rm, int eventType)
{
  int ret = 0;
 800c384:	f406 76c0 	and.w	r6, r6, #384	; 0x180
 800c388:	f5a6 73c0 	sub.w	r3, r6, #384	; 0x180
 800c38c:	425e      	negs	r6, r3
 800c38e:	415e      	adcs	r6, r3
            {
              if (rm->status & BV_EHIF_EVT_DSC_RX_AVAIL)
                ret =  1;
            }
        }
      ehifStop();
 800c390:	f7ff ffc0 	bl	800c314 <ehifStop>
    {
      radioModule_t *rm = &(radioModule[radioNum]);
      if(rm->spi.spi)
        {
          //Check for data
          while (SPI_Check(rm, eventType))
 800c394:	2e00      	cmp	r6, #0
 800c396:	d0da      	beq.n	800c34e <checkDataReady+0x1e>
  return ret;
}

static int radioReceive(radioModule_t *rm, portNum_t *portNum, char *rxBuffer)
{
  ehifStart(&rm->spi);
 800c398:	4620      	mov	r0, r4
 800c39a:	f7ff ff91 	bl	800c2c0 <ehifStart>
  uint32_t address = 0 ;
  uint8_t reset = 0;;
 800c39e:	aa0e      	add	r2, sp, #56	; 0x38
}

static int radioReceive(radioModule_t *rm, portNum_t *portNum, char *rxBuffer)
{
  ehifStart(&rm->spi);
  uint32_t address = 0 ;
 800c3a0:	2600      	movs	r6, #0
  uint8_t reset = 0;;
  int size = queueRX(&address, (uint8_t *)rxBuffer, &reset) ;
 800c3a2:	f10d 0a18 	add.w	sl, sp, #24

static int radioReceive(radioModule_t *rm, portNum_t *portNum, char *rxBuffer)
{
  ehifStart(&rm->spi);
  uint32_t address = 0 ;
  uint8_t reset = 0;;
 800c3a6:	f802 6d29 	strb.w	r6, [r2, #-41]!
  int size = queueRX(&address, (uint8_t *)rxBuffer, &reset) ;
 800c3aa:	4651      	mov	r1, sl
 800c3ac:	a805      	add	r0, sp, #20
}

static int radioReceive(radioModule_t *rm, portNum_t *portNum, char *rxBuffer)
{
  ehifStart(&rm->spi);
  uint32_t address = 0 ;
 800c3ae:	9605      	str	r6, [sp, #20]
  uint8_t reset = 0;;
  int size = queueRX(&address, (uint8_t *)rxBuffer, &reset) ;
 800c3b0:	f006 ff1e 	bl	80131f0 <queueRX>
 800c3b4:	4683      	mov	fp, r0
  ehifStop();
 800c3b6:	f7ff ffad 	bl	800c314 <ehifStop>
  if (size)
 800c3ba:	f1bb 0f00 	cmp.w	fp, #0
 800c3be:	d015      	beq.n	800c3ec <checkDataReady+0xbc>
          if (helper &&
              helper->radioModule &&
              helper->radioModule == rm &&
#ifdef MADO
              //For master the address is remote.
              helper->connDev.devID == address
 800c3c0:	9905      	ldr	r1, [sp, #20]
 800c3c2:	4633      	mov	r3, r6
    {
      // data rx
      portNum_t p;
      for (p = 0; p < PORTS_NUM; p++)
        {
          spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
 800c3c4:	f04f 0c50 	mov.w	ip, #80	; 0x50
 800c3c8:	fb0c 8203 	mla	r2, ip, r3, r8
 800c3cc:	b2de      	uxtb	r6, r3
 800c3ce:	6910      	ldr	r0, [r2, #16]
          if (helper &&
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d149      	bne.n	800c468 <checkDataReady+0x138>
 800c3d4:	3301      	adds	r3, #1
  ehifStop();
  if (size)
    {
      // data rx
      portNum_t p;
      for (p = 0; p < PORTS_NUM; p++)
 800c3d6:	2b09      	cmp	r3, #9
 800c3d8:	d1f6      	bne.n	800c3c8 <checkDataReady+0x98>
                portData[p].dscResetRx++;

              break;
            }
        }
      if (p == PORTS_NUM)
 800c3da:	2e08      	cmp	r6, #8
 800c3dc:	d156      	bne.n	800c48c <checkDataReady+0x15c>
        {
          dprintf(LL_WARNING, "No matching port for message with address %x found.\n", address);
 800c3de:	4b41      	ldr	r3, [pc, #260]	; (800c4e4 <checkDataReady+0x1b4>)
 800c3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	dd02      	ble.n	800c3ec <checkDataReady+0xbc>
 800c3e6:	4840      	ldr	r0, [pc, #256]	; (800c4e8 <checkDataReady+0x1b8>)
 800c3e8:	f7fc fc1e 	bl	8008c28 <xprintf>
}

static int SPI_Check(radioModule_t *rm, int eventType)
{
  int ret = 0;
  if (rm && rm->spi.spi)
 800c3ec:	f04f 0a3b 	mov.w	sl, #59	; 0x3b
 800c3f0:	fb0a 7a05 	mla	sl, sl, r5, r7
 800c3f4:	f8da 3000 	ldr.w	r3, [sl]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1b0      	bne.n	800c35e <checkDataReady+0x2e>
 800c3fc:	e7a7      	b.n	800c34e <checkDataReady+0x1e>
        {
          uint16_t clrMask = (uint32_t)rm->status & (BV_EHIF_EVT_VOL_CHG | BV_EHIF_EVT_PS_CHG | BV_EHIF_EVT_NWK_CHG | BV_EHIF_EVT_SR_CHG | BV_EHIF_EVT_DSC_RESET);
          if(clrMask)
            {
              //              if(clrMask&BV_EHIF_EVT_DSC_RESET) dprintf(LL_INFO, "Data channel has been reset\n");
              if(clrMask&BV_EHIF_EVT_VOL_CHG)   dprintf(LL_INFO, "Volume has changed\n");
 800c3fe:	0703      	lsls	r3, r0, #28
 800c400:	d506      	bpl.n	800c410 <checkDataReady+0xe0>
 800c402:	4b38      	ldr	r3, [pc, #224]	; (800c4e4 <checkDataReady+0x1b4>)
 800c404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c406:	2b01      	cmp	r3, #1
 800c408:	dd02      	ble.n	800c410 <checkDataReady+0xe0>
 800c40a:	4838      	ldr	r0, [pc, #224]	; (800c4ec <checkDataReady+0x1bc>)
 800c40c:	f7fc fc0c 	bl	8008c28 <xprintf>
              if(clrMask&BV_EHIF_EVT_PS_CHG)    dprintf(LL_INFO, "Power state has changed to %x\n", (rm->status >> 9)&0x7);
 800c410:	0770      	lsls	r0, r6, #29
 800c412:	d50c      	bpl.n	800c42e <checkDataReady+0xfe>
 800c414:	4b33      	ldr	r3, [pc, #204]	; (800c4e4 <checkDataReady+0x1b4>)
 800c416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c418:	2b01      	cmp	r3, #1
 800c41a:	dd08      	ble.n	800c42e <checkDataReady+0xfe>
 800c41c:	233b      	movs	r3, #59	; 0x3b
 800c41e:	fb03 7305 	mla	r3, r3, r5, r7
 800c422:	4833      	ldr	r0, [pc, #204]	; (800c4f0 <checkDataReady+0x1c0>)
 800c424:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800c426:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800c42a:	f7fc fbfd 	bl	8008c28 <xprintf>
              if(clrMask&BV_EHIF_EVT_NWK_CHG)
 800c42e:	07b1      	lsls	r1, r6, #30
 800c430:	d50b      	bpl.n	800c44a <checkDataReady+0x11a>
                {
                  dprintf(LL_INFO, "Network state has changed\n");
 800c432:	4b2c      	ldr	r3, [pc, #176]	; (800c4e4 <checkDataReady+0x1b4>)
 800c434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c436:	2b01      	cmp	r3, #1
 800c438:	dd02      	ble.n	800c440 <checkDataReady+0x110>
 800c43a:	482e      	ldr	r0, [pc, #184]	; (800c4f4 <checkDataReady+0x1c4>)
 800c43c:	f7fc fbf4 	bl	8008c28 <xprintf>
                  rm->nwkStateChange++;
 800c440:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800c444:	3301      	adds	r3, #1
 800c446:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
                }
              if(clrMask&BV_EHIF_EVT_SR_CHG)    dprintf(LL_INFO, "Sample rate has changed\n");
 800c44a:	07f2      	lsls	r2, r6, #31
 800c44c:	d506      	bpl.n	800c45c <checkDataReady+0x12c>
 800c44e:	4b25      	ldr	r3, [pc, #148]	; (800c4e4 <checkDataReady+0x1b4>)
 800c450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c452:	2b01      	cmp	r3, #1
 800c454:	dd02      	ble.n	800c45c <checkDataReady+0x12c>
 800c456:	4828      	ldr	r0, [pc, #160]	; (800c4f8 <checkDataReady+0x1c8>)
 800c458:	f7fc fbe6 	bl	8008c28 <xprintf>
              clearFlags(clrMask);
 800c45c:	4650      	mov	r0, sl
 800c45e:	f006 fea5 	bl	80131ac <clearFlags>
 800c462:	e78b      	b.n	800c37c <checkDataReady+0x4c>
#endif
}

static int SPI_Check(radioModule_t *rm, int eventType)
{
  int ret = 0;
 800c464:	2600      	movs	r6, #0
 800c466:	e793      	b.n	800c390 <checkDataReady+0x60>
      portNum_t p;
      for (p = 0; p < PORTS_NUM; p++)
        {
          spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
          if (helper &&
              helper->radioModule &&
 800c468:	f8d0 e10c 	ldr.w	lr, [r0, #268]	; 0x10c
      // data rx
      portNum_t p;
      for (p = 0; p < PORTS_NUM; p++)
        {
          spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
          if (helper &&
 800c46c:	f1be 0f00 	cmp.w	lr, #0
 800c470:	d0b0      	beq.n	800c3d4 <checkDataReady+0xa4>
              helper->radioModule &&
 800c472:	4574      	cmp	r4, lr
 800c474:	d1ae      	bne.n	800c3d4 <checkDataReady+0xa4>
              helper->radioModule == rm &&
#ifdef MADO
              //For master the address is remote.
              helper->connDev.devID == address
 800c476:	f8d0 0115 	ldr.w	r0, [r0, #277]	; 0x115
      for (p = 0; p < PORTS_NUM; p++)
        {
          spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
          if (helper &&
              helper->radioModule &&
              helper->radioModule == rm &&
 800c47a:	4288      	cmp	r0, r1
 800c47c:	d1aa      	bne.n	800c3d4 <checkDataReady+0xa4>
              helper->radioModule->device.devID == address
#endif
             )
            {
              *portNum = p;
              if(reset)
 800c47e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800c482:	b123      	cbz	r3, 800c48e <checkDataReady+0x15e>
                portData[p].dscResetRx++;
 800c484:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800c486:	3301      	adds	r3, #1
 800c488:	6493      	str	r3, [r2, #72]	; 0x48
 800c48a:	e000      	b.n	800c48e <checkDataReady+0x15e>
          //Check for data
          while (SPI_Check(rm, eventType))
            {
              char buffer[MAX_DATA_SIZE];
              int size;
              portNum_t p = 0;
 800c48c:	2600      	movs	r6, #0
              if ((size = radioReceive(rm, &p, buffer)))
 800c48e:	f1bb 0f00 	cmp.w	fp, #0
 800c492:	d0ab      	beq.n	800c3ec <checkDataReady+0xbc>
                {
                  int idx = 0;
                  spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
 800c494:	2350      	movs	r3, #80	; 0x50
 800c496:	fb03 9306 	mla	r3, r3, r6, r9
 800c49a:	691a      	ldr	r2, [r3, #16]
 800c49c:	2300      	movs	r3, #0
                  while (size--) rrPut(&(helper->rr), buffer[idx++]);
 800c49e:	f81a 1003 	ldrb.w	r1, [sl, r3]
 800c4a2:	9301      	str	r3, [sp, #4]
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	9200      	str	r2, [sp, #0]
 800c4a8:	f7ff fd88 	bl	800bfbc <rrPut>
 800c4ac:	9b01      	ldr	r3, [sp, #4]
 800c4ae:	9a00      	ldr	r2, [sp, #0]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	455b      	cmp	r3, fp
 800c4b4:	d1f3      	bne.n	800c49e <checkDataReady+0x16e>
                  massert(portDataTxRxComplete(p, PORT_TYPE_SPI, RXTX_COMPLETE_RX) >= 0);
 800c4b6:	2202      	movs	r2, #2
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	f7ff fce0 	bl	800be80 <portDataTxRxComplete>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	da93      	bge.n	800c3ec <checkDataReady+0xbc>
 800c4c4:	4b0d      	ldr	r3, [pc, #52]	; (800c4fc <checkDataReady+0x1cc>)
 800c4c6:	490e      	ldr	r1, [pc, #56]	; (800c500 <checkDataReady+0x1d0>)
 800c4c8:	480e      	ldr	r0, [pc, #56]	; (800c504 <checkDataReady+0x1d4>)
 800c4ca:	f44f 72ca 	mov.w	r2, #404	; 0x194
 800c4ce:	f7fc fbab 	bl	8008c28 <xprintf>
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	9304      	str	r3, [sp, #16]
 800c4d6:	9b04      	ldr	r3, [sp, #16]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1fc      	bne.n	800c4d6 <checkDataReady+0x1a6>
 800c4dc:	e786      	b.n	800c3ec <checkDataReady+0xbc>
 800c4de:	bf00      	nop
 800c4e0:	100032b8 	.word	0x100032b8
 800c4e4:	10001000 	.word	0x10001000
 800c4e8:	0803d996 	.word	0x0803d996
 800c4ec:	0803da09 	.word	0x0803da09
 800c4f0:	0803da1d 	.word	0x0803da1d
 800c4f4:	0803da3c 	.word	0x0803da3c
 800c4f8:	0803da57 	.word	0x0803da57
 800c4fc:	0803d9cb 	.word	0x0803d9cb
 800c500:	0801d8fb 	.word	0x0801d8fb
 800c504:	0801d5dd 	.word	0x0801d5dd
 800c508:	10002038 	.word	0x10002038

0800c50c <getPortNum>:
}


#ifdef MADO
portNum_t getPortNum(int kondPom, int device)
{
 800c50c:	b510      	push	{r4, lr}
 800c50e:	4a0a      	ldr	r2, [pc, #40]	; (800c538 <getPortNum+0x2c>)
  portNum_t p;
  for (p = PER1_PORT; p < PORTS_NUM; p++)
 800c510:	2301      	movs	r3, #1
    {
      //Chek if port matching
      if(portData[p].kond_pom == kondPom)
 800c512:	f892 4069 	ldrb.w	r4, [r2, #105]	; 0x69
 800c516:	4284      	cmp	r4, r0
 800c518:	d104      	bne.n	800c524 <getPortNum+0x18>
        {
          if(portData[p].urzadzenie == device || device == 0)
 800c51a:	f892 406a 	ldrb.w	r4, [r2, #106]	; 0x6a
 800c51e:	428c      	cmp	r4, r1
 800c520:	d008      	beq.n	800c534 <getPortNum+0x28>
 800c522:	b139      	cbz	r1, 800c534 <getPortNum+0x28>

#ifdef MADO
portNum_t getPortNum(int kondPom, int device)
{
  portNum_t p;
  for (p = PER1_PORT; p < PORTS_NUM; p++)
 800c524:	3301      	adds	r3, #1
 800c526:	b2db      	uxtb	r3, r3
 800c528:	2b09      	cmp	r3, #9
 800c52a:	f102 0250 	add.w	r2, r2, #80	; 0x50
 800c52e:	d1f0      	bne.n	800c512 <getPortNum+0x6>
        {
          if(portData[p].urzadzenie == device || device == 0)
            return p;
        }
    }
  return PORT_INVALID;
 800c530:	200a      	movs	r0, #10
 800c532:	bd10      	pop	{r4, pc}
 800c534:	4618      	mov	r0, r3
}
 800c536:	bd10      	pop	{r4, pc}
 800c538:	10002038 	.word	0x10002038

0800c53c <SPIInternalEvent>:
  return 0;
}

static int eventType = 1;//Timeout by default
static void SPIInternalEvent(void *data)
{
 800c53c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ev_t ev = {.raw = (uint32_t)data};
  switch (ev.evType)
 800c53e:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return 0;
}

static int eventType = 1;//Timeout by default
static void SPIInternalEvent(void *data)
{
 800c542:	b085      	sub	sp, #20
  ev_t ev = {.raw = (uint32_t)data};
  switch (ev.evType)
 800c544:	2a02      	cmp	r2, #2
}

static int eventType = 1;//Timeout by default
static void SPIInternalEvent(void *data)
{
  ev_t ev = {.raw = (uint32_t)data};
 800c546:	9003      	str	r0, [sp, #12]
  switch (ev.evType)
 800c548:	d06e      	beq.n	800c628 <SPIInternalEvent+0xec>
 800c54a:	2a03      	cmp	r2, #3
 800c54c:	f000 80b2 	beq.w	800c6b4 <SPIInternalEvent+0x178>
 800c550:	2a01      	cmp	r2, #1
 800c552:	f040 8105 	bne.w	800c760 <SPIInternalEvent+0x224>
      eventType = 2;
      break;
    case SPI_EV_TYPE_LINK_ERROR:
    {
      //Degrade connection status as link connection error was detected
      spiHelper_t *helper = (spiHelper_t *)portData[ev.portNum].SPIhelper;
 800c556:	4a83      	ldr	r2, [pc, #524]	; (800c764 <SPIInternalEvent+0x228>)
 800c558:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800c55c:	2350      	movs	r3, #80	; 0x50
 800c55e:	fb03 2305 	mla	r3, r3, r5, r2
 800c562:	4616      	mov	r6, r2
 800c564:	691c      	ldr	r4, [r3, #16]
      if(!helper) break;
 800c566:	2c00      	cmp	r4, #0
 800c568:	f000 80fa 	beq.w	800c760 <SPIInternalEvent+0x224>
      if(portData[ev.portNum].portType == PORT_TYPE_SPI)
 800c56c:	7e1a      	ldrb	r2, [r3, #24]
 800c56e:	2a01      	cmp	r2, #1
 800c570:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c574:	d152      	bne.n	800c61c <SPIInternalEvent+0xe0>
        {
          if (portData[ev.portNum].connState != DEV_NCONN)
 800c576:	2a00      	cmp	r2, #0
 800c578:	f000 80f2 	beq.w	800c760 <SPIInternalEvent+0x224>
            {
              portData[ev.portNum].prevConnState = portData[ev.portNum].connState;
              portData[ev.portNum].connState = DEV_NCONN;
 800c57c:	2000      	movs	r0, #0
      if(!helper) break;
      if(portData[ev.portNum].portType == PORT_TYPE_SPI)
        {
          if (portData[ev.portNum].connState != DEV_NCONN)
            {
              portData[ev.portNum].prevConnState = portData[ev.portNum].connState;
 800c57e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
              portData[ev.portNum].connState = DEV_NCONN;
 800c582:	f883 0020 	strb.w	r0, [r3, #32]
              connectionState(NET_NC);
 800c586:	f7fc fd5d 	bl	8009044 <connectionState>
              dprintf(LL_INFO, "Connection with peer (%08x:%08x:%08x) lost.\n",
 800c58a:	4b77      	ldr	r3, [pc, #476]	; (800c768 <SPIInternalEvent+0x22c>)
 800c58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c58e:	2b01      	cmp	r3, #1
 800c590:	dd08      	ble.n	800c5a4 <SPIInternalEvent+0x68>
 800c592:	f8d4 311d 	ldr.w	r3, [r4, #285]	; 0x11d
 800c596:	f8d4 2119 	ldr.w	r2, [r4, #281]	; 0x119
 800c59a:	f8d4 1115 	ldr.w	r1, [r4, #277]	; 0x115
 800c59e:	4873      	ldr	r0, [pc, #460]	; (800c76c <SPIInternalEvent+0x230>)
 800c5a0:	f7fc fb42 	bl	8008c28 <xprintf>
                      helper->connDev.devID,
                      helper->connDev.manID,
                      helper->connDev.prodID);
              switchPortHelper(ev.portNum, PORT_TYPE_USART);
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	f7ff fca4 	bl	800bef4 <switchPortHelper>
#ifdef MADO
              helper->connDev.devID = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
 800c5b2:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
 800c5b6:	f884 3117 	strb.w	r3, [r4, #279]	; 0x117
 800c5ba:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
              helper->connDev.manID = 0;
 800c5be:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
 800c5c2:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
 800c5c6:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
 800c5ca:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
              helper->connDev.prodID = 0;
 800c5ce:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 800c5d2:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
 800c5d6:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
 800c5da:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
              helper->radioModule = NULL;
 800c5de:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 800c5e2:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
 800c5e6:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
 800c5ea:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
              helper->connDev.audioConnState = 0;
 800c5ee:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
 800c5f2:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122

              if(portData[portCompl[ev.portNum]].connState == DEV_NCONN)
 800c5f6:	4b5e      	ldr	r3, [pc, #376]	; (800c770 <SPIInternalEvent+0x234>)
 800c5f8:	5d5a      	ldrb	r2, [r3, r5]
 800c5fa:	2350      	movs	r3, #80	; 0x50
 800c5fc:	fb03 6302 	mla	r3, r3, r2, r6
 800c600:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c604:	b928      	cbnz	r0, 800c612 <SPIInternalEvent+0xd6>
                {
                  //Deregister speakerset from a stream
                  pipeSetSpkSet(0, -1, (ev.portNum-PER1_PORT)>>1);
 800c606:	1e6a      	subs	r2, r5, #1
 800c608:	1052      	asrs	r2, r2, #1
 800c60a:	f04f 31ff 	mov.w	r1, #4294967295
 800c60e:	f009 fbc9 	bl	8015da4 <pipeSetSpkSet>
                }
#else
              SmokLEDsState(-1, 0, SET_NONE, -1);
#endif

              sendNetworkStatus(ev.portNum, NET_DROPPED, (uint8_t)helper->connDev.devID);
 800c612:	f8d4 2115 	ldr.w	r2, [r4, #277]	; 0x115
 800c616:	2103      	movs	r1, #3
 800c618:	b2d2      	uxtb	r2, r2
 800c61a:	e02e      	b.n	800c67a <SPIInternalEvent+0x13e>
            }
        }
      else
        {
          if (portData[ev.portNum].connState == DEV_UCONN)
 800c61c:	2a03      	cmp	r2, #3
 800c61e:	f040 809f 	bne.w	800c760 <SPIInternalEvent+0x224>
            {
              portData[ev.portNum].prevConnState = portData[ev.portNum].connState;
 800c622:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800c626:	e030      	b.n	800c68a <SPIInternalEvent+0x14e>
    }
    break;
    case SPI_EV_TYPE_DLINK_ERROR:
    {
      //Degrade connection status as link connection error was detected
      spiHelper_t *helper = (spiHelper_t *)portData[ev.portNum].SPIhelper;
 800c628:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800c62c:	494d      	ldr	r1, [pc, #308]	; (800c764 <SPIInternalEvent+0x228>)
 800c62e:	2350      	movs	r3, #80	; 0x50
 800c630:	fb03 1305 	mla	r3, r3, r5, r1
 800c634:	691c      	ldr	r4, [r3, #16]
      if(!helper) break;
 800c636:	2c00      	cmp	r4, #0
 800c638:	f000 8092 	beq.w	800c760 <SPIInternalEvent+0x224>
      if(portData[ev.portNum].portType == PORT_TYPE_SPI)
 800c63c:	7e19      	ldrb	r1, [r3, #24]
 800c63e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c642:	2901      	cmp	r1, #1
 800c644:	d11d      	bne.n	800c682 <SPIInternalEvent+0x146>
        {
          if (portData[ev.portNum].connState == DEV_CONN)
 800c646:	2801      	cmp	r0, #1
 800c648:	f040 808a 	bne.w	800c760 <SPIInternalEvent+0x224>
            {
              portData[ev.portNum].prevConnState = portData[ev.portNum].connState;
 800c64c:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
              portData[ev.portNum].connState = DEV_PCONN;
 800c650:	f883 2020 	strb.w	r2, [r3, #32]
              connectionState(NET_PARTIAL);
 800c654:	f7fc fcf6 	bl	8009044 <connectionState>
              dprintf(LL_INFO, "Datagram connection with peer (%08x:%08x:%08x) lost.\n",
 800c658:	4b43      	ldr	r3, [pc, #268]	; (800c768 <SPIInternalEvent+0x22c>)
 800c65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	dd08      	ble.n	800c672 <SPIInternalEvent+0x136>
 800c660:	f8d4 311d 	ldr.w	r3, [r4, #285]	; 0x11d
 800c664:	f8d4 2119 	ldr.w	r2, [r4, #281]	; 0x119
 800c668:	f8d4 1115 	ldr.w	r1, [r4, #277]	; 0x115
 800c66c:	4841      	ldr	r0, [pc, #260]	; (800c774 <SPIInternalEvent+0x238>)
 800c66e:	f7fc fadb 	bl	8008c28 <xprintf>
                      helper->connDev.devID,
                      helper->connDev.manID,
                      helper->connDev.prodID);
              sendNetworkStatus(ev.portNum, NET_DATAGRAM_LOST, (uint8_t)helper->connDev.devID);
 800c672:	f8d4 2115 	ldr.w	r2, [r4, #277]	; 0x115
 800c676:	2102      	movs	r1, #2
 800c678:	b2d2      	uxtb	r2, r2
 800c67a:	4628      	mov	r0, r5
 800c67c:	f7fd fcae 	bl	8009fdc <sendNetworkStatus>
 800c680:	e06e      	b.n	800c760 <SPIInternalEvent+0x224>

            }
        }
      else
        {
          if (portData[ev.portNum].connState == DEV_UCONN)
 800c682:	2803      	cmp	r0, #3
 800c684:	d16c      	bne.n	800c760 <SPIInternalEvent+0x224>
            {
              portData[ev.portNum].prevConnState = portData[ev.portNum].connState;
 800c686:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
              portData[ev.portNum].connState = DEV_NCONN;
 800c68a:	2000      	movs	r0, #0
 800c68c:	f883 0020 	strb.w	r0, [r3, #32]
              connectionState(NET_NC);
 800c690:	f7fc fcd8 	bl	8009044 <connectionState>
              dprintf(LL_INFO, "Cable connection with peer (%08x:%08x:%08x) lost.\n",
 800c694:	4b34      	ldr	r3, [pc, #208]	; (800c768 <SPIInternalEvent+0x22c>)
 800c696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c698:	2b01      	cmp	r3, #1
 800c69a:	dd61      	ble.n	800c760 <SPIInternalEvent+0x224>
 800c69c:	f8d4 311d 	ldr.w	r3, [r4, #285]	; 0x11d
 800c6a0:	f8d4 2119 	ldr.w	r2, [r4, #281]	; 0x119
 800c6a4:	f8d4 1115 	ldr.w	r1, [r4, #277]	; 0x115
 800c6a8:	4833      	ldr	r0, [pc, #204]	; (800c778 <SPIInternalEvent+0x23c>)
#endif
        }
    }
    break;
    }
}
 800c6aa:	b005      	add	sp, #20
 800c6ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          if (portData[ev.portNum].connState == DEV_UCONN)
            {
              portData[ev.portNum].prevConnState = portData[ev.portNum].connState;
              portData[ev.portNum].connState = DEV_NCONN;
              connectionState(NET_NC);
              dprintf(LL_INFO, "Cable connection with peer (%08x:%08x:%08x) lost.\n",
 800c6b0:	f7fc baba 	b.w	8008c28 <xprintf>
        }
    }
    break;
    case SPI_EV_TYPE_LINK_ESTABLISHED:
    {
      spiHelper_t *helper = (spiHelper_t *)portData[ev.portNum].SPIhelper;
 800c6b4:	4c2b      	ldr	r4, [pc, #172]	; (800c764 <SPIInternalEvent+0x228>)
 800c6b6:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800c6ba:	2350      	movs	r3, #80	; 0x50
 800c6bc:	fb03 4305 	mla	r3, r3, r5, r4
 800c6c0:	4627      	mov	r7, r4
 800c6c2:	691e      	ldr	r6, [r3, #16]

      int changedState = DEV_NCONN;
      if(helper && portData[ev.portNum].portType == PORT_TYPE_SPI && portData[ev.portNum].connState == DEV_PCONN)
 800c6c4:	b13e      	cbz	r6, 800c6d6 <SPIInternalEvent+0x19a>
 800c6c6:	7e1c      	ldrb	r4, [r3, #24]
 800c6c8:	2c01      	cmp	r4, #1
 800c6ca:	d104      	bne.n	800c6d6 <SPIInternalEvent+0x19a>
 800c6cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d145      	bne.n	800c760 <SPIInternalEvent+0x224>
 800c6d4:	e006      	b.n	800c6e4 <SPIInternalEvent+0x1a8>
        changedState = DEV_CONN;//Radio full connection established
      else if ((!helper || portData[ev.portNum].portType != PORT_TYPE_SPI) && portData[ev.portNum].connState == DEV_NCONN)
 800c6d6:	2350      	movs	r3, #80	; 0x50
 800c6d8:	fb03 7305 	mla	r3, r3, r5, r7
 800c6dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6e0:	b393      	cbz	r3, 800c748 <SPIInternalEvent+0x20c>
 800c6e2:	e03d      	b.n	800c760 <SPIInternalEvent+0x224>

      if(changedState != DEV_NCONN)
        {
          if(changedState == DEV_CONN)
            {
              dprintf(LL_INFO, "%s: Datagram connection with peer (%08x:%08x:%08x) established.\n", portStr[ev.portNum],
 800c6e4:	4b20      	ldr	r3, [pc, #128]	; (800c768 <SPIInternalEvent+0x22c>)
 800c6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	dd0c      	ble.n	800c706 <SPIInternalEvent+0x1ca>
 800c6ec:	f8d6 111d 	ldr.w	r1, [r6, #285]	; 0x11d
 800c6f0:	f8d6 3119 	ldr.w	r3, [r6, #281]	; 0x119
 800c6f4:	f8d6 2115 	ldr.w	r2, [r6, #277]	; 0x115
 800c6f8:	9100      	str	r1, [sp, #0]
 800c6fa:	4920      	ldr	r1, [pc, #128]	; (800c77c <SPIInternalEvent+0x240>)
 800c6fc:	4820      	ldr	r0, [pc, #128]	; (800c780 <SPIInternalEvent+0x244>)
 800c6fe:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 800c702:	f7fc fa91 	bl	8008c28 <xprintf>
    {
      spiHelper_t *helper = (spiHelper_t *)portData[ev.portNum].SPIhelper;

      int changedState = DEV_NCONN;
      if(helper && portData[ev.portNum].portType == PORT_TYPE_SPI && portData[ev.portNum].connState == DEV_PCONN)
        changedState = DEV_CONN;//Radio full connection established
 800c706:	4623      	mov	r3, r4
          else
            {
              dprintf(LL_INFO, "%s: Cable connection with peer  established.\n", portStr[ev.portNum]);
            }

          portData[ev.portNum].prevConnState = portData[ev.portNum].connState;
 800c708:	2250      	movs	r2, #80	; 0x50
 800c70a:	fb02 7405 	mla	r4, r2, r5, r7
 800c70e:	f894 2020 	ldrb.w	r2, [r4, #32]
 800c712:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
          portData[ev.portNum].connState = changedState;;
 800c716:	f884 3020 	strb.w	r3, [r4, #32]
          portData[ev.portNum].tsConnectedDatagram = xTaskGetTickCount();
 800c71a:	f7fe f8ff 	bl	800a91c <xTaskGetTickCount>
 800c71e:	6320      	str	r0, [r4, #48]	; 0x30
          connectionState(NET_DATAGRAM);
 800c720:	2002      	movs	r0, #2
 800c722:	f7fc fc8f 	bl	8009044 <connectionState>
          sendNetworkStatus(ev.portNum, NET_DATAGRAM_CONNECTED, (uint8_t)helper->connDev.devID);
 800c726:	f8d6 2115 	ldr.w	r2, [r6, #277]	; 0x115
 800c72a:	2101      	movs	r1, #1
 800c72c:	b2d2      	uxtb	r2, r2
 800c72e:	4628      	mov	r0, r5
 800c730:	f7fd fc54 	bl	8009fdc <sendNetworkStatus>
#ifdef MADO
          int pipeNum = getPipeNum(portData[ev.portNum].kond_pom);
 800c734:	7e60      	ldrb	r0, [r4, #25]
 800c736:	f009 fb5b 	bl	8015df0 <getPipeNum>
          if(pipeNum >= 0)
 800c73a:	2800      	cmp	r0, #0
 800c73c:	db10      	blt.n	800c760 <SPIInternalEvent+0x224>
#endif
        }
    }
    break;
    }
}
 800c73e:	b005      	add	sp, #20
 800c740:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          sendNetworkStatus(ev.portNum, NET_DATAGRAM_CONNECTED, (uint8_t)helper->connDev.devID);
#ifdef MADO
          int pipeNum = getPipeNum(portData[ev.portNum].kond_pom);
          if(pipeNum >= 0)
            {
              pipeSync(pipeNum);
 800c744:	f009 bd22 	b.w	801618c <pipeSync>
                      helper->connDev.manID,
                      helper->connDev.prodID);
            }
          else
            {
              dprintf(LL_INFO, "%s: Cable connection with peer  established.\n", portStr[ev.portNum]);
 800c748:	4b07      	ldr	r3, [pc, #28]	; (800c768 <SPIInternalEvent+0x22c>)
 800c74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	dd05      	ble.n	800c75c <SPIInternalEvent+0x220>
 800c750:	4b0a      	ldr	r3, [pc, #40]	; (800c77c <SPIInternalEvent+0x240>)
 800c752:	480c      	ldr	r0, [pc, #48]	; (800c784 <SPIInternalEvent+0x248>)
 800c754:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 800c758:	f7fc fa66 	bl	8008c28 <xprintf>

      int changedState = DEV_NCONN;
      if(helper && portData[ev.portNum].portType == PORT_TYPE_SPI && portData[ev.portNum].connState == DEV_PCONN)
        changedState = DEV_CONN;//Radio full connection established
      else if ((!helper || portData[ev.portNum].portType != PORT_TYPE_SPI) && portData[ev.portNum].connState == DEV_NCONN)
        changedState = DEV_UCONN;//UART connection established
 800c75c:	2303      	movs	r3, #3
 800c75e:	e7d3      	b.n	800c708 <SPIInternalEvent+0x1cc>
#endif
        }
    }
    break;
    }
}
 800c760:	b005      	add	sp, #20
 800c762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c764:	10002038 	.word	0x10002038
 800c768:	10001000 	.word	0x10001000
 800c76c:	0803da70 	.word	0x0803da70
 800c770:	0803e430 	.word	0x0803e430
 800c774:	0803dad0 	.word	0x0803dad0
 800c778:	0803da9d 	.word	0x0803da9d
 800c77c:	10002348 	.word	0x10002348
 800c780:	0803db06 	.word	0x0803db06
 800c784:	0803db47 	.word	0x0803db47

0800c788 <masterCheckLink>:
        }
    }
  return PORT_INVALID;
}
static int masterCheckLink(radioModule_t *rm)
{
 800c788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78c:	b0a1      	sub	sp, #132	; 0x84
 800c78e:	4680      	mov	r8, r0
  /* if(!rm->nwkStateChange) */
  /*   return 0; */
  /* rm->nwkStateChange--; */

  ehifStart(&rm->spi);
 800c790:	f7ff fd96 	bl	800c2c0 <ehifStart>
  uint16_t status = ehifGetStatus();
 800c794:	f007 f803 	bl	801379e <ehifGetStatus>
  uint32_t connectedMask = 0;
  if (status &  BV_EHIF_STAT_CONNECTED )  //network connection
 800c798:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800c79c:	b285      	uxth	r5, r0
 800c79e:	2d00      	cmp	r5, #0
 800c7a0:	f000 80b9 	beq.w	800c916 <masterCheckLink+0x18e>
    {
      EHIF_CMD_NWM_GET_STATUS_MASTER_DATA_T status_m;
      WAIT_BUSY;
 800c7a4:	f006 fffb 	bl	801379e <ehifGetStatus>
 800c7a8:	0403      	lsls	r3, r0, #16
 800c7aa:	d403      	bmi.n	800c7b4 <masterCheckLink+0x2c>
 800c7ac:	2001      	movs	r0, #1
 800c7ae:	f7fe f9ab 	bl	800ab08 <vTaskDelay>
 800c7b2:	e7f7      	b.n	800c7a4 <masterCheckLink+0x1c>
      status_m = getStatus();
 800c7b4:	a806      	add	r0, sp, #24
 800c7b6:	f006 fdcb 	bl	8013350 <getStatus>
      rm->smplRate = 25*status_m.smplRate;
 800c7ba:	9b06      	ldr	r3, [sp, #24]
 800c7bc:	f3c3 230b 	ubfx	r3, r3, #8, #12
 800c7c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c7c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c7c8:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      rm->tsPeriod = 2000+status_m.tsPeriod*250;
 800c7cc:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800c7d0:	22fa      	movs	r2, #250	; 0xfa
 800c7d2:	091b      	lsrs	r3, r3, #4
 800c7d4:	4353      	muls	r3, r2
 800c7d6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0

      //Slave connected to master Status section:
      int idx;
      for (idx = 0; idx < status_m.wpsCount; idx++)
 800c7da:	2700      	movs	r7, #0
    {
      EHIF_CMD_NWM_GET_STATUS_MASTER_DATA_T status_m;
      WAIT_BUSY;
      status_m = getStatus();
      rm->smplRate = 25*status_m.smplRate;
      rm->tsPeriod = 2000+status_m.tsPeriod*250;
 800c7dc:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  /*   return 0; */
  /* rm->nwkStateChange--; */

  ehifStart(&rm->spi);
  uint16_t status = ehifGetStatus();
  uint32_t connectedMask = 0;
 800c7e0:	463d      	mov	r5, r7
      rm->smplRate = 25*status_m.smplRate;
      rm->tsPeriod = 2000+status_m.tsPeriod*250;

      //Slave connected to master Status section:
      int idx;
      for (idx = 0; idx < status_m.wpsCount; idx++)
 800c7e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800c7e6:	ebb7 1f13 	cmp.w	r7, r3, lsr #4
 800c7ea:	f280 8094 	bge.w	800c916 <masterCheckLink+0x18e>
        {
          uint8_t kondPom = (status_m.pWpsInfo[idx].prodId& PROD_ID_KONDPOM_MASK) >> PROD_ID_KONDPOM_BIT ;
 800c7ee:	013b      	lsls	r3, r7, #4
 800c7f0:	9304      	str	r3, [sp, #16]
 800c7f2:	013a      	lsls	r2, r7, #4
 800c7f4:	ab20      	add	r3, sp, #128	; 0x80
 800c7f6:	4413      	add	r3, r2
 800c7f8:	f853 ac5b 	ldr.w	sl, [r3, #-91]
 800c7fc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 800c800:	9304      	str	r3, [sp, #16]
          uint8_t device =  (status_m.pWpsInfo[idx].prodId & PROD_ID_LR_MASK)>>PROD_ID_LR_BIT;
          portNum_t p = getPortNum(kondPom, device);
 800c802:	f89d b010 	ldrb.w	fp, [sp, #16]
      //Slave connected to master Status section:
      int idx;
      for (idx = 0; idx < status_m.wpsCount; idx++)
        {
          uint8_t kondPom = (status_m.pWpsInfo[idx].prodId& PROD_ID_KONDPOM_MASK) >> PROD_ID_KONDPOM_BIT ;
          uint8_t device =  (status_m.pWpsInfo[idx].prodId & PROD_ID_LR_MASK)>>PROD_ID_LR_BIT;
 800c806:	fa5f f48a 	uxtb.w	r4, sl
          portNum_t p = getPortNum(kondPom, device);
 800c80a:	4621      	mov	r1, r4
 800c80c:	4658      	mov	r0, fp
 800c80e:	f7ff fe7d 	bl	800c50c <getPortNum>
            {
              //First time connection. Assign a stream. First if no UART connection detected. Second for UART detect??
              //For now streams are assigned
              p = PER1_PORT + device-1;
            }
          int pipeNum = portData[p].reqPipe;
 800c812:	4a5d      	ldr	r2, [pc, #372]	; (800c988 <masterCheckLink+0x200>)
          portNum_t p = getPortNum(kondPom, device);
          if(p == PORT_INVALID)
            {
              //First time connection. Assign a stream. First if no UART connection detected. Second for UART detect??
              //For now streams are assigned
              p = PER1_PORT + device-1;
 800c814:	280a      	cmp	r0, #10
 800c816:	bf14      	ite	ne
 800c818:	4606      	movne	r6, r0
 800c81a:	4626      	moveq	r6, r4
            }
          int pipeNum = portData[p].reqPipe;
 800c81c:	2350      	movs	r3, #80	; 0x50
 800c81e:	fb03 2306 	mla	r3, r3, r6, r2
 800c822:	f8d3 901c 	ldr.w	r9, [r3, #28]
          if(pipeNum < 0)
 800c826:	f1b9 0f00 	cmp.w	r9, #0
 800c82a:	da07      	bge.n	800c83c <masterCheckLink+0xb4>
            pipeNum = getPipeNum(kondPom);
 800c82c:	4658      	mov	r0, fp
 800c82e:	f009 fadf 	bl	8015df0 <getPipeNum>
          if(pipeNum < 0)
 800c832:	f1b0 0900 	subs.w	r9, r0, #0
            pipeNum = (status_m.pWpsInfo[idx].prodId & PROD_ID_PRIMARY_STREAM_MASK) >> PROD_ID_PRIMARY_STREAM_BIT;
 800c836:	bfb8      	it	lt
 800c838:	f3ca 4900 	ubfxlt	r9, sl, #16, #1
          if(device < 1 || device > 8) continue;
 800c83c:	3c01      	subs	r4, #1
 800c83e:	2c07      	cmp	r4, #7
 800c840:	d867      	bhi.n	800c912 <masterCheckLink+0x18a>
          connectedMask |= (1<<p);
 800c842:	2301      	movs	r3, #1
 800c844:	40b3      	lsls	r3, r6
          {
            spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
 800c846:	4a50      	ldr	r2, [pc, #320]	; (800c988 <masterCheckLink+0x200>)
          if(pipeNum < 0)
            pipeNum = getPipeNum(kondPom);
          if(pipeNum < 0)
            pipeNum = (status_m.pWpsInfo[idx].prodId & PROD_ID_PRIMARY_STREAM_MASK) >> PROD_ID_PRIMARY_STREAM_BIT;
          if(device < 1 || device > 8) continue;
          connectedMask |= (1<<p);
 800c848:	431d      	orrs	r5, r3
          {
            spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
 800c84a:	2350      	movs	r3, #80	; 0x50
 800c84c:	fb03 2306 	mla	r3, r3, r6, r2
 800c850:	691c      	ldr	r4, [r3, #16]
            //Check if a new connection is established
            if (portData[p].connState == DEV_NCONN || portData[p].connState == DEV_UCONN)
 800c852:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c856:	b10b      	cbz	r3, 800c85c <masterCheckLink+0xd4>
 800c858:	2b03      	cmp	r3, #3
 800c85a:	d153      	bne.n	800c904 <masterCheckLink+0x17c>
              {
                helper->radioModule = rm;
                portData[p].prevConnState = portData[p].connState;
 800c85c:	4a4a      	ldr	r2, [pc, #296]	; (800c988 <masterCheckLink+0x200>)
          {
            spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
            //Check if a new connection is established
            if (portData[p].connState == DEV_NCONN || portData[p].connState == DEV_UCONN)
              {
                helper->radioModule = rm;
 800c85e:	f8c4 810c 	str.w	r8, [r4, #268]	; 0x10c
                portData[p].prevConnState = portData[p].connState;
 800c862:	2350      	movs	r3, #80	; 0x50
 800c864:	fb03 2306 	mla	r3, r3, r6, r2
                portData[p].connState = DEV_PCONN;
 800c868:	9305      	str	r3, [sp, #20]
            spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
            //Check if a new connection is established
            if (portData[p].connState == DEV_NCONN || portData[p].connState == DEV_UCONN)
              {
                helper->radioModule = rm;
                portData[p].prevConnState = portData[p].connState;
 800c86a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c86e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                portData[p].connState = DEV_PCONN;
 800c872:	2202      	movs	r2, #2
 800c874:	f883 2020 	strb.w	r2, [r3, #32]
                portData[p].tsConnected = xTaskGetTickCount();
 800c878:	f7fe f850 	bl	800a91c <xTaskGetTickCount>
 800c87c:	9b05      	ldr	r3, [sp, #20]
 800c87e:	62d8      	str	r0, [r3, #44]	; 0x2c
                connectionState(NET_PARTIAL);
 800c880:	2001      	movs	r0, #1
 800c882:	f7fc fbdf 	bl	8009044 <connectionState>
                helper->connDev.devID = status_m.pWpsInfo[idx].devId;
 800c886:	ab20      	add	r3, sp, #128	; 0x80
 800c888:	013a      	lsls	r2, r7, #4
 800c88a:	189a      	adds	r2, r3, r2
 800c88c:	3a68      	subs	r2, #104	; 0x68
 800c88e:	f8d2 1005 	ldr.w	r1, [r2, #5]
 800c892:	f8c4 1115 	str.w	r1, [r4, #277]	; 0x115
                helper->connDev.manID = status_m.pWpsInfo[idx].mfctId;
 800c896:	f8d2 2009 	ldr.w	r2, [r2, #9]
                helper->connDev.prodID = status_m.pWpsInfo[idx].prodId;
                portData[p].kond_pom   = kondPom;
 800c89a:	9b05      	ldr	r3, [sp, #20]
                portData[p].prevConnState = portData[p].connState;
                portData[p].connState = DEV_PCONN;
                portData[p].tsConnected = xTaskGetTickCount();
                connectionState(NET_PARTIAL);
                helper->connDev.devID = status_m.pWpsInfo[idx].devId;
                helper->connDev.manID = status_m.pWpsInfo[idx].mfctId;
 800c89c:	f8c4 2119 	str.w	r2, [r4, #281]	; 0x119
                helper->connDev.prodID = status_m.pWpsInfo[idx].prodId;
                portData[p].kond_pom   = kondPom;
 800c8a0:	f89d 2010 	ldrb.w	r2, [sp, #16]
                portData[p].connState = DEV_PCONN;
                portData[p].tsConnected = xTaskGetTickCount();
                connectionState(NET_PARTIAL);
                helper->connDev.devID = status_m.pWpsInfo[idx].devId;
                helper->connDev.manID = status_m.pWpsInfo[idx].mfctId;
                helper->connDev.prodID = status_m.pWpsInfo[idx].prodId;
 800c8a4:	f8c4 a11d 	str.w	sl, [r4, #285]	; 0x11d
                portData[p].kond_pom   = kondPom;
 800c8a8:	765a      	strb	r2, [r3, #25]
                dprintf(LL_INFO, "%s: Connection with slave (%08x:%08x:%08x)->(%08x:%08x:%08x) established.\n", portStr[p],
 800c8aa:	4b38      	ldr	r3, [pc, #224]	; (800c98c <masterCheckLink+0x204>)
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	dd14      	ble.n	800c8dc <masterCheckLink+0x154>
 800c8b2:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 800c8b6:	f8d4 011d 	ldr.w	r0, [r4, #285]	; 0x11d
 800c8ba:	6a0b      	ldr	r3, [r1, #32]
 800c8bc:	69ca      	ldr	r2, [r1, #28]
 800c8be:	9003      	str	r0, [sp, #12]
 800c8c0:	f8d4 0119 	ldr.w	r0, [r4, #281]	; 0x119
 800c8c4:	9002      	str	r0, [sp, #8]
 800c8c6:	f8d4 0115 	ldr.w	r0, [r4, #277]	; 0x115
 800c8ca:	9001      	str	r0, [sp, #4]
 800c8cc:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800c8ce:	9100      	str	r1, [sp, #0]
 800c8d0:	492f      	ldr	r1, [pc, #188]	; (800c990 <masterCheckLink+0x208>)
 800c8d2:	4830      	ldr	r0, [pc, #192]	; (800c994 <masterCheckLink+0x20c>)
 800c8d4:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800c8d8:	f7fc f9a6 	bl	8008c28 <xprintf>
                        helper->radioModule->device.prodID,
                        helper->connDev.devID,
                        helper->connDev.manID,
                        helper->connDev.prodID);

                sendNetworkStatus(p, NET_JOINED, (uint8_t)helper->connDev.devID);
 800c8dc:	f8d4 2115 	ldr.w	r2, [r4, #277]	; 0x115
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	b2d2      	uxtb	r2, r2
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f7fd fb79 	bl	8009fdc <sendNetworkStatus>
                switchPortHelper(p, PORT_TYPE_SPI);
 800c8ea:	2101      	movs	r1, #1
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f7ff fb01 	bl	800bef4 <switchPortHelper>
                pipeSetSpkSet(pipeNum, kondPom, (p-PER1_PORT)>>1);
 800c8f2:	1e72      	subs	r2, r6, #1
 800c8f4:	4648      	mov	r0, r9
 800c8f6:	1052      	asrs	r2, r2, #1
 800c8f8:	4659      	mov	r1, fp
 800c8fa:	f009 fa53 	bl	8015da4 <pipeSetSpkSet>
                sendKANow(p);
 800c8fe:	4630      	mov	r0, r6
 800c900:	f7fd f968 	bl	8009bd4 <sendKANow>
              }
            helper->connDev.audioConnState = status_m.pWpsInfo[idx].bvAchUsedByWps;
 800c904:	013b      	lsls	r3, r7, #4
 800c906:	aa20      	add	r2, sp, #128	; 0x80
 800c908:	4413      	add	r3, r2
 800c90a:	f833 3c57 	ldrh.w	r3, [r3, #-87]
 800c90e:	f8a4 3121 	strh.w	r3, [r4, #289]	; 0x121
      rm->smplRate = 25*status_m.smplRate;
      rm->tsPeriod = 2000+status_m.tsPeriod*250;

      //Slave connected to master Status section:
      int idx;
      for (idx = 0; idx < status_m.wpsCount; idx++)
 800c912:	3701      	adds	r7, #1
 800c914:	e765      	b.n	800c7e2 <masterCheckLink+0x5a>
 800c916:	4e1c      	ldr	r6, [pc, #112]	; (800c988 <masterCheckLink+0x200>)
          spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
          if(!(connectedMask & (1<<p)) && helper->radioModule == rm)
            {
              if (portData[p].connState != DEV_NCONN)
                {
                  dprintf(LL_INFO, "%s: Lost connection with slave (%08x:%08x:%08x).\n", portStr[p],
 800c918:	4f1c      	ldr	r7, [pc, #112]	; (800c98c <masterCheckLink+0x204>)
 800c91a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800c990 <masterCheckLink+0x208>
  /*   return 0; */
  /* rm->nwkStateChange--; */

  ehifStart(&rm->spi);
  uint16_t status = ehifGetStatus();
  uint32_t connectedMask = 0;
 800c91e:	2400      	movs	r4, #0

  //Check for dropped connections
  portNum_t p;
  for (p = 0; p < PORTS_NUM; p++)
    {
      if(portData[p].portType == PORT_TYPE_SPI)
 800c920:	7e33      	ldrb	r3, [r6, #24]
 800c922:	2b01      	cmp	r3, #1
 800c924:	fa5f fa84 	uxtb.w	sl, r4
 800c928:	d123      	bne.n	800c972 <masterCheckLink+0x1ea>
        {
          spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
          if(!(connectedMask & (1<<p)) && helper->radioModule == rm)
 800c92a:	40a3      	lsls	r3, r4
 800c92c:	422b      	tst	r3, r5
 800c92e:	d120      	bne.n	800c972 <masterCheckLink+0x1ea>
  portNum_t p;
  for (p = 0; p < PORTS_NUM; p++)
    {
      if(portData[p].portType == PORT_TYPE_SPI)
        {
          spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
 800c930:	6931      	ldr	r1, [r6, #16]
          if(!(connectedMask & (1<<p)) && helper->radioModule == rm)
 800c932:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 800c936:	4598      	cmp	r8, r3
 800c938:	d11b      	bne.n	800c972 <masterCheckLink+0x1ea>
            {
              if (portData[p].connState != DEV_NCONN)
 800c93a:	f896 3020 	ldrb.w	r3, [r6, #32]
 800c93e:	b1c3      	cbz	r3, 800c972 <masterCheckLink+0x1ea>
                {
                  dprintf(LL_INFO, "%s: Lost connection with slave (%08x:%08x:%08x).\n", portStr[p],
 800c940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c942:	2b01      	cmp	r3, #1
 800c944:	dd0b      	ble.n	800c95e <masterCheckLink+0x1d6>
 800c946:	f8d1 3119 	ldr.w	r3, [r1, #281]	; 0x119
 800c94a:	f8d1 2115 	ldr.w	r2, [r1, #277]	; 0x115
 800c94e:	f8d1 111d 	ldr.w	r1, [r1, #285]	; 0x11d
 800c952:	9100      	str	r1, [sp, #0]
 800c954:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
 800c958:	480f      	ldr	r0, [pc, #60]	; (800c998 <masterCheckLink+0x210>)
 800c95a:	f7fc f965 	bl	8008c28 <xprintf>
  return 0;
}

static int SPIeventNOW(portNum_t portNum, uint8_t evType)
{
  ev_t ev = {.portNum = portNum, .evType = evType};
 800c95e:	2300      	movs	r3, #0
 800c960:	9306      	str	r3, [sp, #24]
 800c962:	2301      	movs	r3, #1
 800c964:	f88d a018 	strb.w	sl, [sp, #24]
 800c968:	f88d 3019 	strb.w	r3, [sp, #25]
  SPIInternalEvent((void *)ev.raw);
 800c96c:	9806      	ldr	r0, [sp, #24]
 800c96e:	f7ff fde5 	bl	800c53c <SPIInternalEvent>
 800c972:	3401      	adds	r4, #1
        }
    }

  //Check for dropped connections
  portNum_t p;
  for (p = 0; p < PORTS_NUM; p++)
 800c974:	2c09      	cmp	r4, #9
 800c976:	f106 0650 	add.w	r6, r6, #80	; 0x50
 800c97a:	d1d1      	bne.n	800c920 <masterCheckLink+0x198>
                  SPIeventNOW(p, SPI_EV_TYPE_LINK_ERROR);
                }
            }
        }
    }
  ehifStop();
 800c97c:	f7ff fcca 	bl	800c314 <ehifStop>
  return 0;
}
 800c980:	2000      	movs	r0, #0
 800c982:	b021      	add	sp, #132	; 0x84
 800c984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c988:	10002038 	.word	0x10002038
 800c98c:	10001000 	.word	0x10001000
 800c990:	10002348 	.word	0x10002348
 800c994:	0803db75 	.word	0x0803db75
 800c998:	0803dbc0 	.word	0x0803dbc0

0800c99c <doAlways>:
        }
    }
}

static void doAlways(void *data)
{
 800c99c:	b510      	push	{r4, lr}
#endif
  int radioNum;
  for (radioNum = 0 ; radioNum < RADIO_MODULES; radioNum++)
    {
      radioModule_t *rm = &(radioModule[radioNum]);
      if(rm->spi.spi)
 800c99e:	4c09      	ldr	r4, [pc, #36]	; (800c9c4 <doAlways+0x28>)
}

static void doAlways(void *data)
{
#ifdef WATCHDOG_HWCOMMSPI
  wdogFeed(WATCHDOG_HWCOMMSPI(moduleNum));
 800c9a0:	2002      	movs	r0, #2
 800c9a2:	f001 fb4f 	bl	800e044 <wdogFeed>
#endif
  int radioNum;
  for (radioNum = 0 ; radioNum < RADIO_MODULES; radioNum++)
    {
      radioModule_t *rm = &(radioModule[radioNum]);
      if(rm->spi.spi)
 800c9a6:	6823      	ldr	r3, [r4, #0]
 800c9a8:	b113      	cbz	r3, 800c9b0 <doAlways+0x14>

static void checkConnection(radioModule_t *rm)
{
  //Check network status and reconnect if necessary
#ifdef MADO
  masterCheckLink(rm);
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	f7ff feec 	bl	800c788 <masterCheckLink>
#endif
  int radioNum;
  for (radioNum = 0 ; radioNum < RADIO_MODULES; radioNum++)
    {
      radioModule_t *rm = &(radioModule[radioNum]);
      if(rm->spi.spi)
 800c9b0:	f8d4 303b 	ldr.w	r3, [r4, #59]	; 0x3b
 800c9b4:	b113      	cbz	r3, 800c9bc <doAlways+0x20>

static void checkConnection(radioModule_t *rm)
{
  //Check network status and reconnect if necessary
#ifdef MADO
  masterCheckLink(rm);
 800c9b6:	4804      	ldr	r0, [pc, #16]	; (800c9c8 <doAlways+0x2c>)
 800c9b8:	f7ff fee6 	bl	800c788 <masterCheckLink>
    }

  checkDataReady();

  eventType = 1;//Timeout by default
}
 800c9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          //Check connection
          checkConnection(rm);
        }
    }

  checkDataReady();
 800c9c0:	f7ff bcb6 	b.w	800c330 <checkDataReady>
 800c9c4:	100032b8 	.word	0x100032b8
 800c9c8:	100032f3 	.word	0x100032f3

0800c9cc <sendBuffer>:
  return 0;
}

static int resetRadio(void);
static void sendBuffer(void *data)
{
 800c9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  messageSendBuffer_t *message = data;
  spiHelper_t *helper = (spiHelper_t *)portData[message->portNum].SPIhelper;
 800c9d0:	4d51      	ldr	r5, [pc, #324]	; (800cb18 <sendBuffer+0x14c>)
 800c9d2:	7a03      	ldrb	r3, [r0, #8]
 800c9d4:	2250      	movs	r2, #80	; 0x50
 800c9d6:	fb02 5303 	mla	r3, r2, r3, r5
  return 0;
}

static int resetRadio(void);
static void sendBuffer(void *data)
{
 800c9da:	b087      	sub	sp, #28
  messageSendBuffer_t *message = data;
  spiHelper_t *helper = (spiHelper_t *)portData[message->portNum].SPIhelper;
 800c9dc:	f8d3 a010 	ldr.w	sl, [r3, #16]
  return 0;
}

static int resetRadio(void);
static void sendBuffer(void *data)
{
 800c9e0:	4604      	mov	r4, r0
  messageSendBuffer_t *message = data;
  spiHelper_t *helper = (spiHelper_t *)portData[message->portNum].SPIhelper;
  int status = 0;
  int retry = 100;
 800c9e2:	f04f 0864 	mov.w	r8, #100	; 0x64
static int resetRadio(void);
static void sendBuffer(void *data)
{
  messageSendBuffer_t *message = data;
  spiHelper_t *helper = (spiHelper_t *)portData[message->portNum].SPIhelper;
  int status = 0;
 800c9e6:	2600      	movs	r6, #0
  int retry = 100;
  do
    {
      if(helper->radioModule && helper->radioModule->spi.spi)
 800c9e8:	f8da 310c 	ldr.w	r3, [sl, #268]	; 0x10c
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d073      	beq.n	800cad8 <sendBuffer+0x10c>
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d070      	beq.n	800cad8 <sendBuffer+0x10c>
        if((status = radioSend(message->portNum, message->buffer, message->bufLen)) == 1)
 800c9f6:	6863      	ldr	r3, [r4, #4]
  return size;
}

static int radioSend(portNum_t portNum, char *txBuffer, int transferSize)
{
  spiHelper_t *helper = (spiHelper_t *)portData[portNum].SPIhelper;
 800c9f8:	7a27      	ldrb	r7, [r4, #8]
  int status = 0;
  int retry = 100;
  do
    {
      if(helper->radioModule && helper->radioModule->spi.spi)
        if((status = radioSend(message->portNum, message->buffer, message->bufLen)) == 1)
 800c9fa:	9301      	str	r3, [sp, #4]
  return size;
}

static int radioSend(portNum_t portNum, char *txBuffer, int transferSize)
{
  spiHelper_t *helper = (spiHelper_t *)portData[portNum].SPIhelper;
 800c9fc:	2350      	movs	r3, #80	; 0x50
 800c9fe:	fb03 5307 	mla	r3, r3, r7, r5
  int status = 0;
  int retry = 100;
  do
    {
      if(helper->radioModule && helper->radioModule->spi.spi)
        if((status = radioSend(message->portNum, message->buffer, message->bufLen)) == 1)
 800ca02:	f8d4 b000 	ldr.w	fp, [r4]

static int radioSend(portNum_t portNum, char *txBuffer, int transferSize)
{
  spiHelper_t *helper = (spiHelper_t *)portData[portNum].SPIhelper;
  remoteDev_t *dev = &(helper->connDev);
  int sendReset = (portData[portNum].connState != DEV_CONN);
 800ca06:	f893 9020 	ldrb.w	r9, [r3, #32]
  return size;
}

static int radioSend(portNum_t portNum, char *txBuffer, int transferSize)
{
  spiHelper_t *helper = (spiHelper_t *)portData[portNum].SPIhelper;
 800ca0a:	691e      	ldr	r6, [r3, #16]
  remoteDev_t *dev = &(helper->connDev);
  int sendReset = (portData[portNum].connState != DEV_CONN);
 800ca0c:	f119 33ff 	adds.w	r3, r9, #4294967295
 800ca10:	bf18      	it	ne
 800ca12:	2301      	movne	r3, #1
 800ca14:	9303      	str	r3, [sp, #12]
  if(txBuffer[0] == 0x55 && portData[portNum].connState == DEV_PCONN)
 800ca16:	f89b 3000 	ldrb.w	r3, [fp]
}

static int radioSend(portNum_t portNum, char *txBuffer, int transferSize)
{
  spiHelper_t *helper = (spiHelper_t *)portData[portNum].SPIhelper;
  remoteDev_t *dev = &(helper->connDev);
 800ca1a:	f206 1215 	addw	r2, r6, #277	; 0x115
  int sendReset = (portData[portNum].connState != DEV_CONN);
  if(txBuffer[0] == 0x55 && portData[portNum].connState == DEV_PCONN)
 800ca1e:	2b55      	cmp	r3, #85	; 0x55
}

static int radioSend(portNum_t portNum, char *txBuffer, int transferSize)
{
  spiHelper_t *helper = (spiHelper_t *)portData[portNum].SPIhelper;
  remoteDev_t *dev = &(helper->connDev);
 800ca20:	9202      	str	r2, [sp, #8]
  int sendReset = (portData[portNum].connState != DEV_CONN);
  if(txBuffer[0] == 0x55 && portData[portNum].connState == DEV_PCONN)
 800ca22:	d011      	beq.n	800ca48 <sendBuffer+0x7c>
    massert(helper && helper->radioModule);
  ehifStart(&(helper->radioModule->spi));
 800ca24:	f8d6 010c 	ldr.w	r0, [r6, #268]	; 0x10c
 800ca28:	f7ff fc4a 	bl	800c2c0 <ehifStart>
  int stat = queueTX(dev, transferSize, (uint8_t *)txBuffer, sendReset);
 800ca2c:	465a      	mov	r2, fp
 800ca2e:	9b03      	ldr	r3, [sp, #12]
 800ca30:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800ca34:	9802      	ldr	r0, [sp, #8]
 800ca36:	f006 fc11 	bl	801325c <queueTX>
 800ca3a:	4683      	mov	fp, r0
  ehifStop();
 800ca3c:	f7ff fc6a 	bl	800c314 <ehifStop>
  if(sendReset)
 800ca40:	f1b9 0f01 	cmp.w	r9, #1
 800ca44:	d115      	bne.n	800ca72 <sendBuffer+0xa6>
 800ca46:	e01e      	b.n	800ca86 <sendBuffer+0xba>
static int radioSend(portNum_t portNum, char *txBuffer, int transferSize)
{
  spiHelper_t *helper = (spiHelper_t *)portData[portNum].SPIhelper;
  remoteDev_t *dev = &(helper->connDev);
  int sendReset = (portData[portNum].connState != DEV_CONN);
  if(txBuffer[0] == 0x55 && portData[portNum].connState == DEV_PCONN)
 800ca48:	f1b9 0f02 	cmp.w	r9, #2
 800ca4c:	d1ea      	bne.n	800ca24 <sendBuffer+0x58>
    massert(helper && helper->radioModule);
 800ca4e:	b11e      	cbz	r6, 800ca58 <sendBuffer+0x8c>
 800ca50:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1e5      	bne.n	800ca24 <sendBuffer+0x58>
 800ca58:	4b30      	ldr	r3, [pc, #192]	; (800cb1c <sendBuffer+0x150>)
 800ca5a:	4931      	ldr	r1, [pc, #196]	; (800cb20 <sendBuffer+0x154>)
 800ca5c:	4831      	ldr	r0, [pc, #196]	; (800cb24 <sendBuffer+0x158>)
 800ca5e:	f240 325d 	movw	r2, #861	; 0x35d
 800ca62:	f7fc f8e1 	bl	8008c28 <xprintf>
 800ca66:	2301      	movs	r3, #1
 800ca68:	9305      	str	r3, [sp, #20]
 800ca6a:	9b05      	ldr	r3, [sp, #20]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1fc      	bne.n	800ca6a <sendBuffer+0x9e>
 800ca70:	e7d8      	b.n	800ca24 <sendBuffer+0x58>
  ehifStart(&(helper->radioModule->spi));
  int stat = queueTX(dev, transferSize, (uint8_t *)txBuffer, sendReset);
  ehifStop();
  if(sendReset)
    {
      if(stat >= 0)
 800ca72:	f1bb 0f00 	cmp.w	fp, #0
 800ca76:	db06      	blt.n	800ca86 <sendBuffer+0xba>
        portData[portNum].dscResetTx++;
 800ca78:	2350      	movs	r3, #80	; 0x50
 800ca7a:	fb03 5507 	mla	r5, r3, r7, r5
 800ca7e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ca80:	3301      	adds	r3, #1
 800ca82:	64eb      	str	r3, [r5, #76]	; 0x4c
 800ca84:	e02c      	b.n	800cae0 <sendBuffer+0x114>
    }

  if(stat == -1)
 800ca86:	f1bb 3fff 	cmp.w	fp, #4294967295
 800ca8a:	d105      	bne.n	800ca98 <sendBuffer+0xcc>
    helper->radioModule->txFull++;
 800ca8c:	f8d6 210c 	ldr.w	r2, [r6, #268]	; 0x10c
 800ca90:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800ca92:	3301      	adds	r3, #1
 800ca94:	6293      	str	r3, [r2, #40]	; 0x28
 800ca96:	e007      	b.n	800caa8 <sendBuffer+0xdc>
  if(stat == -2)
 800ca98:	f11b 0f02 	cmn.w	fp, #2
 800ca9c:	d104      	bne.n	800caa8 <sendBuffer+0xdc>
    helper->radioModule->txNoConn++;
 800ca9e:	f8d6 210c 	ldr.w	r2, [r6, #268]	; 0x10c
 800caa2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800caa4:	3301      	adds	r3, #1
 800caa6:	62d3      	str	r3, [r2, #44]	; 0x2c
  int status = 0;
  int retry = 100;
  do
    {
      if(helper->radioModule && helper->radioModule->spi.spi)
        if((status = radioSend(message->portNum, message->buffer, message->bufLen)) == 1)
 800caa8:	f1bb 0f00 	cmp.w	fp, #0
  if(stat == -1)
    helper->radioModule->txFull++;
  if(stat == -2)
    helper->radioModule->txNoConn++;

  return (stat >= 0)?0:1;
 800caac:	ea4f 76db 	mov.w	r6, fp, lsr #31
  int status = 0;
  int retry = 100;
  do
    {
      if(helper->radioModule && helper->radioModule->spi.spi)
        if((status = radioSend(message->portNum, message->buffer, message->bufLen)) == 1)
 800cab0:	da12      	bge.n	800cad8 <sendBuffer+0x10c>
          {
            retry--;
            if(retry == 0)
 800cab2:	f1b8 0801 	subs.w	r8, r8, #1
 800cab6:	d10a      	bne.n	800cace <sendBuffer+0x102>

static void checkConnection(radioModule_t *rm)
{
  //Check network status and reconnect if necessary
#ifdef MADO
  masterCheckLink(rm);
 800cab8:	f8da 010c 	ldr.w	r0, [sl, #268]	; 0x10c
 800cabc:	f7ff fe64 	bl	800c788 <masterCheckLink>
              {
                //ehifStart(&(helper->radioModule->spi));
                //		resetRadio();
                //ehifStop();
                checkConnection(helper->radioModule);
                portData[message->portNum].txFullDrop++;
 800cac0:	7a23      	ldrb	r3, [r4, #8]
 800cac2:	2250      	movs	r2, #80	; 0x50
 800cac4:	fb02 5303 	mla	r3, r2, r3, r5
 800cac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caca:	3201      	adds	r2, #1
 800cacc:	645a      	str	r2, [r3, #68]	; 0x44
              }
            checkDataReady();
 800cace:	f7ff fc2f 	bl	800c330 <checkDataReady>
            mdelay(1);
 800cad2:	2001      	movs	r0, #1
 800cad4:	f7fe f818 	bl	800ab08 <vTaskDelay>
          }
    }
  while(status == 1 && retry != 0);
 800cad8:	b116      	cbz	r6, 800cae0 <sendBuffer+0x114>
 800cada:	f1b8 0f00 	cmp.w	r8, #0
 800cade:	d183      	bne.n	800c9e8 <sendBuffer+0x1c>

  //Send is comlete or failed.

  massert(portDataTxRxComplete(message->portNum, PORT_TYPE_SPI, RXTX_COMPLETE_TX) >= 0);
 800cae0:	2201      	movs	r2, #1
 800cae2:	4611      	mov	r1, r2
 800cae4:	7a20      	ldrb	r0, [r4, #8]
 800cae6:	f7ff f9cb 	bl	800be80 <portDataTxRxComplete>
 800caea:	2800      	cmp	r0, #0
 800caec:	db06      	blt.n	800cafc <sendBuffer+0x130>
  dFree(message);
 800caee:	f1a4 0014 	sub.w	r0, r4, #20
 800caf2:	f008 fc9d 	bl	8015430 <bFree>
}
 800caf6:	b007      	add	sp, #28
 800caf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  while(status == 1 && retry != 0);

  //Send is comlete or failed.

  massert(portDataTxRxComplete(message->portNum, PORT_TYPE_SPI, RXTX_COMPLETE_TX) >= 0);
 800cafc:	4b0a      	ldr	r3, [pc, #40]	; (800cb28 <sendBuffer+0x15c>)
 800cafe:	490b      	ldr	r1, [pc, #44]	; (800cb2c <sendBuffer+0x160>)
 800cb00:	4808      	ldr	r0, [pc, #32]	; (800cb24 <sendBuffer+0x158>)
 800cb02:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800cb06:	f7fc f88f 	bl	8008c28 <xprintf>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	9304      	str	r3, [sp, #16]
 800cb0e:	9b04      	ldr	r3, [sp, #16]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d1fc      	bne.n	800cb0e <sendBuffer+0x142>
 800cb14:	e7eb      	b.n	800caee <sendBuffer+0x122>
 800cb16:	bf00      	nop
 800cb18:	10002038 	.word	0x10002038
 800cb1c:	0803dbf2 	.word	0x0803dbf2
 800cb20:	0801d90a 	.word	0x0801d90a
 800cb24:	0801d5dd 	.word	0x0801d5dd
 800cb28:	0803dc10 	.word	0x0803dc10
 800cb2c:	0801d914 	.word	0x0801d914

0800cb30 <EHIF_SPI_BEGIN>:
/////////////////////////////////////////    CC85xx EHIF     /////////////////////////////////////////////////////////

/// Activates CSn, starting an SPI operation
void EHIF_SPI_BEGIN(void)
{
  if (EHIF_SPI_HOOK)
 800cb30:	4b04      	ldr	r3, [pc, #16]	; (800cb44 <EHIF_SPI_BEGIN+0x14>)
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	b123      	cbz	r3, 800cb40 <EHIF_SPI_BEGIN+0x10>
    GPIO_WriteBit(EHIF_SPI_HOOK->cs.gpio, EHIF_SPI_HOOK->cs.pin, 0);
 800cb36:	2200      	movs	r2, #0
 800cb38:	8919      	ldrh	r1, [r3, #8]
 800cb3a:	6858      	ldr	r0, [r3, #4]
 800cb3c:	f003 be9c 	b.w	8010878 <GPIO_WriteBit>
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	10002cdc 	.word	0x10002cdc

0800cb48 <EHIF_SPI_IS_CMDREQ_READY>:
}

/// Non-zero when EHIF is ready, zero when EHIF is not ready
char EHIF_SPI_IS_CMDREQ_READY(void)
{
  if (EHIF_SPI_HOOK)
 800cb48:	4b03      	ldr	r3, [pc, #12]	; (800cb58 <EHIF_SPI_IS_CMDREQ_READY+0x10>)
 800cb4a:	6858      	ldr	r0, [r3, #4]
 800cb4c:	b118      	cbz	r0, 800cb56 <EHIF_SPI_IS_CMDREQ_READY+0xe>
    return readPin(EHIF_SPI_HOOK->miso.gpio, EHIF_SPI_HOOK->miso.pin);
 800cb4e:	8a81      	ldrh	r1, [r0, #20]
 800cb50:	6900      	ldr	r0, [r0, #16]
 800cb52:	f000 bbe0 	b.w	800d316 <readPin>
  return 0;
}
 800cb56:	4770      	bx	lr
 800cb58:	10002cdc 	.word	0x10002cdc

0800cb5c <EHIF_SPI_TX>:

/// Transmits a single byte
void EHIF_SPI_TX(char x)
{
  if (EHIF_SPI_HOOK)
 800cb5c:	4b03      	ldr	r3, [pc, #12]	; (800cb6c <EHIF_SPI_TX+0x10>)
 800cb5e:	685b      	ldr	r3, [r3, #4]
  return 0;
}

/// Transmits a single byte
void EHIF_SPI_TX(char x)
{
 800cb60:	4601      	mov	r1, r0
  if (EHIF_SPI_HOOK)
 800cb62:	b113      	cbz	r3, 800cb6a <EHIF_SPI_TX+0xe>
    {
      txSPI(EHIF_SPI_HOOK->spi, x);
 800cb64:	6818      	ldr	r0, [r3, #0]
 800cb66:	f000 bb85 	b.w	800d274 <txSPI>
 800cb6a:	4770      	bx	lr
 800cb6c:	10002cdc 	.word	0x10002cdc

0800cb70 <EHIF_SPI_WAIT_TXRX>:
    }
}

/// Waits for completion of \ref EHIF_SPI_TX() (no timeout required!)
void EHIF_SPI_WAIT_TXRX(void)
{
 800cb70:	4770      	bx	lr
	...

0800cb74 <EHIF_SPI_RX>:
} //No need to wait as it is done in EHIF_SPI_TX

/// The received byte after completing the last \ref EHIF_SPI_TX()
char EHIF_SPI_RX(void)
{
  if (EHIF_SPI_HOOK)
 800cb74:	4b03      	ldr	r3, [pc, #12]	; (800cb84 <EHIF_SPI_RX+0x10>)
 800cb76:	6858      	ldr	r0, [r3, #4]
 800cb78:	b110      	cbz	r0, 800cb80 <EHIF_SPI_RX+0xc>
    {
      return rxSPI(EHIF_SPI_HOOK->spi);
 800cb7a:	6800      	ldr	r0, [r0, #0]
 800cb7c:	f000 bbbe 	b.w	800d2fc <rxSPI>
    }
  return 0;
}
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	10002cdc 	.word	0x10002cdc

0800cb88 <EHIF_SPI_END>:

/// Deactivates CSn, ending an SPI operation
void EHIF_SPI_END(void)
{
  if (EHIF_SPI_HOOK)
 800cb88:	4b04      	ldr	r3, [pc, #16]	; (800cb9c <EHIF_SPI_END+0x14>)
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	b123      	cbz	r3, 800cb98 <EHIF_SPI_END+0x10>
    GPIO_WriteBit(EHIF_SPI_HOOK->cs.gpio, EHIF_SPI_HOOK->cs.pin, 1);
 800cb8e:	2201      	movs	r2, #1
 800cb90:	8919      	ldrh	r1, [r3, #8]
 800cb92:	6858      	ldr	r0, [r3, #4]
 800cb94:	f003 be70 	b.w	8010878 <GPIO_WriteBit>
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	10002cdc 	.word	0x10002cdc

0800cba0 <hwCommunicatorRadioInit>:
    }
  return 0;
}

static void hwCommunicatorRadioInit(void)
{
 800cba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba4:	b08f      	sub	sp, #60	; 0x3c
  //Blink all leds
  LEDblink(LED_BLINKER_SPI_HELPER, ~0, 1, 500, 1, 1, 500, 0);
 800cba6:	2201      	movs	r2, #1
 800cba8:	2500      	movs	r5, #0
 800cbaa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800cbae:	9503      	str	r5, [sp, #12]
 800cbb0:	9302      	str	r3, [sp, #8]
 800cbb2:	9201      	str	r2, [sp, #4]
 800cbb4:	9200      	str	r2, [sp, #0]
 800cbb6:	f04f 31ff 	mov.w	r1, #4294967295
 800cbba:	4628      	mov	r0, r5
  for (m = 0; m < RADIO_MODULES; m++)
    {
      //Set SPI hook for radio module HAL
      ehifStart(&radioModule[m].spi);
      EHIF_SPI_END();
      dprintf(LL_INFO, "Initializing Radio Module %d\n", m);
 800cbbc:	f8df b33c 	ldr.w	fp, [pc, #828]	; 800cefc <hwCommunicatorRadioInit+0x35c>
}

static void hwCommunicatorRadioInit(void)
{
  //Blink all leds
  LEDblink(LED_BLINKER_SPI_HELPER, ~0, 1, 500, 1, 1, 500, 0);
 800cbc0:	f000 fa30 	bl	800d024 <LEDblink>
 800cbc4:	465e      	mov	r6, fp
  int m;
  for (m = 0; m < RADIO_MODULES; m++)
    {
      //Set SPI hook for radio module HAL
      ehifStart(&radioModule[m].spi);
 800cbc6:	4bc2      	ldr	r3, [pc, #776]	; (800ced0 <hwCommunicatorRadioInit+0x330>)
 800cbc8:	203b      	movs	r0, #59	; 0x3b
 800cbca:	fb00 3005 	mla	r0, r0, r5, r3
 800cbce:	f7ff fb77 	bl	800c2c0 <ehifStart>
      EHIF_SPI_END();
 800cbd2:	f7ff ffd9 	bl	800cb88 <EHIF_SPI_END>
      dprintf(LL_INFO, "Initializing Radio Module %d\n", m);
 800cbd6:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	dd03      	ble.n	800cbe6 <hwCommunicatorRadioInit+0x46>
 800cbde:	4629      	mov	r1, r5
 800cbe0:	48bc      	ldr	r0, [pc, #752]	; (800ced4 <hwCommunicatorRadioInit+0x334>)
 800cbe2:	f7fc f821 	bl	8008c28 <xprintf>
#ifdef RADIO_IMAGE

      uint32_t radioManId = cfg.manId;
 800cbe6:	69f7      	ldr	r7, [r6, #28]
      uint32_t radioProdId = cfg.kondPom<<PROD_ID_KONDPOM_BIT;
 800cbe8:	6a33      	ldr	r3, [r6, #32]
 800cbea:	4cbb      	ldr	r4, [pc, #748]	; (800ced8 <hwCommunicatorRadioInit+0x338>)
 800cbec:	021b      	lsls	r3, r3, #8
 800cbee:	9305      	str	r3, [sp, #20]
#endif
      int radioModuleSet = 0;
#ifdef SMOK
      int twoOutputs = 0;
#endif
      switch(cfg.kondPom)
 800cbf0:	6a33      	ldr	r3, [r6, #32]
#ifdef RADIO_IMAGE

      uint32_t radioManId = cfg.manId;
      uint32_t radioProdId = cfg.kondPom<<PROD_ID_KONDPOM_BIT;
#ifdef MADO
      if(m == 1) radioManId |= MAN_ID_LR_MASK;
 800cbf2:	2d01      	cmp	r5, #1
 800cbf4:	bf08      	it	eq
 800cbf6:	f047 0702 	orreq.w	r7, r7, #2
#endif
      int radioModuleSet = 0;
#ifdef SMOK
      int twoOutputs = 0;
#endif
      switch(cfg.kondPom)
 800cbfa:	2bec      	cmp	r3, #236	; 0xec
 800cbfc:	db19      	blt.n	800cc32 <hwCommunicatorRadioInit+0x92>
 800cbfe:	2bee      	cmp	r3, #238	; 0xee
 800cc00:	dd02      	ble.n	800cc08 <hwCommunicatorRadioInit+0x68>
 800cc02:	2bff      	cmp	r3, #255	; 0xff
 800cc04:	d00b      	beq.n	800cc1e <hwCommunicatorRadioInit+0x7e>
 800cc06:	e014      	b.n	800cc32 <hwCommunicatorRadioInit+0x92>
        {
        case 0xEC:
        case 0xED:
        case 0xEE:
          twoOutputs = 1;
 800cc08:	4bb4      	ldr	r3, [pc, #720]	; (800cedc <hwCommunicatorRadioInit+0x33c>)
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	601a      	str	r2, [r3, #0]
#ifdef MADO
          if(cfg.forcems)
 800cc0e:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 800cc12:	b13b      	cbz	r3, 800cc24 <hwCommunicatorRadioInit+0x84>
            {
              rmChange(RM_MULTISLAVE, -1, 1);
 800cc14:	2201      	movs	r2, #1
 800cc16:	f04f 31ff 	mov.w	r1, #4294967295
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	e006      	b.n	800cc2c <hwCommunicatorRadioInit+0x8c>
#endif
          break;
        case 0xFF:
          //Factory defaults communication
#ifdef MADO
          if(rMode == RM_NONE)
 800cc1e:	7823      	ldrb	r3, [r4, #0]
 800cc20:	2b04      	cmp	r3, #4
 800cc22:	d109      	bne.n	800cc38 <hwCommunicatorRadioInit+0x98>
            {
              rmChange(RM_MULTISLAVE, -1, 1);
            }
          else
            {
              rmChange(RM_SINGLESLAVE, -1, 1);
 800cc24:	2201      	movs	r2, #1
 800cc26:	f04f 31ff 	mov.w	r1, #4294967295
 800cc2a:	2002      	movs	r0, #2
 800cc2c:	f009 f982 	bl	8015f34 <rmChange>
 800cc30:	e002      	b.n	800cc38 <hwCommunicatorRadioInit+0x98>
            rmChange(RM_SINGLESLAVE, -1, 1);
#endif
          break;
        default:
#ifdef MADO
          if(rMode == RM_NONE)
 800cc32:	7823      	ldrb	r3, [r4, #0]
 800cc34:	2b04      	cmp	r3, #4
 800cc36:	d0ed      	beq.n	800cc14 <hwCommunicatorRadioInit+0x74>
          break;
        }


#ifdef MADO
      switch(rMode)
 800cc38:	7823      	ldrb	r3, [r4, #0]
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d016      	beq.n	800cc6c <hwCommunicatorRadioInit+0xcc>
 800cc3e:	d30a      	bcc.n	800cc56 <hwCommunicatorRadioInit+0xb6>
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	d120      	bne.n	800cc86 <hwCommunicatorRadioInit+0xe6>
          radioManId |= MAN_ID_STEREO_MASK;
          radioModuleSet = 1;
          portNum_t p;
          //Enable multislave ports
          for(p = PER1_PORT; p <= PER2_PORT; p++)
            portData[p].enabled = 1;
 800cc44:	4aa6      	ldr	r2, [pc, #664]	; (800cee0 <hwCommunicatorRadioInit+0x340>)
 800cc46:	2301      	movs	r3, #1
            portData[p].enabled = 1;
        }
        break;
        case RM_SINGLESLAVE:
        {
          radioManId |= MAN_ID_STEREO_MASK;
 800cc48:	f047 0701 	orr.w	r7, r7, #1
          radioModuleSet = 1;
          portNum_t p;
          //Enable multislave ports
          for(p = PER1_PORT; p <= PER2_PORT; p++)
            portData[p].enabled = 1;
 800cc4c:	f882 306b 	strb.w	r3, [r2, #107]	; 0x6b
 800cc50:	f882 30bb 	strb.w	r3, [r2, #187]	; 0xbb
 800cc54:	e018      	b.n	800cc88 <hwCommunicatorRadioInit+0xe8>
        case RM_MULTISLAVE:
        {
          portNum_t p;
          //Enable multislave ports
          for(p = PER1_PORT; p < PORTS_NUM; p++)
            portData[p].enabled = 1;
 800cc56:	48a2      	ldr	r0, [pc, #648]	; (800cee0 <hwCommunicatorRadioInit+0x340>)
          break;
        }


#ifdef MADO
      switch(rMode)
 800cc58:	2300      	movs	r3, #0
        case RM_MULTISLAVE:
        {
          portNum_t p;
          //Enable multislave ports
          for(p = PER1_PORT; p < PORTS_NUM; p++)
            portData[p].enabled = 1;
 800cc5a:	2101      	movs	r1, #1
 800cc5c:	181a      	adds	r2, r3, r0
 800cc5e:	3350      	adds	r3, #80	; 0x50
        {
        case RM_MULTISLAVE:
        {
          portNum_t p;
          //Enable multislave ports
          for(p = PER1_PORT; p < PORTS_NUM; p++)
 800cc60:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
            portData[p].enabled = 1;
 800cc64:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
        {
        case RM_MULTISLAVE:
        {
          portNum_t p;
          //Enable multislave ports
          for(p = PER1_PORT; p < PORTS_NUM; p++)
 800cc68:	d1f8      	bne.n	800cc5c <hwCommunicatorRadioInit+0xbc>
 800cc6a:	e00c      	b.n	800cc86 <hwCommunicatorRadioInit+0xe6>
          radioManId |= MAN_ID_STEREO_MASK;
          radioModuleSet = 1;
          portNum_t p;
          //Enable multislave ports
          for(p = PER1_PORT; p < PORTS_NUM; p++)
            portData[p].enabled = 1;
 800cc6c:	489c      	ldr	r0, [pc, #624]	; (800cee0 <hwCommunicatorRadioInit+0x340>)
            portData[p].enabled = 1;
        }
        break;
        case RM_MULTISLAVE_STEREO:
        {
          radioManId |= MAN_ID_STEREO_MASK;
 800cc6e:	f047 0701 	orr.w	r7, r7, #1
 800cc72:	2200      	movs	r2, #0
          radioModuleSet = 1;
          portNum_t p;
          //Enable multislave ports
          for(p = PER1_PORT; p < PORTS_NUM; p++)
            portData[p].enabled = 1;
 800cc74:	1811      	adds	r1, r2, r0
 800cc76:	3250      	adds	r2, #80	; 0x50
        {
          radioManId |= MAN_ID_STEREO_MASK;
          radioModuleSet = 1;
          portNum_t p;
          //Enable multislave ports
          for(p = PER1_PORT; p < PORTS_NUM; p++)
 800cc78:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
            portData[p].enabled = 1;
 800cc7c:	f881 306b 	strb.w	r3, [r1, #107]	; 0x6b
        {
          radioManId |= MAN_ID_STEREO_MASK;
          radioModuleSet = 1;
          portNum_t p;
          //Enable multislave ports
          for(p = PER1_PORT; p < PORTS_NUM; p++)
 800cc80:	d1f8      	bne.n	800cc74 <hwCommunicatorRadioInit+0xd4>
        }
        break;
        case RM_MULTISLAVE_STEREO:
        {
          radioManId |= MAN_ID_STEREO_MASK;
          radioModuleSet = 1;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e000      	b.n	800cc88 <hwCommunicatorRadioInit+0xe8>
      uint32_t radioManId = cfg.manId;
      uint32_t radioProdId = cfg.kondPom<<PROD_ID_KONDPOM_BIT;
#ifdef MADO
      if(m == 1) radioManId |= MAN_ID_LR_MASK;
#endif
      int radioModuleSet = 0;
 800cc86:	2300      	movs	r3, #0

}

static void verifyRadioImage(int ms, int num, uint32_t manId, uint32_t prodId)
{
  uint32_t imageSize = (radioImage[ms][num][0x1E] << 8) | radioImage[ms][num][0x1F];
 800cc88:	4c96      	ldr	r4, [pc, #600]	; (800cee4 <hwCommunicatorRadioInit+0x344>)
 800cc8a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800cc8e:	03db      	lsls	r3, r3, #15
 800cc90:	18e2      	adds	r2, r4, r3
  uint32_t expectedCrcVal = getImageCRC((void*)radioImage[ms][num], manId, prodId);
 800cc92:	344b      	adds	r4, #75	; 0x4b
 800cc94:	441c      	add	r4, r3
 800cc96:	4639      	mov	r1, r7

}

static void verifyRadioImage(int ms, int num, uint32_t manId, uint32_t prodId)
{
  uint32_t imageSize = (radioImage[ms][num][0x1E] << 8) | radioImage[ms][num][0x1F];
 800cc98:	f892 a069 	ldrb.w	sl, [r2, #105]	; 0x69
 800cc9c:	f892 906a 	ldrb.w	r9, [r2, #106]	; 0x6a
  uint32_t expectedCrcVal = getImageCRC((void*)radioImage[ms][num], manId, prodId);
 800cca0:	9a05      	ldr	r2, [sp, #20]
 800cca2:	4620      	mov	r0, r4
 800cca4:	f7ff fa32 	bl	800c10c <getImageCRC>
 800cca8:	4680      	mov	r8, r0

  // Enter the SPI bootloader
  ehifBootResetSpi();
 800ccaa:	f006 fe8d 	bl	80139c8 <ehifBootResetSpi>
  uint16_t status = ehifBlUnlockSpi();
 800ccae:	f006 fd09 	bl	80136c4 <ehifBlUnlockSpi>
  if (status != EHIF_BL_SPI_LOADER_READY)
 800ccb2:	f248 0320 	movw	r3, #32800	; 0x8020
 800ccb6:	4298      	cmp	r0, r3
 800ccb8:	d154      	bne.n	800cd64 <hwCommunicatorRadioInit+0x1c4>
      ehifSysResetSpi(1); // with wait rready flag
      ehifWaitReadyMs(300);
      ehifGetWaitReadyError();
      return;
    }
  uint32_t actualCrcVal = 0;
 800ccba:	a90e      	add	r1, sp, #56	; 0x38
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	f841 3d1c 	str.w	r3, [r1, #-28]!
  ehifBlFlashVerify(imageSize, (uint8_t*)&actualCrcVal);
 800ccc2:	ea49 200a 	orr.w	r0, r9, sl, lsl #8
 800ccc6:	f006 fd47 	bl	8013758 <ehifBlFlashVerify>

  ehifSysResetSpi(1); // with wait rready flag
 800ccca:	2001      	movs	r0, #1
 800cccc:	f006 fe58 	bl	8013980 <ehifSysResetSpi>
  ehifWaitReadyMs(300);
 800ccd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ccd4:	f006 fe3c 	bl	8013950 <ehifWaitReadyMs>
  ehifGetWaitReadyError();
 800ccd8:	f006 fea2 	bl	8013a20 <ehifGetWaitReadyError>

  //If crc differs then reaplce image
  if(actualCrcVal != expectedCrcVal)
 800ccdc:	9b07      	ldr	r3, [sp, #28]
 800ccde:	4598      	cmp	r8, r3
    {
      dprintf(LL_WARNING, "\e[31mRadio flash invalid. Raplacing.\e[m\n");
 800cce0:	6c33      	ldr	r3, [r6, #64]	; 0x40
  ehifSysResetSpi(1); // with wait rready flag
  ehifWaitReadyMs(300);
  ehifGetWaitReadyError();

  //If crc differs then reaplce image
  if(actualCrcVal != expectedCrcVal)
 800cce2:	d067      	beq.n	800cdb4 <hwCommunicatorRadioInit+0x214>
    {
      dprintf(LL_WARNING, "\e[31mRadio flash invalid. Raplacing.\e[m\n");
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	dd02      	ble.n	800ccee <hwCommunicatorRadioInit+0x14e>
 800cce8:	487f      	ldr	r0, [pc, #508]	; (800cee8 <hwCommunicatorRadioInit+0x348>)
 800ccea:	f7fb ff9d 	bl	8008c28 <xprintf>
static uint16_t eraseProgVerifyFlash(const uint8_t* pFlashImage, uint32_t manId, uint32_t prodId)
{

  // Extract information from the image
  uint32_t imageSize = (pFlashImage[0x1E] << 8) | pFlashImage[0x1F];
  const uint32_t expectedCrcVal = getImageCRC(pFlashImage, manId, prodId);
 800ccee:	9a05      	ldr	r2, [sp, #20]
}
static uint16_t eraseProgVerifyFlash(const uint8_t* pFlashImage, uint32_t manId, uint32_t prodId)
{

  // Extract information from the image
  uint32_t imageSize = (pFlashImage[0x1E] << 8) | pFlashImage[0x1F];
 800ccf0:	f894 901e 	ldrb.w	r9, [r4, #30]
 800ccf4:	f894 801f 	ldrb.w	r8, [r4, #31]
  const uint32_t expectedCrcVal = getImageCRC(pFlashImage, manId, prodId);
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f7ff fa06 	bl	800c10c <getImageCRC>

  // Enter the SPI bootloader
  ehifBootResetSpi();
 800cd00:	f006 fe62 	bl	80139c8 <ehifBootResetSpi>
  uint16_t status = ehifBlUnlockSpi();
 800cd04:	f006 fcde 	bl	80136c4 <ehifBlUnlockSpi>
  if (status != EHIF_BL_SPI_LOADER_READY) return status;
 800cd08:	f248 0320 	movw	r3, #32800	; 0x8020
 800cd0c:	4298      	cmp	r0, r3
 800cd0e:	d156      	bne.n	800cdbe <hwCommunicatorRadioInit+0x21e>
  // Erase current flash contents
  status = ehifBlFlashMassErase();
 800cd10:	f006 fce8 	bl	80136e4 <ehifBlFlashMassErase>
  while(status == EHIF_BL_ERASE_WORKING)
 800cd14:	2802      	cmp	r0, #2
 800cd16:	d105      	bne.n	800cd24 <hwCommunicatorRadioInit+0x184>
    {
      mdelay(10);
 800cd18:	200a      	movs	r0, #10
 800cd1a:	f7fd fef5 	bl	800ab08 <vTaskDelay>
      status = ehifGetStatus();
 800cd1e:	f006 fd3e 	bl	801379e <ehifGetStatus>
 800cd22:	e7f7      	b.n	800cd14 <hwCommunicatorRadioInit+0x174>
    }
  if (status != EHIF_BL_ERASE_DONE) return status;
 800cd24:	f248 0303 	movw	r3, #32771	; 0x8003
 800cd28:	4298      	cmp	r0, r3
 800cd2a:	d148      	bne.n	800cdbe <hwCommunicatorRadioInit+0x21e>

  // For each 1 kB flash page ...
  uint16_t offset;
  uint8_t *buff = intSafeMalloc(0x400);
 800cd2c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cd30:	f7fb fdf9 	bl	8008926 <intSafeMalloc>
}
static uint16_t eraseProgVerifyFlash(const uint8_t* pFlashImage, uint32_t manId, uint32_t prodId)
{

  // Extract information from the image
  uint32_t imageSize = (pFlashImage[0x1E] << 8) | pFlashImage[0x1F];
 800cd34:	ea48 2909 	orr.w	r9, r8, r9, lsl #8
    }
  if (status != EHIF_BL_ERASE_DONE) return status;

  // For each 1 kB flash page ...
  uint16_t offset;
  uint8_t *buff = intSafeMalloc(0x400);
 800cd38:	4682      	mov	sl, r0
 800cd3a:	f04f 0800 	mov.w	r8, #0
  for (offset = 0x0000; offset < 0x8000; offset += 0x0400)
    {
      getImageChunk(buff, pFlashImage, offset, 0x400, manId, prodId);
 800cd3e:	9b05      	ldr	r3, [sp, #20]
 800cd40:	9301      	str	r3, [sp, #4]
 800cd42:	9700      	str	r7, [sp, #0]
 800cd44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd48:	4642      	mov	r2, r8
 800cd4a:	4621      	mov	r1, r4
 800cd4c:	4650      	mov	r0, sl
 800cd4e:	f7ff f9a3 	bl	800c098 <getImageChunk>

      // Bail out when the entire image has been programmed (it is normally less than 32 kB)
      if (offset >= imageSize) break;
 800cd52:	45c1      	cmp	r9, r8
 800cd54:	d810      	bhi.n	800cd78 <hwCommunicatorRadioInit+0x1d8>
        {
          intSafeFree(buff);
          return status;
        }
    }
  intSafeFree(buff);
 800cd56:	4650      	mov	r0, sl
 800cd58:	f7fb fdf6 	bl	8008948 <intSafeFree>
  // Verify the flash contents by performing CRC-32 check. Also compare the calculated CRC with the one
  // in the image to make sure that we've actually programmed it and not just verified what was already
  // in the flash memory
  uint8_t pActualCrcVal[sizeof(uint32_t)];
  status = ehifBlFlashVerify(imageSize, pActualCrcVal);
 800cd5c:	a90b      	add	r1, sp, #44	; 0x2c
 800cd5e:	4648      	mov	r0, r9
 800cd60:	f006 fcfa 	bl	8013758 <ehifBlFlashVerify>
        }
    }

  // Exit the SPI bootloader (not waiting for EHIF CMD_REQ_RDY since this will interfere with button
  // functionality on the CSn pin in autonomous operation)
  ehifSysResetSpi(1);
 800cd64:	2001      	movs	r0, #1
 800cd66:	f006 fe0b 	bl	8013980 <ehifSysResetSpi>
  ehifWaitReadyMs(300);
 800cd6a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cd6e:	f006 fdef 	bl	8013950 <ehifWaitReadyMs>
  ehifGetWaitReadyError();
 800cd72:	f006 fe55 	bl	8013a20 <ehifGetWaitReadyError>
 800cd76:	e022      	b.n	800cdbe <hwCommunicatorRadioInit+0x21e>

      // Bail out when the entire image has been programmed (it is normally less than 32 kB)
      if (offset >= imageSize) break;

      // Write the page data to RAM
      ehifSetAddr(0x6000);
 800cd78:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800cd7c:	f006 fdcb 	bl	8013916 <ehifSetAddr>
      ehifWrite(0x0400, buff);
 800cd80:	4651      	mov	r1, sl
 800cd82:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cd86:	f006 fd37 	bl	80137f8 <ehifWrite>

      // Program the page
      status = ehifBlFlashPageProg(0x6000, 0x8000 + offset);
 800cd8a:	f5a8 4100 	sub.w	r1, r8, #32768	; 0x8000
 800cd8e:	b289      	uxth	r1, r1
 800cd90:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800cd94:	f006 fcb6 	bl	8013704 <ehifBlFlashPageProg>
      if (status != EHIF_BL_PROG_DONE)
 800cd98:	f248 030b 	movw	r3, #32779	; 0x800b
 800cd9c:	4298      	cmp	r0, r3
 800cd9e:	d003      	beq.n	800cda8 <hwCommunicatorRadioInit+0x208>
        {
          intSafeFree(buff);
 800cda0:	4650      	mov	r0, sl
 800cda2:	f7fb fdd1 	bl	8008948 <intSafeFree>
 800cda6:	e00a      	b.n	800cdbe <hwCommunicatorRadioInit+0x21e>
 800cda8:	f508 6880 	add.w	r8, r8, #1024	; 0x400
  if (status != EHIF_BL_ERASE_DONE) return status;

  // For each 1 kB flash page ...
  uint16_t offset;
  uint8_t *buff = intSafeMalloc(0x400);
  for (offset = 0x0000; offset < 0x8000; offset += 0x0400)
 800cdac:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 800cdb0:	d1c5      	bne.n	800cd3e <hwCommunicatorRadioInit+0x19e>
 800cdb2:	e7d0      	b.n	800cd56 <hwCommunicatorRadioInit+0x1b6>
    {
      dprintf(LL_WARNING, "\e[31mRadio flash invalid. Raplacing.\e[m\n");
      eraseProgVerifyFlash((void*)radioImage[ms][num], manId, prodId);
    }
  else
    dprintf(LL_INFO, "Radio flash valid.\n");
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	dd02      	ble.n	800cdbe <hwCommunicatorRadioInit+0x21e>
 800cdb8:	484c      	ldr	r0, [pc, #304]	; (800ceec <hwCommunicatorRadioInit+0x34c>)
 800cdba:	f7fb ff35 	bl	8008c28 <xprintf>
        }

#endif
      verifyRadioImage(radioModuleSet, m, radioManId, radioProdId);
#endif
      if(cfg.proto & 0x2)
 800cdbe:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800cdc0:	0798      	lsls	r0, r3, #30
 800cdc2:	d403      	bmi.n	800cdcc <hwCommunicatorRadioInit+0x22c>
  hwCommunicatorRadioInit();
}

static int resetRadio(void)
{
  if(cfg.proto & 0x2)
 800cdc4:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800cdc8:	0799      	lsls	r1, r3, #30
 800cdca:	d502      	bpl.n	800cdd2 <hwCommunicatorRadioInit+0x232>
    {
      ehifBootResetSpi();
 800cdcc:	f006 fdfc 	bl	80139c8 <ehifBootResetSpi>
 800cdd0:	e052      	b.n	800ce78 <hwCommunicatorRadioInit+0x2d8>
    }
  else if (!reset_powerActive())
 800cdd2:	f006 faa9 	bl	8013328 <reset_powerActive>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d14e      	bne.n	800ce78 <hwCommunicatorRadioInit+0x2d8>
    {
      EHIF_CMD_DI_GET_DEVICE_INFO_DATA_T devInfo;
      WAIT_BUSY;
 800cdda:	f006 fce0 	bl	801379e <ehifGetStatus>
 800cdde:	0402      	lsls	r2, r0, #16
 800cde0:	d403      	bmi.n	800cdea <hwCommunicatorRadioInit+0x24a>
 800cde2:	2001      	movs	r0, #1
 800cde4:	f7fd fe90 	bl	800ab08 <vTaskDelay>
 800cde8:	e7f7      	b.n	800cdda <hwCommunicatorRadioInit+0x23a>
      devInfo = getDeviceInfo();
 800cdea:	a80b      	add	r0, sp, #44	; 0x2c
 800cdec:	f006 f9c0 	bl	8013170 <getDeviceInfo>
      if (devInfo.deviceId != 0 && devInfo.deviceId != 0xFFFFFFFF)
 800cdf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	3303      	adds	r3, #3
 800cdf6:	d83f      	bhi.n	800ce78 <hwCommunicatorRadioInit+0x2d8>
        {
          clearFlags(0xFF);  //Clear them all
 800cdf8:	20ff      	movs	r0, #255	; 0xff
 800cdfa:	f006 f9d7 	bl	80131ac <clearFlags>
#ifdef MADO
          //I am master
          chipRadioEnable(ENABLE);
 800cdfe:	2001      	movs	r0, #1
 800ce00:	f006 fac8 	bl	8013394 <chipRadioEnable>
#endif

          setIntEvents( BV_EHIF_EVT_DSC_RX_AVAIL | BV_EHIF_EVT_DSC_RESET | BV_EHIF_EVT_NWK_CHG | BV_EHIF_EVT_DSC_RESET);
 800ce04:	20a2      	movs	r0, #162	; 0xa2
 800ce06:	f006 f9e1 	bl	80131cc <setIntEvents>
          ehifBootResetSpi();
        }
      else if(resetRadio())
        {
          EHIF_CMD_DI_GET_DEVICE_INFO_DATA_T devInfo;
          WAIT_BUSY;
 800ce0a:	f006 fcc8 	bl	801379e <ehifGetStatus>
 800ce0e:	0403      	lsls	r3, r0, #16
 800ce10:	d403      	bmi.n	800ce1a <hwCommunicatorRadioInit+0x27a>
 800ce12:	2001      	movs	r0, #1
 800ce14:	f7fd fe78 	bl	800ab08 <vTaskDelay>
 800ce18:	e7f7      	b.n	800ce0a <hwCommunicatorRadioInit+0x26a>
          devInfo = getDeviceInfo();
 800ce1a:	a808      	add	r0, sp, #32
 800ce1c:	f006 f9a8 	bl	8013170 <getDeviceInfo>
 800ce20:	9908      	ldr	r1, [sp, #32]
          if (devInfo.deviceId != 0 && devInfo.deviceId != 0xFFFFFFFF)
 800ce22:	1e4b      	subs	r3, r1, #1
 800ce24:	3303      	adds	r3, #3
 800ce26:	d827      	bhi.n	800ce78 <hwCommunicatorRadioInit+0x2d8>
            {
              radioModule[m].device.devID = devInfo.deviceId;
 800ce28:	4829      	ldr	r0, [pc, #164]	; (800ced0 <hwCommunicatorRadioInit+0x330>)
        }
      else if(resetRadio())
        {
          EHIF_CMD_DI_GET_DEVICE_INFO_DATA_T devInfo;
          WAIT_BUSY;
          devInfo = getDeviceInfo();
 800ce2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
          if (devInfo.deviceId != 0 && devInfo.deviceId != 0xFFFFFFFF)
            {
              radioModule[m].device.devID = devInfo.deviceId;
 800ce2e:	233b      	movs	r3, #59	; 0x3b
 800ce30:	fb03 0305 	mla	r3, r3, r5, r0
 800ce34:	61d9      	str	r1, [r3, #28]
              radioModule[m].device.manID = devInfo.mfctId;
 800ce36:	621a      	str	r2, [r3, #32]
              radioModule[m].device.prodID = devInfo.prodId;
 800ce38:	625c      	str	r4, [r3, #36]	; 0x24

              dprintf(LL_INFO, "Found Radio Module (%08x:%08x:%08x)\n",
 800ce3a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	dd03      	ble.n	800ce48 <hwCommunicatorRadioInit+0x2a8>
 800ce40:	4623      	mov	r3, r4
 800ce42:	482b      	ldr	r0, [pc, #172]	; (800cef0 <hwCommunicatorRadioInit+0x350>)
 800ce44:	f7fb fef0 	bl	8008c28 <xprintf>
                      devInfo.deviceId, devInfo.mfctId, devInfo.prodId);
#ifdef MADO
              LEDblink(LED_BLINKER_SPI_HELPER, LD4, 1, 500, 1, 1, 500, 0);
 800ce48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	2000      	movs	r0, #0
 800ce50:	9302      	str	r3, [sp, #8]
 800ce52:	9003      	str	r0, [sp, #12]
 800ce54:	9201      	str	r2, [sp, #4]
 800ce56:	9200      	str	r2, [sp, #0]
 800ce58:	2108      	movs	r1, #8
 800ce5a:	f000 f8e3 	bl	800d024 <LEDblink>
                              rfChannels(0xFF00);
                            else
                              rfChannels(0x00FF);
              */

              dprintf(LL_INFO, "Master initialized. Status %04x \n", (int)ehifGetStatus());
 800ce5e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	dd05      	ble.n	800ce70 <hwCommunicatorRadioInit+0x2d0>
 800ce64:	f006 fc9b 	bl	801379e <ehifGetStatus>
 800ce68:	4601      	mov	r1, r0
 800ce6a:	4822      	ldr	r0, [pc, #136]	; (800cef4 <hwCommunicatorRadioInit+0x354>)
 800ce6c:	f7fb fedc 	bl	8008c28 <xprintf>
              portData[CEN_PORT].kond_pom = (devInfo.prodId >> 8)&0xFF;
 800ce70:	4b1b      	ldr	r3, [pc, #108]	; (800cee0 <hwCommunicatorRadioInit+0x340>)
 800ce72:	0a24      	lsrs	r4, r4, #8
 800ce74:	765c      	strb	r4, [r3, #25]
 800ce76:	e01c      	b.n	800ceb2 <hwCommunicatorRadioInit+0x312>
              ehifStop();
              continue;
            }
        }

      dprintf(LL_WARNING, "Did not find Radio Module %d\n", m);
 800ce78:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	dd03      	ble.n	800ce86 <hwCommunicatorRadioInit+0x2e6>
 800ce7e:	4629      	mov	r1, r5
 800ce80:	481d      	ldr	r0, [pc, #116]	; (800cef8 <hwCommunicatorRadioInit+0x358>)
 800ce82:	f7fb fed1 	bl	8008c28 <xprintf>

#ifdef MADO
      LEDblink(LED_BLINKER_SPI_HELPER, LD3, 1, 1000, 100, 100, 100, 0);
 800ce86:	2400      	movs	r4, #0
 800ce88:	2364      	movs	r3, #100	; 0x64
 800ce8a:	9302      	str	r3, [sp, #8]
 800ce8c:	9301      	str	r3, [sp, #4]
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ce96:	2104      	movs	r1, #4
 800ce98:	9403      	str	r4, [sp, #12]
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 f8c2 	bl	800d024 <LEDblink>
#ifdef SMOK
      switchPortHelper(CEN_PORT, PORT_TYPE_USART);
      spiHelper_t *helper = (spiHelper_t *)portData[CEN_PORT].SPIhelper;
      helper->radioModule = NULL;
#endif
      radioModule[m].spi.spi = NULL;
 800cea0:	233b      	movs	r3, #59	; 0x3b
 800cea2:	4a0b      	ldr	r2, [pc, #44]	; (800ced0 <hwCommunicatorRadioInit+0x330>)
 800cea4:	490a      	ldr	r1, [pc, #40]	; (800ced0 <hwCommunicatorRadioInit+0x330>)
 800cea6:	436b      	muls	r3, r5
 800cea8:	441a      	add	r2, r3
 800ceaa:	54cc      	strb	r4, [r1, r3]
 800ceac:	7054      	strb	r4, [r2, #1]
 800ceae:	7094      	strb	r4, [r2, #2]
 800ceb0:	70d4      	strb	r4, [r2, #3]
static void hwCommunicatorRadioInit(void)
{
  //Blink all leds
  LEDblink(LED_BLINKER_SPI_HELPER, ~0, 1, 500, 1, 1, 500, 0);
  int m;
  for (m = 0; m < RADIO_MODULES; m++)
 800ceb2:	3501      	adds	r5, #1
      switchPortHelper(CEN_PORT, PORT_TYPE_USART);
      spiHelper_t *helper = (spiHelper_t *)portData[CEN_PORT].SPIhelper;
      helper->radioModule = NULL;
#endif
      radioModule[m].spi.spi = NULL;
      ehifStop();
 800ceb4:	f7ff fa2e 	bl	800c314 <ehifStop>
static void hwCommunicatorRadioInit(void)
{
  //Blink all leds
  LEDblink(LED_BLINKER_SPI_HELPER, ~0, 1, 500, 1, 1, 500, 0);
  int m;
  for (m = 0; m < RADIO_MODULES; m++)
 800ceb8:	2d02      	cmp	r5, #2
 800ceba:	f47f ae84 	bne.w	800cbc6 <hwCommunicatorRadioInit+0x26>
#endif
      radioModule[m].spi.spi = NULL;
      ehifStop();
    }
#ifdef MADO
  LEDset(LED_BLINKER_SPI_HELPER, LD5, 0);
 800cebe:	2200      	movs	r2, #0
 800cec0:	2110      	movs	r1, #16
 800cec2:	4610      	mov	r0, r2
 800cec4:	f000 f8ec 	bl	800d0a0 <LEDset>
#else
  SmokLEDsState(0, 0, SET_NONE, -1);
#endif
}
 800cec8:	b00f      	add	sp, #60	; 0x3c
 800ceca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cece:	bf00      	nop
 800ced0:	100032b8 	.word	0x100032b8
 800ced4:	0803dc5d 	.word	0x0803dc5d
 800ced8:	100024f4 	.word	0x100024f4
 800cedc:	10002da0 	.word	0x10002da0
 800cee0:	10002038 	.word	0x10002038
 800cee4:	0801d8d4 	.word	0x0801d8d4
 800cee8:	0803dc7b 	.word	0x0803dc7b
 800ceec:	0803dca4 	.word	0x0803dca4
 800cef0:	0803dcb8 	.word	0x0803dcb8
 800cef4:	0803dcdd 	.word	0x0803dcdd
 800cef8:	0803dcff 	.word	0x0803dcff
 800cefc:	10001000 	.word	0x10001000

0800cf00 <radioReinitMsg>:
    }
  return 0;
}

static void radioReinitMsg(void *data)
{
 800cf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf04:	4e30      	ldr	r6, [pc, #192]	; (800cfc8 <radioReinitMsg+0xc8>)
          if (portData[p].connState != DEV_NCONN)
            {
              portData[p].prevConnState = portData[p].connState;
              portData[p].connState = DEV_NCONN;
              connectionState(NET_NC);
              dprintf(LL_INFO, "Disconnecting peer (%08x:%08x:%08x).\n",
 800cf06:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800cfd0 <radioReinitMsg+0xd0>
    }
  return 0;
}

static void radioReinitMsg(void *data)
{
 800cf0a:	4680      	mov	r8, r0
  messageRadioReinit_t *message = data;
  //Disconnect all ports
  portNum_t p;
  for (p = PER1_PORT; p < PORTS_NUM; p++)
 800cf0c:	2701      	movs	r7, #1
    {
      portData[p].enabled = 0;
 800cf0e:	2500      	movs	r5, #0

      spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
 800cf10:	6e34      	ldr	r4, [r6, #96]	; 0x60
  messageRadioReinit_t *message = data;
  //Disconnect all ports
  portNum_t p;
  for (p = PER1_PORT; p < PORTS_NUM; p++)
    {
      portData[p].enabled = 0;
 800cf12:	f886 506b 	strb.w	r5, [r6, #107]	; 0x6b

      spiHelper_t *helper = (spiHelper_t *)portData[p].SPIhelper;
      if(!helper) continue;
 800cf16:	2c00      	cmp	r4, #0
 800cf18:	d048      	beq.n	800cfac <radioReinitMsg+0xac>
      if(portData[p].portType == PORT_TYPE_SPI)
 800cf1a:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d144      	bne.n	800cfac <radioReinitMsg+0xac>
        {
          if (portData[p].connState != DEV_NCONN)
 800cf22:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d040      	beq.n	800cfac <radioReinitMsg+0xac>
            {
              portData[p].prevConnState = portData[p].connState;
              portData[p].connState = DEV_NCONN;
              connectionState(NET_NC);
 800cf2a:	2000      	movs	r0, #0
      if(!helper) continue;
      if(portData[p].portType == PORT_TYPE_SPI)
        {
          if (portData[p].connState != DEV_NCONN)
            {
              portData[p].prevConnState = portData[p].connState;
 800cf2c:	f886 3071 	strb.w	r3, [r6, #113]	; 0x71
              portData[p].connState = DEV_NCONN;
 800cf30:	f886 5070 	strb.w	r5, [r6, #112]	; 0x70
              connectionState(NET_NC);
 800cf34:	f7fc f886 	bl	8009044 <connectionState>
              dprintf(LL_INFO, "Disconnecting peer (%08x:%08x:%08x).\n",
 800cf38:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	dd08      	ble.n	800cf52 <radioReinitMsg+0x52>
 800cf40:	f8d4 311d 	ldr.w	r3, [r4, #285]	; 0x11d
 800cf44:	f8d4 2119 	ldr.w	r2, [r4, #281]	; 0x119
 800cf48:	f8d4 1115 	ldr.w	r1, [r4, #277]	; 0x115
 800cf4c:	481f      	ldr	r0, [pc, #124]	; (800cfcc <radioReinitMsg+0xcc>)
 800cf4e:	f7fb fe6b 	bl	8008c28 <xprintf>
                      helper->connDev.devID,
                      helper->connDev.manID,
                      helper->connDev.prodID);
              switchPortHelper(p, PORT_TYPE_USART);
 800cf52:	2100      	movs	r1, #0
 800cf54:	4638      	mov	r0, r7
 800cf56:	f7fe ffcd 	bl	800bef4 <switchPortHelper>
#ifdef MADO
              helper->connDev.devID = 0;
 800cf5a:	f884 5115 	strb.w	r5, [r4, #277]	; 0x115
 800cf5e:	f884 5116 	strb.w	r5, [r4, #278]	; 0x116
 800cf62:	f884 5117 	strb.w	r5, [r4, #279]	; 0x117
 800cf66:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
              helper->connDev.manID = 0;
 800cf6a:	f884 5119 	strb.w	r5, [r4, #281]	; 0x119
 800cf6e:	f884 511a 	strb.w	r5, [r4, #282]	; 0x11a
 800cf72:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
 800cf76:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
              helper->connDev.prodID = 0;
 800cf7a:	f884 511d 	strb.w	r5, [r4, #285]	; 0x11d
 800cf7e:	f884 511e 	strb.w	r5, [r4, #286]	; 0x11e
 800cf82:	f884 511f 	strb.w	r5, [r4, #287]	; 0x11f
 800cf86:	f884 5120 	strb.w	r5, [r4, #288]	; 0x120
              helper->radioModule = NULL;
 800cf8a:	f884 510c 	strb.w	r5, [r4, #268]	; 0x10c
 800cf8e:	f884 510d 	strb.w	r5, [r4, #269]	; 0x10d
 800cf92:	f884 510e 	strb.w	r5, [r4, #270]	; 0x10e
 800cf96:	f884 510f 	strb.w	r5, [r4, #271]	; 0x10f
              helper->connDev.audioConnState = 0;
 800cf9a:	f884 5121 	strb.w	r5, [r4, #289]	; 0x121
 800cf9e:	f884 5122 	strb.w	r5, [r4, #290]	; 0x122
#endif

              sendNetworkStatus(p, NET_DROPPED, (uint8_t)helper->connDev.devID);
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	2103      	movs	r1, #3
 800cfa6:	4638      	mov	r0, r7
 800cfa8:	f7fd f818 	bl	8009fdc <sendNetworkStatus>
static void radioReinitMsg(void *data)
{
  messageRadioReinit_t *message = data;
  //Disconnect all ports
  portNum_t p;
  for (p = PER1_PORT; p < PORTS_NUM; p++)
 800cfac:	3701      	adds	r7, #1
 800cfae:	b2ff      	uxtb	r7, r7
 800cfb0:	2f09      	cmp	r7, #9
 800cfb2:	f106 0650 	add.w	r6, r6, #80	; 0x50
 800cfb6:	d1ab      	bne.n	800cf10 <radioReinitMsg+0x10>
              sendNetworkStatus(p, NET_DROPPED, (uint8_t)helper->connDev.devID);
            }
        }
    }
  //Reinit radio modules
  hwCommunicatorRadioInit();
 800cfb8:	f7ff fdf2 	bl	800cba0 <hwCommunicatorRadioInit>

  dFree(message);
 800cfbc:	f1a8 0014 	sub.w	r0, r8, #20
}
 800cfc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        }
    }
  //Reinit radio modules
  hwCommunicatorRadioInit();

  dFree(message);
 800cfc4:	f008 ba34 	b.w	8015430 <bFree>
 800cfc8:	10002038 	.word	0x10002038
 800cfcc:	0803dd1d 	.word	0x0803dd1d
 800cfd0:	10001000 	.word	0x10001000

0800cfd4 <hwCommunicatorSPIInit>:

}
#endif

static void hwCommunicatorSPIInit(void *data)
{
 800cfd4:	b508      	push	{r3, lr}
  mdelay(100);
 800cfd6:	2064      	movs	r0, #100	; 0x64
 800cfd8:	f7fd fd96 	bl	800ab08 <vTaskDelay>
  hwCommunicatorRadioInit();
}
 800cfdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif

static void hwCommunicatorSPIInit(void *data)
{
  mdelay(100);
  hwCommunicatorRadioInit();
 800cfe0:	f7ff bdde 	b.w	800cba0 <hwCommunicatorRadioInit>

0800cfe4 <EHIF_DELAY_US>:

void __attribute__((optimize("-Os")))EHIF_DELAY_US(int x)
{
  //Must not block CPUi
  //  EHIF_DELAY_MS(1);
  volatile int countDown =x*(SystemCoreClock/7000000UL);
 800cfe4:	4b07      	ldr	r3, [pc, #28]	; (800d004 <EHIF_DELAY_US+0x20>)
 800cfe6:	4a08      	ldr	r2, [pc, #32]	; (800d008 <EHIF_DELAY_US+0x24>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	fbb3 f3f2 	udiv	r3, r3, r2
}

//uint32_t cnt = 1000;

void __attribute__((optimize("-Os")))EHIF_DELAY_US(int x)
{
 800cfee:	b082      	sub	sp, #8
  //Must not block CPUi
  //  EHIF_DELAY_MS(1);
  volatile int countDown =x*(SystemCoreClock/7000000UL);
 800cff0:	4358      	muls	r0, r3
 800cff2:	9001      	str	r0, [sp, #4]
  while(countDown--);
 800cff4:	9b01      	ldr	r3, [sp, #4]
 800cff6:	1e5a      	subs	r2, r3, #1
 800cff8:	9201      	str	r2, [sp, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1fa      	bne.n	800cff4 <EHIF_DELAY_US+0x10>
}
 800cffe:	b002      	add	sp, #8
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop
 800d004:	1000237c 	.word	0x1000237c
 800d008:	006acfc0 	.word	0x006acfc0

0800d00c <wdog>:
static void wdog(void *data)
{
#ifdef WATCHDOG_LED
  int i;
  for(i=0; i < LED_BLINKER_NUM; i++)
    if(&module[i] == data)
 800d00c:	4b04      	ldr	r3, [pc, #16]	; (800d020 <wdog+0x14>)
 800d00e:	4298      	cmp	r0, r3
 800d010:	d102      	bne.n	800d018 <wdog+0xc>
      wdogFeed(WATCHDOG_LED(0));
 800d012:	2001      	movs	r0, #1
 800d014:	f001 b816 	b.w	800e044 <wdogFeed>
static void wdog(void *data)
{
#ifdef WATCHDOG_LED
  int i;
  for(i=0; i < LED_BLINKER_NUM; i++)
    if(&module[i] == data)
 800d018:	3340      	adds	r3, #64	; 0x40
 800d01a:	4298      	cmp	r0, r3
 800d01c:	d0f9      	beq.n	800d012 <wdog+0x6>
      wdogFeed(WATCHDOG_LED(0));
#endif
}
 800d01e:	4770      	bx	lr
 800d020:	10001f98 	.word	0x10001f98

0800d024 <LEDblink>:
  int time_post;
  uint32_t loop;
} messageLEDData_t;
static int Bnum[LED_BLINKER_NUM];
int LEDblink(int LEDblinker, uint32_t ledsMask, int blinkNum, int time_on, int time_break, int time_pre, int time_post, uint8_t loop)
{
 800d024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (LEDblinker >= LED_BLINKER_NUM)
 800d028:	2801      	cmp	r0, #1
  int time_post;
  uint32_t loop;
} messageLEDData_t;
static int Bnum[LED_BLINKER_NUM];
int LEDblink(int LEDblinker, uint32_t ledsMask, int blinkNum, int time_on, int time_break, int time_pre, int time_post, uint8_t loop)
{
 800d02a:	4605      	mov	r5, r0
 800d02c:	4689      	mov	r9, r1
 800d02e:	4616      	mov	r6, r2
 800d030:	4698      	mov	r8, r3
 800d032:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
  if (LEDblinker >= LED_BLINKER_NUM)
 800d036:	dc28      	bgt.n	800d08a <LEDblink+0x66>
    return -1;
  if (blinkNum == LED_BLINK_STOP)
 800d038:	1c53      	adds	r3, r2, #1
 800d03a:	d103      	bne.n	800d044 <LEDblink+0x20>
    {
      Bnum[LEDblinker] = LED_BLINK_STOP;
 800d03c:	4b16      	ldr	r3, [pc, #88]	; (800d098 <LEDblink+0x74>)
 800d03e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d042:	e026      	b.n	800d092 <LEDblink+0x6e>
    }
  else
    {
      //Allocate resources for data transfer
      messageLEDData_t *message = dAlloc(sizeof(messageLEDData_t));
 800d044:	2020      	movs	r0, #32
 800d046:	f007 ff99 	bl	8014f7c <bAlloc>
 800d04a:	4604      	mov	r4, r0
 800d04c:	b1e8      	cbz	r0, 800d08a <LEDblink+0x66>
      //Fill message
      message->LEDblinker = LEDblinker;
      message->ledsMask = ledsMask;
      message->blinkNum = blinkNum;
      message->time_on = time_on;
      message->time_break = time_break;
 800d04e:	9b08      	ldr	r3, [sp, #32]
 800d050:	6243      	str	r3, [r0, #36]	; 0x24
      message->time_pre = time_pre;
 800d052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d054:	6283      	str	r3, [r0, #40]	; 0x28
      message->time_post = time_post;
 800d056:	9b0a      	ldr	r3, [sp, #40]	; 0x28

      if (message == NULL)
        return -1;

      //Fill message
      message->LEDblinker = LEDblinker;
 800d058:	6145      	str	r5, [r0, #20]
      message->ledsMask = ledsMask;
      message->blinkNum = blinkNum;
      message->time_on = time_on;
      message->time_break = time_break;
      message->time_pre = time_pre;
      message->time_post = time_post;
 800d05a:	62c3      	str	r3, [r0, #44]	; 0x2c
      if (message == NULL)
        return -1;

      //Fill message
      message->LEDblinker = LEDblinker;
      message->ledsMask = ledsMask;
 800d05c:	f8c0 9018 	str.w	r9, [r0, #24]
      message->blinkNum = blinkNum;
 800d060:	61c6      	str	r6, [r0, #28]
      message->time_on = time_on;
 800d062:	f8c0 8020 	str.w	r8, [r0, #32]
      Bnum[LEDblinker] = LED_BLINK_STOP;
    }
  else
    {
      //Allocate resources for data transfer
      messageLEDData_t *message = dAlloc(sizeof(messageLEDData_t));
 800d066:	f100 0214 	add.w	r2, r0, #20
 800d06a:	480c      	ldr	r0, [pc, #48]	; (800d09c <LEDblink+0x78>)
 800d06c:	01ad      	lsls	r5, r5, #6
      message->blinkNum = blinkNum;
      message->time_on = time_on;
      message->time_break = time_break;
      message->time_pre = time_pre;
      message->time_post = time_post;
      message->loop = loop?LOOP_COUNT(LEDblinker):LOOP_COUNT(LEDblinker)-1;
 800d06e:	1943      	adds	r3, r0, r5
 800d070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d072:	b907      	cbnz	r7, 800d076 <LEDblink+0x52>
 800d074:	3b01      	subs	r3, #1
 800d076:	6323      	str	r3, [r4, #48]	; 0x30

      //Send the message to communicator
      if (moduleSendCommand(&module[LEDblinker], CMD_LED_BLINK, message) < 0)
 800d078:	2100      	movs	r1, #0
 800d07a:	4428      	add	r0, r5
 800d07c:	f7fe f9a8 	bl	800b3d0 <moduleSendCommand>
 800d080:	2800      	cmp	r0, #0
 800d082:	da06      	bge.n	800d092 <LEDblink+0x6e>
        {
          //Sending failed
          //Free allocated resources
          dFree(message);
 800d084:	4620      	mov	r0, r4
 800d086:	f008 f9d3 	bl	8015430 <bFree>
          return -1;
 800d08a:	f04f 30ff 	mov.w	r0, #4294967295
 800d08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        }
    }
  return 0;
 800d092:	2000      	movs	r0, #0
}
 800d094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d098:	10002ce4 	.word	0x10002ce4
 800d09c:	10001f98 	.word	0x10001f98

0800d0a0 <LEDset>:
  uint32_t ledsMaskOff;
} messageLEDSetData_t;
static int Bnum[LED_BLINKER_NUM];
int LEDset(int LEDblinker, uint32_t ledsMaskOn, uint32_t ledsMaskOff)
{
  if (LEDblinker >= LED_BLINKER_NUM)
 800d0a0:	2801      	cmp	r0, #1
  uint32_t ledsMaskOn;
  uint32_t ledsMaskOff;
} messageLEDSetData_t;
static int Bnum[LED_BLINKER_NUM];
int LEDset(int LEDblinker, uint32_t ledsMaskOn, uint32_t ledsMaskOff)
{
 800d0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a4:	4605      	mov	r5, r0
 800d0a6:	460f      	mov	r7, r1
 800d0a8:	4616      	mov	r6, r2
  if (LEDblinker >= LED_BLINKER_NUM)
 800d0aa:	dc18      	bgt.n	800d0de <LEDset+0x3e>
    return -1;

  //Nothing to set
  if(ledsMaskOn == 0 && ledsMaskOff == 0)
 800d0ac:	b911      	cbnz	r1, 800d0b4 <LEDset+0x14>
 800d0ae:	b90a      	cbnz	r2, 800d0b4 <LEDset+0x14>
    return 0;
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  //Allocate resources for data transfer
  messageLEDSetData_t *message = dAlloc(sizeof(messageLEDSetData_t));
 800d0b4:	200c      	movs	r0, #12
 800d0b6:	f007 ff61 	bl	8014f7c <bAlloc>
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	b178      	cbz	r0, 800d0de <LEDset+0x3e>

  if (message == NULL)
    return -1;

  //Fill message
  message->LEDblinker = LEDblinker;
 800d0be:	6145      	str	r5, [r0, #20]
  message->ledsMaskOn = ledsMaskOn;
 800d0c0:	6187      	str	r7, [r0, #24]
  message->ledsMaskOff = ledsMaskOff;
 800d0c2:	61c6      	str	r6, [r0, #28]

  //Send the message to communicator
  if (moduleSendCommand(&module[LEDblinker], CMD_LED_SET, message) < 0)
 800d0c4:	f100 0214 	add.w	r2, r0, #20
 800d0c8:	4806      	ldr	r0, [pc, #24]	; (800d0e4 <LEDset+0x44>)
 800d0ca:	2101      	movs	r1, #1
 800d0cc:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800d0d0:	f7fe f97e 	bl	800b3d0 <moduleSendCommand>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	daeb      	bge.n	800d0b0 <LEDset+0x10>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f008 f9a9 	bl	8015430 <bFree>
      return -1;
 800d0de:	f04f 30ff 	mov.w	r0, #4294967295
    }
  return 0;
}
 800d0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e4:	10001f98 	.word	0x10001f98

0800d0e8 <LEDSset>:

void LEDSset(uint32_t ledsMaskOn, uint32_t ledsMaskOff)
{
 800d0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0ec:	4d19      	ldr	r5, [pc, #100]	; (800d154 <LEDSset+0x6c>)
      else if(ledsMaskOn & 1)value = 1;
      if (value >= 0)
        {
          if(leds[LEDNum].pin)
            GPIO_WriteBit(leds[LEDNum].gpio, leds[LEDNum].pin, leds[LEDNum].invertPolarity ? !value : value);
          if(LED_print)
 800d0ee:	f8df a068 	ldr.w	sl, [pc, #104]	; 800d158 <LEDSset+0x70>
    }
  return 0;
}

void LEDSset(uint32_t ledsMaskOn, uint32_t ledsMaskOff)
{
 800d0f2:	4607      	mov	r7, r0
 800d0f4:	4688      	mov	r8, r1
  int LEDNum = 0;
 800d0f6:	2400      	movs	r4, #0
 800d0f8:	46a9      	mov	r9, r5
  while ((ledsMaskOn || ledsMaskOff) && LEDNum < LEDS_NUM)
 800d0fa:	b917      	cbnz	r7, 800d102 <LEDSset+0x1a>
 800d0fc:	f1b8 0f00 	cmp.w	r8, #0
 800d100:	d025      	beq.n	800d14e <LEDSset+0x66>
 800d102:	2c06      	cmp	r4, #6
 800d104:	d01d      	beq.n	800d142 <LEDSset+0x5a>
    {
      int value  = -1;
      if(ledsMaskOff & 1)value = 0;
 800d106:	f018 0f01 	tst.w	r8, #1
 800d10a:	d102      	bne.n	800d112 <LEDSset+0x2a>
      else if(ledsMaskOn & 1)value = 1;
 800d10c:	07fb      	lsls	r3, r7, #31
 800d10e:	d41a      	bmi.n	800d146 <LEDSset+0x5e>
 800d110:	e011      	b.n	800d136 <LEDSset+0x4e>
{
  int LEDNum = 0;
  while ((ledsMaskOn || ledsMaskOff) && LEDNum < LEDS_NUM)
    {
      int value  = -1;
      if(ledsMaskOff & 1)value = 0;
 800d112:	2600      	movs	r6, #0
      else if(ledsMaskOn & 1)value = 1;
      if (value >= 0)
        {
          if(leds[LEDNum].pin)
 800d114:	88a9      	ldrh	r1, [r5, #4]
 800d116:	b139      	cbz	r1, 800d128 <LEDSset+0x40>
            GPIO_WriteBit(leds[LEDNum].gpio, leds[LEDNum].pin, leds[LEDNum].invertPolarity ? !value : value);
 800d118:	79ab      	ldrb	r3, [r5, #6]
 800d11a:	f859 0034 	ldr.w	r0, [r9, r4, lsl #3]
 800d11e:	b1a3      	cbz	r3, 800d14a <LEDSset+0x62>
 800d120:	f086 0201 	eor.w	r2, r6, #1
 800d124:	f003 fba8 	bl	8010878 <GPIO_WriteBit>
          if(LED_print)
 800d128:	f1ba 0f00 	cmp.w	sl, #0
 800d12c:	d003      	beq.n	800d136 <LEDSset+0x4e>
            LED_print(LEDNum, value);
 800d12e:	4631      	mov	r1, r6
 800d130:	4620      	mov	r0, r4
 800d132:	f000 ff51 	bl	800dfd8 <LED_print>
        }
      LEDNum++;
 800d136:	3401      	adds	r4, #1
      ledsMaskOn >>= 1;
 800d138:	087f      	lsrs	r7, r7, #1
      ledsMaskOff >>= 1;
 800d13a:	ea4f 0858 	mov.w	r8, r8, lsr #1
 800d13e:	3508      	adds	r5, #8
 800d140:	e7db      	b.n	800d0fa <LEDSset+0x12>
 800d142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  int LEDNum = 0;
  while ((ledsMaskOn || ledsMaskOff) && LEDNum < LEDS_NUM)
    {
      int value  = -1;
      if(ledsMaskOff & 1)value = 0;
      else if(ledsMaskOn & 1)value = 1;
 800d146:	2601      	movs	r6, #1
 800d148:	e7e4      	b.n	800d114 <LEDSset+0x2c>
      if (value >= 0)
        {
          if(leds[LEDNum].pin)
            GPIO_WriteBit(leds[LEDNum].gpio, leds[LEDNum].pin, leds[LEDNum].invertPolarity ? !value : value);
 800d14a:	b2f2      	uxtb	r2, r6
 800d14c:	e7ea      	b.n	800d124 <LEDSset+0x3c>
 800d14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d152:	bf00      	nop
 800d154:	10002308 	.word	0x10002308
 800d158:	0800dfd9 	.word	0x0800dfd9

0800d15c <LEDInit>:
#endif
}

static uint32_t ledsState = 0;
void LEDInit(void)
{
 800d15c:	b510      	push	{r4, lr}
  //Initialize LED blinker
  LEDSset(0, ~0);
 800d15e:	f04f 31ff 	mov.w	r1, #4294967295
  ledsState = 0;
  int blinker;
  for (blinker = 0; blinker < LED_BLINKER_NUM; blinker++)
    {
      moduleInit(&(module[blinker]));
 800d162:	4c08      	ldr	r4, [pc, #32]	; (800d184 <LEDInit+0x28>)

static uint32_t ledsState = 0;
void LEDInit(void)
{
  //Initialize LED blinker
  LEDSset(0, ~0);
 800d164:	2000      	movs	r0, #0
 800d166:	f7ff ffbf 	bl	800d0e8 <LEDSset>
  ledsState = 0;
 800d16a:	4b07      	ldr	r3, [pc, #28]	; (800d188 <LEDInit+0x2c>)
  int blinker;
  for (blinker = 0; blinker < LED_BLINKER_NUM; blinker++)
    {
      moduleInit(&(module[blinker]));
 800d16c:	4620      	mov	r0, r4
static uint32_t ledsState = 0;
void LEDInit(void)
{
  //Initialize LED blinker
  LEDSset(0, ~0);
  ledsState = 0;
 800d16e:	2200      	movs	r2, #0
 800d170:	609a      	str	r2, [r3, #8]
  int blinker;
  for (blinker = 0; blinker < LED_BLINKER_NUM; blinker++)
    {
      moduleInit(&(module[blinker]));
 800d172:	f7fe f981 	bl	800b478 <moduleInit>
 800d176:	f104 0040 	add.w	r0, r4, #64	; 0x40
    }
}
 800d17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LEDSset(0, ~0);
  ledsState = 0;
  int blinker;
  for (blinker = 0; blinker < LED_BLINKER_NUM; blinker++)
    {
      moduleInit(&(module[blinker]));
 800d17e:	f7fe b97b 	b.w	800b478 <moduleInit>
 800d182:	bf00      	nop
 800d184:	10001f98 	.word	0x10001f98
 800d188:	10002ce4 	.word	0x10002ce4

0800d18c <ledSet>:
      return;//Sending ok
  dFree(message);
}

static void ledSet(void *data)
{
 800d18c:	b510      	push	{r4, lr}
 800d18e:	4604      	mov	r4, r0
  messageLEDSetData_t *message = data;

  LEDSset(message->ledsMaskOn, message->ledsMaskOff);
 800d190:	6881      	ldr	r1, [r0, #8]
 800d192:	6840      	ldr	r0, [r0, #4]
 800d194:	f7ff ffa8 	bl	800d0e8 <LEDSset>
  ledsState &= ~message->ledsMaskOff;
  ledsState |= message->ledsMaskOn;
 800d198:	4906      	ldr	r1, [pc, #24]	; (800d1b4 <ledSet+0x28>)
 800d19a:	68a2      	ldr	r2, [r4, #8]
 800d19c:	688b      	ldr	r3, [r1, #8]
 800d19e:	ea23 0202 	bic.w	r2, r3, r2
 800d1a2:	6863      	ldr	r3, [r4, #4]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	608b      	str	r3, [r1, #8]
  dFree(message);
 800d1a8:	f1a4 0014 	sub.w	r0, r4, #20
}
 800d1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  messageLEDSetData_t *message = data;

  LEDSset(message->ledsMaskOn, message->ledsMaskOff);
  ledsState &= ~message->ledsMaskOff;
  ledsState |= message->ledsMaskOn;
  dFree(message);
 800d1b0:	f008 b93e 	b.w	8015430 <bFree>
 800d1b4:	10002ce4 	.word	0x10002ce4

0800d1b8 <ledBlink>:
      ledsMaskOff >>= 1;
    }
}

static void ledBlink(void *data)
{
 800d1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1bc:	4604      	mov	r4, r0
  messageLEDData_t *message = data;

  //Pre blink
  LEDSset(0, message->ledsMask);
 800d1be:	6841      	ldr	r1, [r0, #4]
  vTaskDelay(message->time_pre);

  //Blink
  int *num = &Bnum[message->LEDblinker];
  *num = message->blinkNum;
 800d1c0:	4e26      	ldr	r6, [pc, #152]	; (800d25c <ledBlink+0xa4>)
static void ledBlink(void *data)
{
  messageLEDData_t *message = data;

  //Pre blink
  LEDSset(0, message->ledsMask);
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	f7ff ff90 	bl	800d0e8 <LEDSset>
  vTaskDelay(message->time_pre);
 800d1c8:	6960      	ldr	r0, [r4, #20]
 800d1ca:	f7fd fc9d 	bl	800ab08 <vTaskDelay>

  //Blink
  int *num = &Bnum[message->LEDblinker];
 800d1ce:	6827      	ldr	r7, [r4, #0]
  *num = message->blinkNum;
 800d1d0:	68a3      	ldr	r3, [r4, #8]
 800d1d2:	f846 3027 	str.w	r3, [r6, r7, lsl #2]

  while (*num)
 800d1d6:	46b0      	mov	r8, r6
      if (*num != LED_BLINK_INFINITY)
        {
          if (*num != LED_BLINK_STOP)
            (*num)--;
          else
            *num = 0;
 800d1d8:	f04f 0900 	mov.w	r9, #0

  //Blink
  int *num = &Bnum[message->LEDblinker];
  *num = message->blinkNum;

  while (*num)
 800d1dc:	f856 5027 	ldr.w	r5, [r6, r7, lsl #2]
 800d1e0:	b1e5      	cbz	r5, 800d21c <ledBlink+0x64>
    {
      if (*num != LED_BLINK_INFINITY)
 800d1e2:	1caa      	adds	r2, r5, #2
 800d1e4:	d007      	beq.n	800d1f6 <ledBlink+0x3e>
        {
          if (*num != LED_BLINK_STOP)
 800d1e6:	1c6b      	adds	r3, r5, #1
            (*num)--;
 800d1e8:	bf1a      	itte	ne
 800d1ea:	f105 35ff 	addne.w	r5, r5, #4294967295
 800d1ee:	f848 5027 	strne.w	r5, [r8, r7, lsl #2]
          else
            *num = 0;
 800d1f2:	f848 9027 	streq.w	r9, [r8, r7, lsl #2]
        }

      LEDSset(message->ledsMask, 0);
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	6860      	ldr	r0, [r4, #4]
 800d1fa:	f7ff ff75 	bl	800d0e8 <LEDSset>
      vTaskDelay(message->time_on);
 800d1fe:	68e0      	ldr	r0, [r4, #12]
 800d200:	f7fd fc82 	bl	800ab08 <vTaskDelay>
      LEDSset(0, message->ledsMask);
 800d204:	6861      	ldr	r1, [r4, #4]
 800d206:	2000      	movs	r0, #0
 800d208:	f7ff ff6e 	bl	800d0e8 <LEDSset>
      //For last blink do not wait for time_break
      if (*num != 0)
 800d20c:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d0e3      	beq.n	800d1dc <ledBlink+0x24>
        vTaskDelay(message->time_break);
 800d214:	6920      	ldr	r0, [r4, #16]
 800d216:	f7fd fc77 	bl	800ab08 <vTaskDelay>
 800d21a:	e7df      	b.n	800d1dc <ledBlink+0x24>
    }
  vTaskDelay(message->time_post);
 800d21c:	69a0      	ldr	r0, [r4, #24]
 800d21e:	f7fd fc73 	bl	800ab08 <vTaskDelay>
  LEDSset(message->ledsMask & ledsState, 0);
 800d222:	4b0e      	ldr	r3, [pc, #56]	; (800d25c <ledBlink+0xa4>)
 800d224:	6860      	ldr	r0, [r4, #4]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	4629      	mov	r1, r5
 800d22a:	4018      	ands	r0, r3
 800d22c:	f7ff ff5c 	bl	800d0e8 <LEDSset>

  if(message->loop == LOOP_COUNT(message->LEDblinker))
 800d230:	4b0b      	ldr	r3, [pc, #44]	; (800d260 <ledBlink+0xa8>)
 800d232:	6820      	ldr	r0, [r4, #0]
 800d234:	eb03 1080 	add.w	r0, r3, r0, lsl #6
 800d238:	69e3      	ldr	r3, [r4, #28]
 800d23a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d005      	beq.n	800d24c <ledBlink+0x94>
    if (moduleSendCommand(&module[message->LEDblinker], CMD_LED_BLINK, message) >= 0)
      return;//Sending ok
  dFree(message);
 800d240:	f1a4 0014 	sub.w	r0, r4, #20
}
 800d244:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LEDSset(message->ledsMask & ledsState, 0);

  if(message->loop == LOOP_COUNT(message->LEDblinker))
    if (moduleSendCommand(&module[message->LEDblinker], CMD_LED_BLINK, message) >= 0)
      return;//Sending ok
  dFree(message);
 800d248:	f008 b8f2 	b.w	8015430 <bFree>
    }
  vTaskDelay(message->time_post);
  LEDSset(message->ledsMask & ledsState, 0);

  if(message->loop == LOOP_COUNT(message->LEDblinker))
    if (moduleSendCommand(&module[message->LEDblinker], CMD_LED_BLINK, message) >= 0)
 800d24c:	4622      	mov	r2, r4
 800d24e:	4629      	mov	r1, r5
 800d250:	f7fe f8be 	bl	800b3d0 <moduleSendCommand>
 800d254:	2800      	cmp	r0, #0
 800d256:	dbf3      	blt.n	800d240 <ledBlink+0x88>
      return;//Sending ok
  dFree(message);
}
 800d258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d25c:	10002ce4 	.word	0x10002ce4
 800d260:	10001f98 	.word	0x10001f98

0800d264 <spiIRQEnable>:
#include <hwCommunicatorUARThelper.h>

static int spiNoIRQ = 0;
void spiIRQEnable(int enable)
{
  spiNoIRQ = !enable;
 800d264:	fab0 f080 	clz	r0, r0
 800d268:	4b01      	ldr	r3, [pc, #4]	; (800d270 <spiIRQEnable+0xc>)
 800d26a:	0940      	lsrs	r0, r0, #5
 800d26c:	6018      	str	r0, [r3, #0]
 800d26e:	4770      	bx	lr
 800d270:	10002cf0 	.word	0x10002cf0

0800d274 <txSPI>:
}
void __attribute__((optimize("-O3")))txSPI(void *spi, uint8_t txByte)
{
 800d274:	b570      	push	{r4, r5, r6, lr}
 800d276:	460d      	mov	r5, r1
 800d278:	b082      	sub	sp, #8
 800d27a:	4604      	mov	r4, r0
  //  while (SPI_I2S_GetFlagStatus(spi, SPI_FLAG_BSY) != RESET);
  //Discard old data
  (void)SPI_I2S_ReceiveData(spi);
 800d27c:	f004 fafa 	bl	8011874 <SPI_I2S_ReceiveData>
  SPI_I2S_SendData(spi, txByte);
 800d280:	4629      	mov	r1, r5
 800d282:	4620      	mov	r0, r4
 800d284:	f004 fb20 	bl	80118c8 <SPI_I2S_SendData>
  if(!spiNoIRQ)
 800d288:	4b17      	ldr	r3, [pc, #92]	; (800d2e8 <txSPI+0x74>)
 800d28a:	681d      	ldr	r5, [r3, #0]
 800d28c:	b13d      	cbz	r5, 800d29e <txSPI+0x2a>
        {
          SPI_I2S_ITConfig(spi, SPI_I2S_IT_TXE, ENABLE);
          massert(xSemaphoreTake(spiData[spiNum].xSemaphore, portMAX_DELAY ) == pdTRUE );
        }
    }
  while (SPI_I2S_GetFlagStatus(spi, SPI_FLAG_TXE) == RESET);
 800d28e:	2102      	movs	r1, #2
 800d290:	4620      	mov	r0, r4
 800d292:	f004 fbd9 	bl	8011a48 <SPI_I2S_GetFlagStatus>
 800d296:	2800      	cmp	r0, #0
 800d298:	d0f9      	beq.n	800d28e <txSPI+0x1a>
}
 800d29a:	b002      	add	sp, #8
 800d29c:	bd70      	pop	{r4, r5, r6, pc}
  //Discard old data
  (void)SPI_I2S_ReceiveData(spi);
  SPI_I2S_SendData(spi, txByte);
  if(!spiNoIRQ)
    {
      int spiNum = spiToSpiNum(spi);
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f001 f902 	bl	800e4a8 <spiToSpiNum>
      if (spiNum != -1)
 800d2a4:	1c43      	adds	r3, r0, #1
  //Discard old data
  (void)SPI_I2S_ReceiveData(spi);
  SPI_I2S_SendData(spi, txByte);
  if(!spiNoIRQ)
    {
      int spiNum = spiToSpiNum(spi);
 800d2a6:	4606      	mov	r6, r0
      if (spiNum != -1)
 800d2a8:	d0f1      	beq.n	800d28e <txSPI+0x1a>
        {
          SPI_I2S_ITConfig(spi, SPI_I2S_IT_TXE, ENABLE);
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	2171      	movs	r1, #113	; 0x71
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f004 fb7c 	bl	80119ac <SPI_I2S_ITConfig>
          massert(xSemaphoreTake(spiData[spiNum].xSemaphore, portMAX_DELAY ) == pdTRUE );
 800d2b4:	4b0d      	ldr	r3, [pc, #52]	; (800d2ec <txSPI+0x78>)
 800d2b6:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800d2ba:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800d2be:	4629      	mov	r1, r5
 800d2c0:	462b      	mov	r3, r5
 800d2c2:	69b0      	ldr	r0, [r6, #24]
 800d2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c8:	f7fd ffaa 	bl	800b220 <xQueueGenericReceive>
 800d2cc:	2801      	cmp	r0, #1
 800d2ce:	d0de      	beq.n	800d28e <txSPI+0x1a>
 800d2d0:	4b07      	ldr	r3, [pc, #28]	; (800d2f0 <txSPI+0x7c>)
 800d2d2:	4908      	ldr	r1, [pc, #32]	; (800d2f4 <txSPI+0x80>)
 800d2d4:	4808      	ldr	r0, [pc, #32]	; (800d2f8 <txSPI+0x84>)
 800d2d6:	2224      	movs	r2, #36	; 0x24
 800d2d8:	f7fb fca6 	bl	8008c28 <xprintf>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	9301      	str	r3, [sp, #4]
 800d2e0:	9b01      	ldr	r3, [sp, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1fc      	bne.n	800d2e0 <txSPI+0x6c>
 800d2e6:	e7d2      	b.n	800d28e <txSPI+0x1a>
 800d2e8:	10002cf0 	.word	0x10002cf0
 800d2ec:	1000201c 	.word	0x1000201c
 800d2f0:	0803dd90 	.word	0x0803dd90
 800d2f4:	0803dd68 	.word	0x0803dd68
 800d2f8:	0803ddd8 	.word	0x0803ddd8

0800d2fc <rxSPI>:
        }
    }
  while (SPI_I2S_GetFlagStatus(spi, SPI_FLAG_TXE) == RESET);
}
uint8_t  __attribute__((optimize("-O3")))rxSPI(void *spi)
{
 800d2fc:	b510      	push	{r4, lr}
 800d2fe:	4604      	mov	r4, r0
  while (SPI_I2S_GetFlagStatus(spi, SPI_FLAG_RXNE) == RESET);
 800d300:	2101      	movs	r1, #1
 800d302:	4620      	mov	r0, r4
 800d304:	f004 fba0 	bl	8011a48 <SPI_I2S_GetFlagStatus>
 800d308:	2800      	cmp	r0, #0
 800d30a:	d0f9      	beq.n	800d300 <rxSPI+0x4>
  //  while (SPI_I2S_GetFlagStatus(spi, SPI_FLAG_BSY) != RESET);
  return SPI_I2S_ReceiveData(spi);
 800d30c:	4620      	mov	r0, r4
 800d30e:	f004 fab1 	bl	8011874 <SPI_I2S_ReceiveData>
}
 800d312:	b2c0      	uxtb	r0, r0
 800d314:	bd10      	pop	{r4, pc}

0800d316 <readPin>:
  APPLY_MASK(GPIOx->MODER, 3 * mask, GPIO_Mode_OUT * mask);
  GPIO_WriteBit(GPIOx, GPIO_Pin, state);
}

inline uint8_t readPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d316:	b570      	push	{r4, r5, r6, lr}
  uint32_t mask = GPIO_Pin * GPIO_Pin;
 800d318:	fb01 f501 	mul.w	r5, r1, r1
  APPLY_MASK(GPIOx->MODER, 3 * mask, GPIO_Mode_IN * mask);
 800d31c:	006e      	lsls	r6, r5, #1
 800d31e:	6802      	ldr	r2, [r0, #0]
 800d320:	4435      	add	r5, r6
 800d322:	43ed      	mvns	r5, r5
 800d324:	402a      	ands	r2, r5
 800d326:	6002      	str	r2, [r0, #0]
  APPLY_MASK(GPIOx->MODER, 3 * mask, GPIO_Mode_OUT * mask);
  GPIO_WriteBit(GPIOx, GPIO_Pin, state);
}

inline uint8_t readPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d328:	4604      	mov	r4, r0
  uint32_t mask = GPIO_Pin * GPIO_Pin;
  APPLY_MASK(GPIOx->MODER, 3 * mask, GPIO_Mode_IN * mask);
 800d32a:	6803      	ldr	r3, [r0, #0]
 800d32c:	6003      	str	r3, [r0, #0]
  char status = GPIO_ReadInputDataBit(GPIOx, GPIO_Pin);
 800d32e:	f003 fa39 	bl	80107a4 <GPIO_ReadInputDataBit>
  APPLY_MASK(GPIOx->MODER, 3 * mask, GPIO_Mode_AF * mask);
 800d332:	6822      	ldr	r2, [r4, #0]
 800d334:	4015      	ands	r5, r2
 800d336:	6025      	str	r5, [r4, #0]
 800d338:	6823      	ldr	r3, [r4, #0]
 800d33a:	4333      	orrs	r3, r6
 800d33c:	6023      	str	r3, [r4, #0]

  return status;
}
 800d33e:	bd70      	pop	{r4, r5, r6, pc}

0800d340 <printfCommStats>:

static char *bufPtr = NULL;
static int bSize = 0;
static int *bufSize = &bSize;
void printfCommStats(void)
{
 800d340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i=0;
  portNum_t p;
  DPRINTF("Rx");
 800d344:	4c9c      	ldr	r4, [pc, #624]	; (800d5b8 <printfCommStats+0x278>)
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	f241 2287 	movw	r2, #4743	; 0x1287
 800d34c:	4293      	cmp	r3, r2
 800d34e:	dc0b      	bgt.n	800d368 <printfCommStats+0x28>
 800d350:	6860      	ldr	r0, [r4, #4]
 800d352:	499a      	ldr	r1, [pc, #616]	; (800d5bc <printfCommStats+0x27c>)
 800d354:	4418      	add	r0, r3
 800d356:	f7fb fc85 	bl	8008c64 <xsprintf>
 800d35a:	6825      	ldr	r5, [r4, #0]
 800d35c:	6860      	ldr	r0, [r4, #4]
 800d35e:	4428      	add	r0, r5
 800d360:	f00f ff6e 	bl	801d240 <strlen>
 800d364:	4428      	add	r0, r5
 800d366:	6020      	str	r0, [r4, #0]
  for(i = 0; i < MSG_TYPES_QTY; i++)
    {
      if(MSG_TYPES_TAB[i].code != 0)
 800d368:	f8df 9254 	ldr.w	r9, [pc, #596]	; 800d5c0 <printfCommStats+0x280>
        DPRINTF("| %02x", MSG_TYPES_TAB[i].code);
 800d36c:	4e92      	ldr	r6, [pc, #584]	; (800d5b8 <printfCommStats+0x278>)

static char *bufPtr = NULL;
static int bSize = 0;
static int *bufSize = &bSize;
void printfCommStats(void)
{
 800d36e:	2500      	movs	r5, #0
  int i=0;
  portNum_t p;
  DPRINTF("Rx");
  for(i = 0; i < MSG_TYPES_QTY; i++)
    {
      if(MSG_TYPES_TAB[i].code != 0)
 800d370:	237c      	movs	r3, #124	; 0x7c
 800d372:	fb03 9305 	mla	r3, r3, r5, r9
 800d376:	4f92      	ldr	r7, [pc, #584]	; (800d5c0 <printfCommStats+0x280>)
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	b18a      	cbz	r2, 800d3a0 <printfCommStats+0x60>
        DPRINTF("| %02x", MSG_TYPES_TAB[i].code);
 800d37c:	6820      	ldr	r0, [r4, #0]
 800d37e:	f241 2387 	movw	r3, #4743	; 0x1287
 800d382:	4298      	cmp	r0, r3
 800d384:	dc0c      	bgt.n	800d3a0 <printfCommStats+0x60>
 800d386:	6873      	ldr	r3, [r6, #4]
 800d388:	498e      	ldr	r1, [pc, #568]	; (800d5c4 <printfCommStats+0x284>)
 800d38a:	4418      	add	r0, r3
 800d38c:	f7fb fc6a 	bl	8008c64 <xsprintf>
 800d390:	f8d6 8000 	ldr.w	r8, [r6]
 800d394:	6870      	ldr	r0, [r6, #4]
 800d396:	4440      	add	r0, r8
 800d398:	f00f ff52 	bl	801d240 <strlen>
 800d39c:	4440      	add	r0, r8
 800d39e:	6030      	str	r0, [r6, #0]
void printfCommStats(void)
{
  int i=0;
  portNum_t p;
  DPRINTF("Rx");
  for(i = 0; i < MSG_TYPES_QTY; i++)
 800d3a0:	3501      	adds	r5, #1
 800d3a2:	2d1a      	cmp	r5, #26
 800d3a4:	d1e4      	bne.n	800d370 <printfCommStats+0x30>
    {
      if(MSG_TYPES_TAB[i].code != 0)
        DPRINTF("| %02x", MSG_TYPES_TAB[i].code);
    }
  DPRINTF(CLEAR_LINE"|\n");
 800d3a6:	6823      	ldr	r3, [r4, #0]
 800d3a8:	4d83      	ldr	r5, [pc, #524]	; (800d5b8 <printfCommStats+0x278>)
 800d3aa:	f241 2287 	movw	r2, #4743	; 0x1287
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	dc0b      	bgt.n	800d3ca <printfCommStats+0x8a>
 800d3b2:	6868      	ldr	r0, [r5, #4]
 800d3b4:	4984      	ldr	r1, [pc, #528]	; (800d5c8 <printfCommStats+0x288>)
 800d3b6:	4418      	add	r0, r3
 800d3b8:	f7fb fc54 	bl	8008c64 <xsprintf>
 800d3bc:	682e      	ldr	r6, [r5, #0]
 800d3be:	6868      	ldr	r0, [r5, #4]
 800d3c0:	4430      	add	r0, r6
 800d3c2:	f00f ff3d 	bl	801d240 <strlen>
 800d3c6:	4430      	add	r0, r6
 800d3c8:	6028      	str	r0, [r5, #0]
  for(p = 0; p < PORTS_NUM; p++)
    {
      if(portData[p].enabled == 0)
 800d3ca:	f8df a210 	ldr.w	sl, [pc, #528]	; 800d5dc <printfCommStats+0x29c>
        continue;

      DPRINTF(" %d|", p);
 800d3ce:	4d7a      	ldr	r5, [pc, #488]	; (800d5b8 <printfCommStats+0x278>)

static char *bufPtr = NULL;
static int bSize = 0;
static int *bufSize = &bSize;
void printfCommStats(void)
{
 800d3d0:	2600      	movs	r6, #0
        DPRINTF("| %02x", MSG_TYPES_TAB[i].code);
    }
  DPRINTF(CLEAR_LINE"|\n");
  for(p = 0; p < PORTS_NUM; p++)
    {
      if(portData[p].enabled == 0)
 800d3d2:	2350      	movs	r3, #80	; 0x50
 800d3d4:	fb03 a306 	mla	r3, r3, r6, sl
 800d3d8:	f8df 8200 	ldr.w	r8, [pc, #512]	; 800d5dc <printfCommStats+0x29c>
 800d3dc:	7edb      	ldrb	r3, [r3, #27]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d04b      	beq.n	800d47a <printfCommStats+0x13a>
        continue;

      DPRINTF(" %d|", p);
 800d3e2:	6820      	ldr	r0, [r4, #0]
 800d3e4:	f241 2387 	movw	r3, #4743	; 0x1287
 800d3e8:	4298      	cmp	r0, r3
 800d3ea:	dc0d      	bgt.n	800d408 <printfCommStats+0xc8>
 800d3ec:	686b      	ldr	r3, [r5, #4]
 800d3ee:	4977      	ldr	r1, [pc, #476]	; (800d5cc <printfCommStats+0x28c>)
 800d3f0:	4418      	add	r0, r3
 800d3f2:	4632      	mov	r2, r6
 800d3f4:	f7fb fc36 	bl	8008c64 <xsprintf>
 800d3f8:	f8d5 9000 	ldr.w	r9, [r5]
 800d3fc:	6868      	ldr	r0, [r5, #4]
 800d3fe:	4448      	add	r0, r9
 800d400:	f00f ff1e 	bl	801d240 <strlen>
 800d404:	4448      	add	r0, r9
 800d406:	6028      	str	r0, [r5, #0]
      for(i = 0; i < MSG_TYPES_QTY; i++)
        {
          if(MSG_TYPES_TAB[i].code != 0)
 800d408:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 800d5c0 <printfCommStats+0x280>

static char *bufPtr = NULL;
static int bSize = 0;
static int *bufSize = &bSize;
void printfCommStats(void)
{
 800d40c:	f04f 0900 	mov.w	r9, #0
        continue;

      DPRINTF(" %d|", p);
      for(i = 0; i < MSG_TYPES_QTY; i++)
        {
          if(MSG_TYPES_TAB[i].code != 0)
 800d410:	237c      	movs	r3, #124	; 0x7c
 800d412:	fb03 7309 	mla	r3, r3, r9, r7
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	b1c3      	cbz	r3, 800d44c <printfCommStats+0x10c>
            DPRINTF("%3d|", MSG_TYPES_TAB[i].received[p]);
 800d41a:	6820      	ldr	r0, [r4, #0]
 800d41c:	f241 2387 	movw	r3, #4743	; 0x1287
 800d420:	4298      	cmp	r0, r3
 800d422:	dc13      	bgt.n	800d44c <printfCommStats+0x10c>
 800d424:	ebc9 1249 	rsb	r2, r9, r9, lsl #5
 800d428:	4432      	add	r2, r6
 800d42a:	686b      	ldr	r3, [r5, #4]
 800d42c:	4968      	ldr	r1, [pc, #416]	; (800d5d0 <printfCommStats+0x290>)
 800d42e:	320a      	adds	r2, #10
 800d430:	4418      	add	r0, r3
 800d432:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 800d436:	f7fb fc15 	bl	8008c64 <xsprintf>
 800d43a:	682b      	ldr	r3, [r5, #0]
 800d43c:	6868      	ldr	r0, [r5, #4]
 800d43e:	9301      	str	r3, [sp, #4]
 800d440:	4418      	add	r0, r3
 800d442:	f00f fefd 	bl	801d240 <strlen>
 800d446:	9b01      	ldr	r3, [sp, #4]
 800d448:	4418      	add	r0, r3
 800d44a:	6028      	str	r0, [r5, #0]
    {
      if(portData[p].enabled == 0)
        continue;

      DPRINTF(" %d|", p);
      for(i = 0; i < MSG_TYPES_QTY; i++)
 800d44c:	f109 0901 	add.w	r9, r9, #1
 800d450:	f1b9 0f1a 	cmp.w	r9, #26
 800d454:	d1dc      	bne.n	800d410 <printfCommStats+0xd0>
        {
          if(MSG_TYPES_TAB[i].code != 0)
            DPRINTF("%3d|", MSG_TYPES_TAB[i].received[p]);
        }
      DPRINTF(CLEAR_LINE"\n");
 800d456:	6823      	ldr	r3, [r4, #0]
 800d458:	f241 2287 	movw	r2, #4743	; 0x1287
 800d45c:	4293      	cmp	r3, r2
 800d45e:	dc0c      	bgt.n	800d47a <printfCommStats+0x13a>
 800d460:	6868      	ldr	r0, [r5, #4]
 800d462:	495c      	ldr	r1, [pc, #368]	; (800d5d4 <printfCommStats+0x294>)
 800d464:	4418      	add	r0, r3
 800d466:	f7fb fbfd 	bl	8008c64 <xsprintf>
 800d46a:	f8d5 9000 	ldr.w	r9, [r5]
 800d46e:	6868      	ldr	r0, [r5, #4]
 800d470:	4448      	add	r0, r9
 800d472:	f00f fee5 	bl	801d240 <strlen>
 800d476:	4448      	add	r0, r9
 800d478:	6028      	str	r0, [r5, #0]
 800d47a:	3601      	adds	r6, #1
    {
      if(MSG_TYPES_TAB[i].code != 0)
        DPRINTF("| %02x", MSG_TYPES_TAB[i].code);
    }
  DPRINTF(CLEAR_LINE"|\n");
  for(p = 0; p < PORTS_NUM; p++)
 800d47c:	2e09      	cmp	r6, #9
 800d47e:	d1a8      	bne.n	800d3d2 <printfCommStats+0x92>
          if(MSG_TYPES_TAB[i].code != 0)
            DPRINTF("%3d|", MSG_TYPES_TAB[i].received[p]);
        }
      DPRINTF(CLEAR_LINE"\n");
    }
  DPRINTF("Tx");
 800d480:	6823      	ldr	r3, [r4, #0]
 800d482:	4d4d      	ldr	r5, [pc, #308]	; (800d5b8 <printfCommStats+0x278>)
 800d484:	f241 2287 	movw	r2, #4743	; 0x1287
 800d488:	4293      	cmp	r3, r2
 800d48a:	dc0b      	bgt.n	800d4a4 <printfCommStats+0x164>
 800d48c:	6868      	ldr	r0, [r5, #4]
 800d48e:	4952      	ldr	r1, [pc, #328]	; (800d5d8 <printfCommStats+0x298>)
 800d490:	4418      	add	r0, r3
 800d492:	f7fb fbe7 	bl	8008c64 <xsprintf>
 800d496:	682e      	ldr	r6, [r5, #0]
 800d498:	6868      	ldr	r0, [r5, #4]
 800d49a:	4430      	add	r0, r6
 800d49c:	f00f fed0 	bl	801d240 <strlen>
 800d4a0:	4430      	add	r0, r6
 800d4a2:	6028      	str	r0, [r5, #0]
  for(i = 0; i < MSG_TYPES_QTY; i++)
    {
      if(MSG_TYPES_TAB[i].code != 0)
        DPRINTF("| %02x", MSG_TYPES_TAB[i].code);
 800d4a4:	4e44      	ldr	r6, [pc, #272]	; (800d5b8 <printfCommStats+0x278>)

static char *bufPtr = NULL;
static int bSize = 0;
static int *bufSize = &bSize;
void printfCommStats(void)
{
 800d4a6:	2500      	movs	r5, #0
      DPRINTF(CLEAR_LINE"\n");
    }
  DPRINTF("Tx");
  for(i = 0; i < MSG_TYPES_QTY; i++)
    {
      if(MSG_TYPES_TAB[i].code != 0)
 800d4a8:	f04f 0a7c 	mov.w	sl, #124	; 0x7c
 800d4ac:	fb0a 7305 	mla	r3, sl, r5, r7
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	b18a      	cbz	r2, 800d4d8 <printfCommStats+0x198>
        DPRINTF("| %02x", MSG_TYPES_TAB[i].code);
 800d4b4:	6820      	ldr	r0, [r4, #0]
 800d4b6:	f241 2387 	movw	r3, #4743	; 0x1287
 800d4ba:	4298      	cmp	r0, r3
 800d4bc:	dc0c      	bgt.n	800d4d8 <printfCommStats+0x198>
 800d4be:	6873      	ldr	r3, [r6, #4]
 800d4c0:	4940      	ldr	r1, [pc, #256]	; (800d5c4 <printfCommStats+0x284>)
 800d4c2:	4418      	add	r0, r3
 800d4c4:	f7fb fbce 	bl	8008c64 <xsprintf>
 800d4c8:	f8d6 9000 	ldr.w	r9, [r6]
 800d4cc:	6870      	ldr	r0, [r6, #4]
 800d4ce:	4448      	add	r0, r9
 800d4d0:	f00f feb6 	bl	801d240 <strlen>
 800d4d4:	4448      	add	r0, r9
 800d4d6:	6030      	str	r0, [r6, #0]
            DPRINTF("%3d|", MSG_TYPES_TAB[i].received[p]);
        }
      DPRINTF(CLEAR_LINE"\n");
    }
  DPRINTF("Tx");
  for(i = 0; i < MSG_TYPES_QTY; i++)
 800d4d8:	3501      	adds	r5, #1
 800d4da:	2d1a      	cmp	r5, #26
 800d4dc:	d1e6      	bne.n	800d4ac <printfCommStats+0x16c>
    {
      if(MSG_TYPES_TAB[i].code != 0)
        DPRINTF("| %02x", MSG_TYPES_TAB[i].code);
    }
  DPRINTF(CLEAR_LINE"|\n");
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	4d35      	ldr	r5, [pc, #212]	; (800d5b8 <printfCommStats+0x278>)
 800d4e2:	f241 2287 	movw	r2, #4743	; 0x1287
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	dc0b      	bgt.n	800d502 <printfCommStats+0x1c2>
 800d4ea:	6868      	ldr	r0, [r5, #4]
 800d4ec:	4936      	ldr	r1, [pc, #216]	; (800d5c8 <printfCommStats+0x288>)
 800d4ee:	4418      	add	r0, r3
 800d4f0:	f7fb fbb8 	bl	8008c64 <xsprintf>
 800d4f4:	682e      	ldr	r6, [r5, #0]
 800d4f6:	6868      	ldr	r0, [r5, #4]
 800d4f8:	4430      	add	r0, r6
 800d4fa:	f00f fea1 	bl	801d240 <strlen>
 800d4fe:	4430      	add	r0, r6
 800d500:	6028      	str	r0, [r5, #0]
  for(p = 0; p < PORTS_NUM; p++)
    {
      if(portData[p].enabled == 0)
        continue;

      DPRINTF(" %d|", p);
 800d502:	4d2d      	ldr	r5, [pc, #180]	; (800d5b8 <printfCommStats+0x278>)
      for(i = 0; i < MSG_TYPES_QTY; i++)
        {
          if(MSG_TYPES_TAB[i].code != 0)
 800d504:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800d5c0 <printfCommStats+0x280>

static char *bufPtr = NULL;
static int bSize = 0;
static int *bufSize = &bSize;
void printfCommStats(void)
{
 800d508:	2600      	movs	r6, #0
        DPRINTF("| %02x", MSG_TYPES_TAB[i].code);
    }
  DPRINTF(CLEAR_LINE"|\n");
  for(p = 0; p < PORTS_NUM; p++)
    {
      if(portData[p].enabled == 0)
 800d50a:	2350      	movs	r3, #80	; 0x50
 800d50c:	fb03 8306 	mla	r3, r3, r6, r8
 800d510:	7edb      	ldrb	r3, [r3, #27]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d049      	beq.n	800d5aa <printfCommStats+0x26a>
        continue;

      DPRINTF(" %d|", p);
 800d516:	6820      	ldr	r0, [r4, #0]
 800d518:	f241 2387 	movw	r3, #4743	; 0x1287
 800d51c:	4298      	cmp	r0, r3
 800d51e:	dc0d      	bgt.n	800d53c <printfCommStats+0x1fc>
 800d520:	686b      	ldr	r3, [r5, #4]
 800d522:	492a      	ldr	r1, [pc, #168]	; (800d5cc <printfCommStats+0x28c>)
 800d524:	4418      	add	r0, r3
 800d526:	4632      	mov	r2, r6
 800d528:	f7fb fb9c 	bl	8008c64 <xsprintf>
 800d52c:	f8d5 a000 	ldr.w	sl, [r5]
 800d530:	6868      	ldr	r0, [r5, #4]
 800d532:	4450      	add	r0, sl
 800d534:	f00f fe84 	bl	801d240 <strlen>
 800d538:	4450      	add	r0, sl
 800d53a:	6028      	str	r0, [r5, #0]

static char *bufPtr = NULL;
static int bSize = 0;
static int *bufSize = &bSize;
void printfCommStats(void)
{
 800d53c:	f04f 0a00 	mov.w	sl, #0
        continue;

      DPRINTF(" %d|", p);
      for(i = 0; i < MSG_TYPES_QTY; i++)
        {
          if(MSG_TYPES_TAB[i].code != 0)
 800d540:	237c      	movs	r3, #124	; 0x7c
 800d542:	fb03 730a 	mla	r3, r3, sl, r7
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	b1c3      	cbz	r3, 800d57c <printfCommStats+0x23c>
            DPRINTF("%3d|", MSG_TYPES_TAB[i].sent[p]);
 800d54a:	6820      	ldr	r0, [r4, #0]
 800d54c:	f241 2387 	movw	r3, #4743	; 0x1287
 800d550:	4298      	cmp	r0, r3
 800d552:	dc13      	bgt.n	800d57c <printfCommStats+0x23c>
 800d554:	ebca 134a 	rsb	r3, sl, sl, lsl #5
 800d558:	4433      	add	r3, r6
 800d55a:	3312      	adds	r3, #18
 800d55c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d560:	491b      	ldr	r1, [pc, #108]	; (800d5d0 <printfCommStats+0x290>)
 800d562:	685a      	ldr	r2, [r3, #4]
 800d564:	686b      	ldr	r3, [r5, #4]
 800d566:	4418      	add	r0, r3
 800d568:	f7fb fb7c 	bl	8008c64 <xsprintf>
 800d56c:	f8d5 b000 	ldr.w	fp, [r5]
 800d570:	6868      	ldr	r0, [r5, #4]
 800d572:	4458      	add	r0, fp
 800d574:	f00f fe64 	bl	801d240 <strlen>
 800d578:	4458      	add	r0, fp
 800d57a:	6028      	str	r0, [r5, #0]
    {
      if(portData[p].enabled == 0)
        continue;

      DPRINTF(" %d|", p);
      for(i = 0; i < MSG_TYPES_QTY; i++)
 800d57c:	f10a 0a01 	add.w	sl, sl, #1
 800d580:	f1ba 0f1a 	cmp.w	sl, #26
 800d584:	d1dc      	bne.n	800d540 <printfCommStats+0x200>
        {
          if(MSG_TYPES_TAB[i].code != 0)
            DPRINTF("%3d|", MSG_TYPES_TAB[i].sent[p]);
        }
      DPRINTF(CLEAR_LINE"\n");
 800d586:	6823      	ldr	r3, [r4, #0]
 800d588:	f241 2287 	movw	r2, #4743	; 0x1287
 800d58c:	4293      	cmp	r3, r2
 800d58e:	dc0c      	bgt.n	800d5aa <printfCommStats+0x26a>
 800d590:	6868      	ldr	r0, [r5, #4]
 800d592:	4910      	ldr	r1, [pc, #64]	; (800d5d4 <printfCommStats+0x294>)
 800d594:	4418      	add	r0, r3
 800d596:	f7fb fb65 	bl	8008c64 <xsprintf>
 800d59a:	f8d5 a000 	ldr.w	sl, [r5]
 800d59e:	6868      	ldr	r0, [r5, #4]
 800d5a0:	4450      	add	r0, sl
 800d5a2:	f00f fe4d 	bl	801d240 <strlen>
 800d5a6:	4450      	add	r0, sl
 800d5a8:	6028      	str	r0, [r5, #0]
 800d5aa:	3601      	adds	r6, #1
    {
      if(MSG_TYPES_TAB[i].code != 0)
        DPRINTF("| %02x", MSG_TYPES_TAB[i].code);
    }
  DPRINTF(CLEAR_LINE"|\n");
  for(p = 0; p < PORTS_NUM; p++)
 800d5ac:	2e09      	cmp	r6, #9
 800d5ae:	d1ac      	bne.n	800d50a <printfCommStats+0x1ca>
          if(MSG_TYPES_TAB[i].code != 0)
            DPRINTF("%3d|", MSG_TYPES_TAB[i].sent[p]);
        }
      DPRINTF(CLEAR_LINE"\n");
    }
}
 800d5b0:	b003      	add	sp, #12
 800d5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b6:	bf00      	nop
 800d5b8:	10002cf4 	.word	0x10002cf4
 800d5bc:	0803ddfe 	.word	0x0803ddfe
 800d5c0:	10001234 	.word	0x10001234
 800d5c4:	0803de01 	.word	0x0803de01
 800d5c8:	0803e17a 	.word	0x0803e17a
 800d5cc:	0803de08 	.word	0x0803de08
 800d5d0:	0803de0d 	.word	0x0803de0d
 800d5d4:	0803de8a 	.word	0x0803de8a
 800d5d8:	0803de12 	.word	0x0803de12
 800d5dc:	10002038 	.word	0x10002038

0800d5e0 <dTask>:

#ifdef MADO
extern uint32_t usb_stats[10];
#endif
static void dTask(void *pvParameters)
{
 800d5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i = 0;
  while (1)
    {
      if(!cfg.stats)
 800d5e4:	4f14      	ldr	r7, [pc, #80]	; (800d638 <dTask+0x58>)
 800d5e6:	4c15      	ldr	r4, [pc, #84]	; (800d63c <dTask+0x5c>)

#ifdef MADO
extern uint32_t usb_stats[10];
#endif
static void dTask(void *pvParameters)
{
 800d5e8:	b0a1      	sub	sp, #132	; 0x84
  int i = 0;
 800d5ea:	f04f 0900 	mov.w	r9, #0
 800d5ee:	46ba      	mov	sl, r7
  while (1)
    {
      if(!cfg.stats)
 800d5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f2:	b933      	cbnz	r3, 800d602 <dTask+0x22>
        {
          vTaskDelay(100);
 800d5f4:	2064      	movs	r0, #100	; 0x64
 800d5f6:	f7fd fa87 	bl	800ab08 <vTaskDelay>
#ifdef WATCHDOG_DEBUG
          wdogFeed(WATCHDOG_DEBUG());
 800d5fa:	2020      	movs	r0, #32
 800d5fc:	f000 fd22 	bl	800e044 <wdogFeed>
#endif
          continue;
 800d600:	e7f6      	b.n	800d5f0 <dTask+0x10>
        }
#ifdef WATCHDOG_DEBUG
      if(i%10)
 800d602:	230a      	movs	r3, #10
 800d604:	fb99 f2f3 	sdiv	r2, r9, r3
 800d608:	fb03 9312 	mls	r3, r3, r2, r9
 800d60c:	9310      	str	r3, [sp, #64]	; 0x40
 800d60e:	b113      	cbz	r3, 800d616 <dTask+0x36>
        wdogFeed(WATCHDOG_DEBUG());
 800d610:	2020      	movs	r0, #32
 800d612:	f000 fd17 	bl	800e044 <wdogFeed>
#endif

      vTaskDelay(1);
 800d616:	2001      	movs	r0, #1
 800d618:	f7fd fa76 	bl	800ab08 <vTaskDelay>
      if ((i % DISPLAY_INTERVAL) == 0 /* || refresh */)
 800d61c:	f241 3088 	movw	r0, #5000	; 0x1388
 800d620:	fb99 f5f0 	sdiv	r5, r9, r0
 800d624:	fb00 9515 	mls	r5, r0, r5, r9
 800d628:	2d00      	cmp	r5, #0
 800d62a:	f040 843d 	bne.w	800dea8 <dTask+0x8c8>
        {
          bufPtr = dAlloc(DBUFSIZE);
 800d62e:	f007 fca5 	bl	8014f7c <bAlloc>
 800d632:	b128      	cbz	r0, 800d640 <dTask+0x60>
 800d634:	3014      	adds	r0, #20
 800d636:	e004      	b.n	800d642 <dTask+0x62>
 800d638:	10001000 	.word	0x10001000
 800d63c:	10002cf4 	.word	0x10002cf4
 800d640:	4628      	mov	r0, r5
          *bufSize = 0;

          DPRINTF(CUR_SAVE CUR_HOME(1) CLEAR_LINE"\n");
 800d642:	49ad      	ldr	r1, [pc, #692]	; (800d8f8 <dTask+0x318>)
#endif

      vTaskDelay(1);
      if ((i % DISPLAY_INTERVAL) == 0 /* || refresh */)
        {
          bufPtr = dAlloc(DBUFSIZE);
 800d644:	6060      	str	r0, [r4, #4]
          *bufSize = 0;
 800d646:	6025      	str	r5, [r4, #0]

          DPRINTF(CUR_SAVE CUR_HOME(1) CLEAR_LINE"\n");
 800d648:	f7fb fb0c 	bl	8008c64 <xsprintf>
 800d64c:	e894 0060 	ldmia.w	r4, {r5, r6}
 800d650:	1970      	adds	r0, r6, r5
 800d652:	f00f fdf5 	bl	801d240 <strlen>
          DPRINTF("Build time %s %s revision:%s"CLEAR_LINE"\n", __DATE__, __TIME__, VERSION);
 800d656:	f241 2387 	movw	r3, #4743	; 0x1287
      if ((i % DISPLAY_INTERVAL) == 0 /* || refresh */)
        {
          bufPtr = dAlloc(DBUFSIZE);
          *bufSize = 0;

          DPRINTF(CUR_SAVE CUR_HOME(1) CLEAR_LINE"\n");
 800d65a:	4428      	add	r0, r5
          DPRINTF("Build time %s %s revision:%s"CLEAR_LINE"\n", __DATE__, __TIME__, VERSION);
 800d65c:	4298      	cmp	r0, r3
      if ((i % DISPLAY_INTERVAL) == 0 /* || refresh */)
        {
          bufPtr = dAlloc(DBUFSIZE);
          *bufSize = 0;

          DPRINTF(CUR_SAVE CUR_HOME(1) CLEAR_LINE"\n");
 800d65e:	6020      	str	r0, [r4, #0]
 800d660:	4da6      	ldr	r5, [pc, #664]	; (800d8fc <dTask+0x31c>)
          DPRINTF("Build time %s %s revision:%s"CLEAR_LINE"\n", __DATE__, __TIME__, VERSION);
 800d662:	dc0e      	bgt.n	800d682 <dTask+0xa2>
 800d664:	4ba6      	ldr	r3, [pc, #664]	; (800d900 <dTask+0x320>)
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	4430      	add	r0, r6
 800d66a:	4ba6      	ldr	r3, [pc, #664]	; (800d904 <dTask+0x324>)
 800d66c:	4aa6      	ldr	r2, [pc, #664]	; (800d908 <dTask+0x328>)
 800d66e:	49a7      	ldr	r1, [pc, #668]	; (800d90c <dTask+0x32c>)
 800d670:	f7fb faf8 	bl	8008c64 <xsprintf>
 800d674:	6826      	ldr	r6, [r4, #0]
 800d676:	6860      	ldr	r0, [r4, #4]
 800d678:	4430      	add	r0, r6
 800d67a:	f00f fde1 	bl	801d240 <strlen>
 800d67e:	4430      	add	r0, r6
 800d680:	6020      	str	r0, [r4, #0]
          if(cfg.stats&0x01)
 800d682:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800d686:	07db      	lsls	r3, r3, #31
 800d688:	f140 8213 	bpl.w	800dab2 <dTask+0x4d2>
            {
              DPRINTF("heap: allocs:%d frees:%d allocated:%d last alloc size:%d "CLEAR_LINE"\n", heapAllocs, heapFrees, heapAllocated, heapLastSize);
 800d68c:	682e      	ldr	r6, [r5, #0]
 800d68e:	f241 2387 	movw	r3, #4743	; 0x1287
 800d692:	429e      	cmp	r6, r3
 800d694:	dc15      	bgt.n	800d6c2 <dTask+0xe2>
 800d696:	4b9e      	ldr	r3, [pc, #632]	; (800d910 <dTask+0x330>)
 800d698:	6860      	ldr	r0, [r4, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	4b9d      	ldr	r3, [pc, #628]	; (800d914 <dTask+0x334>)
 800d6a0:	4a9d      	ldr	r2, [pc, #628]	; (800d918 <dTask+0x338>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	4b9d      	ldr	r3, [pc, #628]	; (800d91c <dTask+0x33c>)
 800d6a8:	6812      	ldr	r2, [r2, #0]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	499c      	ldr	r1, [pc, #624]	; (800d920 <dTask+0x340>)
 800d6ae:	4430      	add	r0, r6
 800d6b0:	f7fb fad8 	bl	8008c64 <xsprintf>
 800d6b4:	6826      	ldr	r6, [r4, #0]
 800d6b6:	6860      	ldr	r0, [r4, #4]
 800d6b8:	4430      	add	r0, r6
 800d6ba:	f00f fdc1 	bl	801d240 <strlen>
 800d6be:	4430      	add	r0, r6
 800d6c0:	6020      	str	r0, [r4, #0]
              DPRINTF("+----------queue+---count+-dequeue+-enqueue+-----max+----full+---empty+"CLEAR_LINE"\n");
 800d6c2:	682b      	ldr	r3, [r5, #0]
 800d6c4:	f241 2287 	movw	r2, #4743	; 0x1287
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	dc0b      	bgt.n	800d6e4 <dTask+0x104>
 800d6cc:	6860      	ldr	r0, [r4, #4]
 800d6ce:	4995      	ldr	r1, [pc, #596]	; (800d924 <dTask+0x344>)
 800d6d0:	4418      	add	r0, r3
 800d6d2:	f7fb fac7 	bl	8008c64 <xsprintf>
 800d6d6:	6826      	ldr	r6, [r4, #0]
 800d6d8:	6860      	ldr	r0, [r4, #4]
 800d6da:	4430      	add	r0, r6
 800d6dc:	f00f fdb0 	bl	801d240 <strlen>
 800d6e0:	4430      	add	r0, r6
 800d6e2:	6020      	str	r0, [r4, #0]
#ifdef MADO
              QSTAT(inQueueUSB1);
 800d6e4:	682e      	ldr	r6, [r5, #0]
 800d6e6:	f241 2387 	movw	r3, #4743	; 0x1287
 800d6ea:	429e      	cmp	r6, r3
 800d6ec:	dc18      	bgt.n	800d720 <dTask+0x140>
 800d6ee:	4a8e      	ldr	r2, [pc, #568]	; (800d928 <dTask+0x348>)
 800d6f0:	6860      	ldr	r0, [r4, #4]
 800d6f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d6f4:	6893      	ldr	r3, [r2, #8]
 800d6f6:	9104      	str	r1, [sp, #16]
 800d6f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d6fa:	9103      	str	r1, [sp, #12]
 800d6fc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d6fe:	9102      	str	r1, [sp, #8]
 800d700:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d702:	9101      	str	r1, [sp, #4]
 800d704:	6a12      	ldr	r2, [r2, #32]
 800d706:	9200      	str	r2, [sp, #0]
 800d708:	4430      	add	r0, r6
 800d70a:	4a88      	ldr	r2, [pc, #544]	; (800d92c <dTask+0x34c>)
 800d70c:	4988      	ldr	r1, [pc, #544]	; (800d930 <dTask+0x350>)
 800d70e:	f7fb faa9 	bl	8008c64 <xsprintf>
 800d712:	6826      	ldr	r6, [r4, #0]
 800d714:	6860      	ldr	r0, [r4, #4]
 800d716:	4430      	add	r0, r6
 800d718:	f00f fd92 	bl	801d240 <strlen>
 800d71c:	4430      	add	r0, r6
 800d71e:	6020      	str	r0, [r4, #0]
              QSTAT(inQueueUSB2);
 800d720:	682e      	ldr	r6, [r5, #0]
 800d722:	f241 2387 	movw	r3, #4743	; 0x1287
 800d726:	429e      	cmp	r6, r3
 800d728:	dc18      	bgt.n	800d75c <dTask+0x17c>
 800d72a:	4a82      	ldr	r2, [pc, #520]	; (800d934 <dTask+0x354>)
 800d72c:	6860      	ldr	r0, [r4, #4]
 800d72e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d730:	6893      	ldr	r3, [r2, #8]
 800d732:	9104      	str	r1, [sp, #16]
 800d734:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d736:	9103      	str	r1, [sp, #12]
 800d738:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d73a:	9102      	str	r1, [sp, #8]
 800d73c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d73e:	9101      	str	r1, [sp, #4]
 800d740:	6a12      	ldr	r2, [r2, #32]
 800d742:	9200      	str	r2, [sp, #0]
 800d744:	4430      	add	r0, r6
 800d746:	4a7c      	ldr	r2, [pc, #496]	; (800d938 <dTask+0x358>)
 800d748:	4979      	ldr	r1, [pc, #484]	; (800d930 <dTask+0x350>)
 800d74a:	f7fb fa8b 	bl	8008c64 <xsprintf>
 800d74e:	6826      	ldr	r6, [r4, #0]
 800d750:	6860      	ldr	r0, [r4, #4]
 800d752:	4430      	add	r0, r6
 800d754:	f00f fd74 	bl	801d240 <strlen>
 800d758:	4430      	add	r0, r6
 800d75a:	6020      	str	r0, [r4, #0]
              QSTAT(inQueueSPI1);
 800d75c:	682e      	ldr	r6, [r5, #0]
 800d75e:	f241 2387 	movw	r3, #4743	; 0x1287
 800d762:	429e      	cmp	r6, r3
 800d764:	dc18      	bgt.n	800d798 <dTask+0x1b8>
 800d766:	4a75      	ldr	r2, [pc, #468]	; (800d93c <dTask+0x35c>)
 800d768:	6860      	ldr	r0, [r4, #4]
 800d76a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d76c:	6893      	ldr	r3, [r2, #8]
 800d76e:	9104      	str	r1, [sp, #16]
 800d770:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d772:	9103      	str	r1, [sp, #12]
 800d774:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d776:	9102      	str	r1, [sp, #8]
 800d778:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d77a:	9101      	str	r1, [sp, #4]
 800d77c:	6a12      	ldr	r2, [r2, #32]
 800d77e:	9200      	str	r2, [sp, #0]
 800d780:	4430      	add	r0, r6
 800d782:	4a6f      	ldr	r2, [pc, #444]	; (800d940 <dTask+0x360>)
 800d784:	496a      	ldr	r1, [pc, #424]	; (800d930 <dTask+0x350>)
 800d786:	f7fb fa6d 	bl	8008c64 <xsprintf>
 800d78a:	6826      	ldr	r6, [r4, #0]
 800d78c:	6860      	ldr	r0, [r4, #4]
 800d78e:	4430      	add	r0, r6
 800d790:	f00f fd56 	bl	801d240 <strlen>
 800d794:	4430      	add	r0, r6
 800d796:	6020      	str	r0, [r4, #0]
              QSTAT(inQueueSPI2);
 800d798:	682e      	ldr	r6, [r5, #0]
 800d79a:	f241 2387 	movw	r3, #4743	; 0x1287
 800d79e:	429e      	cmp	r6, r3
 800d7a0:	dc18      	bgt.n	800d7d4 <dTask+0x1f4>
 800d7a2:	4a68      	ldr	r2, [pc, #416]	; (800d944 <dTask+0x364>)
 800d7a4:	6860      	ldr	r0, [r4, #4]
 800d7a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d7a8:	6893      	ldr	r3, [r2, #8]
 800d7aa:	9104      	str	r1, [sp, #16]
 800d7ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d7ae:	9103      	str	r1, [sp, #12]
 800d7b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d7b2:	9102      	str	r1, [sp, #8]
 800d7b4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d7b6:	9101      	str	r1, [sp, #4]
 800d7b8:	6a12      	ldr	r2, [r2, #32]
 800d7ba:	9200      	str	r2, [sp, #0]
 800d7bc:	4430      	add	r0, r6
 800d7be:	4a62      	ldr	r2, [pc, #392]	; (800d948 <dTask+0x368>)
 800d7c0:	495b      	ldr	r1, [pc, #364]	; (800d930 <dTask+0x350>)
 800d7c2:	f7fb fa4f 	bl	8008c64 <xsprintf>
 800d7c6:	6826      	ldr	r6, [r4, #0]
 800d7c8:	6860      	ldr	r0, [r4, #4]
 800d7ca:	4430      	add	r0, r6
 800d7cc:	f00f fd38 	bl	801d240 <strlen>
 800d7d0:	4430      	add	r0, r6
 800d7d2:	6020      	str	r0, [r4, #0]
              QSTAT(inQueueI2S);
 800d7d4:	682e      	ldr	r6, [r5, #0]
 800d7d6:	f241 2387 	movw	r3, #4743	; 0x1287
 800d7da:	429e      	cmp	r6, r3
 800d7dc:	dc18      	bgt.n	800d810 <dTask+0x230>
 800d7de:	4a5b      	ldr	r2, [pc, #364]	; (800d94c <dTask+0x36c>)
 800d7e0:	6860      	ldr	r0, [r4, #4]
 800d7e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d7e4:	6893      	ldr	r3, [r2, #8]
 800d7e6:	9104      	str	r1, [sp, #16]
 800d7e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d7ea:	9103      	str	r1, [sp, #12]
 800d7ec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d7ee:	9102      	str	r1, [sp, #8]
 800d7f0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d7f2:	9101      	str	r1, [sp, #4]
 800d7f4:	6a12      	ldr	r2, [r2, #32]
 800d7f6:	9200      	str	r2, [sp, #0]
 800d7f8:	4430      	add	r0, r6
 800d7fa:	4a55      	ldr	r2, [pc, #340]	; (800d950 <dTask+0x370>)
 800d7fc:	494c      	ldr	r1, [pc, #304]	; (800d930 <dTask+0x350>)
 800d7fe:	f7fb fa31 	bl	8008c64 <xsprintf>
 800d802:	6826      	ldr	r6, [r4, #0]
 800d804:	6860      	ldr	r0, [r4, #4]
 800d806:	4430      	add	r0, r6
 800d808:	f00f fd1a 	bl	801d240 <strlen>
 800d80c:	4430      	add	r0, r6
 800d80e:	6020      	str	r0, [r4, #0]
              QSTAT(inQueueTest);
 800d810:	682e      	ldr	r6, [r5, #0]
 800d812:	f241 2387 	movw	r3, #4743	; 0x1287
 800d816:	429e      	cmp	r6, r3
 800d818:	dc18      	bgt.n	800d84c <dTask+0x26c>
 800d81a:	4a4e      	ldr	r2, [pc, #312]	; (800d954 <dTask+0x374>)
 800d81c:	6860      	ldr	r0, [r4, #4]
 800d81e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d820:	6893      	ldr	r3, [r2, #8]
 800d822:	9104      	str	r1, [sp, #16]
 800d824:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d826:	9103      	str	r1, [sp, #12]
 800d828:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d82a:	9102      	str	r1, [sp, #8]
 800d82c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d82e:	9101      	str	r1, [sp, #4]
 800d830:	6a12      	ldr	r2, [r2, #32]
 800d832:	9200      	str	r2, [sp, #0]
 800d834:	4430      	add	r0, r6
 800d836:	4a48      	ldr	r2, [pc, #288]	; (800d958 <dTask+0x378>)
 800d838:	493d      	ldr	r1, [pc, #244]	; (800d930 <dTask+0x350>)
 800d83a:	f7fb fa13 	bl	8008c64 <xsprintf>
 800d83e:	6826      	ldr	r6, [r4, #0]
 800d840:	6860      	ldr	r0, [r4, #4]
 800d842:	4430      	add	r0, r6
 800d844:	f00f fcfc 	bl	801d240 <strlen>
 800d848:	4430      	add	r0, r6
 800d84a:	6020      	str	r0, [r4, #0]
              QSTAT(outQueueSAI1);
 800d84c:	682e      	ldr	r6, [r5, #0]
 800d84e:	f241 2387 	movw	r3, #4743	; 0x1287
 800d852:	429e      	cmp	r6, r3
 800d854:	dc18      	bgt.n	800d888 <dTask+0x2a8>
 800d856:	4a41      	ldr	r2, [pc, #260]	; (800d95c <dTask+0x37c>)
 800d858:	6860      	ldr	r0, [r4, #4]
 800d85a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d85c:	6893      	ldr	r3, [r2, #8]
 800d85e:	9104      	str	r1, [sp, #16]
 800d860:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d862:	9103      	str	r1, [sp, #12]
 800d864:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d866:	9102      	str	r1, [sp, #8]
 800d868:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d86a:	9101      	str	r1, [sp, #4]
 800d86c:	6a12      	ldr	r2, [r2, #32]
 800d86e:	9200      	str	r2, [sp, #0]
 800d870:	4430      	add	r0, r6
 800d872:	4a3b      	ldr	r2, [pc, #236]	; (800d960 <dTask+0x380>)
 800d874:	492e      	ldr	r1, [pc, #184]	; (800d930 <dTask+0x350>)
 800d876:	f7fb f9f5 	bl	8008c64 <xsprintf>
 800d87a:	6826      	ldr	r6, [r4, #0]
 800d87c:	6860      	ldr	r0, [r4, #4]
 800d87e:	4430      	add	r0, r6
 800d880:	f00f fcde 	bl	801d240 <strlen>
 800d884:	4430      	add	r0, r6
 800d886:	6020      	str	r0, [r4, #0]
              QSTAT(outQueueSAI2);
 800d888:	682e      	ldr	r6, [r5, #0]
 800d88a:	f241 2387 	movw	r3, #4743	; 0x1287
 800d88e:	429e      	cmp	r6, r3
 800d890:	dc18      	bgt.n	800d8c4 <dTask+0x2e4>
 800d892:	4a34      	ldr	r2, [pc, #208]	; (800d964 <dTask+0x384>)
 800d894:	6860      	ldr	r0, [r4, #4]
 800d896:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d898:	6893      	ldr	r3, [r2, #8]
 800d89a:	9104      	str	r1, [sp, #16]
 800d89c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d89e:	9103      	str	r1, [sp, #12]
 800d8a0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d8a2:	9102      	str	r1, [sp, #8]
 800d8a4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d8a6:	9101      	str	r1, [sp, #4]
 800d8a8:	6a12      	ldr	r2, [r2, #32]
 800d8aa:	9200      	str	r2, [sp, #0]
 800d8ac:	4430      	add	r0, r6
 800d8ae:	4a2e      	ldr	r2, [pc, #184]	; (800d968 <dTask+0x388>)
 800d8b0:	491f      	ldr	r1, [pc, #124]	; (800d930 <dTask+0x350>)
 800d8b2:	f7fb f9d7 	bl	8008c64 <xsprintf>
 800d8b6:	6826      	ldr	r6, [r4, #0]
 800d8b8:	6860      	ldr	r0, [r4, #4]
 800d8ba:	4430      	add	r0, r6
 800d8bc:	f00f fcc0 	bl	801d240 <strlen>
 800d8c0:	4430      	add	r0, r6
 800d8c2:	6020      	str	r0, [r4, #0]
              DPRINTF("+---------------+--------+--------+--------+--------+--------+--------+"CLEAR_LINE"\n");
 800d8c4:	682b      	ldr	r3, [r5, #0]
 800d8c6:	f241 2287 	movw	r2, #4743	; 0x1287
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	dc0b      	bgt.n	800d8e6 <dTask+0x306>
 800d8ce:	6860      	ldr	r0, [r4, #4]
 800d8d0:	4926      	ldr	r1, [pc, #152]	; (800d96c <dTask+0x38c>)
 800d8d2:	4418      	add	r0, r3
 800d8d4:	f7fb f9c6 	bl	8008c64 <xsprintf>
 800d8d8:	6826      	ldr	r6, [r4, #0]
 800d8da:	6860      	ldr	r0, [r4, #4]
 800d8dc:	4430      	add	r0, r6
 800d8de:	f00f fcaf 	bl	801d240 <strlen>
 800d8e2:	4430      	add	r0, r6
 800d8e4:	6020      	str	r0, [r4, #0]
#endif
              QSTAT(heap_1_32);
 800d8e6:	682e      	ldr	r6, [r5, #0]
 800d8e8:	f241 2387 	movw	r3, #4743	; 0x1287
 800d8ec:	429e      	cmp	r6, r3
 800d8ee:	dc57      	bgt.n	800d9a0 <dTask+0x3c0>
 800d8f0:	4a1f      	ldr	r2, [pc, #124]	; (800d970 <dTask+0x390>)
 800d8f2:	6860      	ldr	r0, [r4, #4]
 800d8f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d8f6:	e03d      	b.n	800d974 <dTask+0x394>
 800d8f8:	0803de8a 	.word	0x0803de8a
 800d8fc:	10002cf4 	.word	0x10002cf4
 800d900:	0803de48 	.word	0x0803de48
 800d904:	0803de15 	.word	0x0803de15
 800d908:	0803de1e 	.word	0x0803de1e
 800d90c:	0803de2a 	.word	0x0803de2a
 800d910:	10002d90 	.word	0x10002d90
 800d914:	10002d98 	.word	0x10002d98
 800d918:	10002d94 	.word	0x10002d94
 800d91c:	10002d9c 	.word	0x10002d9c
 800d920:	0803de51 	.word	0x0803de51
 800d924:	0803de8c 	.word	0x0803de8c
 800d928:	10002644 	.word	0x10002644
 800d92c:	0803ded5 	.word	0x0803ded5
 800d930:	0803dee1 	.word	0x0803dee1
 800d934:	10002678 	.word	0x10002678
 800d938:	0803df01 	.word	0x0803df01
 800d93c:	100026ac 	.word	0x100026ac
 800d940:	0803df0d 	.word	0x0803df0d
 800d944:	100026e0 	.word	0x100026e0
 800d948:	0803df19 	.word	0x0803df19
 800d94c:	10002714 	.word	0x10002714
 800d950:	0803df25 	.word	0x0803df25
 800d954:	10002748 	.word	0x10002748
 800d958:	0803df30 	.word	0x0803df30
 800d95c:	100025dc 	.word	0x100025dc
 800d960:	0803df3c 	.word	0x0803df3c
 800d964:	10002610 	.word	0x10002610
 800d968:	0803df49 	.word	0x0803df49
 800d96c:	0803df56 	.word	0x0803df56
 800d970:	100023f0 	.word	0x100023f0
 800d974:	6893      	ldr	r3, [r2, #8]
 800d976:	9104      	str	r1, [sp, #16]
 800d978:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d97a:	9103      	str	r1, [sp, #12]
 800d97c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d97e:	9102      	str	r1, [sp, #8]
 800d980:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d982:	9101      	str	r1, [sp, #4]
 800d984:	6a12      	ldr	r2, [r2, #32]
 800d986:	9200      	str	r2, [sp, #0]
 800d988:	4430      	add	r0, r6
 800d98a:	4ab4      	ldr	r2, [pc, #720]	; (800dc5c <dTask+0x67c>)
 800d98c:	49b4      	ldr	r1, [pc, #720]	; (800dc60 <dTask+0x680>)
 800d98e:	f7fb f969 	bl	8008c64 <xsprintf>
 800d992:	6826      	ldr	r6, [r4, #0]
 800d994:	6860      	ldr	r0, [r4, #4]
 800d996:	4430      	add	r0, r6
 800d998:	f00f fc52 	bl	801d240 <strlen>
 800d99c:	4430      	add	r0, r6
 800d99e:	6020      	str	r0, [r4, #0]
              QSTAT(heap_33_192);
 800d9a0:	682e      	ldr	r6, [r5, #0]
 800d9a2:	f241 2387 	movw	r3, #4743	; 0x1287
 800d9a6:	429e      	cmp	r6, r3
 800d9a8:	dc18      	bgt.n	800d9dc <dTask+0x3fc>
 800d9aa:	4aae      	ldr	r2, [pc, #696]	; (800dc64 <dTask+0x684>)
 800d9ac:	6860      	ldr	r0, [r4, #4]
 800d9ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d9b0:	6893      	ldr	r3, [r2, #8]
 800d9b2:	9104      	str	r1, [sp, #16]
 800d9b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d9b6:	9103      	str	r1, [sp, #12]
 800d9b8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d9ba:	9102      	str	r1, [sp, #8]
 800d9bc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d9be:	9101      	str	r1, [sp, #4]
 800d9c0:	6a12      	ldr	r2, [r2, #32]
 800d9c2:	9200      	str	r2, [sp, #0]
 800d9c4:	4430      	add	r0, r6
 800d9c6:	4aa8      	ldr	r2, [pc, #672]	; (800dc68 <dTask+0x688>)
 800d9c8:	49a5      	ldr	r1, [pc, #660]	; (800dc60 <dTask+0x680>)
 800d9ca:	f7fb f94b 	bl	8008c64 <xsprintf>
 800d9ce:	6826      	ldr	r6, [r4, #0]
 800d9d0:	6860      	ldr	r0, [r4, #4]
 800d9d2:	4430      	add	r0, r6
 800d9d4:	f00f fc34 	bl	801d240 <strlen>
 800d9d8:	4430      	add	r0, r6
 800d9da:	6020      	str	r0, [r4, #0]
              QSTAT(heap_512_512);
 800d9dc:	682e      	ldr	r6, [r5, #0]
 800d9de:	f241 2387 	movw	r3, #4743	; 0x1287
 800d9e2:	429e      	cmp	r6, r3
 800d9e4:	dc18      	bgt.n	800da18 <dTask+0x438>
 800d9e6:	4aa1      	ldr	r2, [pc, #644]	; (800dc6c <dTask+0x68c>)
 800d9e8:	6860      	ldr	r0, [r4, #4]
 800d9ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800d9ec:	6893      	ldr	r3, [r2, #8]
 800d9ee:	9104      	str	r1, [sp, #16]
 800d9f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d9f2:	9103      	str	r1, [sp, #12]
 800d9f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d9f6:	9102      	str	r1, [sp, #8]
 800d9f8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d9fa:	9101      	str	r1, [sp, #4]
 800d9fc:	6a12      	ldr	r2, [r2, #32]
 800d9fe:	9200      	str	r2, [sp, #0]
 800da00:	4430      	add	r0, r6
 800da02:	4a9b      	ldr	r2, [pc, #620]	; (800dc70 <dTask+0x690>)
 800da04:	4996      	ldr	r1, [pc, #600]	; (800dc60 <dTask+0x680>)
 800da06:	f7fb f92d 	bl	8008c64 <xsprintf>
 800da0a:	6826      	ldr	r6, [r4, #0]
 800da0c:	6860      	ldr	r0, [r4, #4]
 800da0e:	4430      	add	r0, r6
 800da10:	f00f fc16 	bl	801d240 <strlen>
 800da14:	4430      	add	r0, r6
 800da16:	6020      	str	r0, [r4, #0]
              QSTAT(heap_513_1024);
 800da18:	682e      	ldr	r6, [r5, #0]
 800da1a:	f241 2387 	movw	r3, #4743	; 0x1287
 800da1e:	429e      	cmp	r6, r3
 800da20:	dc18      	bgt.n	800da54 <dTask+0x474>
 800da22:	4a94      	ldr	r2, [pc, #592]	; (800dc74 <dTask+0x694>)
 800da24:	6860      	ldr	r0, [r4, #4]
 800da26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800da28:	6893      	ldr	r3, [r2, #8]
 800da2a:	9104      	str	r1, [sp, #16]
 800da2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800da2e:	9103      	str	r1, [sp, #12]
 800da30:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800da32:	9102      	str	r1, [sp, #8]
 800da34:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800da36:	9101      	str	r1, [sp, #4]
 800da38:	6a12      	ldr	r2, [r2, #32]
 800da3a:	9200      	str	r2, [sp, #0]
 800da3c:	4430      	add	r0, r6
 800da3e:	4a8e      	ldr	r2, [pc, #568]	; (800dc78 <dTask+0x698>)
 800da40:	4987      	ldr	r1, [pc, #540]	; (800dc60 <dTask+0x680>)
 800da42:	f7fb f90f 	bl	8008c64 <xsprintf>
 800da46:	6826      	ldr	r6, [r4, #0]
 800da48:	6860      	ldr	r0, [r4, #4]
 800da4a:	4430      	add	r0, r6
 800da4c:	f00f fbf8 	bl	801d240 <strlen>
 800da50:	4430      	add	r0, r6
 800da52:	6020      	str	r0, [r4, #0]
              QSTAT(heap_1025_2112);
 800da54:	682e      	ldr	r6, [r5, #0]
 800da56:	f241 2387 	movw	r3, #4743	; 0x1287
 800da5a:	429e      	cmp	r6, r3
 800da5c:	dc18      	bgt.n	800da90 <dTask+0x4b0>
 800da5e:	4a87      	ldr	r2, [pc, #540]	; (800dc7c <dTask+0x69c>)
 800da60:	6860      	ldr	r0, [r4, #4]
 800da62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800da64:	6893      	ldr	r3, [r2, #8]
 800da66:	9104      	str	r1, [sp, #16]
 800da68:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800da6a:	9103      	str	r1, [sp, #12]
 800da6c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800da6e:	9102      	str	r1, [sp, #8]
 800da70:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800da72:	9101      	str	r1, [sp, #4]
 800da74:	6a12      	ldr	r2, [r2, #32]
 800da76:	9200      	str	r2, [sp, #0]
 800da78:	4430      	add	r0, r6
 800da7a:	4a81      	ldr	r2, [pc, #516]	; (800dc80 <dTask+0x6a0>)
 800da7c:	4978      	ldr	r1, [pc, #480]	; (800dc60 <dTask+0x680>)
 800da7e:	f7fb f8f1 	bl	8008c64 <xsprintf>
 800da82:	6826      	ldr	r6, [r4, #0]
 800da84:	6860      	ldr	r0, [r4, #4]
 800da86:	4430      	add	r0, r6
 800da88:	f00f fbda 	bl	801d240 <strlen>
 800da8c:	4430      	add	r0, r6
 800da8e:	6020      	str	r0, [r4, #0]
              DPRINTF("+---------------+--------+--------+--------+--------+--------+--------+"CLEAR_LINE"\n");
 800da90:	682b      	ldr	r3, [r5, #0]
 800da92:	f241 2287 	movw	r2, #4743	; 0x1287
 800da96:	4293      	cmp	r3, r2
 800da98:	dc15      	bgt.n	800dac6 <dTask+0x4e6>
 800da9a:	6860      	ldr	r0, [r4, #4]
 800da9c:	4979      	ldr	r1, [pc, #484]	; (800dc84 <dTask+0x6a4>)
 800da9e:	4418      	add	r0, r3
 800daa0:	f7fb f8e0 	bl	8008c64 <xsprintf>
 800daa4:	6826      	ldr	r6, [r4, #0]
 800daa6:	6860      	ldr	r0, [r4, #4]
 800daa8:	4430      	add	r0, r6
 800daaa:	f00f fbc9 	bl	801d240 <strlen>
 800daae:	4430      	add	r0, r6
 800dab0:	6020      	str	r0, [r4, #0]
            }
          DPRINTF(CUR_UNSAVE);
 800dab2:	682b      	ldr	r3, [r5, #0]
 800dab4:	f241 2287 	movw	r2, #4743	; 0x1287
 800dab8:	4293      	cmp	r3, r2
 800daba:	dc04      	bgt.n	800dac6 <dTask+0x4e6>
 800dabc:	6860      	ldr	r0, [r4, #4]
 800dabe:	4972      	ldr	r1, [pc, #456]	; (800dc88 <dTask+0x6a8>)
 800dac0:	4418      	add	r0, r3
 800dac2:	f7fb f8cf 	bl	8008c64 <xsprintf>
          *bufSize = 0;
 800dac6:	2300      	movs	r3, #0
          xprintf(bufPtr);
 800dac8:	6868      	ldr	r0, [r5, #4]
              QSTAT(heap_513_1024);
              QSTAT(heap_1025_2112);
              DPRINTF("+---------------+--------+--------+--------+--------+--------+--------+"CLEAR_LINE"\n");
            }
          DPRINTF(CUR_UNSAVE);
          *bufSize = 0;
 800daca:	602b      	str	r3, [r5, #0]
          xprintf(bufPtr);
 800dacc:	f7fb f8ac 	bl	8008c28 <xprintf>

          if(cfg.stats&0x01)
 800dad0:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
            {
#ifdef MADO
              DPRINTF(CUR_SAVE CUR_HOME(19) CLEAR_LINE"\n");
 800dad4:	6823      	ldr	r3, [r4, #0]
 800dad6:	f241 2287 	movw	r2, #4743	; 0x1287
              DPRINTF(CUR_SAVE CUR_HOME(11) CLEAR_LINE"\n");
#endif
            }
          else
            {
              DPRINTF(CUR_SAVE CUR_HOME(3) CLEAR_LINE"\n");
 800dada:	4293      	cmp	r3, r2
 800dadc:	dc0b      	bgt.n	800daf6 <dTask+0x516>
 800dade:	6860      	ldr	r0, [r4, #4]
 800dae0:	496a      	ldr	r1, [pc, #424]	; (800dc8c <dTask+0x6ac>)
 800dae2:	4418      	add	r0, r3
 800dae4:	f7fb f8be 	bl	8008c64 <xsprintf>
 800dae8:	6826      	ldr	r6, [r4, #0]
 800daea:	6860      	ldr	r0, [r4, #4]
 800daec:	4430      	add	r0, r6
 800daee:	f00f fba7 	bl	801d240 <strlen>
 800daf2:	4430      	add	r0, r6
 800daf4:	6020      	str	r0, [r4, #0]
            }
          if(cfg.stats&0x02)
 800daf6:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800dafa:	079e      	lsls	r6, r3, #30
 800dafc:	f140 8167 	bpl.w	800ddce <dTask+0x7ee>
            {
              int m;
              for(m = 0; m < RADIO_MODULES; m++)
                DPRINTF("%d: devId=%08x manId=%08x prodId=%08x smplRate=%6dHz tsPeriod=%4dus dtxFull=%8d txNoConn=%8d status=%04x"CLEAR_LINE"\n", m,
 800db00:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800dca0 <dTask+0x6c0>
 800db04:	2600      	movs	r6, #0
 800db06:	f8d5 e000 	ldr.w	lr, [r5]
 800db0a:	f241 2387 	movw	r3, #4743	; 0x1287
 800db0e:	459e      	cmp	lr, r3
 800db10:	dc2b      	bgt.n	800db6a <dTask+0x58a>
 800db12:	223b      	movs	r2, #59	; 0x3b
 800db14:	fb02 8206 	mla	r2, r2, r6, r8
 800db18:	f102 0118 	add.w	r1, r2, #24
 800db1c:	f8b2 c038 	ldrh.w	ip, [r2, #56]	; 0x38
 800db20:	69d3      	ldr	r3, [r2, #28]
 800db22:	f8cd c018 	str.w	ip, [sp, #24]
 800db26:	f8d2 b02c 	ldr.w	fp, [r2, #44]	; 0x2c
 800db2a:	f8cd b014 	str.w	fp, [sp, #20]
 800db2e:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
 800db32:	f8cd c010 	str.w	ip, [sp, #16]
 800db36:	f8d2 b034 	ldr.w	fp, [r2, #52]	; 0x34
 800db3a:	f8cd b00c 	str.w	fp, [sp, #12]
 800db3e:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 800db42:	f8cd c008 	str.w	ip, [sp, #8]
 800db46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800db48:	9201      	str	r2, [sp, #4]
 800db4a:	6860      	ldr	r0, [r4, #4]
 800db4c:	688a      	ldr	r2, [r1, #8]
 800db4e:	9200      	str	r2, [sp, #0]
 800db50:	4470      	add	r0, lr
 800db52:	4632      	mov	r2, r6
 800db54:	494e      	ldr	r1, [pc, #312]	; (800dc90 <dTask+0x6b0>)
 800db56:	f7fb f885 	bl	8008c64 <xsprintf>
 800db5a:	f8d4 b000 	ldr.w	fp, [r4]
 800db5e:	6860      	ldr	r0, [r4, #4]
 800db60:	4458      	add	r0, fp
 800db62:	f00f fb6d 	bl	801d240 <strlen>
 800db66:	4458      	add	r0, fp
 800db68:	6020      	str	r0, [r4, #0]
              DPRINTF(CUR_SAVE CUR_HOME(3) CLEAR_LINE"\n");
            }
          if(cfg.stats&0x02)
            {
              int m;
              for(m = 0; m < RADIO_MODULES; m++)
 800db6a:	3601      	adds	r6, #1
 800db6c:	2e02      	cmp	r6, #2
 800db6e:	d1ca      	bne.n	800db06 <dTask+0x526>
                        radioModule[m].tsPeriod,
                        radioModule[m].txFull,
                        radioModule[m].txNoConn,
                        radioModule[m].status);

              DPRINTF("+----+---+--+--+--+-+-+----+--r.dev.+--r.man.+-r.prod.+-upConn-+upConnDa+-uptime-+lastSeen+txFullDr+dscRstRx+dscRstTx+"CLEAR_LINE"\n");
 800db70:	682b      	ldr	r3, [r5, #0]
 800db72:	f241 2287 	movw	r2, #4743	; 0x1287
 800db76:	4293      	cmp	r3, r2
 800db78:	dc0b      	bgt.n	800db92 <dTask+0x5b2>
 800db7a:	6860      	ldr	r0, [r4, #4]
 800db7c:	4945      	ldr	r1, [pc, #276]	; (800dc94 <dTask+0x6b4>)
 800db7e:	4418      	add	r0, r3
 800db80:	f7fb f870 	bl	8008c64 <xsprintf>
 800db84:	6825      	ldr	r5, [r4, #0]
 800db86:	6860      	ldr	r0, [r4, #4]
 800db88:	4428      	add	r0, r5
 800db8a:	f00f fb59 	bl	801d240 <strlen>
 800db8e:	4428      	add	r0, r5
 800db90:	6020      	str	r0, [r4, #0]
 800db92:	4d41      	ldr	r5, [pc, #260]	; (800dc98 <dTask+0x6b8>)
 800db94:	f04f 0b00 	mov.w	fp, #0
  [DEV_CONN]  = 'F',
  [DEV_UCONN] = 'U',
};
static void portState(portNum_t p)
{
  if(portData[p].enabled == 0)
 800db98:	7eeb      	ldrb	r3, [r5, #27]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f000 80fe 	beq.w	800dd9c <dTask+0x7bc>
    return;

#ifdef MADO
  int myPipeNum = getPipeNum(portData[p].kond_pom);
 800dba0:	7e68      	ldrb	r0, [r5, #25]
 800dba2:	f008 f925 	bl	8015df0 <getPipeNum>
 800dba6:	9011      	str	r0, [sp, #68]	; 0x44
#endif
  uint32_t now = xTaskGetTickCount();
 800dba8:	f7fc feb8 	bl	800a91c <xTaskGetTickCount>
  uint32_t upConn = (now - portData[p].tsConnected)/1000;
 800dbac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  uint32_t upConnDatagram = (now - portData[p].tsConnectedDatagram)/1000;
  uint32_t upTime = portData[p].uptime/1000;
 800dbae:	6b6a      	ldr	r2, [r5, #52]	; 0x34
#ifdef MADO
  int myPipeNum = getPipeNum(portData[p].kond_pom);
#endif
  uint32_t now = xTaskGetTickCount();
  uint32_t upConn = (now - portData[p].tsConnected)/1000;
  uint32_t upConnDatagram = (now - portData[p].tsConnectedDatagram)/1000;
 800dbb0:	6b29      	ldr	r1, [r5, #48]	; 0x30

#ifdef MADO
  int myPipeNum = getPipeNum(portData[p].kond_pom);
#endif
  uint32_t now = xTaskGetTickCount();
  uint32_t upConn = (now - portData[p].tsConnected)/1000;
 800dbb2:	1ac3      	subs	r3, r0, r3
 800dbb4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800dbb8:	fbb3 f3f6 	udiv	r3, r3, r6
 800dbbc:	9312      	str	r3, [sp, #72]	; 0x48
  uint32_t upConnDatagram = (now - portData[p].tsConnectedDatagram)/1000;
  uint32_t upTime = portData[p].uptime/1000;
  uint32_t lastSeen = portData[p].uptime?(now - portData[p].tsLastSeen)/1000:-1;
 800dbbe:	b122      	cbz	r2, 800dbca <dTask+0x5ea>
 800dbc0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800dbc2:	1ac3      	subs	r3, r0, r3
 800dbc4:	fbb3 f3f6 	udiv	r3, r3, r6
 800dbc8:	e001      	b.n	800dbce <dTask+0x5ee>
 800dbca:	f04f 33ff 	mov.w	r3, #4294967295
  switch(portData[p].connState)
 800dbce:	f895 6020 	ldrb.w	r6, [r5, #32]
#endif
  uint32_t now = xTaskGetTickCount();
  uint32_t upConn = (now - portData[p].tsConnected)/1000;
  uint32_t upConnDatagram = (now - portData[p].tsConnectedDatagram)/1000;
  uint32_t upTime = portData[p].uptime/1000;
  uint32_t lastSeen = portData[p].uptime?(now - portData[p].tsLastSeen)/1000:-1;
 800dbd2:	9313      	str	r3, [sp, #76]	; 0x4c
  switch(portData[p].connState)
 800dbd4:	b156      	cbz	r6, 800dbec <dTask+0x60c>
 800dbd6:	2e02      	cmp	r6, #2
 800dbd8:	d00b      	beq.n	800dbf2 <dTask+0x612>
#ifdef MADO
  int myPipeNum = getPipeNum(portData[p].kond_pom);
#endif
  uint32_t now = xTaskGetTickCount();
  uint32_t upConn = (now - portData[p].tsConnected)/1000;
  uint32_t upConnDatagram = (now - portData[p].tsConnectedDatagram)/1000;
 800dbda:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800dbde:	1a40      	subs	r0, r0, r1
 800dbe0:	fbb0 f3f6 	udiv	r3, r0, r6
  uint32_t upTime = portData[p].uptime/1000;
 800dbe4:	fbb2 f6f6 	udiv	r6, r2, r6
#ifdef MADO
  int myPipeNum = getPipeNum(portData[p].kond_pom);
#endif
  uint32_t now = xTaskGetTickCount();
  uint32_t upConn = (now - portData[p].tsConnected)/1000;
  uint32_t upConnDatagram = (now - portData[p].tsConnectedDatagram)/1000;
 800dbe8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbea:	e004      	b.n	800dbf6 <dTask+0x616>
  switch(portData[p].connState)
    {
    case DEV_NCONN:
      upConn = 0;
    case DEV_PCONN:
      upConnDatagram = 0;
 800dbec:	960f      	str	r6, [sp, #60]	; 0x3c
  uint32_t upTime = portData[p].uptime/1000;
  uint32_t lastSeen = portData[p].uptime?(now - portData[p].tsLastSeen)/1000:-1;
  switch(portData[p].connState)
    {
    case DEV_NCONN:
      upConn = 0;
 800dbee:	9612      	str	r6, [sp, #72]	; 0x48
 800dbf0:	e001      	b.n	800dbf6 <dTask+0x616>
    case DEV_PCONN:
      upConnDatagram = 0;
      upTime = 0;
 800dbf2:	2600      	movs	r6, #0
  switch(portData[p].connState)
    {
    case DEV_NCONN:
      upConn = 0;
    case DEV_PCONN:
      upConnDatagram = 0;
 800dbf4:	960f      	str	r6, [sp, #60]	; 0x3c
      upTime = 0;
      break;
    }
  spiHelper_t * helper = (spiHelper_t *)portData[p].SPIhelper;
  DPRINTF("|%4s|%c%c%c|%02x|%02x|", portStr[p],
 800dbf6:	6823      	ldr	r3, [r4, #0]
    case DEV_PCONN:
      upConnDatagram = 0;
      upTime = 0;
      break;
    }
  spiHelper_t * helper = (spiHelper_t *)portData[p].SPIhelper;
 800dbf8:	f8d5 8010 	ldr.w	r8, [r5, #16]
  DPRINTF("|%4s|%c%c%c|%02x|%02x|", portStr[p],
 800dbfc:	f241 2287 	movw	r2, #4743	; 0x1287
 800dc00:	4293      	cmp	r3, r2
 800dc02:	f300 80b7 	bgt.w	800dd74 <dTask+0x794>
 800dc06:	6862      	ldr	r2, [r4, #4]
 800dc08:	18d3      	adds	r3, r2, r3
 800dc0a:	9314      	str	r3, [sp, #80]	; 0x50
 800dc0c:	4b23      	ldr	r3, [pc, #140]	; (800dc9c <dTask+0x6bc>)
 800dc0e:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
 800dc12:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800dc14:	9217      	str	r2, [sp, #92]	; 0x5c
 800dc16:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800dc1a:	3308      	adds	r3, #8
 800dc1c:	9315      	str	r3, [sp, #84]	; 0x54
 800dc1e:	f7fc fe7d 	bl	800a91c <xTaskGetTickCount>
 800dc22:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800dc24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc26:	f501 519c 	add.w	r1, r1, #4992	; 0x1380
 800dc2a:	4283      	cmp	r3, r0
 800dc2c:	bf94      	ite	ls
 800dc2e:	2320      	movls	r3, #32
 800dc30:	2355      	movhi	r3, #85	; 0x55
 800dc32:	3108      	adds	r1, #8
 800dc34:	9316      	str	r3, [sp, #88]	; 0x58
 800dc36:	9115      	str	r1, [sp, #84]	; 0x54
 800dc38:	f7fc fe70 	bl	800a91c <xTaskGetTickCount>
 800dc3c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dc3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc42:	4281      	cmp	r1, r0
 800dc44:	bf94      	ite	ls
 800dc46:	2020      	movls	r0, #32
 800dc48:	2053      	movhi	r0, #83	; 0x53
 800dc4a:	7e29      	ldrb	r1, [r5, #24]
 800dc4c:	2901      	cmp	r1, #1
 800dc4e:	d029      	beq.n	800dca4 <dTask+0x6c4>
 800dc50:	2900      	cmp	r1, #0
 800dc52:	bf14      	ite	ne
 800dc54:	214e      	movne	r1, #78	; 0x4e
 800dc56:	2155      	moveq	r1, #85	; 0x55
 800dc58:	e025      	b.n	800dca6 <dTask+0x6c6>
 800dc5a:	bf00      	nop
 800dc5c:	0803df9f 	.word	0x0803df9f
 800dc60:	0803dee1 	.word	0x0803dee1
 800dc64:	10002424 	.word	0x10002424
 800dc68:	0803dfa9 	.word	0x0803dfa9
 800dc6c:	10002458 	.word	0x10002458
 800dc70:	0803dfb5 	.word	0x0803dfb5
 800dc74:	1000248c 	.word	0x1000248c
 800dc78:	0803dfc2 	.word	0x0803dfc2
 800dc7c:	100024c0 	.word	0x100024c0
 800dc80:	0803dfd0 	.word	0x0803dfd0
 800dc84:	0803df56 	.word	0x0803df56
 800dc88:	0803de8b 	.word	0x0803de8b
 800dc8c:	0803de8a 	.word	0x0803de8a
 800dc90:	0803dfdf 	.word	0x0803dfdf
 800dc94:	0803e049 	.word	0x0803e049
 800dc98:	10002038 	.word	0x10002038
 800dc9c:	10002348 	.word	0x10002348
 800dca0:	100032b8 	.word	0x100032b8
 800dca4:	2153      	movs	r1, #83	; 0x53
 800dca6:	f895 e01a 	ldrb.w	lr, [r5, #26]
 800dcaa:	f8cd e00c 	str.w	lr, [sp, #12]
 800dcae:	f895 e019 	ldrb.w	lr, [r5, #25]
 800dcb2:	e88d 4003 	stmia.w	sp, {r0, r1, lr}
 800dcb6:	492b      	ldr	r1, [pc, #172]	; (800dd64 <dTask+0x784>)
 800dcb8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dcba:	f7fa ffd3 	bl	8008c64 <xsprintf>
 800dcbe:	e894 000c 	ldmia.w	r4, {r2, r3}
 800dcc2:	1898      	adds	r0, r3, r2
 800dcc4:	9215      	str	r2, [sp, #84]	; 0x54
 800dcc6:	9314      	str	r3, [sp, #80]	; 0x50
 800dcc8:	f00f faba 	bl	801d240 <strlen>
 800dccc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dcce:	4410      	add	r0, r2
 800dcd0:	6020      	str	r0, [r4, #0]
          IS_CON_TYPE_ACTIVE(p, PORT_TYPE_USART)?'U':' ',
          IS_CON_TYPE_ACTIVE(p, PORT_TYPE_SPI)?'S':' ',
          (portData[p].portType == PORT_TYPE_SPI)?'S':((portData[p].portType == PORT_TYPE_USART)?'U':'N'),
          portData[p].kond_pom, portData[p].urzadzenie);
  if(helper)
 800dcd2:	f1b8 0f00 	cmp.w	r8, #0
 800dcd6:	d050      	beq.n	800dd7a <dTask+0x79a>
    {
      int prevConnState = portData[p].prevConnState;
      int connState = portData[p].connState;
      DPRINTF("%c%c|%c|%c|%04x|%08x|%08x|%08x|%8d|%8d|%8d|%8d|%8d|%8d|%8d|"CLEAR_LINE"\n" ,
 800dcd8:	f241 2e87 	movw	lr, #4743	; 0x1287
 800dcdc:	4570      	cmp	r0, lr
          IS_CON_TYPE_ACTIVE(p, PORT_TYPE_SPI)?'S':' ',
          (portData[p].portType == PORT_TYPE_SPI)?'S':((portData[p].portType == PORT_TYPE_USART)?'U':'N'),
          portData[p].kond_pom, portData[p].urzadzenie);
  if(helper)
    {
      int prevConnState = portData[p].prevConnState;
 800dcde:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
      int connState = portData[p].connState;
 800dce2:	f895 1020 	ldrb.w	r1, [r5, #32]
      DPRINTF("%c%c|%c|%c|%04x|%08x|%08x|%08x|%8d|%8d|%8d|%8d|%8d|%8d|%8d|"CLEAR_LINE"\n" ,
 800dce6:	dc59      	bgt.n	800dd9c <dTask+0x7bc>
 800dce8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcea:	4418      	add	r0, r3
 800dcec:	4b1e      	ldr	r3, [pc, #120]	; (800dd68 <dTask+0x788>)
 800dcee:	5c9a      	ldrb	r2, [r3, r2]
 800dcf0:	5c5b      	ldrb	r3, [r3, r1]
 800dcf2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dcf4:	9314      	str	r3, [sp, #80]	; 0x50
 800dcf6:	b131      	cbz	r1, 800dd06 <dTask+0x726>
 800dcf8:	2901      	cmp	r1, #1
 800dcfa:	bf14      	ite	ne
 800dcfc:	f04f 0e4e 	movne.w	lr, #78	; 0x4e
 800dd00:	f04f 0e31 	moveq.w	lr, #49	; 0x31
 800dd04:	e001      	b.n	800dd0a <dTask+0x72a>
 800dd06:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800dd0a:	f8d8 110c 	ldr.w	r1, [r8, #268]	; 0x10c
 800dd0e:	b131      	cbz	r1, 800dd1e <dTask+0x73e>
 800dd10:	f8df c05c 	ldr.w	ip, [pc, #92]	; 800dd70 <dTask+0x790>
 800dd14:	4561      	cmp	r1, ip
 800dd16:	bf14      	ite	ne
 800dd18:	2131      	movne	r1, #49	; 0x31
 800dd1a:	2130      	moveq	r1, #48	; 0x30
 800dd1c:	e000      	b.n	800dd20 <dTask+0x740>
 800dd1e:	214e      	movs	r1, #78	; 0x4e
 800dd20:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800dd22:	930c      	str	r3, [sp, #48]	; 0x30
 800dd24:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800dd26:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd28:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800dd2a:	930a      	str	r3, [sp, #40]	; 0x28
 800dd2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd2e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd32:	9307      	str	r3, [sp, #28]
 800dd34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd36:	9306      	str	r3, [sp, #24]
 800dd38:	9608      	str	r6, [sp, #32]
 800dd3a:	f8d8 611d 	ldr.w	r6, [r8, #285]	; 0x11d
 800dd3e:	9605      	str	r6, [sp, #20]
 800dd40:	f8d8 6119 	ldr.w	r6, [r8, #281]	; 0x119
 800dd44:	9604      	str	r6, [sp, #16]
 800dd46:	f8d8 6115 	ldr.w	r6, [r8, #277]	; 0x115
 800dd4a:	9603      	str	r6, [sp, #12]
 800dd4c:	f8b8 6121 	ldrh.w	r6, [r8, #289]	; 0x121
 800dd50:	9602      	str	r6, [sp, #8]
 800dd52:	9101      	str	r1, [sp, #4]
 800dd54:	f8cd e000 	str.w	lr, [sp]
 800dd58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd5a:	4904      	ldr	r1, [pc, #16]	; (800dd6c <dTask+0x78c>)
 800dd5c:	f7fa ff82 	bl	8008c64 <xsprintf>
 800dd60:	e015      	b.n	800dd8e <dTask+0x7ae>
 800dd62:	bf00      	nop
 800dd64:	0803e0c1 	.word	0x0803e0c1
 800dd68:	0803ddf0 	.word	0x0803ddf0
 800dd6c:	0803e0d8 	.word	0x0803e0d8
 800dd70:	100032b8 	.word	0x100032b8
  DPRINTF("|%4s|%c%c%c|%02x|%02x|", portStr[p],
          IS_CON_TYPE_ACTIVE(p, PORT_TYPE_USART)?'U':' ',
          IS_CON_TYPE_ACTIVE(p, PORT_TYPE_SPI)?'S':' ',
          (portData[p].portType == PORT_TYPE_SPI)?'S':((portData[p].portType == PORT_TYPE_USART)?'U':'N'),
          portData[p].kond_pom, portData[p].urzadzenie);
  if(helper)
 800dd74:	f1b8 0f00 	cmp.w	r8, #0
 800dd78:	d110      	bne.n	800dd9c <dTask+0x7bc>
              portData[p].txFullDrop,
              portData[p].dscResetRx,
              portData[p].dscResetTx);
    }
  else
    DPRINTF("  | | |    |        |        |        |        |        |        |        |        |        |        |"CLEAR_LINE"\n");
 800dd7a:	6823      	ldr	r3, [r4, #0]
 800dd7c:	f241 2287 	movw	r2, #4743	; 0x1287
 800dd80:	4293      	cmp	r3, r2
 800dd82:	dc0b      	bgt.n	800dd9c <dTask+0x7bc>
 800dd84:	6860      	ldr	r0, [r4, #4]
 800dd86:	4988      	ldr	r1, [pc, #544]	; (800dfa8 <dTask+0x9c8>)
 800dd88:	4418      	add	r0, r3
 800dd8a:	f7fa ff6b 	bl	8008c64 <xsprintf>
 800dd8e:	6826      	ldr	r6, [r4, #0]
 800dd90:	6860      	ldr	r0, [r4, #4]
 800dd92:	4430      	add	r0, r6
 800dd94:	f00f fa54 	bl	801d240 <strlen>
 800dd98:	4430      	add	r0, r6
 800dd9a:	6020      	str	r0, [r4, #0]
 800dd9c:	f10b 0b01 	add.w	fp, fp, #1
                        radioModule[m].txNoConn,
                        radioModule[m].status);

              DPRINTF("+----+---+--+--+--+-+-+----+--r.dev.+--r.man.+-r.prod.+-upConn-+upConnDa+-uptime-+lastSeen+txFullDr+dscRstRx+dscRstTx+"CLEAR_LINE"\n");
              portNum_t p;
              for(p=CEN_PORT; p < PORTS_NUM; p++) portState(p);
 800dda0:	f1bb 0f09 	cmp.w	fp, #9
 800dda4:	f105 0550 	add.w	r5, r5, #80	; 0x50
 800dda8:	f47f aef6 	bne.w	800db98 <dTask+0x5b8>
              DPRINTF("+----+---+--+--+--+-+-+----+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+"CLEAR_LINE"\n");
 800ddac:	6823      	ldr	r3, [r4, #0]
 800ddae:	f241 2287 	movw	r2, #4743	; 0x1287
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	dc0b      	bgt.n	800ddce <dTask+0x7ee>
 800ddb6:	6860      	ldr	r0, [r4, #4]
 800ddb8:	497c      	ldr	r1, [pc, #496]	; (800dfac <dTask+0x9cc>)
 800ddba:	4418      	add	r0, r3
 800ddbc:	f7fa ff52 	bl	8008c64 <xsprintf>
 800ddc0:	6825      	ldr	r5, [r4, #0]
 800ddc2:	6860      	ldr	r0, [r4, #4]
 800ddc4:	4428      	add	r0, r5
 800ddc6:	f00f fa3b 	bl	801d240 <strlen>
 800ddca:	4428      	add	r0, r5
 800ddcc:	6020      	str	r0, [r4, #0]
            }
          if(cfg.stats&0x04)
 800ddce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd0:	075d      	lsls	r5, r3, #29
 800ddd2:	d501      	bpl.n	800ddd8 <dTask+0x7f8>
            printfCommStats();
 800ddd4:	f7ff fab4 	bl	800d340 <printfCommStats>
                  kSensADC?"33":"3.3",
                  VFV(Uwy_k_local, 1000));
          DPRINTF("temp1:%d.%dC, temp2:%d.%dC"CLEAR_LINE"\n", (temp1>>8),  (10*(temp1&0xFF)/256), (temp2>>8),  (10*(temp2&0xFF)/256));
#endif
#ifdef MADO
          if(cfg.stats&0x08)
 800ddd8:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800dddc:	0718      	lsls	r0, r3, #28
 800ddde:	d503      	bpl.n	800dde8 <dTask+0x808>
            {
              showSpkSets(bufSize, bufPtr);
 800dde0:	6861      	ldr	r1, [r4, #4]
 800dde2:	4873      	ldr	r0, [pc, #460]	; (800dfb0 <dTask+0x9d0>)
 800dde4:	f7fb fe46 	bl	8009a74 <showSpkSets>
            }
          if(cfg.stats&0x10)
 800dde8:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800ddec:	06d9      	lsls	r1, r3, #27
 800ddee:	d503      	bpl.n	800ddf8 <dTask+0x818>
            {
              WM8805DBG(bufSize, bufPtr);
 800ddf0:	6861      	ldr	r1, [r4, #4]
 800ddf2:	486f      	ldr	r0, [pc, #444]	; (800dfb0 <dTask+0x9d0>)
 800ddf4:	f002 f9fc 	bl	80101f0 <WM8805DBG>
            }
          if(cfg.stats&0x20)
 800ddf8:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800ddfc:	069a      	lsls	r2, r3, #26
 800ddfe:	d503      	bpl.n	800de08 <dTask+0x828>
            {
              printi2s(bufSize, bufPtr);
 800de00:	6861      	ldr	r1, [r4, #4]
 800de02:	486b      	ldr	r0, [pc, #428]	; (800dfb0 <dTask+0x9d0>)
 800de04:	f006 ff4e 	bl	8014ca4 <printi2s>
            }

          DPRINTF("USB In:%d, Out:%d, InIncplt:%d, OutIncmplt:%d, SOF:%d feedback:%06x:%d altSetting:%d xfer:%d"CLEAR_LINE"\n", usb_stats[0], usb_stats[1], usb_stats[2], usb_stats[3], usb_stats[4]
 800de08:	6825      	ldr	r5, [r4, #0]
 800de0a:	f241 2387 	movw	r3, #4743	; 0x1287
 800de0e:	429d      	cmp	r5, r3
 800de10:	dc1e      	bgt.n	800de50 <dTask+0x870>
 800de12:	4a68      	ldr	r2, [pc, #416]	; (800dfb4 <dTask+0x9d4>)
 800de14:	6860      	ldr	r0, [r4, #4]
 800de16:	6993      	ldr	r3, [r2, #24]
 800de18:	6951      	ldr	r1, [r2, #20]
 800de1a:	9306      	str	r3, [sp, #24]
 800de1c:	69d3      	ldr	r3, [r2, #28]
 800de1e:	9305      	str	r3, [sp, #20]
 800de20:	0b8e      	lsrs	r6, r1, #14
 800de22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de26:	4373      	muls	r3, r6
 800de28:	9103      	str	r1, [sp, #12]
 800de2a:	9304      	str	r3, [sp, #16]
 800de2c:	6913      	ldr	r3, [r2, #16]
 800de2e:	9302      	str	r3, [sp, #8]
 800de30:	68d3      	ldr	r3, [r2, #12]
 800de32:	9301      	str	r3, [sp, #4]
 800de34:	6893      	ldr	r3, [r2, #8]
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	4428      	add	r0, r5
 800de3a:	ca0c      	ldmia	r2, {r2, r3}
 800de3c:	495e      	ldr	r1, [pc, #376]	; (800dfb8 <dTask+0x9d8>)
 800de3e:	f7fa ff11 	bl	8008c64 <xsprintf>
 800de42:	6825      	ldr	r5, [r4, #0]
 800de44:	6860      	ldr	r0, [r4, #4]
 800de46:	4428      	add	r0, r5
 800de48:	f00f f9fa 	bl	801d240 <strlen>
 800de4c:	4428      	add	r0, r5
 800de4e:	6020      	str	r0, [r4, #0]
		  , usb_stats[5], ((usb_stats[5]>>14)*1000), usb_stats[7], usb_stats[6]);
          
          printPipes(bufSize, bufPtr);
 800de50:	6861      	ldr	r1, [r4, #4]
 800de52:	4857      	ldr	r0, [pc, #348]	; (800dfb0 <dTask+0x9d0>)
 800de54:	f008 fc2c 	bl	80166b0 <printPipes>
#endif
          DPRINTF("---------------------------------------------------------------------------------"CLEAR_LINE"\n");
 800de58:	6823      	ldr	r3, [r4, #0]
 800de5a:	f241 2287 	movw	r2, #4743	; 0x1287
 800de5e:	4293      	cmp	r3, r2
 800de60:	dc0b      	bgt.n	800de7a <dTask+0x89a>
 800de62:	6860      	ldr	r0, [r4, #4]
 800de64:	4955      	ldr	r1, [pc, #340]	; (800dfbc <dTask+0x9dc>)
 800de66:	4418      	add	r0, r3
 800de68:	f7fa fefc 	bl	8008c64 <xsprintf>
 800de6c:	6825      	ldr	r5, [r4, #0]
 800de6e:	6860      	ldr	r0, [r4, #4]
 800de70:	4428      	add	r0, r5
 800de72:	f00f f9e5 	bl	801d240 <strlen>
 800de76:	4428      	add	r0, r5
 800de78:	6020      	str	r0, [r4, #0]
          DPRINTF(CUR_UNSAVE);
 800de7a:	6823      	ldr	r3, [r4, #0]
 800de7c:	f241 2287 	movw	r2, #4743	; 0x1287
 800de80:	4293      	cmp	r3, r2
 800de82:	dc04      	bgt.n	800de8e <dTask+0x8ae>
 800de84:	6860      	ldr	r0, [r4, #4]
 800de86:	494e      	ldr	r1, [pc, #312]	; (800dfc0 <dTask+0x9e0>)
 800de88:	4418      	add	r0, r3
 800de8a:	f7fa feeb 	bl	8008c64 <xsprintf>
          *bufSize = 0;
 800de8e:	2300      	movs	r3, #0
          xprintf(bufPtr);
 800de90:	6860      	ldr	r0, [r4, #4]
          
          printPipes(bufSize, bufPtr);
#endif
          DPRINTF("---------------------------------------------------------------------------------"CLEAR_LINE"\n");
          DPRINTF(CUR_UNSAVE);
          *bufSize = 0;
 800de92:	6023      	str	r3, [r4, #0]
          xprintf(bufPtr);
 800de94:	f7fa fec8 	bl	8008c28 <xprintf>
          dFree(bufPtr);
 800de98:	6860      	ldr	r0, [r4, #4]
 800de9a:	3814      	subs	r0, #20
 800de9c:	f007 fac8 	bl	8015430 <bFree>
          oldLEDsMask = -1;//Reprint LEDs
 800dea0:	4b48      	ldr	r3, [pc, #288]	; (800dfc4 <dTask+0x9e4>)
 800dea2:	f04f 32ff 	mov.w	r2, #4294967295
 800dea6:	601a      	str	r2, [r3, #0]
        }

      if((i%10)==0 || refresh)
 800dea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800deaa:	b113      	cbz	r3, 800deb2 <dTask+0x8d2>
 800deac:	7a23      	ldrb	r3, [r4, #8]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d040      	beq.n	800df34 <dTask+0x954>
    LEDsMask &= ~(1<<LEDNum);
}
#ifdef MADO
static void print_LED(void)
{
  if(LEDsMask != oldLEDsMask)
 800deb2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800dfc4 <dTask+0x9e4>
 800deb6:	68e2      	ldr	r2, [r4, #12]
 800deb8:	f8d8 3000 	ldr.w	r3, [r8]
 800debc:	429a      	cmp	r2, r3
 800debe:	d037      	beq.n	800df30 <dTask+0x950>
    {
      char LEDS[] = CUR_SAVE CUR_HOME(0) "DIODY: ["C_GREEN" "NO_COLOR"]["C_YELLOW" "NO_COLOR"]["C_ORANGE" "NO_COLOR"]["C_BLUE" "NO_COLOR"]["C_RED" "NO_COLOR"]["C_RED" "NO_COLOR"]"CLEAR_LINE"\n"CUR_UNSAVE;
 800dec0:	4b41      	ldr	r3, [pc, #260]	; (800dfc8 <dTask+0x9e8>)
 800dec2:	ad19      	add	r5, sp, #100	; 0x64
 800dec4:	f103 0c18 	add.w	ip, r3, #24
 800dec8:	46ae      	mov	lr, r5
 800deca:	6818      	ldr	r0, [r3, #0]
 800decc:	6859      	ldr	r1, [r3, #4]
 800dece:	462e      	mov	r6, r5
 800ded0:	c603      	stmia	r6!, {r0, r1}
 800ded2:	3308      	adds	r3, #8
 800ded4:	4563      	cmp	r3, ip
 800ded6:	4635      	mov	r5, r6
 800ded8:	d1f7      	bne.n	800deca <dTask+0x8ea>
 800deda:	8819      	ldrh	r1, [r3, #0]
 800dedc:	789b      	ldrb	r3, [r3, #2]
 800dede:	70b3      	strb	r3, [r6, #2]
      if(LEDsMask&LD1)LEDS[POS1]='1';
 800dee0:	07d3      	lsls	r3, r2, #31
 800dee2:	bf48      	it	mi
 800dee4:	2331      	movmi	r3, #49	; 0x31
#ifdef MADO
static void print_LED(void)
{
  if(LEDsMask != oldLEDsMask)
    {
      char LEDS[] = CUR_SAVE CUR_HOME(0) "DIODY: ["C_GREEN" "NO_COLOR"]["C_YELLOW" "NO_COLOR"]["C_ORANGE" "NO_COLOR"]["C_BLUE" "NO_COLOR"]["C_RED" "NO_COLOR"]["C_RED" "NO_COLOR"]"CLEAR_LINE"\n"CUR_UNSAVE;
 800dee6:	8031      	strh	r1, [r6, #0]
      if(LEDsMask&LD1)LEDS[POS1]='1';
 800dee8:	bf48      	it	mi
 800deea:	f88d 306c 	strbmi.w	r3, [sp, #108]	; 0x6c
      if(LEDsMask&LD2)LEDS[POS2]='1';
 800deee:	0796      	lsls	r6, r2, #30
 800def0:	bf44      	itt	mi
 800def2:	2331      	movmi	r3, #49	; 0x31
 800def4:	f88d 306f 	strbmi.w	r3, [sp, #111]	; 0x6f
      if(LEDsMask&LD3)LEDS[POS3]='1';
 800def8:	0755      	lsls	r5, r2, #29
 800defa:	bf44      	itt	mi
 800defc:	2331      	movmi	r3, #49	; 0x31
 800defe:	f88d 3072 	strbmi.w	r3, [sp, #114]	; 0x72
      if(LEDsMask&LD4)LEDS[POS4]='1';
 800df02:	0710      	lsls	r0, r2, #28
 800df04:	bf44      	itt	mi
 800df06:	2331      	movmi	r3, #49	; 0x31
 800df08:	f88d 3075 	strbmi.w	r3, [sp, #117]	; 0x75
      if(LEDsMask&LD5)LEDS[POS5]='1';
 800df0c:	06d1      	lsls	r1, r2, #27
 800df0e:	bf44      	itt	mi
 800df10:	2331      	movmi	r3, #49	; 0x31
 800df12:	f88d 3078 	strbmi.w	r3, [sp, #120]	; 0x78
      if(LEDsMask&LD6)LEDS[POS6]='1';
 800df16:	0693      	lsls	r3, r2, #26
 800df18:	bf48      	it	mi
 800df1a:	2331      	movmi	r3, #49	; 0x31
      xprintf("%s", LEDS);
 800df1c:	4671      	mov	r1, lr
 800df1e:	482b      	ldr	r0, [pc, #172]	; (800dfcc <dTask+0x9ec>)
      if(LEDsMask&LD1)LEDS[POS1]='1';
      if(LEDsMask&LD2)LEDS[POS2]='1';
      if(LEDsMask&LD3)LEDS[POS3]='1';
      if(LEDsMask&LD4)LEDS[POS4]='1';
      if(LEDsMask&LD5)LEDS[POS5]='1';
      if(LEDsMask&LD6)LEDS[POS6]='1';
 800df20:	bf48      	it	mi
 800df22:	f88d 307b 	strbmi.w	r3, [sp, #123]	; 0x7b
      xprintf("%s", LEDS);
 800df26:	f7fa fe7f 	bl	8008c28 <xprintf>
      oldLEDsMask = LEDsMask;
 800df2a:	68e3      	ldr	r3, [r4, #12]
 800df2c:	f8c8 3000 	str.w	r3, [r8]
        }

      if((i%10)==0 || refresh)
        {
          print_LED();
          refresh = 0;
 800df30:	2300      	movs	r3, #0
 800df32:	7223      	strb	r3, [r4, #8]
        }
#ifdef  MADO
      if(streamCaptureBuffer && (streamCaptureBuffer->offset == streamCaptureBuffer->size))
 800df34:	4e26      	ldr	r6, [pc, #152]	; (800dfd0 <dTask+0x9f0>)
 800df36:	6833      	ldr	r3, [r6, #0]
 800df38:	b393      	cbz	r3, 800dfa0 <dTask+0x9c0>
 800df3a:	889a      	ldrh	r2, [r3, #4]
 800df3c:	881b      	ldrh	r3, [r3, #0]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d12e      	bne.n	800dfa0 <dTask+0x9c0>
        {
          cfg.stats = 0;
 800df42:	2500      	movs	r5, #0
 800df44:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800df48:	f887 503c 	strb.w	r5, [r7, #60]	; 0x3c
 800df4c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800df50:	f887 503d 	strb.w	r5, [r7, #61]	; 0x3d
 800df54:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800df58:	f887 503e 	strb.w	r5, [r7, #62]	; 0x3e
 800df5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800df60:	f887 503f 	strb.w	r5, [r7, #63]	; 0x3f
          int i = 0;
          taskENTER_CRITICAL();
 800df64:	f7fc fa22 	bl	800a3ac <vPortEnterCritical>
          for(i = 0; i < streamCaptureBuffer->size; i+=8)
 800df68:	6832      	ldr	r2, [r6, #0]
 800df6a:	8813      	ldrh	r3, [r2, #0]
 800df6c:	429d      	cmp	r5, r3
 800df6e:	da15      	bge.n	800df9c <dTask+0x9bc>
            {
              uint16_t *ptr = (uint16_t *)&(streamCaptureBuffer->data[i]);
 800df70:	f105 0310 	add.w	r3, r5, #16
 800df74:	4413      	add	r3, r2
 800df76:	1d19      	adds	r1, r3, #4
              uint32_t left = (((uint32_t)ptr[0]) <<16) + (((uint32_t)ptr[1]));
 800df78:	889a      	ldrh	r2, [r3, #4]
 800df7a:	88db      	ldrh	r3, [r3, #6]
              uint32_t right = (((uint32_t)ptr[2]) <<16) + (((uint32_t)ptr[3]));
 800df7c:	8888      	ldrh	r0, [r1, #4]
          int i = 0;
          taskENTER_CRITICAL();
          for(i = 0; i < streamCaptureBuffer->size; i+=8)
            {
              uint16_t *ptr = (uint16_t *)&(streamCaptureBuffer->data[i]);
              uint32_t left = (((uint32_t)ptr[0]) <<16) + (((uint32_t)ptr[1]));
 800df7e:	eb03 4202 	add.w	r2, r3, r2, lsl #16
              uint32_t right = (((uint32_t)ptr[2]) <<16) + (((uint32_t)ptr[3]));
 800df82:	88cb      	ldrh	r3, [r1, #6]
 800df84:	eb03 4300 	add.w	r3, r3, r0, lsl #16
              xprintf("%3d; %9d; %9d; 0x%08x; 0x%08x;\n", i/8, left, right, left, right);
 800df88:	10e9      	asrs	r1, r5, #3
 800df8a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800df8e:	4811      	ldr	r0, [pc, #68]	; (800dfd4 <dTask+0x9f4>)
 800df90:	f7fa fe4a 	bl	8008c28 <xprintf>
      if(streamCaptureBuffer && (streamCaptureBuffer->offset == streamCaptureBuffer->size))
        {
          cfg.stats = 0;
          int i = 0;
          taskENTER_CRITICAL();
          for(i = 0; i < streamCaptureBuffer->size; i+=8)
 800df94:	3508      	adds	r5, #8
            {
              uint16_t *ptr = (uint16_t *)&(streamCaptureBuffer->data[i]);
              uint32_t left = (((uint32_t)ptr[0]) <<16) + (((uint32_t)ptr[1]));
              uint32_t right = (((uint32_t)ptr[2]) <<16) + (((uint32_t)ptr[3]));
              xprintf("%3d; %9d; %9d; 0x%08x; 0x%08x;\n", i/8, left, right, left, right);
              IWDG_ReloadCounter();
 800df96:	f005 f8d3 	bl	8013140 <IWDG_ReloadCounter>
 800df9a:	e7e5      	b.n	800df68 <dTask+0x988>
            }
          taskEXIT_CRITICAL();
 800df9c:	f7fc fa18 	bl	800a3d0 <vPortExitCritical>

        }
#endif
      i++;
 800dfa0:	f109 0901 	add.w	r9, r9, #1
 800dfa4:	f7ff bb24 	b.w	800d5f0 <dTask+0x10>
 800dfa8:	0803e115 	.word	0x0803e115
 800dfac:	0803e17d 	.word	0x0803e17d
 800dfb0:	10002cf4 	.word	0x10002cf4
 800dfb4:	10003498 	.word	0x10003498
 800dfb8:	0803e1f5 	.word	0x0803e1f5
 800dfbc:	0803e253 	.word	0x0803e253
 800dfc0:	0803de8b 	.word	0x0803de8b
 800dfc4:	10002018 	.word	0x10002018
 800dfc8:	0803e2c9 	.word	0x0803e2c9
 800dfcc:	0803e2a6 	.word	0x0803e2a6
 800dfd0:	10002e44 	.word	0x10002e44
 800dfd4:	0803e2a9 	.word	0x0803e2a9

0800dfd8 <LED_print>:
    }
}
static int LEDsMask = 0;
static int oldLEDsMask = -1;
void LED_print(int LEDNum, int value)
{
 800dfd8:	4a05      	ldr	r2, [pc, #20]	; (800dff0 <LED_print+0x18>)
 800dfda:	2301      	movs	r3, #1
  if(value)
    LEDsMask |= (1<<LEDNum);
 800dfdc:	4083      	lsls	r3, r0
 800dfde:	68d0      	ldr	r0, [r2, #12]
}
static int LEDsMask = 0;
static int oldLEDsMask = -1;
void LED_print(int LEDNum, int value)
{
  if(value)
 800dfe0:	b109      	cbz	r1, 800dfe6 <LED_print+0xe>
    LEDsMask |= (1<<LEDNum);
 800dfe2:	4303      	orrs	r3, r0
 800dfe4:	e001      	b.n	800dfea <LED_print+0x12>
  else
    LEDsMask &= ~(1<<LEDNum);
 800dfe6:	ea20 0303 	bic.w	r3, r0, r3
 800dfea:	60d3      	str	r3, [r2, #12]
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	10002cf4 	.word	0x10002cf4

0800dff4 <debugInit>:
      i++;
    }
}

void debugInit(void)
{
 800dff4:	b510      	push	{r4, lr}
 800dff6:	b086      	sub	sp, #24
  massert(xTaskCreate(dTask, (signed char *)"D", 0x1000 / 4, NULL, 1, NULL) == pdPASS);
 800dff8:	2300      	movs	r3, #0
 800dffa:	2401      	movs	r4, #1
 800dffc:	9303      	str	r3, [sp, #12]
 800dffe:	9302      	str	r3, [sp, #8]
 800e000:	9301      	str	r3, [sp, #4]
 800e002:	9400      	str	r4, [sp, #0]
 800e004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e008:	4909      	ldr	r1, [pc, #36]	; (800e030 <debugInit+0x3c>)
 800e00a:	480a      	ldr	r0, [pc, #40]	; (800e034 <debugInit+0x40>)
 800e00c:	f7fc fb88 	bl	800a720 <xTaskGenericCreate>
 800e010:	42a0      	cmp	r0, r4
 800e012:	d00a      	beq.n	800e02a <debugInit+0x36>
 800e014:	4b08      	ldr	r3, [pc, #32]	; (800e038 <debugInit+0x44>)
 800e016:	4909      	ldr	r1, [pc, #36]	; (800e03c <debugInit+0x48>)
 800e018:	4809      	ldr	r0, [pc, #36]	; (800e040 <debugInit+0x4c>)
 800e01a:	f240 128f 	movw	r2, #399	; 0x18f
 800e01e:	f7fa fe03 	bl	8008c28 <xprintf>
 800e022:	9405      	str	r4, [sp, #20]
 800e024:	9b05      	ldr	r3, [sp, #20]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d1fc      	bne.n	800e024 <debugInit+0x30>
}
 800e02a:	b006      	add	sp, #24
 800e02c:	bd10      	pop	{r4, pc}
 800e02e:	bf00      	nop
 800e030:	0803e9c9 	.word	0x0803e9c9
 800e034:	0800d5e1 	.word	0x0800d5e1
 800e038:	0803e2e4 	.word	0x0803e2e4
 800e03c:	0803ddf4 	.word	0x0803ddf4
 800e040:	0801d5dd 	.word	0x0801d5dd

0800e044 <wdogFeed>:
#include <watchdog.h>
#include <cfg.h>

static int fedMask = 0;
void wdogFeed(int mask)
{
 800e044:	b510      	push	{r4, lr}
 800e046:	4604      	mov	r4, r0
  taskENTER_CRITICAL();
 800e048:	f7fc f9b0 	bl	800a3ac <vPortEnterCritical>
  fedMask |= mask;
 800e04c:	4b03      	ldr	r3, [pc, #12]	; (800e05c <wdogFeed+0x18>)
 800e04e:	6818      	ldr	r0, [r3, #0]
 800e050:	4304      	orrs	r4, r0
 800e052:	601c      	str	r4, [r3, #0]
  taskEXIT_CRITICAL();
}
 800e054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static int fedMask = 0;
void wdogFeed(int mask)
{
  taskENTER_CRITICAL();
  fedMask |= mask;
  taskEXIT_CRITICAL();
 800e058:	f7fc b9ba 	b.w	800a3d0 <vPortExitCritical>
 800e05c:	10002d04 	.word	0x10002d04

0800e060 <watchdogReset>:
void __attribute__((weak))wdogAssert(int value)
{
}
static int resetActive = 0;
void watchdogReset(void)
{
 800e060:	b508      	push	{r3, lr}
  IWDG_ReloadCounter();
 800e062:	f005 f86d 	bl	8013140 <IWDG_ReloadCounter>
  resetActive = 1;
 800e066:	4b02      	ldr	r3, [pc, #8]	; (800e070 <watchdogReset+0x10>)
 800e068:	2201      	movs	r2, #1
 800e06a:	605a      	str	r2, [r3, #4]
 800e06c:	bd08      	pop	{r3, pc}
 800e06e:	bf00      	nop
 800e070:	10002d04 	.word	0x10002d04

0800e074 <wdogFail>:
      else
        checkTime--;
    }
}
void __attribute__((weak))wdogFail(void)
{
 800e074:	e7fe      	b.n	800e074 <wdogFail>
	...

0800e078 <watchdogTask>:
  IWDG_ReloadCounter();
  resetActive = 1;
}

static void watchdogTask(void *pvParameters)
{
 800e078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
 800e07a:	f245 5055 	movw	r0, #21845	; 0x5555
 800e07e:	f005 f82b 	bl	80130d8 <IWDG_WriteAccessCmd>
  IWDG_SetPrescaler(IWDG_Prescaler_256);
 800e082:	2006      	movs	r0, #6
 800e084:	f005 f83c 	bl	8013100 <IWDG_SetPrescaler>
  IWDG_SetReload(2*256);
 800e088:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e08c:	f005 f848 	bl	8013120 <IWDG_SetReload>
    {
      wdogAssert(0);
      mdelay(12);
      wdogAssert(1);
      mdelay(13);
      if(!resetActive)
 800e090:	4d18      	ldr	r5, [pc, #96]	; (800e0f4 <watchdogTask+0x7c>)
        IWDG_ReloadCounter();
      if(checkTime == 0)
        {
          if(fedMask != WATCHDOG_EXPECTED)
            {
              dprintf(LL_ERROR, "\n!!!!!!Some tasks did not respond (fed mask %x). Turn off the power!!!!!\n", fedMask);
 800e092:	4f19      	ldr	r7, [pc, #100]	; (800e0f8 <watchdogTask+0x80>)
{

  IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
  IWDG_SetPrescaler(IWDG_Prescaler_256);
  IWDG_SetReload(2*256);
  IWDG_Enable();
 800e094:	f005 f85c 	bl	8013150 <IWDG_Enable>
  IWDG_ReloadCounter();
 800e098:	f005 f852 	bl	8013140 <IWDG_ReloadCounter>

  systemInit();
 800e09c:	f7fa faac 	bl	80085f8 <systemInit>

  int checkTime = WATCHDOG_TIMEOUT*40;
 800e0a0:	f44f 7448 	mov.w	r4, #800	; 0x320
 800e0a4:	462e      	mov	r6, r5
  while (1)
    {
      wdogAssert(0);
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	f001 feb2 	bl	800fe10 <wdogAssert>
      mdelay(12);
 800e0ac:	200c      	movs	r0, #12
 800e0ae:	f7fc fd2b 	bl	800ab08 <vTaskDelay>
      wdogAssert(1);
 800e0b2:	2001      	movs	r0, #1
 800e0b4:	f001 feac 	bl	800fe10 <wdogAssert>
      mdelay(13);
 800e0b8:	200d      	movs	r0, #13
 800e0ba:	f7fc fd25 	bl	800ab08 <vTaskDelay>
      if(!resetActive)
 800e0be:	686b      	ldr	r3, [r5, #4]
 800e0c0:	b90b      	cbnz	r3, 800e0c6 <watchdogTask+0x4e>
        IWDG_ReloadCounter();
 800e0c2:	f005 f83d 	bl	8013140 <IWDG_ReloadCounter>
      if(checkTime == 0)
 800e0c6:	b99c      	cbnz	r4, 800e0f0 <watchdogTask+0x78>
        {
          if(fedMask != WATCHDOG_EXPECTED)
 800e0c8:	6831      	ldr	r1, [r6, #0]
 800e0ca:	292f      	cmp	r1, #47	; 0x2f
 800e0cc:	d007      	beq.n	800e0de <watchdogTask+0x66>
            {
              dprintf(LL_ERROR, "\n!!!!!!Some tasks did not respond (fed mask %x). Turn off the power!!!!!\n", fedMask);
 800e0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	db02      	blt.n	800e0da <watchdogTask+0x62>
 800e0d4:	4809      	ldr	r0, [pc, #36]	; (800e0fc <watchdogTask+0x84>)
 800e0d6:	f7fa fda7 	bl	8008c28 <xprintf>
              wdogFail();
 800e0da:	f7ff ffcb 	bl	800e074 <wdogFail>
            }
          taskENTER_CRITICAL();
 800e0de:	f7fc f965 	bl	800a3ac <vPortEnterCritical>
          fedMask = 0;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	6033      	str	r3, [r6, #0]
          taskEXIT_CRITICAL();
          checkTime = WATCHDOG_TIMEOUT*40;
 800e0e6:	f44f 7448 	mov.w	r4, #800	; 0x320
              dprintf(LL_ERROR, "\n!!!!!!Some tasks did not respond (fed mask %x). Turn off the power!!!!!\n", fedMask);
              wdogFail();
            }
          taskENTER_CRITICAL();
          fedMask = 0;
          taskEXIT_CRITICAL();
 800e0ea:	f7fc f971 	bl	800a3d0 <vPortExitCritical>
 800e0ee:	e7da      	b.n	800e0a6 <watchdogTask+0x2e>
          checkTime = WATCHDOG_TIMEOUT*40;
        }
      else
        checkTime--;
 800e0f0:	3c01      	subs	r4, #1
 800e0f2:	e7d8      	b.n	800e0a6 <watchdogTask+0x2e>
 800e0f4:	10002d04 	.word	0x10002d04
 800e0f8:	10001000 	.word	0x10001000
 800e0fc:	0803e33d 	.word	0x0803e33d

0800e100 <watchdogInit>:
{
  while(1);
}

void watchdogInit(void)
{
 800e100:	b510      	push	{r4, lr}
 800e102:	b086      	sub	sp, #24
  massert(xTaskCreate(watchdogTask, (signed char *)"Watchdog", 1024 / 4, NULL, 1, NULL) == pdPASS);
 800e104:	2300      	movs	r3, #0
 800e106:	2401      	movs	r4, #1
 800e108:	9303      	str	r3, [sp, #12]
 800e10a:	9302      	str	r3, [sp, #8]
 800e10c:	9301      	str	r3, [sp, #4]
 800e10e:	9400      	str	r4, [sp, #0]
 800e110:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e114:	4908      	ldr	r1, [pc, #32]	; (800e138 <watchdogInit+0x38>)
 800e116:	4809      	ldr	r0, [pc, #36]	; (800e13c <watchdogInit+0x3c>)
 800e118:	f7fc fb02 	bl	800a720 <xTaskGenericCreate>
 800e11c:	42a0      	cmp	r0, r4
 800e11e:	d009      	beq.n	800e134 <watchdogInit+0x34>
 800e120:	4b07      	ldr	r3, [pc, #28]	; (800e140 <watchdogInit+0x40>)
 800e122:	4908      	ldr	r1, [pc, #32]	; (800e144 <watchdogInit+0x44>)
 800e124:	4808      	ldr	r0, [pc, #32]	; (800e148 <watchdogInit+0x48>)
 800e126:	224c      	movs	r2, #76	; 0x4c
 800e128:	f7fa fd7e 	bl	8008c28 <xprintf>
 800e12c:	9405      	str	r4, [sp, #20]
 800e12e:	9b05      	ldr	r3, [sp, #20]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1fc      	bne.n	800e12e <watchdogInit+0x2e>
}
 800e134:	b006      	add	sp, #24
 800e136:	bd10      	pop	{r4, pc}
 800e138:	0803e387 	.word	0x0803e387
 800e13c:	0800e079 	.word	0x0800e079
 800e140:	0803e390 	.word	0x0803e390
 800e144:	0803e330 	.word	0x0803e330
 800e148:	0801d5dd 	.word	0x0801d5dd

0800e14c <SPI1_IRQHandler>:
USART_HANDLER(CEN_PORT, USART1);
#endif
USART_HANDLER(PER1_PORT, USART2);
USART_HANDLER(PER2_PORT, UART4);

SPI_HANDLER(SPI1, 0);
 800e14c:	b513      	push	{r0, r1, r4, lr}
 800e14e:	2400      	movs	r4, #0
 800e150:	2171      	movs	r1, #113	; 0x71
 800e152:	480c      	ldr	r0, [pc, #48]	; (800e184 <SPI1_IRQHandler+0x38>)
 800e154:	9401      	str	r4, [sp, #4]
 800e156:	f003 fcbf 	bl	8011ad8 <SPI_I2S_GetITStatus>
 800e15a:	b188      	cbz	r0, 800e180 <SPI1_IRQHandler+0x34>
 800e15c:	4622      	mov	r2, r4
 800e15e:	2171      	movs	r1, #113	; 0x71
 800e160:	4808      	ldr	r0, [pc, #32]	; (800e184 <SPI1_IRQHandler+0x38>)
 800e162:	f003 fc23 	bl	80119ac <SPI_I2S_ITConfig>
 800e166:	4808      	ldr	r0, [pc, #32]	; (800e188 <SPI1_IRQHandler+0x3c>)
 800e168:	4623      	mov	r3, r4
 800e16a:	aa01      	add	r2, sp, #4
 800e16c:	4621      	mov	r1, r4
 800e16e:	6980      	ldr	r0, [r0, #24]
 800e170:	f7fd f809 	bl	800b186 <xQueueGenericSendFromISR>
 800e174:	9b01      	ldr	r3, [sp, #4]
 800e176:	b11b      	cbz	r3, 800e180 <SPI1_IRQHandler+0x34>
 800e178:	4b04      	ldr	r3, [pc, #16]	; (800e18c <SPI1_IRQHandler+0x40>)
 800e17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e17e:	601a      	str	r2, [r3, #0]
 800e180:	b002      	add	sp, #8
 800e182:	bd10      	pop	{r4, pc}
 800e184:	40013000 	.word	0x40013000
 800e188:	1000201c 	.word	0x1000201c
 800e18c:	e000ed04 	.word	0xe000ed04

0800e190 <UART4_IRQHandler>:
USART_HANDLER(CEN_PORT, USART3);
#else
USART_HANDLER(CEN_PORT, USART1);
#endif
USART_HANDLER(PER1_PORT, USART2);
USART_HANDLER(PER2_PORT, UART4);
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	f240 7127 	movw	r1, #1831	; 0x727
 800e196:	481e      	ldr	r0, [pc, #120]	; (800e210 <UART4_IRQHandler+0x80>)
 800e198:	f003 f8b2 	bl	8011300 <USART_GetITStatus>
 800e19c:	b198      	cbz	r0, 800e1c6 <UART4_IRQHandler+0x36>
 800e19e:	4b1d      	ldr	r3, [pc, #116]	; (800e214 <UART4_IRQHandler+0x84>)
 800e1a0:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 800e1a4:	f7fd feea 	bl	800bf7c <rrGet>
 800e1a8:	1e01      	subs	r1, r0, #0
 800e1aa:	db04      	blt.n	800e1b6 <UART4_IRQHandler+0x26>
 800e1ac:	b289      	uxth	r1, r1
 800e1ae:	4818      	ldr	r0, [pc, #96]	; (800e210 <UART4_IRQHandler+0x80>)
 800e1b0:	f002 ff46 	bl	8011040 <USART_SendData>
 800e1b4:	e005      	b.n	800e1c2 <UART4_IRQHandler+0x32>
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	f240 7127 	movw	r1, #1831	; 0x727
 800e1bc:	4814      	ldr	r0, [pc, #80]	; (800e210 <UART4_IRQHandler+0x80>)
 800e1be:	f002 ffa3 	bl	8011108 <USART_ITConfig>
 800e1c2:	2401      	movs	r4, #1
 800e1c4:	e000      	b.n	800e1c8 <UART4_IRQHandler+0x38>
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	4e12      	ldr	r6, [pc, #72]	; (800e214 <UART4_IRQHandler+0x84>)
 800e1ca:	4811      	ldr	r0, [pc, #68]	; (800e210 <UART4_IRQHandler+0x80>)
 800e1cc:	f240 5125 	movw	r1, #1317	; 0x525
 800e1d0:	f003 f896 	bl	8011300 <USART_GetITStatus>
 800e1d4:	4601      	mov	r1, r0
 800e1d6:	b190      	cbz	r0, 800e1fe <UART4_IRQHandler+0x6e>
 800e1d8:	f8d6 50d0 	ldr.w	r5, [r6, #208]	; 0xd0
 800e1dc:	b15d      	cbz	r5, 800e1f6 <UART4_IRQHandler+0x66>
 800e1de:	480c      	ldr	r0, [pc, #48]	; (800e210 <UART4_IRQHandler+0x80>)
 800e1e0:	f002 ff66 	bl	80110b0 <USART_ReceiveData>
 800e1e4:	f044 0402 	orr.w	r4, r4, #2
 800e1e8:	b2c1      	uxtb	r1, r0
 800e1ea:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 800e1ee:	b2e4      	uxtb	r4, r4
 800e1f0:	f7fd fee4 	bl	800bfbc <rrPut>
 800e1f4:	e7e9      	b.n	800e1ca <UART4_IRQHandler+0x3a>
 800e1f6:	4806      	ldr	r0, [pc, #24]	; (800e210 <UART4_IRQHandler+0x80>)
 800e1f8:	f002 ff5a 	bl	80110b0 <USART_ReceiveData>
 800e1fc:	e7e5      	b.n	800e1ca <UART4_IRQHandler+0x3a>
 800e1fe:	b12c      	cbz	r4, 800e20c <UART4_IRQHandler+0x7c>
 800e200:	4622      	mov	r2, r4
 800e202:	2002      	movs	r0, #2
 800e204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e208:	f7fd be3a 	b.w	800be80 <portDataTxRxComplete>
 800e20c:	bd70      	pop	{r4, r5, r6, pc}
 800e20e:	bf00      	nop
 800e210:	40004c00 	.word	0x40004c00
 800e214:	1000201c 	.word	0x1000201c

0800e218 <USART2_IRQHandler>:
#ifndef CEN_ALTER
USART_HANDLER(CEN_PORT, USART3);
#else
USART_HANDLER(CEN_PORT, USART1);
#endif
USART_HANDLER(PER1_PORT, USART2);
 800e218:	b570      	push	{r4, r5, r6, lr}
 800e21a:	f240 7127 	movw	r1, #1831	; 0x727
 800e21e:	481e      	ldr	r0, [pc, #120]	; (800e298 <USART2_IRQHandler+0x80>)
 800e220:	f003 f86e 	bl	8011300 <USART_GetITStatus>
 800e224:	b198      	cbz	r0, 800e24e <USART2_IRQHandler+0x36>
 800e226:	4b1d      	ldr	r3, [pc, #116]	; (800e29c <USART2_IRQHandler+0x84>)
 800e228:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800e22c:	f7fd fea6 	bl	800bf7c <rrGet>
 800e230:	1e01      	subs	r1, r0, #0
 800e232:	db04      	blt.n	800e23e <USART2_IRQHandler+0x26>
 800e234:	b289      	uxth	r1, r1
 800e236:	4818      	ldr	r0, [pc, #96]	; (800e298 <USART2_IRQHandler+0x80>)
 800e238:	f002 ff02 	bl	8011040 <USART_SendData>
 800e23c:	e005      	b.n	800e24a <USART2_IRQHandler+0x32>
 800e23e:	2200      	movs	r2, #0
 800e240:	f240 7127 	movw	r1, #1831	; 0x727
 800e244:	4814      	ldr	r0, [pc, #80]	; (800e298 <USART2_IRQHandler+0x80>)
 800e246:	f002 ff5f 	bl	8011108 <USART_ITConfig>
 800e24a:	2401      	movs	r4, #1
 800e24c:	e000      	b.n	800e250 <USART2_IRQHandler+0x38>
 800e24e:	4604      	mov	r4, r0
 800e250:	4e12      	ldr	r6, [pc, #72]	; (800e29c <USART2_IRQHandler+0x84>)
 800e252:	4811      	ldr	r0, [pc, #68]	; (800e298 <USART2_IRQHandler+0x80>)
 800e254:	f240 5125 	movw	r1, #1317	; 0x525
 800e258:	f003 f852 	bl	8011300 <USART_GetITStatus>
 800e25c:	4601      	mov	r1, r0
 800e25e:	b190      	cbz	r0, 800e286 <USART2_IRQHandler+0x6e>
 800e260:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
 800e264:	b15d      	cbz	r5, 800e27e <USART2_IRQHandler+0x66>
 800e266:	480c      	ldr	r0, [pc, #48]	; (800e298 <USART2_IRQHandler+0x80>)
 800e268:	f002 ff22 	bl	80110b0 <USART_ReceiveData>
 800e26c:	f044 0402 	orr.w	r4, r4, #2
 800e270:	b2c1      	uxtb	r1, r0
 800e272:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 800e276:	b2e4      	uxtb	r4, r4
 800e278:	f7fd fea0 	bl	800bfbc <rrPut>
 800e27c:	e7e9      	b.n	800e252 <USART2_IRQHandler+0x3a>
 800e27e:	4806      	ldr	r0, [pc, #24]	; (800e298 <USART2_IRQHandler+0x80>)
 800e280:	f002 ff16 	bl	80110b0 <USART_ReceiveData>
 800e284:	e7e5      	b.n	800e252 <USART2_IRQHandler+0x3a>
 800e286:	b12c      	cbz	r4, 800e294 <USART2_IRQHandler+0x7c>
 800e288:	4622      	mov	r2, r4
 800e28a:	2001      	movs	r0, #1
 800e28c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e290:	f7fd bdf6 	b.w	800be80 <portDataTxRxComplete>
 800e294:	bd70      	pop	{r4, r5, r6, pc}
 800e296:	bf00      	nop
 800e298:	40004400 	.word	0x40004400
 800e29c:	1000201c 	.word	0x1000201c

0800e2a0 <USART3_IRQHandler>:
//Definicje handlerow przerwan
///////////////////////////////////////////////////////////////////////////////////////

//Utworz handlery przerwan dla SPI i UART
#ifndef CEN_ALTER
USART_HANDLER(CEN_PORT, USART3);
 800e2a0:	b570      	push	{r4, r5, r6, lr}
 800e2a2:	f240 7127 	movw	r1, #1831	; 0x727
 800e2a6:	481c      	ldr	r0, [pc, #112]	; (800e318 <USART3_IRQHandler+0x78>)
 800e2a8:	f003 f82a 	bl	8011300 <USART_GetITStatus>
 800e2ac:	b190      	cbz	r0, 800e2d4 <USART3_IRQHandler+0x34>
 800e2ae:	4b1b      	ldr	r3, [pc, #108]	; (800e31c <USART3_IRQHandler+0x7c>)
 800e2b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e2b2:	f7fd fe63 	bl	800bf7c <rrGet>
 800e2b6:	1e01      	subs	r1, r0, #0
 800e2b8:	db04      	blt.n	800e2c4 <USART3_IRQHandler+0x24>
 800e2ba:	b289      	uxth	r1, r1
 800e2bc:	4816      	ldr	r0, [pc, #88]	; (800e318 <USART3_IRQHandler+0x78>)
 800e2be:	f002 febf 	bl	8011040 <USART_SendData>
 800e2c2:	e005      	b.n	800e2d0 <USART3_IRQHandler+0x30>
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f240 7127 	movw	r1, #1831	; 0x727
 800e2ca:	4813      	ldr	r0, [pc, #76]	; (800e318 <USART3_IRQHandler+0x78>)
 800e2cc:	f002 ff1c 	bl	8011108 <USART_ITConfig>
 800e2d0:	2401      	movs	r4, #1
 800e2d2:	e000      	b.n	800e2d6 <USART3_IRQHandler+0x36>
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	4e11      	ldr	r6, [pc, #68]	; (800e31c <USART3_IRQHandler+0x7c>)
 800e2d8:	480f      	ldr	r0, [pc, #60]	; (800e318 <USART3_IRQHandler+0x78>)
 800e2da:	f240 5125 	movw	r1, #1317	; 0x525
 800e2de:	f003 f80f 	bl	8011300 <USART_GetITStatus>
 800e2e2:	4601      	mov	r1, r0
 800e2e4:	b188      	cbz	r0, 800e30a <USART3_IRQHandler+0x6a>
 800e2e6:	6b35      	ldr	r5, [r6, #48]	; 0x30
 800e2e8:	b15d      	cbz	r5, 800e302 <USART3_IRQHandler+0x62>
 800e2ea:	480b      	ldr	r0, [pc, #44]	; (800e318 <USART3_IRQHandler+0x78>)
 800e2ec:	f002 fee0 	bl	80110b0 <USART_ReceiveData>
 800e2f0:	f044 0402 	orr.w	r4, r4, #2
 800e2f4:	b2c1      	uxtb	r1, r0
 800e2f6:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 800e2fa:	b2e4      	uxtb	r4, r4
 800e2fc:	f7fd fe5e 	bl	800bfbc <rrPut>
 800e300:	e7ea      	b.n	800e2d8 <USART3_IRQHandler+0x38>
 800e302:	4805      	ldr	r0, [pc, #20]	; (800e318 <USART3_IRQHandler+0x78>)
 800e304:	f002 fed4 	bl	80110b0 <USART_ReceiveData>
 800e308:	e7e6      	b.n	800e2d8 <USART3_IRQHandler+0x38>
 800e30a:	b124      	cbz	r4, 800e316 <USART3_IRQHandler+0x76>
 800e30c:	4622      	mov	r2, r4
 800e30e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e312:	f7fd bdb5 	b.w	800be80 <portDataTxRxComplete>
 800e316:	bd70      	pop	{r4, r5, r6, pc}
 800e318:	40004800 	.word	0x40004800
 800e31c:	1000201c 	.word	0x1000201c

0800e320 <initWM88xxInterface>:
  [WM8804_1] = { {GPIOG, GPIO_Pin_10} },
  [WM8804_2] = { {GPIOG, GPIO_Pin_11} }
};

static void initWM88xxInterface(spdifChip_t wmChip, uint32_t rxChannel, wm880x_audioMode_t wm880x_mode )
{
 800e320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e322:	4604      	mov	r4, r0
 800e324:	460f      	mov	r7, r1
 800e326:	4615      	mov	r5, r2
  char data[4];

  int timeout = 10000;
 800e328:	f242 7610 	movw	r6, #10000	; 0x2710
  while ( ( data[0] != 0x05 || data[1] != 0x88 ) && timeout-- )
 800e32c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e330:	2905      	cmp	r1, #5
 800e332:	d103      	bne.n	800e33c <initWM88xxInterface+0x1c>
 800e334:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e338:	2b88      	cmp	r3, #136	; 0x88
 800e33a:	d007      	beq.n	800e34c <initWM88xxInterface+0x2c>
 800e33c:	f116 36ff 	adds.w	r6, r6, #4294967295
 800e340:	d304      	bcc.n	800e34c <initWM88xxInterface+0x2c>
    {
      WM88XXReadID(wmChip, data);
 800e342:	a901      	add	r1, sp, #4
 800e344:	4620      	mov	r0, r4
 800e346:	f001 ff41 	bl	80101cc <WM88XXReadID>
 800e34a:	e7ef      	b.n	800e32c <initWM88xxInterface+0xc>
    }
  xprintf("ID1: %x ID2: %x REV: %x\n", data[0], data[1], data[2]);
 800e34c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e350:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e354:	483b      	ldr	r0, [pc, #236]	; (800e444 <initWM88xxInterface+0x124>)
 800e356:	f7fa fc67 	bl	8008c28 <xprintf>
  if (timeout <= 0)
 800e35a:	2e00      	cmp	r6, #0
 800e35c:	dc04      	bgt.n	800e368 <initWM88xxInterface+0x48>
    {
      xprintf("\e[31m""Chip %d not found\e[m\n", wmChip);
 800e35e:	4621      	mov	r1, r4
 800e360:	4839      	ldr	r0, [pc, #228]	; (800e448 <initWM88xxInterface+0x128>)
 800e362:	f7fa fc61 	bl	8008c28 <xprintf>
 800e366:	e06a      	b.n	800e43e <initWM88xxInterface+0x11e>
      return;
    }

  //Configure PLL
  WM88XXSetPLLMul(wmChip); //94.3104MHz/25MHz/2
 800e368:	4620      	mov	r0, r4
 800e36a:	f001 ff91 	bl	8010290 <WM88XXSetPLLMul>
  WM88XXWriteRegister(wmChip, WM8805_REG_PWRDN, PWRDN_SPDIFTXPD | PWRDN_SPDIFRXPD);
 800e36e:	2206      	movs	r2, #6
 800e370:	211e      	movs	r1, #30
 800e372:	4620      	mov	r0, r4
 800e374:	f001 fe46 	bl	8010004 <WM88XXWriteRegister>
  WM88XXWriteRegister(wmChip, WM8805_REG_SPDMODE, SPDMODE_CMOS_INPUT);
 800e378:	2200      	movs	r2, #0
 800e37a:	2109      	movs	r1, #9
 800e37c:	4620      	mov	r0, r4
 800e37e:	f001 fe41 	bl	8010004 <WM88XXWriteRegister>
  mdelay(10);
 800e382:	200a      	movs	r0, #10
 800e384:	f7fc fbc0 	bl	800ab08 <vTaskDelay>

  switch (wmChip)
 800e388:	2c01      	cmp	r4, #1
 800e38a:	d80e      	bhi.n	800e3aa <initWM88xxInterface+0x8a>
    {
    case WM8805_1:
    case WM8805_2:
      WM88XXSetReceiverChannel(wmChip, rxChannel);
 800e38c:	4639      	mov	r1, r7
 800e38e:	4620      	mov	r0, r4
 800e390:	f002 f840 	bl	8010414 <WM88XXSetReceiverChannel>
      WM88XXWriteRegister(wmChip, WM8805_REG_PWRDN, PWRDN_SPDIFTXPD );
 800e394:	2204      	movs	r2, #4
 800e396:	211e      	movs	r1, #30
 800e398:	4620      	mov	r0, r4
 800e39a:	f001 fe33 	bl	8010004 <WM88XXWriteRegister>
      xprintf("Enable SPDIF Receiver chip: %d\n", wmChip);
 800e39e:	4621      	mov	r1, r4
 800e3a0:	482a      	ldr	r0, [pc, #168]	; (800e44c <initWM88xxInterface+0x12c>)
 800e3a2:	f7fa fc41 	bl	8008c28 <xprintf>
      WM88XXSetInterruptMask(wmChip, (char)(~IRQMASK_UPD_REC_FREQ));//Enable only UPD_REC_FREQ
 800e3a6:	217f      	movs	r1, #127	; 0x7f
 800e3a8:	e00d      	b.n	800e3c6 <initWM88xxInterface+0xa6>
      break;

    default:
      WM88XXSetTransmitterInput(wmChip, WM88XX_TX_INPUT_AIF);
 800e3aa:	2140      	movs	r1, #64	; 0x40
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	f001 ffb9 	bl	8010324 <WM88XXSetTransmitterInput>
      WM88XXWriteRegister(wmChip, WM8805_REG_PWRDN, PWRDN_SPDIFRXPD);
 800e3b2:	2202      	movs	r2, #2
 800e3b4:	211e      	movs	r1, #30
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f001 fe24 	bl	8010004 <WM88XXWriteRegister>
      xprintf("Enable SPDIF Transmitter chip: %d\n", wmChip);
 800e3bc:	4621      	mov	r1, r4
 800e3be:	4824      	ldr	r0, [pc, #144]	; (800e450 <initWM88xxInterface+0x130>)
 800e3c0:	f7fa fc32 	bl	8008c28 <xprintf>
      WM88XXSetInterruptMask(wmChip, 0xFF);//Disable all interrupts
 800e3c4:	21ff      	movs	r1, #255	; 0xff
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f002 f816 	bl	80103f8 <WM88XXSetInterruptMask>
      break;
    }

  xprintf("PLL set\n");
 800e3cc:	4821      	ldr	r0, [pc, #132]	; (800e454 <initWM88xxInterface+0x134>)
 800e3ce:	f7fa fc2b 	bl	8008c28 <xprintf>

  switch (wmChip)
 800e3d2:	2c01      	cmp	r4, #1
 800e3d4:	d816      	bhi.n	800e404 <initWM88xxInterface+0xe4>
    {
    case WM8805_1:
    case WM8805_2:
      switch (wm880x_mode)
 800e3d6:	b13d      	cbz	r5, 800e3e8 <initWM88xxInterface+0xc8>
 800e3d8:	2d01      	cmp	r5, #1
 800e3da:	d10d      	bne.n	800e3f8 <initWM88xxInterface+0xd8>
          WM88XXSetAIFRXMode(wmChip, AIFRX_I2S_MODE | AIFRX_WL_24BITS_A | AIFRX_SYNC_OFF);
          WM88XXSetAIFTXMode(wmChip, AIFTX_I2S_MODE | AIFTX_WL_24BITS_A);
          break;

        case WM880x_DSP:
          WM88XXSetAIFRXMode(wmChip, AIFRX_DSP_MODE | AIFRX_WL_16BITS | AIFRX_LRP_INVERT | AIFRX_SYNC_OFF);
 800e3dc:	21a3      	movs	r1, #163	; 0xa3
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f001 ffae 	bl	8010340 <WM88XXSetAIFRXMode>
          WM88XXSetAIFTXMode(wmChip, AIFTX_DSP_MODE | AIFTX_WL_16BITS | AIFTX_LRP_INVERT);
 800e3e4:	2123      	movs	r1, #35	; 0x23
 800e3e6:	e004      	b.n	800e3f2 <initWM88xxInterface+0xd2>
    case WM8805_1:
    case WM8805_2:
      switch (wm880x_mode)
        {
        case WM880x_I2S:
          WM88XXSetAIFRXMode(wmChip, AIFRX_I2S_MODE | AIFRX_WL_24BITS_A | AIFRX_SYNC_OFF);
 800e3e8:	218e      	movs	r1, #142	; 0x8e
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	f001 ffa8 	bl	8010340 <WM88XXSetAIFRXMode>
          WM88XXSetAIFTXMode(wmChip, AIFTX_I2S_MODE | AIFTX_WL_24BITS_A);
 800e3f0:	210e      	movs	r1, #14
          break;

        case WM880x_DSP:
          WM88XXSetAIFRXMode(wmChip, AIFRX_DSP_MODE | AIFRX_WL_16BITS | AIFRX_LRP_INVERT | AIFRX_SYNC_OFF);
          WM88XXSetAIFTXMode(wmChip, AIFTX_DSP_MODE | AIFTX_WL_16BITS | AIFTX_LRP_INVERT);
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f001 ffae 	bl	8010354 <WM88XXSetAIFTXMode>
          break;
        }
      //Enable master mode and enable MCLK pin as output
      WM88XXSetMode(wmChip, WM88XX_MASTER_MODE);
 800e3f8:	2140      	movs	r1, #64	; 0x40
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f001 ffb8 	bl	8010370 <WM88XXSetMode>
      //Continuous mode disable and enable 192kHz support
      WM88XXWriteRegister(wmChip, WM8805_REG_SPDRX1, SPDRX1_SPD_192K_EN);
 800e400:	2280      	movs	r2, #128	; 0x80
 800e402:	e015      	b.n	800e430 <initWM88xxInterface+0x110>
      break;

    default:
      switch (wm880x_mode)
 800e404:	b13d      	cbz	r5, 800e416 <initWM88xxInterface+0xf6>
 800e406:	2d01      	cmp	r5, #1
 800e408:	d10d      	bne.n	800e426 <initWM88xxInterface+0x106>
          WM88XXSetAIFTXMode(wmChip, AIFTX_I2S_MODE | AIFTX_WL_16BITS );
          WM88XXSetAIFRXMode(wmChip, AIFRX_I2S_MODE | AIFRX_WL_16BITS );
          break;

        case WM880x_DSP:
          WM88XXSetAIFTXMode(wmChip, AIFTX_DSP_MODE | AIFTX_WL_16BITS | AIFTX_LRP_INVERT);
 800e40a:	2123      	movs	r1, #35	; 0x23
 800e40c:	4620      	mov	r0, r4
 800e40e:	f001 ffa1 	bl	8010354 <WM88XXSetAIFTXMode>
          WM88XXSetAIFRXMode(wmChip, AIFRX_DSP_MODE | AIFRX_WL_16BITS | AIFRX_LRP_INVERT);
 800e412:	2123      	movs	r1, #35	; 0x23
 800e414:	e004      	b.n	800e420 <initWM88xxInterface+0x100>

    default:
      switch (wm880x_mode)
        {
        case WM880x_I2S:
          WM88XXSetAIFTXMode(wmChip, AIFTX_I2S_MODE | AIFTX_WL_16BITS );
 800e416:	2102      	movs	r1, #2
 800e418:	4620      	mov	r0, r4
 800e41a:	f001 ff9b 	bl	8010354 <WM88XXSetAIFTXMode>
          WM88XXSetAIFRXMode(wmChip, AIFRX_I2S_MODE | AIFRX_WL_16BITS );
 800e41e:	2102      	movs	r1, #2
          break;

        case WM880x_DSP:
          WM88XXSetAIFTXMode(wmChip, AIFTX_DSP_MODE | AIFTX_WL_16BITS | AIFTX_LRP_INVERT);
          WM88XXSetAIFRXMode(wmChip, AIFRX_DSP_MODE | AIFRX_WL_16BITS | AIFRX_LRP_INVERT);
 800e420:	4620      	mov	r0, r4
 800e422:	f001 ff8d 	bl	8010340 <WM88XXSetAIFRXMode>
          break;
        }
      //Enable slave mode and enable MCLK pin as input
      WM88XXSetMode(wmChip, WM88XX_SLAVE_MODE);
 800e426:	2100      	movs	r1, #0
 800e428:	4620      	mov	r0, r4
 800e42a:	f001 ffa1 	bl	8010370 <WM88XXSetMode>
      //Continuous mode disable
      WM88XXWriteRegister(wmChip, WM8805_REG_SPDRX1, 0x00);
 800e42e:	2200      	movs	r2, #0
 800e430:	211d      	movs	r1, #29
 800e432:	4620      	mov	r0, r4
 800e434:	f001 fde6 	bl	8010004 <WM88XXWriteRegister>
      break;
    }

  WM88XXIrqProc(wmChip);
 800e438:	4620      	mov	r0, r4
 800e43a:	f001 ffe1 	bl	8010400 <WM88XXIrqProc>
      xprintf("rx4. 0x%x\n",  WM88XXReadRegister(wmChip, WM8805_REG_RXCH4));
      xprintf("rx5. 0x%x\n",  WM88XXReadRegister(wmChip, WM8805_REG_RXCH5));

      _my_delay(10000);
    }*/
}
 800e43e:	b003      	add	sp, #12
 800e440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e442:	bf00      	nop
 800e444:	0803e47e 	.word	0x0803e47e
 800e448:	0803e497 	.word	0x0803e497
 800e44c:	0803e4b2 	.word	0x0803e4b2
 800e450:	0803e4d2 	.word	0x0803e4d2
 800e454:	0803e4f5 	.word	0x0803e4f5

0800e458 <radio_int2_irq>:
      EXTI_ClearITPendingBit(EXTI_Line4);
    }
}

void radio_int2_irq(void)
{
 800e458:	b510      	push	{r4, lr}
  uint32_t extiLine = EXTI_Line5;
  if(cfg.proto & 0x40)
 800e45a:	4b0a      	ldr	r3, [pc, #40]	; (800e484 <radio_int2_irq+0x2c>)
 800e45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e45e:	f013 0f40 	tst.w	r3, #64	; 0x40
    extiLine = EXTI_Line1;
 800e462:	bf0c      	ite	eq
 800e464:	2420      	moveq	r4, #32
 800e466:	2402      	movne	r4, #2
    
    // void EXTI0_IRQHandler(void)
  if (EXTI_GetITStatus(extiLine) != RESET)
 800e468:	4620      	mov	r0, r4
 800e46a:	f004 fad1 	bl	8012a10 <EXTI_GetITStatus>
 800e46e:	b140      	cbz	r0, 800e482 <radio_int2_irq+0x2a>
    {
      SPIevent(PORT_INVALID, SPI_EV_TYPE_DATA_READY);
 800e470:	2100      	movs	r1, #0
 800e472:	200a      	movs	r0, #10
 800e474:	f7fd fe94 	bl	800c1a0 <SPIevent>
      /* Clear the EXTI line 0 pending bit */
      EXTI_ClearITPendingBit(extiLine);
 800e478:	4620      	mov	r0, r4
    }
}
 800e47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // void EXTI0_IRQHandler(void)
  if (EXTI_GetITStatus(extiLine) != RESET)
    {
      SPIevent(PORT_INVALID, SPI_EV_TYPE_DATA_READY);
      /* Clear the EXTI line 0 pending bit */
      EXTI_ClearITPendingBit(extiLine);
 800e47e:	f004 bb13 	b.w	8012aa8 <EXTI_ClearITPendingBit>
 800e482:	bd10      	pop	{r4, pc}
 800e484:	10001000 	.word	0x10001000

0800e488 <radio_int1_irq>:
    }
}

//radio interrupts
void radio_int1_irq(void)
{
 800e488:	b508      	push	{r3, lr}
  // void EXTI0_IRQHandler(void)
  if (EXTI_GetITStatus(EXTI_Line4) != RESET)
 800e48a:	2010      	movs	r0, #16
 800e48c:	f004 fac0 	bl	8012a10 <EXTI_GetITStatus>
 800e490:	b140      	cbz	r0, 800e4a4 <radio_int1_irq+0x1c>
    {
      SPIevent(PORT_INVALID, SPI_EV_TYPE_DATA_READY);
 800e492:	2100      	movs	r1, #0
 800e494:	200a      	movs	r0, #10
 800e496:	f7fd fe83 	bl	800c1a0 <SPIevent>
      /* Clear the EXTI line 0 pending bit */
      EXTI_ClearITPendingBit(EXTI_Line4);
 800e49a:	2010      	movs	r0, #16
    }
}
 800e49c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // void EXTI0_IRQHandler(void)
  if (EXTI_GetITStatus(EXTI_Line4) != RESET)
    {
      SPIevent(PORT_INVALID, SPI_EV_TYPE_DATA_READY);
      /* Clear the EXTI line 0 pending bit */
      EXTI_ClearITPendingBit(EXTI_Line4);
 800e4a0:	f004 bb02 	b.w	8012aa8 <EXTI_ClearITPendingBit>
 800e4a4:	bd08      	pop	{r3, pc}
	...

0800e4a8 <spiToSpiNum>:

//Funckja mapujaca SPI (SPI1,SPI2,SPI3) na index w tabeli spiData[]
int spiToSpiNum(void *spi)
{
  int spiNum = -1;
  switch ((uint32_t)spi)
 800e4a8:	4b0a      	ldr	r3, [pc, #40]	; (800e4d4 <spiToSpiNum+0x2c>)
 800e4aa:	4298      	cmp	r0, r3
  [0] = {SPI1, DMA2_Stream3, DMA2_Stream2, DMA_Channel_3, DMA_Channel_3, DMA_IT_TCIF2},
};

//Funckja mapujaca SPI (SPI1,SPI2,SPI3) na index w tabeli spiData[]
int spiToSpiNum(void *spi)
{
 800e4ac:	b507      	push	{r0, r1, r2, lr}
  int spiNum = -1;
  switch ((uint32_t)spi)
 800e4ae:	d101      	bne.n	800e4b4 <spiToSpiNum+0xc>
    {
    case (uint32_t)SPI1:
      spiNum = 0;
 800e4b0:	2000      	movs	r0, #0
      break;
    }
  massert(spiNum >= 0);
  return spiNum;
 800e4b2:	e00c      	b.n	800e4ce <spiToSpiNum+0x26>
    {
    case (uint32_t)SPI1:
      spiNum = 0;
      break;
    }
  massert(spiNum >= 0);
 800e4b4:	4b08      	ldr	r3, [pc, #32]	; (800e4d8 <spiToSpiNum+0x30>)
 800e4b6:	4909      	ldr	r1, [pc, #36]	; (800e4dc <spiToSpiNum+0x34>)
 800e4b8:	4809      	ldr	r0, [pc, #36]	; (800e4e0 <spiToSpiNum+0x38>)
 800e4ba:	22a6      	movs	r2, #166	; 0xa6
 800e4bc:	f7fa fbb4 	bl	8008c28 <xprintf>
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	9301      	str	r3, [sp, #4]
 800e4c4:	9b01      	ldr	r3, [sp, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1fc      	bne.n	800e4c4 <spiToSpiNum+0x1c>
};

//Funckja mapujaca SPI (SPI1,SPI2,SPI3) na index w tabeli spiData[]
int spiToSpiNum(void *spi)
{
  int spiNum = -1;
 800e4ca:	f04f 30ff 	mov.w	r0, #4294967295
      spiNum = 0;
      break;
    }
  massert(spiNum >= 0);
  return spiNum;
}
 800e4ce:	b003      	add	sp, #12
 800e4d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4d4:	40013000 	.word	0x40013000
 800e4d8:	0803e4fe 	.word	0x0803e4fe
 800e4dc:	0803e3e8 	.word	0x0803e3e8
 800e4e0:	0801d5dd 	.word	0x0801d5dd

0800e4e4 <selectorSet>:

void selectorSet(int value)
{
  //0 - WM8804
  //1 - SAIA
  if(cfg.proto&0x40)
 800e4e4:	4b0b      	ldr	r3, [pc, #44]	; (800e514 <selectorSet+0x30>)
 800e4e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4e8:	0652      	lsls	r2, r2, #25
 800e4ea:	d505      	bpl.n	800e4f8 <selectorSet+0x14>
    {
      PIN_SET(G, 0, value==0);
 800e4ec:	fab0 f280 	clz	r2, r0
 800e4f0:	0952      	lsrs	r2, r2, #5
 800e4f2:	2101      	movs	r1, #1
 800e4f4:	4808      	ldr	r0, [pc, #32]	; (800e518 <selectorSet+0x34>)
 800e4f6:	e00b      	b.n	800e510 <selectorSet+0x2c>
    }
  else if(cfg.proto&0x1)
 800e4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4fa:	07db      	lsls	r3, r3, #31
 800e4fc:	d503      	bpl.n	800e506 <selectorSet+0x22>
    {
      PIN_SET(B, 0, value!=0);
 800e4fe:	1c02      	adds	r2, r0, #0
 800e500:	bf18      	it	ne
 800e502:	2201      	movne	r2, #1
 800e504:	e002      	b.n	800e50c <selectorSet+0x28>
    }
  else
    {
      PIN_SET(B, 0, value==0);
 800e506:	fab0 f280 	clz	r2, r0
 800e50a:	0952      	lsrs	r2, r2, #5
 800e50c:	4803      	ldr	r0, [pc, #12]	; (800e51c <selectorSet+0x38>)
 800e50e:	2101      	movs	r1, #1
 800e510:	f002 b9b2 	b.w	8010878 <GPIO_WriteBit>
 800e514:	10001000 	.word	0x10001000
 800e518:	40021800 	.word	0x40021800
 800e51c:	40020400 	.word	0x40020400

0800e520 <configureCKINpin>:
#endif /* CODEC_MCLK_ENABLED */
}


void configureCKINpin(void)
{
 800e520:	b513      	push	{r0, r1, r4, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOC, ENABLE);
 800e522:	2101      	movs	r1, #1
 800e524:	2004      	movs	r0, #4
 800e526:	f002 fb8d 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800e52a:	4c0c      	ldr	r4, [pc, #48]	; (800e55c <configureCKINpin+0x3c>)
void configureCKINpin(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOC, ENABLE);
  /* I2S_INPUT pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 800e52c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e530:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800e532:	2302      	movs	r3, #2
 800e534:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800e538:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800e53c:	4669      	mov	r1, sp
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOC, ENABLE);
  /* I2S_INPUT pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800e53e:	2300      	movs	r3, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800e540:	4620      	mov	r0, r4
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOC, ENABLE);
  /* I2S_INPUT pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800e542:	f88d 3006 	strb.w	r3, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800e546:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 800e54a:	f002 f88d 	bl	8010668 <GPIO_Init>
  /* Connect pins to I2S peripheral  */
#define GPIO_AF_I2S_CKIN ((uint8_t)0x05)
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_I2S_CKIN );
 800e54e:	2205      	movs	r2, #5
 800e550:	2109      	movs	r1, #9
 800e552:	4620      	mov	r0, r4
 800e554:	f002 fa02 	bl	801095c <GPIO_PinAFConfig>

}
 800e558:	b002      	add	sp, #8
 800e55a:	bd10      	pop	{r4, pc}
 800e55c:	40020800 	.word	0x40020800

0800e560 <hwBoardInit>:
void OTG_HS_IRQHandler(void);
int  libUSBStartup(int ulpi);


void hwBoardInit(void)
{
 800e560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e564:	b099      	sub	sp, #100	; 0x64
  //Load config into ram
  cfgInit();
 800e566:	f7f1 fe3d 	bl	80001e4 <cfgInit>

  if(cfg.proto&0x1)
 800e56a:	4bb2      	ldr	r3, [pc, #712]	; (800e834 <hwBoardInit+0x2d4>)
 800e56c:	4eb2      	ldr	r6, [pc, #712]	; (800e838 <hwBoardInit+0x2d8>)
 800e56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e570:	f013 0f01 	tst.w	r3, #1
 800e574:	d009      	beq.n	800e58a <hwBoardInit+0x2a>
    memcpy((void*)leds, (void*)ledsProto, sizeof(leds));
 800e576:	4db1      	ldr	r5, [pc, #708]	; (800e83c <hwBoardInit+0x2dc>)
 800e578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e57a:	4634      	mov	r4, r6
 800e57c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e57e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e582:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e586:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  USART_INIT(UART8, 1, E, 1, E, 0, 921600); //DEBUG
 800e58a:	2101      	movs	r1, #1
 800e58c:	2010      	movs	r0, #16
 800e58e:	f002 fb59 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e592:	2101      	movs	r1, #1
 800e594:	2010      	movs	r0, #16
 800e596:	f002 fb55 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e59a:	2101      	movs	r1, #1
 800e59c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e5a0:	f002 fb74 	bl	8010c8c <RCC_APB1PeriphClockCmd>
 800e5a4:	2208      	movs	r2, #8
 800e5a6:	2101      	movs	r1, #1
 800e5a8:	48a5      	ldr	r0, [pc, #660]	; (800e840 <hwBoardInit+0x2e0>)
 800e5aa:	f002 f9d7 	bl	801095c <GPIO_PinAFConfig>
 800e5ae:	af18      	add	r7, sp, #96	; 0x60
 800e5b0:	2208      	movs	r2, #8
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	48a2      	ldr	r0, [pc, #648]	; (800e840 <hwBoardInit+0x2e0>)
 800e5b6:	f002 f9d1 	bl	801095c <GPIO_PinAFConfig>
 800e5ba:	2302      	movs	r3, #2
 800e5bc:	f847 3d44 	str.w	r3, [r7, #-68]!
 800e5c0:	2400      	movs	r4, #0
 800e5c2:	2501      	movs	r5, #1
 800e5c4:	4639      	mov	r1, r7
 800e5c6:	489e      	ldr	r0, [pc, #632]	; (800e840 <hwBoardInit+0x2e0>)
 800e5c8:	f88d 3020 	strb.w	r3, [sp, #32]
 800e5cc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800e5d0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800e5d4:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
 800e5d8:	f002 f846 	bl	8010668 <GPIO_Init>
 800e5dc:	4639      	mov	r1, r7
 800e5de:	4898      	ldr	r0, [pc, #608]	; (800e840 <hwBoardInit+0x2e0>)
 800e5e0:	9507      	str	r5, [sp, #28]
 800e5e2:	f002 f841 	bl	8010668 <GPIO_Init>
 800e5e6:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 800e5ea:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ec:	a909      	add	r1, sp, #36	; 0x24
 800e5ee:	230c      	movs	r3, #12
 800e5f0:	4894      	ldr	r0, [pc, #592]	; (800e844 <hwBoardInit+0x2e4>)
 800e5f2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800e5f6:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
 800e5fa:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
 800e5fe:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 800e602:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800e606:	f002 fc01 	bl	8010e0c <USART_Init>
 800e60a:	4629      	mov	r1, r5
 800e60c:	488d      	ldr	r0, [pc, #564]	; (800e844 <hwBoardInit+0x2e4>)
 800e60e:	f002 fcd7 	bl	8010fc0 <USART_Cmd>
  xprintf_init(sendChar);
 800e612:	488d      	ldr	r0, [pc, #564]	; (800e848 <hwBoardInit+0x2e8>)
 800e614:	f7fa fa02 	bl	8008a1c <xprintf_init>
  xprintf(CLEAR_SCREEN CUR_HOME(42) "\n");
 800e618:	488c      	ldr	r0, [pc, #560]	; (800e84c <hwBoardInit+0x2ec>)
 800e61a:	f7fa fb05 	bl	8008c28 <xprintf>

  //MCLK key open
  PIN_SET(D, 5, 0);
 800e61e:	4622      	mov	r2, r4
 800e620:	2120      	movs	r1, #32
 800e622:	488b      	ldr	r0, [pc, #556]	; (800e850 <hwBoardInit+0x2f0>)
 800e624:	f002 f928 	bl	8010878 <GPIO_WriteBit>
  GPIO_INIT(D, 5, OUT, NOPULL);
 800e628:	2303      	movs	r3, #3
 800e62a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e62e:	4629      	mov	r1, r5
 800e630:	2320      	movs	r3, #32
 800e632:	2008      	movs	r0, #8
 800e634:	9309      	str	r3, [sp, #36]	; 0x24
 800e636:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 800e63a:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
 800e63e:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
 800e642:	f002 faff 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e646:	a909      	add	r1, sp, #36	; 0x24
 800e648:	4881      	ldr	r0, [pc, #516]	; (800e850 <hwBoardInit+0x2f0>)
 800e64a:	f002 f80d 	bl	8010668 <GPIO_Init>

  //Inicjalizacja LED
  LEDS_INIT();
 800e64e:	497a      	ldr	r1, [pc, #488]	; (800e838 <hwBoardInit+0x2d8>)
 800e650:	4880      	ldr	r0, [pc, #512]	; (800e854 <hwBoardInit+0x2f4>)
 800e652:	9409      	str	r4, [sp, #36]	; 0x24
 800e654:	4622      	mov	r2, r4
 800e656:	4623      	mov	r3, r4
 800e658:	59a5      	ldr	r5, [r4, r6]
 800e65a:	4285      	cmp	r5, r0
 800e65c:	bf08      	it	eq
 800e65e:	190a      	addeq	r2, r1, r4
 800e660:	f104 0408 	add.w	r4, r4, #8
 800e664:	bf02      	ittt	eq
 800e666:	8892      	ldrheq	r2, [r2, #4]
 800e668:	4313      	orreq	r3, r2
 800e66a:	2201      	moveq	r2, #1
 800e66c:	2c30      	cmp	r4, #48	; 0x30
 800e66e:	d1f3      	bne.n	800e658 <hwBoardInit+0xf8>
 800e670:	b102      	cbz	r2, 800e674 <hwBoardInit+0x114>
 800e672:	9309      	str	r3, [sp, #36]	; 0x24
 800e674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e676:	b18b      	cbz	r3, 800e69c <hwBoardInit+0x13c>
 800e678:	2101      	movs	r1, #1
 800e67a:	2300      	movs	r3, #0
 800e67c:	4608      	mov	r0, r1
 800e67e:	2203      	movs	r2, #3
 800e680:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e688:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 800e68c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e690:	f002 fad8 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e694:	a909      	add	r1, sp, #36	; 0x24
 800e696:	486f      	ldr	r0, [pc, #444]	; (800e854 <hwBoardInit+0x2f4>)
 800e698:	f001 ffe6 	bl	8010668 <GPIO_Init>
 800e69c:	2300      	movs	r3, #0
 800e69e:	4866      	ldr	r0, [pc, #408]	; (800e838 <hwBoardInit+0x2d8>)
 800e6a0:	4c6d      	ldr	r4, [pc, #436]	; (800e858 <hwBoardInit+0x2f8>)
 800e6a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	5995      	ldr	r5, [r2, r6]
 800e6aa:	42a5      	cmp	r5, r4
 800e6ac:	bf08      	it	eq
 800e6ae:	1883      	addeq	r3, r0, r2
 800e6b0:	f102 0208 	add.w	r2, r2, #8
 800e6b4:	bf02      	ittt	eq
 800e6b6:	889b      	ldrheq	r3, [r3, #4]
 800e6b8:	4319      	orreq	r1, r3
 800e6ba:	2301      	moveq	r3, #1
 800e6bc:	2a30      	cmp	r2, #48	; 0x30
 800e6be:	d1f3      	bne.n	800e6a8 <hwBoardInit+0x148>
 800e6c0:	b103      	cbz	r3, 800e6c4 <hwBoardInit+0x164>
 800e6c2:	9109      	str	r1, [sp, #36]	; 0x24
 800e6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6c6:	b18b      	cbz	r3, 800e6ec <hwBoardInit+0x18c>
 800e6c8:	2101      	movs	r1, #1
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	2203      	movs	r2, #3
 800e6ce:	2002      	movs	r0, #2
 800e6d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e6d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6d8:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 800e6dc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e6e0:	f002 fab0 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e6e4:	a909      	add	r1, sp, #36	; 0x24
 800e6e6:	485c      	ldr	r0, [pc, #368]	; (800e858 <hwBoardInit+0x2f8>)
 800e6e8:	f001 ffbe 	bl	8010668 <GPIO_Init>
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	4852      	ldr	r0, [pc, #328]	; (800e838 <hwBoardInit+0x2d8>)
 800e6f0:	4c5a      	ldr	r4, [pc, #360]	; (800e85c <hwBoardInit+0x2fc>)
 800e6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	5995      	ldr	r5, [r2, r6]
 800e6fa:	42a5      	cmp	r5, r4
 800e6fc:	bf08      	it	eq
 800e6fe:	1883      	addeq	r3, r0, r2
 800e700:	f102 0208 	add.w	r2, r2, #8
 800e704:	bf02      	ittt	eq
 800e706:	889b      	ldrheq	r3, [r3, #4]
 800e708:	4319      	orreq	r1, r3
 800e70a:	2301      	moveq	r3, #1
 800e70c:	2a30      	cmp	r2, #48	; 0x30
 800e70e:	d1f3      	bne.n	800e6f8 <hwBoardInit+0x198>
 800e710:	b103      	cbz	r3, 800e714 <hwBoardInit+0x1b4>
 800e712:	9109      	str	r1, [sp, #36]	; 0x24
 800e714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e716:	b18b      	cbz	r3, 800e73c <hwBoardInit+0x1dc>
 800e718:	2101      	movs	r1, #1
 800e71a:	2300      	movs	r3, #0
 800e71c:	2203      	movs	r2, #3
 800e71e:	2004      	movs	r0, #4
 800e720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e728:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 800e72c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e730:	f002 fa88 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e734:	a909      	add	r1, sp, #36	; 0x24
 800e736:	4849      	ldr	r0, [pc, #292]	; (800e85c <hwBoardInit+0x2fc>)
 800e738:	f001 ff96 	bl	8010668 <GPIO_Init>
 800e73c:	2300      	movs	r3, #0
 800e73e:	483e      	ldr	r0, [pc, #248]	; (800e838 <hwBoardInit+0x2d8>)
 800e740:	4c43      	ldr	r4, [pc, #268]	; (800e850 <hwBoardInit+0x2f0>)
 800e742:	9309      	str	r3, [sp, #36]	; 0x24
 800e744:	4619      	mov	r1, r3
 800e746:	461a      	mov	r2, r3
 800e748:	5995      	ldr	r5, [r2, r6]
 800e74a:	42a5      	cmp	r5, r4
 800e74c:	bf08      	it	eq
 800e74e:	1881      	addeq	r1, r0, r2
 800e750:	f102 0208 	add.w	r2, r2, #8
 800e754:	bf02      	ittt	eq
 800e756:	8889      	ldrheq	r1, [r1, #4]
 800e758:	430b      	orreq	r3, r1
 800e75a:	2101      	moveq	r1, #1
 800e75c:	2a30      	cmp	r2, #48	; 0x30
 800e75e:	d1f3      	bne.n	800e748 <hwBoardInit+0x1e8>
 800e760:	b101      	cbz	r1, 800e764 <hwBoardInit+0x204>
 800e762:	9309      	str	r3, [sp, #36]	; 0x24
 800e764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e766:	b18b      	cbz	r3, 800e78c <hwBoardInit+0x22c>
 800e768:	2101      	movs	r1, #1
 800e76a:	2300      	movs	r3, #0
 800e76c:	2203      	movs	r2, #3
 800e76e:	2008      	movs	r0, #8
 800e770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e778:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 800e77c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e780:	f002 fa60 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e784:	a909      	add	r1, sp, #36	; 0x24
 800e786:	4832      	ldr	r0, [pc, #200]	; (800e850 <hwBoardInit+0x2f0>)
 800e788:	f001 ff6e 	bl	8010668 <GPIO_Init>
 800e78c:	2300      	movs	r3, #0
 800e78e:	482a      	ldr	r0, [pc, #168]	; (800e838 <hwBoardInit+0x2d8>)
 800e790:	4c2b      	ldr	r4, [pc, #172]	; (800e840 <hwBoardInit+0x2e0>)
 800e792:	9309      	str	r3, [sp, #36]	; 0x24
 800e794:	4619      	mov	r1, r3
 800e796:	461a      	mov	r2, r3
 800e798:	5995      	ldr	r5, [r2, r6]
 800e79a:	42a5      	cmp	r5, r4
 800e79c:	bf08      	it	eq
 800e79e:	1881      	addeq	r1, r0, r2
 800e7a0:	f102 0208 	add.w	r2, r2, #8
 800e7a4:	bf02      	ittt	eq
 800e7a6:	8889      	ldrheq	r1, [r1, #4]
 800e7a8:	430b      	orreq	r3, r1
 800e7aa:	2101      	moveq	r1, #1
 800e7ac:	2a30      	cmp	r2, #48	; 0x30
 800e7ae:	d1f3      	bne.n	800e798 <hwBoardInit+0x238>
 800e7b0:	b101      	cbz	r1, 800e7b4 <hwBoardInit+0x254>
 800e7b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7b6:	b18b      	cbz	r3, 800e7dc <hwBoardInit+0x27c>
 800e7b8:	2101      	movs	r1, #1
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	2203      	movs	r2, #3
 800e7be:	2010      	movs	r0, #16
 800e7c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7c8:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 800e7cc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e7d0:	f002 fa38 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e7d4:	a909      	add	r1, sp, #36	; 0x24
 800e7d6:	481a      	ldr	r0, [pc, #104]	; (800e840 <hwBoardInit+0x2e0>)
 800e7d8:	f001 ff46 	bl	8010668 <GPIO_Init>
 800e7dc:	2300      	movs	r3, #0
 800e7de:	4816      	ldr	r0, [pc, #88]	; (800e838 <hwBoardInit+0x2d8>)
 800e7e0:	4c1f      	ldr	r4, [pc, #124]	; (800e860 <hwBoardInit+0x300>)
 800e7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	5995      	ldr	r5, [r2, r6]
 800e7ea:	42a5      	cmp	r5, r4
 800e7ec:	bf08      	it	eq
 800e7ee:	1883      	addeq	r3, r0, r2
 800e7f0:	f102 0208 	add.w	r2, r2, #8
 800e7f4:	bf02      	ittt	eq
 800e7f6:	889b      	ldrheq	r3, [r3, #4]
 800e7f8:	4319      	orreq	r1, r3
 800e7fa:	2301      	moveq	r3, #1
 800e7fc:	2a30      	cmp	r2, #48	; 0x30
 800e7fe:	d1f3      	bne.n	800e7e8 <hwBoardInit+0x288>
 800e800:	b103      	cbz	r3, 800e804 <hwBoardInit+0x2a4>
 800e802:	9109      	str	r1, [sp, #36]	; 0x24
 800e804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e806:	b18b      	cbz	r3, 800e82c <hwBoardInit+0x2cc>
 800e808:	2101      	movs	r1, #1
 800e80a:	2300      	movs	r3, #0
 800e80c:	2203      	movs	r2, #3
 800e80e:	2020      	movs	r0, #32
 800e810:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e818:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 800e81c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e820:	f002 fa10 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e824:	a909      	add	r1, sp, #36	; 0x24
 800e826:	480e      	ldr	r0, [pc, #56]	; (800e860 <hwBoardInit+0x300>)
 800e828:	f001 ff1e 	bl	8010668 <GPIO_Init>
 800e82c:	2300      	movs	r3, #0
 800e82e:	4802      	ldr	r0, [pc, #8]	; (800e838 <hwBoardInit+0x2d8>)
 800e830:	e018      	b.n	800e864 <hwBoardInit+0x304>
 800e832:	bf00      	nop
 800e834:	10001000 	.word	0x10001000
 800e838:	10002308 	.word	0x10002308
 800e83c:	0803e3f4 	.word	0x0803e3f4
 800e840:	40021000 	.word	0x40021000
 800e844:	40007c00 	.word	0x40007c00
 800e848:	080089d5 	.word	0x080089d5
 800e84c:	0803de8a 	.word	0x0803de8a
 800e850:	40020c00 	.word	0x40020c00
 800e854:	40020000 	.word	0x40020000
 800e858:	40020400 	.word	0x40020400
 800e85c:	40020800 	.word	0x40020800
 800e860:	40021400 	.word	0x40021400
 800e864:	4cd8      	ldr	r4, [pc, #864]	; (800ebc8 <hwBoardInit+0x668>)
 800e866:	9309      	str	r3, [sp, #36]	; 0x24
 800e868:	4619      	mov	r1, r3
 800e86a:	461a      	mov	r2, r3
 800e86c:	5815      	ldr	r5, [r2, r0]
 800e86e:	42a5      	cmp	r5, r4
 800e870:	bf08      	it	eq
 800e872:	1883      	addeq	r3, r0, r2
 800e874:	f102 0208 	add.w	r2, r2, #8
 800e878:	bf02      	ittt	eq
 800e87a:	889b      	ldrheq	r3, [r3, #4]
 800e87c:	4319      	orreq	r1, r3
 800e87e:	2301      	moveq	r3, #1
 800e880:	2a30      	cmp	r2, #48	; 0x30
 800e882:	d1f3      	bne.n	800e86c <hwBoardInit+0x30c>
 800e884:	b103      	cbz	r3, 800e888 <hwBoardInit+0x328>
 800e886:	9109      	str	r1, [sp, #36]	; 0x24
 800e888:	ac18      	add	r4, sp, #96	; 0x60
 800e88a:	f854 3d3c 	ldr.w	r3, [r4, #-60]!
 800e88e:	b18b      	cbz	r3, 800e8b4 <hwBoardInit+0x354>
 800e890:	2101      	movs	r1, #1
 800e892:	2300      	movs	r3, #0
 800e894:	2203      	movs	r2, #3
 800e896:	2040      	movs	r0, #64	; 0x40
 800e898:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e89c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8a0:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 800e8a4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800e8a8:	f002 f9cc 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e8ac:	4621      	mov	r1, r4
 800e8ae:	48c6      	ldr	r0, [pc, #792]	; (800ebc8 <hwBoardInit+0x668>)
 800e8b0:	f001 feda 	bl	8010668 <GPIO_Init>

  configureCKINpin();
 800e8b4:	f7ff fe34 	bl	800e520 <configureCKINpin>

void ConfigureTimerForI2SClockMeasurement(void)
{
  TIM_TimeBaseInitTypeDef TIMInit;

  TIMInit.TIM_Prescaler = 168/2;
 800e8b8:	2354      	movs	r3, #84	; 0x54
  TIMInit.TIM_Period = 32768*2-1;
  TIMInit.TIM_ClockDivision = TIM_CKD_DIV1;
 800e8ba:	2600      	movs	r6, #0

void ConfigureTimerForI2SClockMeasurement(void)
{
  TIM_TimeBaseInitTypeDef TIMInit;

  TIMInit.TIM_Prescaler = 168/2;
 800e8bc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  TIMInit.TIM_Period = 32768*2-1;
  TIMInit.TIM_ClockDivision = TIM_CKD_DIV1;
  TIMInit.TIM_CounterMode = TIM_CounterMode_Up;

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 800e8c0:	2101      	movs	r1, #1
void ConfigureTimerForI2SClockMeasurement(void)
{
  TIM_TimeBaseInitTypeDef TIMInit;

  TIMInit.TIM_Prescaler = 168/2;
  TIMInit.TIM_Period = 32768*2-1;
 800e8c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIMInit.TIM_ClockDivision = TIM_CKD_DIV1;
  TIMInit.TIM_CounterMode = TIM_CounterMode_Up;

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 800e8c6:	f44f 7080 	mov.w	r0, #256	; 0x100
void ConfigureTimerForI2SClockMeasurement(void)
{
  TIM_TimeBaseInitTypeDef TIMInit;

  TIMInit.TIM_Prescaler = 168/2;
  TIMInit.TIM_Period = 32768*2-1;
 800e8ca:	930a      	str	r3, [sp, #40]	; 0x28
  TIMInit.TIM_ClockDivision = TIM_CKD_DIV1;
 800e8cc:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
  TIMInit.TIM_CounterMode = TIM_CounterMode_Up;
 800e8d0:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 800e8d4:	f002 f9da 	bl	8010c8c <RCC_APB1PeriphClockCmd>
  TIM_TimeBaseInit(TIM14, &TIMInit);
 800e8d8:	4621      	mov	r1, r4
 800e8da:	48bc      	ldr	r0, [pc, #752]	; (800ebcc <hwBoardInit+0x66c>)
  //GPIO_INIT(F, 0, IN, UP);
  //GPIO_INIT(F, 1, IN, UP);
  //GPIO_INIT(B, 7, IN, UP);

  //WM8805 mode select: SW/HW
  GPIO_INIT(G, 14, OUT, NOPULL);//B15
 800e8dc:	2501      	movs	r5, #1
  TIMInit.TIM_Period = 32768*2-1;
  TIMInit.TIM_ClockDivision = TIM_CKD_DIV1;
  TIMInit.TIM_CounterMode = TIM_CounterMode_Up;

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
  TIM_TimeBaseInit(TIM14, &TIMInit);
 800e8de:	f004 fb09 	bl	8012ef4 <TIM_TimeBaseInit>
  TIM_Cmd(TIM14, ENABLE);
 800e8e2:	2101      	movs	r1, #1
 800e8e4:	48b9      	ldr	r0, [pc, #740]	; (800ebcc <hwBoardInit+0x66c>)
 800e8e6:	f004 fb9f 	bl	8013028 <TIM_Cmd>
  //GPIO_INIT(F, 0, IN, UP);
  //GPIO_INIT(F, 1, IN, UP);
  //GPIO_INIT(B, 7, IN, UP);

  //WM8805 mode select: SW/HW
  GPIO_INIT(G, 14, OUT, NOPULL);//B15
 800e8ea:	2703      	movs	r7, #3
 800e8ec:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	2040      	movs	r0, #64	; 0x40
 800e8f4:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 800e8f8:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e8fc:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800e900:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
 800e904:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800e908:	f002 f99c 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e90c:	4621      	mov	r1, r4
 800e90e:	48ae      	ldr	r0, [pc, #696]	; (800ebc8 <hwBoardInit+0x668>)
 800e910:	f001 feaa 	bl	8010668 <GPIO_Init>
  SPI_CS_INIT(G, 8);
 800e914:	4629      	mov	r1, r5
 800e916:	2040      	movs	r0, #64	; 0x40
 800e918:	f002 f994 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e91c:	f44f 7980 	mov.w	r9, #256	; 0x100
 800e920:	4621      	mov	r1, r4
 800e922:	48a9      	ldr	r0, [pc, #676]	; (800ebc8 <hwBoardInit+0x668>)
 800e924:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 800e928:	f04f 0b02 	mov.w	fp, #2
 800e92c:	f88d b029 	strb.w	fp, [sp, #41]	; 0x29
 800e930:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e934:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e938:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e93c:	f001 fe94 	bl	8010668 <GPIO_Init>
 800e940:	462a      	mov	r2, r5
 800e942:	4649      	mov	r1, r9
 800e944:	48a0      	ldr	r0, [pc, #640]	; (800ebc8 <hwBoardInit+0x668>)
 800e946:	f001 ff97 	bl	8010878 <GPIO_WriteBit>
  //reset pin U4 U6
  GPIO_INIT(C, 14, OUT, NOPULL);
 800e94a:	4629      	mov	r1, r5
 800e94c:	2004      	movs	r0, #4
 800e94e:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 800e952:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e956:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800e95a:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
 800e95e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800e962:	f002 f96f 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e966:	4621      	mov	r1, r4
 800e968:	4899      	ldr	r0, [pc, #612]	; (800ebd0 <hwBoardInit+0x670>)
 800e96a:	f001 fe7d 	bl	8010668 <GPIO_Init>
  //reset pin U1 U2
  GPIO_INIT(C, 13, OUT, NOPULL);
 800e96e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 800e972:	4629      	mov	r1, r5
 800e974:	2004      	movs	r0, #4
 800e976:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 800e97a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e97e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800e982:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
 800e986:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e98a:	f002 f95b 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e98e:	4621      	mov	r1, r4
 800e990:	488f      	ldr	r0, [pc, #572]	; (800ebd0 <hwBoardInit+0x670>)
 800e992:	f001 fe69 	bl	8010668 <GPIO_Init>

  RESET_WM5(RST_INACTIVE);
 800e996:	462a      	mov	r2, r5
 800e998:	4641      	mov	r1, r8
 800e99a:	488d      	ldr	r0, [pc, #564]	; (800ebd0 <hwBoardInit+0x670>)
 800e99c:	f001 ff6c 	bl	8010878 <GPIO_WriteBit>

  //Disable others WM88XX
  GPIO_INIT(G, 8, OUT, NOPULL);//
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	2040      	movs	r0, #64	; 0x40
 800e9a4:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 800e9a8:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e9ac:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800e9b0:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
 800e9b4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e9b8:	f002 f944 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e9bc:	4621      	mov	r1, r4
 800e9be:	4882      	ldr	r0, [pc, #520]	; (800ebc8 <hwBoardInit+0x668>)
 800e9c0:	f001 fe52 	bl	8010668 <GPIO_Init>
  GPIO_INIT(G, 9, OUT, NOPULL);//
 800e9c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	2040      	movs	r0, #64	; 0x40
 800e9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ce:	9300      	str	r3, [sp, #0]
 800e9d0:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 800e9d4:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e9d8:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800e9dc:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
 800e9e0:	f002 f930 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	4878      	ldr	r0, [pc, #480]	; (800ebc8 <hwBoardInit+0x668>)
 800e9e8:	f001 fe3e 	bl	8010668 <GPIO_Init>
  GPIO_INIT(G, 10, OUT, NOPULL);//
 800e9ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	2040      	movs	r0, #64	; 0x40
 800e9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e9f6:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 800e9fa:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800e9fe:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800ea02:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
 800ea06:	f002 f91d 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800ea0a:	4621      	mov	r1, r4
 800ea0c:	486e      	ldr	r0, [pc, #440]	; (800ebc8 <hwBoardInit+0x668>)
 800ea0e:	f001 fe2b 	bl	8010668 <GPIO_Init>
  GPIO_INIT(G, 11, OUT, NOPULL);//
 800ea12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea16:	4629      	mov	r1, r5
 800ea18:	2040      	movs	r0, #64	; 0x40
 800ea1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea1c:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 800ea20:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800ea24:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800ea28:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
 800ea2c:	f002 f90a 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800ea30:	4621      	mov	r1, r4
 800ea32:	4865      	ldr	r0, [pc, #404]	; (800ebc8 <hwBoardInit+0x668>)
 800ea34:	f001 fe18 	bl	8010668 <GPIO_Init>
  PIN_SET(G, 8, 1);
 800ea38:	462a      	mov	r2, r5
 800ea3a:	4649      	mov	r1, r9
 800ea3c:	4862      	ldr	r0, [pc, #392]	; (800ebc8 <hwBoardInit+0x668>)
 800ea3e:	f001 ff1b 	bl	8010878 <GPIO_WriteBit>
  PIN_SET(G, 9, 1);
 800ea42:	9b00      	ldr	r3, [sp, #0]
 800ea44:	4860      	ldr	r0, [pc, #384]	; (800ebc8 <hwBoardInit+0x668>)
 800ea46:	4619      	mov	r1, r3
 800ea48:	462a      	mov	r2, r5
 800ea4a:	f001 ff15 	bl	8010878 <GPIO_WriteBit>
  PIN_SET(G, 10, 1);
 800ea4e:	462a      	mov	r2, r5
 800ea50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ea54:	485c      	ldr	r0, [pc, #368]	; (800ebc8 <hwBoardInit+0x668>)
 800ea56:	f001 ff0f 	bl	8010878 <GPIO_WriteBit>
  PIN_SET(G, 11, 1);
 800ea5a:	462a      	mov	r2, r5
 800ea5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ea60:	4859      	ldr	r0, [pc, #356]	; (800ebc8 <hwBoardInit+0x668>)
 800ea62:	f001 ff09 	bl	8010878 <GPIO_WriteBit>


  PIN_SET(G, 14, WM_SW_MODE);
 800ea66:	462a      	mov	r2, r5
 800ea68:	4641      	mov	r1, r8
 800ea6a:	4857      	ldr	r0, [pc, #348]	; (800ebc8 <hwBoardInit+0x668>)
 800ea6c:	f001 ff04 	bl	8010878 <GPIO_WriteBit>

  mdelay(100);
 800ea70:	2064      	movs	r0, #100	; 0x64
 800ea72:	f7fc f849 	bl	800ab08 <vTaskDelay>

  RESET_WM5(RST_ACTIVE);
 800ea76:	4632      	mov	r2, r6
 800ea78:	4641      	mov	r1, r8
 800ea7a:	4855      	ldr	r0, [pc, #340]	; (800ebd0 <hwBoardInit+0x670>)
 800ea7c:	f001 fefc 	bl	8010878 <GPIO_WriteBit>
  RESET_WM4(RST_ACTIVE);
 800ea80:	4632      	mov	r2, r6
 800ea82:	4651      	mov	r1, sl
 800ea84:	4852      	ldr	r0, [pc, #328]	; (800ebd0 <hwBoardInit+0x670>)
 800ea86:	f001 fef7 	bl	8010878 <GPIO_WriteBit>
  // PIN_SET(C, 13, 0);

  mdelay(100);
 800ea8a:	2064      	movs	r0, #100	; 0x64
 800ea8c:	f7fc f83c 	bl	800ab08 <vTaskDelay>

  RESET_WM5(RST_INACTIVE);
 800ea90:	462a      	mov	r2, r5
 800ea92:	4641      	mov	r1, r8
 800ea94:	484e      	ldr	r0, [pc, #312]	; (800ebd0 <hwBoardInit+0x670>)
 800ea96:	f001 feef 	bl	8010878 <GPIO_WriteBit>
  RESET_WM4(RST_INACTIVE);
 800ea9a:	462a      	mov	r2, r5
 800ea9c:	4651      	mov	r1, sl
 800ea9e:	484c      	ldr	r0, [pc, #304]	; (800ebd0 <hwBoardInit+0x670>)
 800eaa0:	f001 feea 	bl	8010878 <GPIO_WriteBit>

  mdelay(100);
 800eaa4:	2064      	movs	r0, #100	; 0x64
 800eaa6:	f7fc f82f 	bl	800ab08 <vTaskDelay>

  //WM1 and WM2 audio source select ports
  // SRC_SEL_RADIO1(RADIO1_SRC_WM8805_1);
  if(cfg.proto & 0x40)
 800eaaa:	4b4a      	ldr	r3, [pc, #296]	; (800ebd4 <hwBoardInit+0x674>)
 800eaac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    {
      GPIO_INIT(G, 0, OUT, NOPULL);
 800eaae:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28

  mdelay(100);

  //WM1 and WM2 audio source select ports
  // SRC_SEL_RADIO1(RADIO1_SRC_WM8805_1);
  if(cfg.proto & 0x40)
 800eab2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800eab6:	d012      	beq.n	800eade <hwBoardInit+0x57e>
    {
      GPIO_INIT(G, 0, OUT, NOPULL);
 800eab8:	4629      	mov	r1, r5
 800eaba:	2040      	movs	r0, #64	; 0x40
 800eabc:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800eac0:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800eac4:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
 800eac8:	9509      	str	r5, [sp, #36]	; 0x24
 800eaca:	f002 f8bb 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800eace:	4621      	mov	r1, r4
 800ead0:	483d      	ldr	r0, [pc, #244]	; (800ebc8 <hwBoardInit+0x668>)
 800ead2:	f001 fdc9 	bl	8010668 <GPIO_Init>
      PIN_SET(G, 0, RADIO1_SRC_SAI_A);
 800ead6:	462a      	mov	r2, r5
 800ead8:	4629      	mov	r1, r5
 800eada:	483b      	ldr	r0, [pc, #236]	; (800ebc8 <hwBoardInit+0x668>)
 800eadc:	e011      	b.n	800eb02 <hwBoardInit+0x5a2>
    }
  else
    {
      GPIO_INIT(B, 0, OUT, NOPULL);
 800eade:	4629      	mov	r1, r5
 800eae0:	4658      	mov	r0, fp
 800eae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eae6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800eaea:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800eaee:	9509      	str	r5, [sp, #36]	; 0x24
 800eaf0:	f002 f8a8 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4838      	ldr	r0, [pc, #224]	; (800ebd8 <hwBoardInit+0x678>)
 800eaf8:	f001 fdb6 	bl	8010668 <GPIO_Init>
      PIN_SET(B, 0, RADIO1_SRC_SAI_A);
 800eafc:	4836      	ldr	r0, [pc, #216]	; (800ebd8 <hwBoardInit+0x678>)
 800eafe:	462a      	mov	r2, r5
 800eb00:	4629      	mov	r1, r5
 800eb02:	f001 feb9 	bl	8010878 <GPIO_WriteBit>
    }

  // #define SPI_INIT(arg_spi, arg_apb,
  //                  arg_gpio, arg_clk, arg_miso, arg_mosi,
  //                  arg_dataSize, arg_prescaler  )
  SPI_INIT(SPI6, 2,
 800eb06:	2101      	movs	r1, #1
 800eb08:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800eb0c:	f002 f8e2 	bl	8010cd4 <RCC_APB2PeriphClockCmd>
 800eb10:	2101      	movs	r1, #1
 800eb12:	2040      	movs	r0, #64	; 0x40
 800eb14:	f002 f896 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800eb18:	2205      	movs	r2, #5
 800eb1a:	210c      	movs	r1, #12
 800eb1c:	482a      	ldr	r0, [pc, #168]	; (800ebc8 <hwBoardInit+0x668>)
 800eb1e:	f001 ff1d 	bl	801095c <GPIO_PinAFConfig>
 800eb22:	2205      	movs	r2, #5
 800eb24:	210e      	movs	r1, #14
 800eb26:	4828      	ldr	r0, [pc, #160]	; (800ebc8 <hwBoardInit+0x668>)
 800eb28:	f001 ff18 	bl	801095c <GPIO_PinAFConfig>
 800eb2c:	2205      	movs	r2, #5
 800eb2e:	210d      	movs	r1, #13
 800eb30:	4825      	ldr	r0, [pc, #148]	; (800ebc8 <hwBoardInit+0x668>)
 800eb32:	f001 ff13 	bl	801095c <GPIO_PinAFConfig>
 800eb36:	2302      	movs	r3, #2
 800eb38:	a918      	add	r1, sp, #96	; 0x60
 800eb3a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800eb3e:	f88d 3020 	strb.w	r3, [sp, #32]
 800eb42:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800eb46:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800eb4a:	2700      	movs	r7, #0
 800eb4c:	f841 3d44 	str.w	r3, [r1, #-68]!
 800eb50:	481d      	ldr	r0, [pc, #116]	; (800ebc8 <hwBoardInit+0x668>)
 800eb52:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800eb56:	f001 fd87 	bl	8010668 <GPIO_Init>
 800eb5a:	4820      	ldr	r0, [pc, #128]	; (800ebdc <hwBoardInit+0x67c>)
 800eb5c:	f002 fc64 	bl	8011428 <SPI_I2S_DeInit>
 800eb60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb64:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800eb68:	2338      	movs	r3, #56	; 0x38
 800eb6a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800eb6e:	2307      	movs	r3, #7
 800eb70:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800eb74:	4621      	mov	r1, r4
 800eb76:	f44f 7382 	mov.w	r3, #260	; 0x104
 800eb7a:	4818      	ldr	r0, [pc, #96]	; (800ebdc <hwBoardInit+0x67c>)
 800eb7c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800eb80:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800eb84:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 800eb88:	f8ad 702a 	strh.w	r7, [sp, #42]	; 0x2a
 800eb8c:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800eb90:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
 800eb94:	f002 fca4 	bl	80114e0 <SPI_Init>
           G, 13, 12, 14,
           8, 256);

  SPI_Cmd (SPI6, ENABLE);
 800eb98:	2101      	movs	r1, #1
 800eb9a:	4810      	ldr	r0, [pc, #64]	; (800ebdc <hwBoardInit+0x67c>)
 800eb9c:	f002 fe02 	bl	80117a4 <SPI_Cmd>


  WM88XXInit();
 800eba0:	f001 fa12 	bl	800ffc8 <WM88XXInit>
  //MCLK key open
  PIN_SET(D, 5, 0);
  GPIO_INIT(D, 5, OUT, NOPULL);

  //Inicjalizacja LED
  LEDS_INIT();
 800eba4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  for (wm = WM8805_1; wm < WM_CHIP_CNT; wm++)
    {
      timeout = 1000;
      while ( ( data[0] != 0x05 || data[1] != 0x88 )  && timeout )
        {
          WM88XXReadID(wm, data);
 800eba8:	b2fe      	uxtb	r6, r7
  char data[4];
  int wm = 0, timeout = 0;
  for (wm = WM8805_1; wm < WM_CHIP_CNT; wm++)
    {
      timeout = 1000;
      while ( ( data[0] != 0x05 || data[1] != 0x88 )  && timeout )
 800ebaa:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 800ebae:	2905      	cmp	r1, #5
 800ebb0:	d103      	bne.n	800ebba <hwBoardInit+0x65a>
 800ebb2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800ebb6:	2b88      	cmp	r3, #136	; 0x88
 800ebb8:	d012      	beq.n	800ebe0 <hwBoardInit+0x680>
 800ebba:	b18d      	cbz	r5, 800ebe0 <hwBoardInit+0x680>
        {
          WM88XXReadID(wm, data);
 800ebbc:	4621      	mov	r1, r4
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	f001 fb04 	bl	80101cc <WM88XXReadID>
          timeout--;
 800ebc4:	3d01      	subs	r5, #1
 800ebc6:	e7f0      	b.n	800ebaa <hwBoardInit+0x64a>
 800ebc8:	40021800 	.word	0x40021800
 800ebcc:	40002000 	.word	0x40002000
 800ebd0:	40020800 	.word	0x40020800
 800ebd4:	10001000 	.word	0x10001000
 800ebd8:	40020400 	.word	0x40020400
 800ebdc:	40015400 	.word	0x40015400
        }
      xprintf("ID1: %x ID2: %x REV: %x\n", data[0], data[1], data[2]);
 800ebe0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800ebe4:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800ebe8:	489d      	ldr	r0, [pc, #628]	; (800ee60 <hwBoardInit+0x900>)
 800ebea:	f7fa f81d 	bl	8008c28 <xprintf>
      *((int *)data) = 0;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	9309      	str	r3, [sp, #36]	; 0x24

      if (timeout <= 0)
        {
          xprintf("\e[31m""Chip %d not found\e[m\n", wm);
 800ebf2:	4639      	mov	r1, r7
          timeout--;
        }
      xprintf("ID1: %x ID2: %x REV: %x\n", data[0], data[1], data[2]);
      *((int *)data) = 0;

      if (timeout <= 0)
 800ebf4:	b90d      	cbnz	r5, 800ebfa <hwBoardInit+0x69a>
        {
          xprintf("\e[31m""Chip %d not found\e[m\n", wm);
 800ebf6:	489b      	ldr	r0, [pc, #620]	; (800ee64 <hwBoardInit+0x904>)
 800ebf8:	e000      	b.n	800ebfc <hwBoardInit+0x69c>
        }
      else
        {
          xprintf("Identifed chip %d\n", wm);
 800ebfa:	489b      	ldr	r0, [pc, #620]	; (800ee68 <hwBoardInit+0x908>)

  WM88XXInit();
  // Detecting all chips:
  char data[4];
  int wm = 0, timeout = 0;
  for (wm = WM8805_1; wm < WM_CHIP_CNT; wm++)
 800ebfc:	3701      	adds	r7, #1
        {
          xprintf("\e[31m""Chip %d not found\e[m\n", wm);
        }
      else
        {
          xprintf("Identifed chip %d\n", wm);
 800ebfe:	f7fa f813 	bl	8008c28 <xprintf>

  WM88XXInit();
  // Detecting all chips:
  char data[4];
  int wm = 0, timeout = 0;
  for (wm = WM8805_1; wm < WM_CHIP_CNT; wm++)
 800ec02:	2f04      	cmp	r7, #4
 800ec04:	d1ce      	bne.n	800eba4 <hwBoardInit+0x644>
        {
          xprintf("Identifed chip %d\n", wm);
        }
    }

  xprintf("Ver 0.000001\n");
 800ec06:	4899      	ldr	r0, [pc, #612]	; (800ee6c <hwBoardInit+0x90c>)
  initWM88xxConfig();
#define CLR_HELPER(arg_name) memset((void *)&arg_name##helper, 0, sizeof(arg_name##helper))
#define CPY_HELPER(arg_dst, arg_src) memcpy((void *)&arg_dst##helper, (void *)&arg_src##helper, sizeof(arg_dst##helper));

  //inicjalizacja UARTow i SPI
  CLR_HELPER(CEN_);
 800ec08:	f8df b28c 	ldr.w	fp, [pc, #652]	; 800ee98 <hwBoardInit+0x938>
#endif

  PER1_UARThelper.usart = USART2;
  PER2_UARThelper.usart = UART4;

  if(cfg.proto & 0x40)
 800ec0c:	4e98      	ldr	r6, [pc, #608]	; (800ee70 <hwBoardInit+0x910>)
        {
          xprintf("Identifed chip %d\n", wm);
        }
    }

  xprintf("Ver 0.000001\n");
 800ec0e:	f7fa f80b 	bl	8008c28 <xprintf>

  xprintf("Config for WM8805_1\n");
 800ec12:	4898      	ldr	r0, [pc, #608]	; (800ee74 <hwBoardInit+0x914>)
 800ec14:	f7fa f808 	bl	8008c28 <xprintf>
  initWM88xxInterface(WM8805_1, WM88XX_RECV_CHANNEL0, WM880x_I2S);    //default OPT1
 800ec18:	2200      	movs	r2, #0
 800ec1a:	4611      	mov	r1, r2
 800ec1c:	4610      	mov	r0, r2
 800ec1e:	f7ff fb7f 	bl	800e320 <initWM88xxInterface>
  xprintf("Config for WM8805_2\n");
 800ec22:	4895      	ldr	r0, [pc, #596]	; (800ee78 <hwBoardInit+0x918>)
 800ec24:	f7fa f800 	bl	8008c28 <xprintf>
  initWM88xxInterface(WM8805_2, WM88XX_RECV_CHANNEL0, WM880x_DSP);  // DSP for direct feed to WM8804_1
 800ec28:	2201      	movs	r2, #1
 800ec2a:	4610      	mov	r0, r2
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	f7ff fb77 	bl	800e320 <initWM88xxInterface>

  xprintf("Config for WM8804_1\n");
 800ec32:	4892      	ldr	r0, [pc, #584]	; (800ee7c <hwBoardInit+0x91c>)
 800ec34:	f7f9 fff8 	bl	8008c28 <xprintf>
  initWM88xxInterface(WM8804_1, WM88XX_RECV_CHANNEL1, WM880x_DSP);
 800ec38:	2201      	movs	r2, #1
 800ec3a:	4611      	mov	r1, r2
 800ec3c:	2002      	movs	r0, #2
 800ec3e:	f7ff fb6f 	bl	800e320 <initWM88xxInterface>
  xprintf("Config for WM8804_2\n");
 800ec42:	488f      	ldr	r0, [pc, #572]	; (800ee80 <hwBoardInit+0x920>)
 800ec44:	f7f9 fff0 	bl	8008c28 <xprintf>
  initWM88xxInterface(WM8804_2, WM88XX_RECV_CHANNEL1, WM880x_DSP);
 800ec48:	2201      	movs	r2, #1
 800ec4a:	4611      	mov	r1, r2
 800ec4c:	2003      	movs	r0, #3
 800ec4e:	f7ff fb67 	bl	800e320 <initWM88xxInterface>
      wm++;

      wm = wm % 2;

    }
  mdelay(10);
 800ec52:	200a      	movs	r0, #10
 800ec54:	f7fb ff58 	bl	800ab08 <vTaskDelay>
  initWM88xxConfig();
#define CLR_HELPER(arg_name) memset((void *)&arg_name##helper, 0, sizeof(arg_name##helper))
#define CPY_HELPER(arg_dst, arg_src) memcpy((void *)&arg_dst##helper, (void *)&arg_src##helper, sizeof(arg_dst##helper));

  //inicjalizacja UARTow i SPI
  CLR_HELPER(CEN_);
 800ec58:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ec5c:	2100      	movs	r1, #0
 800ec5e:	4658      	mov	r0, fp
 800ec60:	f00e fa88 	bl	801d174 <memset>
  CLR_HELPER(PER1_SPI);
 800ec64:	f240 1223 	movw	r2, #291	; 0x123
 800ec68:	2100      	movs	r1, #0
 800ec6a:	f50b 7007 	add.w	r0, fp, #540	; 0x21c
 800ec6e:	f00e fa81 	bl	801d174 <memset>
  CLR_HELPER(PER2_SPI);
 800ec72:	f240 1223 	movw	r2, #291	; 0x123
 800ec76:	2100      	movs	r1, #0
 800ec78:	f20b 303f 	addw	r0, fp, #831	; 0x33f
 800ec7c:	f00e fa7a 	bl	801d174 <memset>
  CLR_HELPER(PER3_SPI);
 800ec80:	f240 1223 	movw	r2, #291	; 0x123
 800ec84:	2100      	movs	r1, #0
 800ec86:	f20b 4062 	addw	r0, fp, #1122	; 0x462
 800ec8a:	f00e fa73 	bl	801d174 <memset>
  CLR_HELPER(PER4_SPI);
 800ec8e:	f240 1223 	movw	r2, #291	; 0x123
 800ec92:	2100      	movs	r1, #0
 800ec94:	f20b 5085 	addw	r0, fp, #1413	; 0x585
 800ec98:	f00e fa6c 	bl	801d174 <memset>
  CLR_HELPER(PER5_SPI);
 800ec9c:	f240 1223 	movw	r2, #291	; 0x123
 800eca0:	2100      	movs	r1, #0
 800eca2:	f50b 60d5 	add.w	r0, fp, #1704	; 0x6a8
 800eca6:	f00e fa65 	bl	801d174 <memset>
  CLR_HELPER(PER6_SPI);
 800ecaa:	f240 1223 	movw	r2, #291	; 0x123
 800ecae:	2100      	movs	r1, #0
 800ecb0:	f20b 70cb 	addw	r0, fp, #1995	; 0x7cb
 800ecb4:	f00e fa5e 	bl	801d174 <memset>
  CLR_HELPER(PER7_SPI);
 800ecb8:	f240 1223 	movw	r2, #291	; 0x123
 800ecbc:	2100      	movs	r1, #0
 800ecbe:	f60b 00ee 	addw	r0, fp, #2286	; 0x8ee
 800ecc2:	f00e fa57 	bl	801d174 <memset>
  CLR_HELPER(PER8_SPI);
 800ecc6:	f240 1223 	movw	r2, #291	; 0x123
 800ecca:	2100      	movs	r1, #0
 800eccc:	f60b 2011 	addw	r0, fp, #2577	; 0xa11
 800ecd0:	f00e fa50 	bl	801d174 <memset>
  CLR_HELPER(PER1_UART);
 800ecd4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ecd8:	2100      	movs	r1, #0
 800ecda:	f60b 3034 	addw	r0, fp, #2868	; 0xb34
 800ecde:	f00e fa49 	bl	801d174 <memset>
  CLR_HELPER(PER2_UART);
 800ece2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ece6:	2100      	movs	r1, #0
 800ece8:	f50b 6055 	add.w	r0, fp, #3408	; 0xd50

#ifndef CEN_ALTER
  CEN_helper.usart = USART3;
 800ecec:	f04f 0800 	mov.w	r8, #0
  CLR_HELPER(PER5_SPI);
  CLR_HELPER(PER6_SPI);
  CLR_HELPER(PER7_SPI);
  CLR_HELPER(PER8_SPI);
  CLR_HELPER(PER1_UART);
  CLR_HELPER(PER2_UART);
 800ecf0:	f00e fa40 	bl	801d174 <memset>

#ifndef CEN_ALTER
  CEN_helper.usart = USART3;
 800ecf4:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ecf8:	2248      	movs	r2, #72	; 0x48
  USART_INIT(USART3, 1, D, 8, D, 9, UART_SPEED); //CEN
 800ecfa:	2101      	movs	r1, #1
 800ecfc:	2008      	movs	r0, #8
  CLR_HELPER(PER8_SPI);
  CLR_HELPER(PER1_UART);
  CLR_HELPER(PER2_UART);

#ifndef CEN_ALTER
  CEN_helper.usart = USART3;
 800ecfe:	f88b 321b 	strb.w	r3, [fp, #539]	; 0x21b
 800ed02:	f88b 2219 	strb.w	r2, [fp, #537]	; 0x219
 800ed06:	f88b 8218 	strb.w	r8, [fp, #536]	; 0x218
 800ed0a:	f88b 821a 	strb.w	r8, [fp, #538]	; 0x21a
  USART_INIT(USART3, 1, D, 8, D, 9, UART_SPEED); //CEN
 800ed0e:	f001 ff99 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800ed12:	2101      	movs	r1, #1
 800ed14:	2008      	movs	r0, #8
 800ed16:	f001 ff95 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800ed1a:	2101      	movs	r1, #1
 800ed1c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ed20:	f001 ffb4 	bl	8010c8c <RCC_APB1PeriphClockCmd>
 800ed24:	2207      	movs	r2, #7
 800ed26:	2108      	movs	r1, #8
 800ed28:	4856      	ldr	r0, [pc, #344]	; (800ee84 <hwBoardInit+0x924>)
 800ed2a:	f001 fe17 	bl	801095c <GPIO_PinAFConfig>
 800ed2e:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 800ed32:	2207      	movs	r2, #7
 800ed34:	2109      	movs	r1, #9
 800ed36:	4853      	ldr	r0, [pc, #332]	; (800ee84 <hwBoardInit+0x924>)
 800ed38:	f001 fe10 	bl	801095c <GPIO_PinAFConfig>
 800ed3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed40:	f849 2d44 	str.w	r2, [r9, #-68]!
 800ed44:	2501      	movs	r5, #1
 800ed46:	f04f 0a02 	mov.w	sl, #2
 800ed4a:	4649      	mov	r1, r9
 800ed4c:	484d      	ldr	r0, [pc, #308]	; (800ee84 <hwBoardInit+0x924>)
 800ed4e:	f88d 8022 	strb.w	r8, [sp, #34]	; 0x22
 800ed52:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
 800ed56:	f88d a020 	strb.w	sl, [sp, #32]
 800ed5a:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 800ed5e:	f001 fc83 	bl	8010668 <GPIO_Init>
 800ed62:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed66:	4649      	mov	r1, r9
 800ed68:	4846      	ldr	r0, [pc, #280]	; (800ee84 <hwBoardInit+0x924>)
 800ed6a:	9207      	str	r2, [sp, #28]
 800ed6c:	f001 fc7c 	bl	8010668 <GPIO_Init>
 800ed70:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800ed74:	9309      	str	r3, [sp, #36]	; 0x24
 800ed76:	4621      	mov	r1, r4
 800ed78:	f04f 030c 	mov.w	r3, #12
 800ed7c:	4842      	ldr	r0, [pc, #264]	; (800ee88 <hwBoardInit+0x928>)
 800ed7e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800ed82:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
 800ed86:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 800ed8a:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 800ed8e:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 800ed92:	f002 f83b 	bl	8010e0c <USART_Init>
 800ed96:	4629      	mov	r1, r5
 800ed98:	483b      	ldr	r0, [pc, #236]	; (800ee88 <hwBoardInit+0x928>)
 800ed9a:	f002 f911 	bl	8010fc0 <USART_Cmd>
  USART_INIT_HANDLER(USART3);
 800ed9e:	493b      	ldr	r1, [pc, #236]	; (800ee8c <hwBoardInit+0x92c>)
 800eda0:	2027      	movs	r0, #39	; 0x27
 800eda2:	f7f9 fcb1 	bl	8008708 <registerIRQ>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800eda6:	4a3a      	ldr	r2, [pc, #232]	; (800ee90 <hwBoardInit+0x930>)
 800eda8:	4837      	ldr	r0, [pc, #220]	; (800ee88 <hwBoardInit+0x928>)
 800edaa:	21f0      	movs	r1, #240	; 0xf0
 800edac:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800edb0:	2180      	movs	r1, #128	; 0x80
 800edb2:	6051      	str	r1, [r2, #4]
 800edb4:	462a      	mov	r2, r5
 800edb6:	f240 5125 	movw	r1, #1317	; 0x525
 800edba:	f002 f9a5 	bl	8011108 <USART_ITConfig>
  CEN_helper.usart = USART1;
  USART_INIT(USART1, 2, A, 9, A, 10, UART_SPEED); //CEN
  USART_INIT_HANDLER(USART1);
#endif

  PER1_UARThelper.usart = USART2;
 800edbe:	2244      	movs	r2, #68	; 0x44
 800edc0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800edc4:	f88b 2d4d 	strb.w	r2, [fp, #3405]	; 0xd4d
  PER2_UARThelper.usart = UART4;
 800edc8:	224c      	movs	r2, #76	; 0x4c
  CEN_helper.usart = USART1;
  USART_INIT(USART1, 2, A, 9, A, 10, UART_SPEED); //CEN
  USART_INIT_HANDLER(USART1);
#endif

  PER1_UARThelper.usart = USART2;
 800edca:	f88b 8d4c 	strb.w	r8, [fp, #3404]	; 0xd4c
 800edce:	f88b 8d4e 	strb.w	r8, [fp, #3406]	; 0xd4e
 800edd2:	f88b 3d4f 	strb.w	r3, [fp, #3407]	; 0xd4f
  PER2_UARThelper.usart = UART4;
 800edd6:	f88b 8f68 	strb.w	r8, [fp, #3944]	; 0xf68
 800edda:	f88b 2f69 	strb.w	r2, [fp, #3945]	; 0xf69
 800edde:	f88b 8f6a 	strb.w	r8, [fp, #3946]	; 0xf6a
 800ede2:	f88b 3f6b 	strb.w	r3, [fp, #3947]	; 0xf6b

  if(cfg.proto & 0x40)
 800ede6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800ede8:	f8cd b000 	str.w	fp, [sp]
 800edec:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    {
      USART_INIT(USART2, 1, A, 2, D, 6, UART_SPEED); //PER1
 800edf0:	4629      	mov	r1, r5
 800edf2:	4628      	mov	r0, r5
#endif

  PER1_UARThelper.usart = USART2;
  PER2_UARThelper.usart = UART4;

  if(cfg.proto & 0x40)
 800edf4:	9301      	str	r3, [sp, #4]
 800edf6:	d051      	beq.n	800ee9c <hwBoardInit+0x93c>
    {
      USART_INIT(USART2, 1, A, 2, D, 6, UART_SPEED); //PER1
 800edf8:	f001 ff24 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800edfc:	4629      	mov	r1, r5
 800edfe:	2008      	movs	r0, #8
 800ee00:	f001 ff20 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800ee04:	4629      	mov	r1, r5
 800ee06:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ee0a:	f001 ff3f 	bl	8010c8c <RCC_APB1PeriphClockCmd>
 800ee0e:	2207      	movs	r2, #7
 800ee10:	4651      	mov	r1, sl
 800ee12:	4820      	ldr	r0, [pc, #128]	; (800ee94 <hwBoardInit+0x934>)
 800ee14:	f001 fda2 	bl	801095c <GPIO_PinAFConfig>
 800ee18:	2207      	movs	r2, #7
 800ee1a:	2106      	movs	r1, #6
 800ee1c:	4819      	ldr	r0, [pc, #100]	; (800ee84 <hwBoardInit+0x924>)
 800ee1e:	f001 fd9d 	bl	801095c <GPIO_PinAFConfig>
 800ee22:	4649      	mov	r1, r9
 800ee24:	481b      	ldr	r0, [pc, #108]	; (800ee94 <hwBoardInit+0x934>)
 800ee26:	f88d 8022 	strb.w	r8, [sp, #34]	; 0x22
 800ee2a:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
 800ee2e:	f88d a020 	strb.w	sl, [sp, #32]
 800ee32:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 800ee36:	9707      	str	r7, [sp, #28]
 800ee38:	f001 fc16 	bl	8010668 <GPIO_Init>
 800ee3c:	2340      	movs	r3, #64	; 0x40
 800ee3e:	4649      	mov	r1, r9
 800ee40:	4810      	ldr	r0, [pc, #64]	; (800ee84 <hwBoardInit+0x924>)
 800ee42:	9307      	str	r3, [sp, #28]
 800ee44:	f001 fc10 	bl	8010668 <GPIO_Init>
 800ee48:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800ee4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee4e:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
 800ee52:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 800ee56:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 800ee5a:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 800ee5e:	e054      	b.n	800ef0a <hwBoardInit+0x9aa>
 800ee60:	0803e47e 	.word	0x0803e47e
 800ee64:	0803e497 	.word	0x0803e497
 800ee68:	0803e50a 	.word	0x0803e50a
 800ee6c:	0803e51d 	.word	0x0803e51d
 800ee70:	10001000 	.word	0x10001000
 800ee74:	0803e52b 	.word	0x0803e52b
 800ee78:	0803e540 	.word	0x0803e540
 800ee7c:	0803e555 	.word	0x0803e555
 800ee80:	0803e56a 	.word	0x0803e56a
 800ee84:	40020c00 	.word	0x40020c00
 800ee88:	40004800 	.word	0x40004800
 800ee8c:	0800e2a1 	.word	0x0800e2a1
 800ee90:	e000e100 	.word	0xe000e100
 800ee94:	40020000 	.word	0x40020000
 800ee98:	200194d0 	.word	0x200194d0
    }
  else
    {
      USART_INIT(USART2, 1, A, 2, A, 3, UART_SPEED); //PER1
 800ee9c:	f001 fed2 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800eea0:	4629      	mov	r1, r5
 800eea2:	4628      	mov	r0, r5
 800eea4:	f001 fece 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800eea8:	4629      	mov	r1, r5
 800eeaa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800eeae:	f001 feed 	bl	8010c8c <RCC_APB1PeriphClockCmd>
 800eeb2:	2207      	movs	r2, #7
 800eeb4:	4651      	mov	r1, sl
 800eeb6:	48ad      	ldr	r0, [pc, #692]	; (800f16c <hwBoardInit+0xc0c>)
 800eeb8:	f001 fd50 	bl	801095c <GPIO_PinAFConfig>
 800eebc:	2207      	movs	r2, #7
 800eebe:	2103      	movs	r1, #3
 800eec0:	48aa      	ldr	r0, [pc, #680]	; (800f16c <hwBoardInit+0xc0c>)
 800eec2:	f001 fd4b 	bl	801095c <GPIO_PinAFConfig>
 800eec6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eeca:	48a8      	ldr	r0, [pc, #672]	; (800f16c <hwBoardInit+0xc0c>)
 800eecc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800eed0:	4649      	mov	r1, r9
 800eed2:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
 800eed6:	f88d a020 	strb.w	sl, [sp, #32]
 800eeda:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 800eede:	9707      	str	r7, [sp, #28]
 800eee0:	f001 fbc2 	bl	8010668 <GPIO_Init>
 800eee4:	2308      	movs	r3, #8
 800eee6:	4649      	mov	r1, r9
 800eee8:	48a0      	ldr	r0, [pc, #640]	; (800f16c <hwBoardInit+0xc0c>)
 800eeea:	9307      	str	r3, [sp, #28]
 800eeec:	f001 fbbc 	bl	8010668 <GPIO_Init>
 800eef0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800eef4:	9309      	str	r3, [sp, #36]	; 0x24
 800eef6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800eefa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800eefe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800ef02:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800ef06:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800ef0a:	f04f 030c 	mov.w	r3, #12
 800ef0e:	4621      	mov	r1, r4
 800ef10:	4897      	ldr	r0, [pc, #604]	; (800f170 <hwBoardInit+0xc10>)
 800ef12:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800ef16:	f001 ff79 	bl	8010e0c <USART_Init>
 800ef1a:	4629      	mov	r1, r5
 800ef1c:	4894      	ldr	r0, [pc, #592]	; (800f170 <hwBoardInit+0xc10>)
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800ef1e:	4d95      	ldr	r5, [pc, #596]	; (800f174 <hwBoardInit+0xc14>)
 800ef20:	f002 f84e 	bl	8010fc0 <USART_Cmd>
    }
  USART_INIT_HANDLER(USART2);
 800ef24:	4994      	ldr	r1, [pc, #592]	; (800f178 <hwBoardInit+0xc18>)
 800ef26:	2026      	movs	r0, #38	; 0x26
 800ef28:	f7f9 fbee 	bl	8008708 <registerIRQ>
 800ef2c:	f04f 0af0 	mov.w	sl, #240	; 0xf0
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800ef30:	2340      	movs	r3, #64	; 0x40
 800ef32:	2201      	movs	r2, #1
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800ef34:	f885 a326 	strb.w	sl, [r5, #806]	; 0x326
 800ef38:	f240 5125 	movw	r1, #1317	; 0x525
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800ef3c:	606b      	str	r3, [r5, #4]
 800ef3e:	488c      	ldr	r0, [pc, #560]	; (800f170 <hwBoardInit+0xc10>)
 800ef40:	9301      	str	r3, [sp, #4]
 800ef42:	f002 f8e1 	bl	8011108 <USART_ITConfig>
  USART_INIT(UART4, 1, A, 0, A, 1, UART_SPEED); //PER2
 800ef46:	2101      	movs	r1, #1
 800ef48:	4608      	mov	r0, r1
 800ef4a:	f001 fe7b 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800ef4e:	2101      	movs	r1, #1
 800ef50:	4608      	mov	r0, r1
 800ef52:	f001 fe77 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800ef56:	2101      	movs	r1, #1
 800ef58:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ef5c:	f001 fe96 	bl	8010c8c <RCC_APB1PeriphClockCmd>
 800ef60:	2208      	movs	r2, #8
 800ef62:	2100      	movs	r1, #0
 800ef64:	4881      	ldr	r0, [pc, #516]	; (800f16c <hwBoardInit+0xc0c>)
 800ef66:	f001 fcf9 	bl	801095c <GPIO_PinAFConfig>
 800ef6a:	2208      	movs	r2, #8
 800ef6c:	2101      	movs	r1, #1
 800ef6e:	487f      	ldr	r0, [pc, #508]	; (800f16c <hwBoardInit+0xc0c>)
 800ef70:	f001 fcf4 	bl	801095c <GPIO_PinAFConfig>
 800ef74:	f04f 0800 	mov.w	r8, #0
 800ef78:	2701      	movs	r7, #1
 800ef7a:	f04f 0b02 	mov.w	fp, #2
 800ef7e:	4649      	mov	r1, r9
 800ef80:	487a      	ldr	r0, [pc, #488]	; (800f16c <hwBoardInit+0xc0c>)
 800ef82:	f88d 8022 	strb.w	r8, [sp, #34]	; 0x22
 800ef86:	f88d 7023 	strb.w	r7, [sp, #35]	; 0x23
 800ef8a:	f88d b020 	strb.w	fp, [sp, #32]
 800ef8e:	f88d b021 	strb.w	fp, [sp, #33]	; 0x21
 800ef92:	9707      	str	r7, [sp, #28]
 800ef94:	f001 fb68 	bl	8010668 <GPIO_Init>
 800ef98:	4649      	mov	r1, r9
 800ef9a:	4874      	ldr	r0, [pc, #464]	; (800f16c <hwBoardInit+0xc0c>)
 800ef9c:	f8cd b01c 	str.w	fp, [sp, #28]
 800efa0:	f001 fb62 	bl	8010668 <GPIO_Init>
 800efa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800efa8:	9209      	str	r2, [sp, #36]	; 0x24
 800efaa:	4621      	mov	r1, r4
 800efac:	220c      	movs	r2, #12
 800efae:	4873      	ldr	r0, [pc, #460]	; (800f17c <hwBoardInit+0xc1c>)
 800efb0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800efb4:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
 800efb8:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 800efbc:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 800efc0:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 800efc4:	f001 ff22 	bl	8010e0c <USART_Init>
 800efc8:	4639      	mov	r1, r7
 800efca:	486c      	ldr	r0, [pc, #432]	; (800f17c <hwBoardInit+0xc1c>)
 800efcc:	f001 fff8 	bl	8010fc0 <USART_Cmd>
  USART_INIT_HANDLER(UART4);
 800efd0:	496b      	ldr	r1, [pc, #428]	; (800f180 <hwBoardInit+0xc20>)
 800efd2:	2034      	movs	r0, #52	; 0x34
 800efd4:	f7f9 fb98 	bl	8008708 <registerIRQ>
 800efd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800efdc:	f885 a334 	strb.w	sl, [r5, #820]	; 0x334
 800efe0:	f240 5125 	movw	r1, #1317	; 0x525
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800efe4:	606a      	str	r2, [r5, #4]
 800efe6:	4865      	ldr	r0, [pc, #404]	; (800f17c <hwBoardInit+0xc1c>)
 800efe8:	463a      	mov	r2, r7
 800efea:	f002 f88d 	bl	8011108 <USART_ITConfig>


  {
    //Radio modules
    SPI_INIT_HANDLER(SPI1);
 800efee:	4965      	ldr	r1, [pc, #404]	; (800f184 <hwBoardInit+0xc24>)
 800eff0:	2023      	movs	r0, #35	; 0x23
 800eff2:	f7f9 fb89 	bl	8008708 <registerIRQ>
 800eff6:	4540      	cmp	r0, r8
 800eff8:	9b01      	ldr	r3, [sp, #4]
 800effa:	da00      	bge.n	800effe <hwBoardInit+0xa9e>
 800effc:	e7fe      	b.n	800effc <hwBoardInit+0xa9c>
 800effe:	2208      	movs	r2, #8
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800f000:	f885 a323 	strb.w	sl, [r5, #803]	; 0x323
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800f004:	606a      	str	r2, [r5, #4]
    if(cfg.proto & 0x40)
 800f006:	f8d6 a034 	ldr.w	sl, [r6, #52]	; 0x34
 800f00a:	4d5f      	ldr	r5, [pc, #380]	; (800f188 <hwBoardInit+0xc28>)
 800f00c:	f01a 0a40 	ands.w	sl, sl, #64	; 0x40
 800f010:	f04f 0230 	mov.w	r2, #48	; 0x30
 800f014:	f000 80c8 	beq.w	800f1a8 <hwBoardInit+0xc48>
      {
        SPI_INIT_MODULE(radioModule[0].spi,
 800f018:	706a      	strb	r2, [r5, #1]
 800f01a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800f01e:	70eb      	strb	r3, [r5, #3]
 800f020:	74eb      	strb	r3, [r5, #19]
 800f022:	752b      	strb	r3, [r5, #20]
 800f024:	736b      	strb	r3, [r5, #13]
 800f026:	70af      	strb	r7, [r5, #2]
 800f028:	4639      	mov	r1, r7
 800f02a:	f885 8000 	strb.w	r8, [r5]
 800f02e:	f885 8010 	strb.w	r8, [r5, #16]
 800f032:	f885 8011 	strb.w	r8, [r5, #17]
 800f036:	f885 b012 	strb.w	fp, [r5, #18]
 800f03a:	f885 8015 	strb.w	r8, [r5, #21]
 800f03e:	f885 800a 	strb.w	r8, [r5, #10]
 800f042:	f885 800b 	strb.w	r8, [r5, #11]
 800f046:	f885 b00c 	strb.w	fp, [r5, #12]
 800f04a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f04e:	9301      	str	r3, [sp, #4]
 800f050:	73aa      	strb	r2, [r5, #14]
 800f052:	f885 800f 	strb.w	r8, [r5, #15]
 800f056:	f001 fe3d 	bl	8010cd4 <RCC_APB2PeriphClockCmd>
 800f05a:	4639      	mov	r1, r7
 800f05c:	4658      	mov	r0, fp
 800f05e:	f001 fdf1 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f062:	4639      	mov	r1, r7
 800f064:	4638      	mov	r0, r7
 800f066:	f001 fded 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f06a:	4639      	mov	r1, r7
 800f06c:	4638      	mov	r0, r7
 800f06e:	f001 fde9 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f072:	2205      	movs	r2, #5
 800f074:	2106      	movs	r1, #6
 800f076:	483d      	ldr	r0, [pc, #244]	; (800f16c <hwBoardInit+0xc0c>)
 800f078:	f001 fc70 	bl	801095c <GPIO_PinAFConfig>
 800f07c:	2205      	movs	r2, #5
 800f07e:	2107      	movs	r1, #7
 800f080:	483a      	ldr	r0, [pc, #232]	; (800f16c <hwBoardInit+0xc0c>)
 800f082:	f001 fc6b 	bl	801095c <GPIO_PinAFConfig>
 800f086:	2205      	movs	r2, #5
 800f088:	2103      	movs	r1, #3
 800f08a:	4840      	ldr	r0, [pc, #256]	; (800f18c <hwBoardInit+0xc2c>)
 800f08c:	f001 fc66 	bl	801095c <GPIO_PinAFConfig>
 800f090:	2308      	movs	r3, #8
 800f092:	4649      	mov	r1, r9
 800f094:	483d      	ldr	r0, [pc, #244]	; (800f18c <hwBoardInit+0xc2c>)
 800f096:	9307      	str	r3, [sp, #28]
 800f098:	f88d b021 	strb.w	fp, [sp, #33]	; 0x21
 800f09c:	f88d 8022 	strb.w	r8, [sp, #34]	; 0x22
 800f0a0:	f88d b020 	strb.w	fp, [sp, #32]
 800f0a4:	f88d b023 	strb.w	fp, [sp, #35]	; 0x23
 800f0a8:	f001 fade 	bl	8010668 <GPIO_Init>
 800f0ac:	9b01      	ldr	r3, [sp, #4]
 800f0ae:	482f      	ldr	r0, [pc, #188]	; (800f16c <hwBoardInit+0xc0c>)
 800f0b0:	9307      	str	r3, [sp, #28]
 800f0b2:	4649      	mov	r1, r9
 800f0b4:	f001 fad8 	bl	8010668 <GPIO_Init>
 800f0b8:	2380      	movs	r3, #128	; 0x80
 800f0ba:	4649      	mov	r1, r9
 800f0bc:	482b      	ldr	r0, [pc, #172]	; (800f16c <hwBoardInit+0xc0c>)
 800f0be:	9307      	str	r3, [sp, #28]
 800f0c0:	f001 fad2 	bl	8010668 <GPIO_Init>
 800f0c4:	4832      	ldr	r0, [pc, #200]	; (800f190 <hwBoardInit+0xc30>)
 800f0c6:	f002 f9af 	bl	8011428 <SPI_I2S_DeInit>
 800f0ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0ce:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800f0d2:	2320      	movs	r3, #32
 800f0d4:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800f0d8:	2307      	movs	r3, #7
 800f0da:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f0de:	4621      	mov	r1, r4
 800f0e0:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f0e4:	482a      	ldr	r0, [pc, #168]	; (800f190 <hwBoardInit+0xc30>)
 800f0e6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f0ea:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
 800f0ee:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
 800f0f2:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 800f0f6:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 800f0fa:	f8ad 8032 	strh.w	r8, [sp, #50]	; 0x32
 800f0fe:	f002 f9ef 	bl	80114e0 <SPI_Init>
 800f102:	4638      	mov	r0, r7
 800f104:	2203      	movs	r2, #3
 800f106:	4641      	mov	r1, r8
 800f108:	f7fb ff62 	bl	800afd0 <xQueueGenericCreate>
 800f10c:	4f21      	ldr	r7, [pc, #132]	; (800f194 <hwBoardInit+0xc34>)
 800f10e:	61b8      	str	r0, [r7, #24]
 800f110:	b120      	cbz	r0, 800f11c <hwBoardInit+0xbbc>
 800f112:	4643      	mov	r3, r8
 800f114:	4642      	mov	r2, r8
 800f116:	4641      	mov	r1, r8
 800f118:	f7fb ff7f 	bl	800b01a <xQueueGenericSend>
 800f11c:	69bb      	ldr	r3, [r7, #24]
 800f11e:	b19b      	cbz	r3, 800f148 <hwBoardInit+0xbe8>
 800f120:	2300      	movs	r3, #0
 800f122:	f04f 32ff 	mov.w	r2, #4294967295
 800f126:	4619      	mov	r1, r3
 800f128:	69b8      	ldr	r0, [r7, #24]
 800f12a:	f7fc f879 	bl	800b220 <xQueueGenericReceive>
 800f12e:	2801      	cmp	r0, #1
 800f130:	f000 80e2 	beq.w	800f2f8 <hwBoardInit+0xd98>
 800f134:	4b18      	ldr	r3, [pc, #96]	; (800f198 <hwBoardInit+0xc38>)
 800f136:	4919      	ldr	r1, [pc, #100]	; (800f19c <hwBoardInit+0xc3c>)
 800f138:	4819      	ldr	r0, [pc, #100]	; (800f1a0 <hwBoardInit+0xc40>)
 800f13a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f13e:	f7f9 fd73 	bl	8008c28 <xprintf>
 800f142:	2301      	movs	r3, #1
 800f144:	9304      	str	r3, [sp, #16]
 800f146:	e00c      	b.n	800f162 <hwBoardInit+0xc02>
 800f148:	4b16      	ldr	r3, [pc, #88]	; (800f1a4 <hwBoardInit+0xc44>)
 800f14a:	4914      	ldr	r1, [pc, #80]	; (800f19c <hwBoardInit+0xc3c>)
 800f14c:	4814      	ldr	r0, [pc, #80]	; (800f1a0 <hwBoardInit+0xc40>)
 800f14e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f152:	f7f9 fd69 	bl	8008c28 <xprintf>
 800f156:	2301      	movs	r3, #1
 800f158:	9303      	str	r3, [sp, #12]
 800f15a:	9b03      	ldr	r3, [sp, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d1fc      	bne.n	800f15a <hwBoardInit+0xbfa>
 800f160:	e7de      	b.n	800f120 <hwBoardInit+0xbc0>
 800f162:	9b04      	ldr	r3, [sp, #16]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d1fc      	bne.n	800f162 <hwBoardInit+0xc02>
 800f168:	e0c6      	b.n	800f2f8 <hwBoardInit+0xd98>
 800f16a:	bf00      	nop
 800f16c:	40020000 	.word	0x40020000
 800f170:	40004400 	.word	0x40004400
 800f174:	e000e100 	.word	0xe000e100
 800f178:	0800e219 	.word	0x0800e219
 800f17c:	40004c00 	.word	0x40004c00
 800f180:	0800e191 	.word	0x0800e191
 800f184:	0800e14d 	.word	0x0800e14d
 800f188:	100032b8 	.word	0x100032b8
 800f18c:	40020400 	.word	0x40020400
 800f190:	40013000 	.word	0x40013000
 800f194:	1000201c 	.word	0x1000201c
 800f198:	0803e5eb 	.word	0x0803e5eb
 800f19c:	0803e424 	.word	0x0803e424
 800f1a0:	0801d5dd 	.word	0x0801d5dd
 800f1a4:	0803e57f 	.word	0x0803e57f
                        A, 7,
                        8, 32);
      }
    else
      {
        SPI_INIT_MODULE(radioModule[0].spi,
 800f1a8:	706a      	strb	r2, [r5, #1]
 800f1aa:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800f1ae:	70eb      	strb	r3, [r5, #3]
 800f1b0:	74eb      	strb	r3, [r5, #19]
 800f1b2:	752b      	strb	r3, [r5, #20]
 800f1b4:	736b      	strb	r3, [r5, #13]
 800f1b6:	70af      	strb	r7, [r5, #2]
 800f1b8:	4639      	mov	r1, r7
 800f1ba:	f885 a000 	strb.w	sl, [r5]
 800f1be:	f885 a010 	strb.w	sl, [r5, #16]
 800f1c2:	f885 a011 	strb.w	sl, [r5, #17]
 800f1c6:	f885 b012 	strb.w	fp, [r5, #18]
 800f1ca:	f885 a015 	strb.w	sl, [r5, #21]
 800f1ce:	f885 a00a 	strb.w	sl, [r5, #10]
 800f1d2:	f885 a00b 	strb.w	sl, [r5, #11]
 800f1d6:	f885 b00c 	strb.w	fp, [r5, #12]
 800f1da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f1de:	9301      	str	r3, [sp, #4]
 800f1e0:	73aa      	strb	r2, [r5, #14]
 800f1e2:	f885 a00f 	strb.w	sl, [r5, #15]
 800f1e6:	f001 fd75 	bl	8010cd4 <RCC_APB2PeriphClockCmd>
 800f1ea:	4639      	mov	r1, r7
 800f1ec:	4638      	mov	r0, r7
 800f1ee:	f001 fd29 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f1f2:	4639      	mov	r1, r7
 800f1f4:	4638      	mov	r0, r7
 800f1f6:	f001 fd25 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f1fa:	4639      	mov	r1, r7
 800f1fc:	4638      	mov	r0, r7
 800f1fe:	f001 fd21 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f202:	2205      	movs	r2, #5
 800f204:	2106      	movs	r1, #6
 800f206:	4886      	ldr	r0, [pc, #536]	; (800f420 <hwBoardInit+0xec0>)
 800f208:	f001 fba8 	bl	801095c <GPIO_PinAFConfig>
 800f20c:	2205      	movs	r2, #5
 800f20e:	2107      	movs	r1, #7
 800f210:	4883      	ldr	r0, [pc, #524]	; (800f420 <hwBoardInit+0xec0>)
 800f212:	f001 fba3 	bl	801095c <GPIO_PinAFConfig>
 800f216:	2205      	movs	r2, #5
 800f218:	4611      	mov	r1, r2
 800f21a:	4881      	ldr	r0, [pc, #516]	; (800f420 <hwBoardInit+0xec0>)
 800f21c:	f001 fb9e 	bl	801095c <GPIO_PinAFConfig>
 800f220:	f04f 0820 	mov.w	r8, #32
 800f224:	4649      	mov	r1, r9
 800f226:	487e      	ldr	r0, [pc, #504]	; (800f420 <hwBoardInit+0xec0>)
 800f228:	f88d b021 	strb.w	fp, [sp, #33]	; 0x21
 800f22c:	f88d a022 	strb.w	sl, [sp, #34]	; 0x22
 800f230:	f88d b020 	strb.w	fp, [sp, #32]
 800f234:	f88d b023 	strb.w	fp, [sp, #35]	; 0x23
 800f238:	f8cd 801c 	str.w	r8, [sp, #28]
 800f23c:	f001 fa14 	bl	8010668 <GPIO_Init>
 800f240:	9b01      	ldr	r3, [sp, #4]
 800f242:	4877      	ldr	r0, [pc, #476]	; (800f420 <hwBoardInit+0xec0>)
 800f244:	9307      	str	r3, [sp, #28]
 800f246:	4649      	mov	r1, r9
 800f248:	f001 fa0e 	bl	8010668 <GPIO_Init>
 800f24c:	2380      	movs	r3, #128	; 0x80
 800f24e:	4649      	mov	r1, r9
 800f250:	4873      	ldr	r0, [pc, #460]	; (800f420 <hwBoardInit+0xec0>)
 800f252:	9307      	str	r3, [sp, #28]
 800f254:	f001 fa08 	bl	8010668 <GPIO_Init>
 800f258:	4872      	ldr	r0, [pc, #456]	; (800f424 <hwBoardInit+0xec4>)
 800f25a:	f002 f8e5 	bl	8011428 <SPI_I2S_DeInit>
 800f25e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f262:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800f266:	2307      	movs	r3, #7
 800f268:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f26c:	4621      	mov	r1, r4
 800f26e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f272:	486c      	ldr	r0, [pc, #432]	; (800f424 <hwBoardInit+0xec4>)
 800f274:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f278:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
 800f27c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 800f280:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
 800f284:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
 800f288:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 800f28c:	f8ad a032 	strh.w	sl, [sp, #50]	; 0x32
 800f290:	f002 f926 	bl	80114e0 <SPI_Init>
 800f294:	4638      	mov	r0, r7
 800f296:	2203      	movs	r2, #3
 800f298:	4651      	mov	r1, sl
 800f29a:	f7fb fe99 	bl	800afd0 <xQueueGenericCreate>
 800f29e:	4f62      	ldr	r7, [pc, #392]	; (800f428 <hwBoardInit+0xec8>)
 800f2a0:	61b8      	str	r0, [r7, #24]
 800f2a2:	b120      	cbz	r0, 800f2ae <hwBoardInit+0xd4e>
 800f2a4:	4653      	mov	r3, sl
 800f2a6:	4652      	mov	r2, sl
 800f2a8:	4651      	mov	r1, sl
 800f2aa:	f7fb feb6 	bl	800b01a <xQueueGenericSend>
 800f2ae:	69bb      	ldr	r3, [r7, #24]
 800f2b0:	b14b      	cbz	r3, 800f2c6 <hwBoardInit+0xd66>
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	69b8      	ldr	r0, [r7, #24]
 800f2bc:	f7fb ffb0 	bl	800b220 <xQueueGenericReceive>
 800f2c0:	2801      	cmp	r0, #1
 800f2c2:	d10d      	bne.n	800f2e0 <hwBoardInit+0xd80>
 800f2c4:	e018      	b.n	800f2f8 <hwBoardInit+0xd98>
 800f2c6:	4b59      	ldr	r3, [pc, #356]	; (800f42c <hwBoardInit+0xecc>)
 800f2c8:	4959      	ldr	r1, [pc, #356]	; (800f430 <hwBoardInit+0xed0>)
 800f2ca:	485a      	ldr	r0, [pc, #360]	; (800f434 <hwBoardInit+0xed4>)
 800f2cc:	f240 121b 	movw	r2, #283	; 0x11b
 800f2d0:	f7f9 fcaa 	bl	8008c28 <xprintf>
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	9305      	str	r3, [sp, #20]
 800f2d8:	9b05      	ldr	r3, [sp, #20]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1fc      	bne.n	800f2d8 <hwBoardInit+0xd78>
 800f2de:	e7e8      	b.n	800f2b2 <hwBoardInit+0xd52>
 800f2e0:	4b55      	ldr	r3, [pc, #340]	; (800f438 <hwBoardInit+0xed8>)
 800f2e2:	4953      	ldr	r1, [pc, #332]	; (800f430 <hwBoardInit+0xed0>)
 800f2e4:	4853      	ldr	r0, [pc, #332]	; (800f434 <hwBoardInit+0xed4>)
 800f2e6:	f240 121b 	movw	r2, #283	; 0x11b
 800f2ea:	f7f9 fc9d 	bl	8008c28 <xprintf>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	9306      	str	r3, [sp, #24]
 800f2f2:	9b06      	ldr	r3, [sp, #24]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d1fc      	bne.n	800f2f2 <hwBoardInit+0xd92>
 800f2f8:	2101      	movs	r1, #1
 800f2fa:	484a      	ldr	r0, [pc, #296]	; (800f424 <hwBoardInit+0xec4>)
 800f2fc:	f002 fa52 	bl	80117a4 <SPI_Cmd>
                        A, 5,
                        A, 6,
                        A, 7,
                        8, 32);
      }
    radioModule[1] = radioModule[0];
 800f300:	4b4e      	ldr	r3, [pc, #312]	; (800f43c <hwBoardInit+0xedc>)
 800f302:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 800f306:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f30a:	f853 0b04 	ldr.w	r0, [r3], #4
 800f30e:	f842 0b04 	str.w	r0, [r2], #4
 800f312:	428b      	cmp	r3, r1
 800f314:	d1f9      	bne.n	800f30a <hwBoardInit+0xdaa>
 800f316:	8819      	ldrh	r1, [r3, #0]
 800f318:	8011      	strh	r1, [r2, #0]
 800f31a:	789b      	ldrb	r3, [r3, #2]
 800f31c:	7093      	strb	r3, [r2, #2]

    if(!(cfg.proto&0x1))
 800f31e:	f8d6 8034 	ldr.w	r8, [r6, #52]	; 0x34
 800f322:	f018 0801 	ands.w	r8, r8, #1
 800f326:	f040 8091 	bne.w	800f44c <hwBoardInit+0xeec>
      {
        if(cfg.proto & 0x40)
 800f32a:	4b45      	ldr	r3, [pc, #276]	; (800f440 <hwBoardInit+0xee0>)
 800f32c:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800f32e:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 800f332:	d027      	beq.n	800f384 <hwBoardInit+0xe24>
          {
            SPI_CS_INIT_MODULE(radioModule[1].spi, G, 2);
 800f334:	2318      	movs	r3, #24
 800f336:	2040      	movs	r0, #64	; 0x40
 800f338:	f04f 0a04 	mov.w	sl, #4
 800f33c:	f04f 0b02 	mov.w	fp, #2
 800f340:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800f344:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
 800f348:	2101      	movs	r1, #1
 800f34a:	f885 803f 	strb.w	r8, [r5, #63]	; 0x3f
 800f34e:	f885 b041 	strb.w	fp, [r5, #65]	; 0x41
 800f352:	f885 a043 	strb.w	sl, [r5, #67]	; 0x43
 800f356:	f885 8044 	strb.w	r8, [r5, #68]	; 0x44
 800f35a:	f001 fc73 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f35e:	2701      	movs	r7, #1
 800f360:	4621      	mov	r1, r4
 800f362:	4838      	ldr	r0, [pc, #224]	; (800f444 <hwBoardInit+0xee4>)
 800f364:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800f368:	f88d b029 	strb.w	fp, [sp, #41]	; 0x29
 800f36c:	f88d 802a 	strb.w	r8, [sp, #42]	; 0x2a
 800f370:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800f374:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f378:	f001 f976 	bl	8010668 <GPIO_Init>
 800f37c:	463a      	mov	r2, r7
 800f37e:	4651      	mov	r1, sl
 800f380:	4830      	ldr	r0, [pc, #192]	; (800f444 <hwBoardInit+0xee4>)
 800f382:	e028      	b.n	800f3d6 <hwBoardInit+0xe76>
          }
        else
          {
            SPI_CS_INIT_MODULE(radioModule[1].spi, A, 15);
 800f384:	2340      	movs	r3, #64	; 0x40
 800f386:	2101      	movs	r1, #1
 800f388:	f04f 0a02 	mov.w	sl, #2
 800f38c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 800f390:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800f394:	4608      	mov	r0, r1
 800f396:	f885 703f 	strb.w	r7, [r5, #63]	; 0x3f
 800f39a:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
 800f39e:	f885 7043 	strb.w	r7, [r5, #67]	; 0x43
 800f3a2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800f3a6:	f885 a041 	strb.w	sl, [r5, #65]	; 0x41
 800f3aa:	f001 fc4b 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f3ae:	f04f 0801 	mov.w	r8, #1
 800f3b2:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800f3b6:	4621      	mov	r1, r4
 800f3b8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 800f3bc:	4818      	ldr	r0, [pc, #96]	; (800f420 <hwBoardInit+0xec0>)
 800f3be:	f88d 8028 	strb.w	r8, [sp, #40]	; 0x28
 800f3c2:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 800f3c6:	f88d 802b 	strb.w	r8, [sp, #43]	; 0x2b
 800f3ca:	9709      	str	r7, [sp, #36]	; 0x24
 800f3cc:	f001 f94c 	bl	8010668 <GPIO_Init>
 800f3d0:	4813      	ldr	r0, [pc, #76]	; (800f420 <hwBoardInit+0xec0>)
 800f3d2:	4642      	mov	r2, r8
 800f3d4:	4639      	mov	r1, r7
 800f3d6:	f001 fa4f 	bl	8010878 <GPIO_WriteBit>
          }

        SPI_CS_INIT_MODULE(radioModule[0].spi, C, 1);
 800f3da:	2308      	movs	r3, #8
 800f3dc:	2702      	movs	r7, #2
 800f3de:	f04f 0800 	mov.w	r8, #0
 800f3e2:	716b      	strb	r3, [r5, #5]
 800f3e4:	2340      	movs	r3, #64	; 0x40
 800f3e6:	71eb      	strb	r3, [r5, #7]
 800f3e8:	f885 8004 	strb.w	r8, [r5, #4]
 800f3ec:	71af      	strb	r7, [r5, #6]
 800f3ee:	722f      	strb	r7, [r5, #8]
 800f3f0:	f885 8009 	strb.w	r8, [r5, #9]
 800f3f4:	2101      	movs	r1, #1
 800f3f6:	2004      	movs	r0, #4
 800f3f8:	f001 fc24 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f3fc:	2501      	movs	r5, #1
 800f3fe:	4621      	mov	r1, r4
 800f400:	4811      	ldr	r0, [pc, #68]	; (800f448 <hwBoardInit+0xee8>)
 800f402:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 800f406:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800f40a:	f88d 802a 	strb.w	r8, [sp, #42]	; 0x2a
 800f40e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800f412:	9709      	str	r7, [sp, #36]	; 0x24
 800f414:	f001 f928 	bl	8010668 <GPIO_Init>
 800f418:	462a      	mov	r2, r5
 800f41a:	4639      	mov	r1, r7
 800f41c:	e064      	b.n	800f4e8 <hwBoardInit+0xf88>
 800f41e:	bf00      	nop
 800f420:	40020000 	.word	0x40020000
 800f424:	40013000 	.word	0x40013000
 800f428:	1000201c 	.word	0x1000201c
 800f42c:	0803e57f 	.word	0x0803e57f
 800f430:	0803e424 	.word	0x0803e424
 800f434:	0801d5dd 	.word	0x0801d5dd
 800f438:	0803e5eb 	.word	0x0803e5eb
 800f43c:	100032b8 	.word	0x100032b8
 800f440:	10001000 	.word	0x10001000
 800f444:	40021800 	.word	0x40021800
 800f448:	40020800 	.word	0x40020800
      }
    else
      {
        SPI_CS_INIT_MODULE(radioModule[1].spi, C, 1);
 800f44c:	f04f 0802 	mov.w	r8, #2
 800f450:	f04f 0a00 	mov.w	sl, #0
 800f454:	2308      	movs	r3, #8
 800f456:	f04f 0b40 	mov.w	fp, #64	; 0x40
 800f45a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800f45e:	f885 a03f 	strb.w	sl, [r5, #63]	; 0x3f
 800f462:	2101      	movs	r1, #1
 800f464:	9301      	str	r3, [sp, #4]
 800f466:	2004      	movs	r0, #4
 800f468:	f885 b042 	strb.w	fp, [r5, #66]	; 0x42
 800f46c:	f885 8041 	strb.w	r8, [r5, #65]	; 0x41
 800f470:	f885 8043 	strb.w	r8, [r5, #67]	; 0x43
 800f474:	f885 a044 	strb.w	sl, [r5, #68]	; 0x44
 800f478:	f001 fbe4 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f47c:	2701      	movs	r7, #1
 800f47e:	4621      	mov	r1, r4
 800f480:	48e4      	ldr	r0, [pc, #912]	; (800f814 <hwBoardInit+0x12b4>)
 800f482:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800f486:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800f48a:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800f48e:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800f492:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800f496:	f001 f8e7 	bl	8010668 <GPIO_Init>
 800f49a:	463a      	mov	r2, r7
 800f49c:	4641      	mov	r1, r8
 800f49e:	48dd      	ldr	r0, [pc, #884]	; (800f814 <hwBoardInit+0x12b4>)
 800f4a0:	f001 f9ea 	bl	8010878 <GPIO_WriteBit>
        SPI_CS_INIT_MODULE(radioModule[0].spi, C, 2);
 800f4a4:	f885 a004 	strb.w	sl, [r5, #4]
 800f4a8:	9b01      	ldr	r3, [sp, #4]
 800f4aa:	f885 b007 	strb.w	fp, [r5, #7]
 800f4ae:	f04f 0b04 	mov.w	fp, #4
 800f4b2:	716b      	strb	r3, [r5, #5]
 800f4b4:	4639      	mov	r1, r7
 800f4b6:	4658      	mov	r0, fp
 800f4b8:	f885 8006 	strb.w	r8, [r5, #6]
 800f4bc:	f885 b008 	strb.w	fp, [r5, #8]
 800f4c0:	f885 a009 	strb.w	sl, [r5, #9]
 800f4c4:	f001 fbbe 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f4c8:	4621      	mov	r1, r4
 800f4ca:	48d2      	ldr	r0, [pc, #840]	; (800f814 <hwBoardInit+0x12b4>)
 800f4cc:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800f4d0:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800f4d4:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800f4d8:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800f4dc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f4e0:	f001 f8c2 	bl	8010668 <GPIO_Init>
 800f4e4:	463a      	mov	r2, r7
 800f4e6:	4659      	mov	r1, fp
 800f4e8:	48ca      	ldr	r0, [pc, #808]	; (800f814 <hwBoardInit+0x12b4>)
 800f4ea:	f001 f9c5 	bl	8010878 <GPIO_WriteBit>
      }

    SETUP_EXTI(B, 4, EXTI4_IRQn, radio_int1_irq);
 800f4ee:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
 800f4f2:	2101      	movs	r1, #1
 800f4f4:	2002      	movs	r0, #2
 800f4f6:	f001 fba5 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f4fa:	2710      	movs	r7, #16
 800f4fc:	2101      	movs	r1, #1
 800f4fe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f502:	f001 fbe7 	bl	8010cd4 <RCC_APB2PeriphClockCmd>
 800f506:	f84b 7d44 	str.w	r7, [fp, #-68]!
 800f50a:	2501      	movs	r5, #1
 800f50c:	f04f 0a00 	mov.w	sl, #0
 800f510:	4659      	mov	r1, fp
 800f512:	48c1      	ldr	r0, [pc, #772]	; (800f818 <hwBoardInit+0x12b8>)
 800f514:	f88d a020 	strb.w	sl, [sp, #32]
 800f518:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
 800f51c:	f001 f8a4 	bl	8010668 <GPIO_Init>
 800f520:	2104      	movs	r1, #4
 800f522:	4628      	mov	r0, r5
 800f524:	f003 fad2 	bl	8012acc <SYSCFG_EXTILineConfig>
 800f528:	f04f 030c 	mov.w	r3, #12
 800f52c:	4620      	mov	r0, r4
 800f52e:	9709      	str	r7, [sp, #36]	; 0x24
 800f530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800f534:	4fb9      	ldr	r7, [pc, #740]	; (800f81c <hwBoardInit+0x12bc>)
 800f536:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800f53a:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800f53e:	f003 f9fb 	bl	8012938 <EXTI_Init>
 800f542:	49b7      	ldr	r1, [pc, #732]	; (800f820 <hwBoardInit+0x12c0>)
 800f544:	200a      	movs	r0, #10
 800f546:	f7f9 f8df 	bl	8008708 <registerIRQ>
 800f54a:	22f0      	movs	r2, #240	; 0xf0
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800f54c:	f44f 6180 	mov.w	r1, #1024	; 0x400
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800f550:	f887 230a 	strb.w	r2, [r7, #778]	; 0x30a
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800f554:	6039      	str	r1, [r7, #0]

    if(cfg.proto & 0x40)
 800f556:	f8d6 8034 	ldr.w	r8, [r6, #52]	; 0x34
 800f55a:	9201      	str	r2, [sp, #4]
 800f55c:	f018 0840 	ands.w	r8, r8, #64	; 0x40
      {
        SETUP_EXTI(G, 1, EXTI1_IRQn, radio_int2_irq);
 800f560:	4629      	mov	r1, r5
        SPI_CS_INIT_MODULE(radioModule[0].spi, C, 2);
      }

    SETUP_EXTI(B, 4, EXTI4_IRQn, radio_int1_irq);

    if(cfg.proto & 0x40)
 800f562:	d02d      	beq.n	800f5c0 <hwBoardInit+0x1060>
      {
        SETUP_EXTI(G, 1, EXTI1_IRQn, radio_int2_irq);
 800f564:	2040      	movs	r0, #64	; 0x40
 800f566:	f001 fb6d 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f56a:	4629      	mov	r1, r5
 800f56c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f570:	f001 fbb0 	bl	8010cd4 <RCC_APB2PeriphClockCmd>
 800f574:	f04f 0802 	mov.w	r8, #2
 800f578:	4659      	mov	r1, fp
 800f57a:	48aa      	ldr	r0, [pc, #680]	; (800f824 <hwBoardInit+0x12c4>)
 800f57c:	f88d a020 	strb.w	sl, [sp, #32]
 800f580:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
 800f584:	f8cd 801c 	str.w	r8, [sp, #28]
 800f588:	f001 f86e 	bl	8010668 <GPIO_Init>
 800f58c:	4629      	mov	r1, r5
 800f58e:	2006      	movs	r0, #6
 800f590:	f003 fa9c 	bl	8012acc <SYSCFG_EXTILineConfig>
 800f594:	f04f 030c 	mov.w	r3, #12
 800f598:	4620      	mov	r0, r4
 800f59a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f59e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800f5a2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800f5a6:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800f5aa:	f003 f9c5 	bl	8012938 <EXTI_Init>
 800f5ae:	499e      	ldr	r1, [pc, #632]	; (800f828 <hwBoardInit+0x12c8>)
 800f5b0:	2007      	movs	r0, #7
 800f5b2:	f7f9 f8a9 	bl	8008708 <registerIRQ>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800f5b6:	9a01      	ldr	r2, [sp, #4]
 800f5b8:	f887 2307 	strb.w	r2, [r7, #775]	; 0x307
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800f5bc:	2380      	movs	r3, #128	; 0x80
 800f5be:	e02d      	b.n	800f61c <hwBoardInit+0x10bc>
      }
    else
      {
        SETUP_EXTI(B, 5, EXTI9_5_IRQn, radio_int2_irq);
 800f5c0:	2002      	movs	r0, #2
 800f5c2:	f001 fb3f 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f5c6:	4629      	mov	r1, r5
 800f5c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f5cc:	f001 fb82 	bl	8010cd4 <RCC_APB2PeriphClockCmd>
 800f5d0:	f04f 0a20 	mov.w	sl, #32
 800f5d4:	4659      	mov	r1, fp
 800f5d6:	4890      	ldr	r0, [pc, #576]	; (800f818 <hwBoardInit+0x12b8>)
 800f5d8:	f88d 8020 	strb.w	r8, [sp, #32]
 800f5dc:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
 800f5e0:	f8cd a01c 	str.w	sl, [sp, #28]
 800f5e4:	f001 f840 	bl	8010668 <GPIO_Init>
 800f5e8:	2105      	movs	r1, #5
 800f5ea:	4628      	mov	r0, r5
 800f5ec:	f003 fa6e 	bl	8012acc <SYSCFG_EXTILineConfig>
 800f5f0:	f04f 030c 	mov.w	r3, #12
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f5fe:	f88d 8028 	strb.w	r8, [sp, #40]	; 0x28
 800f602:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800f606:	f003 f997 	bl	8012938 <EXTI_Init>
 800f60a:	4987      	ldr	r1, [pc, #540]	; (800f828 <hwBoardInit+0x12c8>)
 800f60c:	2017      	movs	r0, #23
 800f60e:	f7f9 f87b 	bl	8008708 <registerIRQ>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800f612:	9a01      	ldr	r2, [sp, #4]
 800f614:	f887 2317 	strb.w	r2, [r7, #791]	; 0x317
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800f618:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f61c:	603b      	str	r3, [r7, #0]
    PER1_SPIhelper.moduleNum = 0;
    PER1_SPIhelper.master = 1;
    PER1_SPIhelper.radioModule = NULL;;
  }

  CPY_HELPER(PER2_SPI, PER1_SPI);
 800f61e:	4983      	ldr	r1, [pc, #524]	; (800f82c <hwBoardInit+0x12cc>)
      }
  }

  {
    //PER1 section
    PER1_SPIhelper.moduleNum = 0;
 800f620:	9b00      	ldr	r3, [sp, #0]
    PER1_SPIhelper.master = 1;
    PER1_SPIhelper.radioModule = NULL;;
  }

  CPY_HELPER(PER2_SPI, PER1_SPI);
 800f622:	f240 1223 	movw	r2, #291	; 0x123
      }
  }

  {
    //PER1 section
    PER1_SPIhelper.moduleNum = 0;
 800f626:	2500      	movs	r5, #0
    PER1_SPIhelper.master = 1;
 800f628:	2701      	movs	r7, #1
    PER1_SPIhelper.radioModule = NULL;;
  }

  CPY_HELPER(PER2_SPI, PER1_SPI);
 800f62a:	1888      	adds	r0, r1, r2
      }
  }

  {
    //PER1 section
    PER1_SPIhelper.moduleNum = 0;
 800f62c:	f883 532c 	strb.w	r5, [r3, #812]	; 0x32c
 800f630:	f883 532d 	strb.w	r5, [r3, #813]	; 0x32d
 800f634:	f883 532e 	strb.w	r5, [r3, #814]	; 0x32e
 800f638:	f883 532f 	strb.w	r5, [r3, #815]	; 0x32f
    PER1_SPIhelper.master = 1;
 800f63c:	f883 7330 	strb.w	r7, [r3, #816]	; 0x330
    PER1_SPIhelper.radioModule = NULL;;
 800f640:	f883 5328 	strb.w	r5, [r3, #808]	; 0x328
 800f644:	f883 5329 	strb.w	r5, [r3, #809]	; 0x329
 800f648:	f883 532a 	strb.w	r5, [r3, #810]	; 0x32a
 800f64c:	f883 532b 	strb.w	r5, [r3, #811]	; 0x32b
  }

  CPY_HELPER(PER2_SPI, PER1_SPI);
 800f650:	f00d fcf6 	bl	801d040 <memcpy>
  CPY_HELPER(PER3_SPI, PER1_SPI);
 800f654:	4975      	ldr	r1, [pc, #468]	; (800f82c <hwBoardInit+0x12cc>)
 800f656:	f240 1223 	movw	r2, #291	; 0x123
 800f65a:	f201 2046 	addw	r0, r1, #582	; 0x246
 800f65e:	f00d fcef 	bl	801d040 <memcpy>
  CPY_HELPER(PER4_SPI, PER1_SPI);
 800f662:	4972      	ldr	r1, [pc, #456]	; (800f82c <hwBoardInit+0x12cc>)
 800f664:	f240 1223 	movw	r2, #291	; 0x123
 800f668:	f201 3069 	addw	r0, r1, #873	; 0x369
 800f66c:	f00d fce8 	bl	801d040 <memcpy>
  CPY_HELPER(PER5_SPI, PER1_SPI);
 800f670:	496e      	ldr	r1, [pc, #440]	; (800f82c <hwBoardInit+0x12cc>)
 800f672:	f240 1223 	movw	r2, #291	; 0x123
 800f676:	f201 408c 	addw	r0, r1, #1164	; 0x48c
 800f67a:	f00d fce1 	bl	801d040 <memcpy>
  CPY_HELPER(PER6_SPI, PER1_SPI);
 800f67e:	496b      	ldr	r1, [pc, #428]	; (800f82c <hwBoardInit+0x12cc>)
 800f680:	f240 1223 	movw	r2, #291	; 0x123
 800f684:	f201 50af 	addw	r0, r1, #1455	; 0x5af
 800f688:	f00d fcda 	bl	801d040 <memcpy>
  CPY_HELPER(PER7_SPI, PER1_SPI);
 800f68c:	4967      	ldr	r1, [pc, #412]	; (800f82c <hwBoardInit+0x12cc>)
 800f68e:	f240 1223 	movw	r2, #291	; 0x123
 800f692:	f201 60d2 	addw	r0, r1, #1746	; 0x6d2
 800f696:	f00d fcd3 	bl	801d040 <memcpy>
  CPY_HELPER(PER8_SPI, PER1_SPI);
 800f69a:	4964      	ldr	r1, [pc, #400]	; (800f82c <hwBoardInit+0x12cc>)
 800f69c:	f240 1223 	movw	r2, #291	; 0x123
 800f6a0:	f201 70f5 	addw	r0, r1, #2037	; 0x7f5
 800f6a4:	f00d fccc 	bl	801d040 <memcpy>

  portData[PER1_PORT].kond_pom = cfg.kondPomSPK[0];
 800f6a8:	4b61      	ldr	r3, [pc, #388]	; (800f830 <hwBoardInit+0x12d0>)
 800f6aa:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f6ac:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  portData[PER2_PORT].kond_pom = cfg.kondPomSPK[0];
 800f6b0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f6b2:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
  portData[PER3_PORT].kond_pom = cfg.kondPomSPK[1];
 800f6b6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800f6b8:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
  portData[PER4_PORT].kond_pom = cfg.kondPomSPK[1];
 800f6bc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800f6be:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
  portData[PER5_PORT].kond_pom = cfg.kondPomSPK[2];
 800f6c2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800f6c4:	f883 21c5 	strb.w	r2, [r3, #453]	; 0x1c5
  portData[PER6_PORT].kond_pom = cfg.kondPomSPK[2];
 800f6c8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800f6ca:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
  portData[PER7_PORT].kond_pom = cfg.kondPomSPK[3];
 800f6ce:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800f6d0:	f883 2265 	strb.w	r2, [r3, #613]	; 0x265
  portData[PER8_PORT].kond_pom = cfg.kondPomSPK[3];
 800f6d4:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800f6d6:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
    //  SAI BlockA configuration section:
    //    SAI1_SD_A    ->    PE6
    //    SAI1_FS_A    ->    PE4
    //    SAI1_MCLK_A  ->    PE2
    //    SAI1_SCK_A   ->    PE5
    SAI1_BLOCKx_GPIO_INIT(E, 2, 4, 5, 6);
 800f6da:	4639      	mov	r1, r7
 800f6dc:	2010      	movs	r0, #16
 800f6de:	f001 fab1 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f6e2:	f04f 0a02 	mov.w	sl, #2
 800f6e6:	2374      	movs	r3, #116	; 0x74
 800f6e8:	f04f 0803 	mov.w	r8, #3
 800f6ec:	4621      	mov	r1, r4
 800f6ee:	4851      	ldr	r0, [pc, #324]	; (800f834 <hwBoardInit+0x12d4>)
 800f6f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f6f2:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800f6f6:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800f6fa:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800f6fe:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800f702:	f000 ffb1 	bl	8010668 <GPIO_Init>
 800f706:	2206      	movs	r2, #6
 800f708:	4651      	mov	r1, sl
 800f70a:	484a      	ldr	r0, [pc, #296]	; (800f834 <hwBoardInit+0x12d4>)
 800f70c:	f001 f926 	bl	801095c <GPIO_PinAFConfig>
 800f710:	2206      	movs	r2, #6
 800f712:	2104      	movs	r1, #4
 800f714:	4847      	ldr	r0, [pc, #284]	; (800f834 <hwBoardInit+0x12d4>)
 800f716:	f001 f921 	bl	801095c <GPIO_PinAFConfig>
 800f71a:	2206      	movs	r2, #6
 800f71c:	2105      	movs	r1, #5
 800f71e:	4845      	ldr	r0, [pc, #276]	; (800f834 <hwBoardInit+0x12d4>)
 800f720:	f001 f91c 	bl	801095c <GPIO_PinAFConfig>
 800f724:	2206      	movs	r2, #6
 800f726:	4611      	mov	r1, r2
 800f728:	4842      	ldr	r0, [pc, #264]	; (800f834 <hwBoardInit+0x12d4>)
 800f72a:	f001 f917 	bl	801095c <GPIO_PinAFConfig>
    //    SAI1_SD_B   ->    PF6
    //    SAI1_MCLK_B ->    PF7
    //    SAI1_SCK_B  ->    PF8
    //    SAI1_FS_B   ->    PF9

    SAI1_BLOCKx_GPIO_INIT(F, 6, 7, 8, 9);
 800f72e:	4639      	mov	r1, r7
 800f730:	2020      	movs	r0, #32
 800f732:	f001 fa87 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f736:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800f73a:	4621      	mov	r1, r4
 800f73c:	483e      	ldr	r0, [pc, #248]	; (800f838 <hwBoardInit+0x12d8>)
 800f73e:	9309      	str	r3, [sp, #36]	; 0x24
 800f740:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800f744:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800f748:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800f74c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800f750:	f000 ff8a 	bl	8010668 <GPIO_Init>
 800f754:	2206      	movs	r2, #6
 800f756:	4611      	mov	r1, r2
 800f758:	4837      	ldr	r0, [pc, #220]	; (800f838 <hwBoardInit+0x12d8>)
 800f75a:	f001 f8ff 	bl	801095c <GPIO_PinAFConfig>
 800f75e:	2206      	movs	r2, #6
 800f760:	2107      	movs	r1, #7
 800f762:	4835      	ldr	r0, [pc, #212]	; (800f838 <hwBoardInit+0x12d8>)
 800f764:	f001 f8fa 	bl	801095c <GPIO_PinAFConfig>
 800f768:	2206      	movs	r2, #6
 800f76a:	2108      	movs	r1, #8
 800f76c:	4832      	ldr	r0, [pc, #200]	; (800f838 <hwBoardInit+0x12d8>)
 800f76e:	f001 f8f5 	bl	801095c <GPIO_PinAFConfig>
 800f772:	2109      	movs	r1, #9
 800f774:	4830      	ldr	r0, [pc, #192]	; (800f838 <hwBoardInit+0x12d8>)
 800f776:	2206      	movs	r2, #6
 800f778:	f001 f8f0 	bl	801095c <GPIO_PinAFConfig>

  }

  {
    if(cfg.cpha)
 800f77c:	f8d6 8038 	ldr.w	r8, [r6, #56]	; 0x38
      {
        SPI_INIT_AUDIO_STREAM(SPI4, 2,
 800f780:	4639      	mov	r1, r7
 800f782:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    SAI1_BLOCKx_GPIO_INIT(F, 6, 7, 8, 9);

  }

  {
    if(cfg.cpha)
 800f786:	f1b8 0f00 	cmp.w	r8, #0
 800f78a:	d059      	beq.n	800f840 <hwBoardInit+0x12e0>
      {
        SPI_INIT_AUDIO_STREAM(SPI4, 2,
 800f78c:	f001 faa2 	bl	8010cd4 <RCC_APB2PeriphClockCmd>
 800f790:	4639      	mov	r1, r7
 800f792:	2010      	movs	r0, #16
 800f794:	f001 fa56 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f798:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800f79c:	4649      	mov	r1, r9
 800f79e:	4825      	ldr	r0, [pc, #148]	; (800f834 <hwBoardInit+0x12d4>)
 800f7a0:	9307      	str	r3, [sp, #28]
 800f7a2:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 800f7a6:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
 800f7aa:	f88d a020 	strb.w	sl, [sp, #32]
 800f7ae:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
 800f7b2:	f000 ff59 	bl	8010668 <GPIO_Init>
 800f7b6:	2205      	movs	r2, #5
 800f7b8:	210d      	movs	r1, #13
 800f7ba:	481e      	ldr	r0, [pc, #120]	; (800f834 <hwBoardInit+0x12d4>)
 800f7bc:	f001 f8ce 	bl	801095c <GPIO_PinAFConfig>
 800f7c0:	2205      	movs	r2, #5
 800f7c2:	210e      	movs	r1, #14
 800f7c4:	481b      	ldr	r0, [pc, #108]	; (800f834 <hwBoardInit+0x12d4>)
 800f7c6:	f001 f8c9 	bl	801095c <GPIO_PinAFConfig>
 800f7ca:	2205      	movs	r2, #5
 800f7cc:	210c      	movs	r1, #12
 800f7ce:	4819      	ldr	r0, [pc, #100]	; (800f834 <hwBoardInit+0x12d4>)
 800f7d0:	f001 f8c4 	bl	801095c <GPIO_PinAFConfig>
 800f7d4:	2205      	movs	r2, #5
 800f7d6:	210b      	movs	r1, #11
 800f7d8:	4816      	ldr	r0, [pc, #88]	; (800f834 <hwBoardInit+0x12d4>)
 800f7da:	f001 f8bf 	bl	801095c <GPIO_PinAFConfig>
 800f7de:	4817      	ldr	r0, [pc, #92]	; (800f83c <hwBoardInit+0x12dc>)
 800f7e0:	f001 fe22 	bl	8011428 <SPI_I2S_DeInit>
 800f7e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7e8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800f7ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f7f0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800f7f4:	2307      	movs	r3, #7
 800f7f6:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 800f7fa:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800f7fe:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800f802:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800f806:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 800f80a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f80e:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 800f812:	e058      	b.n	800f8c6 <hwBoardInit+0x1366>
 800f814:	40020800 	.word	0x40020800
 800f818:	40020400 	.word	0x40020400
 800f81c:	e000e100 	.word	0xe000e100
 800f820:	0800e489 	.word	0x0800e489
 800f824:	40021800 	.word	0x40021800
 800f828:	0800e459 	.word	0x0800e459
 800f82c:	200196ec 	.word	0x200196ec
 800f830:	1000201c 	.word	0x1000201c
 800f834:	40021000 	.word	0x40021000
 800f838:	40021400 	.word	0x40021400
 800f83c:	40013400 	.word	0x40013400
                              E, 11, 12, 13, 14,
                              Slave, SPI_CHUNK_SIZE, 2, SPI_CPHA_2Edge);
      }
    else
      {
        SPI_INIT_AUDIO_STREAM(SPI4, 2,
 800f840:	f001 fa48 	bl	8010cd4 <RCC_APB2PeriphClockCmd>
 800f844:	4639      	mov	r1, r7
 800f846:	2010      	movs	r0, #16
 800f848:	f001 f9fc 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f84c:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800f850:	4649      	mov	r1, r9
 800f852:	4886      	ldr	r0, [pc, #536]	; (800fa6c <hwBoardInit+0x150c>)
 800f854:	9307      	str	r3, [sp, #28]
 800f856:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 800f85a:	f88d 8022 	strb.w	r8, [sp, #34]	; 0x22
 800f85e:	f88d a020 	strb.w	sl, [sp, #32]
 800f862:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
 800f866:	f000 feff 	bl	8010668 <GPIO_Init>
 800f86a:	2205      	movs	r2, #5
 800f86c:	210d      	movs	r1, #13
 800f86e:	487f      	ldr	r0, [pc, #508]	; (800fa6c <hwBoardInit+0x150c>)
 800f870:	f001 f874 	bl	801095c <GPIO_PinAFConfig>
 800f874:	2205      	movs	r2, #5
 800f876:	210e      	movs	r1, #14
 800f878:	487c      	ldr	r0, [pc, #496]	; (800fa6c <hwBoardInit+0x150c>)
 800f87a:	f001 f86f 	bl	801095c <GPIO_PinAFConfig>
 800f87e:	2205      	movs	r2, #5
 800f880:	210c      	movs	r1, #12
 800f882:	487a      	ldr	r0, [pc, #488]	; (800fa6c <hwBoardInit+0x150c>)
 800f884:	f001 f86a 	bl	801095c <GPIO_PinAFConfig>
 800f888:	2205      	movs	r2, #5
 800f88a:	210b      	movs	r1, #11
 800f88c:	4877      	ldr	r0, [pc, #476]	; (800fa6c <hwBoardInit+0x150c>)
 800f88e:	f001 f865 	bl	801095c <GPIO_PinAFConfig>
 800f892:	4877      	ldr	r0, [pc, #476]	; (800fa70 <hwBoardInit+0x1510>)
 800f894:	f001 fdc8 	bl	8011428 <SPI_I2S_DeInit>
 800f898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f89c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800f8a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f8a4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800f8a8:	2307      	movs	r3, #7
 800f8aa:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 800f8ae:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 800f8b2:	f8ad 802e 	strh.w	r8, [sp, #46]	; 0x2e
 800f8b6:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 800f8ba:	f8ad 8032 	strh.w	r8, [sp, #50]	; 0x32
 800f8be:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f8c2:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 800f8c6:	4621      	mov	r1, r4
 800f8c8:	4869      	ldr	r0, [pc, #420]	; (800fa70 <hwBoardInit+0x1510>)
 800f8ca:	f001 fe09 	bl	80114e0 <SPI_Init>
 800f8ce:	4639      	mov	r1, r7
 800f8d0:	4867      	ldr	r0, [pc, #412]	; (800fa70 <hwBoardInit+0x1510>)
                              Slave, SPI_CHUNK_SIZE, 2, SPI_CPHA_1Edge);
      }

    //Request data pin for spiAudioStream(BBB)
    PIN_SET(E, 9, 1);
    GPIO_INIT(E, 9, OUT, NOPULL);
 800f8d2:	2501      	movs	r5, #1
                              E, 11, 12, 13, 14,
                              Slave, SPI_CHUNK_SIZE, 2, SPI_CPHA_2Edge);
      }
    else
      {
        SPI_INIT_AUDIO_STREAM(SPI4, 2,
 800f8d4:	f001 ff66 	bl	80117a4 <SPI_Cmd>
                              E, 11, 12, 13, 14,
                              Slave, SPI_CHUNK_SIZE, 2, SPI_CPHA_1Edge);
      }

    //Request data pin for spiAudioStream(BBB)
    PIN_SET(E, 9, 1);
 800f8d8:	2201      	movs	r2, #1
 800f8da:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f8de:	4863      	ldr	r0, [pc, #396]	; (800fa6c <hwBoardInit+0x150c>)
 800f8e0:	f000 ffca 	bl	8010878 <GPIO_WriteBit>
    GPIO_INIT(E, 9, OUT, NOPULL);
 800f8e4:	2700      	movs	r7, #0
 800f8e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f8ea:	f04f 0803 	mov.w	r8, #3
 800f8ee:	4629      	mov	r1, r5
 800f8f0:	2010      	movs	r0, #16
 800f8f2:	9309      	str	r3, [sp, #36]	; 0x24
 800f8f4:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 800f8f8:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800f8fc:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800f900:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800f904:	f001 f99e 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f908:	4621      	mov	r1, r4
 800f90a:	4858      	ldr	r0, [pc, #352]	; (800fa6c <hwBoardInit+0x150c>)
 800f90c:	f000 feac 	bl	8010668 <GPIO_Init>
    PIN_SET(E, 10, 1);
 800f910:	462a      	mov	r2, r5
 800f912:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f916:	4855      	ldr	r0, [pc, #340]	; (800fa6c <hwBoardInit+0x150c>)
 800f918:	f000 ffae 	bl	8010878 <GPIO_WriteBit>
    GPIO_INIT(E, 10, OUT, NOPULL);
 800f91c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f920:	4629      	mov	r1, r5
 800f922:	2010      	movs	r0, #16
 800f924:	9309      	str	r3, [sp, #36]	; 0x24
 800f926:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 800f92a:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800f92e:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800f932:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800f936:	f001 f985 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f93a:	4621      	mov	r1, r4
 800f93c:	484b      	ldr	r0, [pc, #300]	; (800fa6c <hwBoardInit+0x150c>)
 800f93e:	f000 fe93 	bl	8010668 <GPIO_Init>

    DMA_INIT_SPI_AUDIO_STREAM(SPI4,
 800f942:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800f946:	4629      	mov	r1, r5
 800f948:	f001 f97c 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800f94c:	4849      	ldr	r0, [pc, #292]	; (800fa74 <hwBoardInit+0x1514>)
 800f94e:	f002 f913 	bl	8011b78 <DMA_DeInit>
 800f952:	4848      	ldr	r0, [pc, #288]	; (800fa74 <hwBoardInit+0x1514>)
 800f954:	f002 fc92 	bl	801227c <DMA_GetCmdStatus>
 800f958:	4607      	mov	r7, r0
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d1f9      	bne.n	800f952 <hwBoardInit+0x13f2>
 800f95e:	4620      	mov	r0, r4
 800f960:	f002 fabe 	bl	8011ee0 <DMA_StructInit>
 800f964:	4b44      	ldr	r3, [pc, #272]	; (800fa78 <hwBoardInit+0x1518>)
 800f966:	930a      	str	r3, [sp, #40]	; 0x28
 800f968:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f96c:	9309      	str	r3, [sp, #36]	; 0x24
 800f96e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f972:	9311      	str	r3, [sp, #68]	; 0x44
 800f974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f978:	9310      	str	r3, [sp, #64]	; 0x40
 800f97a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f97e:	2501      	movs	r5, #1
 800f980:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800f984:	9312      	str	r3, [sp, #72]	; 0x48
 800f986:	4621      	mov	r1, r4
 800f988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f98c:	4839      	ldr	r0, [pc, #228]	; (800fa74 <hwBoardInit+0x1514>)
 800f98e:	9313      	str	r3, [sp, #76]	; 0x4c
 800f990:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800f994:	970c      	str	r7, [sp, #48]	; 0x30
 800f996:	970b      	str	r7, [sp, #44]	; 0x2c
 800f998:	9714      	str	r7, [sp, #80]	; 0x50
 800f99a:	9715      	str	r7, [sp, #84]	; 0x54
 800f99c:	950d      	str	r5, [sp, #52]	; 0x34
 800f99e:	9716      	str	r7, [sp, #88]	; 0x58
 800f9a0:	9717      	str	r7, [sp, #92]	; 0x5c
 800f9a2:	f002 f9af 	bl	8011d04 <DMA_Init>
 800f9a6:	4629      	mov	r1, r5
 800f9a8:	4832      	ldr	r0, [pc, #200]	; (800fa74 <hwBoardInit+0x1514>)
 800f9aa:	f002 fb8d 	bl	80120c8 <DMA_DoubleBufferModeCmd>
 800f9ae:	462a      	mov	r2, r5
 800f9b0:	2110      	movs	r1, #16
 800f9b2:	4830      	ldr	r0, [pc, #192]	; (800fa74 <hwBoardInit+0x1514>)
 800f9b4:	f002 fe08 	bl	80125c8 <DMA_ITConfig>
 800f9b8:	4930      	ldr	r1, [pc, #192]	; (800fa7c <hwBoardInit+0x151c>)
 800f9ba:	2038      	movs	r0, #56	; 0x38
 800f9bc:	f7f8 fea4 	bl	8008708 <registerIRQ>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800f9c0:	4b2f      	ldr	r3, [pc, #188]	; (800fa80 <hwBoardInit+0x1520>)
 800f9c2:	482b      	ldr	r0, [pc, #172]	; (800fa70 <hwBoardInit+0x1510>)
 800f9c4:	22f0      	movs	r2, #240	; 0xf0
 800f9c6:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800f9ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f9ce:	605a      	str	r2, [r3, #4]
 800f9d0:	4629      	mov	r1, r5
 800f9d2:	462a      	mov	r2, r5
 800f9d4:	f001 ffa4 	bl	8011920 <SPI_I2S_DMACmd>
 800f9d8:	4639      	mov	r1, r7
 800f9da:	4826      	ldr	r0, [pc, #152]	; (800fa74 <hwBoardInit+0x1514>)
 800f9dc:	f002 fa92 	bl	8011f04 <DMA_Cmd>
static void I2S_Input_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable I2S GPIO clocks */
  RCC_AHB1PeriphClockCmd( I2S_INPUT_GPIO_CLOCK , ENABLE);
 800f9e0:	4629      	mov	r1, r5
 800f9e2:	2005      	movs	r0, #5
 800f9e4:	f001 f92e 	bl	8010c44 <RCC_AHB1PeriphClockCmd>


  /* I2S_INPUT pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = I2S_INPUT_SCK_PIN;
 800f9e8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(I2S_INPUT_SCK_GPIO, &GPIO_InitStructure);
 800f9ec:	4621      	mov	r1, r4
  RCC_AHB1PeriphClockCmd( I2S_INPUT_GPIO_CLOCK , ENABLE);


  /* I2S_INPUT pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = I2S_INPUT_SCK_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800f9ee:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(I2S_INPUT_SCK_GPIO, &GPIO_InitStructure);
 800f9f2:	4824      	ldr	r0, [pc, #144]	; (800fa84 <hwBoardInit+0x1524>)
  RCC_AHB1PeriphClockCmd( I2S_INPUT_GPIO_CLOCK , ENABLE);


  /* I2S_INPUT pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = I2S_INPUT_SCK_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800f9f4:	f88d 8028 	strb.w	r8, [sp, #40]	; 0x28
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800f9f8:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800f9fc:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800fa00:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
  GPIO_Init(I2S_INPUT_SCK_GPIO, &GPIO_InitStructure);
 800fa04:	f000 fe30 	bl	8010668 <GPIO_Init>
  GPIO_InitStructure.GPIO_Pin = I2S_INPUT_SD_PIN;
 800fa08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_Init(I2S_INPUT_SD_GPIO, &GPIO_InitStructure);
 800fa0c:	4621      	mov	r1, r4
 800fa0e:	481d      	ldr	r0, [pc, #116]	; (800fa84 <hwBoardInit+0x1524>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(I2S_INPUT_SCK_GPIO, &GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = I2S_INPUT_SD_PIN;
 800fa10:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_Init(I2S_INPUT_SD_GPIO, &GPIO_InitStructure);
 800fa12:	f000 fe29 	bl	8010668 <GPIO_Init>
  GPIO_InitStructure.GPIO_Pin = I2S_INPUT_WS_PIN ;
 800fa16:	2310      	movs	r3, #16
  GPIO_Init(I2S_INPUT_WS_GPIO, &GPIO_InitStructure);
 800fa18:	4621      	mov	r1, r4
 800fa1a:	481b      	ldr	r0, [pc, #108]	; (800fa88 <hwBoardInit+0x1528>)
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(I2S_INPUT_SCK_GPIO, &GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = I2S_INPUT_SD_PIN;
  GPIO_Init(I2S_INPUT_SD_GPIO, &GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = I2S_INPUT_WS_PIN ;
 800fa1c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_Init(I2S_INPUT_WS_GPIO, &GPIO_InitStructure);
 800fa1e:	f000 fe23 	bl	8010668 <GPIO_Init>

  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(I2S_INPUT_WS_GPIO, I2S_INPUT_WS_PINSRC, I2S_INPUT_GPIO_AF);
 800fa22:	2206      	movs	r2, #6
 800fa24:	2104      	movs	r1, #4
 800fa26:	4818      	ldr	r0, [pc, #96]	; (800fa88 <hwBoardInit+0x1528>)
 800fa28:	f000 ff98 	bl	801095c <GPIO_PinAFConfig>
  GPIO_PinAFConfig(I2S_INPUT_SCK_GPIO, I2S_INPUT_SCK_PINSRC, I2S_INPUT_GPIO_AF);
 800fa2c:	2206      	movs	r2, #6
 800fa2e:	210a      	movs	r1, #10
 800fa30:	4814      	ldr	r0, [pc, #80]	; (800fa84 <hwBoardInit+0x1524>)
 800fa32:	f000 ff93 	bl	801095c <GPIO_PinAFConfig>
  GPIO_PinAFConfig(I2S_INPUT_SD_GPIO, I2S_INPUT_SD_PINSRC, I2S_INPUT_GPIO_AF);
 800fa36:	2206      	movs	r2, #6
 800fa38:	210c      	movs	r1, #12
 800fa3a:	4812      	ldr	r0, [pc, #72]	; (800fa84 <hwBoardInit+0x1524>)
 800fa3c:	f000 ff8e 	bl	801095c <GPIO_PinAFConfig>

  //I2S input initialization
  I2S_Input_GPIO_Init();

  //SAIA Switch
  if(cfg.proto&0x40)
 800fa40:	6b73      	ldr	r3, [r6, #52]	; 0x34
    {
      GPIO_INIT(G, 0, OUT, NOPULL);
 800fa42:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28

  //I2S input initialization
  I2S_Input_GPIO_Init();

  //SAIA Switch
  if(cfg.proto&0x40)
 800fa46:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800fa4a:	f04f 0203 	mov.w	r2, #3
 800fa4e:	d01f      	beq.n	800fa90 <hwBoardInit+0x1530>
    {
      GPIO_INIT(G, 0, OUT, NOPULL);
 800fa50:	4629      	mov	r1, r5
 800fa52:	2040      	movs	r0, #64	; 0x40
 800fa54:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800fa58:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 800fa5c:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800fa60:	9509      	str	r5, [sp, #36]	; 0x24
 800fa62:	f001 f8ef 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800fa66:	4621      	mov	r1, r4
 800fa68:	4808      	ldr	r0, [pc, #32]	; (800fa8c <hwBoardInit+0x152c>)
 800fa6a:	e01e      	b.n	800faaa <hwBoardInit+0x154a>
 800fa6c:	40021000 	.word	0x40021000
 800fa70:	40013400 	.word	0x40013400
 800fa74:	40026410 	.word	0x40026410
 800fa78:	4001340c 	.word	0x4001340c
 800fa7c:	0800ff5d 	.word	0x0800ff5d
 800fa80:	e000e100 	.word	0xe000e100
 800fa84:	40020800 	.word	0x40020800
 800fa88:	40020000 	.word	0x40020000
 800fa8c:	40021800 	.word	0x40021800
    }
  else
    {
      GPIO_INIT(B, 0, OUT, NOPULL);
 800fa90:	4629      	mov	r1, r5
 800fa92:	4640      	mov	r0, r8
 800fa94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa98:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 800fa9c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800faa0:	9509      	str	r5, [sp, #36]	; 0x24
 800faa2:	f001 f8cf 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800faa6:	48b5      	ldr	r0, [pc, #724]	; (800fd7c <hwBoardInit+0x181c>)
 800faa8:	4621      	mov	r1, r4
 800faaa:	f000 fddd 	bl	8010668 <GPIO_Init>
    }

  selectorSet(SELECTOR_SAI);
 800faae:	2001      	movs	r0, #1
 800fab0:	f7fe fd18 	bl	800e4e4 <selectorSet>

  if(cfg.proto&0x1)
 800fab4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800fab6:	07db      	lsls	r3, r3, #31
 800fab8:	d518      	bpl.n	800faec <hwBoardInit+0x158c>
    {
      //SAIB Switch
      GPIO_INIT(B, 1, OUT, NOPULL);
 800faba:	2502      	movs	r5, #2
 800fabc:	2101      	movs	r1, #1
 800fabe:	2700      	movs	r7, #0
 800fac0:	2303      	movs	r3, #3
 800fac2:	4628      	mov	r0, r5
 800fac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800facc:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800fad0:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800fad4:	9509      	str	r5, [sp, #36]	; 0x24
 800fad6:	f001 f8b5 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800fada:	4621      	mov	r1, r4
 800fadc:	48a7      	ldr	r0, [pc, #668]	; (800fd7c <hwBoardInit+0x181c>)
 800fade:	f000 fdc3 	bl	8010668 <GPIO_Init>
      PIN_SET(B, 1, 0);
 800fae2:	463a      	mov	r2, r7
 800fae4:	4629      	mov	r1, r5
 800fae6:	48a5      	ldr	r0, [pc, #660]	; (800fd7c <hwBoardInit+0x181c>)
 800fae8:	f000 fec6 	bl	8010878 <GPIO_WriteBit>
    }

  //MCLK key close
  PIN_SET(D, 5, 1);
 800faec:	2201      	movs	r2, #1
 800faee:	2120      	movs	r1, #32
 800faf0:	48a3      	ldr	r0, [pc, #652]	; (800fd80 <hwBoardInit+0x1820>)
 800faf2:	f000 fec1 	bl	8010878 <GPIO_WriteBit>


  //USB
  //ULPI reset
  PIN_SET(D, 2, 1);
 800faf6:	2201      	movs	r2, #1
 800faf8:	2104      	movs	r1, #4
 800fafa:	48a1      	ldr	r0, [pc, #644]	; (800fd80 <hwBoardInit+0x1820>)
 800fafc:	f000 febc 	bl	8010878 <GPIO_WriteBit>
  GPIO_INIT(D, 2, OUT, NOPULL);
 800fb00:	2300      	movs	r3, #0
 800fb02:	2203      	movs	r2, #3
 800fb04:	2101      	movs	r1, #1
 800fb06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb0a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800fb0e:	2008      	movs	r0, #8
 800fb10:	2304      	movs	r3, #4
 800fb12:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 800fb16:	9309      	str	r3, [sp, #36]	; 0x24
 800fb18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb1c:	f001 f892 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
 800fb20:	4621      	mov	r1, r4
 800fb22:	4897      	ldr	r0, [pc, #604]	; (800fd80 <hwBoardInit+0x1820>)
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800fb24:	4c97      	ldr	r4, [pc, #604]	; (800fd84 <hwBoardInit+0x1824>)
 800fb26:	f000 fd9f 	bl	8010668 <GPIO_Init>

  registerIRQ(OTG_HS_IRQn, OTG_HS_IRQHandler);
 800fb2a:	4997      	ldr	r1, [pc, #604]	; (800fd88 <hwBoardInit+0x1828>)
 800fb2c:	204d      	movs	r0, #77	; 0x4d
 800fb2e:	f7f8 fdeb 	bl	8008708 <registerIRQ>
 800fb32:	23f0      	movs	r3, #240	; 0xf0
 800fb34:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d
  NVIC_SetPriority(OTG_HS_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY);
  libUSBStartup((cfg.proto & 0x40));
 800fb38:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800fb3a:	f000 0040 	and.w	r0, r0, #64	; 0x40
 800fb3e:	f00a fe8f 	bl	801a860 <libUSBStartup>
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800fb42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fb46:	60a3      	str	r3, [r4, #8]
  NVIC_EnableIRQ(OTG_HS_IRQn);



  CONFIG_PRINT();
 800fb48:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	dd05      	ble.n	800fb5a <hwBoardInit+0x15fa>
 800fb4e:	4b8f      	ldr	r3, [pc, #572]	; (800fd8c <hwBoardInit+0x182c>)
 800fb50:	498f      	ldr	r1, [pc, #572]	; (800fd90 <hwBoardInit+0x1830>)
 800fb52:	681a      	ldr	r2, [r3, #0]
 800fb54:	488f      	ldr	r0, [pc, #572]	; (800fd94 <hwBoardInit+0x1834>)
 800fb56:	f7f9 f867 	bl	8008c28 <xprintf>
 800fb5a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	dd05      	ble.n	800fb6c <hwBoardInit+0x160c>
 800fb60:	4b8a      	ldr	r3, [pc, #552]	; (800fd8c <hwBoardInit+0x182c>)
 800fb62:	498d      	ldr	r1, [pc, #564]	; (800fd98 <hwBoardInit+0x1838>)
 800fb64:	685a      	ldr	r2, [r3, #4]
 800fb66:	488b      	ldr	r0, [pc, #556]	; (800fd94 <hwBoardInit+0x1834>)
 800fb68:	f7f9 f85e 	bl	8008c28 <xprintf>
 800fb6c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	dd05      	ble.n	800fb7e <hwBoardInit+0x161e>
 800fb72:	4b86      	ldr	r3, [pc, #536]	; (800fd8c <hwBoardInit+0x182c>)
 800fb74:	4989      	ldr	r1, [pc, #548]	; (800fd9c <hwBoardInit+0x183c>)
 800fb76:	689a      	ldr	r2, [r3, #8]
 800fb78:	4886      	ldr	r0, [pc, #536]	; (800fd94 <hwBoardInit+0x1834>)
 800fb7a:	f7f9 f855 	bl	8008c28 <xprintf>
 800fb7e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	dd05      	ble.n	800fb90 <hwBoardInit+0x1630>
 800fb84:	4b81      	ldr	r3, [pc, #516]	; (800fd8c <hwBoardInit+0x182c>)
 800fb86:	4986      	ldr	r1, [pc, #536]	; (800fda0 <hwBoardInit+0x1840>)
 800fb88:	68da      	ldr	r2, [r3, #12]
 800fb8a:	4882      	ldr	r0, [pc, #520]	; (800fd94 <hwBoardInit+0x1834>)
 800fb8c:	f7f9 f84c 	bl	8008c28 <xprintf>
 800fb90:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	dd05      	ble.n	800fba2 <hwBoardInit+0x1642>
 800fb96:	4b7d      	ldr	r3, [pc, #500]	; (800fd8c <hwBoardInit+0x182c>)
 800fb98:	4982      	ldr	r1, [pc, #520]	; (800fda4 <hwBoardInit+0x1844>)
 800fb9a:	691a      	ldr	r2, [r3, #16]
 800fb9c:	487d      	ldr	r0, [pc, #500]	; (800fd94 <hwBoardInit+0x1834>)
 800fb9e:	f7f9 f843 	bl	8008c28 <xprintf>
 800fba2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	dd05      	ble.n	800fbb4 <hwBoardInit+0x1654>
 800fba8:	4b78      	ldr	r3, [pc, #480]	; (800fd8c <hwBoardInit+0x182c>)
 800fbaa:	497f      	ldr	r1, [pc, #508]	; (800fda8 <hwBoardInit+0x1848>)
 800fbac:	695a      	ldr	r2, [r3, #20]
 800fbae:	4879      	ldr	r0, [pc, #484]	; (800fd94 <hwBoardInit+0x1834>)
 800fbb0:	f7f9 f83a 	bl	8008c28 <xprintf>
 800fbb4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	dd05      	ble.n	800fbc6 <hwBoardInit+0x1666>
 800fbba:	4b74      	ldr	r3, [pc, #464]	; (800fd8c <hwBoardInit+0x182c>)
 800fbbc:	497b      	ldr	r1, [pc, #492]	; (800fdac <hwBoardInit+0x184c>)
 800fbbe:	699a      	ldr	r2, [r3, #24]
 800fbc0:	4874      	ldr	r0, [pc, #464]	; (800fd94 <hwBoardInit+0x1834>)
 800fbc2:	f7f9 f831 	bl	8008c28 <xprintf>
 800fbc6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	dd05      	ble.n	800fbd8 <hwBoardInit+0x1678>
 800fbcc:	4b6f      	ldr	r3, [pc, #444]	; (800fd8c <hwBoardInit+0x182c>)
 800fbce:	4978      	ldr	r1, [pc, #480]	; (800fdb0 <hwBoardInit+0x1850>)
 800fbd0:	69da      	ldr	r2, [r3, #28]
 800fbd2:	4870      	ldr	r0, [pc, #448]	; (800fd94 <hwBoardInit+0x1834>)
 800fbd4:	f7f9 f828 	bl	8008c28 <xprintf>
 800fbd8:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	dd05      	ble.n	800fbea <hwBoardInit+0x168a>
 800fbde:	4b6b      	ldr	r3, [pc, #428]	; (800fd8c <hwBoardInit+0x182c>)
 800fbe0:	4974      	ldr	r1, [pc, #464]	; (800fdb4 <hwBoardInit+0x1854>)
 800fbe2:	6a1a      	ldr	r2, [r3, #32]
 800fbe4:	486b      	ldr	r0, [pc, #428]	; (800fd94 <hwBoardInit+0x1834>)
 800fbe6:	f7f9 f81f 	bl	8008c28 <xprintf>
 800fbea:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	dd05      	ble.n	800fbfc <hwBoardInit+0x169c>
 800fbf0:	4b66      	ldr	r3, [pc, #408]	; (800fd8c <hwBoardInit+0x182c>)
 800fbf2:	4971      	ldr	r1, [pc, #452]	; (800fdb8 <hwBoardInit+0x1858>)
 800fbf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbf6:	4867      	ldr	r0, [pc, #412]	; (800fd94 <hwBoardInit+0x1834>)
 800fbf8:	f7f9 f816 	bl	8008c28 <xprintf>
 800fbfc:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	dd05      	ble.n	800fc0e <hwBoardInit+0x16ae>
 800fc02:	4b62      	ldr	r3, [pc, #392]	; (800fd8c <hwBoardInit+0x182c>)
 800fc04:	496d      	ldr	r1, [pc, #436]	; (800fdbc <hwBoardInit+0x185c>)
 800fc06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc08:	4862      	ldr	r0, [pc, #392]	; (800fd94 <hwBoardInit+0x1834>)
 800fc0a:	f7f9 f80d 	bl	8008c28 <xprintf>
 800fc0e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	dd05      	ble.n	800fc20 <hwBoardInit+0x16c0>
 800fc14:	4b5d      	ldr	r3, [pc, #372]	; (800fd8c <hwBoardInit+0x182c>)
 800fc16:	496a      	ldr	r1, [pc, #424]	; (800fdc0 <hwBoardInit+0x1860>)
 800fc18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc1a:	485e      	ldr	r0, [pc, #376]	; (800fd94 <hwBoardInit+0x1834>)
 800fc1c:	f7f9 f804 	bl	8008c28 <xprintf>
 800fc20:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	dd05      	ble.n	800fc32 <hwBoardInit+0x16d2>
 800fc26:	4b59      	ldr	r3, [pc, #356]	; (800fd8c <hwBoardInit+0x182c>)
 800fc28:	4966      	ldr	r1, [pc, #408]	; (800fdc4 <hwBoardInit+0x1864>)
 800fc2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc2c:	4859      	ldr	r0, [pc, #356]	; (800fd94 <hwBoardInit+0x1834>)
 800fc2e:	f7f8 fffb 	bl	8008c28 <xprintf>
 800fc32:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	dd05      	ble.n	800fc44 <hwBoardInit+0x16e4>
 800fc38:	4b54      	ldr	r3, [pc, #336]	; (800fd8c <hwBoardInit+0x182c>)
 800fc3a:	4963      	ldr	r1, [pc, #396]	; (800fdc8 <hwBoardInit+0x1868>)
 800fc3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc3e:	4855      	ldr	r0, [pc, #340]	; (800fd94 <hwBoardInit+0x1834>)
 800fc40:	f7f8 fff2 	bl	8008c28 <xprintf>
 800fc44:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	dd05      	ble.n	800fc56 <hwBoardInit+0x16f6>
 800fc4a:	4b50      	ldr	r3, [pc, #320]	; (800fd8c <hwBoardInit+0x182c>)
 800fc4c:	495f      	ldr	r1, [pc, #380]	; (800fdcc <hwBoardInit+0x186c>)
 800fc4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc50:	4850      	ldr	r0, [pc, #320]	; (800fd94 <hwBoardInit+0x1834>)
 800fc52:	f7f8 ffe9 	bl	8008c28 <xprintf>
 800fc56:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	dd05      	ble.n	800fc68 <hwBoardInit+0x1708>
 800fc5c:	4b4b      	ldr	r3, [pc, #300]	; (800fd8c <hwBoardInit+0x182c>)
 800fc5e:	495c      	ldr	r1, [pc, #368]	; (800fdd0 <hwBoardInit+0x1870>)
 800fc60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc62:	484c      	ldr	r0, [pc, #304]	; (800fd94 <hwBoardInit+0x1834>)
 800fc64:	f7f8 ffe0 	bl	8008c28 <xprintf>
 800fc68:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	dd05      	ble.n	800fc7a <hwBoardInit+0x171a>
 800fc6e:	4b47      	ldr	r3, [pc, #284]	; (800fd8c <hwBoardInit+0x182c>)
 800fc70:	4958      	ldr	r1, [pc, #352]	; (800fdd4 <hwBoardInit+0x1874>)
 800fc72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fc74:	4847      	ldr	r0, [pc, #284]	; (800fd94 <hwBoardInit+0x1834>)
 800fc76:	f7f8 ffd7 	bl	8008c28 <xprintf>
 800fc7a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	dd05      	ble.n	800fc8c <hwBoardInit+0x172c>
 800fc80:	4b42      	ldr	r3, [pc, #264]	; (800fd8c <hwBoardInit+0x182c>)
 800fc82:	4955      	ldr	r1, [pc, #340]	; (800fdd8 <hwBoardInit+0x1878>)
 800fc84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc86:	4843      	ldr	r0, [pc, #268]	; (800fd94 <hwBoardInit+0x1834>)
 800fc88:	f7f8 ffce 	bl	8008c28 <xprintf>
 800fc8c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	dd05      	ble.n	800fc9e <hwBoardInit+0x173e>
 800fc92:	4b3e      	ldr	r3, [pc, #248]	; (800fd8c <hwBoardInit+0x182c>)
 800fc94:	4951      	ldr	r1, [pc, #324]	; (800fddc <hwBoardInit+0x187c>)
 800fc96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fc98:	483e      	ldr	r0, [pc, #248]	; (800fd94 <hwBoardInit+0x1834>)
 800fc9a:	f7f8 ffc5 	bl	8008c28 <xprintf>
 800fc9e:	4c3b      	ldr	r4, [pc, #236]	; (800fd8c <hwBoardInit+0x182c>)
 800fca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	dd04      	ble.n	800fcb0 <hwBoardInit+0x1750>
 800fca6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800fca8:	494d      	ldr	r1, [pc, #308]	; (800fde0 <hwBoardInit+0x1880>)
 800fcaa:	483a      	ldr	r0, [pc, #232]	; (800fd94 <hwBoardInit+0x1834>)
 800fcac:	f7f8 ffbc 	bl	8008c28 <xprintf>
 800fcb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	dd05      	ble.n	800fcc2 <hwBoardInit+0x1762>
 800fcb6:	4b35      	ldr	r3, [pc, #212]	; (800fd8c <hwBoardInit+0x182c>)
 800fcb8:	494a      	ldr	r1, [pc, #296]	; (800fde4 <hwBoardInit+0x1884>)
 800fcba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fcbc:	4835      	ldr	r0, [pc, #212]	; (800fd94 <hwBoardInit+0x1834>)
 800fcbe:	f7f8 ffb3 	bl	8008c28 <xprintf>
 800fcc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	dd05      	ble.n	800fcd4 <hwBoardInit+0x1774>
 800fcc8:	4b30      	ldr	r3, [pc, #192]	; (800fd8c <hwBoardInit+0x182c>)
 800fcca:	4947      	ldr	r1, [pc, #284]	; (800fde8 <hwBoardInit+0x1888>)
 800fccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fcce:	4831      	ldr	r0, [pc, #196]	; (800fd94 <hwBoardInit+0x1834>)
 800fcd0:	f7f8 ffaa 	bl	8008c28 <xprintf>
 800fcd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	dd05      	ble.n	800fce6 <hwBoardInit+0x1786>
 800fcda:	4b2c      	ldr	r3, [pc, #176]	; (800fd8c <hwBoardInit+0x182c>)
 800fcdc:	4943      	ldr	r1, [pc, #268]	; (800fdec <hwBoardInit+0x188c>)
 800fcde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fce0:	482c      	ldr	r0, [pc, #176]	; (800fd94 <hwBoardInit+0x1834>)
 800fce2:	f7f8 ffa1 	bl	8008c28 <xprintf>
 800fce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	dd05      	ble.n	800fcf8 <hwBoardInit+0x1798>
 800fcec:	4b27      	ldr	r3, [pc, #156]	; (800fd8c <hwBoardInit+0x182c>)
 800fcee:	4940      	ldr	r1, [pc, #256]	; (800fdf0 <hwBoardInit+0x1890>)
 800fcf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fcf2:	4828      	ldr	r0, [pc, #160]	; (800fd94 <hwBoardInit+0x1834>)
 800fcf4:	f7f8 ff98 	bl	8008c28 <xprintf>
 800fcf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	dd05      	ble.n	800fd0a <hwBoardInit+0x17aa>
 800fcfe:	4b23      	ldr	r3, [pc, #140]	; (800fd8c <hwBoardInit+0x182c>)
 800fd00:	493c      	ldr	r1, [pc, #240]	; (800fdf4 <hwBoardInit+0x1894>)
 800fd02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fd04:	4823      	ldr	r0, [pc, #140]	; (800fd94 <hwBoardInit+0x1834>)
 800fd06:	f7f8 ff8f 	bl	8008c28 <xprintf>
 800fd0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	dd05      	ble.n	800fd1c <hwBoardInit+0x17bc>
 800fd10:	4b1e      	ldr	r3, [pc, #120]	; (800fd8c <hwBoardInit+0x182c>)
 800fd12:	4939      	ldr	r1, [pc, #228]	; (800fdf8 <hwBoardInit+0x1898>)
 800fd14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fd16:	481f      	ldr	r0, [pc, #124]	; (800fd94 <hwBoardInit+0x1834>)
 800fd18:	f7f8 ff86 	bl	8008c28 <xprintf>
 800fd1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	dd05      	ble.n	800fd2e <hwBoardInit+0x17ce>
 800fd22:	4b1a      	ldr	r3, [pc, #104]	; (800fd8c <hwBoardInit+0x182c>)
 800fd24:	4935      	ldr	r1, [pc, #212]	; (800fdfc <hwBoardInit+0x189c>)
 800fd26:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800fd28:	481a      	ldr	r0, [pc, #104]	; (800fd94 <hwBoardInit+0x1834>)
 800fd2a:	f7f8 ff7d 	bl	8008c28 <xprintf>
 800fd2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	dd05      	ble.n	800fd40 <hwBoardInit+0x17e0>
 800fd34:	4b15      	ldr	r3, [pc, #84]	; (800fd8c <hwBoardInit+0x182c>)
 800fd36:	4932      	ldr	r1, [pc, #200]	; (800fe00 <hwBoardInit+0x18a0>)
 800fd38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fd3a:	4816      	ldr	r0, [pc, #88]	; (800fd94 <hwBoardInit+0x1834>)
 800fd3c:	f7f8 ff74 	bl	8008c28 <xprintf>
 800fd40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	dd05      	ble.n	800fd52 <hwBoardInit+0x17f2>
 800fd46:	4b11      	ldr	r3, [pc, #68]	; (800fd8c <hwBoardInit+0x182c>)
 800fd48:	492e      	ldr	r1, [pc, #184]	; (800fe04 <hwBoardInit+0x18a4>)
 800fd4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fd4c:	4811      	ldr	r0, [pc, #68]	; (800fd94 <hwBoardInit+0x1834>)
 800fd4e:	f7f8 ff6b 	bl	8008c28 <xprintf>
 800fd52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	dd05      	ble.n	800fd64 <hwBoardInit+0x1804>
 800fd58:	4b0c      	ldr	r3, [pc, #48]	; (800fd8c <hwBoardInit+0x182c>)
 800fd5a:	492b      	ldr	r1, [pc, #172]	; (800fe08 <hwBoardInit+0x18a8>)
 800fd5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800fd5e:	480d      	ldr	r0, [pc, #52]	; (800fd94 <hwBoardInit+0x1834>)
 800fd60:	f7f8 ff62 	bl	8008c28 <xprintf>
 800fd64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	dd05      	ble.n	800fd76 <hwBoardInit+0x1816>
 800fd6a:	4b08      	ldr	r3, [pc, #32]	; (800fd8c <hwBoardInit+0x182c>)
 800fd6c:	4927      	ldr	r1, [pc, #156]	; (800fe0c <hwBoardInit+0x18ac>)
 800fd6e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800fd70:	4808      	ldr	r0, [pc, #32]	; (800fd94 <hwBoardInit+0x1834>)
 800fd72:	f7f8 ff59 	bl	8008c28 <xprintf>
}
 800fd76:	b019      	add	sp, #100	; 0x64
 800fd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd7c:	40020400 	.word	0x40020400
 800fd80:	40020c00 	.word	0x40020c00
 800fd84:	e000e100 	.word	0xe000e100
 800fd88:	0801a855 	.word	0x0801a855
 800fd8c:	10001000 	.word	0x10001000
 800fd90:	0803e679 	.word	0x0803e679
 800fd94:	0803e67f 	.word	0x0803e67f
 800fd98:	0803e68f 	.word	0x0803e68f
 800fd9c:	0803e694 	.word	0x0803e694
 800fda0:	0803e69e 	.word	0x0803e69e
 800fda4:	0803e6ac 	.word	0x0803e6ac
 800fda8:	0803e6bb 	.word	0x0803e6bb
 800fdac:	0803e6c5 	.word	0x0803e6c5
 800fdb0:	0803e6d0 	.word	0x0803e6d0
 800fdb4:	0803e6d6 	.word	0x0803e6d6
 800fdb8:	0803e6de 	.word	0x0803e6de
 800fdbc:	0803e6ec 	.word	0x0803e6ec
 800fdc0:	0803e6fa 	.word	0x0803e6fa
 800fdc4:	0803e708 	.word	0x0803e708
 800fdc8:	0803e716 	.word	0x0803e716
 800fdcc:	0803e71c 	.word	0x0803e71c
 800fdd0:	0803e721 	.word	0x0803e721
 800fdd4:	0803e727 	.word	0x0803e727
 800fdd8:	0803e72e 	.word	0x0803e72e
 800fddc:	0803e736 	.word	0x0803e736
 800fde0:	0803e73c 	.word	0x0803e73c
 800fde4:	0803e742 	.word	0x0803e742
 800fde8:	0803e751 	.word	0x0803e751
 800fdec:	0803e75e 	.word	0x0803e75e
 800fdf0:	0803e768 	.word	0x0803e768
 800fdf4:	0803e772 	.word	0x0803e772
 800fdf8:	0803e77c 	.word	0x0803e77c
 800fdfc:	0803e786 	.word	0x0803e786
 800fe00:	0803e790 	.word	0x0803e790
 800fe04:	0803e79a 	.word	0x0803e79a
 800fe08:	0803e7a4 	.word	0x0803e7a4
 800fe0c:	0803e7ae 	.word	0x0803e7ae

0800fe10 <wdogAssert>:

static int freqs[2] = {44100,44100};
#define RETRY_TO_CONFIRM 5
static int freqsZero[2] = {RETRY_TO_CONFIRM,RETRY_TO_CONFIRM};
void wdogAssert(int value)
{
 800fe10:	b538      	push	{r3, r4, r5, lr}
  if(value)
 800fe12:	2800      	cmp	r0, #0
 800fe14:	d063      	beq.n	800fede <wdogAssert+0xce>
    {
      int freq = WM88XXIrqProc(WM8805_2);
 800fe16:	2001      	movs	r0, #1
      if(freqs[0] != freq)
 800fe18:	4d31      	ldr	r5, [pc, #196]	; (800fee0 <wdogAssert+0xd0>)
static int freqsZero[2] = {RETRY_TO_CONFIRM,RETRY_TO_CONFIRM};
void wdogAssert(int value)
{
  if(value)
    {
      int freq = WM88XXIrqProc(WM8805_2);
 800fe1a:	f000 faf1 	bl	8010400 <WM88XXIrqProc>
      if(freqs[0] != freq)
 800fe1e:	f8d5 331c 	ldr.w	r3, [r5, #796]	; 0x31c
 800fe22:	4298      	cmp	r0, r3
static int freqsZero[2] = {RETRY_TO_CONFIRM,RETRY_TO_CONFIRM};
void wdogAssert(int value)
{
  if(value)
    {
      int freq = WM88XXIrqProc(WM8805_2);
 800fe24:	4604      	mov	r4, r0
      if(freqs[0] != freq)
 800fe26:	d019      	beq.n	800fe5c <wdogAssert+0x4c>
        {
          if(freqsZero[0] > 0)
 800fe28:	f8d5 3324 	ldr.w	r3, [r5, #804]	; 0x324
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	dd01      	ble.n	800fe34 <wdogAssert+0x24>
            {
              freqsZero[0]--;
 800fe30:	3b01      	subs	r3, #1
 800fe32:	e011      	b.n	800fe58 <wdogAssert+0x48>
            }
          else
            {
              switch(freq)
 800fe34:	f64a 4344 	movw	r3, #44100	; 0xac44
 800fe38:	4298      	cmp	r0, r3
 800fe3a:	d003      	beq.n	800fe44 <wdogAssert+0x34>
 800fe3c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800fe40:	4298      	cmp	r0, r3
 800fe42:	d101      	bne.n	800fe48 <wdogAssert+0x38>
                {
                case 44100:
                case 48000:
                  formatChange(INPUT_SPDIF1, IF_16L16N16P16N, freq);
 800fe44:	4622      	mov	r2, r4
 800fe46:	e000      	b.n	800fe4a <wdogAssert+0x3a>
                case 88200:
                case 96000:
                case 176400:
                case 192000:
                default:
                  formatChange(INPUT_SPDIF1, IF_16L16N16P16N, 0);
 800fe48:	2200      	movs	r2, #0
 800fe4a:	2101      	movs	r1, #1
 800fe4c:	2005      	movs	r0, #5
 800fe4e:	f006 f8f9 	bl	8016044 <formatChange>
                  break;
                }
              freqs[0] = freq;
 800fe52:	f8c5 431c 	str.w	r4, [r5, #796]	; 0x31c
              freqsZero[0] = RETRY_TO_CONFIRM;
 800fe56:	2305      	movs	r3, #5
 800fe58:	f8c5 3324 	str.w	r3, [r5, #804]	; 0x324
            }
        }

      freq = 0;
      if(WM88XXGetLock(WM8805_1)) freq = i2sGetFreq();
 800fe5c:	2000      	movs	r0, #0
 800fe5e:	f000 fa9b 	bl	8010398 <WM88XXGetLock>
 800fe62:	b920      	cbnz	r0, 800fe6e <wdogAssert+0x5e>
      if(!freq) freq  = WM88XXIrqProc(WM8805_1);
 800fe64:	2000      	movs	r0, #0
 800fe66:	f000 facb 	bl	8010400 <WM88XXIrqProc>
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	e004      	b.n	800fe78 <wdogAssert+0x68>
              freqsZero[0] = RETRY_TO_CONFIRM;
            }
        }

      freq = 0;
      if(WM88XXGetLock(WM8805_1)) freq = i2sGetFreq();
 800fe6e:	f004 feaf 	bl	8014bd0 <i2sGetFreq>
      if(!freq) freq  = WM88XXIrqProc(WM8805_1);
 800fe72:	4604      	mov	r4, r0
 800fe74:	2800      	cmp	r0, #0
 800fe76:	d0f5      	beq.n	800fe64 <wdogAssert+0x54>
      if(freqs[1] != freq)
 800fe78:	f8d5 3320 	ldr.w	r3, [r5, #800]	; 0x320
 800fe7c:	4a18      	ldr	r2, [pc, #96]	; (800fee0 <wdogAssert+0xd0>)
 800fe7e:	429c      	cmp	r4, r3
 800fe80:	d02d      	beq.n	800fede <wdogAssert+0xce>
        {
          if(freqsZero[1] > 0)
 800fe82:	f8d2 3328 	ldr.w	r3, [r2, #808]	; 0x328
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	dd03      	ble.n	800fe92 <wdogAssert+0x82>
            {
              freqsZero[1]--;
 800fe8a:	3b01      	subs	r3, #1
 800fe8c:	f8c2 3328 	str.w	r3, [r2, #808]	; 0x328
 800fe90:	bd38      	pop	{r3, r4, r5, pc}
            }
          else
            {
              switch(freq)
 800fe92:	4b14      	ldr	r3, [pc, #80]	; (800fee4 <wdogAssert+0xd4>)
 800fe94:	429c      	cmp	r4, r3
 800fe96:	d015      	beq.n	800fec4 <wdogAssert+0xb4>
 800fe98:	dc08      	bgt.n	800feac <wdogAssert+0x9c>
 800fe9a:	f64a 4344 	movw	r3, #44100	; 0xac44
 800fe9e:	429c      	cmp	r4, r3
 800fea0:	d00e      	beq.n	800fec0 <wdogAssert+0xb0>
 800fea2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800fea6:	429c      	cmp	r4, r3
 800fea8:	d00a      	beq.n	800fec0 <wdogAssert+0xb0>
 800feaa:	e00e      	b.n	800feca <wdogAssert+0xba>
 800feac:	4b0e      	ldr	r3, [pc, #56]	; (800fee8 <wdogAssert+0xd8>)
 800feae:	429c      	cmp	r4, r3
 800feb0:	d008      	beq.n	800fec4 <wdogAssert+0xb4>
 800feb2:	4b0e      	ldr	r3, [pc, #56]	; (800feec <wdogAssert+0xdc>)
 800feb4:	429c      	cmp	r4, r3
 800feb6:	d005      	beq.n	800fec4 <wdogAssert+0xb4>
 800feb8:	4b0d      	ldr	r3, [pc, #52]	; (800fef0 <wdogAssert+0xe0>)
 800feba:	429c      	cmp	r4, r3
 800febc:	d105      	bne.n	800feca <wdogAssert+0xba>
 800febe:	e001      	b.n	800fec4 <wdogAssert+0xb4>
                {
                case 44100:
                case 48000:
                  formatChange(INPUT_SPDIF2, IF_16L16N16P16N, freq);
 800fec0:	4622      	mov	r2, r4
 800fec2:	e003      	b.n	800fecc <wdogAssert+0xbc>
                  break;
                case 88200:
                case 96000:
                case 176400:
                case 192000:
                  formatChange(INPUT_SPDIF2, IF_16L8L8N16P8P8N, freq);
 800fec4:	4622      	mov	r2, r4
 800fec6:	2104      	movs	r1, #4
 800fec8:	e001      	b.n	800fece <wdogAssert+0xbe>
                  break;
                default:
                  formatChange(INPUT_SPDIF2, IF_16L16N16P16N, 0);
 800feca:	2200      	movs	r2, #0
 800fecc:	2101      	movs	r1, #1
 800fece:	2006      	movs	r0, #6
 800fed0:	f006 f8b8 	bl	8016044 <formatChange>
                  break;
                }
              freqs[1] = freq;
              freqsZero[1] = RETRY_TO_CONFIRM;
 800fed4:	2305      	movs	r3, #5
                  break;
                default:
                  formatChange(INPUT_SPDIF2, IF_16L16N16P16N, 0);
                  break;
                }
              freqs[1] = freq;
 800fed6:	f8c5 4320 	str.w	r4, [r5, #800]	; 0x320
              freqsZero[1] = RETRY_TO_CONFIRM;
 800feda:	f8c5 3328 	str.w	r3, [r5, #808]	; 0x328
 800fede:	bd38      	pop	{r3, r4, r5, pc}
 800fee0:	1000201c 	.word	0x1000201c
 800fee4:	00015888 	.word	0x00015888
 800fee8:	0002b110 	.word	0x0002b110
 800feec:	0002ee00 	.word	0x0002ee00
 800fef0:	00017700 	.word	0x00017700

0800fef4 <HAL_GetTick>:
};

uint32_t HAL_GetTick(void);
uint32_t HAL_GetTick(void)
{
  return xTaskGetTickCount();
 800fef4:	f7fa bd12 	b.w	800a91c <xTaskGetTickCount>

0800fef8 <spiSetupDmaForStream>:
#include <isrHandlersPrototypes.h>
#include <spiAudioStreamConfig.h>


void spiSetupDmaForStream(void)
{
 800fef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  (void)SPI_NUM_MACRO(SPIx_AUDIO_STREAM)->DR; //concatenate SPI with number defined under SPIx_AUDIO_STREAM
 800fefa:	4b16      	ldr	r3, [pc, #88]	; (800ff54 <spiSetupDmaForStream+0x5c>)
 800fefc:	899b      	ldrh	r3, [r3, #12]
  while ( DMA_GetCmdStatus(OLINUXINO_DMAx_STREAMx) );   // wait for dma to flush fifo
 800fefe:	4816      	ldr	r0, [pc, #88]	; (800ff58 <spiSetupDmaForStream+0x60>)
 800ff00:	f002 f9bc 	bl	801227c <DMA_GetCmdStatus>
 800ff04:	4605      	mov	r5, r0
 800ff06:	2800      	cmp	r0, #0
 800ff08:	d1f9      	bne.n	800fefe <spiSetupDmaForStream+0x6>

  bBuffer_t *buf1 = NULL;
  bBuffer_t *buf2 = NULL;

  buf1 = bAlloc(SPI_TOTAL_BUFFER_SIZE);
 800ff0a:	f44f 6004 	mov.w	r0, #2112	; 0x840
 800ff0e:	f005 f835 	bl	8014f7c <bAlloc>
  buf1->size = SPI_BUFFER_SIZE;
 800ff12:	4606      	mov	r6, r0
 800ff14:	f44f 6700 	mov.w	r7, #2048	; 0x800
 800ff18:	f826 7b14 	strh.w	r7, [r6], #20

  buf2 = bAlloc(SPI_TOTAL_BUFFER_SIZE);
 800ff1c:	f44f 6004 	mov.w	r0, #2112	; 0x840
 800ff20:	f005 f82c 	bl	8014f7c <bAlloc>
  buf2->size = SPI_BUFFER_SIZE;
 800ff24:	4604      	mov	r4, r0

  if ( buf1 && buf2 )
    {

      DMA_SetCurrDataCounter(OLINUXINO_DMAx_STREAMx, SPI_TOTAL_BUFFER_SIZE/SPI_CHUNK_SIZE);
 800ff26:	f44f 6184 	mov.w	r1, #1056	; 0x420

  buf1 = bAlloc(SPI_TOTAL_BUFFER_SIZE);
  buf1->size = SPI_BUFFER_SIZE;

  buf2 = bAlloc(SPI_TOTAL_BUFFER_SIZE);
  buf2->size = SPI_BUFFER_SIZE;
 800ff2a:	f824 7b14 	strh.w	r7, [r4], #20

  if ( buf1 && buf2 )
    {

      DMA_SetCurrDataCounter(OLINUXINO_DMAx_STREAMx, SPI_TOTAL_BUFFER_SIZE/SPI_CHUNK_SIZE);
 800ff2e:	480a      	ldr	r0, [pc, #40]	; (800ff58 <spiSetupDmaForStream+0x60>)
 800ff30:	f002 f838 	bl	8011fa4 <DMA_SetCurrDataCounter>

      DMA_MemoryTargetConfig(OLINUXINO_DMAx_STREAMx, (uint32_t)buf1->data, DMA_Memory_0);
 800ff34:	462a      	mov	r2, r5
 800ff36:	4631      	mov	r1, r6
 800ff38:	4807      	ldr	r0, [pc, #28]	; (800ff58 <spiSetupDmaForStream+0x60>)
 800ff3a:	f002 f915 	bl	8012168 <DMA_MemoryTargetConfig>
      DMA_DoubleBufferModeConfig(OLINUXINO_DMAx_STREAMx, (uint32_t)buf2->data, 0 );    // zero stands for first used buffe
 800ff3e:	4621      	mov	r1, r4
 800ff40:	462a      	mov	r2, r5
 800ff42:	4805      	ldr	r0, [pc, #20]	; (800ff58 <spiSetupDmaForStream+0x60>)
 800ff44:	f002 f86e 	bl	8012024 <DMA_DoubleBufferModeConfig>

      DMA_Cmd(OLINUXINO_DMAx_STREAMx, ENABLE);
 800ff48:	2101      	movs	r1, #1
 800ff4a:	4803      	ldr	r0, [pc, #12]	; (800ff58 <spiSetupDmaForStream+0x60>)
    }
}
 800ff4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      DMA_SetCurrDataCounter(OLINUXINO_DMAx_STREAMx, SPI_TOTAL_BUFFER_SIZE/SPI_CHUNK_SIZE);

      DMA_MemoryTargetConfig(OLINUXINO_DMAx_STREAMx, (uint32_t)buf1->data, DMA_Memory_0);
      DMA_DoubleBufferModeConfig(OLINUXINO_DMAx_STREAMx, (uint32_t)buf2->data, 0 );    // zero stands for first used buffe

      DMA_Cmd(OLINUXINO_DMAx_STREAMx, ENABLE);
 800ff50:	f001 bfd8 	b.w	8011f04 <DMA_Cmd>
 800ff54:	40013400 	.word	0x40013400
 800ff58:	40026410 	.word	0x40026410

0800ff5c <DMA_SPI_audioStream_ISR>:
    }
}

void DMA_SPI_audioStream_ISR(void)
{
 800ff5c:	b513      	push	{r0, r1, r4, lr}
  static signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;

  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(OLINUXINO_DMAx_STREAMx, OLINUXINO_DMA_FLAG_TCIFx) != RESET)
 800ff5e:	4c16      	ldr	r4, [pc, #88]	; (800ffb8 <DMA_SPI_audioStream_ISR+0x5c>)
 800ff60:	4916      	ldr	r1, [pc, #88]	; (800ffbc <DMA_SPI_audioStream_ISR+0x60>)
 800ff62:	4620      	mov	r0, r4
 800ff64:	f002 f9c8 	bl	80122f8 <DMA_GetFlagStatus>
 800ff68:	b1e8      	cbz	r0, 800ffa6 <DMA_SPI_audioStream_ISR+0x4a>
    {
      ///////////////////////////////////////////////////////////////////////////////////////////////////////
      uint32_t currMem = DMA_GetCurrentMemoryTarget(OLINUXINO_DMAx_STREAMx);
 800ff6a:	4620      	mov	r0, r4
 800ff6c:	f002 f948 	bl	8012200 <DMA_GetCurrentMemoryTarget>
      if (currMem)
 800ff70:	b140      	cbz	r0, 800ff84 <DMA_SPI_audioStream_ISR+0x28>
        {
          uint32_t replaceAddr = OLINUXINO_DMAx_STREAMx->M0AR;
 800ff72:	68e3      	ldr	r3, [r4, #12]
 800ff74:	9301      	str	r3, [sp, #4]
          spiAudioStreamTC_Callback( &replaceAddr , OLINUXINO_DMAx_STREAMx->NDTR, &xHigherPriorityTaskWoken);
 800ff76:	4a12      	ldr	r2, [pc, #72]	; (800ffc0 <DMA_SPI_audioStream_ISR+0x64>)
 800ff78:	6861      	ldr	r1, [r4, #4]
 800ff7a:	a801      	add	r0, sp, #4
 800ff7c:	f004 fd62 	bl	8014a44 <spiAudioStreamTC_Callback>
          DMA_MemoryTargetConfig(OLINUXINO_DMAx_STREAMx, replaceAddr, DMA_Memory_0);
 800ff80:	2200      	movs	r2, #0
 800ff82:	e008      	b.n	800ff96 <DMA_SPI_audioStream_ISR+0x3a>
        }
      else
        {
          uint32_t replaceAddr = OLINUXINO_DMAx_STREAMx->M1AR;
 800ff84:	6923      	ldr	r3, [r4, #16]
 800ff86:	9301      	str	r3, [sp, #4]
          spiAudioStreamTC_Callback( &replaceAddr , OLINUXINO_DMAx_STREAMx->NDTR, &xHigherPriorityTaskWoken);
 800ff88:	4a0d      	ldr	r2, [pc, #52]	; (800ffc0 <DMA_SPI_audioStream_ISR+0x64>)
 800ff8a:	6861      	ldr	r1, [r4, #4]
 800ff8c:	a801      	add	r0, sp, #4
 800ff8e:	f004 fd59 	bl	8014a44 <spiAudioStreamTC_Callback>
          DMA_MemoryTargetConfig(OLINUXINO_DMAx_STREAMx, replaceAddr, DMA_Memory_1);
 800ff92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ff96:	9901      	ldr	r1, [sp, #4]
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f002 f8e5 	bl	8012168 <DMA_MemoryTargetConfig>
        }

      /* Clear the Interrupt flag */
      DMA_ClearFlag(OLINUXINO_DMAx_STREAMx, OLINUXINO_DMA_FLAG_TCIFx);
 800ff9e:	4907      	ldr	r1, [pc, #28]	; (800ffbc <DMA_SPI_audioStream_ISR+0x60>)
 800ffa0:	4805      	ldr	r0, [pc, #20]	; (800ffb8 <DMA_SPI_audioStream_ISR+0x5c>)
 800ffa2:	f002 faa7 	bl	80124f4 <DMA_ClearFlag>
    }

  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ffa6:	4b06      	ldr	r3, [pc, #24]	; (800ffc0 <DMA_SPI_audioStream_ISR+0x64>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	b11b      	cbz	r3, 800ffb4 <DMA_SPI_audioStream_ISR+0x58>
 800ffac:	4b05      	ldr	r3, [pc, #20]	; (800ffc4 <DMA_SPI_audioStream_ISR+0x68>)
 800ffae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffb2:	601a      	str	r2, [r3, #0]
}
 800ffb4:	b002      	add	sp, #8
 800ffb6:	bd10      	pop	{r4, pc}
 800ffb8:	40026410 	.word	0x40026410
 800ffbc:	10000020 	.word	0x10000020
 800ffc0:	10002d0c 	.word	0x10002d0c
 800ffc4:	e000ed04 	.word	0xe000ed04

0800ffc8 <WM88XXInit>:
  {000, 0, 000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static xSemaphoreHandle mutex;
void WM88XXInit(void)
{
 800ffc8:	b507      	push	{r0, r1, r2, lr}
  massert((mutex = xSemaphoreCreateMutex()));
 800ffca:	2001      	movs	r0, #1
 800ffcc:	f7fb f8af 	bl	800b12e <xQueueCreateMutex>
 800ffd0:	4b08      	ldr	r3, [pc, #32]	; (800fff4 <WM88XXInit+0x2c>)
 800ffd2:	6018      	str	r0, [r3, #0]
 800ffd4:	b950      	cbnz	r0, 800ffec <WM88XXInit+0x24>
 800ffd6:	4b08      	ldr	r3, [pc, #32]	; (800fff8 <WM88XXInit+0x30>)
 800ffd8:	4908      	ldr	r1, [pc, #32]	; (800fffc <WM88XXInit+0x34>)
 800ffda:	4809      	ldr	r0, [pc, #36]	; (8010000 <WM88XXInit+0x38>)
 800ffdc:	2232      	movs	r2, #50	; 0x32
 800ffde:	f7f8 fe23 	bl	8008c28 <xprintf>
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	9301      	str	r3, [sp, #4]
 800ffe6:	9b01      	ldr	r3, [sp, #4]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1fc      	bne.n	800ffe6 <WM88XXInit+0x1e>
}
 800ffec:	b003      	add	sp, #12
 800ffee:	f85d fb04 	ldr.w	pc, [sp], #4
 800fff2:	bf00      	nop
 800fff4:	10002d10 	.word	0x10002d10
 800fff8:	0803d970 	.word	0x0803d970
 800fffc:	0803e7e4 	.word	0x0803e7e4
 8010000:	0801d5dd 	.word	0x0801d5dd

08010004 <WM88XXWriteRegister>:
int WM88XXWriteRegister(spdifChip_t spdifChip, int reg, int val)
{
 8010004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if( xSemaphoreTake( mutex, portMAX_DELAY) != pdTRUE )
 8010008:	4d34      	ldr	r5, [pc, #208]	; (80100dc <WM88XXWriteRegister+0xd8>)
 801000a:	2300      	movs	r3, #0
void WM88XXInit(void)
{
  massert((mutex = xSemaphoreCreateMutex()));
}
int WM88XXWriteRegister(spdifChip_t spdifChip, int reg, int val)
{
 801000c:	4604      	mov	r4, r0
 801000e:	4689      	mov	r9, r1
 8010010:	4690      	mov	r8, r2
  if( xSemaphoreTake( mutex, portMAX_DELAY) != pdTRUE )
 8010012:	4619      	mov	r1, r3
 8010014:	f04f 32ff 	mov.w	r2, #4294967295
 8010018:	6828      	ldr	r0, [r5, #0]
 801001a:	f7fb f901 	bl	800b220 <xQueueGenericReceive>
 801001e:	2801      	cmp	r0, #1
 8010020:	d157      	bne.n	80100d2 <WM88XXWriteRegister+0xce>
    return 0;
  int tmp;

  ENABLE_WM(spdifChip);
 8010022:	2314      	movs	r3, #20
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	9b00      	ldr	r3, [sp, #0]
 8010028:	1e5a      	subs	r2, r3, #1
 801002a:	2b0a      	cmp	r3, #10
 801002c:	9200      	str	r2, [sp, #0]
 801002e:	dcfa      	bgt.n	8010026 <WM88XXWriteRegister+0x22>
 8010030:	4b2b      	ldr	r3, [pc, #172]	; (80100e0 <WM88XXWriteRegister+0xdc>)
 8010032:	2006      	movs	r0, #6
 8010034:	fb00 3004 	mla	r0, r0, r4, r3
 8010038:	2200      	movs	r2, #0
 801003a:	8887      	ldrh	r7, [r0, #4]
 801003c:	6806      	ldr	r6, [r0, #0]
 801003e:	4639      	mov	r1, r7
 8010040:	4630      	mov	r0, r6
 8010042:	f000 fc19 	bl	8010878 <GPIO_WriteBit>
 8010046:	9b00      	ldr	r3, [sp, #0]
 8010048:	1e5a      	subs	r2, r3, #1
 801004a:	9200      	str	r2, [sp, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1fa      	bne.n	8010046 <WM88XXWriteRegister+0x42>

  while (SPI_I2S_GetFlagStatus(SPI6, SPI_I2S_FLAG_BSY) == SET);
 8010050:	2180      	movs	r1, #128	; 0x80
 8010052:	4824      	ldr	r0, [pc, #144]	; (80100e4 <WM88XXWriteRegister+0xe0>)
 8010054:	f001 fcf8 	bl	8011a48 <SPI_I2S_GetFlagStatus>
 8010058:	2801      	cmp	r0, #1
 801005a:	d0f9      	beq.n	8010050 <WM88XXWriteRegister+0x4c>

  SPI_I2S_SendData(SPI6, WM_WRITE | reg);
 801005c:	fa1f f189 	uxth.w	r1, r9
 8010060:	4820      	ldr	r0, [pc, #128]	; (80100e4 <WM88XXWriteRegister+0xe0>)
 8010062:	f001 fc31 	bl	80118c8 <SPI_I2S_SendData>

  while (SPI_I2S_GetFlagStatus(SPI6, SPI_I2S_FLAG_RXNE) != SET);
 8010066:	2101      	movs	r1, #1
 8010068:	481e      	ldr	r0, [pc, #120]	; (80100e4 <WM88XXWriteRegister+0xe0>)
 801006a:	f001 fced 	bl	8011a48 <SPI_I2S_GetFlagStatus>
 801006e:	2801      	cmp	r0, #1
 8010070:	d1f9      	bne.n	8010066 <WM88XXWriteRegister+0x62>
  tmp = SPI_I2S_ReceiveData(SPI6);
 8010072:	481c      	ldr	r0, [pc, #112]	; (80100e4 <WM88XXWriteRegister+0xe0>)
 8010074:	f001 fbfe 	bl	8011874 <SPI_I2S_ReceiveData>

  SPI_I2S_SendData(SPI6, val);
 8010078:	fa1f f188 	uxth.w	r1, r8
 801007c:	4819      	ldr	r0, [pc, #100]	; (80100e4 <WM88XXWriteRegister+0xe0>)
 801007e:	f001 fc23 	bl	80118c8 <SPI_I2S_SendData>
  while (SPI_I2S_GetFlagStatus(SPI6, SPI_I2S_FLAG_RXNE) != SET);
 8010082:	2101      	movs	r1, #1
 8010084:	4817      	ldr	r0, [pc, #92]	; (80100e4 <WM88XXWriteRegister+0xe0>)
 8010086:	f001 fcdf 	bl	8011a48 <SPI_I2S_GetFlagStatus>
 801008a:	2801      	cmp	r0, #1
 801008c:	d1f9      	bne.n	8010082 <WM88XXWriteRegister+0x7e>
  tmp = SPI_I2S_ReceiveData(SPI6);
 801008e:	4815      	ldr	r0, [pc, #84]	; (80100e4 <WM88XXWriteRegister+0xe0>)
 8010090:	f001 fbf0 	bl	8011874 <SPI_I2S_ReceiveData>
 8010094:	4604      	mov	r4, r0

  while (SPI_I2S_GetFlagStatus(SPI6, SPI_I2S_FLAG_BSY) == SET);
 8010096:	2180      	movs	r1, #128	; 0x80
 8010098:	4812      	ldr	r0, [pc, #72]	; (80100e4 <WM88XXWriteRegister+0xe0>)
 801009a:	f001 fcd5 	bl	8011a48 <SPI_I2S_GetFlagStatus>
 801009e:	2801      	cmp	r0, #1
 80100a0:	d0f9      	beq.n	8010096 <WM88XXWriteRegister+0x92>

  DISABLE_WM(spdifChip);
 80100a2:	2314      	movs	r3, #20
 80100a4:	9301      	str	r3, [sp, #4]
 80100a6:	9b01      	ldr	r3, [sp, #4]
 80100a8:	1e5a      	subs	r2, r3, #1
 80100aa:	2b0a      	cmp	r3, #10
 80100ac:	9201      	str	r2, [sp, #4]
 80100ae:	dcfa      	bgt.n	80100a6 <WM88XXWriteRegister+0xa2>
 80100b0:	2201      	movs	r2, #1
 80100b2:	4639      	mov	r1, r7
 80100b4:	4630      	mov	r0, r6
 80100b6:	f000 fbdf 	bl	8010878 <GPIO_WriteBit>
 80100ba:	9b01      	ldr	r3, [sp, #4]
 80100bc:	1e5a      	subs	r2, r3, #1
 80100be:	9201      	str	r2, [sp, #4]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d1fa      	bne.n	80100ba <WM88XXWriteRegister+0xb6>
  xSemaphoreGive(mutex);
 80100c4:	461a      	mov	r2, r3
 80100c6:	4619      	mov	r1, r3
 80100c8:	6828      	ldr	r0, [r5, #0]
 80100ca:	f7fa ffa6 	bl	800b01a <xQueueGenericSend>
 80100ce:	4620      	mov	r0, r4
 80100d0:	e000      	b.n	80100d4 <WM88XXWriteRegister+0xd0>
  massert((mutex = xSemaphoreCreateMutex()));
}
int WM88XXWriteRegister(spdifChip_t spdifChip, int reg, int val)
{
  if( xSemaphoreTake( mutex, portMAX_DELAY) != pdTRUE )
    return 0;
 80100d2:	2000      	movs	r0, #0

  DISABLE_WM(spdifChip);
  xSemaphoreGive(mutex);

  return tmp;
}
 80100d4:	b003      	add	sp, #12
 80100d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100da:	bf00      	nop
 80100dc:	10002d10 	.word	0x10002d10
 80100e0:	0803e439 	.word	0x0803e439
 80100e4:	40015400 	.word	0x40015400

080100e8 <WM88XXReadRegister>:

int WM88XXReadRegister(spdifChip_t spdifChip, int reg)
{
 80100e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if( xSemaphoreTake( mutex, portMAX_DELAY) != pdTRUE )
 80100ec:	4d34      	ldr	r5, [pc, #208]	; (80101c0 <WM88XXReadRegister+0xd8>)
 80100ee:	2300      	movs	r3, #0

  return tmp;
}

int WM88XXReadRegister(spdifChip_t spdifChip, int reg)
{
 80100f0:	4604      	mov	r4, r0
 80100f2:	460e      	mov	r6, r1
  if( xSemaphoreTake( mutex, portMAX_DELAY) != pdTRUE )
 80100f4:	f04f 32ff 	mov.w	r2, #4294967295
 80100f8:	4619      	mov	r1, r3
 80100fa:	6828      	ldr	r0, [r5, #0]
 80100fc:	f7fb f890 	bl	800b220 <xQueueGenericReceive>
 8010100:	2801      	cmp	r0, #1
 8010102:	d158      	bne.n	80101b6 <WM88XXReadRegister+0xce>
    return 0;
  int tmp;

  ENABLE_WM(spdifChip);
 8010104:	2314      	movs	r3, #20
 8010106:	9300      	str	r3, [sp, #0]
 8010108:	9b00      	ldr	r3, [sp, #0]
 801010a:	1e5a      	subs	r2, r3, #1
 801010c:	2b0a      	cmp	r3, #10
 801010e:	9200      	str	r2, [sp, #0]
 8010110:	dcfa      	bgt.n	8010108 <WM88XXReadRegister+0x20>
 8010112:	4b2c      	ldr	r3, [pc, #176]	; (80101c4 <WM88XXReadRegister+0xdc>)
 8010114:	2006      	movs	r0, #6
 8010116:	fb00 3004 	mla	r0, r0, r4, r3
 801011a:	2200      	movs	r2, #0
 801011c:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8010120:	6807      	ldr	r7, [r0, #0]
 8010122:	4641      	mov	r1, r8
 8010124:	4638      	mov	r0, r7
 8010126:	f000 fba7 	bl	8010878 <GPIO_WriteBit>
 801012a:	9b00      	ldr	r3, [sp, #0]
 801012c:	1e5a      	subs	r2, r3, #1
 801012e:	9200      	str	r2, [sp, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d1fa      	bne.n	801012a <WM88XXReadRegister+0x42>
  while (SPI_I2S_GetFlagStatus(SPI6, SPI_I2S_FLAG_BSY) == SET);
 8010134:	2180      	movs	r1, #128	; 0x80
 8010136:	4824      	ldr	r0, [pc, #144]	; (80101c8 <WM88XXReadRegister+0xe0>)
 8010138:	f001 fc86 	bl	8011a48 <SPI_I2S_GetFlagStatus>
 801013c:	2801      	cmp	r0, #1
 801013e:	d0f9      	beq.n	8010134 <WM88XXReadRegister+0x4c>

  SPI_I2S_SendData(SPI6, WM_READ | reg);
 8010140:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8010144:	b289      	uxth	r1, r1
 8010146:	4820      	ldr	r0, [pc, #128]	; (80101c8 <WM88XXReadRegister+0xe0>)
 8010148:	f001 fbbe 	bl	80118c8 <SPI_I2S_SendData>

  while (SPI_I2S_GetFlagStatus(SPI6, SPI_I2S_FLAG_RXNE) != SET);
 801014c:	2101      	movs	r1, #1
 801014e:	481e      	ldr	r0, [pc, #120]	; (80101c8 <WM88XXReadRegister+0xe0>)
 8010150:	f001 fc7a 	bl	8011a48 <SPI_I2S_GetFlagStatus>
 8010154:	2801      	cmp	r0, #1
 8010156:	d1f9      	bne.n	801014c <WM88XXReadRegister+0x64>
  tmp = SPI_I2S_ReceiveData(SPI6);
 8010158:	481b      	ldr	r0, [pc, #108]	; (80101c8 <WM88XXReadRegister+0xe0>)
 801015a:	f001 fb8b 	bl	8011874 <SPI_I2S_ReceiveData>

  SPI_I2S_SendData(SPI6, 0xFF);
 801015e:	21ff      	movs	r1, #255	; 0xff
 8010160:	4819      	ldr	r0, [pc, #100]	; (80101c8 <WM88XXReadRegister+0xe0>)
 8010162:	f001 fbb1 	bl	80118c8 <SPI_I2S_SendData>
  while (SPI_I2S_GetFlagStatus(SPI6, SPI_I2S_FLAG_RXNE) != SET);
 8010166:	2101      	movs	r1, #1
 8010168:	4817      	ldr	r0, [pc, #92]	; (80101c8 <WM88XXReadRegister+0xe0>)
 801016a:	f001 fc6d 	bl	8011a48 <SPI_I2S_GetFlagStatus>
 801016e:	2801      	cmp	r0, #1
 8010170:	d1f9      	bne.n	8010166 <WM88XXReadRegister+0x7e>
  tmp = SPI_I2S_ReceiveData(SPI6);
 8010172:	4815      	ldr	r0, [pc, #84]	; (80101c8 <WM88XXReadRegister+0xe0>)
 8010174:	f001 fb7e 	bl	8011874 <SPI_I2S_ReceiveData>
 8010178:	4604      	mov	r4, r0

  while (SPI_I2S_GetFlagStatus(SPI6, SPI_I2S_FLAG_BSY) == SET);
 801017a:	2180      	movs	r1, #128	; 0x80
 801017c:	4812      	ldr	r0, [pc, #72]	; (80101c8 <WM88XXReadRegister+0xe0>)
 801017e:	f001 fc63 	bl	8011a48 <SPI_I2S_GetFlagStatus>
 8010182:	2801      	cmp	r0, #1
 8010184:	d0f9      	beq.n	801017a <WM88XXReadRegister+0x92>
  DISABLE_WM(spdifChip);
 8010186:	2314      	movs	r3, #20
 8010188:	9301      	str	r3, [sp, #4]
 801018a:	9b01      	ldr	r3, [sp, #4]
 801018c:	1e5a      	subs	r2, r3, #1
 801018e:	2b0a      	cmp	r3, #10
 8010190:	9201      	str	r2, [sp, #4]
 8010192:	dcfa      	bgt.n	801018a <WM88XXReadRegister+0xa2>
 8010194:	2201      	movs	r2, #1
 8010196:	4641      	mov	r1, r8
 8010198:	4638      	mov	r0, r7
 801019a:	f000 fb6d 	bl	8010878 <GPIO_WriteBit>
 801019e:	9b01      	ldr	r3, [sp, #4]
 80101a0:	1e5a      	subs	r2, r3, #1
 80101a2:	9201      	str	r2, [sp, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d1fa      	bne.n	801019e <WM88XXReadRegister+0xb6>

  xSemaphoreGive(mutex);
 80101a8:	461a      	mov	r2, r3
 80101aa:	4619      	mov	r1, r3
 80101ac:	6828      	ldr	r0, [r5, #0]
 80101ae:	f7fa ff34 	bl	800b01a <xQueueGenericSend>
 80101b2:	4620      	mov	r0, r4
 80101b4:	e000      	b.n	80101b8 <WM88XXReadRegister+0xd0>
}

int WM88XXReadRegister(spdifChip_t spdifChip, int reg)
{
  if( xSemaphoreTake( mutex, portMAX_DELAY) != pdTRUE )
    return 0;
 80101b6:	2000      	movs	r0, #0
  while (SPI_I2S_GetFlagStatus(SPI6, SPI_I2S_FLAG_BSY) == SET);
  DISABLE_WM(spdifChip);

  xSemaphoreGive(mutex);
  return tmp;
}
 80101b8:	b002      	add	sp, #8
 80101ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101be:	bf00      	nop
 80101c0:	10002d10 	.word	0x10002d10
 80101c4:	0803e439 	.word	0x0803e439
 80101c8:	40015400 	.word	0x40015400

080101cc <WM88XXReadID>:
{
  WM88XXWriteRegister(spdifChip, WM8805_REG_RSTDEVID1, 0x00);
}

void WM88XXReadID(spdifChip_t spdifChip, char *tab )
{
 80101cc:	b538      	push	{r3, r4, r5, lr}
 80101ce:	460c      	mov	r4, r1
  *tab++ = WM88XXReadRegister(spdifChip, WM8805_REG_RSTDEVID1);
 80101d0:	2100      	movs	r1, #0
{
  WM88XXWriteRegister(spdifChip, WM8805_REG_RSTDEVID1, 0x00);
}

void WM88XXReadID(spdifChip_t spdifChip, char *tab )
{
 80101d2:	4605      	mov	r5, r0
  *tab++ = WM88XXReadRegister(spdifChip, WM8805_REG_RSTDEVID1);
 80101d4:	f7ff ff88 	bl	80100e8 <WM88XXReadRegister>
  *tab++ = WM88XXReadRegister(spdifChip, WM8805_REG_DEVID2);
 80101d8:	2101      	movs	r1, #1
  WM88XXWriteRegister(spdifChip, WM8805_REG_RSTDEVID1, 0x00);
}

void WM88XXReadID(spdifChip_t spdifChip, char *tab )
{
  *tab++ = WM88XXReadRegister(spdifChip, WM8805_REG_RSTDEVID1);
 80101da:	7020      	strb	r0, [r4, #0]
  *tab++ = WM88XXReadRegister(spdifChip, WM8805_REG_DEVID2);
 80101dc:	4628      	mov	r0, r5
 80101de:	f7ff ff83 	bl	80100e8 <WM88XXReadRegister>
  *tab   = WM88XXReadRegister(spdifChip, WM8805_REG_DEVREV);
 80101e2:	2102      	movs	r1, #2
}

void WM88XXReadID(spdifChip_t spdifChip, char *tab )
{
  *tab++ = WM88XXReadRegister(spdifChip, WM8805_REG_RSTDEVID1);
  *tab++ = WM88XXReadRegister(spdifChip, WM8805_REG_DEVID2);
 80101e4:	7060      	strb	r0, [r4, #1]
  *tab   = WM88XXReadRegister(spdifChip, WM8805_REG_DEVREV);
 80101e6:	4628      	mov	r0, r5
 80101e8:	f7ff ff7e 	bl	80100e8 <WM88XXReadRegister>
 80101ec:	70a0      	strb	r0, [r4, #2]
 80101ee:	bd38      	pop	{r3, r4, r5, pc}

080101f0 <WM8805DBG>:
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL4, (plln & 0x0F) | PRESCALER*PLL4_PRESCALE);
  //  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL5, (1<<2) | (1<<4) | (2<<0) );
}

void WM8805DBG(int *bufSize, char *bufPtr)
{
 80101f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f4:	4607      	mov	r7, r0
 80101f6:	b08b      	sub	sp, #44	; 0x2c
 80101f8:	4688      	mov	r8, r1
 80101fa:	2500      	movs	r5, #0
  spdifChip_t spdifChip;
  for(spdifChip = WM8805_1; spdifChip <= WM8805_2; spdifChip++)
    {
      DPRINTF("WM8805_%d %02x %02x %02x %02x %02x %02x %02x"CLEAR_LINE"\n", spdifChip,
 80101fc:	f241 2987 	movw	r9, #4743	; 0x1287
 8010200:	683e      	ldr	r6, [r7, #0]
 8010202:	454e      	cmp	r6, r9
 8010204:	b2ec      	uxtb	r4, r5
 8010206:	dc3a      	bgt.n	801027e <WM8805DBG+0x8e>
 8010208:	210c      	movs	r1, #12
 801020a:	4620      	mov	r0, r4
 801020c:	f7ff ff6c 	bl	80100e8 <WM88XXReadRegister>
 8010210:	210b      	movs	r1, #11
 8010212:	9009      	str	r0, [sp, #36]	; 0x24
 8010214:	4620      	mov	r0, r4
 8010216:	f7ff ff67 	bl	80100e8 <WM88XXReadRegister>
 801021a:	210d      	movs	r1, #13
 801021c:	9006      	str	r0, [sp, #24]
 801021e:	4620      	mov	r0, r4
 8010220:	f7ff ff62 	bl	80100e8 <WM88XXReadRegister>
 8010224:	210e      	movs	r1, #14
 8010226:	4682      	mov	sl, r0
 8010228:	4620      	mov	r0, r4
 801022a:	f7ff ff5d 	bl	80100e8 <WM88XXReadRegister>
 801022e:	210f      	movs	r1, #15
 8010230:	4683      	mov	fp, r0
 8010232:	4620      	mov	r0, r4
 8010234:	f7ff ff58 	bl	80100e8 <WM88XXReadRegister>
 8010238:	2110      	movs	r1, #16
 801023a:	9007      	str	r0, [sp, #28]
 801023c:	4620      	mov	r0, r4
 801023e:	f7ff ff53 	bl	80100e8 <WM88XXReadRegister>
 8010242:	2111      	movs	r1, #17
 8010244:	9008      	str	r0, [sp, #32]
 8010246:	4620      	mov	r0, r4
 8010248:	f7ff ff4e 	bl	80100e8 <WM88XXReadRegister>
 801024c:	9b07      	ldr	r3, [sp, #28]
 801024e:	9a08      	ldr	r2, [sp, #32]
 8010250:	9303      	str	r3, [sp, #12]
 8010252:	4446      	add	r6, r8
 8010254:	9b06      	ldr	r3, [sp, #24]
 8010256:	9005      	str	r0, [sp, #20]
 8010258:	9204      	str	r2, [sp, #16]
 801025a:	9300      	str	r3, [sp, #0]
 801025c:	462a      	mov	r2, r5
 801025e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010260:	490a      	ldr	r1, [pc, #40]	; (801028c <WM8805DBG+0x9c>)
 8010262:	f8cd b008 	str.w	fp, [sp, #8]
 8010266:	4630      	mov	r0, r6
 8010268:	f8cd a004 	str.w	sl, [sp, #4]
 801026c:	f7f8 fcfa 	bl	8008c64 <xsprintf>
 8010270:	683c      	ldr	r4, [r7, #0]
 8010272:	eb08 0004 	add.w	r0, r8, r4
 8010276:	f00c ffe3 	bl	801d240 <strlen>
 801027a:	4420      	add	r0, r4
 801027c:	6038      	str	r0, [r7, #0]
 801027e:	3501      	adds	r5, #1
}

void WM8805DBG(int *bufSize, char *bufPtr)
{
  spdifChip_t spdifChip;
  for(spdifChip = WM8805_1; spdifChip <= WM8805_2; spdifChip++)
 8010280:	2d02      	cmp	r5, #2
 8010282:	d1bd      	bne.n	8010200 <WM8805DBG+0x10>
              WM88XXReadRegister(spdifChip, WM8805_REG_RXCH2),
              WM88XXReadRegister(spdifChip, WM8805_REG_RXCH3),
              WM88XXReadRegister(spdifChip, WM8805_REG_RXCH4),
              WM88XXReadRegister(spdifChip, WM8805_REG_RXCH5));
    }
}
 8010284:	b00b      	add	sp, #44	; 0x2c
 8010286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801028a:	bf00      	nop
 801028c:	0803e91e 	.word	0x0803e91e

08010290 <WM88XXSetPLLMul>:

void WM88XXSetPLLMul(spdifChip_t spdifChip)
{
 8010290:	b538      	push	{r3, r4, r5, lr}
  int lock = !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
 8010292:	210c      	movs	r1, #12
              WM88XXReadRegister(spdifChip, WM8805_REG_RXCH5));
    }
}

void WM88XXSetPLLMul(spdifChip_t spdifChip)
{
 8010294:	4604      	mov	r4, r0
  int lock = !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
 8010296:	f7ff ff27 	bl	80100e8 <WM88XXReadRegister>
  if(!lock)
 801029a:	0643      	lsls	r3, r0, #25
 801029c:	d540      	bpl.n	8010320 <WM88XXSetPLLMul+0x90>
  *tab   = WM88XXReadRegister(spdifChip, WM8805_REG_DEVREV);
}
static void WM88XXSetPLL(spdifChip_t spdifChip, int plln, int pllk)
{

  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL1, pllk & 0xFF);
 801029e:	2221      	movs	r2, #33	; 0x21
 80102a0:	2103      	movs	r1, #3
 80102a2:	4620      	mov	r0, r4
 80102a4:	f7ff feae 	bl	8010004 <WM88XXWriteRegister>
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL2, (pllk >> 8) & 0xFF);
 80102a8:	22fd      	movs	r2, #253	; 0xfd
 80102aa:	2104      	movs	r1, #4
 80102ac:	4620      	mov	r0, r4
 80102ae:	f7ff fea9 	bl	8010004 <WM88XXWriteRegister>
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL3, (pllk >> 16) & 0x3F);
 80102b2:	2236      	movs	r2, #54	; 0x36
 80102b4:	2105      	movs	r1, #5
 80102b6:	4620      	mov	r0, r4
 80102b8:	f7ff fea4 	bl	8010004 <WM88XXWriteRegister>
  //If crystal freq is higher than 24MHz set PRESCALE bit(divider before pll /2)
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL4, (plln & 0x0F) | PRESCALER*PLL4_PRESCALE);
 80102bc:	2207      	movs	r2, #7
 80102be:	2106      	movs	r1, #6
 80102c0:	4620      	mov	r0, r4
 80102c2:	f7ff fe9f 	bl	8010004 <WM88XXWriteRegister>
 80102c6:	2515      	movs	r5, #21
      WM88XXSetPLL(spdifChip, WM88XX_PLLN_94_3104MHz, WM88XX_PLLK_94_3104MHz);
      //Check lock
      int retry = 20;
      do
        {
          mdelay(1);
 80102c8:	2001      	movs	r0, #1
 80102ca:	f7fa fc1d 	bl	800ab08 <vTaskDelay>
          lock = !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
 80102ce:	210c      	movs	r1, #12
 80102d0:	4620      	mov	r0, r4
 80102d2:	f7ff ff09 	bl	80100e8 <WM88XXReadRegister>
        }
      while(retry-- && !lock);
 80102d6:	3d01      	subs	r5, #1
      //Check lock
      int retry = 20;
      do
        {
          mdelay(1);
          lock = !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
 80102d8:	f000 0040 	and.w	r0, r0, #64	; 0x40
        }
      while(retry-- && !lock);
 80102dc:	d002      	beq.n	80102e4 <WM88XXSetPLLMul+0x54>
 80102de:	2800      	cmp	r0, #0
 80102e0:	d1f2      	bne.n	80102c8 <WM88XXSetPLLMul+0x38>
 80102e2:	bd38      	pop	{r3, r4, r5, pc}

      //Still no lock
      if(!lock)
 80102e4:	b1e0      	cbz	r0, 8010320 <WM88XXSetPLLMul+0x90>
        {
          //Check if 192kHz
          int recovered = (WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>4)&3;
 80102e6:	210c      	movs	r1, #12
 80102e8:	4620      	mov	r0, r4
 80102ea:	f7ff fefd 	bl	80100e8 <WM88XXReadRegister>
          if(recovered == 0)
 80102ee:	f010 0f30 	tst.w	r0, #48	; 0x30
 80102f2:	d115      	bne.n	8010320 <WM88XXSetPLLMul+0x90>
  *tab   = WM88XXReadRegister(spdifChip, WM8805_REG_DEVREV);
}
static void WM88XXSetPLL(spdifChip_t spdifChip, int plln, int pllk)
{

  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL1, pllk & 0xFF);
 80102f4:	22ba      	movs	r2, #186	; 0xba
 80102f6:	2103      	movs	r1, #3
 80102f8:	4620      	mov	r0, r4
 80102fa:	f7ff fe83 	bl	8010004 <WM88XXWriteRegister>
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL2, (pllk >> 8) & 0xFF);
 80102fe:	2249      	movs	r2, #73	; 0x49
 8010300:	2104      	movs	r1, #4
 8010302:	4620      	mov	r0, r4
 8010304:	f7ff fe7e 	bl	8010004 <WM88XXWriteRegister>
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL3, (pllk >> 16) & 0x3F);
 8010308:	220c      	movs	r2, #12
 801030a:	2105      	movs	r1, #5
 801030c:	4620      	mov	r0, r4
 801030e:	f7ff fe79 	bl	8010004 <WM88XXWriteRegister>
  //If crystal freq is higher than 24MHz set PRESCALE bit(divider before pll /2)
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL4, (plln & 0x0F) | PRESCALER*PLL4_PRESCALE);
 8010312:	4620      	mov	r0, r4
 8010314:	2208      	movs	r2, #8
 8010316:	2106      	movs	r1, #6
              //Maybe 192 kHz
              WM88XXSetPLL(spdifChip, WM88XX_PLLN_98_304MHz, WM88XX_PLLK_98_304MHz);
            }
        }
    }
}
 8010318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL1, pllk & 0xFF);
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL2, (pllk >> 8) & 0xFF);
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL3, (pllk >> 16) & 0x3F);
  //If crystal freq is higher than 24MHz set PRESCALE bit(divider before pll /2)
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL4, (plln & 0x0F) | PRESCALER*PLL4_PRESCALE);
 801031c:	f7ff be72 	b.w	8010004 <WM88XXWriteRegister>
 8010320:	bd38      	pop	{r3, r4, r5, pc}
	...

08010324 <WM88XXSetTransmitterInput>:
  dprintf(LL_DEBUG, "Set receiver channel: %d in %s\n", channel, wmStr[spdifChip]);
  WM88XXIrqProc(spdifChip);
}

void WM88XXSetTransmitterInput(spdifChip_t spdifChip, int input)
{
 8010324:	b410      	push	{r4}
  WM_Register_SPDTX4[spdifChip] = (WM_Register_SPDTX4[spdifChip] & (~0x40)) | (char)input;
 8010326:	4c05      	ldr	r4, [pc, #20]	; (801033c <WM88XXSetTransmitterInput+0x18>)
 8010328:	5c22      	ldrb	r2, [r4, r0]
 801032a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801032e:	4311      	orrs	r1, r2
 8010330:	b2ca      	uxtb	r2, r1
 8010332:	5422      	strb	r2, [r4, r0]
  WM88XXWriteRegister(spdifChip, WM8805_REG_SPDTX4, WM_Register_SPDTX4[spdifChip]);
 8010334:	2115      	movs	r1, #21
}
 8010336:	bc10      	pop	{r4}
}

void WM88XXSetTransmitterInput(spdifChip_t spdifChip, int input)
{
  WM_Register_SPDTX4[spdifChip] = (WM_Register_SPDTX4[spdifChip] & (~0x40)) | (char)input;
  WM88XXWriteRegister(spdifChip, WM8805_REG_SPDTX4, WM_Register_SPDTX4[spdifChip]);
 8010338:	f7ff be64 	b.w	8010004 <WM88XXWriteRegister>
 801033c:	1000236c 	.word	0x1000236c

08010340 <WM88XXSetAIFRXMode>:
}

void WM88XXSetAIFRXMode(spdifChip_t spdifChip, char val)
{
  WM_Register_AIFRX[spdifChip] = (WM_Register_AIFRX[spdifChip] & 0x00) | (val & 0xfF);
 8010340:	4b03      	ldr	r3, [pc, #12]	; (8010350 <WM88XXSetAIFRXMode+0x10>)
 8010342:	4403      	add	r3, r0
  WM_Register_SPDTX4[spdifChip] = (WM_Register_SPDTX4[spdifChip] & (~0x40)) | (char)input;
  WM88XXWriteRegister(spdifChip, WM8805_REG_SPDTX4, WM_Register_SPDTX4[spdifChip]);
}

void WM88XXSetAIFRXMode(spdifChip_t spdifChip, char val)
{
 8010344:	460a      	mov	r2, r1
  WM_Register_AIFRX[spdifChip] = (WM_Register_AIFRX[spdifChip] & 0x00) | (val & 0xfF);
 8010346:	7119      	strb	r1, [r3, #4]
  WM88XXWriteRegister(spdifChip, WM8805_REG_AIFRX, WM_Register_AIFRX[spdifChip]);
 8010348:	211c      	movs	r1, #28
 801034a:	f7ff be5b 	b.w	8010004 <WM88XXWriteRegister>
 801034e:	bf00      	nop
 8010350:	1000236c 	.word	0x1000236c

08010354 <WM88XXSetAIFTXMode>:
}

void WM88XXSetAIFTXMode(spdifChip_t spdifChip, char val)
{
  WM_Register_AIFTX[spdifChip] = (WM_Register_AIFTX[spdifChip] & 0xC0) | (val & 0x3F);
 8010354:	4b05      	ldr	r3, [pc, #20]	; (801036c <WM88XXSetAIFTXMode+0x18>)
 8010356:	4403      	add	r3, r0
 8010358:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801035c:	7a1a      	ldrb	r2, [r3, #8]
 801035e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8010362:	430a      	orrs	r2, r1
  WM88XXWriteRegister(spdifChip, WM8805_REG_AIFTX, WM_Register_AIFTX[spdifChip]);
 8010364:	211b      	movs	r1, #27
  WM88XXWriteRegister(spdifChip, WM8805_REG_AIFRX, WM_Register_AIFRX[spdifChip]);
}

void WM88XXSetAIFTXMode(spdifChip_t spdifChip, char val)
{
  WM_Register_AIFTX[spdifChip] = (WM_Register_AIFTX[spdifChip] & 0xC0) | (val & 0x3F);
 8010366:	721a      	strb	r2, [r3, #8]
  WM88XXWriteRegister(spdifChip, WM8805_REG_AIFTX, WM_Register_AIFTX[spdifChip]);
 8010368:	f7ff be4c 	b.w	8010004 <WM88XXWriteRegister>
 801036c:	1000236c 	.word	0x1000236c

08010370 <WM88XXSetMode>:
}

void WM88XXSetMode(spdifChip_t spdifChip, char val)
{
 8010370:	4b08      	ldr	r3, [pc, #32]	; (8010394 <WM88XXSetMode+0x24>)
  if (val)
 8010372:	b121      	cbz	r1, 801037e <WM88XXSetMode+0xe>
    WM_Register_AIFRX[spdifChip] |= WM88XX_MASTER_MODE;
 8010374:	1819      	adds	r1, r3, r0
 8010376:	790a      	ldrb	r2, [r1, #4]
 8010378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801037c:	e003      	b.n	8010386 <WM88XXSetMode+0x16>
  else
    WM_Register_AIFRX[spdifChip] &= (~WM88XX_MASTER_MODE);
 801037e:	1819      	adds	r1, r3, r0
 8010380:	790a      	ldrb	r2, [r1, #4]
 8010382:	f022 0240 	bic.w	r2, r2, #64	; 0x40

  WM88XXWriteRegister(spdifChip, WM8805_REG_AIFRX, WM_Register_AIFRX[spdifChip]);
 8010386:	4403      	add	r3, r0
void WM88XXSetMode(spdifChip_t spdifChip, char val)
{
  if (val)
    WM_Register_AIFRX[spdifChip] |= WM88XX_MASTER_MODE;
  else
    WM_Register_AIFRX[spdifChip] &= (~WM88XX_MASTER_MODE);
 8010388:	710a      	strb	r2, [r1, #4]

  WM88XXWriteRegister(spdifChip, WM8805_REG_AIFRX, WM_Register_AIFRX[spdifChip]);
 801038a:	791a      	ldrb	r2, [r3, #4]
 801038c:	211c      	movs	r1, #28
 801038e:	f7ff be39 	b.w	8010004 <WM88XXWriteRegister>
 8010392:	bf00      	nop
 8010394:	1000236c 	.word	0x1000236c

08010398 <WM88XXGetLock>:
}

int WM88XXGetLock(spdifChip_t spdifChip)
{
 8010398:	b508      	push	{r3, lr}
  return !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
 801039a:	210c      	movs	r1, #12
 801039c:	f7ff fea4 	bl	80100e8 <WM88XXReadRegister>
 80103a0:	f010 0f40 	tst.w	r0, #64	; 0x40
}
 80103a4:	bf0c      	ite	eq
 80103a6:	2001      	moveq	r0, #1
 80103a8:	2000      	movne	r0, #0
 80103aa:	bd08      	pop	{r3, pc}

080103ac <WM88XXReturnCurrentFreq>:

int WM88XXReturnCurrentFreq(spdifChip_t spdifChip)
{
 80103ac:	b570      	push	{r4, r5, r6, lr}
  int lock = !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
 80103ae:	210c      	movs	r1, #12
{
  return !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
}

int WM88XXReturnCurrentFreq(spdifChip_t spdifChip)
{
 80103b0:	4606      	mov	r6, r0
  int lock = !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
 80103b2:	f7ff fe99 	bl	80100e8 <WM88XXReadRegister>
  if(lock)
 80103b6:	0642      	lsls	r2, r0, #25
 80103b8:	d501      	bpl.n	80103be <WM88XXReturnCurrentFreq+0x12>
      int recovered = (WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>4)&3;
      int readFreq = WM88XXReadRegister(spdifChip, WM8805_REG_RXCH4) & 0x0F;
      lock = !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
      return lock?FreqHz[recovered][readFreq]:0;
    }
  return 0;
 80103ba:	2000      	movs	r0, #0
 80103bc:	bd70      	pop	{r4, r5, r6, pc}
int WM88XXReturnCurrentFreq(spdifChip_t spdifChip)
{
  int lock = !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
  if(lock)
    {
      int recovered = (WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>4)&3;
 80103be:	210c      	movs	r1, #12
 80103c0:	4630      	mov	r0, r6
 80103c2:	f7ff fe91 	bl	80100e8 <WM88XXReadRegister>
      int readFreq = WM88XXReadRegister(spdifChip, WM8805_REG_RXCH4) & 0x0F;
 80103c6:	2110      	movs	r1, #16
int WM88XXReturnCurrentFreq(spdifChip_t spdifChip)
{
  int lock = !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
  if(lock)
    {
      int recovered = (WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>4)&3;
 80103c8:	4605      	mov	r5, r0
      int readFreq = WM88XXReadRegister(spdifChip, WM8805_REG_RXCH4) & 0x0F;
 80103ca:	4630      	mov	r0, r6
 80103cc:	f7ff fe8c 	bl	80100e8 <WM88XXReadRegister>
      lock = !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
 80103d0:	210c      	movs	r1, #12
{
  int lock = !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
  if(lock)
    {
      int recovered = (WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>4)&3;
      int readFreq = WM88XXReadRegister(spdifChip, WM8805_REG_RXCH4) & 0x0F;
 80103d2:	4604      	mov	r4, r0
      lock = !((WM88XXReadRegister(spdifChip, WM8805_REG_SPDIF)>>6)&1);
 80103d4:	4630      	mov	r0, r6
 80103d6:	f7ff fe87 	bl	80100e8 <WM88XXReadRegister>
      return lock?FreqHz[recovered][readFreq]:0;
 80103da:	0643      	lsls	r3, r0, #25
 80103dc:	d4ed      	bmi.n	80103ba <WM88XXReturnCurrentFreq+0xe>
 80103de:	f005 0530 	and.w	r5, r5, #48	; 0x30
 80103e2:	4b04      	ldr	r3, [pc, #16]	; (80103f4 <WM88XXReturnCurrentFreq+0x48>)
 80103e4:	f004 040f 	and.w	r4, r4, #15
 80103e8:	442c      	add	r4, r5
 80103ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80103ee:	68e0      	ldr	r0, [r4, #12]
    }
  return 0;
}
 80103f0:	bd70      	pop	{r4, r5, r6, pc}
 80103f2:	bf00      	nop
 80103f4:	0803e7e4 	.word	0x0803e7e4

080103f8 <WM88XXSetInterruptMask>:

void WM88XXSetInterruptMask(spdifChip_t spdifChip, char mask)
{
  WM88XXWriteRegister(spdifChip, WM8805_REG_IRQMASK, mask);
 80103f8:	460a      	mov	r2, r1
 80103fa:	210a      	movs	r1, #10
 80103fc:	f7ff be02 	b.w	8010004 <WM88XXWriteRegister>

08010400 <WM88XXIrqProc>:
}

int WM88XXIrqProc(spdifChip_t spdifChip)
{
 8010400:	b510      	push	{r4, lr}
 8010402:	4604      	mov	r4, r0
  WM88XXSetPLLMul(spdifChip);
 8010404:	f7ff ff44 	bl	8010290 <WM88XXSetPLLMul>
  return WM88XXReturnCurrentFreq(spdifChip);
 8010408:	4620      	mov	r0, r4
  ;
}
 801040a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

int WM88XXIrqProc(spdifChip_t spdifChip)
{
  WM88XXSetPLLMul(spdifChip);
  return WM88XXReturnCurrentFreq(spdifChip);
 801040e:	f7ff bfcd 	b.w	80103ac <WM88XXReturnCurrentFreq>
	...

08010414 <WM88XXSetReceiverChannel>:
  "WM8804_1",
  "WM8804_2",
};

void WM88XXSetReceiverChannel(spdifChip_t spdifChip, int channel)
{
 8010414:	b538      	push	{r3, r4, r5, lr}
  if (channel < 0 || channel > 7)
    channel = 0;

  WM_Register_PLL6[spdifChip] = (WM_Register_PLL6[spdifChip] & (~0x07)) | (char)channel;
 8010416:	4b11      	ldr	r3, [pc, #68]	; (801045c <WM88XXSetReceiverChannel+0x48>)
 8010418:	4403      	add	r3, r0
};

void WM88XXSetReceiverChannel(spdifChip_t spdifChip, int channel)
{
  if (channel < 0 || channel > 7)
    channel = 0;
 801041a:	2907      	cmp	r1, #7
 801041c:	bf94      	ite	ls
 801041e:	460d      	movls	r5, r1
 8010420:	2500      	movhi	r5, #0

  WM_Register_PLL6[spdifChip] = (WM_Register_PLL6[spdifChip] & (~0x07)) | (char)channel;
 8010422:	7b1a      	ldrb	r2, [r3, #12]
 8010424:	f022 0207 	bic.w	r2, r2, #7
 8010428:	432a      	orrs	r2, r5
 801042a:	b2d2      	uxtb	r2, r2
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL6, WM_Register_PLL6[spdifChip]);
 801042c:	2108      	movs	r1, #8
void WM88XXSetReceiverChannel(spdifChip_t spdifChip, int channel)
{
  if (channel < 0 || channel > 7)
    channel = 0;

  WM_Register_PLL6[spdifChip] = (WM_Register_PLL6[spdifChip] & (~0x07)) | (char)channel;
 801042e:	731a      	strb	r2, [r3, #12]
  "WM8804_1",
  "WM8804_2",
};

void WM88XXSetReceiverChannel(spdifChip_t spdifChip, int channel)
{
 8010430:	4604      	mov	r4, r0
  if (channel < 0 || channel > 7)
    channel = 0;

  WM_Register_PLL6[spdifChip] = (WM_Register_PLL6[spdifChip] & (~0x07)) | (char)channel;
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL6, WM_Register_PLL6[spdifChip]);
 8010432:	f7ff fde7 	bl	8010004 <WM88XXWriteRegister>

  dprintf(LL_DEBUG, "Set receiver channel: %d in %s\n", channel, wmStr[spdifChip]);
 8010436:	4b0a      	ldr	r3, [pc, #40]	; (8010460 <WM88XXSetReceiverChannel+0x4c>)
 8010438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801043a:	2b02      	cmp	r3, #2
 801043c:	dd08      	ble.n	8010450 <WM88XXSetReceiverChannel+0x3c>
 801043e:	4b09      	ldr	r3, [pc, #36]	; (8010464 <WM88XXSetReceiverChannel+0x50>)
 8010440:	4809      	ldr	r0, [pc, #36]	; (8010468 <WM88XXSetReceiverChannel+0x54>)
 8010442:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010446:	4629      	mov	r1, r5
 8010448:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 801044c:	f7f8 fbec 	bl	8008c28 <xprintf>
  WM88XXIrqProc(spdifChip);
 8010450:	4620      	mov	r0, r4
}
 8010452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  WM_Register_PLL6[spdifChip] = (WM_Register_PLL6[spdifChip] & (~0x07)) | (char)channel;
  WM88XXWriteRegister(spdifChip, WM8805_REG_PLL6, WM_Register_PLL6[spdifChip]);

  dprintf(LL_DEBUG, "Set receiver channel: %d in %s\n", channel, wmStr[spdifChip]);
  WM88XXIrqProc(spdifChip);
 8010456:	f7ff bfd3 	b.w	8010400 <WM88XXIrqProc>
 801045a:	bf00      	nop
 801045c:	1000236c 	.word	0x1000236c
 8010460:	10001000 	.word	0x10001000
 8010464:	0803e7e4 	.word	0x0803e7e4
 8010468:	0803e94c 	.word	0x0803e94c

0801046c <WM8804setResolution>:
}

void WM8804setResolution(spdifChip_t wmChip, int resolution)
{

  if(resolution == 16)
 801046c:	2910      	cmp	r1, #16

  return 0;
}

void WM8804setResolution(spdifChip_t wmChip, int resolution)
{
 801046e:	b510      	push	{r4, lr}
 8010470:	4604      	mov	r4, r0

  if(resolution == 16)
 8010472:	d104      	bne.n	801047e <WM8804setResolution+0x12>
    {
      WM88XXSetAIFTXMode(wmChip, AIFTX_DSP_MODE | AIFTX_WL_16BITS | AIFTX_LRP_INVERT);
 8010474:	2123      	movs	r1, #35	; 0x23
 8010476:	f7ff ff6d 	bl	8010354 <WM88XXSetAIFTXMode>
      WM88XXSetAIFRXMode(wmChip, AIFRX_DSP_MODE | AIFRX_WL_16BITS | AIFRX_LRP_INVERT);
 801047a:	2123      	movs	r1, #35	; 0x23
 801047c:	e003      	b.n	8010486 <WM8804setResolution+0x1a>
    }
  else
    {
      WM88XXSetAIFTXMode(wmChip, AIFTX_DSP_MODE | AIFTX_WL_24BITS_A | AIFTX_LRP_INVERT);
 801047e:	212f      	movs	r1, #47	; 0x2f
 8010480:	f7ff ff68 	bl	8010354 <WM88XXSetAIFTXMode>
      WM88XXSetAIFRXMode(wmChip, AIFRX_DSP_MODE | AIFRX_WL_24BITS_A | AIFRX_LRP_INVERT);
 8010484:	212f      	movs	r1, #47	; 0x2f
 8010486:	4620      	mov	r0, r4
    }
}
 8010488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      WM88XXSetAIFRXMode(wmChip, AIFRX_DSP_MODE | AIFRX_WL_16BITS | AIFRX_LRP_INVERT);
    }
  else
    {
      WM88XXSetAIFTXMode(wmChip, AIFTX_DSP_MODE | AIFTX_WL_24BITS_A | AIFTX_LRP_INVERT);
      WM88XXSetAIFRXMode(wmChip, AIFRX_DSP_MODE | AIFRX_WL_24BITS_A | AIFRX_LRP_INVERT);
 801048c:	f7ff bf58 	b.w	8010340 <WM88XXSetAIFRXMode>

08010490 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8010490:	b510      	push	{r4, lr}
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8010492:	4a1d      	ldr	r2, [pc, #116]	; (8010508 <SystemCoreClockUpdate+0x78>)
 8010494:	491d      	ldr	r1, [pc, #116]	; (801050c <SystemCoreClockUpdate+0x7c>)
 8010496:	6893      	ldr	r3, [r2, #8]

  switch (tmp)
 8010498:	f003 030c 	and.w	r3, r3, #12
 801049c:	2b04      	cmp	r3, #4
 801049e:	d003      	beq.n	80104a8 <SystemCoreClockUpdate+0x18>
 80104a0:	2b08      	cmp	r3, #8
 80104a2:	d006      	beq.n	80104b2 <SystemCoreClockUpdate+0x22>
 80104a4:	4b1a      	ldr	r3, [pc, #104]	; (8010510 <SystemCoreClockUpdate+0x80>)
 80104a6:	e024      	b.n	80104f2 <SystemCoreClockUpdate+0x62>
    {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80104a8:	4b1a      	ldr	r3, [pc, #104]	; (8010514 <SystemCoreClockUpdate+0x84>)
 80104aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80104ac:	4b1a      	ldr	r3, [pc, #104]	; (8010518 <SystemCoreClockUpdate+0x88>)
 80104ae:	4353      	muls	r3, r2
 80104b0:	e01f      	b.n	80104f2 <SystemCoreClockUpdate+0x62>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80104b2:	6850      	ldr	r0, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80104b4:	6853      	ldr	r3, [r2, #4]

      if (pllsource != 0)
 80104b6:	0240      	lsls	r0, r0, #9

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80104b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f

      if (pllsource != 0)
 80104bc:	d50a      	bpl.n	80104d4 <SystemCoreClockUpdate+0x44>
        {
          /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80104be:	4815      	ldr	r0, [pc, #84]	; (8010514 <SystemCoreClockUpdate+0x84>)
 80104c0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80104c2:	6852      	ldr	r2, [r2, #4]
 80104c4:	4814      	ldr	r0, [pc, #80]	; (8010518 <SystemCoreClockUpdate+0x88>)
 80104c6:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80104ca:	4360      	muls	r0, r4
 80104cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80104d0:	4353      	muls	r3, r2
 80104d2:	e006      	b.n	80104e2 <SystemCoreClockUpdate+0x52>
        }
      else
        {
          /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80104d4:	6850      	ldr	r0, [r2, #4]
 80104d6:	4a0e      	ldr	r2, [pc, #56]	; (8010510 <SystemCoreClockUpdate+0x80>)
 80104d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80104dc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80104e0:	4343      	muls	r3, r0
        }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80104e2:	4a09      	ldr	r2, [pc, #36]	; (8010508 <SystemCoreClockUpdate+0x78>)
 80104e4:	6852      	ldr	r2, [r2, #4]
      SystemCoreClock = pllvco/pllp;
 80104e6:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80104ea:	3201      	adds	r2, #1
 80104ec:	0052      	lsls	r2, r2, #1
 80104ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80104f2:	600b      	str	r3, [r1, #0]
      SystemCoreClock = HSI_VALUE;
      break;
    }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80104f4:	4b04      	ldr	r3, [pc, #16]	; (8010508 <SystemCoreClockUpdate+0x78>)
 80104f6:	689b      	ldr	r3, [r3, #8]
 80104f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80104fc:	440b      	add	r3, r1
 80104fe:	791a      	ldrb	r2, [r3, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8010500:	680b      	ldr	r3, [r1, #0]
 8010502:	40d3      	lsrs	r3, r2
 8010504:	600b      	str	r3, [r1, #0]
 8010506:	bd10      	pop	{r4, pc}
 8010508:	40023800 	.word	0x40023800
 801050c:	1000237c 	.word	0x1000237c
 8010510:	00f42400 	.word	0x00f42400
 8010514:	08004000 	.word	0x08004000
 8010518:	000f4240 	.word	0x000f4240

0801051c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801051c:	b507      	push	{r0, r1, r2, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801051e:	4b3d      	ldr	r3, [pc, #244]	; (8010614 <SystemInit+0xf8>)
 8010520:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010522:	2100      	movs	r1, #0
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
#endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010524:	f042 0201 	orr.w	r2, r2, #1
 8010528:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801052a:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8010532:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010536:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010538:	4a37      	ldr	r2, [pc, #220]	; (8010618 <SystemInit+0xfc>)
 801053a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010542:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010544:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
  /******************************************************************************/
  /*            PLL (clocked by HSE) used as System clock source                */
  /******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8010546:	9100      	str	r1, [sp, #0]
 8010548:	9101      	str	r1, [sp, #4]

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
    {
      HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8010558:	9201      	str	r2, [sp, #4]
      StartUpCounter++;
 801055a:	9a00      	ldr	r2, [sp, #0]
 801055c:	3201      	adds	r2, #1
 801055e:	9200      	str	r2, [sp, #0]
    }
  while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8010560:	9a01      	ldr	r2, [sp, #4]
 8010562:	b91a      	cbnz	r2, 801056c <SystemInit+0x50>
 8010564:	9a00      	ldr	r2, [sp, #0]
 8010566:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 801056a:	d1f2      	bne.n	8010552 <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 801056c:	4b29      	ldr	r3, [pc, #164]	; (8010614 <SystemInit+0xf8>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
    {
      HSEStatus = (uint32_t)0x01;
 8010574:	bf18      	it	ne
 8010576:	2301      	movne	r3, #1
    }
  else
    {
      HSEStatus = (uint32_t)0x00;
 8010578:	9301      	str	r3, [sp, #4]
    }

  if (HSEStatus == (uint32_t)0x01)
 801057a:	9b01      	ldr	r3, [sp, #4]
 801057c:	2b01      	cmp	r3, #1
 801057e:	d00c      	beq.n	801059a <SystemInit+0x7e>

  /******************************************************************************/
  /*                          I2S clock configuration                           */
  /******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8010580:	4b24      	ldr	r3, [pc, #144]	; (8010614 <SystemInit+0xf8>)
 8010582:	689a      	ldr	r2, [r3, #8]
 8010584:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010588:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 801058a:	4a24      	ldr	r2, [pc, #144]	; (801061c <SystemInit+0x100>)
 801058c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010596:	601a      	str	r2, [r3, #0]
 8010598:	e034      	b.n	8010604 <SystemInit+0xe8>
    }

  if (HSEStatus == (uint32_t)0x01)
    {
      /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 801059a:	4b1e      	ldr	r3, [pc, #120]	; (8010614 <SystemInit+0xf8>)
      PWR->CR |= PWR_CR_VOS;
 801059c:	4920      	ldr	r1, [pc, #128]	; (8010620 <SystemInit+0x104>)
    }

  if (HSEStatus == (uint32_t)0x01)
    {
      /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 801059e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80105a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80105a4:	641a      	str	r2, [r3, #64]	; 0x40
      PWR->CR |= PWR_CR_VOS;
 80105a6:	680a      	ldr	r2, [r1, #0]
 80105a8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80105ac:	600a      	str	r2, [r1, #0]

      /* HCLK = SYSCLK / 1*/
      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80105ae:	689a      	ldr	r2, [r3, #8]
 80105b0:	609a      	str	r2, [r3, #8]

      /* PCLK2 = HCLK / 2*/
      RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80105b2:	689a      	ldr	r2, [r3, #8]
 80105b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80105b8:	609a      	str	r2, [r3, #8]

      /* PCLK1 = HCLK / 4*/
      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80105ba:	689a      	ldr	r2, [r3, #8]
 80105bc:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80105c0:	609a      	str	r2, [r3, #8]

      /* Configure the main PLL */
      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80105c2:	4a18      	ldr	r2, [pc, #96]	; (8010624 <SystemInit+0x108>)
 80105c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
                     (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 80105c6:	f042 62e8 	orr.w	r2, r2, #121634816	; 0x7400000
 80105ca:	f442 42a8 	orr.w	r2, r2, #21504	; 0x5400

      /* PCLK1 = HCLK / 4*/
      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;

      /* Configure the main PLL */
      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80105ce:	605a      	str	r2, [r3, #4]
                     (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

      /* Enable the main PLL */
      RCC->CR |= RCC_CR_PLLON;
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80105d6:	601a      	str	r2, [r3, #0]

      /* Wait till the main PLL is ready */
      while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80105d8:	6819      	ldr	r1, [r3, #0]
 80105da:	4a0e      	ldr	r2, [pc, #56]	; (8010614 <SystemInit+0xf8>)
 80105dc:	0189      	lsls	r1, r1, #6
 80105de:	d5fb      	bpl.n	80105d8 <SystemInit+0xbc>
        {
        }

      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
      FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80105e0:	4b11      	ldr	r3, [pc, #68]	; (8010628 <SystemInit+0x10c>)
 80105e2:	f240 7105 	movw	r1, #1797	; 0x705
 80105e6:	6019      	str	r1, [r3, #0]

      /* Select the main PLL as system clock source */
      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80105e8:	6893      	ldr	r3, [r2, #8]
 80105ea:	f023 0303 	bic.w	r3, r3, #3
 80105ee:	6093      	str	r3, [r2, #8]
      RCC->CFGR |= RCC_CFGR_SW_PLL;
 80105f0:	6893      	ldr	r3, [r2, #8]
 80105f2:	f043 0302 	orr.w	r3, r3, #2
 80105f6:	6093      	str	r3, [r2, #8]

      /* Wait till the main PLL is used as system clock source */
      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 80105f8:	6893      	ldr	r3, [r2, #8]
 80105fa:	f003 030c 	and.w	r3, r3, #12
 80105fe:	2b08      	cmp	r3, #8
 8010600:	d1fa      	bne.n	80105f8 <SystemInit+0xdc>
 8010602:	e7bd      	b.n	8010580 <SystemInit+0x64>

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8010604:	681a      	ldr	r2, [r3, #0]
 8010606:	0112      	lsls	r2, r2, #4
 8010608:	d5fc      	bpl.n	8010604 <SystemInit+0xe8>
#endif /* DATA_IN_ExtSRAM */

  /* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
  SystemCoreClockUpdate();
 801060a:	f7ff ff41 	bl	8010490 <SystemCoreClockUpdate>
}
 801060e:	b003      	add	sp, #12
 8010610:	f85d fb04 	ldr.w	pc, [sp], #4
 8010614:	40023800 	.word	0x40023800
 8010618:	24003010 	.word	0x24003010
 801061c:	30004080 	.word	0x30004080
 8010620:	40007000 	.word	0x40007000
 8010624:	08004000 	.word	0x08004000
 8010628:	40023c00 	.word	0x40023c00

0801062c <NVIC_PriorityGroupConfig>:
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 801062c:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8010630:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8010632:	d107      	bne.n	8010644 <NVIC_PriorityGroupConfig+0x18>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8010634:	4b0b      	ldr	r3, [pc, #44]	; (8010664 <NVIC_PriorityGroupConfig+0x38>)
 8010636:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 801063a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 801063e:	60d8      	str	r0, [r3, #12]
}
 8010640:	b002      	add	sp, #8
 8010642:	4770      	bx	lr
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8010644:	f420 7380 	bic.w	r3, r0, #256	; 0x100
 8010648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801064c:	d0f2      	beq.n	8010634 <NVIC_PriorityGroupConfig+0x8>
 801064e:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8010652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010656:	d0ed      	beq.n	8010634 <NVIC_PriorityGroupConfig+0x8>
 8010658:	2301      	movs	r3, #1
 801065a:	9301      	str	r3, [sp, #4]
 801065c:	9b01      	ldr	r3, [sp, #4]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d1fc      	bne.n	801065c <NVIC_PriorityGroupConfig+0x30>
 8010662:	e7e7      	b.n	8010634 <NVIC_PriorityGroupConfig+0x8>
 8010664:	e000ed00 	.word	0xe000ed00

08010668 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8010668:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 801066a:	4b4c      	ldr	r3, [pc, #304]	; (801079c <GPIO_Init+0x134>)
 801066c:	4298      	cmp	r0, r3
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 801066e:	b087      	sub	sp, #28
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8010670:	d102      	bne.n	8010678 <GPIO_Init+0x10>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 8010672:	680b      	ldr	r3, [r1, #0]
 8010674:	b36b      	cbz	r3, 80106d2 <GPIO_Init+0x6a>
 8010676:	e031      	b.n	80106dc <GPIO_Init+0x74>
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8010678:	4b49      	ldr	r3, [pc, #292]	; (80107a0 <GPIO_Init+0x138>)
 801067a:	4298      	cmp	r0, r3
 801067c:	d0f9      	beq.n	8010672 <GPIO_Init+0xa>
 801067e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010682:	4298      	cmp	r0, r3
 8010684:	d0f5      	beq.n	8010672 <GPIO_Init+0xa>
 8010686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801068a:	4298      	cmp	r0, r3
 801068c:	d0f1      	beq.n	8010672 <GPIO_Init+0xa>
 801068e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010692:	4298      	cmp	r0, r3
 8010694:	d0ed      	beq.n	8010672 <GPIO_Init+0xa>
 8010696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801069a:	4298      	cmp	r0, r3
 801069c:	d0e9      	beq.n	8010672 <GPIO_Init+0xa>
 801069e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80106a2:	4298      	cmp	r0, r3
 80106a4:	d0e5      	beq.n	8010672 <GPIO_Init+0xa>
 80106a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80106aa:	4298      	cmp	r0, r3
 80106ac:	d0e1      	beq.n	8010672 <GPIO_Init+0xa>
 80106ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80106b2:	4298      	cmp	r0, r3
 80106b4:	d0dd      	beq.n	8010672 <GPIO_Init+0xa>
 80106b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80106ba:	4298      	cmp	r0, r3
 80106bc:	d0d9      	beq.n	8010672 <GPIO_Init+0xa>
 80106be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80106c2:	4298      	cmp	r0, r3
 80106c4:	d0d5      	beq.n	8010672 <GPIO_Init+0xa>
 80106c6:	2301      	movs	r3, #1
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	9b00      	ldr	r3, [sp, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d1fc      	bne.n	80106ca <GPIO_Init+0x62>
 80106d0:	e7cf      	b.n	8010672 <GPIO_Init+0xa>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 80106d2:	2301      	movs	r3, #1
 80106d4:	9301      	str	r3, [sp, #4]
 80106d6:	9b01      	ldr	r3, [sp, #4]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d1fc      	bne.n	80106d6 <GPIO_Init+0x6e>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 80106dc:	790b      	ldrb	r3, [r1, #4]
 80106de:	2b03      	cmp	r3, #3
 80106e0:	d904      	bls.n	80106ec <GPIO_Init+0x84>
 80106e2:	2301      	movs	r3, #1
 80106e4:	9302      	str	r3, [sp, #8]
 80106e6:	9b02      	ldr	r3, [sp, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d1fc      	bne.n	80106e6 <GPIO_Init+0x7e>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 80106ec:	79cb      	ldrb	r3, [r1, #7]
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	d904      	bls.n	80106fc <GPIO_Init+0x94>
 80106f2:	2301      	movs	r3, #1
 80106f4:	9303      	str	r3, [sp, #12]
 80106f6:	9b03      	ldr	r3, [sp, #12]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d1fc      	bne.n	80106f6 <GPIO_Init+0x8e>
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80106fc:	2300      	movs	r3, #0

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 80106fe:	2501      	movs	r5, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8010700:	2703      	movs	r7, #3
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8010702:	680c      	ldr	r4, [r1, #0]

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8010704:	fa05 f203 	lsl.w	r2, r5, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8010708:	43a2      	bics	r2, r4
 801070a:	d142      	bne.n	8010792 <GPIO_Init+0x12a>
 801070c:	005a      	lsls	r2, r3, #1
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 801070e:	6806      	ldr	r6, [r0, #0]
 8010710:	fa07 f402 	lsl.w	r4, r7, r2
 8010714:	43e4      	mvns	r4, r4
 8010716:	4026      	ands	r6, r4
 8010718:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 801071a:	f891 e004 	ldrb.w	lr, [r1, #4]
 801071e:	6806      	ldr	r6, [r0, #0]
 8010720:	fa0e fe02 	lsl.w	lr, lr, r2
 8010724:	ea4e 0606 	orr.w	r6, lr, r6
 8010728:	6006      	str	r6, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 801072a:	790e      	ldrb	r6, [r1, #4]
 801072c:	3e01      	subs	r6, #1
 801072e:	2e01      	cmp	r6, #1
 8010730:	d823      	bhi.n	801077a <GPIO_Init+0x112>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8010732:	794e      	ldrb	r6, [r1, #5]
 8010734:	2e03      	cmp	r6, #3
 8010736:	d80b      	bhi.n	8010750 <GPIO_Init+0xe8>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8010738:	6886      	ldr	r6, [r0, #8]
 801073a:	4034      	ands	r4, r6
 801073c:	6084      	str	r4, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 801073e:	794c      	ldrb	r4, [r1, #5]
 8010740:	6886      	ldr	r6, [r0, #8]
 8010742:	4094      	lsls	r4, r2
 8010744:	4334      	orrs	r4, r6
 8010746:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 8010748:	798c      	ldrb	r4, [r1, #6]
 801074a:	2c01      	cmp	r4, #1
 801074c:	d805      	bhi.n	801075a <GPIO_Init+0xf2>
 801074e:	e008      	b.n	8010762 <GPIO_Init+0xfa>
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8010750:	9504      	str	r5, [sp, #16]
 8010752:	9e04      	ldr	r6, [sp, #16]
 8010754:	2e00      	cmp	r6, #0
 8010756:	d1fc      	bne.n	8010752 <GPIO_Init+0xea>
 8010758:	e7ee      	b.n	8010738 <GPIO_Init+0xd0>
        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 801075a:	9505      	str	r5, [sp, #20]
 801075c:	9c05      	ldr	r4, [sp, #20]
 801075e:	2c00      	cmp	r4, #0
 8010760:	d1fc      	bne.n	801075c <GPIO_Init+0xf4>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8010762:	6844      	ldr	r4, [r0, #4]
 8010764:	fa05 f603 	lsl.w	r6, r5, r3
 8010768:	ea24 0406 	bic.w	r4, r4, r6
 801076c:	6044      	str	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 801076e:	798c      	ldrb	r4, [r1, #6]
 8010770:	6846      	ldr	r6, [r0, #4]
 8010772:	409c      	lsls	r4, r3
 8010774:	b2a4      	uxth	r4, r4
 8010776:	4334      	orrs	r4, r6
 8010778:	6044      	str	r4, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 801077a:	68c4      	ldr	r4, [r0, #12]
 801077c:	fa07 f602 	lsl.w	r6, r7, r2
 8010780:	ea24 0406 	bic.w	r4, r4, r6
 8010784:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8010786:	79ce      	ldrb	r6, [r1, #7]
 8010788:	68c4      	ldr	r4, [r0, #12]
 801078a:	fa06 f202 	lsl.w	r2, r6, r2
 801078e:	4322      	orrs	r2, r4
 8010790:	60c2      	str	r2, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8010792:	3301      	adds	r3, #1
 8010794:	2b10      	cmp	r3, #16
 8010796:	d1b4      	bne.n	8010702 <GPIO_Init+0x9a>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8010798:	b007      	add	sp, #28
 801079a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801079c:	40020000 	.word	0x40020000
 80107a0:	40020400 	.word	0x40020400

080107a4 <GPIO_ReadInputDataBit>:
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  uint8_t bitstatus = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80107a4:	4b31      	ldr	r3, [pc, #196]	; (801086c <GPIO_ReadInputDataBit+0xc8>)
 80107a6:	4298      	cmp	r0, r3
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80107a8:	b082      	sub	sp, #8
  uint8_t bitstatus = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80107aa:	d104      	bne.n	80107b6 <GPIO_ReadInputDataBit+0x12>
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
 80107ac:	1e4b      	subs	r3, r1, #1
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	2b1f      	cmp	r3, #31
 80107b2:	d852      	bhi.n	801085a <GPIO_ReadInputDataBit+0xb6>
 80107b4:	e02c      	b.n	8010810 <GPIO_ReadInputDataBit+0x6c>
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  uint8_t bitstatus = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80107b6:	4b2e      	ldr	r3, [pc, #184]	; (8010870 <GPIO_ReadInputDataBit+0xcc>)
 80107b8:	4298      	cmp	r0, r3
 80107ba:	d0f7      	beq.n	80107ac <GPIO_ReadInputDataBit+0x8>
 80107bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80107c0:	4298      	cmp	r0, r3
 80107c2:	d0f3      	beq.n	80107ac <GPIO_ReadInputDataBit+0x8>
 80107c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80107c8:	4298      	cmp	r0, r3
 80107ca:	d0ef      	beq.n	80107ac <GPIO_ReadInputDataBit+0x8>
 80107cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80107d0:	4298      	cmp	r0, r3
 80107d2:	d0eb      	beq.n	80107ac <GPIO_ReadInputDataBit+0x8>
 80107d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80107d8:	4298      	cmp	r0, r3
 80107da:	d0e7      	beq.n	80107ac <GPIO_ReadInputDataBit+0x8>
 80107dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80107e0:	4298      	cmp	r0, r3
 80107e2:	d0e3      	beq.n	80107ac <GPIO_ReadInputDataBit+0x8>
 80107e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80107e8:	4298      	cmp	r0, r3
 80107ea:	d0df      	beq.n	80107ac <GPIO_ReadInputDataBit+0x8>
 80107ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80107f0:	4298      	cmp	r0, r3
 80107f2:	d0db      	beq.n	80107ac <GPIO_ReadInputDataBit+0x8>
 80107f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80107f8:	4298      	cmp	r0, r3
 80107fa:	d0d7      	beq.n	80107ac <GPIO_ReadInputDataBit+0x8>
 80107fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010800:	4298      	cmp	r0, r3
 8010802:	d0d3      	beq.n	80107ac <GPIO_ReadInputDataBit+0x8>
 8010804:	2301      	movs	r3, #1
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	9b00      	ldr	r3, [sp, #0]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1fc      	bne.n	8010808 <GPIO_ReadInputDataBit+0x64>
 801080e:	e7cd      	b.n	80107ac <GPIO_ReadInputDataBit+0x8>
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
 8010810:	4a18      	ldr	r2, [pc, #96]	; (8010874 <GPIO_ReadInputDataBit+0xd0>)
 8010812:	fa22 f303 	lsr.w	r3, r2, r3
 8010816:	07db      	lsls	r3, r3, #31
 8010818:	d421      	bmi.n	801085e <GPIO_ReadInputDataBit+0xba>
 801081a:	2980      	cmp	r1, #128	; 0x80
 801081c:	d01f      	beq.n	801085e <GPIO_ReadInputDataBit+0xba>
 801081e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8010822:	d01c      	beq.n	801085e <GPIO_ReadInputDataBit+0xba>
 8010824:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010828:	d019      	beq.n	801085e <GPIO_ReadInputDataBit+0xba>
 801082a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801082e:	d016      	beq.n	801085e <GPIO_ReadInputDataBit+0xba>
 8010830:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8010834:	d013      	beq.n	801085e <GPIO_ReadInputDataBit+0xba>
 8010836:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 801083a:	d010      	beq.n	801085e <GPIO_ReadInputDataBit+0xba>
 801083c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8010840:	d00d      	beq.n	801085e <GPIO_ReadInputDataBit+0xba>
 8010842:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8010846:	d00a      	beq.n	801085e <GPIO_ReadInputDataBit+0xba>
 8010848:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801084c:	d007      	beq.n	801085e <GPIO_ReadInputDataBit+0xba>
 801084e:	2301      	movs	r3, #1
 8010850:	9301      	str	r3, [sp, #4]
 8010852:	9b01      	ldr	r3, [sp, #4]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1fc      	bne.n	8010852 <GPIO_ReadInputDataBit+0xae>
 8010858:	e001      	b.n	801085e <GPIO_ReadInputDataBit+0xba>
 801085a:	2940      	cmp	r1, #64	; 0x40
 801085c:	d1dd      	bne.n	801081a <GPIO_ReadInputDataBit+0x76>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 801085e:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8010860:	4219      	tst	r1, r3
 8010862:	bf14      	ite	ne
 8010864:	2001      	movne	r0, #1
 8010866:	2000      	moveq	r0, #0
}
 8010868:	b002      	add	sp, #8
 801086a:	4770      	bx	lr
 801086c:	40020000 	.word	0x40020000
 8010870:	40020400 	.word	0x40020400
 8010874:	8000808b 	.word	0x8000808b

08010878 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8010878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 801087a:	4b35      	ldr	r3, [pc, #212]	; (8010950 <GPIO_WriteBit+0xd8>)
 801087c:	4298      	cmp	r0, r3
 801087e:	d104      	bne.n	801088a <GPIO_WriteBit+0x12>
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
 8010880:	1e4b      	subs	r3, r1, #1
 8010882:	b29b      	uxth	r3, r3
 8010884:	2b1f      	cmp	r3, #31
 8010886:	d837      	bhi.n	80108f8 <GPIO_WriteBit+0x80>
 8010888:	e02c      	b.n	80108e4 <GPIO_WriteBit+0x6c>
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 801088a:	4b32      	ldr	r3, [pc, #200]	; (8010954 <GPIO_WriteBit+0xdc>)
 801088c:	4298      	cmp	r0, r3
 801088e:	d0f7      	beq.n	8010880 <GPIO_WriteBit+0x8>
 8010890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010894:	4298      	cmp	r0, r3
 8010896:	d0f3      	beq.n	8010880 <GPIO_WriteBit+0x8>
 8010898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801089c:	4298      	cmp	r0, r3
 801089e:	d0ef      	beq.n	8010880 <GPIO_WriteBit+0x8>
 80108a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80108a4:	4298      	cmp	r0, r3
 80108a6:	d0eb      	beq.n	8010880 <GPIO_WriteBit+0x8>
 80108a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80108ac:	4298      	cmp	r0, r3
 80108ae:	d0e7      	beq.n	8010880 <GPIO_WriteBit+0x8>
 80108b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80108b4:	4298      	cmp	r0, r3
 80108b6:	d0e3      	beq.n	8010880 <GPIO_WriteBit+0x8>
 80108b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80108bc:	4298      	cmp	r0, r3
 80108be:	d0df      	beq.n	8010880 <GPIO_WriteBit+0x8>
 80108c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80108c4:	4298      	cmp	r0, r3
 80108c6:	d0db      	beq.n	8010880 <GPIO_WriteBit+0x8>
 80108c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80108cc:	4298      	cmp	r0, r3
 80108ce:	d0d7      	beq.n	8010880 <GPIO_WriteBit+0x8>
 80108d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80108d4:	4298      	cmp	r0, r3
 80108d6:	d0d3      	beq.n	8010880 <GPIO_WriteBit+0x8>
 80108d8:	2301      	movs	r3, #1
 80108da:	9301      	str	r3, [sp, #4]
 80108dc:	9b01      	ldr	r3, [sp, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d1fc      	bne.n	80108dc <GPIO_WriteBit+0x64>
 80108e2:	e7cd      	b.n	8010880 <GPIO_WriteBit+0x8>
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
 80108e4:	4c1c      	ldr	r4, [pc, #112]	; (8010958 <GPIO_WriteBit+0xe0>)
 80108e6:	fa24 f303 	lsr.w	r3, r4, r3
 80108ea:	07db      	lsls	r3, r3, #31
 80108ec:	d506      	bpl.n	80108fc <GPIO_WriteBit+0x84>
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
 80108ee:	2a01      	cmp	r2, #1
 80108f0:	d929      	bls.n	8010946 <GPIO_WriteBit+0xce>
 80108f2:	2301      	movs	r3, #1
 80108f4:	9303      	str	r3, [sp, #12]
 80108f6:	e021      	b.n	801093c <GPIO_WriteBit+0xc4>
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
 80108f8:	2940      	cmp	r1, #64	; 0x40
 80108fa:	d0f8      	beq.n	80108ee <GPIO_WriteBit+0x76>
 80108fc:	2980      	cmp	r1, #128	; 0x80
 80108fe:	d0f6      	beq.n	80108ee <GPIO_WriteBit+0x76>
 8010900:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8010904:	d0f3      	beq.n	80108ee <GPIO_WriteBit+0x76>
 8010906:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801090a:	d0f0      	beq.n	80108ee <GPIO_WriteBit+0x76>
 801090c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010910:	d0ed      	beq.n	80108ee <GPIO_WriteBit+0x76>
 8010912:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8010916:	d0ea      	beq.n	80108ee <GPIO_WriteBit+0x76>
 8010918:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 801091c:	d0e7      	beq.n	80108ee <GPIO_WriteBit+0x76>
 801091e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8010922:	d0e4      	beq.n	80108ee <GPIO_WriteBit+0x76>
 8010924:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8010928:	d0e1      	beq.n	80108ee <GPIO_WriteBit+0x76>
 801092a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801092e:	d0de      	beq.n	80108ee <GPIO_WriteBit+0x76>
 8010930:	2301      	movs	r3, #1
 8010932:	9302      	str	r3, [sp, #8]
 8010934:	9b02      	ldr	r3, [sp, #8]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d1fc      	bne.n	8010934 <GPIO_WriteBit+0xbc>
 801093a:	e7d8      	b.n	80108ee <GPIO_WriteBit+0x76>
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
 801093c:	9b03      	ldr	r3, [sp, #12]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d1fc      	bne.n	801093c <GPIO_WriteBit+0xc4>

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 8010942:	8301      	strh	r1, [r0, #24]
 8010944:	e002      	b.n	801094c <GPIO_WriteBit+0xd4>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8010946:	2a00      	cmp	r2, #0
 8010948:	d1fb      	bne.n	8010942 <GPIO_WriteBit+0xca>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 801094a:	8341      	strh	r1, [r0, #26]
  }
}
 801094c:	b004      	add	sp, #16
 801094e:	bd10      	pop	{r4, pc}
 8010950:	40020000 	.word	0x40020000
 8010954:	40020400 	.word	0x40020400
 8010958:	8000808b 	.word	0x8000808b

0801095c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 801095c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t temp = 0x00;
  uint32_t temp_2 = 0x00;
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 801095e:	4b29      	ldr	r3, [pc, #164]	; (8010a04 <GPIO_PinAFConfig+0xa8>)
 8010960:	4298      	cmp	r0, r3
 8010962:	d102      	bne.n	801096a <GPIO_PinAFConfig+0xe>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 8010964:	290f      	cmp	r1, #15
 8010966:	d82d      	bhi.n	80109c4 <GPIO_PinAFConfig+0x68>
 8010968:	e031      	b.n	80109ce <GPIO_PinAFConfig+0x72>
{
  uint32_t temp = 0x00;
  uint32_t temp_2 = 0x00;
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 801096a:	4b27      	ldr	r3, [pc, #156]	; (8010a08 <GPIO_PinAFConfig+0xac>)
 801096c:	4298      	cmp	r0, r3
 801096e:	d0f9      	beq.n	8010964 <GPIO_PinAFConfig+0x8>
 8010970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010974:	4298      	cmp	r0, r3
 8010976:	d0f5      	beq.n	8010964 <GPIO_PinAFConfig+0x8>
 8010978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801097c:	4298      	cmp	r0, r3
 801097e:	d0f1      	beq.n	8010964 <GPIO_PinAFConfig+0x8>
 8010980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010984:	4298      	cmp	r0, r3
 8010986:	d0ed      	beq.n	8010964 <GPIO_PinAFConfig+0x8>
 8010988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801098c:	4298      	cmp	r0, r3
 801098e:	d0e9      	beq.n	8010964 <GPIO_PinAFConfig+0x8>
 8010990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010994:	4298      	cmp	r0, r3
 8010996:	d0e5      	beq.n	8010964 <GPIO_PinAFConfig+0x8>
 8010998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801099c:	4298      	cmp	r0, r3
 801099e:	d0e1      	beq.n	8010964 <GPIO_PinAFConfig+0x8>
 80109a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80109a4:	4298      	cmp	r0, r3
 80109a6:	d0dd      	beq.n	8010964 <GPIO_PinAFConfig+0x8>
 80109a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80109ac:	4298      	cmp	r0, r3
 80109ae:	d0d9      	beq.n	8010964 <GPIO_PinAFConfig+0x8>
 80109b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80109b4:	4298      	cmp	r0, r3
 80109b6:	d0d5      	beq.n	8010964 <GPIO_PinAFConfig+0x8>
 80109b8:	2301      	movs	r3, #1
 80109ba:	9301      	str	r3, [sp, #4]
 80109bc:	9b01      	ldr	r3, [sp, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d1fc      	bne.n	80109bc <GPIO_PinAFConfig+0x60>
 80109c2:	e7cf      	b.n	8010964 <GPIO_PinAFConfig+0x8>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 80109c4:	2301      	movs	r3, #1
 80109c6:	9302      	str	r3, [sp, #8]
 80109c8:	9b02      	ldr	r3, [sp, #8]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d1fc      	bne.n	80109c8 <GPIO_PinAFConfig+0x6c>
  assert_param(IS_GPIO_AF(GPIO_AF));
 80109ce:	2a0f      	cmp	r2, #15
 80109d0:	d904      	bls.n	80109dc <GPIO_PinAFConfig+0x80>
 80109d2:	2301      	movs	r3, #1
 80109d4:	9303      	str	r3, [sp, #12]
 80109d6:	9b03      	ldr	r3, [sp, #12]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d1fc      	bne.n	80109d6 <GPIO_PinAFConfig+0x7a>
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80109dc:	f001 0407 	and.w	r4, r1, #7
 80109e0:	08c9      	lsrs	r1, r1, #3
 80109e2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80109e6:	00a3      	lsls	r3, r4, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80109e8:	210f      	movs	r1, #15
 80109ea:	6a04      	ldr	r4, [r0, #32]
 80109ec:	4099      	lsls	r1, r3
 80109ee:	ea24 0101 	bic.w	r1, r4, r1
 80109f2:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80109f4:	6a01      	ldr	r1, [r0, #32]
 80109f6:	fa02 f303 	lsl.w	r3, r2, r3
 80109fa:	430b      	orrs	r3, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80109fc:	6203      	str	r3, [r0, #32]
}
 80109fe:	b004      	add	sp, #16
 8010a00:	bd10      	pop	{r4, pc}
 8010a02:	bf00      	nop
 8010a04:	40020000 	.word	0x40020000
 8010a08:	40020400 	.word	0x40020400

08010a0c <RCC_PLLI2SConfig>:
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 8010a0c:	f1a0 03c0 	sub.w	r3, r0, #192	; 0xc0
 8010a10:	2bf0      	cmp	r3, #240	; 0xf0
  * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
{
 8010a12:	b084      	sub	sp, #16
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 8010a14:	d803      	bhi.n	8010a1e <RCC_PLLI2SConfig+0x12>
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 8010a16:	1e8b      	subs	r3, r1, #2
 8010a18:	2b0d      	cmp	r3, #13
 8010a1a:	d806      	bhi.n	8010a2a <RCC_PLLI2SConfig+0x1e>
 8010a1c:	e00a      	b.n	8010a34 <RCC_PLLI2SConfig+0x28>
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 8010a1e:	2301      	movs	r3, #1
 8010a20:	9301      	str	r3, [sp, #4]
 8010a22:	9b01      	ldr	r3, [sp, #4]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d1fc      	bne.n	8010a22 <RCC_PLLI2SConfig+0x16>
 8010a28:	e7f5      	b.n	8010a16 <RCC_PLLI2SConfig+0xa>
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	9302      	str	r3, [sp, #8]
 8010a2e:	9b02      	ldr	r3, [sp, #8]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d1fc      	bne.n	8010a2e <RCC_PLLI2SConfig+0x22>
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 8010a34:	1e93      	subs	r3, r2, #2
 8010a36:	2b05      	cmp	r3, #5
 8010a38:	d904      	bls.n	8010a44 <RCC_PLLI2SConfig+0x38>
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	9303      	str	r3, [sp, #12]
 8010a3e:	9b03      	ldr	r3, [sp, #12]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d1fc      	bne.n	8010a3e <RCC_PLLI2SConfig+0x32>

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 8010a44:	0712      	lsls	r2, r2, #28
 8010a46:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8010a4a:	4b03      	ldr	r3, [pc, #12]	; (8010a58 <RCC_PLLI2SConfig+0x4c>)
 8010a4c:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8010a50:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
}
 8010a54:	b004      	add	sp, #16
 8010a56:	4770      	bx	lr
 8010a58:	40023800 	.word	0x40023800

08010a5c <RCC_PLLI2SCmd>:
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010a5c:	2801      	cmp	r0, #1
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8010a5e:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010a60:	d803      	bhi.n	8010a6a <RCC_PLLI2SCmd+0xe>
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8010a62:	4b05      	ldr	r3, [pc, #20]	; (8010a78 <RCC_PLLI2SCmd+0x1c>)
 8010a64:	6018      	str	r0, [r3, #0]
}
 8010a66:	b002      	add	sp, #8
 8010a68:	4770      	bx	lr
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	9301      	str	r3, [sp, #4]
 8010a6e:	9b01      	ldr	r3, [sp, #4]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d1fc      	bne.n	8010a6e <RCC_PLLI2SCmd+0x12>
 8010a74:	e7f5      	b.n	8010a62 <RCC_PLLI2SCmd+0x6>
 8010a76:	bf00      	nop
 8010a78:	42470068 	.word	0x42470068

08010a7c <RCC_PLLSAIConfig>:
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 8010a7c:	f1a0 03c0 	sub.w	r3, r0, #192	; 0xc0
 8010a80:	2bf0      	cmp	r3, #240	; 0xf0
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 8010a82:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 8010a84:	d803      	bhi.n	8010a8e <RCC_PLLSAIConfig+0x12>
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 8010a86:	1e93      	subs	r3, r2, #2
 8010a88:	2b05      	cmp	r3, #5
 8010a8a:	d806      	bhi.n	8010a9a <RCC_PLLSAIConfig+0x1e>
 8010a8c:	e00a      	b.n	8010aa4 <RCC_PLLSAIConfig+0x28>
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 8010a8e:	2301      	movs	r3, #1
 8010a90:	9300      	str	r3, [sp, #0]
 8010a92:	9b00      	ldr	r3, [sp, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d1fc      	bne.n	8010a92 <RCC_PLLSAIConfig+0x16>
 8010a98:	e7f5      	b.n	8010a86 <RCC_PLLSAIConfig+0xa>
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	9301      	str	r3, [sp, #4]
 8010a9e:	9b01      	ldr	r3, [sp, #4]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d1fc      	bne.n	8010a9e <RCC_PLLSAIConfig+0x22>

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8010aa4:	0712      	lsls	r2, r2, #28
 8010aa6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8010aaa:	4b03      	ldr	r3, [pc, #12]	; (8010ab8 <RCC_PLLSAIConfig+0x3c>)
 8010aac:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8010ab0:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
}
 8010ab4:	b002      	add	sp, #8
 8010ab6:	4770      	bx	lr
 8010ab8:	40023800 	.word	0x40023800

08010abc <RCC_PLLSAICmd>:
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010abc:	2801      	cmp	r0, #1
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 8010abe:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010ac0:	d803      	bhi.n	8010aca <RCC_PLLSAICmd+0xe>
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8010ac2:	4b05      	ldr	r3, [pc, #20]	; (8010ad8 <RCC_PLLSAICmd+0x1c>)
 8010ac4:	6018      	str	r0, [r3, #0]
}
 8010ac6:	b002      	add	sp, #8
 8010ac8:	4770      	bx	lr
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010aca:	2301      	movs	r3, #1
 8010acc:	9301      	str	r3, [sp, #4]
 8010ace:	9b01      	ldr	r3, [sp, #4]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d1fc      	bne.n	8010ace <RCC_PLLSAICmd+0x12>
 8010ad4:	e7f5      	b.n	8010ac2 <RCC_PLLSAICmd+0x6>
 8010ad6:	bf00      	nop
 8010ad8:	42470070 	.word	0x42470070

08010adc <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8010adc:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8010ade:	4a23      	ldr	r2, [pc, #140]	; (8010b6c <RCC_GetClocksFreq+0x90>)
 8010ae0:	6893      	ldr	r3, [r2, #8]

  switch (tmp)
 8010ae2:	f003 030c 	and.w	r3, r3, #12
 8010ae6:	2b04      	cmp	r3, #4
 8010ae8:	d003      	beq.n	8010af2 <RCC_GetClocksFreq+0x16>
 8010aea:	2b08      	cmp	r3, #8
 8010aec:	d006      	beq.n	8010afc <RCC_GetClocksFreq+0x20>
 8010aee:	4b20      	ldr	r3, [pc, #128]	; (8010b70 <RCC_GetClocksFreq+0x94>)
 8010af0:	e024      	b.n	8010b3c <RCC_GetClocksFreq+0x60>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8010af2:	4b20      	ldr	r3, [pc, #128]	; (8010b74 <RCC_GetClocksFreq+0x98>)
 8010af4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010af6:	4b20      	ldr	r3, [pc, #128]	; (8010b78 <RCC_GetClocksFreq+0x9c>)
 8010af8:	4353      	muls	r3, r2
 8010afa:	e01f      	b.n	8010b3c <RCC_GetClocksFreq+0x60>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8010afc:	6851      	ldr	r1, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010afe:	6853      	ldr	r3, [r2, #4]
      
      if (pllsource != 0)
 8010b00:	0249      	lsls	r1, r1, #9

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      
      if (pllsource != 0)
 8010b06:	d50a      	bpl.n	8010b1e <RCC_GetClocksFreq+0x42>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8010b08:	491a      	ldr	r1, [pc, #104]	; (8010b74 <RCC_GetClocksFreq+0x98>)
 8010b0a:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8010b0c:	6852      	ldr	r2, [r2, #4]
 8010b0e:	491a      	ldr	r1, [pc, #104]	; (8010b78 <RCC_GetClocksFreq+0x9c>)
 8010b10:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8010b14:	4361      	muls	r1, r4
 8010b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8010b1a:	4353      	muls	r3, r2
 8010b1c:	e006      	b.n	8010b2c <RCC_GetClocksFreq+0x50>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8010b1e:	6851      	ldr	r1, [r2, #4]
 8010b20:	4a13      	ldr	r2, [pc, #76]	; (8010b70 <RCC_GetClocksFreq+0x94>)
 8010b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b26:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8010b2a:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8010b2c:	4a0f      	ldr	r2, [pc, #60]	; (8010b6c <RCC_GetClocksFreq+0x90>)
 8010b2e:	6852      	ldr	r2, [r2, #4]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8010b30:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8010b34:	3201      	adds	r2, #1
 8010b36:	0052      	lsls	r2, r2, #1
 8010b38:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8010b3c:	4a0b      	ldr	r2, [pc, #44]	; (8010b6c <RCC_GetClocksFreq+0x90>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8010b3e:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8010b40:	6893      	ldr	r3, [r2, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8010b42:	490e      	ldr	r1, [pc, #56]	; (8010b7c <RCC_GetClocksFreq+0xa0>)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8010b44:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8010b48:	5ccc      	ldrb	r4, [r1, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8010b4a:	6803      	ldr	r3, [r0, #0]
 8010b4c:	40e3      	lsrs	r3, r4
 8010b4e:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8010b50:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 8010b52:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8010b56:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8010b58:	fa23 f404 	lsr.w	r4, r3, r4
 8010b5c:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8010b5e:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
 8010b60:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 8010b64:	5c8a      	ldrb	r2, [r1, r2]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8010b66:	40d3      	lsrs	r3, r2
 8010b68:	60c3      	str	r3, [r0, #12]
 8010b6a:	bd10      	pop	{r4, pc}
 8010b6c:	40023800 	.word	0x40023800
 8010b70:	00f42400 	.word	0x00f42400
 8010b74:	08004000 	.word	0x08004000
 8010b78:	000f4240 	.word	0x000f4240
 8010b7c:	10002390 	.word	0x10002390

08010b80 <RCC_SAIPLLI2SClkDivConfig>:
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
 8010b80:	3801      	subs	r0, #1
 8010b82:	281f      	cmp	r0, #31
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
 8010b84:	b082      	sub	sp, #8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
 8010b86:	d809      	bhi.n	8010b9c <RCC_SAIPLLI2SClkDivConfig+0x1c>
  
  tmpreg = RCC->DCKCFGR;
 8010b88:	4a07      	ldr	r2, [pc, #28]	; (8010ba8 <RCC_SAIPLLI2SClkDivConfig+0x28>)
 8010b8a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8010b8e:	f023 031f 	bic.w	r3, r3, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8010b92:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8010b94:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
}
 8010b98:	b002      	add	sp, #8
 8010b9a:	4770      	bx	lr
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	9301      	str	r3, [sp, #4]
 8010ba0:	9b01      	ldr	r3, [sp, #4]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d1fc      	bne.n	8010ba0 <RCC_SAIPLLI2SClkDivConfig+0x20>
 8010ba6:	e7ef      	b.n	8010b88 <RCC_SAIPLLI2SClkDivConfig+0x8>
 8010ba8:	40023800 	.word	0x40023800

08010bac <RCC_SAIPLLSAIClkDivConfig>:
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
 8010bac:	3801      	subs	r0, #1
 8010bae:	281f      	cmp	r0, #31
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
 8010bb0:	b082      	sub	sp, #8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
 8010bb2:	d80a      	bhi.n	8010bca <RCC_SAIPLLSAIClkDivConfig+0x1e>
  
  tmpreg = RCC->DCKCFGR;
 8010bb4:	4a08      	ldr	r2, [pc, #32]	; (8010bd8 <RCC_SAIPLLSAIClkDivConfig+0x2c>)
 8010bb6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8010bba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8010bbe:	ea43 2000 	orr.w	r0, r3, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8010bc2:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
}
 8010bc6:	b002      	add	sp, #8
 8010bc8:	4770      	bx	lr
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
 8010bca:	2301      	movs	r3, #1
 8010bcc:	9301      	str	r3, [sp, #4]
 8010bce:	9b01      	ldr	r3, [sp, #4]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d1fc      	bne.n	8010bce <RCC_SAIPLLSAIClkDivConfig+0x22>
 8010bd4:	e7ee      	b.n	8010bb4 <RCC_SAIPLLSAIClkDivConfig+0x8>
 8010bd6:	bf00      	nop
 8010bd8:	40023800 	.word	0x40023800

08010bdc <RCC_SAIBlockACLKConfig>:
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
 8010bdc:	f430 1380 	bics.w	r3, r0, #1048576	; 0x100000
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
 8010be0:	b082      	sub	sp, #8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
 8010be2:	d109      	bne.n	8010bf8 <RCC_SAIBlockACLKConfig+0x1c>
  
  tmpreg = RCC->DCKCFGR;
 8010be4:	4a09      	ldr	r2, [pc, #36]	; (8010c0c <RCC_SAIBlockACLKConfig+0x30>)
 8010be6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8010bea:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8010bee:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8010bf0:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
}
 8010bf4:	b002      	add	sp, #8
 8010bf6:	4770      	bx	lr
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
 8010bf8:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 8010bfc:	d0f2      	beq.n	8010be4 <RCC_SAIBlockACLKConfig+0x8>
 8010bfe:	2301      	movs	r3, #1
 8010c00:	9301      	str	r3, [sp, #4]
 8010c02:	9b01      	ldr	r3, [sp, #4]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d1fc      	bne.n	8010c02 <RCC_SAIBlockACLKConfig+0x26>
 8010c08:	e7ec      	b.n	8010be4 <RCC_SAIBlockACLKConfig+0x8>
 8010c0a:	bf00      	nop
 8010c0c:	40023800 	.word	0x40023800

08010c10 <RCC_SAIBlockBCLKConfig>:
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
 8010c10:	f430 0380 	bics.w	r3, r0, #4194304	; 0x400000
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
 8010c14:	b082      	sub	sp, #8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
 8010c16:	d109      	bne.n	8010c2c <RCC_SAIBlockBCLKConfig+0x1c>
  
  tmpreg = RCC->DCKCFGR;
 8010c18:	4a09      	ldr	r2, [pc, #36]	; (8010c40 <RCC_SAIBlockBCLKConfig+0x30>)
 8010c1a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 8010c1e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 8010c22:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8010c24:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
}
 8010c28:	b002      	add	sp, #8
 8010c2a:	4770      	bx	lr
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
 8010c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8010c30:	d0f2      	beq.n	8010c18 <RCC_SAIBlockBCLKConfig+0x8>
 8010c32:	2301      	movs	r3, #1
 8010c34:	9301      	str	r3, [sp, #4]
 8010c36:	9b01      	ldr	r3, [sp, #4]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d1fc      	bne.n	8010c36 <RCC_SAIBlockBCLKConfig+0x26>
 8010c3c:	e7ec      	b.n	8010c18 <RCC_SAIBlockBCLKConfig+0x8>
 8010c3e:	bf00      	nop
 8010c40:	40023800 	.word	0x40023800

08010c44 <RCC_AHB1PeriphClockCmd>:
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8010c44:	4b0f      	ldr	r3, [pc, #60]	; (8010c84 <RCC_AHB1PeriphClockCmd+0x40>)
 8010c46:	4003      	ands	r3, r0
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8010c48:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8010c4a:	b92b      	cbnz	r3, 8010c58 <RCC_AHB1PeriphClockCmd+0x14>
 8010c4c:	b120      	cbz	r0, 8010c58 <RCC_AHB1PeriphClockCmd+0x14>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010c4e:	2901      	cmp	r1, #1
 8010c50:	d90f      	bls.n	8010c72 <RCC_AHB1PeriphClockCmd+0x2e>
 8010c52:	2301      	movs	r3, #1
 8010c54:	9301      	str	r3, [sp, #4]
 8010c56:	e005      	b.n	8010c64 <RCC_AHB1PeriphClockCmd+0x20>
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8010c58:	2301      	movs	r3, #1
 8010c5a:	9300      	str	r3, [sp, #0]
 8010c5c:	9b00      	ldr	r3, [sp, #0]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d1fc      	bne.n	8010c5c <RCC_AHB1PeriphClockCmd+0x18>
 8010c62:	e7f4      	b.n	8010c4e <RCC_AHB1PeriphClockCmd+0xa>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010c64:	9b01      	ldr	r3, [sp, #4]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d1fc      	bne.n	8010c64 <RCC_AHB1PeriphClockCmd+0x20>
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8010c6a:	4a07      	ldr	r2, [pc, #28]	; (8010c88 <RCC_AHB1PeriphClockCmd+0x44>)
 8010c6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010c6e:	4318      	orrs	r0, r3
 8010c70:	e005      	b.n	8010c7e <RCC_AHB1PeriphClockCmd+0x3a>
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8010c72:	2900      	cmp	r1, #0
 8010c74:	d1f9      	bne.n	8010c6a <RCC_AHB1PeriphClockCmd+0x26>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8010c76:	4a04      	ldr	r2, [pc, #16]	; (8010c88 <RCC_AHB1PeriphClockCmd+0x44>)
 8010c78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010c7a:	ea23 0000 	bic.w	r0, r3, r0
 8010c7e:	6310      	str	r0, [r2, #48]	; 0x30
  }
}
 8010c80:	b002      	add	sp, #8
 8010c82:	4770      	bx	lr
 8010c84:	810be800 	.word	0x810be800
 8010c88:	40023800 	.word	0x40023800

08010c8c <RCC_APB1PeriphClockCmd>:
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
 8010c8c:	4b0f      	ldr	r3, [pc, #60]	; (8010ccc <RCC_APB1PeriphClockCmd+0x40>)
 8010c8e:	4003      	ands	r3, r0
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8010c90:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
 8010c92:	b92b      	cbnz	r3, 8010ca0 <RCC_APB1PeriphClockCmd+0x14>
 8010c94:	b120      	cbz	r0, 8010ca0 <RCC_APB1PeriphClockCmd+0x14>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010c96:	2901      	cmp	r1, #1
 8010c98:	d90f      	bls.n	8010cba <RCC_APB1PeriphClockCmd+0x2e>
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	9301      	str	r3, [sp, #4]
 8010c9e:	e005      	b.n	8010cac <RCC_APB1PeriphClockCmd+0x20>
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	9300      	str	r3, [sp, #0]
 8010ca4:	9b00      	ldr	r3, [sp, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d1fc      	bne.n	8010ca4 <RCC_APB1PeriphClockCmd+0x18>
 8010caa:	e7f4      	b.n	8010c96 <RCC_APB1PeriphClockCmd+0xa>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010cac:	9b01      	ldr	r3, [sp, #4]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1fc      	bne.n	8010cac <RCC_APB1PeriphClockCmd+0x20>

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8010cb2:	4a07      	ldr	r2, [pc, #28]	; (8010cd0 <RCC_APB1PeriphClockCmd+0x44>)
 8010cb4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010cb6:	4318      	orrs	r0, r3
 8010cb8:	e005      	b.n	8010cc6 <RCC_APB1PeriphClockCmd+0x3a>
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8010cba:	2900      	cmp	r1, #0
 8010cbc:	d1f9      	bne.n	8010cb2 <RCC_APB1PeriphClockCmd+0x26>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8010cbe:	4a04      	ldr	r2, [pc, #16]	; (8010cd0 <RCC_APB1PeriphClockCmd+0x44>)
 8010cc0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010cc2:	ea23 0000 	bic.w	r0, r3, r0
 8010cc6:	6410      	str	r0, [r2, #64]	; 0x40
  }
}
 8010cc8:	b002      	add	sp, #8
 8010cca:	4770      	bx	lr
 8010ccc:	09013600 	.word	0x09013600
 8010cd0:	40023800 	.word	0x40023800

08010cd4 <RCC_APB2PeriphClockCmd>:
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 8010cd4:	4b0f      	ldr	r3, [pc, #60]	; (8010d14 <RCC_APB2PeriphClockCmd+0x40>)
 8010cd6:	4003      	ands	r3, r0
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8010cd8:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 8010cda:	b92b      	cbnz	r3, 8010ce8 <RCC_APB2PeriphClockCmd+0x14>
 8010cdc:	b120      	cbz	r0, 8010ce8 <RCC_APB2PeriphClockCmd+0x14>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010cde:	2901      	cmp	r1, #1
 8010ce0:	d90f      	bls.n	8010d02 <RCC_APB2PeriphClockCmd+0x2e>
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	9301      	str	r3, [sp, #4]
 8010ce6:	e005      	b.n	8010cf4 <RCC_APB2PeriphClockCmd+0x20>
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 8010ce8:	2301      	movs	r3, #1
 8010cea:	9300      	str	r3, [sp, #0]
 8010cec:	9b00      	ldr	r3, [sp, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d1fc      	bne.n	8010cec <RCC_APB2PeriphClockCmd+0x18>
 8010cf2:	e7f4      	b.n	8010cde <RCC_APB2PeriphClockCmd+0xa>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010cf4:	9b01      	ldr	r3, [sp, #4]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d1fc      	bne.n	8010cf4 <RCC_APB2PeriphClockCmd+0x20>

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8010cfa:	4a07      	ldr	r2, [pc, #28]	; (8010d18 <RCC_APB2PeriphClockCmd+0x44>)
 8010cfc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010cfe:	4318      	orrs	r0, r3
 8010d00:	e005      	b.n	8010d0e <RCC_APB2PeriphClockCmd+0x3a>
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8010d02:	2900      	cmp	r1, #0
 8010d04:	d1f9      	bne.n	8010cfa <RCC_APB2PeriphClockCmd+0x26>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8010d06:	4a04      	ldr	r2, [pc, #16]	; (8010d18 <RCC_APB2PeriphClockCmd+0x44>)
 8010d08:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010d0a:	ea23 0000 	bic.w	r0, r3, r0
 8010d0e:	6450      	str	r0, [r2, #68]	; 0x44
  }
}
 8010d10:	b002      	add	sp, #8
 8010d12:	4770      	bx	lr
 8010d14:	fb8880cc 	.word	0xfb8880cc
 8010d18:	40023800 	.word	0x40023800

08010d1c <RCC_APB1PeriphResetCmd>:
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 8010d1c:	4b0f      	ldr	r3, [pc, #60]	; (8010d5c <RCC_APB1PeriphResetCmd+0x40>)
 8010d1e:	4003      	ands	r3, r0
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8010d20:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 8010d22:	b92b      	cbnz	r3, 8010d30 <RCC_APB1PeriphResetCmd+0x14>
 8010d24:	b120      	cbz	r0, 8010d30 <RCC_APB1PeriphResetCmd+0x14>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010d26:	2901      	cmp	r1, #1
 8010d28:	d90f      	bls.n	8010d4a <RCC_APB1PeriphResetCmd+0x2e>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	9301      	str	r3, [sp, #4]
 8010d2e:	e005      	b.n	8010d3c <RCC_APB1PeriphResetCmd+0x20>
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 8010d30:	2301      	movs	r3, #1
 8010d32:	9300      	str	r3, [sp, #0]
 8010d34:	9b00      	ldr	r3, [sp, #0]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d1fc      	bne.n	8010d34 <RCC_APB1PeriphResetCmd+0x18>
 8010d3a:	e7f4      	b.n	8010d26 <RCC_APB1PeriphResetCmd+0xa>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010d3c:	9b01      	ldr	r3, [sp, #4]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d1fc      	bne.n	8010d3c <RCC_APB1PeriphResetCmd+0x20>
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8010d42:	4a07      	ldr	r2, [pc, #28]	; (8010d60 <RCC_APB1PeriphResetCmd+0x44>)
 8010d44:	6a13      	ldr	r3, [r2, #32]
 8010d46:	4318      	orrs	r0, r3
 8010d48:	e005      	b.n	8010d56 <RCC_APB1PeriphResetCmd+0x3a>
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8010d4a:	2900      	cmp	r1, #0
 8010d4c:	d1f9      	bne.n	8010d42 <RCC_APB1PeriphResetCmd+0x26>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8010d4e:	4a04      	ldr	r2, [pc, #16]	; (8010d60 <RCC_APB1PeriphResetCmd+0x44>)
 8010d50:	6a13      	ldr	r3, [r2, #32]
 8010d52:	ea23 0000 	bic.w	r0, r3, r0
 8010d56:	6210      	str	r0, [r2, #32]
  }
}
 8010d58:	b002      	add	sp, #8
 8010d5a:	4770      	bx	lr
 8010d5c:	09013600 	.word	0x09013600
 8010d60:	40023800 	.word	0x40023800

08010d64 <RCC_APB2PeriphResetCmd>:
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
 8010d64:	4b0f      	ldr	r3, [pc, #60]	; (8010da4 <RCC_APB2PeriphResetCmd+0x40>)
 8010d66:	4003      	ands	r3, r0
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8010d68:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
 8010d6a:	b92b      	cbnz	r3, 8010d78 <RCC_APB2PeriphResetCmd+0x14>
 8010d6c:	b120      	cbz	r0, 8010d78 <RCC_APB2PeriphResetCmd+0x14>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010d6e:	2901      	cmp	r1, #1
 8010d70:	d90f      	bls.n	8010d92 <RCC_APB2PeriphResetCmd+0x2e>
 8010d72:	2301      	movs	r3, #1
 8010d74:	9301      	str	r3, [sp, #4]
 8010d76:	e005      	b.n	8010d84 <RCC_APB2PeriphResetCmd+0x20>
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
 8010d78:	2301      	movs	r3, #1
 8010d7a:	9300      	str	r3, [sp, #0]
 8010d7c:	9b00      	ldr	r3, [sp, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d1fc      	bne.n	8010d7c <RCC_APB2PeriphResetCmd+0x18>
 8010d82:	e7f4      	b.n	8010d6e <RCC_APB2PeriphResetCmd+0xa>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010d84:	9b01      	ldr	r3, [sp, #4]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d1fc      	bne.n	8010d84 <RCC_APB2PeriphResetCmd+0x20>
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8010d8a:	4a07      	ldr	r2, [pc, #28]	; (8010da8 <RCC_APB2PeriphResetCmd+0x44>)
 8010d8c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8010d8e:	4318      	orrs	r0, r3
 8010d90:	e005      	b.n	8010d9e <RCC_APB2PeriphResetCmd+0x3a>
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8010d92:	2900      	cmp	r1, #0
 8010d94:	d1f9      	bne.n	8010d8a <RCC_APB2PeriphResetCmd+0x26>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8010d96:	4a04      	ldr	r2, [pc, #16]	; (8010da8 <RCC_APB2PeriphResetCmd+0x44>)
 8010d98:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8010d9a:	ea23 0000 	bic.w	r0, r3, r0
 8010d9e:	6250      	str	r0, [r2, #36]	; 0x24
  }
}
 8010da0:	b002      	add	sp, #8
 8010da2:	4770      	bx	lr
 8010da4:	fb8886cc 	.word	0xfb8886cc
 8010da8:	40023800 	.word	0x40023800

08010dac <RCC_GetFlagStatus>:
  uint32_t tmp = 0;
  uint32_t statusreg = 0;
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));
 8010dac:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
 8010db0:	b2db      	uxtb	r3, r3
 8010db2:	2b1c      	cmp	r3, #28
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8010db4:	b082      	sub	sp, #8
  uint32_t tmp = 0;
  uint32_t statusreg = 0;
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));
 8010db6:	d80a      	bhi.n	8010dce <RCC_GetFlagStatus+0x22>
 8010db8:	4a12      	ldr	r2, [pc, #72]	; (8010e04 <RCC_GetFlagStatus+0x58>)
 8010dba:	fa22 f303 	lsr.w	r3, r2, r3
 8010dbe:	07db      	lsls	r3, r3, #31
 8010dc0:	d505      	bpl.n	8010dce <RCC_GetFlagStatus+0x22>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8010dc2:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8010dc4:	2a01      	cmp	r2, #1
 8010dc6:	4b10      	ldr	r3, [pc, #64]	; (8010e08 <RCC_GetFlagStatus+0x5c>)
 8010dc8:	d10f      	bne.n	8010dea <RCC_GetFlagStatus+0x3e>
  {
    statusreg = RCC->CR;
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	e011      	b.n	8010df2 <RCC_GetFlagStatus+0x46>
  uint32_t tmp = 0;
  uint32_t statusreg = 0;
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));
 8010dce:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8010dd2:	2b41      	cmp	r3, #65	; 0x41
 8010dd4:	d0f5      	beq.n	8010dc2 <RCC_GetFlagStatus+0x16>
 8010dd6:	f1a0 0379 	sub.w	r3, r0, #121	; 0x79
 8010dda:	2b06      	cmp	r3, #6
 8010ddc:	d9f1      	bls.n	8010dc2 <RCC_GetFlagStatus+0x16>
 8010dde:	2301      	movs	r3, #1
 8010de0:	9301      	str	r3, [sp, #4]
 8010de2:	9b01      	ldr	r3, [sp, #4]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d1fc      	bne.n	8010de2 <RCC_GetFlagStatus+0x36>
 8010de8:	e7eb      	b.n	8010dc2 <RCC_GetFlagStatus+0x16>
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8010dea:	2a02      	cmp	r2, #2
  {
    statusreg = RCC->BDCR;
 8010dec:	bf0c      	ite	eq
 8010dee:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8010df0:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8010df2:	f000 001f 	and.w	r0, r0, #31
 8010df6:	fa23 f000 	lsr.w	r0, r3, r0
}
 8010dfa:	f000 0001 	and.w	r0, r0, #1
 8010dfe:	b002      	add	sp, #8
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop
 8010e04:	15010001 	.word	0x15010001
 8010e08:	40023800 	.word	0x40023800

08010e0c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8010e0c:	b570      	push	{r4, r5, r6, lr}
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8010e0e:	4e68      	ldr	r6, [pc, #416]	; (8010fb0 <USART_Init+0x1a4>)
 8010e10:	42b0      	cmp	r0, r6
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8010e12:	b08c      	sub	sp, #48	; 0x30
 8010e14:	4604      	mov	r4, r0
 8010e16:	460d      	mov	r5, r1
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8010e18:	d105      	bne.n	8010e26 <USART_Init+0x1a>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 8010e1a:	682b      	ldr	r3, [r5, #0]
 8010e1c:	4a65      	ldr	r2, [pc, #404]	; (8010fb4 <USART_Init+0x1a8>)
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	4293      	cmp	r3, r2
 8010e22:	d821      	bhi.n	8010e68 <USART_Init+0x5c>
 8010e24:	e025      	b.n	8010e72 <USART_Init+0x66>
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8010e26:	4b64      	ldr	r3, [pc, #400]	; (8010fb8 <USART_Init+0x1ac>)
 8010e28:	4298      	cmp	r0, r3
 8010e2a:	d0f6      	beq.n	8010e1a <USART_Init+0xe>
 8010e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e30:	4298      	cmp	r0, r3
 8010e32:	d0f2      	beq.n	8010e1a <USART_Init+0xe>
 8010e34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e38:	4298      	cmp	r0, r3
 8010e3a:	d0ee      	beq.n	8010e1a <USART_Init+0xe>
 8010e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e40:	4298      	cmp	r0, r3
 8010e42:	d0ea      	beq.n	8010e1a <USART_Init+0xe>
 8010e44:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8010e48:	4298      	cmp	r0, r3
 8010e4a:	d0e6      	beq.n	8010e1a <USART_Init+0xe>
 8010e4c:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8010e50:	4298      	cmp	r0, r3
 8010e52:	d0e2      	beq.n	8010e1a <USART_Init+0xe>
 8010e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e58:	4298      	cmp	r0, r3
 8010e5a:	d0de      	beq.n	8010e1a <USART_Init+0xe>
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	9300      	str	r3, [sp, #0]
 8010e60:	9b00      	ldr	r3, [sp, #0]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d1fc      	bne.n	8010e60 <USART_Init+0x54>
 8010e66:	e7d8      	b.n	8010e1a <USART_Init+0xe>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 8010e68:	2301      	movs	r3, #1
 8010e6a:	9301      	str	r3, [sp, #4]
 8010e6c:	9b01      	ldr	r3, [sp, #4]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d1fc      	bne.n	8010e6c <USART_Init+0x60>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 8010e72:	88ab      	ldrh	r3, [r5, #4]
 8010e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	b123      	cbz	r3, 8010e86 <USART_Init+0x7a>
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	9302      	str	r3, [sp, #8]
 8010e80:	9b02      	ldr	r3, [sp, #8]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d1fc      	bne.n	8010e80 <USART_Init+0x74>
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 8010e86:	88e9      	ldrh	r1, [r5, #6]
 8010e88:	f421 5340 	bic.w	r3, r1, #12288	; 0x3000
 8010e8c:	b123      	cbz	r3, 8010e98 <USART_Init+0x8c>
 8010e8e:	2301      	movs	r3, #1
 8010e90:	9303      	str	r3, [sp, #12]
 8010e92:	9b03      	ldr	r3, [sp, #12]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d1fc      	bne.n	8010e92 <USART_Init+0x86>
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 8010e98:	892b      	ldrh	r3, [r5, #8]
 8010e9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010e9e:	b13a      	cbz	r2, 8010eb0 <USART_Init+0xa4>
 8010ea0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010ea4:	d004      	beq.n	8010eb0 <USART_Init+0xa4>
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	9304      	str	r3, [sp, #16]
 8010eaa:	9b04      	ldr	r3, [sp, #16]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d1fc      	bne.n	8010eaa <USART_Init+0x9e>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8010eb0:	896b      	ldrh	r3, [r5, #10]
 8010eb2:	f023 020c 	bic.w	r2, r3, #12
 8010eb6:	b91a      	cbnz	r2, 8010ec0 <USART_Init+0xb4>
 8010eb8:	b113      	cbz	r3, 8010ec0 <USART_Init+0xb4>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 8010eba:	89aa      	ldrh	r2, [r5, #12]
 8010ebc:	b932      	cbnz	r2, 8010ecc <USART_Init+0xc0>
 8010ebe:	e00f      	b.n	8010ee0 <USART_Init+0xd4>
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	9305      	str	r3, [sp, #20]
 8010ec4:	9b05      	ldr	r3, [sp, #20]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d1fc      	bne.n	8010ec4 <USART_Init+0xb8>
 8010eca:	e7f6      	b.n	8010eba <USART_Init+0xae>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 8010ecc:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 8010ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ed4:	d125      	bne.n	8010f22 <USART_Init+0x116>

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8010ed6:	42b4      	cmp	r4, r6
 8010ed8:	d002      	beq.n	8010ee0 <USART_Init+0xd4>
 8010eda:	4b37      	ldr	r3, [pc, #220]	; (8010fb8 <USART_Init+0x1ac>)
 8010edc:	429c      	cmp	r4, r3
 8010ede:	d159      	bne.n	8010f94 <USART_Init+0x188>
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8010ee0:	8a23      	ldrh	r3, [r4, #16]
 8010ee2:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8010ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8010ee8:	430b      	orrs	r3, r1
 8010eea:	8223      	strh	r3, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8010eec:	89a3      	ldrh	r3, [r4, #12]
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8010eee:	88a9      	ldrh	r1, [r5, #4]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8010ef0:	b29b      	uxth	r3, r3

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8010ef2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8010ef6:	f023 020c 	bic.w	r2, r3, #12
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8010efa:	892b      	ldrh	r3, [r5, #8]
 8010efc:	430b      	orrs	r3, r1
 8010efe:	8969      	ldrh	r1, [r5, #10]
 8010f00:	430b      	orrs	r3, r1
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	4313      	orrs	r3, r2
 8010f06:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8010f08:	8aa3      	ldrh	r3, [r4, #20]
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8010f0a:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8010f0c:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8010f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8010f12:	4313      	orrs	r3, r2
 8010f14:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8010f16:	a808      	add	r0, sp, #32
 8010f18:	f7ff fde0 	bl	8010adc <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8010f1c:	42b4      	cmp	r4, r6
 8010f1e:	d109      	bne.n	8010f34 <USART_Init+0x128>
 8010f20:	e00b      	b.n	8010f3a <USART_Init+0x12e>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 8010f22:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8010f26:	d0d6      	beq.n	8010ed6 <USART_Init+0xca>
 8010f28:	2301      	movs	r3, #1
 8010f2a:	9306      	str	r3, [sp, #24]
 8010f2c:	9b06      	ldr	r3, [sp, #24]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d1fc      	bne.n	8010f2c <USART_Init+0x120>
 8010f32:	e7d0      	b.n	8010ed6 <USART_Init+0xca>

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
 8010f34:	4b21      	ldr	r3, [pc, #132]	; (8010fbc <USART_Init+0x1b0>)
 8010f36:	429c      	cmp	r4, r3
 8010f38:	d101      	bne.n	8010f3e <USART_Init+0x132>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8010f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f3c:	e000      	b.n	8010f40 <USART_Init+0x134>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8010f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8010f40:	89a2      	ldrh	r2, [r4, #12]
 8010f42:	6829      	ldr	r1, [r5, #0]
 8010f44:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8010f48:	f04f 0219 	mov.w	r2, #25
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8010f4c:	fb02 f203 	mul.w	r2, r2, r3
 8010f50:	bf14      	ite	ne
 8010f52:	004d      	lslne	r5, r1, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8010f54:	008d      	lsleq	r5, r1, #2
 8010f56:	fbb2 f5f5 	udiv	r5, r2, r5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8010f5a:	89a2      	ldrh	r2, [r4, #12]
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8010f5c:	2664      	movs	r6, #100	; 0x64
 8010f5e:	fbb5 f0f6 	udiv	r0, r5, r6
 8010f62:	0100      	lsls	r0, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8010f64:	0901      	lsrs	r1, r0, #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8010f66:	0412      	lsls	r2, r2, #16
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8010f68:	fb06 5311 	mls	r3, r6, r1, r5

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8010f6c:	d507      	bpl.n	8010f7e <USART_Init+0x172>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8010f6e:	00d9      	lsls	r1, r3, #3
 8010f70:	3132      	adds	r1, #50	; 0x32
 8010f72:	fbb1 f2f6 	udiv	r2, r1, r6
 8010f76:	f002 0207 	and.w	r2, r2, #7
 8010f7a:	4310      	orrs	r0, r2
 8010f7c:	e006      	b.n	8010f8c <USART_Init+0x180>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8010f7e:	011a      	lsls	r2, r3, #4
 8010f80:	3232      	adds	r2, #50	; 0x32
 8010f82:	fbb2 f3f6 	udiv	r3, r2, r6
 8010f86:	f003 030f 	and.w	r3, r3, #15
 8010f8a:	4318      	orrs	r0, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8010f8c:	b280      	uxth	r0, r0
 8010f8e:	8120      	strh	r0, [r4, #8]
}
 8010f90:	b00c      	add	sp, #48	; 0x30
 8010f92:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8010f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010f98:	429c      	cmp	r4, r3
 8010f9a:	d0a1      	beq.n	8010ee0 <USART_Init+0xd4>
 8010f9c:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 8010fa0:	429c      	cmp	r4, r3
 8010fa2:	d09d      	beq.n	8010ee0 <USART_Init+0xd4>
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	9307      	str	r3, [sp, #28]
 8010fa8:	9b07      	ldr	r3, [sp, #28]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1fc      	bne.n	8010fa8 <USART_Init+0x19c>
 8010fae:	e797      	b.n	8010ee0 <USART_Init+0xd4>
 8010fb0:	40011000 	.word	0x40011000
 8010fb4:	007270df 	.word	0x007270df
 8010fb8:	40004400 	.word	0x40004400
 8010fbc:	40011400 	.word	0x40011400

08010fc0 <USART_Cmd>:
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8010fc0:	4b1d      	ldr	r3, [pc, #116]	; (8011038 <USART_Cmd+0x78>)
 8010fc2:	4298      	cmp	r0, r3
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8010fc4:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8010fc6:	d104      	bne.n	8010fd2 <USART_Cmd+0x12>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8010fc8:	2901      	cmp	r1, #1
 8010fca:	d92b      	bls.n	8011024 <USART_Cmd+0x64>
 8010fcc:	2301      	movs	r3, #1
 8010fce:	9301      	str	r3, [sp, #4]
 8010fd0:	e020      	b.n	8011014 <USART_Cmd+0x54>
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8010fd2:	4b1a      	ldr	r3, [pc, #104]	; (801103c <USART_Cmd+0x7c>)
 8010fd4:	4298      	cmp	r0, r3
 8010fd6:	d0f7      	beq.n	8010fc8 <USART_Cmd+0x8>
 8010fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010fdc:	4298      	cmp	r0, r3
 8010fde:	d0f3      	beq.n	8010fc8 <USART_Cmd+0x8>
 8010fe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010fe4:	4298      	cmp	r0, r3
 8010fe6:	d0ef      	beq.n	8010fc8 <USART_Cmd+0x8>
 8010fe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010fec:	4298      	cmp	r0, r3
 8010fee:	d0eb      	beq.n	8010fc8 <USART_Cmd+0x8>
 8010ff0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8010ff4:	4298      	cmp	r0, r3
 8010ff6:	d0e7      	beq.n	8010fc8 <USART_Cmd+0x8>
 8010ff8:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8010ffc:	4298      	cmp	r0, r3
 8010ffe:	d0e3      	beq.n	8010fc8 <USART_Cmd+0x8>
 8011000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011004:	4298      	cmp	r0, r3
 8011006:	d0df      	beq.n	8010fc8 <USART_Cmd+0x8>
 8011008:	2301      	movs	r3, #1
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	9b00      	ldr	r3, [sp, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d1fc      	bne.n	801100c <USART_Cmd+0x4c>
 8011012:	e7d9      	b.n	8010fc8 <USART_Cmd+0x8>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8011014:	9b01      	ldr	r3, [sp, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d1fc      	bne.n	8011014 <USART_Cmd+0x54>
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 801101a:	8983      	ldrh	r3, [r0, #12]
 801101c:	b29b      	uxth	r3, r3
 801101e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011022:	e006      	b.n	8011032 <USART_Cmd+0x72>
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011024:	2900      	cmp	r1, #0
 8011026:	d1f8      	bne.n	801101a <USART_Cmd+0x5a>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8011028:	8983      	ldrh	r3, [r0, #12]
 801102a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801102e:	041b      	lsls	r3, r3, #16
 8011030:	0c1b      	lsrs	r3, r3, #16
 8011032:	8183      	strh	r3, [r0, #12]
  }
}
 8011034:	b002      	add	sp, #8
 8011036:	4770      	bx	lr
 8011038:	40011000 	.word	0x40011000
 801103c:	40004400 	.word	0x40004400

08011040 <USART_SendData>:
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8011040:	4b19      	ldr	r3, [pc, #100]	; (80110a8 <USART_SendData+0x68>)
 8011042:	4298      	cmp	r0, r3
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8011044:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8011046:	d103      	bne.n	8011050 <USART_SendData+0x10>
  assert_param(IS_USART_DATA(Data)); 
 8011048:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801104c:	d221      	bcs.n	8011092 <USART_SendData+0x52>
 801104e:	e025      	b.n	801109c <USART_SendData+0x5c>
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8011050:	4b16      	ldr	r3, [pc, #88]	; (80110ac <USART_SendData+0x6c>)
 8011052:	4298      	cmp	r0, r3
 8011054:	d0f8      	beq.n	8011048 <USART_SendData+0x8>
 8011056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801105a:	4298      	cmp	r0, r3
 801105c:	d0f4      	beq.n	8011048 <USART_SendData+0x8>
 801105e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011062:	4298      	cmp	r0, r3
 8011064:	d0f0      	beq.n	8011048 <USART_SendData+0x8>
 8011066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801106a:	4298      	cmp	r0, r3
 801106c:	d0ec      	beq.n	8011048 <USART_SendData+0x8>
 801106e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8011072:	4298      	cmp	r0, r3
 8011074:	d0e8      	beq.n	8011048 <USART_SendData+0x8>
 8011076:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 801107a:	4298      	cmp	r0, r3
 801107c:	d0e4      	beq.n	8011048 <USART_SendData+0x8>
 801107e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011082:	4298      	cmp	r0, r3
 8011084:	d0e0      	beq.n	8011048 <USART_SendData+0x8>
 8011086:	2301      	movs	r3, #1
 8011088:	9300      	str	r3, [sp, #0]
 801108a:	9b00      	ldr	r3, [sp, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d1fc      	bne.n	801108a <USART_SendData+0x4a>
 8011090:	e7da      	b.n	8011048 <USART_SendData+0x8>
  assert_param(IS_USART_DATA(Data)); 
 8011092:	2301      	movs	r3, #1
 8011094:	9301      	str	r3, [sp, #4]
 8011096:	9b01      	ldr	r3, [sp, #4]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d1fc      	bne.n	8011096 <USART_SendData+0x56>
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 801109c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80110a0:	8081      	strh	r1, [r0, #4]
}
 80110a2:	b002      	add	sp, #8
 80110a4:	4770      	bx	lr
 80110a6:	bf00      	nop
 80110a8:	40011000 	.word	0x40011000
 80110ac:	40004400 	.word	0x40004400

080110b0 <USART_ReceiveData>:
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80110b0:	4b14      	ldr	r3, [pc, #80]	; (8011104 <USART_ReceiveData+0x54>)
 80110b2:	4298      	cmp	r0, r3
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80110b4:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80110b6:	d020      	beq.n	80110fa <USART_ReceiveData+0x4a>
 80110b8:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 80110bc:	4298      	cmp	r0, r3
 80110be:	d01c      	beq.n	80110fa <USART_ReceiveData+0x4a>
 80110c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80110c4:	4298      	cmp	r0, r3
 80110c6:	d018      	beq.n	80110fa <USART_ReceiveData+0x4a>
 80110c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80110cc:	4298      	cmp	r0, r3
 80110ce:	d014      	beq.n	80110fa <USART_ReceiveData+0x4a>
 80110d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80110d4:	4298      	cmp	r0, r3
 80110d6:	d010      	beq.n	80110fa <USART_ReceiveData+0x4a>
 80110d8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80110dc:	4298      	cmp	r0, r3
 80110de:	d00c      	beq.n	80110fa <USART_ReceiveData+0x4a>
 80110e0:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 80110e4:	4298      	cmp	r0, r3
 80110e6:	d008      	beq.n	80110fa <USART_ReceiveData+0x4a>
 80110e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80110ec:	4298      	cmp	r0, r3
 80110ee:	d004      	beq.n	80110fa <USART_ReceiveData+0x4a>
 80110f0:	2301      	movs	r3, #1
 80110f2:	9301      	str	r3, [sp, #4]
 80110f4:	9b01      	ldr	r3, [sp, #4]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d1fc      	bne.n	80110f4 <USART_ReceiveData+0x44>
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80110fa:	8880      	ldrh	r0, [r0, #4]
 80110fc:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
 8011100:	b002      	add	sp, #8
 8011102:	4770      	bx	lr
 8011104:	40011000 	.word	0x40011000

08011108 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8011108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
  uint32_t usartxbase = 0x00;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 801110a:	4b4b      	ldr	r3, [pc, #300]	; (8011238 <USART_ITConfig+0x130>)
 801110c:	4298      	cmp	r0, r3
 801110e:	461c      	mov	r4, r3
 8011110:	d102      	bne.n	8011118 <USART_ITConfig+0x10>
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 8011112:	2928      	cmp	r1, #40	; 0x28
 8011114:	d121      	bne.n	801115a <USART_ITConfig+0x52>
 8011116:	e055      	b.n	80111c4 <USART_ITConfig+0xbc>
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
  uint32_t usartxbase = 0x00;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8011118:	4b48      	ldr	r3, [pc, #288]	; (801123c <USART_ITConfig+0x134>)
 801111a:	4298      	cmp	r0, r3
 801111c:	d0f9      	beq.n	8011112 <USART_ITConfig+0xa>
 801111e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011122:	4298      	cmp	r0, r3
 8011124:	d0f5      	beq.n	8011112 <USART_ITConfig+0xa>
 8011126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801112a:	4298      	cmp	r0, r3
 801112c:	d0f1      	beq.n	8011112 <USART_ITConfig+0xa>
 801112e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011132:	4298      	cmp	r0, r3
 8011134:	d0ed      	beq.n	8011112 <USART_ITConfig+0xa>
 8011136:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 801113a:	4298      	cmp	r0, r3
 801113c:	d0e9      	beq.n	8011112 <USART_ITConfig+0xa>
 801113e:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8011142:	4298      	cmp	r0, r3
 8011144:	d0e5      	beq.n	8011112 <USART_ITConfig+0xa>
 8011146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801114a:	4298      	cmp	r0, r3
 801114c:	d0e1      	beq.n	8011112 <USART_ITConfig+0xa>
 801114e:	2301      	movs	r3, #1
 8011150:	9300      	str	r3, [sp, #0]
 8011152:	9b00      	ldr	r3, [sp, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d1fc      	bne.n	8011152 <USART_ITConfig+0x4a>
 8011158:	e7db      	b.n	8011112 <USART_ITConfig+0xa>
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 801115a:	f240 7327 	movw	r3, #1831	; 0x727
 801115e:	4299      	cmp	r1, r3
 8011160:	d030      	beq.n	80111c4 <USART_ITConfig+0xbc>
 8011162:	f240 6326 	movw	r3, #1574	; 0x626
 8011166:	4299      	cmp	r1, r3
 8011168:	d02c      	beq.n	80111c4 <USART_ITConfig+0xbc>
 801116a:	f240 5325 	movw	r3, #1317	; 0x525
 801116e:	4299      	cmp	r1, r3
 8011170:	d028      	beq.n	80111c4 <USART_ITConfig+0xbc>
 8011172:	f240 4324 	movw	r3, #1060	; 0x424
 8011176:	4299      	cmp	r1, r3
 8011178:	d024      	beq.n	80111c4 <USART_ITConfig+0xbc>
 801117a:	f640 0346 	movw	r3, #2118	; 0x846
 801117e:	4299      	cmp	r1, r3
 8011180:	d055      	beq.n	801122e <USART_ITConfig+0x126>
 8011182:	f640 136a 	movw	r3, #2410	; 0x96a
 8011186:	4299      	cmp	r1, r3
 8011188:	d029      	beq.n	80111de <USART_ITConfig+0xd6>
 801118a:	2960      	cmp	r1, #96	; 0x60
 801118c:	f04f 0301 	mov.w	r3, #1
 8011190:	d049      	beq.n	8011226 <USART_ITConfig+0x11e>
 8011192:	9301      	str	r3, [sp, #4]
 8011194:	9b01      	ldr	r3, [sp, #4]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d1fc      	bne.n	8011194 <USART_ITConfig+0x8c>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 801119a:	2a01      	cmp	r2, #1
 801119c:	d908      	bls.n	80111b0 <USART_ITConfig+0xa8>
 801119e:	2301      	movs	r3, #1
 80111a0:	9302      	str	r3, [sp, #8]
 80111a2:	9b02      	ldr	r3, [sp, #8]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d1fc      	bne.n	80111a2 <USART_ITConfig+0x9a>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
 80111a8:	f640 136a 	movw	r3, #2410	; 0x96a
 80111ac:	4299      	cmp	r1, r3
 80111ae:	d018      	beq.n	80111e2 <USART_ITConfig+0xda>
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80111b0:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80111b4:	2301      	movs	r3, #1
 80111b6:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80111ba:	429c      	cmp	r4, r3
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80111bc:	fa03 f101 	lsl.w	r1, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80111c0:	d109      	bne.n	80111d6 <USART_ITConfig+0xce>
 80111c2:	e006      	b.n	80111d2 <USART_ITConfig+0xca>
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
  uint32_t usartxbase = 0x00;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80111c4:	2a01      	cmp	r2, #1
 80111c6:	d8ea      	bhi.n	801119e <USART_ITConfig+0x96>
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80111c8:	f001 011f 	and.w	r1, r1, #31
 80111cc:	2301      	movs	r3, #1
 80111ce:	fa03 f101 	lsl.w	r1, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 80111d2:	300c      	adds	r0, #12
 80111d4:	e00d      	b.n	80111f2 <USART_ITConfig+0xea>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80111d6:	2c02      	cmp	r4, #2
 80111d8:	d10a      	bne.n	80111f0 <USART_ITConfig+0xe8>
  {
    usartxbase += 0x10;
 80111da:	3010      	adds	r0, #16
 80111dc:	e009      	b.n	80111f2 <USART_ITConfig+0xea>
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
  uint32_t usartxbase = 0x00;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80111de:	2a01      	cmp	r2, #1
 80111e0:	d8dd      	bhi.n	801119e <USART_ITConfig+0x96>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 80111e2:	42a0      	cmp	r0, r4
 80111e4:	d10e      	bne.n	8011204 <USART_ITConfig+0xfc>
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80111e6:	f001 011f 	and.w	r1, r1, #31
 80111ea:	2301      	movs	r3, #1
 80111ec:	fa03 f101 	lsl.w	r1, r3, r1
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80111f0:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80111f2:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 80111f4:	b10a      	cbz	r2, 80111fa <USART_ITConfig+0xf2>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80111f6:	4319      	orrs	r1, r3
 80111f8:	e001      	b.n	80111fe <USART_ITConfig+0xf6>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80111fa:	ea23 0101 	bic.w	r1, r3, r1
 80111fe:	6001      	str	r1, [r0, #0]
  }
}
 8011200:	b004      	add	sp, #16
 8011202:	bd10      	pop	{r4, pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8011204:	4b0d      	ldr	r3, [pc, #52]	; (801123c <USART_ITConfig+0x134>)
 8011206:	4298      	cmp	r0, r3
 8011208:	d0d2      	beq.n	80111b0 <USART_ITConfig+0xa8>
 801120a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801120e:	4298      	cmp	r0, r3
 8011210:	d0ce      	beq.n	80111b0 <USART_ITConfig+0xa8>
 8011212:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 8011216:	4298      	cmp	r0, r3
 8011218:	d0ca      	beq.n	80111b0 <USART_ITConfig+0xa8>
 801121a:	2301      	movs	r3, #1
 801121c:	9303      	str	r3, [sp, #12]
 801121e:	9b03      	ldr	r3, [sp, #12]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d1fc      	bne.n	801121e <USART_ITConfig+0x116>
 8011224:	e7c4      	b.n	80111b0 <USART_ITConfig+0xa8>
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
  uint32_t usartxbase = 0x00;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8011226:	2a01      	cmp	r2, #1
 8011228:	d8b9      	bhi.n	801119e <USART_ITConfig+0x96>
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 801122a:	4619      	mov	r1, r3
 801122c:	e7e0      	b.n	80111f0 <USART_ITConfig+0xe8>
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
  uint32_t usartxbase = 0x00;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 801122e:	2a01      	cmp	r2, #1
 8011230:	d8b5      	bhi.n	801119e <USART_ITConfig+0x96>
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8011232:	2140      	movs	r1, #64	; 0x40
 8011234:	e7d1      	b.n	80111da <USART_ITConfig+0xd2>
 8011236:	bf00      	nop
 8011238:	40011000 	.word	0x40011000
 801123c:	40004400 	.word	0x40004400

08011240 <USART_GetFlagStatus>:
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8011240:	4b2d      	ldr	r3, [pc, #180]	; (80112f8 <USART_GetFlagStatus+0xb8>)
 8011242:	4298      	cmp	r0, r3
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8011244:	b084      	sub	sp, #16
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8011246:	d102      	bne.n	801124e <USART_GetFlagStatus+0xe>
  assert_param(IS_USART_FLAG(USART_FLAG));
 8011248:	2901      	cmp	r1, #1
 801124a:	d121      	bne.n	8011290 <USART_GetFlagStatus+0x50>
 801124c:	e04d      	b.n	80112ea <USART_GetFlagStatus+0xaa>
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 801124e:	4a2b      	ldr	r2, [pc, #172]	; (80112fc <USART_GetFlagStatus+0xbc>)
 8011250:	4290      	cmp	r0, r2
 8011252:	d0f9      	beq.n	8011248 <USART_GetFlagStatus+0x8>
 8011254:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011258:	4290      	cmp	r0, r2
 801125a:	d0f5      	beq.n	8011248 <USART_GetFlagStatus+0x8>
 801125c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011260:	4290      	cmp	r0, r2
 8011262:	d0f1      	beq.n	8011248 <USART_GetFlagStatus+0x8>
 8011264:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011268:	4290      	cmp	r0, r2
 801126a:	d0ed      	beq.n	8011248 <USART_GetFlagStatus+0x8>
 801126c:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8011270:	4290      	cmp	r0, r2
 8011272:	d0e9      	beq.n	8011248 <USART_GetFlagStatus+0x8>
 8011274:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8011278:	4290      	cmp	r0, r2
 801127a:	d0e5      	beq.n	8011248 <USART_GetFlagStatus+0x8>
 801127c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011280:	4290      	cmp	r0, r2
 8011282:	d0e1      	beq.n	8011248 <USART_GetFlagStatus+0x8>
 8011284:	2201      	movs	r2, #1
 8011286:	9201      	str	r2, [sp, #4]
 8011288:	9a01      	ldr	r2, [sp, #4]
 801128a:	2a00      	cmp	r2, #0
 801128c:	d1fc      	bne.n	8011288 <USART_GetFlagStatus+0x48>
 801128e:	e7db      	b.n	8011248 <USART_GetFlagStatus+0x8>
  assert_param(IS_USART_FLAG(USART_FLAG));
 8011290:	2980      	cmp	r1, #128	; 0x80
 8011292:	d02a      	beq.n	80112ea <USART_GetFlagStatus+0xaa>
 8011294:	2940      	cmp	r1, #64	; 0x40
 8011296:	d028      	beq.n	80112ea <USART_GetFlagStatus+0xaa>
 8011298:	2920      	cmp	r1, #32
 801129a:	d026      	beq.n	80112ea <USART_GetFlagStatus+0xaa>
 801129c:	2910      	cmp	r1, #16
 801129e:	d024      	beq.n	80112ea <USART_GetFlagStatus+0xaa>
 80112a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80112a4:	d021      	beq.n	80112ea <USART_GetFlagStatus+0xaa>
 80112a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80112aa:	d00c      	beq.n	80112c6 <USART_GetFlagStatus+0x86>
 80112ac:	2908      	cmp	r1, #8
 80112ae:	d804      	bhi.n	80112ba <USART_GetFlagStatus+0x7a>
 80112b0:	f44f 738a 	mov.w	r3, #276	; 0x114
 80112b4:	40cb      	lsrs	r3, r1
 80112b6:	07db      	lsls	r3, r3, #31
 80112b8:	d417      	bmi.n	80112ea <USART_GetFlagStatus+0xaa>
 80112ba:	2301      	movs	r3, #1
 80112bc:	9302      	str	r3, [sp, #8]
 80112be:	9b02      	ldr	r3, [sp, #8]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d1fc      	bne.n	80112be <USART_GetFlagStatus+0x7e>
 80112c4:	e011      	b.n	80112ea <USART_GetFlagStatus+0xaa>

  /* The CTS flag is not available for UART4 and UART5 */
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 80112c6:	4298      	cmp	r0, r3
 80112c8:	d00f      	beq.n	80112ea <USART_GetFlagStatus+0xaa>
 80112ca:	4b0c      	ldr	r3, [pc, #48]	; (80112fc <USART_GetFlagStatus+0xbc>)
 80112cc:	4298      	cmp	r0, r3
 80112ce:	d00c      	beq.n	80112ea <USART_GetFlagStatus+0xaa>
 80112d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80112d4:	4298      	cmp	r0, r3
 80112d6:	d008      	beq.n	80112ea <USART_GetFlagStatus+0xaa>
 80112d8:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 80112dc:	4298      	cmp	r0, r3
 80112de:	d004      	beq.n	80112ea <USART_GetFlagStatus+0xaa>
 80112e0:	2301      	movs	r3, #1
 80112e2:	9303      	str	r3, [sp, #12]
 80112e4:	9b03      	ldr	r3, [sp, #12]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d1fc      	bne.n	80112e4 <USART_GetFlagStatus+0xa4>
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80112ea:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 80112ec:	4219      	tst	r1, r3
 80112ee:	bf14      	ite	ne
 80112f0:	2001      	movne	r0, #1
 80112f2:	2000      	moveq	r0, #0
}
 80112f4:	b004      	add	sp, #16
 80112f6:	4770      	bx	lr
 80112f8:	40011000 	.word	0x40011000
 80112fc:	40004400 	.word	0x40004400

08011300 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8011300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8011302:	4b47      	ldr	r3, [pc, #284]	; (8011420 <USART_GetITStatus+0x120>)
 8011304:	4298      	cmp	r0, r3
 8011306:	d102      	bne.n	801130e <USART_GetITStatus+0xe>
  assert_param(IS_USART_GET_IT(USART_IT)); 
 8011308:	2928      	cmp	r1, #40	; 0x28
 801130a:	d121      	bne.n	8011350 <USART_GetITStatus+0x50>
 801130c:	e064      	b.n	80113d8 <USART_GetITStatus+0xd8>
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 801130e:	4a45      	ldr	r2, [pc, #276]	; (8011424 <USART_GetITStatus+0x124>)
 8011310:	4290      	cmp	r0, r2
 8011312:	d0f9      	beq.n	8011308 <USART_GetITStatus+0x8>
 8011314:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011318:	4290      	cmp	r0, r2
 801131a:	d0f5      	beq.n	8011308 <USART_GetITStatus+0x8>
 801131c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011320:	4290      	cmp	r0, r2
 8011322:	d0f1      	beq.n	8011308 <USART_GetITStatus+0x8>
 8011324:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011328:	4290      	cmp	r0, r2
 801132a:	d0ed      	beq.n	8011308 <USART_GetITStatus+0x8>
 801132c:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8011330:	4290      	cmp	r0, r2
 8011332:	d0e9      	beq.n	8011308 <USART_GetITStatus+0x8>
 8011334:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8011338:	4290      	cmp	r0, r2
 801133a:	d0e5      	beq.n	8011308 <USART_GetITStatus+0x8>
 801133c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011340:	4290      	cmp	r0, r2
 8011342:	d0e1      	beq.n	8011308 <USART_GetITStatus+0x8>
 8011344:	2201      	movs	r2, #1
 8011346:	9201      	str	r2, [sp, #4]
 8011348:	9a01      	ldr	r2, [sp, #4]
 801134a:	2a00      	cmp	r2, #0
 801134c:	d1fc      	bne.n	8011348 <USART_GetITStatus+0x48>
 801134e:	e7db      	b.n	8011308 <USART_GetITStatus+0x8>
  assert_param(IS_USART_GET_IT(USART_IT)); 
 8011350:	f240 7227 	movw	r2, #1831	; 0x727
 8011354:	4291      	cmp	r1, r2
 8011356:	d05b      	beq.n	8011410 <USART_GetITStatus+0x110>
 8011358:	f240 6226 	movw	r2, #1574	; 0x626
 801135c:	4291      	cmp	r1, r2
 801135e:	d057      	beq.n	8011410 <USART_GetITStatus+0x110>
 8011360:	f240 5225 	movw	r2, #1317	; 0x525
 8011364:	4291      	cmp	r1, r2
 8011366:	d053      	beq.n	8011410 <USART_GetITStatus+0x110>
 8011368:	f240 4224 	movw	r2, #1060	; 0x424
 801136c:	4291      	cmp	r1, r2
 801136e:	d04f      	beq.n	8011410 <USART_GetITStatus+0x110>
 8011370:	f640 0246 	movw	r2, #2118	; 0x846
 8011374:	4291      	cmp	r1, r2
 8011376:	d015      	beq.n	80113a4 <USART_GetITStatus+0xa4>
 8011378:	f640 126a 	movw	r2, #2410	; 0x96a
 801137c:	4291      	cmp	r1, r2
 801137e:	d026      	beq.n	80113ce <USART_GetITStatus+0xce>
 8011380:	f240 3325 	movw	r3, #805	; 0x325
 8011384:	4299      	cmp	r1, r3
 8011386:	d043      	beq.n	8011410 <USART_GetITStatus+0x110>
 8011388:	f5b1 7f18 	cmp.w	r1, #608	; 0x260
 801138c:	d00d      	beq.n	80113aa <USART_GetITStatus+0xaa>
 801138e:	f421 7300 	bic.w	r3, r1, #512	; 0x200
 8011392:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8011396:	d01f      	beq.n	80113d8 <USART_GetITStatus+0xd8>
 8011398:	2301      	movs	r3, #1
 801139a:	9302      	str	r3, [sp, #8]
 801139c:	9b02      	ldr	r3, [sp, #8]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d1fc      	bne.n	801139c <USART_GetITStatus+0x9c>
 80113a2:	e019      	b.n	80113d8 <USART_GetITStatus+0xd8>
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80113a4:	2340      	movs	r3, #64	; 0x40
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
  {
    itmask &= USARTx->CR2;
 80113a6:	8a02      	ldrh	r2, [r0, #16]
 80113a8:	e001      	b.n	80113ae <USART_GetITStatus+0xae>
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80113aa:	2301      	movs	r3, #1
  {
    itmask &= USARTx->CR2;
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80113ac:	8a82      	ldrh	r2, [r0, #20]
 80113ae:	b292      	uxth	r2, r2
 80113b0:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 80113b2:	8802      	ldrh	r2, [r0, #0]
 80113b4:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80113b6:	b143      	cbz	r3, 80113ca <USART_GetITStatus+0xca>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 80113b8:	2301      	movs	r3, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 80113ba:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 80113bc:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 80113c0:	420a      	tst	r2, r1
 80113c2:	bf14      	ite	ne
 80113c4:	4618      	movne	r0, r3
 80113c6:	2000      	moveq	r0, #0
 80113c8:	e027      	b.n	801141a <USART_GetITStatus+0x11a>
  }
  else
  {
    bitstatus = RESET;
 80113ca:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
 80113cc:	e025      	b.n	801141a <USART_GetITStatus+0x11a>
  assert_param(IS_USART_GET_IT(USART_IT)); 

  /* The CTS interrupt is not available for UART4 and UART5 */ 
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 80113ce:	4298      	cmp	r0, r3
 80113d0:	d002      	beq.n	80113d8 <USART_GetITStatus+0xd8>
 80113d2:	4b14      	ldr	r3, [pc, #80]	; (8011424 <USART_GetITStatus+0x124>)
 80113d4:	4298      	cmp	r0, r3
 80113d6:	d10d      	bne.n	80113f4 <USART_GetITStatus+0xf4>
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80113d8:	f3c1 1242 	ubfx	r2, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80113dc:	f001 041f 	and.w	r4, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 80113e0:	2301      	movs	r3, #1
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80113e2:	2a01      	cmp	r2, #1
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80113e4:	fa03 f304 	lsl.w	r3, r3, r4
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80113e8:	d101      	bne.n	80113ee <USART_GetITStatus+0xee>
  {
    itmask &= USARTx->CR1;
 80113ea:	8982      	ldrh	r2, [r0, #12]
 80113ec:	e7df      	b.n	80113ae <USART_GetITStatus+0xae>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80113ee:	2a02      	cmp	r2, #2
 80113f0:	d1dc      	bne.n	80113ac <USART_GetITStatus+0xac>
 80113f2:	e7d8      	b.n	80113a6 <USART_GetITStatus+0xa6>
  assert_param(IS_USART_GET_IT(USART_IT)); 

  /* The CTS interrupt is not available for UART4 and UART5 */ 
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 80113f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80113f8:	4298      	cmp	r0, r3
 80113fa:	d0ed      	beq.n	80113d8 <USART_GetITStatus+0xd8>
 80113fc:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 8011400:	4298      	cmp	r0, r3
 8011402:	d0e9      	beq.n	80113d8 <USART_GetITStatus+0xd8>
 8011404:	2301      	movs	r3, #1
 8011406:	9303      	str	r3, [sp, #12]
 8011408:	9b03      	ldr	r3, [sp, #12]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d1fc      	bne.n	8011408 <USART_GetITStatus+0x108>
 801140e:	e7e3      	b.n	80113d8 <USART_GetITStatus+0xd8>
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8011410:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 8011414:	2301      	movs	r3, #1
 8011416:	4093      	lsls	r3, r2
 8011418:	e7e7      	b.n	80113ea <USART_GetITStatus+0xea>
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 801141a:	b004      	add	sp, #16
 801141c:	bd10      	pop	{r4, pc}
 801141e:	bf00      	nop
 8011420:	40011000 	.word	0x40011000
 8011424:	40004400 	.word	0x40004400

08011428 <SPI_I2S_DeInit>:
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8011428:	4b2c      	ldr	r3, [pc, #176]	; (80114dc <SPI_I2S_DeInit+0xb4>)
 801142a:	4298      	cmp	r0, r3
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 801142c:	b507      	push	{r0, r1, r2, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 801142e:	d019      	beq.n	8011464 <SPI_I2S_DeInit+0x3c>
 8011430:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8011434:	4298      	cmp	r0, r3
 8011436:	d039      	beq.n	80114ac <SPI_I2S_DeInit+0x84>
 8011438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801143c:	4298      	cmp	r0, r3
 801143e:	d023      	beq.n	8011488 <SPI_I2S_DeInit+0x60>
 8011440:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8011444:	4298      	cmp	r0, r3
 8011446:	d016      	beq.n	8011476 <SPI_I2S_DeInit+0x4e>
 8011448:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 801144c:	4298      	cmp	r0, r3
 801144e:	d024      	beq.n	801149a <SPI_I2S_DeInit+0x72>
 8011450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011454:	4298      	cmp	r0, r3
 8011456:	d034      	beq.n	80114c2 <SPI_I2S_DeInit+0x9a>
 8011458:	2301      	movs	r3, #1
 801145a:	9301      	str	r3, [sp, #4]
 801145c:	9b01      	ldr	r3, [sp, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d1fc      	bne.n	801145c <SPI_I2S_DeInit+0x34>
 8011462:	e038      	b.n	80114d6 <SPI_I2S_DeInit+0xae>

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8011464:	2101      	movs	r1, #1
 8011466:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801146a:	f7ff fc7b 	bl	8010d64 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 801146e:	2100      	movs	r1, #0
 8011470:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011474:	e02d      	b.n	80114d2 <SPI_I2S_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8011476:	2101      	movs	r1, #1
 8011478:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801147c:	f7ff fc72 	bl	8010d64 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8011480:	2100      	movs	r1, #0
 8011482:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8011486:	e024      	b.n	80114d2 <SPI_I2S_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8011488:	2101      	movs	r1, #1
 801148a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801148e:	f7ff fc45 	bl	8010d1c <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8011492:	2100      	movs	r1, #0
 8011494:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8011498:	e010      	b.n	80114bc <SPI_I2S_DeInit+0x94>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 801149a:	2101      	movs	r1, #1
 801149c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80114a0:	f7ff fc60 	bl	8010d64 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 80114a4:	2100      	movs	r1, #0
 80114a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80114aa:	e012      	b.n	80114d2 <SPI_I2S_DeInit+0xaa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80114ac:	2101      	movs	r1, #1
 80114ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80114b2:	f7ff fc33 	bl	8010d1c <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80114b6:	2100      	movs	r1, #0
 80114b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80114bc:	f7ff fc2e 	bl	8010d1c <RCC_APB1PeriphResetCmd>
 80114c0:	e009      	b.n	80114d6 <SPI_I2S_DeInit+0xae>
  else 
  {
    if (SPIx == SPI6)
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 80114c2:	2101      	movs	r1, #1
 80114c4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80114c8:	f7ff fc4c 	bl	8010d64 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 80114cc:	2100      	movs	r1, #0
 80114ce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80114d2:	f7ff fc47 	bl	8010d64 <RCC_APB2PeriphResetCmd>
    }
  }
}
 80114d6:	b003      	add	sp, #12
 80114d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80114dc:	40013000 	.word	0x40013000

080114e0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80114e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t tmpreg = 0;
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80114e4:	4b49      	ldr	r3, [pc, #292]	; (801160c <SPI_Init+0x12c>)
 80114e6:	4298      	cmp	r0, r3
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80114e8:	b08a      	sub	sp, #40	; 0x28
  uint16_t tmpreg = 0;
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80114ea:	d104      	bne.n	80114f6 <SPI_Init+0x16>
  
  /* Check the SPI parameters */
  assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 80114ec:	880d      	ldrh	r5, [r1, #0]
 80114ee:	f425 6380 	bic.w	r3, r5, #1024	; 0x400
 80114f2:	b9cb      	cbnz	r3, 8011528 <SPI_Init+0x48>
 80114f4:	e022      	b.n	801153c <SPI_Init+0x5c>
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
  uint16_t tmpreg = 0;
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80114f6:	4b46      	ldr	r3, [pc, #280]	; (8011610 <SPI_Init+0x130>)
 80114f8:	4298      	cmp	r0, r3
 80114fa:	d0f7      	beq.n	80114ec <SPI_Init+0xc>
 80114fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011500:	4298      	cmp	r0, r3
 8011502:	d0f3      	beq.n	80114ec <SPI_Init+0xc>
 8011504:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8011508:	4298      	cmp	r0, r3
 801150a:	d0ef      	beq.n	80114ec <SPI_Init+0xc>
 801150c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8011510:	4298      	cmp	r0, r3
 8011512:	d0eb      	beq.n	80114ec <SPI_Init+0xc>
 8011514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011518:	4298      	cmp	r0, r3
 801151a:	d0e7      	beq.n	80114ec <SPI_Init+0xc>
 801151c:	2301      	movs	r3, #1
 801151e:	9300      	str	r3, [sp, #0]
 8011520:	9b00      	ldr	r3, [sp, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d1fc      	bne.n	8011520 <SPI_Init+0x40>
 8011526:	e7e1      	b.n	80114ec <SPI_Init+0xc>
  
  /* Check the SPI parameters */
  assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 8011528:	f425 4380 	bic.w	r3, r5, #16384	; 0x4000
 801152c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011530:	d004      	beq.n	801153c <SPI_Init+0x5c>
 8011532:	2301      	movs	r3, #1
 8011534:	9301      	str	r3, [sp, #4]
 8011536:	9b01      	ldr	r3, [sp, #4]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d1fc      	bne.n	8011536 <SPI_Init+0x56>
  assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 801153c:	884b      	ldrh	r3, [r1, #2]
 801153e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011542:	d005      	beq.n	8011550 <SPI_Init+0x70>
 8011544:	b123      	cbz	r3, 8011550 <SPI_Init+0x70>
 8011546:	2201      	movs	r2, #1
 8011548:	9202      	str	r2, [sp, #8]
 801154a:	9a02      	ldr	r2, [sp, #8]
 801154c:	2a00      	cmp	r2, #0
 801154e:	d1fc      	bne.n	801154a <SPI_Init+0x6a>
  assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 8011550:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8011554:	f428 6200 	bic.w	r2, r8, #2048	; 0x800
 8011558:	b122      	cbz	r2, 8011564 <SPI_Init+0x84>
 801155a:	2201      	movs	r2, #1
 801155c:	9203      	str	r2, [sp, #12]
 801155e:	9a03      	ldr	r2, [sp, #12]
 8011560:	2a00      	cmp	r2, #0
 8011562:	d1fc      	bne.n	801155e <SPI_Init+0x7e>
  assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 8011564:	88cc      	ldrh	r4, [r1, #6]
 8011566:	f024 0202 	bic.w	r2, r4, #2
 801156a:	b122      	cbz	r2, 8011576 <SPI_Init+0x96>
 801156c:	2201      	movs	r2, #1
 801156e:	9204      	str	r2, [sp, #16]
 8011570:	9a04      	ldr	r2, [sp, #16]
 8011572:	2a00      	cmp	r2, #0
 8011574:	d1fc      	bne.n	8011570 <SPI_Init+0x90>
  assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 8011576:	890a      	ldrh	r2, [r1, #8]
 8011578:	2a01      	cmp	r2, #1
 801157a:	d904      	bls.n	8011586 <SPI_Init+0xa6>
 801157c:	2601      	movs	r6, #1
 801157e:	9605      	str	r6, [sp, #20]
 8011580:	9e05      	ldr	r6, [sp, #20]
 8011582:	2e00      	cmp	r6, #0
 8011584:	d1fc      	bne.n	8011580 <SPI_Init+0xa0>
  assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 8011586:	894f      	ldrh	r7, [r1, #10]
 8011588:	f427 7600 	bic.w	r6, r7, #512	; 0x200
 801158c:	b126      	cbz	r6, 8011598 <SPI_Init+0xb8>
 801158e:	2601      	movs	r6, #1
 8011590:	9606      	str	r6, [sp, #24]
 8011592:	9e06      	ldr	r6, [sp, #24]
 8011594:	2e00      	cmp	r6, #0
 8011596:	d1fc      	bne.n	8011592 <SPI_Init+0xb2>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 8011598:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 801159c:	f02e 0618 	bic.w	r6, lr, #24
 80115a0:	b2b6      	uxth	r6, r6
 80115a2:	b136      	cbz	r6, 80115b2 <SPI_Init+0xd2>
 80115a4:	2e20      	cmp	r6, #32
 80115a6:	d004      	beq.n	80115b2 <SPI_Init+0xd2>
 80115a8:	2601      	movs	r6, #1
 80115aa:	9607      	str	r6, [sp, #28]
 80115ac:	9e07      	ldr	r6, [sp, #28]
 80115ae:	2e00      	cmp	r6, #0
 80115b0:	d1fc      	bne.n	80115ac <SPI_Init+0xcc>
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 80115b2:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
 80115b6:	f02c 0680 	bic.w	r6, ip, #128	; 0x80
 80115ba:	b126      	cbz	r6, 80115c6 <SPI_Init+0xe6>
 80115bc:	2601      	movs	r6, #1
 80115be:	9608      	str	r6, [sp, #32]
 80115c0:	9e08      	ldr	r6, [sp, #32]
 80115c2:	2e00      	cmp	r6, #0
 80115c4:	d1fc      	bne.n	80115c0 <SPI_Init+0xe0>
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 80115c6:	8a0e      	ldrh	r6, [r1, #16]
 80115c8:	b926      	cbnz	r6, 80115d4 <SPI_Init+0xf4>
 80115ca:	2601      	movs	r6, #1
 80115cc:	9609      	str	r6, [sp, #36]	; 0x24
 80115ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80115d0:	2e00      	cmp	r6, #0
 80115d2:	d1fc      	bne.n	80115ce <SPI_Init+0xee>
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80115d4:	431d      	orrs	r5, r3
 80115d6:	ea48 0505 	orr.w	r5, r8, r5
 80115da:	432c      	orrs	r4, r5
 80115dc:	4314      	orrs	r4, r2
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80115de:	8806      	ldrh	r6, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80115e0:	ea47 0204 	orr.w	r2, r7, r4
 80115e4:	ea4e 0202 	orr.w	r2, lr, r2

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80115e8:	f406 5641 	and.w	r6, r6, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80115ec:	ea4c 0302 	orr.w	r3, ip, r2
 80115f0:	4333      	orrs	r3, r6
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80115f2:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80115f4:	8b83      	ldrh	r3, [r0, #28]
 80115f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80115fa:	041b      	lsls	r3, r3, #16
 80115fc:	0c1b      	lsrs	r3, r3, #16
 80115fe:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8011600:	8a0b      	ldrh	r3, [r1, #16]
 8011602:	8203      	strh	r3, [r0, #16]
}
 8011604:	b00a      	add	sp, #40	; 0x28
 8011606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801160a:	bf00      	nop
 801160c:	40013000 	.word	0x40013000
 8011610:	40003800 	.word	0x40003800

08011614 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8011614:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
#endif /* I2S_EXTERNAL_CLOCK_VAL */
  
  /* Check the I2S parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
 8011616:	4b5d      	ldr	r3, [pc, #372]	; (801178c <I2S_Init+0x178>)
 8011618:	4298      	cmp	r0, r3
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 801161a:	b089      	sub	sp, #36	; 0x24
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
#endif /* I2S_EXTERNAL_CLOCK_VAL */
  
  /* Check the I2S parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
 801161c:	d105      	bne.n	801162a <I2S_Init+0x16>
  assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 801161e:	880b      	ldrh	r3, [r1, #0]
 8011620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011624:	b29b      	uxth	r3, r3
 8011626:	b94b      	cbnz	r3, 801163c <I2S_Init+0x28>
 8011628:	e00d      	b.n	8011646 <I2S_Init+0x32>
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
#endif /* I2S_EXTERNAL_CLOCK_VAL */
  
  /* Check the I2S parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
 801162a:	4b59      	ldr	r3, [pc, #356]	; (8011790 <I2S_Init+0x17c>)
 801162c:	4298      	cmp	r0, r3
 801162e:	d0f6      	beq.n	801161e <I2S_Init+0xa>
 8011630:	2301      	movs	r3, #1
 8011632:	9301      	str	r3, [sp, #4]
 8011634:	9b01      	ldr	r3, [sp, #4]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d1fc      	bne.n	8011634 <I2S_Init+0x20>
 801163a:	e7f0      	b.n	801161e <I2S_Init+0xa>
  assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 801163c:	2301      	movs	r3, #1
 801163e:	9302      	str	r3, [sp, #8]
 8011640:	9b02      	ldr	r3, [sp, #8]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d1fc      	bne.n	8011640 <I2S_Init+0x2c>
  assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 8011646:	884b      	ldrh	r3, [r1, #2]
 8011648:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801164c:	b132      	cbz	r2, 801165c <I2S_Init+0x48>
 801164e:	2bb0      	cmp	r3, #176	; 0xb0
 8011650:	d004      	beq.n	801165c <I2S_Init+0x48>
 8011652:	2301      	movs	r3, #1
 8011654:	9303      	str	r3, [sp, #12]
 8011656:	9b03      	ldr	r3, [sp, #12]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d1fc      	bne.n	8011656 <I2S_Init+0x42>
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 801165c:	888a      	ldrh	r2, [r1, #4]
 801165e:	2a05      	cmp	r2, #5
 8011660:	d809      	bhi.n	8011676 <I2S_Init+0x62>
 8011662:	232b      	movs	r3, #43	; 0x2b
 8011664:	40d3      	lsrs	r3, r2
 8011666:	07da      	lsls	r2, r3, #31
 8011668:	d505      	bpl.n	8011676 <I2S_Init+0x62>
  assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 801166a:	88cb      	ldrh	r3, [r1, #6]
 801166c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011670:	b29b      	uxth	r3, r3
 8011672:	b933      	cbnz	r3, 8011682 <I2S_Init+0x6e>
 8011674:	e00a      	b.n	801168c <I2S_Init+0x78>
  
  /* Check the I2S parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
  assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 8011676:	2301      	movs	r3, #1
 8011678:	9304      	str	r3, [sp, #16]
 801167a:	9b04      	ldr	r3, [sp, #16]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d1fc      	bne.n	801167a <I2S_Init+0x66>
 8011680:	e7f3      	b.n	801166a <I2S_Init+0x56>
  assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 8011682:	2301      	movs	r3, #1
 8011684:	9305      	str	r3, [sp, #20]
 8011686:	9b05      	ldr	r3, [sp, #20]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d1fc      	bne.n	8011686 <I2S_Init+0x72>
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 801168c:	688b      	ldr	r3, [r1, #8]
 801168e:	4a41      	ldr	r2, [pc, #260]	; (8011794 <I2S_Init+0x180>)
 8011690:	f5a3 54fa 	sub.w	r4, r3, #8000	; 0x1f40
 8011694:	4294      	cmp	r4, r2
 8011696:	d906      	bls.n	80116a6 <I2S_Init+0x92>
 8011698:	2b02      	cmp	r3, #2
 801169a:	d004      	beq.n	80116a6 <I2S_Init+0x92>
 801169c:	2301      	movs	r3, #1
 801169e:	9306      	str	r3, [sp, #24]
 80116a0:	9b06      	ldr	r3, [sp, #24]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d1fc      	bne.n	80116a0 <I2S_Init+0x8c>
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 80116a6:	898b      	ldrh	r3, [r1, #12]
 80116a8:	f023 0308 	bic.w	r3, r3, #8
 80116ac:	b29b      	uxth	r3, r3
 80116ae:	b123      	cbz	r3, 80116ba <I2S_Init+0xa6>
 80116b0:	2301      	movs	r3, #1
 80116b2:	9307      	str	r3, [sp, #28]
 80116b4:	9b07      	ldr	r3, [sp, #28]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d1fc      	bne.n	80116b4 <I2S_Init+0xa0>

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80116ba:	8b83      	ldrh	r3, [r0, #28]
 80116bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80116c0:	f023 030f 	bic.w	r3, r3, #15
 80116c4:	041b      	lsls	r3, r3, #16
 80116c6:	0c1b      	lsrs	r3, r3, #16
 80116c8:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 80116ca:	2302      	movs	r3, #2
 80116cc:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80116ce:	688b      	ldr	r3, [r1, #8]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80116d0:	8b84      	ldrh	r4, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80116d2:	2b02      	cmp	r3, #2
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80116d4:	b2a4      	uxth	r4, r4
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80116d6:	d03f      	beq.n	8011758 <I2S_Init+0x144>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80116d8:	4f2f      	ldr	r7, [pc, #188]	; (8011798 <I2S_Init+0x184>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80116da:	888b      	ldrh	r3, [r1, #4]
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80116dc:	2b00      	cmp	r3, #0
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80116de:	68bb      	ldr	r3, [r7, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80116e0:	bf14      	ite	ne
 80116e2:	f04f 0e02 	movne.w	lr, #2
 80116e6:	f04f 0e01 	moveq.w	lr, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80116ea:	021b      	lsls	r3, r3, #8
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 80116ec:	bf42      	ittt	mi
 80116ee:	68bb      	ldrmi	r3, [r7, #8]
 80116f0:	f423 0300 	bicmi.w	r3, r3, #8388608	; 0x800000
 80116f4:	60bb      	strmi	r3, [r7, #8]
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 80116f6:	4b29      	ldr	r3, [pc, #164]	; (801179c <I2S_Init+0x188>)
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 80116f8:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 80116fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8011700:	687d      	ldr	r5, [r7, #4]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8011702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011704:	4f26      	ldr	r7, [pc, #152]	; (80117a0 <I2S_Init+0x18c>)
 8011706:	435f      	muls	r7, r3
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8011708:	88cb      	ldrh	r3, [r1, #6]
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 801170a:	f3c6 1688 	ubfx	r6, r6, #6, #9
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 801170e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8011712:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8011716:	fbb7 f5f5 	udiv	r5, r7, r5
 801171a:	fb06 f605 	mul.w	r6, r6, r5
 801171e:	f3c2 7502 	ubfx	r5, r2, #28, #3
 8011722:	f04f 020a 	mov.w	r2, #10
 8011726:	fbb6 f5f5 	udiv	r5, r6, r5
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 801172a:	bf08      	it	eq
 801172c:	0a2d      	lsreq	r5, r5, #8
 801172e:	688b      	ldr	r3, [r1, #8]
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8011730:	bf1c      	itt	ne
 8011732:	ea4f 164e 	movne.w	r6, lr, lsl #5
 8011736:	fbb5 f5f6 	udivne	r5, r5, r6
 801173a:	436a      	muls	r2, r5
 801173c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011740:	3305      	adds	r3, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8011742:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8011744:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8011746:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 801174a:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 801174e:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8011750:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8011754:	b292      	uxth	r2, r2
 8011756:	e000      	b.n	801175a <I2S_Init+0x146>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8011758:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 801175a:	1e9d      	subs	r5, r3, #2
 801175c:	b2ad      	uxth	r5, r5
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 801175e:	2dfe      	cmp	r5, #254	; 0xfe
 8011760:	bf24      	itt	cs
 8011762:	2200      	movcs	r2, #0
 8011764:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8011766:	4313      	orrs	r3, r2
 8011768:	88ca      	ldrh	r2, [r1, #6]
 801176a:	4313      	orrs	r3, r2
 801176c:	b29b      	uxth	r3, r3
 801176e:	8403      	strh	r3, [r0, #32]
 8011770:	880b      	ldrh	r3, [r1, #0]
 8011772:	888a      	ldrh	r2, [r1, #4]
 8011774:	431c      	orrs	r4, r3
 8011776:	884b      	ldrh	r3, [r1, #2]
 8011778:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 801177c:	4323      	orrs	r3, r4
 801177e:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8011780:	898a      	ldrh	r2, [r1, #12]
 8011782:	4313      	orrs	r3, r2
 8011784:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8011786:	8383      	strh	r3, [r0, #28]
}
 8011788:	b009      	add	sp, #36	; 0x24
 801178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801178c:	40003800 	.word	0x40003800
 8011790:	40003c00 	.word	0x40003c00
 8011794:	0002cec0 	.word	0x0002cec0
 8011798:	40023800 	.word	0x40023800
 801179c:	08004000 	.word	0x08004000
 80117a0:	000f4240 	.word	0x000f4240

080117a4 <SPI_Cmd>:
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80117a4:	4b19      	ldr	r3, [pc, #100]	; (801180c <SPI_Cmd+0x68>)
 80117a6:	4298      	cmp	r0, r3
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80117a8:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80117aa:	d104      	bne.n	80117b6 <SPI_Cmd+0x12>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80117ac:	2901      	cmp	r1, #1
 80117ae:	d923      	bls.n	80117f8 <SPI_Cmd+0x54>
 80117b0:	2301      	movs	r3, #1
 80117b2:	9301      	str	r3, [sp, #4]
 80117b4:	e018      	b.n	80117e8 <SPI_Cmd+0x44>
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80117b6:	4b16      	ldr	r3, [pc, #88]	; (8011810 <SPI_Cmd+0x6c>)
 80117b8:	4298      	cmp	r0, r3
 80117ba:	d0f7      	beq.n	80117ac <SPI_Cmd+0x8>
 80117bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80117c0:	4298      	cmp	r0, r3
 80117c2:	d0f3      	beq.n	80117ac <SPI_Cmd+0x8>
 80117c4:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 80117c8:	4298      	cmp	r0, r3
 80117ca:	d0ef      	beq.n	80117ac <SPI_Cmd+0x8>
 80117cc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80117d0:	4298      	cmp	r0, r3
 80117d2:	d0eb      	beq.n	80117ac <SPI_Cmd+0x8>
 80117d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80117d8:	4298      	cmp	r0, r3
 80117da:	d0e7      	beq.n	80117ac <SPI_Cmd+0x8>
 80117dc:	2301      	movs	r3, #1
 80117de:	9300      	str	r3, [sp, #0]
 80117e0:	9b00      	ldr	r3, [sp, #0]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d1fc      	bne.n	80117e0 <SPI_Cmd+0x3c>
 80117e6:	e7e1      	b.n	80117ac <SPI_Cmd+0x8>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80117e8:	9b01      	ldr	r3, [sp, #4]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d1fc      	bne.n	80117e8 <SPI_Cmd+0x44>
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80117ee:	8803      	ldrh	r3, [r0, #0]
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117f6:	e006      	b.n	8011806 <SPI_Cmd+0x62>
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80117f8:	2900      	cmp	r1, #0
 80117fa:	d1f8      	bne.n	80117ee <SPI_Cmd+0x4a>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80117fc:	8803      	ldrh	r3, [r0, #0]
 80117fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011802:	041b      	lsls	r3, r3, #16
 8011804:	0c1b      	lsrs	r3, r3, #16
 8011806:	8003      	strh	r3, [r0, #0]
  }
}
 8011808:	b002      	add	sp, #8
 801180a:	4770      	bx	lr
 801180c:	40013000 	.word	0x40013000
 8011810:	40003800 	.word	0x40003800

08011814 <I2S_Cmd>:
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 8011814:	4b15      	ldr	r3, [pc, #84]	; (801186c <I2S_Cmd+0x58>)
 8011816:	4298      	cmp	r0, r3
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8011818:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 801181a:	d104      	bne.n	8011826 <I2S_Cmd+0x12>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 801181c:	2901      	cmp	r1, #1
 801181e:	d91a      	bls.n	8011856 <I2S_Cmd+0x42>
 8011820:	2301      	movs	r3, #1
 8011822:	9301      	str	r3, [sp, #4]
 8011824:	e00f      	b.n	8011846 <I2S_Cmd+0x32>
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 8011826:	4b12      	ldr	r3, [pc, #72]	; (8011870 <I2S_Cmd+0x5c>)
 8011828:	4298      	cmp	r0, r3
 801182a:	d0f7      	beq.n	801181c <I2S_Cmd+0x8>
 801182c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8011830:	4298      	cmp	r0, r3
 8011832:	d0f3      	beq.n	801181c <I2S_Cmd+0x8>
 8011834:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
 8011838:	d0f0      	beq.n	801181c <I2S_Cmd+0x8>
 801183a:	2301      	movs	r3, #1
 801183c:	9300      	str	r3, [sp, #0]
 801183e:	9b00      	ldr	r3, [sp, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d1fc      	bne.n	801183e <I2S_Cmd+0x2a>
 8011844:	e7ea      	b.n	801181c <I2S_Cmd+0x8>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8011846:	9b01      	ldr	r3, [sp, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d1fc      	bne.n	8011846 <I2S_Cmd+0x32>
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 801184c:	8b83      	ldrh	r3, [r0, #28]
 801184e:	b29b      	uxth	r3, r3
 8011850:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011854:	e006      	b.n	8011864 <I2S_Cmd+0x50>
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011856:	2900      	cmp	r1, #0
 8011858:	d1f8      	bne.n	801184c <I2S_Cmd+0x38>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 801185a:	8b83      	ldrh	r3, [r0, #28]
 801185c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011860:	041b      	lsls	r3, r3, #16
 8011862:	0c1b      	lsrs	r3, r3, #16
 8011864:	8383      	strh	r3, [r0, #28]
  }
}
 8011866:	b002      	add	sp, #8
 8011868:	4770      	bx	lr
 801186a:	bf00      	nop
 801186c:	40003800 	.word	0x40003800
 8011870:	40003c00 	.word	0x40003c00

08011874 <SPI_I2S_ReceiveData>:
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8011874:	4b13      	ldr	r3, [pc, #76]	; (80118c4 <SPI_I2S_ReceiveData+0x50>)
 8011876:	4298      	cmp	r0, r3
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8011878:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 801187a:	d01f      	beq.n	80118bc <SPI_I2S_ReceiveData+0x48>
 801187c:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8011880:	4298      	cmp	r0, r3
 8011882:	d01b      	beq.n	80118bc <SPI_I2S_ReceiveData+0x48>
 8011884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011888:	4298      	cmp	r0, r3
 801188a:	d017      	beq.n	80118bc <SPI_I2S_ReceiveData+0x48>
 801188c:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8011890:	4298      	cmp	r0, r3
 8011892:	d013      	beq.n	80118bc <SPI_I2S_ReceiveData+0x48>
 8011894:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8011898:	4298      	cmp	r0, r3
 801189a:	d00f      	beq.n	80118bc <SPI_I2S_ReceiveData+0x48>
 801189c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80118a0:	4298      	cmp	r0, r3
 80118a2:	d00b      	beq.n	80118bc <SPI_I2S_ReceiveData+0x48>
 80118a4:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 80118a8:	4298      	cmp	r0, r3
 80118aa:	d007      	beq.n	80118bc <SPI_I2S_ReceiveData+0x48>
 80118ac:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
 80118b0:	d004      	beq.n	80118bc <SPI_I2S_ReceiveData+0x48>
 80118b2:	2301      	movs	r3, #1
 80118b4:	9301      	str	r3, [sp, #4]
 80118b6:	9b01      	ldr	r3, [sp, #4]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d1fc      	bne.n	80118b6 <SPI_I2S_ReceiveData+0x42>
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80118bc:	8980      	ldrh	r0, [r0, #12]
 80118be:	b280      	uxth	r0, r0
}
 80118c0:	b002      	add	sp, #8
 80118c2:	4770      	bx	lr
 80118c4:	40013000 	.word	0x40013000

080118c8 <SPI_I2S_SendData>:
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80118c8:	4b13      	ldr	r3, [pc, #76]	; (8011918 <SPI_I2S_SendData+0x50>)
 80118ca:	4298      	cmp	r0, r3
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80118cc:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80118ce:	d102      	bne.n	80118d6 <SPI_I2S_SendData+0xe>
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80118d0:	8181      	strh	r1, [r0, #12]
}
 80118d2:	b002      	add	sp, #8
 80118d4:	4770      	bx	lr
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80118d6:	4b11      	ldr	r3, [pc, #68]	; (801191c <SPI_I2S_SendData+0x54>)
 80118d8:	4298      	cmp	r0, r3
 80118da:	d0f9      	beq.n	80118d0 <SPI_I2S_SendData+0x8>
 80118dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80118e0:	4298      	cmp	r0, r3
 80118e2:	d0f5      	beq.n	80118d0 <SPI_I2S_SendData+0x8>
 80118e4:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 80118e8:	4298      	cmp	r0, r3
 80118ea:	d0f1      	beq.n	80118d0 <SPI_I2S_SendData+0x8>
 80118ec:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80118f0:	4298      	cmp	r0, r3
 80118f2:	d0ed      	beq.n	80118d0 <SPI_I2S_SendData+0x8>
 80118f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80118f8:	4298      	cmp	r0, r3
 80118fa:	d0e9      	beq.n	80118d0 <SPI_I2S_SendData+0x8>
 80118fc:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8011900:	4298      	cmp	r0, r3
 8011902:	d0e5      	beq.n	80118d0 <SPI_I2S_SendData+0x8>
 8011904:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
 8011908:	d0e2      	beq.n	80118d0 <SPI_I2S_SendData+0x8>
 801190a:	2301      	movs	r3, #1
 801190c:	9301      	str	r3, [sp, #4]
 801190e:	9b01      	ldr	r3, [sp, #4]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d1fc      	bne.n	801190e <SPI_I2S_SendData+0x46>
 8011914:	e7dc      	b.n	80118d0 <SPI_I2S_SendData+0x8>
 8011916:	bf00      	nop
 8011918:	40013000 	.word	0x40013000
 801191c:	40003800 	.word	0x40003800

08011920 <SPI_I2S_DMACmd>:
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8011920:	4b20      	ldr	r3, [pc, #128]	; (80119a4 <SPI_I2S_DMACmd+0x84>)
 8011922:	4298      	cmp	r0, r3
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8011924:	b084      	sub	sp, #16
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8011926:	d102      	bne.n	801192e <SPI_I2S_DMACmd+0xe>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8011928:	2a01      	cmp	r2, #1
 801192a:	d820      	bhi.n	801196e <SPI_I2S_DMACmd+0x4e>
 801192c:	e024      	b.n	8011978 <SPI_I2S_DMACmd+0x58>
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 801192e:	4b1e      	ldr	r3, [pc, #120]	; (80119a8 <SPI_I2S_DMACmd+0x88>)
 8011930:	4298      	cmp	r0, r3
 8011932:	d0f9      	beq.n	8011928 <SPI_I2S_DMACmd+0x8>
 8011934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011938:	4298      	cmp	r0, r3
 801193a:	d0f5      	beq.n	8011928 <SPI_I2S_DMACmd+0x8>
 801193c:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8011940:	4298      	cmp	r0, r3
 8011942:	d0f1      	beq.n	8011928 <SPI_I2S_DMACmd+0x8>
 8011944:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8011948:	4298      	cmp	r0, r3
 801194a:	d0ed      	beq.n	8011928 <SPI_I2S_DMACmd+0x8>
 801194c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011950:	4298      	cmp	r0, r3
 8011952:	d0e9      	beq.n	8011928 <SPI_I2S_DMACmd+0x8>
 8011954:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8011958:	4298      	cmp	r0, r3
 801195a:	d0e5      	beq.n	8011928 <SPI_I2S_DMACmd+0x8>
 801195c:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
 8011960:	d0e2      	beq.n	8011928 <SPI_I2S_DMACmd+0x8>
 8011962:	2301      	movs	r3, #1
 8011964:	9301      	str	r3, [sp, #4]
 8011966:	9b01      	ldr	r3, [sp, #4]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d1fc      	bne.n	8011966 <SPI_I2S_DMACmd+0x46>
 801196c:	e7dc      	b.n	8011928 <SPI_I2S_DMACmd+0x8>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 801196e:	2301      	movs	r3, #1
 8011970:	9302      	str	r3, [sp, #8]
 8011972:	9b02      	ldr	r3, [sp, #8]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d1fc      	bne.n	8011972 <SPI_I2S_DMACmd+0x52>
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 8011978:	f021 0303 	bic.w	r3, r1, #3
 801197c:	b92b      	cbnz	r3, 801198a <SPI_I2S_DMACmd+0x6a>
 801197e:	b121      	cbz	r1, 801198a <SPI_I2S_DMACmd+0x6a>

  if (NewState != DISABLE)
 8011980:	b14a      	cbz	r2, 8011996 <SPI_I2S_DMACmd+0x76>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8011982:	8883      	ldrh	r3, [r0, #4]
 8011984:	b29b      	uxth	r3, r3
 8011986:	4319      	orrs	r1, r3
 8011988:	e009      	b.n	801199e <SPI_I2S_DMACmd+0x7e>
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 801198a:	2301      	movs	r3, #1
 801198c:	9303      	str	r3, [sp, #12]
 801198e:	9b03      	ldr	r3, [sp, #12]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d1fc      	bne.n	801198e <SPI_I2S_DMACmd+0x6e>
 8011994:	e7f4      	b.n	8011980 <SPI_I2S_DMACmd+0x60>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8011996:	8883      	ldrh	r3, [r0, #4]
 8011998:	b29b      	uxth	r3, r3
 801199a:	ea23 0101 	bic.w	r1, r3, r1
 801199e:	8081      	strh	r1, [r0, #4]
  }
}
 80119a0:	b004      	add	sp, #16
 80119a2:	4770      	bx	lr
 80119a4:	40013000 	.word	0x40013000
 80119a8:	40003800 	.word	0x40003800

080119ac <SPI_I2S_ITConfig>:
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
  uint16_t itpos = 0, itmask = 0 ;
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80119ac:	4b24      	ldr	r3, [pc, #144]	; (8011a40 <SPI_I2S_ITConfig+0x94>)
 80119ae:	4298      	cmp	r0, r3
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 80119b0:	b084      	sub	sp, #16
  uint16_t itpos = 0, itmask = 0 ;
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80119b2:	d102      	bne.n	80119ba <SPI_I2S_ITConfig+0xe>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80119b4:	2a01      	cmp	r2, #1
 80119b6:	d820      	bhi.n	80119fa <SPI_I2S_ITConfig+0x4e>
 80119b8:	e024      	b.n	8011a04 <SPI_I2S_ITConfig+0x58>
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
  uint16_t itpos = 0, itmask = 0 ;
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80119ba:	4b22      	ldr	r3, [pc, #136]	; (8011a44 <SPI_I2S_ITConfig+0x98>)
 80119bc:	4298      	cmp	r0, r3
 80119be:	d0f9      	beq.n	80119b4 <SPI_I2S_ITConfig+0x8>
 80119c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80119c4:	4298      	cmp	r0, r3
 80119c6:	d0f5      	beq.n	80119b4 <SPI_I2S_ITConfig+0x8>
 80119c8:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 80119cc:	4298      	cmp	r0, r3
 80119ce:	d0f1      	beq.n	80119b4 <SPI_I2S_ITConfig+0x8>
 80119d0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80119d4:	4298      	cmp	r0, r3
 80119d6:	d0ed      	beq.n	80119b4 <SPI_I2S_ITConfig+0x8>
 80119d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80119dc:	4298      	cmp	r0, r3
 80119de:	d0e9      	beq.n	80119b4 <SPI_I2S_ITConfig+0x8>
 80119e0:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 80119e4:	4298      	cmp	r0, r3
 80119e6:	d0e5      	beq.n	80119b4 <SPI_I2S_ITConfig+0x8>
 80119e8:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
 80119ec:	d0e2      	beq.n	80119b4 <SPI_I2S_ITConfig+0x8>
 80119ee:	2301      	movs	r3, #1
 80119f0:	9301      	str	r3, [sp, #4]
 80119f2:	9b01      	ldr	r3, [sp, #4]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d1fc      	bne.n	80119f2 <SPI_I2S_ITConfig+0x46>
 80119f8:	e7dc      	b.n	80119b4 <SPI_I2S_ITConfig+0x8>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80119fa:	2301      	movs	r3, #1
 80119fc:	9302      	str	r3, [sp, #8]
 80119fe:	9b02      	ldr	r3, [sp, #8]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d1fc      	bne.n	80119fe <SPI_I2S_ITConfig+0x52>
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
 8011a04:	2971      	cmp	r1, #113	; 0x71
 8011a06:	d001      	beq.n	8011a0c <SPI_I2S_ITConfig+0x60>
 8011a08:	2960      	cmp	r1, #96	; 0x60
 8011a0a:	d109      	bne.n	8011a20 <SPI_I2S_ITConfig+0x74>

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8011a0c:	0909      	lsrs	r1, r1, #4
 8011a0e:	2301      	movs	r3, #1
 8011a10:	fa03 f101 	lsl.w	r1, r3, r1
 8011a14:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
 8011a16:	b15a      	cbz	r2, 8011a30 <SPI_I2S_ITConfig+0x84>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8011a18:	8883      	ldrh	r3, [r0, #4]
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	4319      	orrs	r1, r3
 8011a1e:	e00b      	b.n	8011a38 <SPI_I2S_ITConfig+0x8c>
  uint16_t itpos = 0, itmask = 0 ;
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
 8011a20:	2950      	cmp	r1, #80	; 0x50
 8011a22:	d0f3      	beq.n	8011a0c <SPI_I2S_ITConfig+0x60>
 8011a24:	2301      	movs	r3, #1
 8011a26:	9303      	str	r3, [sp, #12]
 8011a28:	9b03      	ldr	r3, [sp, #12]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d1fc      	bne.n	8011a28 <SPI_I2S_ITConfig+0x7c>
 8011a2e:	e7ed      	b.n	8011a0c <SPI_I2S_ITConfig+0x60>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8011a30:	8883      	ldrh	r3, [r0, #4]
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	ea23 0101 	bic.w	r1, r3, r1
 8011a38:	8081      	strh	r1, [r0, #4]
  }
}
 8011a3a:	b004      	add	sp, #16
 8011a3c:	4770      	bx	lr
 8011a3e:	bf00      	nop
 8011a40:	40013000 	.word	0x40013000
 8011a44:	40003800 	.word	0x40003800

08011a48 <SPI_I2S_GetFlagStatus>:
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8011a48:	4b20      	ldr	r3, [pc, #128]	; (8011acc <SPI_I2S_GetFlagStatus+0x84>)
 8011a4a:	4298      	cmp	r0, r3
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8011a4c:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8011a4e:	d102      	bne.n	8011a56 <SPI_I2S_GetFlagStatus+0xe>
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 8011a50:	2980      	cmp	r1, #128	; 0x80
 8011a52:	d120      	bne.n	8011a96 <SPI_I2S_GetFlagStatus+0x4e>
 8011a54:	e033      	b.n	8011abe <SPI_I2S_GetFlagStatus+0x76>
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8011a56:	4b1e      	ldr	r3, [pc, #120]	; (8011ad0 <SPI_I2S_GetFlagStatus+0x88>)
 8011a58:	4298      	cmp	r0, r3
 8011a5a:	d0f9      	beq.n	8011a50 <SPI_I2S_GetFlagStatus+0x8>
 8011a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011a60:	4298      	cmp	r0, r3
 8011a62:	d0f5      	beq.n	8011a50 <SPI_I2S_GetFlagStatus+0x8>
 8011a64:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8011a68:	4298      	cmp	r0, r3
 8011a6a:	d0f1      	beq.n	8011a50 <SPI_I2S_GetFlagStatus+0x8>
 8011a6c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8011a70:	4298      	cmp	r0, r3
 8011a72:	d0ed      	beq.n	8011a50 <SPI_I2S_GetFlagStatus+0x8>
 8011a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011a78:	4298      	cmp	r0, r3
 8011a7a:	d0e9      	beq.n	8011a50 <SPI_I2S_GetFlagStatus+0x8>
 8011a7c:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8011a80:	4298      	cmp	r0, r3
 8011a82:	d0e5      	beq.n	8011a50 <SPI_I2S_GetFlagStatus+0x8>
 8011a84:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
 8011a88:	d0e2      	beq.n	8011a50 <SPI_I2S_GetFlagStatus+0x8>
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	9300      	str	r3, [sp, #0]
 8011a8e:	9b00      	ldr	r3, [sp, #0]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d1fc      	bne.n	8011a8e <SPI_I2S_GetFlagStatus+0x46>
 8011a94:	e7dc      	b.n	8011a50 <SPI_I2S_GetFlagStatus+0x8>
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 8011a96:	2940      	cmp	r1, #64	; 0x40
 8011a98:	d011      	beq.n	8011abe <SPI_I2S_GetFlagStatus+0x76>
 8011a9a:	1e4b      	subs	r3, r1, #1
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	2b1f      	cmp	r3, #31
 8011aa0:	d80a      	bhi.n	8011ab8 <SPI_I2S_GetFlagStatus+0x70>
 8011aa2:	4a0c      	ldr	r2, [pc, #48]	; (8011ad4 <SPI_I2S_GetFlagStatus+0x8c>)
 8011aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8011aa8:	07db      	lsls	r3, r3, #31
 8011aaa:	d408      	bmi.n	8011abe <SPI_I2S_GetFlagStatus+0x76>
 8011aac:	2301      	movs	r3, #1
 8011aae:	9301      	str	r3, [sp, #4]
 8011ab0:	9b01      	ldr	r3, [sp, #4]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d1fc      	bne.n	8011ab0 <SPI_I2S_GetFlagStatus+0x68>
 8011ab6:	e002      	b.n	8011abe <SPI_I2S_GetFlagStatus+0x76>
 8011ab8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8011abc:	d1f6      	bne.n	8011aac <SPI_I2S_GetFlagStatus+0x64>
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8011abe:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8011ac0:	4219      	tst	r1, r3
 8011ac2:	bf14      	ite	ne
 8011ac4:	2001      	movne	r0, #1
 8011ac6:	2000      	moveq	r0, #0
}
 8011ac8:	b002      	add	sp, #8
 8011aca:	4770      	bx	lr
 8011acc:	40013000 	.word	0x40013000
 8011ad0:	40003800 	.word	0x40003800
 8011ad4:	8000808b 	.word	0x8000808b

08011ad8 <SPI_I2S_GetITStatus>:
{
  ITStatus bitstatus = RESET;
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8011ad8:	4b24      	ldr	r3, [pc, #144]	; (8011b6c <SPI_I2S_GetITStatus+0x94>)
 8011ada:	4298      	cmp	r0, r3
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8011adc:	b513      	push	{r0, r1, r4, lr}
  ITStatus bitstatus = RESET;
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8011ade:	d105      	bne.n	8011aec <SPI_I2S_GetITStatus+0x14>
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
 8011ae0:	f1a1 0353 	sub.w	r3, r1, #83	; 0x53
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	2b1e      	cmp	r3, #30
 8011ae8:	d838      	bhi.n	8011b5c <SPI_I2S_GetITStatus+0x84>
 8011aea:	e01f      	b.n	8011b2c <SPI_I2S_GetITStatus+0x54>
{
  ITStatus bitstatus = RESET;
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8011aec:	4b20      	ldr	r3, [pc, #128]	; (8011b70 <SPI_I2S_GetITStatus+0x98>)
 8011aee:	4298      	cmp	r0, r3
 8011af0:	d0f6      	beq.n	8011ae0 <SPI_I2S_GetITStatus+0x8>
 8011af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011af6:	4298      	cmp	r0, r3
 8011af8:	d0f2      	beq.n	8011ae0 <SPI_I2S_GetITStatus+0x8>
 8011afa:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8011afe:	4298      	cmp	r0, r3
 8011b00:	d0ee      	beq.n	8011ae0 <SPI_I2S_GetITStatus+0x8>
 8011b02:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8011b06:	4298      	cmp	r0, r3
 8011b08:	d0ea      	beq.n	8011ae0 <SPI_I2S_GetITStatus+0x8>
 8011b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011b0e:	4298      	cmp	r0, r3
 8011b10:	d0e6      	beq.n	8011ae0 <SPI_I2S_GetITStatus+0x8>
 8011b12:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8011b16:	4298      	cmp	r0, r3
 8011b18:	d0e2      	beq.n	8011ae0 <SPI_I2S_GetITStatus+0x8>
 8011b1a:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
 8011b1e:	d0df      	beq.n	8011ae0 <SPI_I2S_GetITStatus+0x8>
 8011b20:	2301      	movs	r3, #1
 8011b22:	9300      	str	r3, [sp, #0]
 8011b24:	9b00      	ldr	r3, [sp, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d1fc      	bne.n	8011b24 <SPI_I2S_GetITStatus+0x4c>
 8011b2a:	e7d9      	b.n	8011ae0 <SPI_I2S_GetITStatus+0x8>
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
 8011b2c:	4a11      	ldr	r2, [pc, #68]	; (8011b74 <SPI_I2S_GetITStatus+0x9c>)
 8011b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8011b32:	07db      	lsls	r3, r3, #31
 8011b34:	d512      	bpl.n	8011b5c <SPI_I2S_GetITStatus+0x84>

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8011b36:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8011b38:	8903      	ldrh	r3, [r0, #8]
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	f001 000f 	and.w	r0, r1, #15
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	fa02 f000 	lsl.w	r0, r2, r0
 8011b46:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8011b48:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8011b4a:	d00d      	beq.n	8011b68 <SPI_I2S_GetITStatus+0x90>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8011b4c:	0909      	lsrs	r1, r1, #4
 8011b4e:	fa02 f101 	lsl.w	r1, r2, r1
 8011b52:	420c      	tst	r4, r1
 8011b54:	bf14      	ite	ne
 8011b56:	2001      	movne	r0, #1
 8011b58:	2000      	moveq	r0, #0
 8011b5a:	e005      	b.n	8011b68 <SPI_I2S_GetITStatus+0x90>
  ITStatus bitstatus = RESET;
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	9301      	str	r3, [sp, #4]
 8011b60:	9b01      	ldr	r3, [sp, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d1fc      	bne.n	8011b60 <SPI_I2S_GetITStatus+0x88>
 8011b66:	e7e6      	b.n	8011b36 <SPI_I2S_GetITStatus+0x5e>
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8011b68:	b002      	add	sp, #8
 8011b6a:	bd10      	pop	{r4, pc}
 8011b6c:	40013000 	.word	0x40013000
 8011b70:	40003800 	.word	0x40003800
 8011b74:	4000202f 	.word	0x4000202f

08011b78 <DMA_DeInit>:
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8011b78:	4b4e      	ldr	r3, [pc, #312]	; (8011cb4 <DMA_DeInit+0x13c>)
 8011b7a:	4298      	cmp	r0, r3
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8011b7c:	b082      	sub	sp, #8
 8011b7e:	461a      	mov	r2, r3
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8011b80:	d112      	bne.n	8011ba8 <DMA_DeInit+0x30>

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8011b82:	6803      	ldr	r3, [r0, #0]
 8011b84:	f023 0301 	bic.w	r3, r3, #1
 8011b88:	6003      	str	r3, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	6003      	str	r3, [r0, #0]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8011b8e:	4290      	cmp	r0, r2

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8011b90:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8011b92:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8011b94:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8011b96:	6103      	str	r3, [r0, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8011b98:	f04f 0321 	mov.w	r3, #33	; 0x21
 8011b9c:	6143      	str	r3, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8011b9e:	d137      	bne.n	8011c10 <DMA_DeInit+0x98>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8011ba0:	4b45      	ldr	r3, [pc, #276]	; (8011cb8 <DMA_DeInit+0x140>)
 8011ba2:	223d      	movs	r2, #61	; 0x3d
 8011ba4:	609a      	str	r2, [r3, #8]
 8011ba6:	e083      	b.n	8011cb0 <DMA_DeInit+0x138>
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8011ba8:	4b44      	ldr	r3, [pc, #272]	; (8011cbc <DMA_DeInit+0x144>)
 8011baa:	4298      	cmp	r0, r3
 8011bac:	d0e9      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011bae:	3318      	adds	r3, #24
 8011bb0:	4298      	cmp	r0, r3
 8011bb2:	d0e6      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011bb4:	3318      	adds	r3, #24
 8011bb6:	4298      	cmp	r0, r3
 8011bb8:	d0e3      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011bba:	3318      	adds	r3, #24
 8011bbc:	4298      	cmp	r0, r3
 8011bbe:	d0e0      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011bc0:	3318      	adds	r3, #24
 8011bc2:	4298      	cmp	r0, r3
 8011bc4:	d0dd      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011bc6:	3318      	adds	r3, #24
 8011bc8:	4298      	cmp	r0, r3
 8011bca:	d0da      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011bcc:	3318      	adds	r3, #24
 8011bce:	4298      	cmp	r0, r3
 8011bd0:	d0d7      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011bd2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8011bd6:	4298      	cmp	r0, r3
 8011bd8:	d0d3      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011bda:	3318      	adds	r3, #24
 8011bdc:	4298      	cmp	r0, r3
 8011bde:	d0d0      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011be0:	3318      	adds	r3, #24
 8011be2:	4298      	cmp	r0, r3
 8011be4:	d0cd      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011be6:	3318      	adds	r3, #24
 8011be8:	4298      	cmp	r0, r3
 8011bea:	d0ca      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011bec:	3318      	adds	r3, #24
 8011bee:	4298      	cmp	r0, r3
 8011bf0:	d0c7      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011bf2:	3318      	adds	r3, #24
 8011bf4:	4298      	cmp	r0, r3
 8011bf6:	d0c4      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011bf8:	3318      	adds	r3, #24
 8011bfa:	4298      	cmp	r0, r3
 8011bfc:	d0c1      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011bfe:	3318      	adds	r3, #24
 8011c00:	4298      	cmp	r0, r3
 8011c02:	d0be      	beq.n	8011b82 <DMA_DeInit+0xa>
 8011c04:	2301      	movs	r3, #1
 8011c06:	9301      	str	r3, [sp, #4]
 8011c08:	9b01      	ldr	r3, [sp, #4]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d1fc      	bne.n	8011c08 <DMA_DeInit+0x90>
 8011c0e:	e7b8      	b.n	8011b82 <DMA_DeInit+0xa>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8011c10:	4b2a      	ldr	r3, [pc, #168]	; (8011cbc <DMA_DeInit+0x144>)
 8011c12:	4298      	cmp	r0, r3
 8011c14:	d01b      	beq.n	8011c4e <DMA_DeInit+0xd6>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8011c16:	4b2a      	ldr	r3, [pc, #168]	; (8011cc0 <DMA_DeInit+0x148>)
 8011c18:	4298      	cmp	r0, r3
 8011c1a:	d020      	beq.n	8011c5e <DMA_DeInit+0xe6>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8011c1c:	4b29      	ldr	r3, [pc, #164]	; (8011cc4 <DMA_DeInit+0x14c>)
 8011c1e:	4298      	cmp	r0, r3
 8011c20:	d025      	beq.n	8011c6e <DMA_DeInit+0xf6>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8011c22:	4b29      	ldr	r3, [pc, #164]	; (8011cc8 <DMA_DeInit+0x150>)
 8011c24:	4298      	cmp	r0, r3
 8011c26:	d02a      	beq.n	8011c7e <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8011c28:	4b28      	ldr	r3, [pc, #160]	; (8011ccc <DMA_DeInit+0x154>)
 8011c2a:	4298      	cmp	r0, r3
 8011c2c:	d02e      	beq.n	8011c8c <DMA_DeInit+0x114>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8011c2e:	4b28      	ldr	r3, [pc, #160]	; (8011cd0 <DMA_DeInit+0x158>)
 8011c30:	4298      	cmp	r0, r3
 8011c32:	d032      	beq.n	8011c9a <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8011c34:	4b27      	ldr	r3, [pc, #156]	; (8011cd4 <DMA_DeInit+0x15c>)
 8011c36:	4298      	cmp	r0, r3
 8011c38:	d036      	beq.n	8011ca8 <DMA_DeInit+0x130>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8011c3a:	4b27      	ldr	r3, [pc, #156]	; (8011cd8 <DMA_DeInit+0x160>)
 8011c3c:	4298      	cmp	r0, r3
 8011c3e:	d103      	bne.n	8011c48 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8011c40:	223d      	movs	r2, #61	; 0x3d
 8011c42:	f843 2c08 	str.w	r2, [r3, #-8]
 8011c46:	e033      	b.n	8011cb0 <DMA_DeInit+0x138>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8011c48:	4b24      	ldr	r3, [pc, #144]	; (8011cdc <DMA_DeInit+0x164>)
 8011c4a:	4298      	cmp	r0, r3
 8011c4c:	d104      	bne.n	8011c58 <DMA_DeInit+0xe0>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8011c4e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8011c52:	f843 2c20 	str.w	r2, [r3, #-32]
 8011c56:	e02b      	b.n	8011cb0 <DMA_DeInit+0x138>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8011c58:	4b21      	ldr	r3, [pc, #132]	; (8011ce0 <DMA_DeInit+0x168>)
 8011c5a:	4298      	cmp	r0, r3
 8011c5c:	d104      	bne.n	8011c68 <DMA_DeInit+0xf0>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8011c5e:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8011c62:	f843 2c38 	str.w	r2, [r3, #-56]
 8011c66:	e023      	b.n	8011cb0 <DMA_DeInit+0x138>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8011c68:	4b1e      	ldr	r3, [pc, #120]	; (8011ce4 <DMA_DeInit+0x16c>)
 8011c6a:	4298      	cmp	r0, r3
 8011c6c:	d104      	bne.n	8011c78 <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8011c6e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8011c72:	f843 2c50 	str.w	r2, [r3, #-80]
 8011c76:	e01b      	b.n	8011cb0 <DMA_DeInit+0x138>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8011c78:	4b1b      	ldr	r3, [pc, #108]	; (8011ce8 <DMA_DeInit+0x170>)
 8011c7a:	4298      	cmp	r0, r3
 8011c7c:	d103      	bne.n	8011c86 <DMA_DeInit+0x10e>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8011c7e:	4a1b      	ldr	r2, [pc, #108]	; (8011cec <DMA_DeInit+0x174>)
 8011c80:	f843 2c64 	str.w	r2, [r3, #-100]
 8011c84:	e014      	b.n	8011cb0 <DMA_DeInit+0x138>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8011c86:	4b1a      	ldr	r3, [pc, #104]	; (8011cf0 <DMA_DeInit+0x178>)
 8011c88:	4298      	cmp	r0, r3
 8011c8a:	d103      	bne.n	8011c94 <DMA_DeInit+0x11c>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8011c8c:	4a19      	ldr	r2, [pc, #100]	; (8011cf4 <DMA_DeInit+0x17c>)
 8011c8e:	f843 2c7c 	str.w	r2, [r3, #-124]
 8011c92:	e00d      	b.n	8011cb0 <DMA_DeInit+0x138>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8011c94:	4b18      	ldr	r3, [pc, #96]	; (8011cf8 <DMA_DeInit+0x180>)
 8011c96:	4298      	cmp	r0, r3
 8011c98:	d103      	bne.n	8011ca2 <DMA_DeInit+0x12a>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8011c9a:	4a18      	ldr	r2, [pc, #96]	; (8011cfc <DMA_DeInit+0x184>)
 8011c9c:	f843 2c94 	str.w	r2, [r3, #-148]
 8011ca0:	e006      	b.n	8011cb0 <DMA_DeInit+0x138>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8011ca2:	4b17      	ldr	r3, [pc, #92]	; (8011d00 <DMA_DeInit+0x188>)
 8011ca4:	4298      	cmp	r0, r3
 8011ca6:	d103      	bne.n	8011cb0 <DMA_DeInit+0x138>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8011ca8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8011cac:	f843 2cac 	str.w	r2, [r3, #-172]
    }
  }
}
 8011cb0:	b002      	add	sp, #8
 8011cb2:	4770      	bx	lr
 8011cb4:	40026010 	.word	0x40026010
 8011cb8:	40026000 	.word	0x40026000
 8011cbc:	40026028 	.word	0x40026028
 8011cc0:	40026040 	.word	0x40026040
 8011cc4:	40026058 	.word	0x40026058
 8011cc8:	40026070 	.word	0x40026070
 8011ccc:	40026088 	.word	0x40026088
 8011cd0:	400260a0 	.word	0x400260a0
 8011cd4:	400260b8 	.word	0x400260b8
 8011cd8:	40026410 	.word	0x40026410
 8011cdc:	40026428 	.word	0x40026428
 8011ce0:	40026440 	.word	0x40026440
 8011ce4:	40026458 	.word	0x40026458
 8011ce8:	40026470 	.word	0x40026470
 8011cec:	2000003d 	.word	0x2000003d
 8011cf0:	40026488 	.word	0x40026488
 8011cf4:	20000f40 	.word	0x20000f40
 8011cf8:	400264a0 	.word	0x400264a0
 8011cfc:	203d0000 	.word	0x203d0000
 8011d00:	400264b8 	.word	0x400264b8

08011d04 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8011d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8011d08:	4b72      	ldr	r3, [pc, #456]	; (8011ed4 <DMA_Init+0x1d0>)
 8011d0a:	4298      	cmp	r0, r3
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8011d0c:	b08f      	sub	sp, #60	; 0x3c
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8011d0e:	d104      	bne.n	8011d1a <DMA_Init+0x16>
  assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 8011d10:	680d      	ldr	r5, [r1, #0]
 8011d12:	f035 63c0 	bics.w	r3, r5, #100663296	; 0x6000000
 8011d16:	d134      	bne.n	8011d82 <DMA_Init+0x7e>
 8011d18:	e03b      	b.n	8011d92 <DMA_Init+0x8e>
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8011d1a:	4b6f      	ldr	r3, [pc, #444]	; (8011ed8 <DMA_Init+0x1d4>)
 8011d1c:	4298      	cmp	r0, r3
 8011d1e:	d0f7      	beq.n	8011d10 <DMA_Init+0xc>
 8011d20:	3318      	adds	r3, #24
 8011d22:	4298      	cmp	r0, r3
 8011d24:	d0f4      	beq.n	8011d10 <DMA_Init+0xc>
 8011d26:	3318      	adds	r3, #24
 8011d28:	4298      	cmp	r0, r3
 8011d2a:	d0f1      	beq.n	8011d10 <DMA_Init+0xc>
 8011d2c:	3318      	adds	r3, #24
 8011d2e:	4298      	cmp	r0, r3
 8011d30:	d0ee      	beq.n	8011d10 <DMA_Init+0xc>
 8011d32:	3318      	adds	r3, #24
 8011d34:	4298      	cmp	r0, r3
 8011d36:	d0eb      	beq.n	8011d10 <DMA_Init+0xc>
 8011d38:	3318      	adds	r3, #24
 8011d3a:	4298      	cmp	r0, r3
 8011d3c:	d0e8      	beq.n	8011d10 <DMA_Init+0xc>
 8011d3e:	3318      	adds	r3, #24
 8011d40:	4298      	cmp	r0, r3
 8011d42:	d0e5      	beq.n	8011d10 <DMA_Init+0xc>
 8011d44:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8011d48:	4298      	cmp	r0, r3
 8011d4a:	d0e1      	beq.n	8011d10 <DMA_Init+0xc>
 8011d4c:	3318      	adds	r3, #24
 8011d4e:	4298      	cmp	r0, r3
 8011d50:	d0de      	beq.n	8011d10 <DMA_Init+0xc>
 8011d52:	3318      	adds	r3, #24
 8011d54:	4298      	cmp	r0, r3
 8011d56:	d0db      	beq.n	8011d10 <DMA_Init+0xc>
 8011d58:	3318      	adds	r3, #24
 8011d5a:	4298      	cmp	r0, r3
 8011d5c:	d0d8      	beq.n	8011d10 <DMA_Init+0xc>
 8011d5e:	3318      	adds	r3, #24
 8011d60:	4298      	cmp	r0, r3
 8011d62:	d0d5      	beq.n	8011d10 <DMA_Init+0xc>
 8011d64:	3318      	adds	r3, #24
 8011d66:	4298      	cmp	r0, r3
 8011d68:	d0d2      	beq.n	8011d10 <DMA_Init+0xc>
 8011d6a:	3318      	adds	r3, #24
 8011d6c:	4298      	cmp	r0, r3
 8011d6e:	d0cf      	beq.n	8011d10 <DMA_Init+0xc>
 8011d70:	3318      	adds	r3, #24
 8011d72:	4298      	cmp	r0, r3
 8011d74:	d0cc      	beq.n	8011d10 <DMA_Init+0xc>
 8011d76:	2301      	movs	r3, #1
 8011d78:	9300      	str	r3, [sp, #0]
 8011d7a:	9b00      	ldr	r3, [sp, #0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d1fc      	bne.n	8011d7a <DMA_Init+0x76>
 8011d80:	e7c6      	b.n	8011d10 <DMA_Init+0xc>
  assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 8011d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011d86:	d004      	beq.n	8011d92 <DMA_Init+0x8e>
 8011d88:	2301      	movs	r3, #1
 8011d8a:	9301      	str	r3, [sp, #4]
 8011d8c:	9b01      	ldr	r3, [sp, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d1fc      	bne.n	8011d8c <DMA_Init+0x88>
  assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 8011d92:	68cb      	ldr	r3, [r1, #12]
 8011d94:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8011d98:	d006      	beq.n	8011da8 <DMA_Init+0xa4>
 8011d9a:	2b80      	cmp	r3, #128	; 0x80
 8011d9c:	d004      	beq.n	8011da8 <DMA_Init+0xa4>
 8011d9e:	2201      	movs	r2, #1
 8011da0:	9202      	str	r2, [sp, #8]
 8011da2:	9a02      	ldr	r2, [sp, #8]
 8011da4:	2a00      	cmp	r2, #0
 8011da6:	d1fc      	bne.n	8011da2 <DMA_Init+0x9e>
  assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 8011da8:	690a      	ldr	r2, [r1, #16]
 8011daa:	f64f 74fe 	movw	r4, #65534	; 0xfffe
 8011dae:	3a01      	subs	r2, #1
 8011db0:	42a2      	cmp	r2, r4
 8011db2:	d904      	bls.n	8011dbe <DMA_Init+0xba>
 8011db4:	2201      	movs	r2, #1
 8011db6:	9203      	str	r2, [sp, #12]
 8011db8:	9a03      	ldr	r2, [sp, #12]
 8011dba:	2a00      	cmp	r2, #0
 8011dbc:	d1fc      	bne.n	8011db8 <DMA_Init+0xb4>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 8011dbe:	694a      	ldr	r2, [r1, #20]
 8011dc0:	f432 7400 	bics.w	r4, r2, #512	; 0x200
 8011dc4:	d004      	beq.n	8011dd0 <DMA_Init+0xcc>
 8011dc6:	2401      	movs	r4, #1
 8011dc8:	9404      	str	r4, [sp, #16]
 8011dca:	9c04      	ldr	r4, [sp, #16]
 8011dcc:	2c00      	cmp	r4, #0
 8011dce:	d1fc      	bne.n	8011dca <DMA_Init+0xc6>
  assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 8011dd0:	f8d1 e018 	ldr.w	lr, [r1, #24]
 8011dd4:	f43e 6480 	bics.w	r4, lr, #1024	; 0x400
 8011dd8:	d004      	beq.n	8011de4 <DMA_Init+0xe0>
 8011dda:	2401      	movs	r4, #1
 8011ddc:	9405      	str	r4, [sp, #20]
 8011dde:	9c05      	ldr	r4, [sp, #20]
 8011de0:	2c00      	cmp	r4, #0
 8011de2:	d1fc      	bne.n	8011dde <DMA_Init+0xda>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 8011de4:	69ce      	ldr	r6, [r1, #28]
 8011de6:	f436 6400 	bics.w	r4, r6, #2048	; 0x800
 8011dea:	d007      	beq.n	8011dfc <DMA_Init+0xf8>
 8011dec:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 8011df0:	d004      	beq.n	8011dfc <DMA_Init+0xf8>
 8011df2:	2401      	movs	r4, #1
 8011df4:	9406      	str	r4, [sp, #24]
 8011df6:	9c06      	ldr	r4, [sp, #24]
 8011df8:	2c00      	cmp	r4, #0
 8011dfa:	d1fc      	bne.n	8011df6 <DMA_Init+0xf2>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 8011dfc:	6a0f      	ldr	r7, [r1, #32]
 8011dfe:	f437 5400 	bics.w	r4, r7, #8192	; 0x2000
 8011e02:	d007      	beq.n	8011e14 <DMA_Init+0x110>
 8011e04:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8011e08:	d004      	beq.n	8011e14 <DMA_Init+0x110>
 8011e0a:	2401      	movs	r4, #1
 8011e0c:	9407      	str	r4, [sp, #28]
 8011e0e:	9c07      	ldr	r4, [sp, #28]
 8011e10:	2c00      	cmp	r4, #0
 8011e12:	d1fc      	bne.n	8011e0e <DMA_Init+0x10a>
  assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 8011e14:	f8d1 c024 	ldr.w	ip, [r1, #36]	; 0x24
 8011e18:	f43c 7480 	bics.w	r4, ip, #256	; 0x100
 8011e1c:	d004      	beq.n	8011e28 <DMA_Init+0x124>
 8011e1e:	2401      	movs	r4, #1
 8011e20:	9408      	str	r4, [sp, #32]
 8011e22:	9c08      	ldr	r4, [sp, #32]
 8011e24:	2c00      	cmp	r4, #0
 8011e26:	d1fc      	bne.n	8011e22 <DMA_Init+0x11e>
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 8011e28:	f8d1 8028 	ldr.w	r8, [r1, #40]	; 0x28
 8011e2c:	f438 3440 	bics.w	r4, r8, #196608	; 0x30000
 8011e30:	d004      	beq.n	8011e3c <DMA_Init+0x138>
 8011e32:	2401      	movs	r4, #1
 8011e34:	9409      	str	r4, [sp, #36]	; 0x24
 8011e36:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011e38:	2c00      	cmp	r4, #0
 8011e3a:	d1fc      	bne.n	8011e36 <DMA_Init+0x132>
  assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 8011e3c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8011e3e:	f034 0404 	bics.w	r4, r4, #4
 8011e42:	d004      	beq.n	8011e4e <DMA_Init+0x14a>
 8011e44:	2401      	movs	r4, #1
 8011e46:	940a      	str	r4, [sp, #40]	; 0x28
 8011e48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011e4a:	2c00      	cmp	r4, #0
 8011e4c:	d1fc      	bne.n	8011e48 <DMA_Init+0x144>
  assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 8011e4e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8011e50:	2c03      	cmp	r4, #3
 8011e52:	d904      	bls.n	8011e5e <DMA_Init+0x15a>
 8011e54:	2401      	movs	r4, #1
 8011e56:	940b      	str	r4, [sp, #44]	; 0x2c
 8011e58:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011e5a:	2c00      	cmp	r4, #0
 8011e5c:	d1fc      	bne.n	8011e58 <DMA_Init+0x154>
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 8011e5e:	f8d1 a034 	ldr.w	sl, [r1, #52]	; 0x34
 8011e62:	f03a 74c0 	bics.w	r4, sl, #25165824	; 0x1800000
 8011e66:	d004      	beq.n	8011e72 <DMA_Init+0x16e>
 8011e68:	2401      	movs	r4, #1
 8011e6a:	940c      	str	r4, [sp, #48]	; 0x30
 8011e6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011e6e:	2c00      	cmp	r4, #0
 8011e70:	d1fc      	bne.n	8011e6c <DMA_Init+0x168>
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 8011e72:	f8d1 9038 	ldr.w	r9, [r1, #56]	; 0x38
 8011e76:	f439 04c0 	bics.w	r4, r9, #6291456	; 0x600000
 8011e7a:	d004      	beq.n	8011e86 <DMA_Init+0x182>
 8011e7c:	2401      	movs	r4, #1
 8011e7e:	940d      	str	r4, [sp, #52]	; 0x34
 8011e80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8011e82:	2c00      	cmp	r4, #0
 8011e84:	d1fc      	bne.n	8011e80 <DMA_Init+0x17c>
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8011e86:	432b      	orrs	r3, r5
 8011e88:	431a      	orrs	r2, r3
 8011e8a:	ea42 020e 	orr.w	r2, r2, lr
 8011e8e:	4332      	orrs	r2, r6
 8011e90:	433a      	orrs	r2, r7
 8011e92:	ea42 020c 	orr.w	r2, r2, ip
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8011e96:	f8d0 b000 	ldr.w	fp, [r0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011e9a:	4c10      	ldr	r4, [pc, #64]	; (8011edc <DMA_Init+0x1d8>)
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8011e9c:	ea42 0208 	orr.w	r2, r2, r8
 8011ea0:	ea42 020a 	orr.w	r2, r2, sl
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011ea4:	ea0b 0404 	and.w	r4, fp, r4
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8011ea8:	ea42 0309 	orr.w	r3, r2, r9
 8011eac:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8011eae:	6003      	str	r3, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8011eb0:	6943      	ldr	r3, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8011eb2:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011eb4:	f023 0207 	bic.w	r2, r3, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8011eb8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8011eba:	4323      	orrs	r3, r4
 8011ebc:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8011ebe:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8011ec0:	690b      	ldr	r3, [r1, #16]
 8011ec2:	6043      	str	r3, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8011ec4:	684b      	ldr	r3, [r1, #4]
 8011ec6:	6083      	str	r3, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8011ec8:	688b      	ldr	r3, [r1, #8]
 8011eca:	60c3      	str	r3, [r0, #12]
}
 8011ecc:	b00f      	add	sp, #60	; 0x3c
 8011ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed2:	bf00      	nop
 8011ed4:	40026010 	.word	0x40026010
 8011ed8:	40026028 	.word	0x40026028
 8011edc:	f01c803f 	.word	0xf01c803f

08011ee0 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8011ee4:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8011ee6:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8011ee8:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8011eea:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8011eec:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8011eee:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8011ef0:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8011ef2:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8011ef4:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8011ef6:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8011ef8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8011efa:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8011efc:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8011efe:	6383      	str	r3, [r0, #56]	; 0x38
 8011f00:	4770      	bx	lr
	...

08011f04 <DMA_Cmd>:
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8011f04:	4b25      	ldr	r3, [pc, #148]	; (8011f9c <DMA_Cmd+0x98>)
 8011f06:	4298      	cmp	r0, r3
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8011f08:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8011f0a:	d104      	bne.n	8011f16 <DMA_Cmd+0x12>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8011f0c:	2901      	cmp	r1, #1
 8011f0e:	d93d      	bls.n	8011f8c <DMA_Cmd+0x88>
 8011f10:	2301      	movs	r3, #1
 8011f12:	9301      	str	r3, [sp, #4]
 8011f14:	e033      	b.n	8011f7e <DMA_Cmd+0x7a>
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8011f16:	4b22      	ldr	r3, [pc, #136]	; (8011fa0 <DMA_Cmd+0x9c>)
 8011f18:	4298      	cmp	r0, r3
 8011f1a:	d0f7      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f1c:	3318      	adds	r3, #24
 8011f1e:	4298      	cmp	r0, r3
 8011f20:	d0f4      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f22:	3318      	adds	r3, #24
 8011f24:	4298      	cmp	r0, r3
 8011f26:	d0f1      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f28:	3318      	adds	r3, #24
 8011f2a:	4298      	cmp	r0, r3
 8011f2c:	d0ee      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f2e:	3318      	adds	r3, #24
 8011f30:	4298      	cmp	r0, r3
 8011f32:	d0eb      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f34:	3318      	adds	r3, #24
 8011f36:	4298      	cmp	r0, r3
 8011f38:	d0e8      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f3a:	3318      	adds	r3, #24
 8011f3c:	4298      	cmp	r0, r3
 8011f3e:	d0e5      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f40:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8011f44:	4298      	cmp	r0, r3
 8011f46:	d0e1      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f48:	3318      	adds	r3, #24
 8011f4a:	4298      	cmp	r0, r3
 8011f4c:	d0de      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f4e:	3318      	adds	r3, #24
 8011f50:	4298      	cmp	r0, r3
 8011f52:	d0db      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f54:	3318      	adds	r3, #24
 8011f56:	4298      	cmp	r0, r3
 8011f58:	d0d8      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f5a:	3318      	adds	r3, #24
 8011f5c:	4298      	cmp	r0, r3
 8011f5e:	d0d5      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f60:	3318      	adds	r3, #24
 8011f62:	4298      	cmp	r0, r3
 8011f64:	d0d2      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f66:	3318      	adds	r3, #24
 8011f68:	4298      	cmp	r0, r3
 8011f6a:	d0cf      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f6c:	3318      	adds	r3, #24
 8011f6e:	4298      	cmp	r0, r3
 8011f70:	d0cc      	beq.n	8011f0c <DMA_Cmd+0x8>
 8011f72:	2301      	movs	r3, #1
 8011f74:	9300      	str	r3, [sp, #0]
 8011f76:	9b00      	ldr	r3, [sp, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d1fc      	bne.n	8011f76 <DMA_Cmd+0x72>
 8011f7c:	e7c6      	b.n	8011f0c <DMA_Cmd+0x8>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8011f7e:	9b01      	ldr	r3, [sp, #4]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d1fc      	bne.n	8011f7e <DMA_Cmd+0x7a>

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8011f84:	6803      	ldr	r3, [r0, #0]
 8011f86:	f043 0301 	orr.w	r3, r3, #1
 8011f8a:	e004      	b.n	8011f96 <DMA_Cmd+0x92>
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011f8c:	2900      	cmp	r1, #0
 8011f8e:	d1f9      	bne.n	8011f84 <DMA_Cmd+0x80>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8011f90:	6803      	ldr	r3, [r0, #0]
 8011f92:	f023 0301 	bic.w	r3, r3, #1
 8011f96:	6003      	str	r3, [r0, #0]
  }
}
 8011f98:	b002      	add	sp, #8
 8011f9a:	4770      	bx	lr
 8011f9c:	40026010 	.word	0x40026010
 8011fa0:	40026028 	.word	0x40026028

08011fa4 <DMA_SetCurrDataCounter>:
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8011fa4:	4b1d      	ldr	r3, [pc, #116]	; (801201c <DMA_SetCurrDataCounter+0x78>)
 8011fa6:	4298      	cmp	r0, r3
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8011fa8:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8011faa:	d102      	bne.n	8011fb2 <DMA_SetCurrDataCounter+0xe>

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8011fac:	6041      	str	r1, [r0, #4]
}
 8011fae:	b002      	add	sp, #8
 8011fb0:	4770      	bx	lr
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8011fb2:	4b1b      	ldr	r3, [pc, #108]	; (8012020 <DMA_SetCurrDataCounter+0x7c>)
 8011fb4:	4298      	cmp	r0, r3
 8011fb6:	d0f9      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8011fb8:	3318      	adds	r3, #24
 8011fba:	4298      	cmp	r0, r3
 8011fbc:	d0f6      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8011fbe:	3318      	adds	r3, #24
 8011fc0:	4298      	cmp	r0, r3
 8011fc2:	d0f3      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8011fc4:	3318      	adds	r3, #24
 8011fc6:	4298      	cmp	r0, r3
 8011fc8:	d0f0      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8011fca:	3318      	adds	r3, #24
 8011fcc:	4298      	cmp	r0, r3
 8011fce:	d0ed      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8011fd0:	3318      	adds	r3, #24
 8011fd2:	4298      	cmp	r0, r3
 8011fd4:	d0ea      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8011fd6:	3318      	adds	r3, #24
 8011fd8:	4298      	cmp	r0, r3
 8011fda:	d0e7      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8011fdc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8011fe0:	4298      	cmp	r0, r3
 8011fe2:	d0e3      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8011fe4:	3318      	adds	r3, #24
 8011fe6:	4298      	cmp	r0, r3
 8011fe8:	d0e0      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8011fea:	3318      	adds	r3, #24
 8011fec:	4298      	cmp	r0, r3
 8011fee:	d0dd      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8011ff0:	3318      	adds	r3, #24
 8011ff2:	4298      	cmp	r0, r3
 8011ff4:	d0da      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8011ff6:	3318      	adds	r3, #24
 8011ff8:	4298      	cmp	r0, r3
 8011ffa:	d0d7      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8011ffc:	3318      	adds	r3, #24
 8011ffe:	4298      	cmp	r0, r3
 8012000:	d0d4      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8012002:	3318      	adds	r3, #24
 8012004:	4298      	cmp	r0, r3
 8012006:	d0d1      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 8012008:	3318      	adds	r3, #24
 801200a:	4298      	cmp	r0, r3
 801200c:	d0ce      	beq.n	8011fac <DMA_SetCurrDataCounter+0x8>
 801200e:	2301      	movs	r3, #1
 8012010:	9301      	str	r3, [sp, #4]
 8012012:	9b01      	ldr	r3, [sp, #4]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d1fc      	bne.n	8012012 <DMA_SetCurrDataCounter+0x6e>
 8012018:	e7c8      	b.n	8011fac <DMA_SetCurrDataCounter+0x8>
 801201a:	bf00      	nop
 801201c:	40026010 	.word	0x40026010
 8012020:	40026028 	.word	0x40026028

08012024 <DMA_DoubleBufferModeConfig>:
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8012024:	4b26      	ldr	r3, [pc, #152]	; (80120c0 <DMA_DoubleBufferModeConfig+0x9c>)
 8012026:	4298      	cmp	r0, r3
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8012028:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 801202a:	d101      	bne.n	8012030 <DMA_DoubleBufferModeConfig+0xc>
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 801202c:	bba2      	cbnz	r2, 8012098 <DMA_DoubleBufferModeConfig+0x74>
 801202e:	e03f      	b.n	80120b0 <DMA_DoubleBufferModeConfig+0x8c>
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8012030:	4b24      	ldr	r3, [pc, #144]	; (80120c4 <DMA_DoubleBufferModeConfig+0xa0>)
 8012032:	4298      	cmp	r0, r3
 8012034:	d0fa      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 8012036:	3318      	adds	r3, #24
 8012038:	4298      	cmp	r0, r3
 801203a:	d0f7      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 801203c:	3318      	adds	r3, #24
 801203e:	4298      	cmp	r0, r3
 8012040:	d0f4      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 8012042:	3318      	adds	r3, #24
 8012044:	4298      	cmp	r0, r3
 8012046:	d0f1      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 8012048:	3318      	adds	r3, #24
 801204a:	4298      	cmp	r0, r3
 801204c:	d0ee      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 801204e:	3318      	adds	r3, #24
 8012050:	4298      	cmp	r0, r3
 8012052:	d0eb      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 8012054:	3318      	adds	r3, #24
 8012056:	4298      	cmp	r0, r3
 8012058:	d0e8      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 801205a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801205e:	4298      	cmp	r0, r3
 8012060:	d0e4      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 8012062:	3318      	adds	r3, #24
 8012064:	4298      	cmp	r0, r3
 8012066:	d0e1      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 8012068:	3318      	adds	r3, #24
 801206a:	4298      	cmp	r0, r3
 801206c:	d0de      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 801206e:	3318      	adds	r3, #24
 8012070:	4298      	cmp	r0, r3
 8012072:	d0db      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 8012074:	3318      	adds	r3, #24
 8012076:	4298      	cmp	r0, r3
 8012078:	d0d8      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 801207a:	3318      	adds	r3, #24
 801207c:	4298      	cmp	r0, r3
 801207e:	d0d5      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 8012080:	3318      	adds	r3, #24
 8012082:	4298      	cmp	r0, r3
 8012084:	d0d2      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 8012086:	3318      	adds	r3, #24
 8012088:	4298      	cmp	r0, r3
 801208a:	d0cf      	beq.n	801202c <DMA_DoubleBufferModeConfig+0x8>
 801208c:	2301      	movs	r3, #1
 801208e:	9300      	str	r3, [sp, #0]
 8012090:	9b00      	ldr	r3, [sp, #0]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d1fc      	bne.n	8012090 <DMA_DoubleBufferModeConfig+0x6c>
 8012096:	e7c9      	b.n	801202c <DMA_DoubleBufferModeConfig+0x8>
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 8012098:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 801209c:	d004      	beq.n	80120a8 <DMA_DoubleBufferModeConfig+0x84>
 801209e:	2301      	movs	r3, #1
 80120a0:	9301      	str	r3, [sp, #4]
 80120a2:	9b01      	ldr	r3, [sp, #4]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d1fc      	bne.n	80120a2 <DMA_DoubleBufferModeConfig+0x7e>

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 80120a8:	6803      	ldr	r3, [r0, #0]
 80120aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80120ae:	e002      	b.n	80120b6 <DMA_DoubleBufferModeConfig+0x92>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 80120b0:	6803      	ldr	r3, [r0, #0]
 80120b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80120b6:	6003      	str	r3, [r0, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 80120b8:	6101      	str	r1, [r0, #16]
}
 80120ba:	b002      	add	sp, #8
 80120bc:	4770      	bx	lr
 80120be:	bf00      	nop
 80120c0:	40026010 	.word	0x40026010
 80120c4:	40026028 	.word	0x40026028

080120c8 <DMA_DoubleBufferModeCmd>:
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80120c8:	4b25      	ldr	r3, [pc, #148]	; (8012160 <DMA_DoubleBufferModeCmd+0x98>)
 80120ca:	4298      	cmp	r0, r3
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 80120cc:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80120ce:	d104      	bne.n	80120da <DMA_DoubleBufferModeCmd+0x12>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80120d0:	2901      	cmp	r1, #1
 80120d2:	d93d      	bls.n	8012150 <DMA_DoubleBufferModeCmd+0x88>
 80120d4:	2301      	movs	r3, #1
 80120d6:	9301      	str	r3, [sp, #4]
 80120d8:	e033      	b.n	8012142 <DMA_DoubleBufferModeCmd+0x7a>
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80120da:	4b22      	ldr	r3, [pc, #136]	; (8012164 <DMA_DoubleBufferModeCmd+0x9c>)
 80120dc:	4298      	cmp	r0, r3
 80120de:	d0f7      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 80120e0:	3318      	adds	r3, #24
 80120e2:	4298      	cmp	r0, r3
 80120e4:	d0f4      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 80120e6:	3318      	adds	r3, #24
 80120e8:	4298      	cmp	r0, r3
 80120ea:	d0f1      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 80120ec:	3318      	adds	r3, #24
 80120ee:	4298      	cmp	r0, r3
 80120f0:	d0ee      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 80120f2:	3318      	adds	r3, #24
 80120f4:	4298      	cmp	r0, r3
 80120f6:	d0eb      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 80120f8:	3318      	adds	r3, #24
 80120fa:	4298      	cmp	r0, r3
 80120fc:	d0e8      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 80120fe:	3318      	adds	r3, #24
 8012100:	4298      	cmp	r0, r3
 8012102:	d0e5      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 8012104:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012108:	4298      	cmp	r0, r3
 801210a:	d0e1      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 801210c:	3318      	adds	r3, #24
 801210e:	4298      	cmp	r0, r3
 8012110:	d0de      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 8012112:	3318      	adds	r3, #24
 8012114:	4298      	cmp	r0, r3
 8012116:	d0db      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 8012118:	3318      	adds	r3, #24
 801211a:	4298      	cmp	r0, r3
 801211c:	d0d8      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 801211e:	3318      	adds	r3, #24
 8012120:	4298      	cmp	r0, r3
 8012122:	d0d5      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 8012124:	3318      	adds	r3, #24
 8012126:	4298      	cmp	r0, r3
 8012128:	d0d2      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 801212a:	3318      	adds	r3, #24
 801212c:	4298      	cmp	r0, r3
 801212e:	d0cf      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 8012130:	3318      	adds	r3, #24
 8012132:	4298      	cmp	r0, r3
 8012134:	d0cc      	beq.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
 8012136:	2301      	movs	r3, #1
 8012138:	9300      	str	r3, [sp, #0]
 801213a:	9b00      	ldr	r3, [sp, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d1fc      	bne.n	801213a <DMA_DoubleBufferModeCmd+0x72>
 8012140:	e7c6      	b.n	80120d0 <DMA_DoubleBufferModeCmd+0x8>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8012142:	9b01      	ldr	r3, [sp, #4]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d1fc      	bne.n	8012142 <DMA_DoubleBufferModeCmd+0x7a>

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8012148:	6803      	ldr	r3, [r0, #0]
 801214a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801214e:	e004      	b.n	801215a <DMA_DoubleBufferModeCmd+0x92>
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8012150:	2900      	cmp	r1, #0
 8012152:	d1f9      	bne.n	8012148 <DMA_DoubleBufferModeCmd+0x80>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8012154:	6803      	ldr	r3, [r0, #0]
 8012156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801215a:	6003      	str	r3, [r0, #0]
  }
}
 801215c:	b002      	add	sp, #8
 801215e:	4770      	bx	lr
 8012160:	40026010 	.word	0x40026010
 8012164:	40026028 	.word	0x40026028

08012168 <DMA_MemoryTargetConfig>:
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8012168:	4b23      	ldr	r3, [pc, #140]	; (80121f8 <DMA_MemoryTargetConfig+0x90>)
 801216a:	4298      	cmp	r0, r3
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 801216c:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 801216e:	d101      	bne.n	8012174 <DMA_MemoryTargetConfig+0xc>
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 8012170:	bba2      	cbnz	r2, 80121dc <DMA_MemoryTargetConfig+0x74>
 8012172:	e03d      	b.n	80121f0 <DMA_MemoryTargetConfig+0x88>
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8012174:	4b21      	ldr	r3, [pc, #132]	; (80121fc <DMA_MemoryTargetConfig+0x94>)
 8012176:	4298      	cmp	r0, r3
 8012178:	d0fa      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 801217a:	3318      	adds	r3, #24
 801217c:	4298      	cmp	r0, r3
 801217e:	d0f7      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 8012180:	3318      	adds	r3, #24
 8012182:	4298      	cmp	r0, r3
 8012184:	d0f4      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 8012186:	3318      	adds	r3, #24
 8012188:	4298      	cmp	r0, r3
 801218a:	d0f1      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 801218c:	3318      	adds	r3, #24
 801218e:	4298      	cmp	r0, r3
 8012190:	d0ee      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 8012192:	3318      	adds	r3, #24
 8012194:	4298      	cmp	r0, r3
 8012196:	d0eb      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 8012198:	3318      	adds	r3, #24
 801219a:	4298      	cmp	r0, r3
 801219c:	d0e8      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 801219e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80121a2:	4298      	cmp	r0, r3
 80121a4:	d0e4      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 80121a6:	3318      	adds	r3, #24
 80121a8:	4298      	cmp	r0, r3
 80121aa:	d0e1      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 80121ac:	3318      	adds	r3, #24
 80121ae:	4298      	cmp	r0, r3
 80121b0:	d0de      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 80121b2:	3318      	adds	r3, #24
 80121b4:	4298      	cmp	r0, r3
 80121b6:	d0db      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 80121b8:	3318      	adds	r3, #24
 80121ba:	4298      	cmp	r0, r3
 80121bc:	d0d8      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 80121be:	3318      	adds	r3, #24
 80121c0:	4298      	cmp	r0, r3
 80121c2:	d0d5      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 80121c4:	3318      	adds	r3, #24
 80121c6:	4298      	cmp	r0, r3
 80121c8:	d0d2      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 80121ca:	3318      	adds	r3, #24
 80121cc:	4298      	cmp	r0, r3
 80121ce:	d0cf      	beq.n	8012170 <DMA_MemoryTargetConfig+0x8>
 80121d0:	2301      	movs	r3, #1
 80121d2:	9300      	str	r3, [sp, #0]
 80121d4:	9b00      	ldr	r3, [sp, #0]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d1fc      	bne.n	80121d4 <DMA_MemoryTargetConfig+0x6c>
 80121da:	e7c9      	b.n	8012170 <DMA_MemoryTargetConfig+0x8>
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 80121dc:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80121e0:	d004      	beq.n	80121ec <DMA_MemoryTargetConfig+0x84>
 80121e2:	2301      	movs	r3, #1
 80121e4:	9301      	str	r3, [sp, #4]
 80121e6:	9b01      	ldr	r3, [sp, #4]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d1fc      	bne.n	80121e6 <DMA_MemoryTargetConfig+0x7e>
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 80121ec:	6101      	str	r1, [r0, #16]
 80121ee:	e000      	b.n	80121f2 <DMA_MemoryTargetConfig+0x8a>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 80121f0:	60c1      	str	r1, [r0, #12]
  }
}
 80121f2:	b002      	add	sp, #8
 80121f4:	4770      	bx	lr
 80121f6:	bf00      	nop
 80121f8:	40026010 	.word	0x40026010
 80121fc:	40026028 	.word	0x40026028

08012200 <DMA_GetCurrentMemoryTarget>:
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
  uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8012200:	4b1d      	ldr	r3, [pc, #116]	; (8012278 <DMA_GetCurrentMemoryTarget+0x78>)
 8012202:	4298      	cmp	r0, r3
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8012204:	b082      	sub	sp, #8
  uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8012206:	d032      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 8012208:	3318      	adds	r3, #24
 801220a:	4298      	cmp	r0, r3
 801220c:	d02f      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 801220e:	3318      	adds	r3, #24
 8012210:	4298      	cmp	r0, r3
 8012212:	d02c      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 8012214:	3318      	adds	r3, #24
 8012216:	4298      	cmp	r0, r3
 8012218:	d029      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 801221a:	3318      	adds	r3, #24
 801221c:	4298      	cmp	r0, r3
 801221e:	d026      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 8012220:	3318      	adds	r3, #24
 8012222:	4298      	cmp	r0, r3
 8012224:	d023      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 8012226:	3318      	adds	r3, #24
 8012228:	4298      	cmp	r0, r3
 801222a:	d020      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 801222c:	3318      	adds	r3, #24
 801222e:	4298      	cmp	r0, r3
 8012230:	d01d      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 8012232:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012236:	4298      	cmp	r0, r3
 8012238:	d019      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 801223a:	3318      	adds	r3, #24
 801223c:	4298      	cmp	r0, r3
 801223e:	d016      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 8012240:	3318      	adds	r3, #24
 8012242:	4298      	cmp	r0, r3
 8012244:	d013      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 8012246:	3318      	adds	r3, #24
 8012248:	4298      	cmp	r0, r3
 801224a:	d010      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 801224c:	3318      	adds	r3, #24
 801224e:	4298      	cmp	r0, r3
 8012250:	d00d      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 8012252:	3318      	adds	r3, #24
 8012254:	4298      	cmp	r0, r3
 8012256:	d00a      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 8012258:	3318      	adds	r3, #24
 801225a:	4298      	cmp	r0, r3
 801225c:	d007      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 801225e:	3318      	adds	r3, #24
 8012260:	4298      	cmp	r0, r3
 8012262:	d004      	beq.n	801226e <DMA_GetCurrentMemoryTarget+0x6e>
 8012264:	2301      	movs	r3, #1
 8012266:	9301      	str	r3, [sp, #4]
 8012268:	9b01      	ldr	r3, [sp, #4]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d1fc      	bne.n	8012268 <DMA_GetCurrentMemoryTarget+0x68>

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 801226e:	6800      	ldr	r0, [r0, #0]
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
  }
  return tmp;
 8012270:	f3c0 40c0 	ubfx	r0, r0, #19, #1
}
 8012274:	b002      	add	sp, #8
 8012276:	4770      	bx	lr
 8012278:	40026010 	.word	0x40026010

0801227c <DMA_GetCmdStatus>:
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
  FunctionalState state = DISABLE;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 801227c:	4b1d      	ldr	r3, [pc, #116]	; (80122f4 <DMA_GetCmdStatus+0x78>)
 801227e:	4298      	cmp	r0, r3
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8012280:	b082      	sub	sp, #8
  FunctionalState state = DISABLE;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8012282:	d032      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 8012284:	3318      	adds	r3, #24
 8012286:	4298      	cmp	r0, r3
 8012288:	d02f      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 801228a:	3318      	adds	r3, #24
 801228c:	4298      	cmp	r0, r3
 801228e:	d02c      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 8012290:	3318      	adds	r3, #24
 8012292:	4298      	cmp	r0, r3
 8012294:	d029      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 8012296:	3318      	adds	r3, #24
 8012298:	4298      	cmp	r0, r3
 801229a:	d026      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 801229c:	3318      	adds	r3, #24
 801229e:	4298      	cmp	r0, r3
 80122a0:	d023      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 80122a2:	3318      	adds	r3, #24
 80122a4:	4298      	cmp	r0, r3
 80122a6:	d020      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 80122a8:	3318      	adds	r3, #24
 80122aa:	4298      	cmp	r0, r3
 80122ac:	d01d      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 80122ae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80122b2:	4298      	cmp	r0, r3
 80122b4:	d019      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 80122b6:	3318      	adds	r3, #24
 80122b8:	4298      	cmp	r0, r3
 80122ba:	d016      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 80122bc:	3318      	adds	r3, #24
 80122be:	4298      	cmp	r0, r3
 80122c0:	d013      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 80122c2:	3318      	adds	r3, #24
 80122c4:	4298      	cmp	r0, r3
 80122c6:	d010      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 80122c8:	3318      	adds	r3, #24
 80122ca:	4298      	cmp	r0, r3
 80122cc:	d00d      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 80122ce:	3318      	adds	r3, #24
 80122d0:	4298      	cmp	r0, r3
 80122d2:	d00a      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 80122d4:	3318      	adds	r3, #24
 80122d6:	4298      	cmp	r0, r3
 80122d8:	d007      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 80122da:	3318      	adds	r3, #24
 80122dc:	4298      	cmp	r0, r3
 80122de:	d004      	beq.n	80122ea <DMA_GetCmdStatus+0x6e>
 80122e0:	2301      	movs	r3, #1
 80122e2:	9301      	str	r3, [sp, #4]
 80122e4:	9b01      	ldr	r3, [sp, #4]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d1fc      	bne.n	80122e4 <DMA_GetCmdStatus+0x68>

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80122ea:	6800      	ldr	r0, [r0, #0]
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
  }
  return state;
 80122ec:	f000 0001 	and.w	r0, r0, #1
}
 80122f0:	b002      	add	sp, #8
 80122f2:	4770      	bx	lr
 80122f4:	40026010 	.word	0x40026010

080122f8 <DMA_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80122f8:	4b70      	ldr	r3, [pc, #448]	; (80124bc <DMA_GetFlagStatus+0x1c4>)
 80122fa:	4298      	cmp	r0, r3
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80122fc:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80122fe:	d106      	bne.n	801230e <DMA_GetFlagStatus+0x16>
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 8012300:	f101 4370 	add.w	r3, r1, #4026531840	; 0xf0000000
 8012304:	3b08      	subs	r3, #8
 8012306:	2b18      	cmp	r3, #24
 8012308:	f200 80c5 	bhi.w	8012496 <DMA_GetFlagStatus+0x19e>
 801230c:	e033      	b.n	8012376 <DMA_GetFlagStatus+0x7e>
  FlagStatus bitstatus = RESET;
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 801230e:	4b6c      	ldr	r3, [pc, #432]	; (80124c0 <DMA_GetFlagStatus+0x1c8>)
 8012310:	4298      	cmp	r0, r3
 8012312:	d0f5      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 8012314:	3318      	adds	r3, #24
 8012316:	4298      	cmp	r0, r3
 8012318:	d0f2      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 801231a:	3318      	adds	r3, #24
 801231c:	4298      	cmp	r0, r3
 801231e:	d0ef      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 8012320:	3318      	adds	r3, #24
 8012322:	4298      	cmp	r0, r3
 8012324:	d0ec      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 8012326:	3318      	adds	r3, #24
 8012328:	4298      	cmp	r0, r3
 801232a:	d0e9      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 801232c:	3318      	adds	r3, #24
 801232e:	4298      	cmp	r0, r3
 8012330:	d0e6      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 8012332:	3318      	adds	r3, #24
 8012334:	4298      	cmp	r0, r3
 8012336:	d0e3      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 8012338:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801233c:	4298      	cmp	r0, r3
 801233e:	d0df      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 8012340:	3318      	adds	r3, #24
 8012342:	4298      	cmp	r0, r3
 8012344:	d0dc      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 8012346:	3318      	adds	r3, #24
 8012348:	4298      	cmp	r0, r3
 801234a:	d0d9      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 801234c:	3318      	adds	r3, #24
 801234e:	4298      	cmp	r0, r3
 8012350:	d0d6      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 8012352:	3318      	adds	r3, #24
 8012354:	4298      	cmp	r0, r3
 8012356:	d0d3      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 8012358:	3318      	adds	r3, #24
 801235a:	4298      	cmp	r0, r3
 801235c:	d0d0      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 801235e:	3318      	adds	r3, #24
 8012360:	4298      	cmp	r0, r3
 8012362:	d0cd      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 8012364:	3318      	adds	r3, #24
 8012366:	4298      	cmp	r0, r3
 8012368:	d0ca      	beq.n	8012300 <DMA_GetFlagStatus+0x8>
 801236a:	2301      	movs	r3, #1
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	9b00      	ldr	r3, [sp, #0]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d1fc      	bne.n	801236e <DMA_GetFlagStatus+0x76>
 8012374:	e7c4      	b.n	8012300 <DMA_GetFlagStatus+0x8>
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 8012376:	4a53      	ldr	r2, [pc, #332]	; (80124c4 <DMA_GetFlagStatus+0x1cc>)
 8012378:	fa22 f303 	lsr.w	r3, r2, r3
 801237c:	07da      	lsls	r2, r3, #31
 801237e:	f100 808e 	bmi.w	801249e <DMA_GetFlagStatus+0x1a6>
 8012382:	4b51      	ldr	r3, [pc, #324]	; (80124c8 <DMA_GetFlagStatus+0x1d0>)
 8012384:	4299      	cmp	r1, r3
 8012386:	f000 808a 	beq.w	801249e <DMA_GetFlagStatus+0x1a6>
 801238a:	4b50      	ldr	r3, [pc, #320]	; (80124cc <DMA_GetFlagStatus+0x1d4>)
 801238c:	4299      	cmp	r1, r3
 801238e:	f000 8086 	beq.w	801249e <DMA_GetFlagStatus+0x1a6>
 8012392:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012396:	4299      	cmp	r1, r3
 8012398:	f000 8081 	beq.w	801249e <DMA_GetFlagStatus+0x1a6>
 801239c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80123a0:	4299      	cmp	r1, r3
 80123a2:	d07c      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80123a8:	4299      	cmp	r1, r3
 80123aa:	d078      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123ac:	3bc0      	subs	r3, #192	; 0xc0
 80123ae:	4299      	cmp	r1, r3
 80123b0:	d075      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123b2:	f1b1 5f81 	cmp.w	r1, #270532608	; 0x10200000
 80123b6:	d072      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123b8:	4b45      	ldr	r3, [pc, #276]	; (80124d0 <DMA_GetFlagStatus+0x1d8>)
 80123ba:	4299      	cmp	r1, r3
 80123bc:	d06f      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123be:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 80123c2:	4299      	cmp	r1, r3
 80123c4:	d06b      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123c6:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 80123ca:	4299      	cmp	r1, r3
 80123cc:	d067      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123ce:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80123d2:	4299      	cmp	r1, r3
 80123d4:	d063      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123d6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 80123da:	d060      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123dc:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
 80123e0:	d05d      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123e2:	f1b1 5f90 	cmp.w	r1, #301989888	; 0x12000000
 80123e6:	d05a      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123e8:	f1b1 5f88 	cmp.w	r1, #285212672	; 0x11000000
 80123ec:	d057      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123ee:	f1b1 5f82 	cmp.w	r1, #272629760	; 0x10400000
 80123f2:	d054      	beq.n	801249e <DMA_GetFlagStatus+0x1a6>
 80123f4:	f101 4360 	add.w	r3, r1, #3758096384	; 0xe0000000
 80123f8:	3b01      	subs	r3, #1
 80123fa:	2b1f      	cmp	r3, #31
 80123fc:	d842      	bhi.n	8012484 <DMA_GetFlagStatus+0x18c>
 80123fe:	4a35      	ldr	r2, [pc, #212]	; (80124d4 <DMA_GetFlagStatus+0x1dc>)
 8012400:	fa22 f303 	lsr.w	r3, r2, r3
 8012404:	07db      	lsls	r3, r3, #31
 8012406:	d440      	bmi.n	801248a <DMA_GetFlagStatus+0x192>
 8012408:	4b33      	ldr	r3, [pc, #204]	; (80124d8 <DMA_GetFlagStatus+0x1e0>)
 801240a:	4299      	cmp	r1, r3
 801240c:	d03d      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 801240e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8012412:	4299      	cmp	r1, r3
 8012414:	d039      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 8012416:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801241a:	4299      	cmp	r1, r3
 801241c:	d035      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 801241e:	3bc0      	subs	r3, #192	; 0xc0
 8012420:	4299      	cmp	r1, r3
 8012422:	d032      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 8012424:	4b2d      	ldr	r3, [pc, #180]	; (80124dc <DMA_GetFlagStatus+0x1e4>)
 8012426:	4299      	cmp	r1, r3
 8012428:	d02f      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 801242a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801242e:	4299      	cmp	r1, r3
 8012430:	d02b      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 8012432:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8012436:	4299      	cmp	r1, r3
 8012438:	d027      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 801243a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 801243e:	4299      	cmp	r1, r3
 8012440:	d023      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 8012442:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8012446:	4299      	cmp	r1, r3
 8012448:	d01f      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 801244a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
 801244e:	d01c      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 8012450:	f1b1 5f10 	cmp.w	r1, #603979776	; 0x24000000
 8012454:	d019      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 8012456:	f1b1 5f08 	cmp.w	r1, #570425344	; 0x22000000
 801245a:	d016      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 801245c:	f1b1 5f04 	cmp.w	r1, #553648128	; 0x21000000
 8012460:	d013      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 8012462:	f1b1 5f01 	cmp.w	r1, #541065216	; 0x20400000
 8012466:	d010      	beq.n	801248a <DMA_GetFlagStatus+0x192>
 8012468:	2301      	movs	r3, #1
 801246a:	9301      	str	r3, [sp, #4]
 801246c:	9b01      	ldr	r3, [sp, #4]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d1fc      	bne.n	801246c <DMA_GetFlagStatus+0x174>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8012472:	4b1b      	ldr	r3, [pc, #108]	; (80124e0 <DMA_GetFlagStatus+0x1e8>)
 8012474:	4298      	cmp	r0, r3
 8012476:	d901      	bls.n	801247c <DMA_GetFlagStatus+0x184>
    DMAy = DMA1; 
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8012478:	4b1a      	ldr	r3, [pc, #104]	; (80124e4 <DMA_GetFlagStatus+0x1ec>)
 801247a:	e000      	b.n	801247e <DMA_GetFlagStatus+0x186>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 801247c:	4b1a      	ldr	r3, [pc, #104]	; (80124e8 <DMA_GetFlagStatus+0x1f0>)
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 801247e:	008a      	lsls	r2, r1, #2
 8012480:	d407      	bmi.n	8012492 <DMA_GetFlagStatus+0x19a>
 8012482:	e010      	b.n	80124a6 <DMA_GetFlagStatus+0x1ae>
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 8012484:	4b19      	ldr	r3, [pc, #100]	; (80124ec <DMA_GetFlagStatus+0x1f4>)
 8012486:	4299      	cmp	r1, r3
 8012488:	d1be      	bne.n	8012408 <DMA_GetFlagStatus+0x110>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 801248a:	4b15      	ldr	r3, [pc, #84]	; (80124e0 <DMA_GetFlagStatus+0x1e8>)
 801248c:	4298      	cmp	r0, r3
 801248e:	d8f3      	bhi.n	8012478 <DMA_GetFlagStatus+0x180>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8012490:	4b15      	ldr	r3, [pc, #84]	; (80124e8 <DMA_GetFlagStatus+0x1f0>)

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	e008      	b.n	80124a8 <DMA_GetFlagStatus+0x1b0>
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 8012496:	4b16      	ldr	r3, [pc, #88]	; (80124f0 <DMA_GetFlagStatus+0x1f8>)
 8012498:	4299      	cmp	r1, r3
 801249a:	f47f af72 	bne.w	8012382 <DMA_GetFlagStatus+0x8a>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 801249e:	4b10      	ldr	r3, [pc, #64]	; (80124e0 <DMA_GetFlagStatus+0x1e8>)
 80124a0:	4298      	cmp	r0, r3
 80124a2:	d8e9      	bhi.n	8012478 <DMA_GetFlagStatus+0x180>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80124a4:	4b10      	ldr	r3, [pc, #64]	; (80124e8 <DMA_GetFlagStatus+0x1f0>)
    tmpreg = DMAy->HISR;
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80124a6:	681b      	ldr	r3, [r3, #0]
    /* DMA_FLAG is reset */
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80124a8:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80124ac:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 80124b0:	4219      	tst	r1, r3
 80124b2:	bf14      	ite	ne
 80124b4:	2001      	movne	r0, #1
 80124b6:	2000      	moveq	r0, #0
}
 80124b8:	b002      	add	sp, #8
 80124ba:	4770      	bx	lr
 80124bc:	40026010 	.word	0x40026010
 80124c0:	40026028 	.word	0x40026028
 80124c4:	01000101 	.word	0x01000101
 80124c8:	10800001 	.word	0x10800001
 80124cc:	10000800 	.word	0x10000800
 80124d0:	10100000 	.word	0x10100000
 80124d4:	80008089 	.word	0x80008089
 80124d8:	20000400 	.word	0x20000400
 80124dc:	20200000 	.word	0x20200000
 80124e0:	4002640f 	.word	0x4002640f
 80124e4:	40026400 	.word	0x40026400
 80124e8:	40026000 	.word	0x40026000
 80124ec:	20000800 	.word	0x20000800
 80124f0:	10800004 	.word	0x10800004

080124f4 <DMA_ClearFlag>:
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80124f4:	4b2e      	ldr	r3, [pc, #184]	; (80125b0 <DMA_ClearFlag+0xbc>)
 80124f6:	4298      	cmp	r0, r3
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80124f8:	b513      	push	{r0, r1, r4, lr}
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80124fa:	d105      	bne.n	8012508 <DMA_ClearFlag+0x14>
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
 80124fc:	f001 5340 	and.w	r3, r1, #805306368	; 0x30000000
 8012500:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012504:	d134      	bne.n	8012570 <DMA_ClearFlag+0x7c>
 8012506:	e047      	b.n	8012598 <DMA_ClearFlag+0xa4>
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8012508:	4b2a      	ldr	r3, [pc, #168]	; (80125b4 <DMA_ClearFlag+0xc0>)
 801250a:	4298      	cmp	r0, r3
 801250c:	d0f6      	beq.n	80124fc <DMA_ClearFlag+0x8>
 801250e:	3318      	adds	r3, #24
 8012510:	4298      	cmp	r0, r3
 8012512:	d0f3      	beq.n	80124fc <DMA_ClearFlag+0x8>
 8012514:	3318      	adds	r3, #24
 8012516:	4298      	cmp	r0, r3
 8012518:	d0f0      	beq.n	80124fc <DMA_ClearFlag+0x8>
 801251a:	3318      	adds	r3, #24
 801251c:	4298      	cmp	r0, r3
 801251e:	d0ed      	beq.n	80124fc <DMA_ClearFlag+0x8>
 8012520:	3318      	adds	r3, #24
 8012522:	4298      	cmp	r0, r3
 8012524:	d0ea      	beq.n	80124fc <DMA_ClearFlag+0x8>
 8012526:	3318      	adds	r3, #24
 8012528:	4298      	cmp	r0, r3
 801252a:	d0e7      	beq.n	80124fc <DMA_ClearFlag+0x8>
 801252c:	3318      	adds	r3, #24
 801252e:	4298      	cmp	r0, r3
 8012530:	d0e4      	beq.n	80124fc <DMA_ClearFlag+0x8>
 8012532:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012536:	4298      	cmp	r0, r3
 8012538:	d0e0      	beq.n	80124fc <DMA_ClearFlag+0x8>
 801253a:	3318      	adds	r3, #24
 801253c:	4298      	cmp	r0, r3
 801253e:	d0dd      	beq.n	80124fc <DMA_ClearFlag+0x8>
 8012540:	3318      	adds	r3, #24
 8012542:	4298      	cmp	r0, r3
 8012544:	d0da      	beq.n	80124fc <DMA_ClearFlag+0x8>
 8012546:	3318      	adds	r3, #24
 8012548:	4298      	cmp	r0, r3
 801254a:	d0d7      	beq.n	80124fc <DMA_ClearFlag+0x8>
 801254c:	3318      	adds	r3, #24
 801254e:	4298      	cmp	r0, r3
 8012550:	d0d4      	beq.n	80124fc <DMA_ClearFlag+0x8>
 8012552:	3318      	adds	r3, #24
 8012554:	4298      	cmp	r0, r3
 8012556:	d0d1      	beq.n	80124fc <DMA_ClearFlag+0x8>
 8012558:	3318      	adds	r3, #24
 801255a:	4298      	cmp	r0, r3
 801255c:	d0ce      	beq.n	80124fc <DMA_ClearFlag+0x8>
 801255e:	3318      	adds	r3, #24
 8012560:	4298      	cmp	r0, r3
 8012562:	d0cb      	beq.n	80124fc <DMA_ClearFlag+0x8>
 8012564:	2301      	movs	r3, #1
 8012566:	9300      	str	r3, [sp, #0]
 8012568:	9b00      	ldr	r3, [sp, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d1fc      	bne.n	8012568 <DMA_ClearFlag+0x74>
 801256e:	e7c5      	b.n	80124fc <DMA_ClearFlag+0x8>
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
 8012570:	b193      	cbz	r3, 8012598 <DMA_ClearFlag+0xa4>
 8012572:	4b11      	ldr	r3, [pc, #68]	; (80125b8 <DMA_ClearFlag+0xc4>)
 8012574:	400b      	ands	r3, r1
 8012576:	b97b      	cbnz	r3, 8012598 <DMA_ClearFlag+0xa4>
    DMAy = DMA1; 
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8012578:	4a10      	ldr	r2, [pc, #64]	; (80125bc <DMA_ClearFlag+0xc8>)
 801257a:	4b11      	ldr	r3, [pc, #68]	; (80125c0 <DMA_ClearFlag+0xcc>)
 801257c:	4c11      	ldr	r4, [pc, #68]	; (80125c4 <DMA_ClearFlag+0xd0>)
 801257e:	42a0      	cmp	r0, r4
 8012580:	bf94      	ite	ls
 8012582:	4618      	movls	r0, r3
 8012584:	4610      	movhi	r0, r2
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8012586:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 801258a:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 801258e:	d009      	beq.n	80125a4 <DMA_ClearFlag+0xb0>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8012590:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 8012594:	60c1      	str	r1, [r0, #12]
 8012596:	e008      	b.n	80125aa <DMA_ClearFlag+0xb6>
{
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
 8012598:	2301      	movs	r3, #1
 801259a:	9301      	str	r3, [sp, #4]
 801259c:	9b01      	ldr	r3, [sp, #4]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d1fc      	bne.n	801259c <DMA_ClearFlag+0xa8>
 80125a2:	e7e9      	b.n	8012578 <DMA_ClearFlag+0x84>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80125a4:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 80125a8:	6081      	str	r1, [r0, #8]
  }    
}
 80125aa:	b002      	add	sp, #8
 80125ac:	bd10      	pop	{r4, pc}
 80125ae:	bf00      	nop
 80125b0:	40026010 	.word	0x40026010
 80125b4:	40026028 	.word	0x40026028
 80125b8:	c002f082 	.word	0xc002f082
 80125bc:	40026400 	.word	0x40026400
 80125c0:	40026000 	.word	0x40026000
 80125c4:	4002640f 	.word	0x4002640f

080125c8 <DMA_ITConfig>:
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80125c8:	4b35      	ldr	r3, [pc, #212]	; (80126a0 <DMA_ITConfig+0xd8>)
 80125ca:	4298      	cmp	r0, r3
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80125cc:	b084      	sub	sp, #16
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80125ce:	d103      	bne.n	80125d8 <DMA_ITConfig+0x10>
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 80125d0:	f031 039e 	bics.w	r3, r1, #158	; 0x9e
 80125d4:	d138      	bne.n	8012648 <DMA_ITConfig+0x80>
 80125d6:	e033      	b.n	8012640 <DMA_ITConfig+0x78>
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80125d8:	4b32      	ldr	r3, [pc, #200]	; (80126a4 <DMA_ITConfig+0xdc>)
 80125da:	4298      	cmp	r0, r3
 80125dc:	d0f8      	beq.n	80125d0 <DMA_ITConfig+0x8>
 80125de:	3318      	adds	r3, #24
 80125e0:	4298      	cmp	r0, r3
 80125e2:	d0f5      	beq.n	80125d0 <DMA_ITConfig+0x8>
 80125e4:	3318      	adds	r3, #24
 80125e6:	4298      	cmp	r0, r3
 80125e8:	d0f2      	beq.n	80125d0 <DMA_ITConfig+0x8>
 80125ea:	3318      	adds	r3, #24
 80125ec:	4298      	cmp	r0, r3
 80125ee:	d0ef      	beq.n	80125d0 <DMA_ITConfig+0x8>
 80125f0:	3318      	adds	r3, #24
 80125f2:	4298      	cmp	r0, r3
 80125f4:	d0ec      	beq.n	80125d0 <DMA_ITConfig+0x8>
 80125f6:	3318      	adds	r3, #24
 80125f8:	4298      	cmp	r0, r3
 80125fa:	d0e9      	beq.n	80125d0 <DMA_ITConfig+0x8>
 80125fc:	3318      	adds	r3, #24
 80125fe:	4298      	cmp	r0, r3
 8012600:	d0e6      	beq.n	80125d0 <DMA_ITConfig+0x8>
 8012602:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012606:	4298      	cmp	r0, r3
 8012608:	d0e2      	beq.n	80125d0 <DMA_ITConfig+0x8>
 801260a:	3318      	adds	r3, #24
 801260c:	4298      	cmp	r0, r3
 801260e:	d0df      	beq.n	80125d0 <DMA_ITConfig+0x8>
 8012610:	3318      	adds	r3, #24
 8012612:	4298      	cmp	r0, r3
 8012614:	d0dc      	beq.n	80125d0 <DMA_ITConfig+0x8>
 8012616:	3318      	adds	r3, #24
 8012618:	4298      	cmp	r0, r3
 801261a:	d0d9      	beq.n	80125d0 <DMA_ITConfig+0x8>
 801261c:	3318      	adds	r3, #24
 801261e:	4298      	cmp	r0, r3
 8012620:	d0d6      	beq.n	80125d0 <DMA_ITConfig+0x8>
 8012622:	3318      	adds	r3, #24
 8012624:	4298      	cmp	r0, r3
 8012626:	d0d3      	beq.n	80125d0 <DMA_ITConfig+0x8>
 8012628:	3318      	adds	r3, #24
 801262a:	4298      	cmp	r0, r3
 801262c:	d0d0      	beq.n	80125d0 <DMA_ITConfig+0x8>
 801262e:	3318      	adds	r3, #24
 8012630:	4298      	cmp	r0, r3
 8012632:	d0cd      	beq.n	80125d0 <DMA_ITConfig+0x8>
 8012634:	2301      	movs	r3, #1
 8012636:	9301      	str	r3, [sp, #4]
 8012638:	9b01      	ldr	r3, [sp, #4]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d1fc      	bne.n	8012638 <DMA_ITConfig+0x70>
 801263e:	e7c7      	b.n	80125d0 <DMA_ITConfig+0x8>
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 8012640:	b111      	cbz	r1, 8012648 <DMA_ITConfig+0x80>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8012642:	2a01      	cmp	r2, #1
 8012644:	d806      	bhi.n	8012654 <DMA_ITConfig+0x8c>
 8012646:	e00a      	b.n	801265e <DMA_ITConfig+0x96>
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 8012648:	2301      	movs	r3, #1
 801264a:	9302      	str	r3, [sp, #8]
 801264c:	9b02      	ldr	r3, [sp, #8]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d1fc      	bne.n	801264c <DMA_ITConfig+0x84>
 8012652:	e7f6      	b.n	8012642 <DMA_ITConfig+0x7a>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8012654:	2301      	movs	r3, #1
 8012656:	9303      	str	r3, [sp, #12]
 8012658:	9b03      	ldr	r3, [sp, #12]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d1fc      	bne.n	8012658 <DMA_ITConfig+0x90>

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 801265e:	060b      	lsls	r3, r1, #24
 8012660:	d511      	bpl.n	8012686 <DMA_ITConfig+0xbe>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8012662:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 8012664:	b14a      	cbz	r2, 801267a <DMA_ITConfig+0xb2>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8012666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 801266a:	2980      	cmp	r1, #128	; 0x80
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 801266c:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 801266e:	d014      	beq.n	801269a <DMA_ITConfig+0xd2>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8012670:	6803      	ldr	r3, [r0, #0]
 8012672:	f001 011e 	and.w	r1, r1, #30
 8012676:	4319      	orrs	r1, r3
 8012678:	e00e      	b.n	8012698 <DMA_ITConfig+0xd0>
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 801267a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 801267e:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8012680:	6143      	str	r3, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8012682:	d104      	bne.n	801268e <DMA_ITConfig+0xc6>
 8012684:	e009      	b.n	801269a <DMA_ITConfig+0xd2>
 8012686:	2980      	cmp	r1, #128	; 0x80
 8012688:	d007      	beq.n	801269a <DMA_ITConfig+0xd2>
  {
    if (NewState != DISABLE)
 801268a:	2a00      	cmp	r2, #0
 801268c:	d1f0      	bne.n	8012670 <DMA_ITConfig+0xa8>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 801268e:	6803      	ldr	r3, [r0, #0]
 8012690:	f001 011e 	and.w	r1, r1, #30
 8012694:	ea23 0101 	bic.w	r1, r3, r1
 8012698:	6001      	str	r1, [r0, #0]
    }    
  }
}
 801269a:	b004      	add	sp, #16
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop
 80126a0:	40026010 	.word	0x40026010
 80126a4:	40026028 	.word	0x40026028

080126a8 <DMA_GetITStatus>:
  ITStatus bitstatus = RESET;
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80126a8:	4b85      	ldr	r3, [pc, #532]	; (80128c0 <DMA_GetITStatus+0x218>)
 80126aa:	4298      	cmp	r0, r3
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80126ac:	b082      	sub	sp, #8
  ITStatus bitstatus = RESET;
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80126ae:	f000 8100 	beq.w	80128b2 <DMA_GetITStatus+0x20a>
 80126b2:	4b84      	ldr	r3, [pc, #528]	; (80128c4 <DMA_GetITStatus+0x21c>)
 80126b4:	4298      	cmp	r0, r3
 80126b6:	f000 80fc 	beq.w	80128b2 <DMA_GetITStatus+0x20a>
 80126ba:	3318      	adds	r3, #24
 80126bc:	4298      	cmp	r0, r3
 80126be:	f000 80f8 	beq.w	80128b2 <DMA_GetITStatus+0x20a>
 80126c2:	3318      	adds	r3, #24
 80126c4:	4298      	cmp	r0, r3
 80126c6:	f000 80f4 	beq.w	80128b2 <DMA_GetITStatus+0x20a>
 80126ca:	3318      	adds	r3, #24
 80126cc:	4298      	cmp	r0, r3
 80126ce:	f000 80f0 	beq.w	80128b2 <DMA_GetITStatus+0x20a>
 80126d2:	3318      	adds	r3, #24
 80126d4:	4298      	cmp	r0, r3
 80126d6:	f000 80ec 	beq.w	80128b2 <DMA_GetITStatus+0x20a>
 80126da:	3318      	adds	r3, #24
 80126dc:	4298      	cmp	r0, r3
 80126de:	f000 80e8 	beq.w	80128b2 <DMA_GetITStatus+0x20a>
 80126e2:	3318      	adds	r3, #24
 80126e4:	4298      	cmp	r0, r3
 80126e6:	f000 80e4 	beq.w	80128b2 <DMA_GetITStatus+0x20a>
 80126ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80126ee:	4298      	cmp	r0, r3
 80126f0:	d01d      	beq.n	801272e <DMA_GetITStatus+0x86>
 80126f2:	3318      	adds	r3, #24
 80126f4:	4298      	cmp	r0, r3
 80126f6:	d01a      	beq.n	801272e <DMA_GetITStatus+0x86>
 80126f8:	3318      	adds	r3, #24
 80126fa:	4298      	cmp	r0, r3
 80126fc:	d017      	beq.n	801272e <DMA_GetITStatus+0x86>
 80126fe:	3318      	adds	r3, #24
 8012700:	4298      	cmp	r0, r3
 8012702:	d014      	beq.n	801272e <DMA_GetITStatus+0x86>
 8012704:	3318      	adds	r3, #24
 8012706:	4298      	cmp	r0, r3
 8012708:	d011      	beq.n	801272e <DMA_GetITStatus+0x86>
 801270a:	3318      	adds	r3, #24
 801270c:	4298      	cmp	r0, r3
 801270e:	d00e      	beq.n	801272e <DMA_GetITStatus+0x86>
 8012710:	3318      	adds	r3, #24
 8012712:	4298      	cmp	r0, r3
 8012714:	d00b      	beq.n	801272e <DMA_GetITStatus+0x86>
 8012716:	3318      	adds	r3, #24
 8012718:	4298      	cmp	r0, r3
 801271a:	d008      	beq.n	801272e <DMA_GetITStatus+0x86>
 801271c:	2301      	movs	r3, #1
 801271e:	9300      	str	r3, [sp, #0]
 8012720:	9b00      	ldr	r3, [sp, #0]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d1fc      	bne.n	8012720 <DMA_GetITStatus+0x78>
  assert_param(IS_DMA_GET_IT(DMA_IT));
 8012726:	4b68      	ldr	r3, [pc, #416]	; (80128c8 <DMA_GetITStatus+0x220>)
 8012728:	4299      	cmp	r1, r3
 801272a:	d104      	bne.n	8012736 <DMA_GetITStatus+0x8e>
 801272c:	e0a2      	b.n	8012874 <DMA_GetITStatus+0x1cc>
 801272e:	4b66      	ldr	r3, [pc, #408]	; (80128c8 <DMA_GetITStatus+0x220>)
 8012730:	4299      	cmp	r1, r3
 8012732:	f000 8096 	beq.w	8012862 <DMA_GetITStatus+0x1ba>
 8012736:	4b65      	ldr	r3, [pc, #404]	; (80128cc <DMA_GetITStatus+0x224>)
 8012738:	4299      	cmp	r1, r3
 801273a:	f000 809b 	beq.w	8012874 <DMA_GetITStatus+0x1cc>
 801273e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8012742:	3b08      	subs	r3, #8
 8012744:	4299      	cmp	r1, r3
 8012746:	f000 8095 	beq.w	8012874 <DMA_GetITStatus+0x1cc>
 801274a:	4b61      	ldr	r3, [pc, #388]	; (80128d0 <DMA_GetITStatus+0x228>)
 801274c:	4299      	cmp	r1, r3
 801274e:	f000 8091 	beq.w	8012874 <DMA_GetITStatus+0x1cc>
 8012752:	4b60      	ldr	r3, [pc, #384]	; (80128d4 <DMA_GetITStatus+0x22c>)
 8012754:	4299      	cmp	r1, r3
 8012756:	f000 8097 	beq.w	8012888 <DMA_GetITStatus+0x1e0>
 801275a:	4b5f      	ldr	r3, [pc, #380]	; (80128d8 <DMA_GetITStatus+0x230>)
 801275c:	4299      	cmp	r1, r3
 801275e:	f000 8089 	beq.w	8012874 <DMA_GetITStatus+0x1cc>
 8012762:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
 8012766:	4299      	cmp	r1, r3
 8012768:	f000 8084 	beq.w	8012874 <DMA_GetITStatus+0x1cc>
 801276c:	f5a3 5308 	sub.w	r3, r3, #8704	; 0x2200
 8012770:	4299      	cmp	r1, r3
 8012772:	d07f      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 8012774:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 8012778:	4299      	cmp	r1, r3
 801277a:	d07b      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 801277c:	4b57      	ldr	r3, [pc, #348]	; (80128dc <DMA_GetITStatus+0x234>)
 801277e:	4299      	cmp	r1, r3
 8012780:	f000 8082 	beq.w	8012888 <DMA_GetITStatus+0x1e0>
 8012784:	4b56      	ldr	r3, [pc, #344]	; (80128e0 <DMA_GetITStatus+0x238>)
 8012786:	4299      	cmp	r1, r3
 8012788:	d074      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 801278a:	f5a3 1382 	sub.w	r3, r3, #1064960	; 0x104000
 801278e:	4299      	cmp	r1, r3
 8012790:	d070      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 8012792:	f5a3 2302 	sub.w	r3, r3, #532480	; 0x82000
 8012796:	4299      	cmp	r1, r3
 8012798:	d06c      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 801279a:	f5a3 2382 	sub.w	r3, r3, #266240	; 0x41000
 801279e:	4299      	cmp	r1, r3
 80127a0:	d068      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 80127a2:	4b50      	ldr	r3, [pc, #320]	; (80128e4 <DMA_GetITStatus+0x23c>)
 80127a4:	4299      	cmp	r1, r3
 80127a6:	d06f      	beq.n	8012888 <DMA_GetITStatus+0x1e0>
 80127a8:	4b4f      	ldr	r3, [pc, #316]	; (80128e8 <DMA_GetITStatus+0x240>)
 80127aa:	4299      	cmp	r1, r3
 80127ac:	d062      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 80127ae:	4b4f      	ldr	r3, [pc, #316]	; (80128ec <DMA_GetITStatus+0x244>)
 80127b0:	4299      	cmp	r1, r3
 80127b2:	d05f      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 80127b4:	4b4e      	ldr	r3, [pc, #312]	; (80128f0 <DMA_GetITStatus+0x248>)
 80127b6:	4299      	cmp	r1, r3
 80127b8:	d05c      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 80127ba:	4b4e      	ldr	r3, [pc, #312]	; (80128f4 <DMA_GetITStatus+0x24c>)
 80127bc:	4299      	cmp	r1, r3
 80127be:	d059      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 80127c0:	4b4d      	ldr	r3, [pc, #308]	; (80128f8 <DMA_GetITStatus+0x250>)
 80127c2:	4299      	cmp	r1, r3
 80127c4:	d060      	beq.n	8012888 <DMA_GetITStatus+0x1e0>
 80127c6:	4b4d      	ldr	r3, [pc, #308]	; (80128fc <DMA_GetITStatus+0x254>)
 80127c8:	4299      	cmp	r1, r3
 80127ca:	d053      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 80127cc:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80127d0:	3b10      	subs	r3, #16
 80127d2:	4299      	cmp	r1, r3
 80127d4:	d04e      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 80127d6:	4b4a      	ldr	r3, [pc, #296]	; (8012900 <DMA_GetITStatus+0x258>)
 80127d8:	4299      	cmp	r1, r3
 80127da:	d04b      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 80127dc:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80127e0:	3b04      	subs	r3, #4
 80127e2:	4299      	cmp	r1, r3
 80127e4:	d046      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 80127e6:	4b47      	ldr	r3, [pc, #284]	; (8012904 <DMA_GetITStatus+0x25c>)
 80127e8:	4299      	cmp	r1, r3
 80127ea:	d04d      	beq.n	8012888 <DMA_GetITStatus+0x1e0>
 80127ec:	4b46      	ldr	r3, [pc, #280]	; (8012908 <DMA_GetITStatus+0x260>)
 80127ee:	4299      	cmp	r1, r3
 80127f0:	d040      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 80127f2:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
 80127f6:	4299      	cmp	r1, r3
 80127f8:	d03c      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 80127fa:	f5a3 5308 	sub.w	r3, r3, #8704	; 0x2200
 80127fe:	4299      	cmp	r1, r3
 8012800:	d038      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 8012802:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 8012806:	4299      	cmp	r1, r3
 8012808:	d034      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 801280a:	4b40      	ldr	r3, [pc, #256]	; (801290c <DMA_GetITStatus+0x264>)
 801280c:	4299      	cmp	r1, r3
 801280e:	d03b      	beq.n	8012888 <DMA_GetITStatus+0x1e0>
 8012810:	4b3f      	ldr	r3, [pc, #252]	; (8012910 <DMA_GetITStatus+0x268>)
 8012812:	4299      	cmp	r1, r3
 8012814:	d02e      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 8012816:	f5a3 1382 	sub.w	r3, r3, #1064960	; 0x104000
 801281a:	4299      	cmp	r1, r3
 801281c:	d02a      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 801281e:	f5a3 2302 	sub.w	r3, r3, #532480	; 0x82000
 8012822:	4299      	cmp	r1, r3
 8012824:	d026      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 8012826:	f5a3 2382 	sub.w	r3, r3, #266240	; 0x41000
 801282a:	4299      	cmp	r1, r3
 801282c:	d022      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 801282e:	4b39      	ldr	r3, [pc, #228]	; (8012914 <DMA_GetITStatus+0x26c>)
 8012830:	4299      	cmp	r1, r3
 8012832:	d029      	beq.n	8012888 <DMA_GetITStatus+0x1e0>
 8012834:	4b38      	ldr	r3, [pc, #224]	; (8012918 <DMA_GetITStatus+0x270>)
 8012836:	4299      	cmp	r1, r3
 8012838:	d01c      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 801283a:	4b38      	ldr	r3, [pc, #224]	; (801291c <DMA_GetITStatus+0x274>)
 801283c:	4299      	cmp	r1, r3
 801283e:	d019      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 8012840:	4b37      	ldr	r3, [pc, #220]	; (8012920 <DMA_GetITStatus+0x278>)
 8012842:	4299      	cmp	r1, r3
 8012844:	d016      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 8012846:	4b37      	ldr	r3, [pc, #220]	; (8012924 <DMA_GetITStatus+0x27c>)
 8012848:	4299      	cmp	r1, r3
 801284a:	d013      	beq.n	8012874 <DMA_GetITStatus+0x1cc>
 801284c:	4b36      	ldr	r3, [pc, #216]	; (8012928 <DMA_GetITStatus+0x280>)
 801284e:	4299      	cmp	r1, r3
 8012850:	d01a      	beq.n	8012888 <DMA_GetITStatus+0x1e0>
 8012852:	2301      	movs	r3, #1
 8012854:	9301      	str	r3, [sp, #4]
 8012856:	9b01      	ldr	r3, [sp, #4]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d1fc      	bne.n	8012856 <DMA_GetITStatus+0x1ae>
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 801285c:	4b33      	ldr	r3, [pc, #204]	; (801292c <DMA_GetITStatus+0x284>)
 801285e:	4298      	cmp	r0, r3
 8012860:	d901      	bls.n	8012866 <DMA_GetITStatus+0x1be>
    DMAy = DMA1; 
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8012862:	4a33      	ldr	r2, [pc, #204]	; (8012930 <DMA_GetITStatus+0x288>)
 8012864:	e000      	b.n	8012868 <DMA_GetITStatus+0x1c0>
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8012866:	4a33      	ldr	r2, [pc, #204]	; (8012934 <DMA_GetITStatus+0x28c>)
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8012868:	f021 23f0 	bic.w	r3, r1, #4026593280	; 0xf000f000
 801286c:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8012870:	b173      	cbz	r3, 8012890 <DMA_GetITStatus+0x1e8>
 8012872:	e003      	b.n	801287c <DMA_GetITStatus+0x1d4>
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8012874:	4b2d      	ldr	r3, [pc, #180]	; (801292c <DMA_GetITStatus+0x284>)
 8012876:	4298      	cmp	r0, r3
 8012878:	d8f3      	bhi.n	8012862 <DMA_GetITStatus+0x1ba>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 801287a:	4a2e      	ldr	r2, [pc, #184]	; (8012934 <DMA_GetITStatus+0x28c>)
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 801287c:	6800      	ldr	r0, [r0, #0]
 801287e:	f000 001e 	and.w	r0, r0, #30
 8012882:	ea00 23d1 	and.w	r3, r0, r1, lsr #11
 8012886:	e006      	b.n	8012896 <DMA_GetITStatus+0x1ee>
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8012888:	4b28      	ldr	r3, [pc, #160]	; (801292c <DMA_GetITStatus+0x284>)
 801288a:	4298      	cmp	r0, r3
 801288c:	d8e9      	bhi.n	8012862 <DMA_GetITStatus+0x1ba>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 801288e:	4a29      	ldr	r2, [pc, #164]	; (8012934 <DMA_GetITStatus+0x28c>)
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8012890:	6940      	ldr	r0, [r0, #20]
 8012892:	f000 0380 	and.w	r3, r0, #128	; 0x80
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8012896:	0088      	lsls	r0, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8012898:	bf4c      	ite	mi
 801289a:	6850      	ldrmi	r0, [r2, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 801289c:	6810      	ldrpl	r0, [r2, #0]

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 801289e:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80128a2:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 80128a6:	4008      	ands	r0, r1
 80128a8:	d008      	beq.n	80128bc <DMA_GetITStatus+0x214>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80128aa:	1c18      	adds	r0, r3, #0
 80128ac:	bf18      	it	ne
 80128ae:	2001      	movne	r0, #1
 80128b0:	e004      	b.n	80128bc <DMA_GetITStatus+0x214>
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 80128b2:	4b05      	ldr	r3, [pc, #20]	; (80128c8 <DMA_GetITStatus+0x220>)
 80128b4:	4299      	cmp	r1, r3
 80128b6:	f47f af3e 	bne.w	8012736 <DMA_GetITStatus+0x8e>
 80128ba:	e7de      	b.n	801287a <DMA_GetITStatus+0x1d2>
    bitstatus = RESET;
  }

  /* Return the DMA_IT status */
  return  bitstatus;
}
 80128bc:	b002      	add	sp, #8
 80128be:	4770      	bx	lr
 80128c0:	40026010 	.word	0x40026010
 80128c4:	40026028 	.word	0x40026028
 80128c8:	10008020 	.word	0x10008020
 80128cc:	10004010 	.word	0x10004010
 80128d0:	10001004 	.word	0x10001004
 80128d4:	90000001 	.word	0x90000001
 80128d8:	10008800 	.word	0x10008800
 80128dc:	90000040 	.word	0x90000040
 80128e0:	10208000 	.word	0x10208000
 80128e4:	90010000 	.word	0x90010000
 80128e8:	18008000 	.word	0x18008000
 80128ec:	14004000 	.word	0x14004000
 80128f0:	12002000 	.word	0x12002000
 80128f4:	11001000 	.word	0x11001000
 80128f8:	90400000 	.word	0x90400000
 80128fc:	20008020 	.word	0x20008020
 8012900:	20002008 	.word	0x20002008
 8012904:	a0000001 	.word	0xa0000001
 8012908:	20008800 	.word	0x20008800
 801290c:	a0000040 	.word	0xa0000040
 8012910:	20208000 	.word	0x20208000
 8012914:	a0010000 	.word	0xa0010000
 8012918:	28008000 	.word	0x28008000
 801291c:	24004000 	.word	0x24004000
 8012920:	22002000 	.word	0x22002000
 8012924:	21001000 	.word	0x21001000
 8012928:	a0400000 	.word	0xa0400000
 801292c:	4002640f 	.word	0x4002640f
 8012930:	40026400 	.word	0x40026400
 8012934:	40026000 	.word	0x40026000

08012938 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8012938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
 801293a:	7903      	ldrb	r3, [r0, #4]
 801293c:	f013 0ffb 	tst.w	r3, #251	; 0xfb
 8012940:	d105      	bne.n	801294e <EXTI_Init+0x16>
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
 8012942:	7942      	ldrb	r2, [r0, #5]
 8012944:	f002 01fb 	and.w	r1, r2, #251	; 0xfb
 8012948:	2908      	cmp	r1, #8
 801294a:	d106      	bne.n	801295a <EXTI_Init+0x22>
 801294c:	e00c      	b.n	8012968 <EXTI_Init+0x30>
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
 801294e:	2201      	movs	r2, #1
 8012950:	9200      	str	r2, [sp, #0]
 8012952:	9a00      	ldr	r2, [sp, #0]
 8012954:	2a00      	cmp	r2, #0
 8012956:	d1fc      	bne.n	8012952 <EXTI_Init+0x1a>
 8012958:	e7f3      	b.n	8012942 <EXTI_Init+0xa>
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
 801295a:	2a10      	cmp	r2, #16
 801295c:	d004      	beq.n	8012968 <EXTI_Init+0x30>
 801295e:	2201      	movs	r2, #1
 8012960:	9201      	str	r2, [sp, #4]
 8012962:	9a01      	ldr	r2, [sp, #4]
 8012964:	2a00      	cmp	r2, #0
 8012966:	d1fc      	bne.n	8012962 <EXTI_Init+0x2a>
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
 8012968:	6802      	ldr	r2, [r0, #0]
 801296a:	0dd1      	lsrs	r1, r2, #23
 801296c:	05c9      	lsls	r1, r1, #23
 801296e:	b931      	cbnz	r1, 801297e <EXTI_Init+0x46>
 8012970:	b12a      	cbz	r2, 801297e <EXTI_Init+0x46>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
 8012972:	7981      	ldrb	r1, [r0, #6]
 8012974:	2901      	cmp	r1, #1
 8012976:	d934      	bls.n	80129e2 <EXTI_Init+0xaa>
 8012978:	2301      	movs	r3, #1
 801297a:	9303      	str	r3, [sp, #12]
 801297c:	e005      	b.n	801298a <EXTI_Init+0x52>
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
 801297e:	2101      	movs	r1, #1
 8012980:	9102      	str	r1, [sp, #8]
 8012982:	9902      	ldr	r1, [sp, #8]
 8012984:	2900      	cmp	r1, #0
 8012986:	d1fc      	bne.n	8012982 <EXTI_Init+0x4a>
 8012988:	e7f3      	b.n	8012972 <EXTI_Init+0x3a>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
 801298a:	9b03      	ldr	r3, [sp, #12]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d1fc      	bne.n	801298a <EXTI_Init+0x52>
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8012990:	4b1e      	ldr	r3, [pc, #120]	; (8012a0c <EXTI_Init+0xd4>)
 8012992:	6819      	ldr	r1, [r3, #0]
 8012994:	ea21 0202 	bic.w	r2, r1, r2
 8012998:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 801299a:	685a      	ldr	r2, [r3, #4]
 801299c:	6801      	ldr	r1, [r0, #0]
 801299e:	ea22 0201 	bic.w	r2, r2, r1
 80129a2:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80129a4:	7902      	ldrb	r2, [r0, #4]
 80129a6:	6801      	ldr	r1, [r0, #0]
 80129a8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80129ac:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80129b0:	6814      	ldr	r4, [r2, #0]
 80129b2:	4321      	orrs	r1, r4
 80129b4:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80129b6:	689a      	ldr	r2, [r3, #8]
 80129b8:	6801      	ldr	r1, [r0, #0]
 80129ba:	ea22 0201 	bic.w	r2, r2, r1
 80129be:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80129c0:	6801      	ldr	r1, [r0, #0]
 80129c2:	68da      	ldr	r2, [r3, #12]
 80129c4:	ea22 0201 	bic.w	r2, r2, r1
 80129c8:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80129ca:	7942      	ldrb	r2, [r0, #5]
 80129cc:	6801      	ldr	r1, [r0, #0]
 80129ce:	2a10      	cmp	r2, #16
 80129d0:	d112      	bne.n	80129f8 <EXTI_Init+0xc0>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80129d2:	689a      	ldr	r2, [r3, #8]
 80129d4:	4311      	orrs	r1, r2
 80129d6:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80129d8:	68d9      	ldr	r1, [r3, #12]
 80129da:	6802      	ldr	r2, [r0, #0]
 80129dc:	430a      	orrs	r2, r1
 80129de:	60da      	str	r2, [r3, #12]
 80129e0:	e011      	b.n	8012a06 <EXTI_Init+0xce>
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80129e2:	2900      	cmp	r1, #0
 80129e4:	d1d4      	bne.n	8012990 <EXTI_Init+0x58>
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80129e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80129ea:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
 80129ee:	6819      	ldr	r1, [r3, #0]
 80129f0:	ea21 0202 	bic.w	r2, r1, r2
 80129f4:	601a      	str	r2, [r3, #0]
  }
}
 80129f6:	e006      	b.n	8012a06 <EXTI_Init+0xce>
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80129f8:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80129fc:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
 8012a00:	681a      	ldr	r2, [r3, #0]
 8012a02:	4311      	orrs	r1, r2
 8012a04:	6019      	str	r1, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8012a06:	b004      	add	sp, #16
 8012a08:	bd10      	pop	{r4, pc}
 8012a0a:	bf00      	nop
 8012a0c:	40013c00 	.word	0x40013c00

08012a10 <EXTI_GetITStatus>:
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
 8012a10:	1e42      	subs	r2, r0, #1
 8012a12:	2a1f      	cmp	r2, #31
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8012a14:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
 8012a16:	d838      	bhi.n	8012a8a <EXTI_GetITStatus+0x7a>
 8012a18:	4b21      	ldr	r3, [pc, #132]	; (8012aa0 <EXTI_GetITStatus+0x90>)
 8012a1a:	40d3      	lsrs	r3, r2
 8012a1c:	07db      	lsls	r3, r3, #31
 8012a1e:	d436      	bmi.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a20:	2880      	cmp	r0, #128	; 0x80
 8012a22:	d034      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a24:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8012a28:	d031      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a2a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8012a2e:	d02e      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a30:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012a34:	d02b      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a36:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8012a3a:	d028      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a3c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8012a40:	d025      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a42:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8012a46:	d022      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a48:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8012a4c:	d01f      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a4e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012a52:	d01c      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a54:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8012a58:	d019      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a5a:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8012a5e:	d016      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a60:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8012a64:	d013      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a66:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8012a6a:	d010      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a6c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8012a70:	d00d      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a72:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 8012a76:	d00a      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a78:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8012a7c:	d007      	beq.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a7e:	2301      	movs	r3, #1
 8012a80:	9301      	str	r3, [sp, #4]
 8012a82:	9b01      	ldr	r3, [sp, #4]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d1fc      	bne.n	8012a82 <EXTI_GetITStatus+0x72>
 8012a88:	e001      	b.n	8012a8e <EXTI_GetITStatus+0x7e>
 8012a8a:	2840      	cmp	r0, #64	; 0x40
 8012a8c:	d1c8      	bne.n	8012a20 <EXTI_GetITStatus+0x10>
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8012a8e:	4b05      	ldr	r3, [pc, #20]	; (8012aa4 <EXTI_GetITStatus+0x94>)
 8012a90:	695b      	ldr	r3, [r3, #20]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8012a92:	4218      	tst	r0, r3
 8012a94:	bf14      	ite	ne
 8012a96:	2001      	movne	r0, #1
 8012a98:	2000      	moveq	r0, #0
  
}
 8012a9a:	b002      	add	sp, #8
 8012a9c:	4770      	bx	lr
 8012a9e:	bf00      	nop
 8012aa0:	8000808b 	.word	0x8000808b
 8012aa4:	40013c00 	.word	0x40013c00

08012aa8 <EXTI_ClearITPendingBit>:
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8012aa8:	0dc3      	lsrs	r3, r0, #23
 8012aaa:	05db      	lsls	r3, r3, #23
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8012aac:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8012aae:	b923      	cbnz	r3, 8012aba <EXTI_ClearITPendingBit+0x12>
 8012ab0:	b118      	cbz	r0, 8012aba <EXTI_ClearITPendingBit+0x12>
  
  EXTI->PR = EXTI_Line;
 8012ab2:	4b05      	ldr	r3, [pc, #20]	; (8012ac8 <EXTI_ClearITPendingBit+0x20>)
 8012ab4:	6158      	str	r0, [r3, #20]
}
 8012ab6:	b002      	add	sp, #8
 8012ab8:	4770      	bx	lr
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8012aba:	2301      	movs	r3, #1
 8012abc:	9301      	str	r3, [sp, #4]
 8012abe:	9b01      	ldr	r3, [sp, #4]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d1fc      	bne.n	8012abe <EXTI_ClearITPendingBit+0x16>
 8012ac4:	e7f5      	b.n	8012ab2 <EXTI_ClearITPendingBit+0xa>
 8012ac6:	bf00      	nop
 8012ac8:	40013c00 	.word	0x40013c00

08012acc <SYSCFG_EXTILineConfig>:
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
 8012acc:	280a      	cmp	r0, #10
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8012ace:	b513      	push	{r0, r1, r4, lr}
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
 8012ad0:	d802      	bhi.n	8012ad8 <SYSCFG_EXTILineConfig+0xc>
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
 8012ad2:	290f      	cmp	r1, #15
 8012ad4:	d806      	bhi.n	8012ae4 <SYSCFG_EXTILineConfig+0x18>
 8012ad6:	e00a      	b.n	8012aee <SYSCFG_EXTILineConfig+0x22>
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
 8012ad8:	2301      	movs	r3, #1
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	9b00      	ldr	r3, [sp, #0]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d1fc      	bne.n	8012adc <SYSCFG_EXTILineConfig+0x10>
 8012ae2:	e7f6      	b.n	8012ad2 <SYSCFG_EXTILineConfig+0x6>
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	9301      	str	r3, [sp, #4]
 8012ae8:	9b01      	ldr	r3, [sp, #4]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d1fc      	bne.n	8012ae8 <SYSCFG_EXTILineConfig+0x1c>

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8012aee:	f001 0203 	and.w	r2, r1, #3
 8012af2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8012af6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8012afa:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8012afe:	0093      	lsls	r3, r2, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8012b00:	688c      	ldr	r4, [r1, #8]
 8012b02:	220f      	movs	r2, #15
 8012b04:	409a      	lsls	r2, r3
 8012b06:	ea24 0202 	bic.w	r2, r4, r2
 8012b0a:	608a      	str	r2, [r1, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8012b0c:	688a      	ldr	r2, [r1, #8]
 8012b0e:	fa00 f303 	lsl.w	r3, r0, r3
 8012b12:	4313      	orrs	r3, r2
 8012b14:	608b      	str	r3, [r1, #8]
}
 8012b16:	b002      	add	sp, #8
 8012b18:	bd10      	pop	{r4, pc}
	...

08012b1c <SAI_Init>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure that
  *         contains the configuration information for the specified SAI Block peripheral.             
  * @retval None
  */
void SAI_Init(SAI_Block_TypeDef* SAI_Block_x, SAI_InitTypeDef* SAI_InitStruct)
{
 8012b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012b20:	4b4a      	ldr	r3, [pc, #296]	; (8012c4c <SAI_Init+0x130>)
 8012b22:	4298      	cmp	r0, r3
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure that
  *         contains the configuration information for the specified SAI Block peripheral.             
  * @retval None
  */
void SAI_Init(SAI_Block_TypeDef* SAI_Block_x, SAI_InitTypeDef* SAI_InitStruct)
{
 8012b24:	b08c      	sub	sp, #48	; 0x30
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012b26:	d103      	bne.n	8012b30 <SAI_Init+0x14>
  
  /* Check the SAI Block parameters */
  assert_param(IS_SAI_BLOCK_MODE(SAI_InitStruct->SAI_AudioMode));
 8012b28:	680d      	ldr	r5, [r1, #0]
 8012b2a:	2d03      	cmp	r5, #3
 8012b2c:	d809      	bhi.n	8012b42 <SAI_Init+0x26>
 8012b2e:	e00d      	b.n	8012b4c <SAI_Init+0x30>
void SAI_Init(SAI_Block_TypeDef* SAI_Block_x, SAI_InitTypeDef* SAI_InitStruct)
{
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012b30:	4b47      	ldr	r3, [pc, #284]	; (8012c50 <SAI_Init+0x134>)
 8012b32:	4298      	cmp	r0, r3
 8012b34:	d0f8      	beq.n	8012b28 <SAI_Init+0xc>
 8012b36:	2301      	movs	r3, #1
 8012b38:	9301      	str	r3, [sp, #4]
 8012b3a:	9b01      	ldr	r3, [sp, #4]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d1fc      	bne.n	8012b3a <SAI_Init+0x1e>
 8012b40:	e7f2      	b.n	8012b28 <SAI_Init+0xc>
  
  /* Check the SAI Block parameters */
  assert_param(IS_SAI_BLOCK_MODE(SAI_InitStruct->SAI_AudioMode));
 8012b42:	2301      	movs	r3, #1
 8012b44:	9302      	str	r3, [sp, #8]
 8012b46:	9b02      	ldr	r3, [sp, #8]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d1fc      	bne.n	8012b46 <SAI_Init+0x2a>
  assert_param(IS_SAI_BLOCK_PROTOCOL(SAI_InitStruct->SAI_Protocol));
 8012b4c:	684b      	ldr	r3, [r1, #4]
 8012b4e:	f033 0204 	bics.w	r2, r3, #4
 8012b52:	d006      	beq.n	8012b62 <SAI_Init+0x46>
 8012b54:	2b08      	cmp	r3, #8
 8012b56:	d004      	beq.n	8012b62 <SAI_Init+0x46>
 8012b58:	2201      	movs	r2, #1
 8012b5a:	9203      	str	r2, [sp, #12]
 8012b5c:	9a03      	ldr	r2, [sp, #12]
 8012b5e:	2a00      	cmp	r2, #0
 8012b60:	d1fc      	bne.n	8012b5c <SAI_Init+0x40>
  assert_param(IS_SAI_BLOCK_DATASIZE(SAI_InitStruct->SAI_DataSize));
 8012b62:	688e      	ldr	r6, [r1, #8]
 8012b64:	f026 04a0 	bic.w	r4, r6, #160	; 0xa0
 8012b68:	2c40      	cmp	r4, #64	; 0x40
 8012b6a:	f026 0220 	bic.w	r2, r6, #32
 8012b6e:	d006      	beq.n	8012b7e <SAI_Init+0x62>
 8012b70:	2a80      	cmp	r2, #128	; 0x80
 8012b72:	d004      	beq.n	8012b7e <SAI_Init+0x62>
 8012b74:	2201      	movs	r2, #1
 8012b76:	9204      	str	r2, [sp, #16]
 8012b78:	9a04      	ldr	r2, [sp, #16]
 8012b7a:	2a00      	cmp	r2, #0
 8012b7c:	d1fc      	bne.n	8012b78 <SAI_Init+0x5c>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(SAI_InitStruct->SAI_FirstBit));
 8012b7e:	68cc      	ldr	r4, [r1, #12]
 8012b80:	f434 7280 	bics.w	r2, r4, #256	; 0x100
 8012b84:	d004      	beq.n	8012b90 <SAI_Init+0x74>
 8012b86:	2201      	movs	r2, #1
 8012b88:	9205      	str	r2, [sp, #20]
 8012b8a:	9a05      	ldr	r2, [sp, #20]
 8012b8c:	2a00      	cmp	r2, #0
 8012b8e:	d1fc      	bne.n	8012b8a <SAI_Init+0x6e>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(SAI_InitStruct->SAI_ClockStrobing));
 8012b90:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8012b94:	f439 7200 	bics.w	r2, r9, #512	; 0x200
 8012b98:	d004      	beq.n	8012ba4 <SAI_Init+0x88>
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	9206      	str	r2, [sp, #24]
 8012b9e:	9a06      	ldr	r2, [sp, #24]
 8012ba0:	2a00      	cmp	r2, #0
 8012ba2:	d1fc      	bne.n	8012b9e <SAI_Init+0x82>
  assert_param(IS_SAI_BLOCK_SYNCHRO(SAI_InitStruct->SAI_Synchro));
 8012ba4:	f8d1 a014 	ldr.w	sl, [r1, #20]
 8012ba8:	f43a 6280 	bics.w	r2, sl, #1024	; 0x400
 8012bac:	d004      	beq.n	8012bb8 <SAI_Init+0x9c>
 8012bae:	2701      	movs	r7, #1
 8012bb0:	9707      	str	r7, [sp, #28]
 8012bb2:	9f07      	ldr	r7, [sp, #28]
 8012bb4:	2f00      	cmp	r7, #0
 8012bb6:	d1fc      	bne.n	8012bb2 <SAI_Init+0x96>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(SAI_InitStruct->SAI_OUTDRIV));
 8012bb8:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8012bbc:	f43c 5200 	bics.w	r2, ip, #8192	; 0x2000
 8012bc0:	d004      	beq.n	8012bcc <SAI_Init+0xb0>
 8012bc2:	2701      	movs	r7, #1
 8012bc4:	9708      	str	r7, [sp, #32]
 8012bc6:	9f08      	ldr	r7, [sp, #32]
 8012bc8:	2f00      	cmp	r7, #0
 8012bca:	d1fc      	bne.n	8012bc6 <SAI_Init+0xaa>
  assert_param(IS_SAI_BLOCK_NODIVIDER(SAI_InitStruct->SAI_NoDivider));
 8012bcc:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8012bd0:	f438 2200 	bics.w	r2, r8, #524288	; 0x80000
 8012bd4:	d004      	beq.n	8012be0 <SAI_Init+0xc4>
 8012bd6:	2701      	movs	r7, #1
 8012bd8:	9709      	str	r7, [sp, #36]	; 0x24
 8012bda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012bdc:	2f00      	cmp	r7, #0
 8012bde:	d1fc      	bne.n	8012bda <SAI_Init+0xbe>
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(SAI_InitStruct->SAI_MasterDivider));
 8012be0:	6a0f      	ldr	r7, [r1, #32]
 8012be2:	2f0f      	cmp	r7, #15
 8012be4:	d908      	bls.n	8012bf8 <SAI_Init+0xdc>
 8012be6:	f04f 0e01 	mov.w	lr, #1
 8012bea:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8012bee:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8012bf2:	f1be 0f00 	cmp.w	lr, #0
 8012bf6:	d1fa      	bne.n	8012bee <SAI_Init+0xd2>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(SAI_InitStruct->SAI_FIFOThreshold));
 8012bf8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8012bfa:	2a04      	cmp	r2, #4
 8012bfc:	d908      	bls.n	8012c10 <SAI_Init+0xf4>
 8012bfe:	f04f 0e01 	mov.w	lr, #1
 8012c02:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8012c06:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8012c0a:	f1be 0f00 	cmp.w	lr, #0
 8012c0e:	d1fa      	bne.n	8012c06 <SAI_Init+0xea>
 8012c10:	431d      	orrs	r5, r3
 8012c12:	4335      	orrs	r5, r6
 8012c14:	432c      	orrs	r4, r5
 8012c16:	ea44 0409 	orr.w	r4, r4, r9
 8012c1a:	ea4a 0204 	orr.w	r2, sl, r4
 8012c1e:	ea42 020c 	orr.w	r2, r2, ip

  /* SAI Block_x CR1 Configuration */
  /* Get the SAI Block_x CR1 value */
  tmpreg = SAI_Block_x->CR1;
 8012c22:	f8d0 e000 	ldr.w	lr, [r0]
 8012c26:	ea42 0308 	orr.w	r3, r2, r8
 8012c2a:	4a0a      	ldr	r2, [pc, #40]	; (8012c54 <SAI_Init+0x138>)
 8012c2c:	ea0e 0202 	and.w	r2, lr, r2
 8012c30:	4313      	orrs	r3, r2
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 8012c32:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
                       (uint32_t)((SAI_InitStruct->SAI_MasterDivider) << 20));
  /* Write to SAI_Block_x CR1 */
  SAI_Block_x->CR1 = tmpreg;
 8012c36:	6003      	str	r3, [r0, #0]
  
  /* SAI Block_x CR2 Configuration */
  /* Get the SAIBlock_x CR2 value */
  tmpreg = SAI_Block_x->CR2;
 8012c38:	6843      	ldr	r3, [r0, #4]
  /* Clear FTH bits */
  tmpreg &= ~(SAI_xCR2_FTH);
 8012c3a:	f023 0203 	bic.w	r2, r3, #3
  /* Configure the FIFO Level */
  /* Set FTH bits according to SAI_FIFOThreshold value */ 
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_FIFOThreshold);
 8012c3e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8012c40:	4313      	orrs	r3, r2
  /* Write to SAI_Block_x CR2 */
  SAI_Block_x->CR2 = tmpreg;
 8012c42:	6043      	str	r3, [r0, #4]
}
 8012c44:	b00c      	add	sp, #48	; 0x30
 8012c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c4a:	bf00      	nop
 8012c4c:	40015804 	.word	0x40015804
 8012c50:	40015824 	.word	0x40015824
 8012c54:	ff07c010 	.word	0xff07c010

08012c58 <SAI_FrameInit>:
  * @param  SAI_FrameInitStruct: pointer to an SAI_FrameInitTypeDef structure that
  *         contains the configuration of audio frame for a specified SAI Block                       
  * @retval None
  */
void SAI_FrameInit(SAI_Block_TypeDef* SAI_Block_x, SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 8012c58:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012c5a:	4b25      	ldr	r3, [pc, #148]	; (8012cf0 <SAI_FrameInit+0x98>)
 8012c5c:	4298      	cmp	r0, r3
  * @param  SAI_FrameInitStruct: pointer to an SAI_FrameInitTypeDef structure that
  *         contains the configuration of audio frame for a specified SAI Block                       
  * @retval None
  */
void SAI_FrameInit(SAI_Block_TypeDef* SAI_Block_x, SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 8012c5e:	b086      	sub	sp, #24
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012c60:	d105      	bne.n	8012c6e <SAI_FrameInit+0x16>
  
  /* Check the SAI Block frame parameters */
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(SAI_FrameInitStruct->SAI_FrameLength));
 8012c62:	680b      	ldr	r3, [r1, #0]
 8012c64:	f1a3 0208 	sub.w	r2, r3, #8
 8012c68:	2af8      	cmp	r2, #248	; 0xf8
 8012c6a:	d809      	bhi.n	8012c80 <SAI_FrameInit+0x28>
 8012c6c:	e00d      	b.n	8012c8a <SAI_FrameInit+0x32>
void SAI_FrameInit(SAI_Block_TypeDef* SAI_Block_x, SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012c6e:	4b21      	ldr	r3, [pc, #132]	; (8012cf4 <SAI_FrameInit+0x9c>)
 8012c70:	4298      	cmp	r0, r3
 8012c72:	d0f6      	beq.n	8012c62 <SAI_FrameInit+0xa>
 8012c74:	2301      	movs	r3, #1
 8012c76:	9300      	str	r3, [sp, #0]
 8012c78:	9b00      	ldr	r3, [sp, #0]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d1fc      	bne.n	8012c78 <SAI_FrameInit+0x20>
 8012c7e:	e7f0      	b.n	8012c62 <SAI_FrameInit+0xa>
  
  /* Check the SAI Block frame parameters */
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(SAI_FrameInitStruct->SAI_FrameLength));
 8012c80:	2201      	movs	r2, #1
 8012c82:	9201      	str	r2, [sp, #4]
 8012c84:	9a01      	ldr	r2, [sp, #4]
 8012c86:	2a00      	cmp	r2, #0
 8012c88:	d1fc      	bne.n	8012c84 <SAI_FrameInit+0x2c>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(SAI_FrameInitStruct->SAI_ActiveFrameLength));
 8012c8a:	684c      	ldr	r4, [r1, #4]
 8012c8c:	3c01      	subs	r4, #1
 8012c8e:	2c7f      	cmp	r4, #127	; 0x7f
 8012c90:	d904      	bls.n	8012c9c <SAI_FrameInit+0x44>
 8012c92:	2201      	movs	r2, #1
 8012c94:	9202      	str	r2, [sp, #8]
 8012c96:	9a02      	ldr	r2, [sp, #8]
 8012c98:	2a00      	cmp	r2, #0
 8012c9a:	d1fc      	bne.n	8012c96 <SAI_FrameInit+0x3e>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(SAI_FrameInitStruct->SAI_FSDefinition));
 8012c9c:	688e      	ldr	r6, [r1, #8]
 8012c9e:	f436 3280 	bics.w	r2, r6, #65536	; 0x10000
 8012ca2:	d004      	beq.n	8012cae <SAI_FrameInit+0x56>
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	9203      	str	r2, [sp, #12]
 8012ca8:	9a03      	ldr	r2, [sp, #12]
 8012caa:	2a00      	cmp	r2, #0
 8012cac:	d1fc      	bne.n	8012ca8 <SAI_FrameInit+0x50>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(SAI_FrameInitStruct->SAI_FSPolarity));
 8012cae:	68cd      	ldr	r5, [r1, #12]
 8012cb0:	f435 3200 	bics.w	r2, r5, #131072	; 0x20000
 8012cb4:	d004      	beq.n	8012cc0 <SAI_FrameInit+0x68>
 8012cb6:	2201      	movs	r2, #1
 8012cb8:	9204      	str	r2, [sp, #16]
 8012cba:	9a04      	ldr	r2, [sp, #16]
 8012cbc:	2a00      	cmp	r2, #0
 8012cbe:	d1fc      	bne.n	8012cba <SAI_FrameInit+0x62>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(SAI_FrameInitStruct->SAI_FSOffset));
 8012cc0:	690a      	ldr	r2, [r1, #16]
 8012cc2:	f432 2180 	bics.w	r1, r2, #262144	; 0x40000
 8012cc6:	d004      	beq.n	8012cd2 <SAI_FrameInit+0x7a>
 8012cc8:	2101      	movs	r1, #1
 8012cca:	9105      	str	r1, [sp, #20]
 8012ccc:	9905      	ldr	r1, [sp, #20]
 8012cce:	2900      	cmp	r1, #0
 8012cd0:	d1fc      	bne.n	8012ccc <SAI_FrameInit+0x74>
 8012cd2:	4335      	orrs	r5, r6

  /* SAI Block_x FRCR Configuration */
  /* Get the SAI Block_x FRCR value */
  tmpreg = SAI_Block_x->FRCR;
 8012cd4:	6881      	ldr	r1, [r0, #8]
 8012cd6:	4315      	orrs	r5, r2
 8012cd8:	4a07      	ldr	r2, [pc, #28]	; (8012cf8 <SAI_FrameInit+0xa0>)
 8012cda:	400a      	ands	r2, r1
 8012cdc:	ea45 0102 	orr.w	r1, r5, r2
 8012ce0:	1e5a      	subs	r2, r3, #1
 8012ce2:	ea41 0302 	orr.w	r3, r1, r2
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 8012ce6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       SAI_FrameInitStruct->SAI_FSDefinition |    
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
                       (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
                       
  /* Write to SAI_Block_x FRCR */
  SAI_Block_x->FRCR = tmpreg;
 8012cea:	6083      	str	r3, [r0, #8]
}
 8012cec:	b006      	add	sp, #24
 8012cee:	bd70      	pop	{r4, r5, r6, pc}
 8012cf0:	40015804 	.word	0x40015804
 8012cf4:	40015824 	.word	0x40015824
 8012cf8:	fff88000 	.word	0xfff88000

08012cfc <SAI_SlotInit>:
  * @param  SAI_SlotInitStruct: pointer to an SAI_SlotInitTypeDef structure that
  *         contains the configuration of audio slot for a specified SAI Block                      
  * @retval None
  */
void SAI_SlotInit(SAI_Block_TypeDef* SAI_Block_x, SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 8012cfc:	b530      	push	{r4, r5, lr}
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012cfe:	4b1e      	ldr	r3, [pc, #120]	; (8012d78 <SAI_SlotInit+0x7c>)
 8012d00:	4298      	cmp	r0, r3
  * @param  SAI_SlotInitStruct: pointer to an SAI_SlotInitTypeDef structure that
  *         contains the configuration of audio slot for a specified SAI Block                      
  * @retval None
  */
void SAI_SlotInit(SAI_Block_TypeDef* SAI_Block_x, SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 8012d02:	b087      	sub	sp, #28
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012d04:	d103      	bne.n	8012d0e <SAI_SlotInit+0x12>
  
  /* Check the SAI Block Slot parameters */
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(SAI_SlotInitStruct->SAI_FirstBitOffset));
 8012d06:	680d      	ldr	r5, [r1, #0]
 8012d08:	2d18      	cmp	r5, #24
 8012d0a:	d809      	bhi.n	8012d20 <SAI_SlotInit+0x24>
 8012d0c:	e00d      	b.n	8012d2a <SAI_SlotInit+0x2e>
void SAI_SlotInit(SAI_Block_TypeDef* SAI_Block_x, SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012d0e:	4b1b      	ldr	r3, [pc, #108]	; (8012d7c <SAI_SlotInit+0x80>)
 8012d10:	4298      	cmp	r0, r3
 8012d12:	d0f8      	beq.n	8012d06 <SAI_SlotInit+0xa>
 8012d14:	2301      	movs	r3, #1
 8012d16:	9301      	str	r3, [sp, #4]
 8012d18:	9b01      	ldr	r3, [sp, #4]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d1fc      	bne.n	8012d18 <SAI_SlotInit+0x1c>
 8012d1e:	e7f2      	b.n	8012d06 <SAI_SlotInit+0xa>
  
  /* Check the SAI Block Slot parameters */
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(SAI_SlotInitStruct->SAI_FirstBitOffset));
 8012d20:	2301      	movs	r3, #1
 8012d22:	9302      	str	r3, [sp, #8]
 8012d24:	9b02      	ldr	r3, [sp, #8]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d1fc      	bne.n	8012d24 <SAI_SlotInit+0x28>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(SAI_SlotInitStruct->SAI_SlotSize));
 8012d2a:	684a      	ldr	r2, [r1, #4]
 8012d2c:	f032 0340 	bics.w	r3, r2, #64	; 0x40
 8012d30:	d006      	beq.n	8012d40 <SAI_SlotInit+0x44>
 8012d32:	2a80      	cmp	r2, #128	; 0x80
 8012d34:	d004      	beq.n	8012d40 <SAI_SlotInit+0x44>
 8012d36:	2301      	movs	r3, #1
 8012d38:	9303      	str	r3, [sp, #12]
 8012d3a:	9b03      	ldr	r3, [sp, #12]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d1fc      	bne.n	8012d3a <SAI_SlotInit+0x3e>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(SAI_SlotInitStruct->SAI_SlotNumber));
 8012d40:	688b      	ldr	r3, [r1, #8]
 8012d42:	1e5c      	subs	r4, r3, #1
 8012d44:	2c0f      	cmp	r4, #15
 8012d46:	d904      	bls.n	8012d52 <SAI_SlotInit+0x56>
 8012d48:	2301      	movs	r3, #1
 8012d4a:	9304      	str	r3, [sp, #16]
 8012d4c:	9b04      	ldr	r3, [sp, #16]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d1fc      	bne.n	8012d4c <SAI_SlotInit+0x50>
  assert_param(IS_SAI_SLOT_ACTIVE(SAI_SlotInitStruct->SAI_SlotActive));
 8012d52:	68cb      	ldr	r3, [r1, #12]
 8012d54:	b923      	cbnz	r3, 8012d60 <SAI_SlotInit+0x64>
 8012d56:	2101      	movs	r1, #1
 8012d58:	9105      	str	r1, [sp, #20]
 8012d5a:	9905      	ldr	r1, [sp, #20]
 8012d5c:	2900      	cmp	r1, #0
 8012d5e:	d1fc      	bne.n	8012d5a <SAI_SlotInit+0x5e>

  /* SAI Block_x SLOTR Configuration */
  /* Get the SAI Block_x SLOTR value */
  tmpreg = SAI_Block_x->SLOTR;
 8012d60:	68c1      	ldr	r1, [r0, #12]
 8012d62:	432a      	orrs	r2, r5
 8012d64:	431a      	orrs	r2, r3
 8012d66:	f24f 0320 	movw	r3, #61472	; 0xf020
 8012d6a:	400b      	ands	r3, r1
 8012d6c:	4313      	orrs	r3, r2
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 8012d6e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       SAI_SlotInitStruct->SAI_SlotSize       | 
                       SAI_SlotInitStruct->SAI_SlotActive     |    
                       (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
                       
  /* Write to SAI_Block_x SLOTR */
  SAI_Block_x->SLOTR = tmpreg;
 8012d72:	60c3      	str	r3, [r0, #12]
}
 8012d74:	b007      	add	sp, #28
 8012d76:	bd30      	pop	{r4, r5, pc}
 8012d78:	40015804 	.word	0x40015804
 8012d7c:	40015824 	.word	0x40015824

08012d80 <SAI_StructInit>:
  */
void SAI_StructInit(SAI_InitTypeDef* SAI_InitStruct)
{
  /* Reset SAI init structure parameters values */
  /* Initialize the SAI_AudioMode member */
  SAI_InitStruct->SAI_AudioMode = SAI_Mode_MasterTx;
 8012d80:	2300      	movs	r3, #0
  /* Initialize the SAI_Protocol member */
  SAI_InitStruct->SAI_Protocol = SAI_Free_Protocol;
  /* Initialize the SAI_DataSize member */
  SAI_InitStruct->SAI_DataSize = SAI_DataSize_8b;
 8012d82:	2240      	movs	r2, #64	; 0x40
  */
void SAI_StructInit(SAI_InitTypeDef* SAI_InitStruct)
{
  /* Reset SAI init structure parameters values */
  /* Initialize the SAI_AudioMode member */
  SAI_InitStruct->SAI_AudioMode = SAI_Mode_MasterTx;
 8012d84:	6003      	str	r3, [r0, #0]
  /* Initialize the SAI_Protocol member */
  SAI_InitStruct->SAI_Protocol = SAI_Free_Protocol;
 8012d86:	6043      	str	r3, [r0, #4]
  /* Initialize the SAI_DataSize member */
  SAI_InitStruct->SAI_DataSize = SAI_DataSize_8b;
 8012d88:	6082      	str	r2, [r0, #8]
  /* Initialize the SAI_FirstBit member */
  SAI_InitStruct->SAI_FirstBit = SAI_FirstBit_MSB;
 8012d8a:	60c3      	str	r3, [r0, #12]
  /* Initialize the SAI_ClockStrobing member */
  SAI_InitStruct->SAI_ClockStrobing = SAI_ClockStrobing_FallingEdge;
 8012d8c:	6103      	str	r3, [r0, #16]
  /* Initialize the SAI_Synchro member */
  SAI_InitStruct->SAI_Synchro = SAI_Asynchronous;
 8012d8e:	6143      	str	r3, [r0, #20]
  /* Initialize the SAI_OUTDRIV member */
  SAI_InitStruct->SAI_OUTDRIV = SAI_OutputDrive_Disabled;
 8012d90:	6183      	str	r3, [r0, #24]
  /* Initialize the SAI_NoDivider member */
  SAI_InitStruct->SAI_NoDivider = SAI_MasterDivider_Enabled;
 8012d92:	61c3      	str	r3, [r0, #28]
  /* Initialize the SAI_MasterDivider member */
  SAI_InitStruct->SAI_MasterDivider = 0;
 8012d94:	6203      	str	r3, [r0, #32]
  /* Initialize the SAI_FIFOThreshold member */
  SAI_InitStruct->SAI_FIFOThreshold = SAI_Threshold_FIFOEmpty;
 8012d96:	6243      	str	r3, [r0, #36]	; 0x24
 8012d98:	4770      	bx	lr
	...

08012d9c <SAI_Cmd>:
  * @retval None
  */
void SAI_Cmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012d9c:	4b10      	ldr	r3, [pc, #64]	; (8012de0 <SAI_Cmd+0x44>)
 8012d9e:	4298      	cmp	r0, r3
  * @param  NewState: new state of the SAI_Block_x peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_Cmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 8012da0:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012da2:	d104      	bne.n	8012dae <SAI_Cmd+0x12>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8012da4:	2901      	cmp	r1, #1
 8012da6:	d912      	bls.n	8012dce <SAI_Cmd+0x32>
 8012da8:	2301      	movs	r3, #1
 8012daa:	9301      	str	r3, [sp, #4]
 8012dac:	e008      	b.n	8012dc0 <SAI_Cmd+0x24>
  * @retval None
  */
void SAI_Cmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012dae:	4b0d      	ldr	r3, [pc, #52]	; (8012de4 <SAI_Cmd+0x48>)
 8012db0:	4298      	cmp	r0, r3
 8012db2:	d0f7      	beq.n	8012da4 <SAI_Cmd+0x8>
 8012db4:	2301      	movs	r3, #1
 8012db6:	9300      	str	r3, [sp, #0]
 8012db8:	9b00      	ldr	r3, [sp, #0]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d1fc      	bne.n	8012db8 <SAI_Cmd+0x1c>
 8012dbe:	e7f1      	b.n	8012da4 <SAI_Cmd+0x8>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8012dc0:	9b01      	ldr	r3, [sp, #4]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d1fc      	bne.n	8012dc0 <SAI_Cmd+0x24>
  if (NewState != DISABLE)
  {
    /* Enable the selected SAI peripheral */
    SAI_Block_x->CR1 |= SAI_xCR1_SAIEN;
 8012dc6:	6803      	ldr	r3, [r0, #0]
 8012dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012dcc:	e004      	b.n	8012dd8 <SAI_Cmd+0x3c>
void SAI_Cmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012dce:	2900      	cmp	r1, #0
 8012dd0:	d1f9      	bne.n	8012dc6 <SAI_Cmd+0x2a>
    SAI_Block_x->CR1 |= SAI_xCR1_SAIEN;
  }
  else
  {
    /* Disable the selected SAI peripheral */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_SAIEN);
 8012dd2:	6803      	ldr	r3, [r0, #0]
 8012dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012dd8:	6003      	str	r3, [r0, #0]
  }
}
 8012dda:	b002      	add	sp, #8
 8012ddc:	4770      	bx	lr
 8012dde:	bf00      	nop
 8012de0:	40015804 	.word	0x40015804
 8012de4:	40015824 	.word	0x40015824

08012de8 <SAI_FlushFIFO>:
  * @retval None
  */
void SAI_FlushFIFO(SAI_Block_TypeDef* SAI_Block_x)
{
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012de8:	4b09      	ldr	r3, [pc, #36]	; (8012e10 <SAI_FlushFIFO+0x28>)
 8012dea:	4298      	cmp	r0, r3
  * @param  NewState: new state of the selected SAI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_FlushFIFO(SAI_Block_TypeDef* SAI_Block_x)
{
 8012dec:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012dee:	d105      	bne.n	8012dfc <SAI_FlushFIFO+0x14>

  /* FIFO flush */
  SAI_Block_x->CR2 |= SAI_xCR2_FFLUSH;
 8012df0:	6843      	ldr	r3, [r0, #4]
 8012df2:	f043 0308 	orr.w	r3, r3, #8
 8012df6:	6043      	str	r3, [r0, #4]
}
 8012df8:	b002      	add	sp, #8
 8012dfa:	4770      	bx	lr
  * @retval None
  */
void SAI_FlushFIFO(SAI_Block_TypeDef* SAI_Block_x)
{
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012dfc:	4b05      	ldr	r3, [pc, #20]	; (8012e14 <SAI_FlushFIFO+0x2c>)
 8012dfe:	4298      	cmp	r0, r3
 8012e00:	d0f6      	beq.n	8012df0 <SAI_FlushFIFO+0x8>
 8012e02:	2301      	movs	r3, #1
 8012e04:	9301      	str	r3, [sp, #4]
 8012e06:	9b01      	ldr	r3, [sp, #4]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d1fc      	bne.n	8012e06 <SAI_FlushFIFO+0x1e>
 8012e0c:	e7f0      	b.n	8012df0 <SAI_FlushFIFO+0x8>
 8012e0e:	bf00      	nop
 8012e10:	40015804 	.word	0x40015804
 8012e14:	40015824 	.word	0x40015824

08012e18 <SAI_DMACmd>:
  * @retval None
  */
void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012e18:	4b10      	ldr	r3, [pc, #64]	; (8012e5c <SAI_DMACmd+0x44>)
 8012e1a:	4298      	cmp	r0, r3
  * @param  NewState: new state of the selected SAI block DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 8012e1c:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012e1e:	d104      	bne.n	8012e2a <SAI_DMACmd+0x12>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8012e20:	2901      	cmp	r1, #1
 8012e22:	d912      	bls.n	8012e4a <SAI_DMACmd+0x32>
 8012e24:	2301      	movs	r3, #1
 8012e26:	9301      	str	r3, [sp, #4]
 8012e28:	e008      	b.n	8012e3c <SAI_DMACmd+0x24>
  * @retval None
  */
void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012e2a:	4b0d      	ldr	r3, [pc, #52]	; (8012e60 <SAI_DMACmd+0x48>)
 8012e2c:	4298      	cmp	r0, r3
 8012e2e:	d0f7      	beq.n	8012e20 <SAI_DMACmd+0x8>
 8012e30:	2301      	movs	r3, #1
 8012e32:	9300      	str	r3, [sp, #0]
 8012e34:	9b00      	ldr	r3, [sp, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d1fc      	bne.n	8012e34 <SAI_DMACmd+0x1c>
 8012e3a:	e7f1      	b.n	8012e20 <SAI_DMACmd+0x8>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8012e3c:	9b01      	ldr	r3, [sp, #4]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d1fc      	bne.n	8012e3c <SAI_DMACmd+0x24>
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR1 |= SAI_xCR1_DMAEN;
 8012e42:	6803      	ldr	r3, [r0, #0]
 8012e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012e48:	e004      	b.n	8012e54 <SAI_DMACmd+0x3c>
{
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012e4a:	2900      	cmp	r1, #0
 8012e4c:	d1f9      	bne.n	8012e42 <SAI_DMACmd+0x2a>
    SAI_Block_x->CR1 |= SAI_xCR1_DMAEN;
  }
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_DMAEN);
 8012e4e:	6803      	ldr	r3, [r0, #0]
 8012e50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012e54:	6003      	str	r3, [r0, #0]
  }
}
 8012e56:	b002      	add	sp, #8
 8012e58:	4770      	bx	lr
 8012e5a:	bf00      	nop
 8012e5c:	40015804 	.word	0x40015804
 8012e60:	40015824 	.word	0x40015824

08012e64 <SAI_ITConfig>:
  * @param  NewState: new state of the specified SAI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewState)
{ 
 8012e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012e66:	4b16      	ldr	r3, [pc, #88]	; (8012ec0 <SAI_ITConfig+0x5c>)
 8012e68:	4298      	cmp	r0, r3
 8012e6a:	d102      	bne.n	8012e72 <SAI_ITConfig+0xe>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8012e6c:	2a01      	cmp	r2, #1
 8012e6e:	d809      	bhi.n	8012e84 <SAI_ITConfig+0x20>
 8012e70:	e00d      	b.n	8012e8e <SAI_ITConfig+0x2a>
  * @retval None
  */
void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012e72:	4b14      	ldr	r3, [pc, #80]	; (8012ec4 <SAI_ITConfig+0x60>)
 8012e74:	4298      	cmp	r0, r3
 8012e76:	d0f9      	beq.n	8012e6c <SAI_ITConfig+0x8>
 8012e78:	2301      	movs	r3, #1
 8012e7a:	9301      	str	r3, [sp, #4]
 8012e7c:	9b01      	ldr	r3, [sp, #4]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d1fc      	bne.n	8012e7c <SAI_ITConfig+0x18>
 8012e82:	e7f3      	b.n	8012e6c <SAI_ITConfig+0x8>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8012e84:	2301      	movs	r3, #1
 8012e86:	9302      	str	r3, [sp, #8]
 8012e88:	9b02      	ldr	r3, [sp, #8]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d1fc      	bne.n	8012e88 <SAI_ITConfig+0x24>
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
 8012e8e:	1e4c      	subs	r4, r1, #1
 8012e90:	2c1f      	cmp	r4, #31
 8012e92:	d807      	bhi.n	8012ea4 <SAI_ITConfig+0x40>
 8012e94:	4b0c      	ldr	r3, [pc, #48]	; (8012ec8 <SAI_ITConfig+0x64>)
 8012e96:	40e3      	lsrs	r3, r4
 8012e98:	07db      	lsls	r3, r3, #31
 8012e9a:	d505      	bpl.n	8012ea8 <SAI_ITConfig+0x44>

  if (NewState != DISABLE)
 8012e9c:	b152      	cbz	r2, 8012eb4 <SAI_ITConfig+0x50>
  {
    /* Enable the selected SAI Block interrupt */
    SAI_Block_x->IMR |= SAI_IT;
 8012e9e:	6903      	ldr	r3, [r0, #16]
 8012ea0:	4319      	orrs	r1, r3
 8012ea2:	e00a      	b.n	8012eba <SAI_ITConfig+0x56>
void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
 8012ea4:	2940      	cmp	r1, #64	; 0x40
 8012ea6:	d0f9      	beq.n	8012e9c <SAI_ITConfig+0x38>
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	9303      	str	r3, [sp, #12]
 8012eac:	9b03      	ldr	r3, [sp, #12]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d1fc      	bne.n	8012eac <SAI_ITConfig+0x48>
 8012eb2:	e7f3      	b.n	8012e9c <SAI_ITConfig+0x38>
    SAI_Block_x->IMR |= SAI_IT;
  }
  else
  {
    /* Disable the selected SAI Block interrupt */
    SAI_Block_x->IMR &= ~(SAI_IT);
 8012eb4:	6903      	ldr	r3, [r0, #16]
 8012eb6:	ea23 0101 	bic.w	r1, r3, r1
 8012eba:	6101      	str	r1, [r0, #16]
  }
}
 8012ebc:	b004      	add	sp, #16
 8012ebe:	bd10      	pop	{r4, pc}
 8012ec0:	40015804 	.word	0x40015804
 8012ec4:	40015824 	.word	0x40015824
 8012ec8:	8000808b 	.word	0x8000808b

08012ecc <SAI_GetCmdStatus>:
FunctionalState SAI_GetCmdStatus(SAI_Block_TypeDef* SAI_Block_x)
{
  FunctionalState state = DISABLE;

  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012ecc:	4b08      	ldr	r3, [pc, #32]	; (8012ef0 <SAI_GetCmdStatus+0x24>)
 8012ece:	4298      	cmp	r0, r3
  *          the end of audio frame.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState SAI_GetCmdStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 8012ed0:	b082      	sub	sp, #8
  FunctionalState state = DISABLE;

  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 8012ed2:	d007      	beq.n	8012ee4 <SAI_GetCmdStatus+0x18>
 8012ed4:	3320      	adds	r3, #32
 8012ed6:	4298      	cmp	r0, r3
 8012ed8:	d004      	beq.n	8012ee4 <SAI_GetCmdStatus+0x18>
 8012eda:	2301      	movs	r3, #1
 8012edc:	9301      	str	r3, [sp, #4]
 8012ede:	9b01      	ldr	r3, [sp, #4]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d1fc      	bne.n	8012ede <SAI_GetCmdStatus+0x12>
  if ((SAI_Block_x->CR1 & (uint32_t)SAI_xCR1_SAIEN) != 0)
 8012ee4:	6800      	ldr	r0, [r0, #0]
  {
    /* The selected SAI Block x EN bit is cleared (SAI Block is disabled and 
        all transfers are complete) */
    state = DISABLE;
  }
  return state;
 8012ee6:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
 8012eea:	b002      	add	sp, #8
 8012eec:	4770      	bx	lr
 8012eee:	bf00      	nop
 8012ef0:	40015804 	.word	0x40015804

08012ef4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8012ef4:	b530      	push	{r4, r5, lr}
  uint16_t tmpcr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 8012ef6:	4b48      	ldr	r3, [pc, #288]	; (8013018 <TIM_TimeBaseInit+0x124>)
 8012ef8:	4298      	cmp	r0, r3
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8012efa:	b085      	sub	sp, #20
  uint16_t tmpcr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 8012efc:	d104      	bne.n	8012f08 <TIM_TimeBaseInit+0x14>
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
 8012efe:	884a      	ldrh	r2, [r1, #2]
 8012f00:	f022 0310 	bic.w	r3, r2, #16
 8012f04:	bbc3      	cbnz	r3, 8012f78 <TIM_TimeBaseInit+0x84>
 8012f06:	e03b      	b.n	8012f80 <TIM_TimeBaseInit+0x8c>
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  uint16_t tmpcr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 8012f08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012f0c:	d0f7      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f0e:	4b43      	ldr	r3, [pc, #268]	; (801301c <TIM_TimeBaseInit+0x128>)
 8012f10:	4298      	cmp	r0, r3
 8012f12:	d0f4      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f18:	4298      	cmp	r0, r3
 8012f1a:	d0f0      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f20:	4298      	cmp	r0, r3
 8012f22:	d0ec      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f28:	4298      	cmp	r0, r3
 8012f2a:	d0e8      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f30:	4298      	cmp	r0, r3
 8012f32:	d0e4      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f34:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8012f38:	4298      	cmp	r0, r3
 8012f3a:	d0e0      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f3c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8012f40:	4298      	cmp	r0, r3
 8012f42:	d0dc      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f48:	4298      	cmp	r0, r3
 8012f4a:	d0d8      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f50:	4298      	cmp	r0, r3
 8012f52:	d0d4      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f54:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8012f58:	4298      	cmp	r0, r3
 8012f5a:	d0d0      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f60:	4298      	cmp	r0, r3
 8012f62:	d0cc      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f68:	4298      	cmp	r0, r3
 8012f6a:	d0c8      	beq.n	8012efe <TIM_TimeBaseInit+0xa>
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	9301      	str	r3, [sp, #4]
 8012f70:	9b01      	ldr	r3, [sp, #4]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d1fc      	bne.n	8012f70 <TIM_TimeBaseInit+0x7c>
 8012f76:	e7c2      	b.n	8012efe <TIM_TimeBaseInit+0xa>
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
 8012f78:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8012f7c:	2b20      	cmp	r3, #32
 8012f7e:	d104      	bne.n	8012f8a <TIM_TimeBaseInit+0x96>
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
 8012f80:	890c      	ldrh	r4, [r1, #8]
 8012f82:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 8012f86:	b943      	cbnz	r3, 8012f9a <TIM_TimeBaseInit+0xa6>
 8012f88:	e00f      	b.n	8012faa <TIM_TimeBaseInit+0xb6>
{
  uint16_t tmpcr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
 8012f8a:	2a40      	cmp	r2, #64	; 0x40
 8012f8c:	d0f8      	beq.n	8012f80 <TIM_TimeBaseInit+0x8c>
 8012f8e:	2301      	movs	r3, #1
 8012f90:	9302      	str	r3, [sp, #8]
 8012f92:	9b02      	ldr	r3, [sp, #8]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d1fc      	bne.n	8012f92 <TIM_TimeBaseInit+0x9e>
 8012f98:	e7f2      	b.n	8012f80 <TIM_TimeBaseInit+0x8c>
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
 8012f9a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8012f9e:	d004      	beq.n	8012faa <TIM_TimeBaseInit+0xb6>
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	9303      	str	r3, [sp, #12]
 8012fa4:	9b03      	ldr	r3, [sp, #12]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d1fc      	bne.n	8012fa4 <TIM_TimeBaseInit+0xb0>

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8012faa:	4d1b      	ldr	r5, [pc, #108]	; (8013018 <TIM_TimeBaseInit+0x124>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8012fac:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8012fae:	42a8      	cmp	r0, r5
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8012fb0:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8012fb2:	d011      	beq.n	8012fd8 <TIM_TimeBaseInit+0xe4>
 8012fb4:	4d1a      	ldr	r5, [pc, #104]	; (8013020 <TIM_TimeBaseInit+0x12c>)
 8012fb6:	42a8      	cmp	r0, r5
 8012fb8:	d00e      	beq.n	8012fd8 <TIM_TimeBaseInit+0xe4>
 8012fba:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012fbe:	d00b      	beq.n	8012fd8 <TIM_TimeBaseInit+0xe4>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8012fc0:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
 8012fc4:	42a8      	cmp	r0, r5
 8012fc6:	d007      	beq.n	8012fd8 <TIM_TimeBaseInit+0xe4>
 8012fc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8012fcc:	42a8      	cmp	r0, r5
 8012fce:	d003      	beq.n	8012fd8 <TIM_TimeBaseInit+0xe4>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8012fd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8012fd4:	42a8      	cmp	r0, r5
 8012fd6:	d102      	bne.n	8012fde <TIM_TimeBaseInit+0xea>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8012fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8012fdc:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8012fde:	4a11      	ldr	r2, [pc, #68]	; (8013024 <TIM_TimeBaseInit+0x130>)
 8012fe0:	4290      	cmp	r0, r2
 8012fe2:	d007      	beq.n	8012ff4 <TIM_TimeBaseInit+0x100>
 8012fe4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012fe8:	4290      	cmp	r0, r2
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8012fea:	bf1e      	ittt	ne
 8012fec:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8012ff0:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8012ff2:	4323      	orrne	r3, r4
  }

  TIMx->CR1 = tmpcr1;
 8012ff4:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8012ff6:	684b      	ldr	r3, [r1, #4]
 8012ff8:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8012ffa:	880b      	ldrh	r3, [r1, #0]
 8012ffc:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8012ffe:	4b06      	ldr	r3, [pc, #24]	; (8013018 <TIM_TimeBaseInit+0x124>)
 8013000:	4298      	cmp	r0, r3
 8013002:	d003      	beq.n	801300c <TIM_TimeBaseInit+0x118>
 8013004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013008:	4298      	cmp	r0, r3
 801300a:	d101      	bne.n	8013010 <TIM_TimeBaseInit+0x11c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 801300c:	7a8b      	ldrb	r3, [r1, #10]
 801300e:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8013010:	2301      	movs	r3, #1
 8013012:	8283      	strh	r3, [r0, #20]
}
 8013014:	b005      	add	sp, #20
 8013016:	bd30      	pop	{r4, r5, pc}
 8013018:	40010000 	.word	0x40010000
 801301c:	40000400 	.word	0x40000400
 8013020:	40010400 	.word	0x40010400
 8013024:	40001000 	.word	0x40001000

08013028 <TIM_Cmd>:
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 8013028:	4b29      	ldr	r3, [pc, #164]	; (80130d0 <TIM_Cmd+0xa8>)
 801302a:	4298      	cmp	r0, r3
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801302c:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 801302e:	d104      	bne.n	801303a <TIM_Cmd+0x12>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8013030:	2901      	cmp	r1, #1
 8013032:	d942      	bls.n	80130ba <TIM_Cmd+0x92>
 8013034:	2301      	movs	r3, #1
 8013036:	9301      	str	r3, [sp, #4]
 8013038:	e037      	b.n	80130aa <TIM_Cmd+0x82>
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 801303a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801303e:	d0f7      	beq.n	8013030 <TIM_Cmd+0x8>
 8013040:	4b24      	ldr	r3, [pc, #144]	; (80130d4 <TIM_Cmd+0xac>)
 8013042:	4298      	cmp	r0, r3
 8013044:	d0f4      	beq.n	8013030 <TIM_Cmd+0x8>
 8013046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801304a:	4298      	cmp	r0, r3
 801304c:	d0f0      	beq.n	8013030 <TIM_Cmd+0x8>
 801304e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013052:	4298      	cmp	r0, r3
 8013054:	d0ec      	beq.n	8013030 <TIM_Cmd+0x8>
 8013056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801305a:	4298      	cmp	r0, r3
 801305c:	d0e8      	beq.n	8013030 <TIM_Cmd+0x8>
 801305e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013062:	4298      	cmp	r0, r3
 8013064:	d0e4      	beq.n	8013030 <TIM_Cmd+0x8>
 8013066:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 801306a:	4298      	cmp	r0, r3
 801306c:	d0e0      	beq.n	8013030 <TIM_Cmd+0x8>
 801306e:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8013072:	4298      	cmp	r0, r3
 8013074:	d0dc      	beq.n	8013030 <TIM_Cmd+0x8>
 8013076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801307a:	4298      	cmp	r0, r3
 801307c:	d0d8      	beq.n	8013030 <TIM_Cmd+0x8>
 801307e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013082:	4298      	cmp	r0, r3
 8013084:	d0d4      	beq.n	8013030 <TIM_Cmd+0x8>
 8013086:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 801308a:	4298      	cmp	r0, r3
 801308c:	d0d0      	beq.n	8013030 <TIM_Cmd+0x8>
 801308e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013092:	4298      	cmp	r0, r3
 8013094:	d0cc      	beq.n	8013030 <TIM_Cmd+0x8>
 8013096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801309a:	4298      	cmp	r0, r3
 801309c:	d0c8      	beq.n	8013030 <TIM_Cmd+0x8>
 801309e:	2301      	movs	r3, #1
 80130a0:	9300      	str	r3, [sp, #0]
 80130a2:	9b00      	ldr	r3, [sp, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d1fc      	bne.n	80130a2 <TIM_Cmd+0x7a>
 80130a8:	e7c2      	b.n	8013030 <TIM_Cmd+0x8>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80130aa:	9b01      	ldr	r3, [sp, #4]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d1fc      	bne.n	80130aa <TIM_Cmd+0x82>
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80130b0:	8803      	ldrh	r3, [r0, #0]
 80130b2:	b29b      	uxth	r3, r3
 80130b4:	f043 0301 	orr.w	r3, r3, #1
 80130b8:	e006      	b.n	80130c8 <TIM_Cmd+0xa0>
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80130ba:	2900      	cmp	r1, #0
 80130bc:	d1f8      	bne.n	80130b0 <TIM_Cmd+0x88>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80130be:	8803      	ldrh	r3, [r0, #0]
 80130c0:	f023 0301 	bic.w	r3, r3, #1
 80130c4:	041b      	lsls	r3, r3, #16
 80130c6:	0c1b      	lsrs	r3, r3, #16
 80130c8:	8003      	strh	r3, [r0, #0]
  }
}
 80130ca:	b002      	add	sp, #8
 80130cc:	4770      	bx	lr
 80130ce:	bf00      	nop
 80130d0:	40010000 	.word	0x40010000
 80130d4:	40000400 	.word	0x40000400

080130d8 <IWDG_WriteAccessCmd>:
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
 80130d8:	f245 5355 	movw	r3, #21845	; 0x5555
 80130dc:	4298      	cmp	r0, r3
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 80130de:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
 80130e0:	d103      	bne.n	80130ea <IWDG_WriteAccessCmd+0x12>
  IWDG->KR = IWDG_WriteAccess;
 80130e2:	4b06      	ldr	r3, [pc, #24]	; (80130fc <IWDG_WriteAccessCmd+0x24>)
 80130e4:	6018      	str	r0, [r3, #0]
}
 80130e6:	b002      	add	sp, #8
 80130e8:	4770      	bx	lr
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
 80130ea:	2800      	cmp	r0, #0
 80130ec:	d0f9      	beq.n	80130e2 <IWDG_WriteAccessCmd+0xa>
 80130ee:	2301      	movs	r3, #1
 80130f0:	9301      	str	r3, [sp, #4]
 80130f2:	9b01      	ldr	r3, [sp, #4]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d1fc      	bne.n	80130f2 <IWDG_WriteAccessCmd+0x1a>
 80130f8:	e7f3      	b.n	80130e2 <IWDG_WriteAccessCmd+0xa>
 80130fa:	bf00      	nop
 80130fc:	40003000 	.word	0x40003000

08013100 <IWDG_SetPrescaler>:
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
 8013100:	2806      	cmp	r0, #6
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 8013102:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
 8013104:	d803      	bhi.n	801310e <IWDG_SetPrescaler+0xe>
  IWDG->PR = IWDG_Prescaler;
 8013106:	4b05      	ldr	r3, [pc, #20]	; (801311c <IWDG_SetPrescaler+0x1c>)
 8013108:	6058      	str	r0, [r3, #4]
}
 801310a:	b002      	add	sp, #8
 801310c:	4770      	bx	lr
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
 801310e:	2301      	movs	r3, #1
 8013110:	9301      	str	r3, [sp, #4]
 8013112:	9b01      	ldr	r3, [sp, #4]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d1fc      	bne.n	8013112 <IWDG_SetPrescaler+0x12>
 8013118:	e7f5      	b.n	8013106 <IWDG_SetPrescaler+0x6>
 801311a:	bf00      	nop
 801311c:	40003000 	.word	0x40003000

08013120 <IWDG_SetReload>:
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
 8013120:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 8013124:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
 8013126:	d203      	bcs.n	8013130 <IWDG_SetReload+0x10>
  IWDG->RLR = Reload;
 8013128:	4b04      	ldr	r3, [pc, #16]	; (801313c <IWDG_SetReload+0x1c>)
 801312a:	6098      	str	r0, [r3, #8]
}
 801312c:	b002      	add	sp, #8
 801312e:	4770      	bx	lr
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
 8013130:	2301      	movs	r3, #1
 8013132:	9301      	str	r3, [sp, #4]
 8013134:	9b01      	ldr	r3, [sp, #4]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d1fc      	bne.n	8013134 <IWDG_SetReload+0x14>
 801313a:	e7f5      	b.n	8013128 <IWDG_SetReload+0x8>
 801313c:	40003000 	.word	0x40003000

08013140 <IWDG_ReloadCounter>:
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_RELOAD;
 8013140:	4b02      	ldr	r3, [pc, #8]	; (801314c <IWDG_ReloadCounter+0xc>)
 8013142:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8013146:	601a      	str	r2, [r3, #0]
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop
 801314c:	40003000 	.word	0x40003000

08013150 <IWDG_Enable>:
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
  IWDG->KR = KR_KEY_ENABLE;
 8013150:	4b02      	ldr	r3, [pc, #8]	; (801315c <IWDG_Enable+0xc>)
 8013152:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8013156:	601a      	str	r2, [r3, #0]
 8013158:	4770      	bx	lr
 801315a:	bf00      	nop
 801315c:	40003000 	.word	0x40003000

08013160 <initParam>:

EHIF_CMD_DI_GET_CHIP_INFO_DATA_T    ehifNwmGetChipIdData;

static void initParam(void)
{
  memset(&ehifCmdParam, 0x00, sizeof(ehifCmdParam));
 8013160:	2212      	movs	r2, #18
 8013162:	2100      	movs	r1, #0
 8013164:	4801      	ldr	r0, [pc, #4]	; (801316c <initParam+0xc>)
 8013166:	f00a b805 	b.w	801d174 <memset>
 801316a:	bf00      	nop
 801316c:	10003393 	.word	0x10003393

08013170 <getDeviceInfo>:
} // initParam



EHIF_CMD_DI_GET_DEVICE_INFO_DATA_T getDeviceInfo(void)
{
 8013170:	b570      	push	{r4, r5, r6, lr}
 8013172:	b086      	sub	sp, #24
  uint16_t readbcLength;

  EHIF_CMD_DI_GET_DEVICE_INFO_DATA_T devInfo;
  memset(&devInfo, 0x00, sizeof(devInfo) );
 8013174:	2600      	movs	r6, #0
} // initParam



EHIF_CMD_DI_GET_DEVICE_INFO_DATA_T getDeviceInfo(void)
{
 8013176:	4605      	mov	r5, r0
  uint16_t readbcLength;

  EHIF_CMD_DI_GET_DEVICE_INFO_DATA_T devInfo;
  memset(&devInfo, 0x00, sizeof(devInfo) );
 8013178:	ac03      	add	r4, sp, #12
 801317a:	9603      	str	r6, [sp, #12]
 801317c:	9604      	str	r6, [sp, #16]
 801317e:	9605      	str	r6, [sp, #20]
  initParam();
 8013180:	f7ff ffee 	bl	8013160 <initParam>
  readbcLength = 12;

  ehifCmdExecWithRead(EHIF_EXEC_ALL, EHIF_CMD_DI_GET_DEVICE_INFO,
 8013184:	230c      	movs	r3, #12
 8013186:	9300      	str	r3, [sp, #0]
 8013188:	9401      	str	r4, [sp, #4]
 801318a:	4b07      	ldr	r3, [pc, #28]	; (80131a8 <getDeviceInfo+0x38>)
 801318c:	4632      	mov	r2, r6
 801318e:	211e      	movs	r1, #30
 8013190:	2006      	movs	r0, #6
 8013192:	f000 f97d 	bl	8013490 <ehifCmdExecWithRead>
                      0, &ehifCmdParam,
                      readbcLength, &devInfo);

  return devInfo;
 8013196:	4623      	mov	r3, r4
 8013198:	cb03      	ldmia	r3!, {r0, r1}
 801319a:	6028      	str	r0, [r5, #0]
 801319c:	6818      	ldr	r0, [r3, #0]
 801319e:	60a8      	str	r0, [r5, #8]
}
 80131a0:	4628      	mov	r0, r5

  ehifCmdExecWithRead(EHIF_EXEC_ALL, EHIF_CMD_DI_GET_DEVICE_INFO,
                      0, &ehifCmdParam,
                      readbcLength, &devInfo);

  return devInfo;
 80131a2:	6069      	str	r1, [r5, #4]
}
 80131a4:	b006      	add	sp, #24
 80131a6:	bd70      	pop	{r4, r5, r6, pc}
 80131a8:	10003393 	.word	0x10003393

080131ac <clearFlags>:
      return 0;
    }
}

void clearFlags( uint8_t mask )
{
 80131ac:	b510      	push	{r4, lr}
 80131ae:	4604      	mov	r4, r0
  mask &= 0x3F;
  initParam();
 80131b0:	f7ff ffd6 	bl	8013160 <initParam>
  ehifCmdParam.ehcEvtClr.clearedEvents = mask;
 80131b4:	4a04      	ldr	r2, [pc, #16]	; (80131c8 <clearFlags+0x1c>)
 80131b6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80131ba:	7014      	strb	r4, [r2, #0]
  ehifCmdExec(EHIF_CMD_EHC_EVT_CLR, sizeof(EHIF_CMD_EHC_EVT_CLR_PARAM_T), &ehifCmdParam);
 80131bc:	2101      	movs	r1, #1
 80131be:	2019      	movs	r0, #25
}
 80131c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void clearFlags( uint8_t mask )
{
  mask &= 0x3F;
  initParam();
  ehifCmdParam.ehcEvtClr.clearedEvents = mask;
  ehifCmdExec(EHIF_CMD_EHC_EVT_CLR, sizeof(EHIF_CMD_EHC_EVT_CLR_PARAM_T), &ehifCmdParam);
 80131c4:	f000 b8f8 	b.w	80133b8 <ehifCmdExec>
 80131c8:	10003393 	.word	0x10003393

080131cc <setIntEvents>:
}

void setIntEvents( uint8_t mask )
{
 80131cc:	b510      	push	{r4, lr}
 80131ce:	4604      	mov	r4, r0
  initParam();
 80131d0:	f7ff ffc6 	bl	8013160 <initParam>
  ehifCmdParam.ehcEvtMask.irqGioLevel = ACTIVE_LOW;
 80131d4:	4a05      	ldr	r2, [pc, #20]	; (80131ec <setIntEvents+0x20>)
 80131d6:	7813      	ldrb	r3, [r2, #0]
  ehifCmdParam.ehcEvtMask.eventFilter = mask;
 80131d8:	7054      	strb	r4, [r2, #1]
}

void setIntEvents( uint8_t mask )
{
  initParam();
  ehifCmdParam.ehcEvtMask.irqGioLevel = ACTIVE_LOW;
 80131da:	f36f 0300 	bfc	r3, #0, #1
 80131de:	7013      	strb	r3, [r2, #0]
  ehifCmdParam.ehcEvtMask.eventFilter = mask;
  ehifCmdExec(EHIF_CMD_EHC_EVT_MASK, sizeof(EHIF_CMD_EHC_EVT_MASK_PARAM_T), &ehifCmdParam);
 80131e0:	2102      	movs	r1, #2
 80131e2:	201a      	movs	r0, #26
}
 80131e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void setIntEvents( uint8_t mask )
{
  initParam();
  ehifCmdParam.ehcEvtMask.irqGioLevel = ACTIVE_LOW;
  ehifCmdParam.ehcEvtMask.eventFilter = mask;
  ehifCmdExec(EHIF_CMD_EHC_EVT_MASK, sizeof(EHIF_CMD_EHC_EVT_MASK_PARAM_T), &ehifCmdParam);
 80131e8:	f000 b8e6 	b.w	80133b8 <ehifCmdExec>
 80131ec:	10003393 	.word	0x10003393

080131f0 <queueRX>:



// returns RX data length and address
int queueRX(uint32_t *address, uint8_t *ret_data, uint8_t *reset)
{
 80131f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131f2:	b08f      	sub	sp, #60	; 0x3c
 80131f4:	4607      	mov	r7, r0
 80131f6:	460e      	mov	r6, r1
 80131f8:	4615      	mov	r5, r2
  uint16_t readbcLength;
  unsigned char data[PAYLOAD_PLUS_ADR];
#define RX_FRAME_HEADER_SIZE 5

  // check Data avalibility
  if (ehifGetStatus() &  BV_EHIF_EVT_DSC_RX_AVAIL )
 80131fa:	f000 fad0 	bl	801379e <ehifGetStatus>
 80131fe:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8013202:	b284      	uxth	r4, r0
 8013204:	b324      	cbz	r4, 8013250 <queueRX+0x60>
    {
      initParam();
 8013206:	f7ff ffab 	bl	8013160 <initParam>
      readbcLength = PAYLOAD_PLUS_ADR;
 801320a:	2325      	movs	r3, #37	; 0x25
 801320c:	f8ad 300e 	strh.w	r3, [sp, #14]
      ehifCmdExecWithReadbc(EHIF_EXEC_ALL,  EHIF_CMD_DSC_RX_DATAGRAM,
 8013210:	ab04      	add	r3, sp, #16
 8013212:	9301      	str	r3, [sp, #4]
 8013214:	f10d 030e 	add.w	r3, sp, #14
 8013218:	9300      	str	r3, [sp, #0]
 801321a:	2200      	movs	r2, #0
 801321c:	4b0e      	ldr	r3, [pc, #56]	; (8013258 <queueRX+0x68>)
 801321e:	2105      	movs	r1, #5
 8013220:	2006      	movs	r0, #6
 8013222:	f000 f9e5 	bl	80135f0 <ehifCmdExecWithReadbc>
                            0, &ehifCmdParam,
                            &readbcLength, &data);
      if (readbcLength)
 8013226:	f8bd 400e 	ldrh.w	r4, [sp, #14]
 801322a:	b14c      	cbz	r4, 8013240 <queueRX+0x50>
        {
          ret = readbcLength-RX_FRAME_HEADER_SIZE;
 801322c:	3c05      	subs	r4, #5
          *address = *(uint32_t *)(data + 1);
 801322e:	f8dd 3011 	ldr.w	r3, [sp, #17]
 8013232:	603b      	str	r3, [r7, #0]
          memcpy(ret_data, data + RX_FRAME_HEADER_SIZE, readbcLength - RX_FRAME_HEADER_SIZE);     // 5 = 4bytes of address and one additional reserved byte
 8013234:	4622      	mov	r2, r4
 8013236:	f10d 0115 	add.w	r1, sp, #21
 801323a:	4630      	mov	r0, r6
 801323c:	f009 ff00 	bl	801d040 <memcpy>
      else
        {
          ret = 0;
        }

      if(reset)
 8013240:	b135      	cbz	r5, 8013250 <queueRX+0x60>
        {
          if (data[0] & 0x01) // check reset conection flag in received datagram
 8013242:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013246:	f013 0301 	ands.w	r3, r3, #1
            *reset = 1;
 801324a:	bf18      	it	ne
 801324c:	2301      	movne	r3, #1
          else
            *reset = 0;
 801324e:	702b      	strb	r3, [r5, #0]
        }
    }
  return ret;
}
 8013250:	4620      	mov	r0, r4
 8013252:	b00f      	add	sp, #60	; 0x3c
 8013254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013256:	bf00      	nop
 8013258:	10003393 	.word	0x10003393

0801325c <queueTX>:

int queueTX(remoteDev_t *dev, uint16_t dataLength, uint8_t *data, uint8_t reset)
{
 801325c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  //#warning "Check for data-side connection availability and remote device compatibility"
  int ret = 0;

  massert(dataLength <= MAX_PAYLOAD);
 8013260:	2920      	cmp	r1, #32
    }
  return ret;
}

int queueTX(remoteDev_t *dev, uint16_t dataLength, uint8_t *data, uint8_t reset)
{
 8013262:	b085      	sub	sp, #20
 8013264:	4607      	mov	r7, r0
 8013266:	460e      	mov	r6, r1
 8013268:	4690      	mov	r8, r2
 801326a:	4699      	mov	r9, r3
  //#warning "Check for data-side connection availability and remote device compatibility"
  int ret = 0;

  massert(dataLength <= MAX_PAYLOAD);
 801326c:	d807      	bhi.n	801327e <queueTX+0x22>
  uint16_t status = ehifGetStatus();
 801326e:	f000 fa96 	bl	801379e <ehifGetStatus>

  if (  status &  BV_EHIF_STAT_CONNECTED )
 8013272:	05c5      	lsls	r5, r0, #23
{
  //#warning "Check for data-side connection availability and remote device compatibility"
  int ret = 0;

  massert(dataLength <= MAX_PAYLOAD);
  uint16_t status = ehifGetStatus();
 8013274:	4604      	mov	r4, r0

  if (  status &  BV_EHIF_STAT_CONNECTED )
 8013276:	d40e      	bmi.n	8013296 <queueTX+0x3a>
        }

    }
  else
    {
      return -2;
 8013278:	f06f 0001 	mvn.w	r0, #1
 801327c:	e046      	b.n	801330c <queueTX+0xb0>
int queueTX(remoteDev_t *dev, uint16_t dataLength, uint8_t *data, uint8_t reset)
{
  //#warning "Check for data-side connection availability and remote device compatibility"
  int ret = 0;

  massert(dataLength <= MAX_PAYLOAD);
 801327e:	4b25      	ldr	r3, [pc, #148]	; (8013314 <queueTX+0xb8>)
 8013280:	4925      	ldr	r1, [pc, #148]	; (8013318 <queueTX+0xbc>)
 8013282:	4826      	ldr	r0, [pc, #152]	; (801331c <queueTX+0xc0>)
 8013284:	22a1      	movs	r2, #161	; 0xa1
 8013286:	f7f5 fccf 	bl	8008c28 <xprintf>
 801328a:	2301      	movs	r3, #1
 801328c:	9302      	str	r3, [sp, #8]
 801328e:	9b02      	ldr	r3, [sp, #8]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d1fc      	bne.n	801328e <queueTX+0x32>
 8013294:	e7eb      	b.n	801326e <queueTX+0x12>
  uint16_t status = ehifGetStatus();

  if (  status &  BV_EHIF_STAT_CONNECTED )
    {
      if ( status & BV_EHIF_EVT_SPI_ERROR)
 8013296:	06c0      	lsls	r0, r0, #27
 8013298:	d515      	bpl.n	80132c6 <queueTX+0x6a>
        {
          // clear SPI_ERROR_FLAG:
          clearFlags( BV_EHIF_EVT_SPI_ERROR );
 801329a:	2010      	movs	r0, #16
 801329c:	f7ff ff86 	bl	80131ac <clearFlags>
 80132a0:	2564      	movs	r5, #100	; 0x64
          int timeout = 100;
          do
            {
              status = ehifGetStatus();
 80132a2:	f000 fa7c 	bl	801379e <ehifGetStatus>
            }
          while ( status & BV_EHIF_EVT_SPI_ERROR && --timeout );
 80132a6:	06c1      	lsls	r1, r0, #27
          // clear SPI_ERROR_FLAG:
          clearFlags( BV_EHIF_EVT_SPI_ERROR );
          int timeout = 100;
          do
            {
              status = ehifGetStatus();
 80132a8:	4604      	mov	r4, r0
            }
          while ( status & BV_EHIF_EVT_SPI_ERROR && --timeout );
 80132aa:	d50c      	bpl.n	80132c6 <queueTX+0x6a>
 80132ac:	3d01      	subs	r5, #1
 80132ae:	d1f8      	bne.n	80132a2 <queueTX+0x46>
          massert(timeout);
 80132b0:	4b1b      	ldr	r3, [pc, #108]	; (8013320 <queueTX+0xc4>)
 80132b2:	4919      	ldr	r1, [pc, #100]	; (8013318 <queueTX+0xbc>)
 80132b4:	4819      	ldr	r0, [pc, #100]	; (801331c <queueTX+0xc0>)
 80132b6:	22b0      	movs	r2, #176	; 0xb0
 80132b8:	f7f5 fcb6 	bl	8008c28 <xprintf>
 80132bc:	2301      	movs	r3, #1
 80132be:	9303      	str	r3, [sp, #12]
 80132c0:	9b03      	ldr	r3, [sp, #12]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d1fc      	bne.n	80132c0 <queueTX+0x64>
        }
      if ( status & BV_EHIF_EVT_DSC_TX_AVAIL )
 80132c6:	0662      	lsls	r2, r4, #25
 80132c8:	d51e      	bpl.n	8013308 <queueTX+0xac>
        {
          initParam();
 80132ca:	f7ff ff49 	bl	8013160 <initParam>
 80132ce:	4b15      	ldr	r3, [pc, #84]	; (8013324 <queueTX+0xc8>)
          // check wheather datagram connection needs to be reestablished
          if (reset)
 80132d0:	f1b9 0f00 	cmp.w	r9, #0
 80132d4:	d003      	beq.n	80132de <queueTX+0x82>
            ehifCmdParam.dscTxDatagram.connReset = 1;
 80132d6:	781a      	ldrb	r2, [r3, #0]
 80132d8:	f042 0201 	orr.w	r2, r2, #1
 80132dc:	701a      	strb	r2, [r3, #0]

          ehifCmdParam.dscTxDatagram.addr = dev->devID;
 80132de:	683a      	ldr	r2, [r7, #0]
 80132e0:	f8c3 2001 	str.w	r2, [r3, #1]

          WAIT_BUSY;
 80132e4:	f000 fa5b 	bl	801379e <ehifGetStatus>
 80132e8:	0403      	lsls	r3, r0, #16
 80132ea:	d403      	bmi.n	80132f4 <queueTX+0x98>
 80132ec:	2001      	movs	r0, #1
 80132ee:	f7f7 fc0b 	bl	800ab08 <vTaskDelay>
 80132f2:	e7f7      	b.n	80132e4 <queueTX+0x88>
          ehifCmdExecWithWrite(EHIF_EXEC_ALL, EHIF_CMD_DSC_TX_DATAGRAM,
 80132f4:	2006      	movs	r0, #6
 80132f6:	e88d 0140 	stmia.w	sp, {r6, r8}
 80132fa:	4b0a      	ldr	r3, [pc, #40]	; (8013324 <queueTX+0xc8>)
 80132fc:	2205      	movs	r2, #5
 80132fe:	2104      	movs	r1, #4
 8013300:	f000 f9c0 	bl	8013684 <ehifCmdExecWithWrite>
  else
    {
      return -2;
    }

  return ret;
 8013304:	2000      	movs	r0, #0
 8013306:	e001      	b.n	801330c <queueTX+0xb0>
                               sizeof(EHIF_CMD_DSC_TX_DATAGRAM_PARAM_T) , &ehifCmdParam,
                               dataLength, (void *) data);
        }
      else
        {
          return -1;//TxFull
 8013308:	f04f 30ff 	mov.w	r0, #4294967295
    {
      return -2;
    }

  return ret;
}
 801330c:	b005      	add	sp, #20
 801330e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013312:	bf00      	nop
 8013314:	0803e9b1 	.word	0x0803e9b1
 8013318:	0803e990 	.word	0x0803e990
 801331c:	0801d5dd 	.word	0x0801d5dd
 8013320:	0803e6c8 	.word	0x0803e6c8
 8013324:	10003393 	.word	0x10003393

08013328 <reset_powerActive>:
  ehifCmdExec(EHIF_CMD_PM_SET_STATE, sizeof(EHIF_CMD_PM_SET_STATE_PARAM_T), &ehifCmdParam);
}


int reset_powerActive(void)
{
 8013328:	b508      	push	{r3, lr}
  // HANDLE POWER ON
  // Ensure known state (power state 5)
  ehifSysResetSpi(1); // with wait rready flag
 801332a:	2001      	movs	r0, #1
 801332c:	f000 fb28 	bl	8013980 <ehifSysResetSpi>
  ehifWaitReadyMs(300);
 8013330:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013334:	f000 fb0c 	bl	8013950 <ehifWaitReadyMs>
  return ehifGetWaitReadyError();
 8013338:	f000 fb72 	bl	8013a20 <ehifGetWaitReadyError>
}
 801333c:	bd08      	pop	{r3, pc}
	...

08013340 <initParam>:
EHIF_CMD_DATA_T  ehifCmdData;


static void initParam(void)
{
  memset(&ehifCmdParam, 0x00, sizeof(ehifCmdParam));
 8013340:	2212      	movs	r2, #18
 8013342:	2100      	movs	r1, #0
 8013344:	4801      	ldr	r0, [pc, #4]	; (801334c <initParam+0xc>)
 8013346:	f009 bf15 	b.w	801d174 <memset>
 801334a:	bf00      	nop
 801334c:	10003393 	.word	0x10003393

08013350 <getStatus>:
} // initParam


EHIF_CMD_NWM_GET_STATUS_MASTER_DATA_T getStatus(void)
{
 8013350:	b570      	push	{r4, r5, r6, lr}
 8013352:	b09e      	sub	sp, #120	; 0x78
  uint16_t readbcLength;

  EHIF_CMD_NWM_GET_STATUS_MASTER_DATA_T statusMaster;
  memset(&statusMaster, 0x00, sizeof(statusMaster) );
 8013354:	ac04      	add	r4, sp, #16
 8013356:	2565      	movs	r5, #101	; 0x65
  memset(&ehifCmdParam, 0x00, sizeof(ehifCmdParam));
} // initParam


EHIF_CMD_NWM_GET_STATUS_MASTER_DATA_T getStatus(void)
{
 8013358:	4606      	mov	r6, r0
  uint16_t readbcLength;

  EHIF_CMD_NWM_GET_STATUS_MASTER_DATA_T statusMaster;
  memset(&statusMaster, 0x00, sizeof(statusMaster) );
 801335a:	462a      	mov	r2, r5
 801335c:	2100      	movs	r1, #0
 801335e:	4620      	mov	r0, r4
 8013360:	f009 ff08 	bl	801d174 <memset>

  initParam();
 8013364:	f7ff ffec 	bl	8013340 <initParam>
  readbcLength = sizeof(statusMaster);
 8013368:	ab1e      	add	r3, sp, #120	; 0x78

  // Get full status
  ehifCmdExecWithReadbc(EHIF_EXEC_ALL, EHIF_CMD_NWM_GET_STATUS_M,
 801336a:	2200      	movs	r2, #0

  EHIF_CMD_NWM_GET_STATUS_MASTER_DATA_T statusMaster;
  memset(&statusMaster, 0x00, sizeof(statusMaster) );

  initParam();
  readbcLength = sizeof(statusMaster);
 801336c:	f823 5d6a 	strh.w	r5, [r3, #-106]!

  // Get full status
  ehifCmdExecWithReadbc(EHIF_EXEC_ALL, EHIF_CMD_NWM_GET_STATUS_M,
 8013370:	210a      	movs	r1, #10
 8013372:	e88d 0018 	stmia.w	sp, {r3, r4}
 8013376:	2006      	movs	r0, #6
 8013378:	4b05      	ldr	r3, [pc, #20]	; (8013390 <getStatus+0x40>)
 801337a:	f000 f939 	bl	80135f0 <ehifCmdExecWithReadbc>

  // if(readbcLength == MASTER_STATUS_SIZE){
  //   //No slaves
  // }

  return statusMaster;
 801337e:	462a      	mov	r2, r5
 8013380:	4621      	mov	r1, r4
 8013382:	4630      	mov	r0, r6
 8013384:	f009 fe5c 	bl	801d040 <memcpy>
}
 8013388:	4630      	mov	r0, r6
 801338a:	b01e      	add	sp, #120	; 0x78
 801338c:	bd70      	pop	{r4, r5, r6, pc}
 801338e:	bf00      	nop
 8013390:	10003393 	.word	0x10003393

08013394 <chipRadioEnable>:

    }
}

void chipRadioEnable(uint8_t state)
{
 8013394:	b510      	push	{r4, lr}
 8013396:	4604      	mov	r4, r0
  initParam();
 8013398:	f7ff ffd2 	bl	8013340 <initParam>
  ehifCmdParam.nwmControlEnable.wmEnable = state;
 801339c:	4a05      	ldr	r2, [pc, #20]	; (80133b4 <chipRadioEnable+0x20>)
 801339e:	7853      	ldrb	r3, [r2, #1]
 80133a0:	f364 0300 	bfi	r3, r4, #0, #1
 80133a4:	7053      	strb	r3, [r2, #1]
  ehifCmdExec(EHIF_CMD_NWM_CONTROL_ENABLE, sizeof(EHIF_CMD_NWM_CONTROL_ENABLE_PARAM_T), &ehifCmdParam);
 80133a6:	2102      	movs	r1, #2
 80133a8:	200c      	movs	r0, #12

}
 80133aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void chipRadioEnable(uint8_t state)
{
  initParam();
  ehifCmdParam.nwmControlEnable.wmEnable = state;
  ehifCmdExec(EHIF_CMD_NWM_CONTROL_ENABLE, sizeof(EHIF_CMD_NWM_CONTROL_ENABLE_PARAM_T), &ehifCmdParam);
 80133ae:	f000 b803 	b.w	80133b8 <ehifCmdExec>
 80133b2:	bf00      	nop
 80133b4:	10003393 	.word	0x10003393

080133b8 <ehifCmdExec>:
 */
void ehifCmdExec(uint8_t cmd, uint8_t cmdLength, const void* pCmdParam) {

    // Locate endianess conversion specification for CMD_REQ
    const int8_t* pFieldSpec = NULL;
    switch (cmd) {
 80133b8:	f1a0 0309 	sub.w	r3, r0, #9
 * \param[in]       cmdLength
 *     Command parameter length, in most cases sizeof(EHIF_CMD_XXXXX_PARAM_T)
 * \param[in]       *pCmdParam
 *     Pointer to the command parameter structure, EHIF_CMD_XXXXX_PARAM_T
 */
void ehifCmdExec(uint8_t cmd, uint8_t cmdLength, const void* pCmdParam) {
 80133bc:	b500      	push	{lr}

    // Locate endianess conversion specification for CMD_REQ
    const int8_t* pFieldSpec = NULL;
    switch (cmd) {
 80133be:	2b24      	cmp	r3, #36	; 0x24
 80133c0:	d83d      	bhi.n	801343e <ehifCmdExec+0x86>
 80133c2:	e8df f003 	tbb	[pc, r3]
 80133c6:	3c15      	.short	0x3c15
 80133c8:	1d1b1917 	.word	0x1d1b1917
 80133cc:	3c3c3c3c 	.word	0x3c3c3c3c
 80133d0:	3c2d2b29 	.word	0x3c2d2b29
 80133d4:	13373c23 	.word	0x13373c23
 80133d8:	3c3c213c 	.word	0x3c3c213c
 80133dc:	3c3c333c 	.word	0x3c3c333c
 80133e0:	3c2f3c35 	.word	0x3c2f3c35
 80133e4:	3c3c2531 	.word	0x3c3c2531
 80133e8:	273c      	.short	0x273c
 80133ea:	1f          	.byte	0x1f
 80133eb:	00          	.byte	0x00
    case EHIF_CMD_EHC_EVT_CLR:        { static const int8_t pF[] = { F8(1), 0 };                 pFieldSpec = pF; } break;
    case EHIF_CMD_EHC_EVT_MASK:       { static const int8_t pF[] = { F8(2), 0 };                 pFieldSpec = pF; } break;
 80133ec:	4b15      	ldr	r3, [pc, #84]	; (8013444 <ehifCmdExec+0x8c>)
 80133ee:	e022      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_NWM_DO_JOIN:        { static const int8_t pF[] = { F16(1), F32(4), 0 };        pFieldSpec = pF; } break;
 80133f0:	4b15      	ldr	r3, [pc, #84]	; (8013448 <ehifCmdExec+0x90>)
 80133f2:	e020      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_NWM_ACH_SET_USAGE:  { static const int8_t pF[] = { F8(16), 0 };                pFieldSpec = pF; } break;
 80133f4:	4b15      	ldr	r3, [pc, #84]	; (801344c <ehifCmdExec+0x94>)
 80133f6:	e01e      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_NWM_CONTROL_ENABLE: { static const int8_t pF[] = { F8(2), 0 };                 pFieldSpec = pF; } break;
 80133f8:	4b15      	ldr	r3, [pc, #84]	; (8013450 <ehifCmdExec+0x98>)
 80133fa:	e01c      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_NWM_CONTROL_SIGNAL: { static const int8_t pF[] = { F8(2), 0 };                 pFieldSpec = pF; } break;
 80133fc:	4b15      	ldr	r3, [pc, #84]	; (8013454 <ehifCmdExec+0x9c>)
 80133fe:	e01a      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_NWM_SET_RF_CH_MASK: { static const int8_t pF[] = { F32(1), 0 };                pFieldSpec = pF; } break;
 8013400:	4b15      	ldr	r3, [pc, #84]	; (8013458 <ehifCmdExec+0xa0>)
 8013402:	e018      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_RC_SET_DATA:        { static const int8_t pF[] = { F8(9), F16(2), 0 };         pFieldSpec = pF; } break;
 8013404:	4b15      	ldr	r3, [pc, #84]	; (801345c <ehifCmdExec+0xa4>)
 8013406:	e016      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_PM_SET_STATE:       { static const int8_t pF[] = { F8(1), 0 };                 pFieldSpec = pF; } break;
 8013408:	4b15      	ldr	r3, [pc, #84]	; (8013460 <ehifCmdExec+0xa8>)
 801340a:	e014      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_VC_SET_VOLUME:      { static const int8_t pF[] = { F32(1), 0 };                pFieldSpec = pF; } break;
 801340c:	4b15      	ldr	r3, [pc, #84]	; (8013464 <ehifCmdExec+0xac>)
 801340e:	e012      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_CAL_SET_DATA:       { static const int8_t pF[] = { F8(1), F32(1), 0 };         pFieldSpec = pF; } break;
 8013410:	4b15      	ldr	r3, [pc, #84]	; (8013468 <ehifCmdExec+0xb0>)
 8013412:	e010      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_NVS_SET_DATA:       { static const int8_t pF[] = { F8(1), F32(1), 0 };         pFieldSpec = pF; } break;
 8013414:	4b15      	ldr	r3, [pc, #84]	; (801346c <ehifCmdExec+0xb4>)
 8013416:	e00e      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_RFT_TXPER:          { static const int8_t pF[] = { F16(1), F32(1), F8(2), 0 }; pFieldSpec = pF; } break;
 8013418:	4b15      	ldr	r3, [pc, #84]	; (8013470 <ehifCmdExec+0xb8>)
 801341a:	e00c      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_RFT_TXTST_PN:       { static const int8_t pF[] = { F8(3), 0 };                 pFieldSpec = pF; } break;
 801341c:	4b15      	ldr	r3, [pc, #84]	; (8013474 <ehifCmdExec+0xbc>)
 801341e:	e00a      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_RFT_TXTST_CW:       { static const int8_t pF[] = { F8(3), 0 };                 pFieldSpec = pF; } break;
 8013420:	4b15      	ldr	r3, [pc, #84]	; (8013478 <ehifCmdExec+0xc0>)
 8013422:	e008      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_RFT_RXTST_CONT:     { static const int8_t pF[] = { F8(2), 0 };                 pFieldSpec = pF; } break;
 8013424:	4b15      	ldr	r3, [pc, #84]	; (801347c <ehifCmdExec+0xc4>)
 8013426:	e006      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_RFT_NWKSIM:         { static const int8_t pF[] = { F16(4), F8(6), 0 };         pFieldSpec = pF; } break;
 8013428:	4b15      	ldr	r3, [pc, #84]	; (8013480 <ehifCmdExec+0xc8>)
 801342a:	e004      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_AT_GEN_TONE:        { static const int8_t pF[] = { F8(3), F16(1), 0 };         pFieldSpec = pF; } break;
 801342c:	4b15      	ldr	r3, [pc, #84]	; (8013484 <ehifCmdExec+0xcc>)
 801342e:	e002      	b.n	8013436 <ehifCmdExec+0x7e>
    case EHIF_CMD_IOTST_OUTPUT:       { static const int8_t pF[] = { F32(2), 0 };                pFieldSpec = pF; } break;
 8013430:	4b15      	ldr	r3, [pc, #84]	; (8013488 <ehifCmdExec+0xd0>)
 8013432:	e000      	b.n	8013436 <ehifCmdExec+0x7e>
void ehifCmdExec(uint8_t cmd, uint8_t cmdLength, const void* pCmdParam) {

    // Locate endianess conversion specification for CMD_REQ
    const int8_t* pFieldSpec = NULL;
    switch (cmd) {
    case EHIF_CMD_EHC_EVT_CLR:        { static const int8_t pF[] = { F8(1), 0 };                 pFieldSpec = pF; } break;
 8013434:	4b15      	ldr	r3, [pc, #84]	; (801348c <ehifCmdExec+0xd4>)
    }

    // Send CMD_REQ
    ehifFieldCmdReq(cmd, cmdLength, (const uint8_t*) pCmdParam, pFieldSpec);

} // ehifCmdExec
 8013436:	f85d eb04 	ldr.w	lr, [sp], #4
    case EHIF_CMD_IOTST_OUTPUT:       { static const int8_t pF[] = { F32(2), 0 };                pFieldSpec = pF; } break;
    default: return;
    }

    // Send CMD_REQ
    ehifFieldCmdReq(cmd, cmdLength, (const uint8_t*) pCmdParam, pFieldSpec);
 801343a:	f000 bc36 	b.w	8013caa <ehifFieldCmdReq>
 801343e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013442:	bf00      	nop
 8013444:	0803e9cd 	.word	0x0803e9cd
 8013448:	0803e9cf 	.word	0x0803e9cf
 801344c:	0803e9d2 	.word	0x0803e9d2
 8013450:	0803e9d4 	.word	0x0803e9d4
 8013454:	0803e9d6 	.word	0x0803e9d6
 8013458:	0803e9d8 	.word	0x0803e9d8
 801345c:	0803e9da 	.word	0x0803e9da
 8013460:	0803e9dd 	.word	0x0803e9dd
 8013464:	0803e9df 	.word	0x0803e9df
 8013468:	0803e9e1 	.word	0x0803e9e1
 801346c:	0803e9e4 	.word	0x0803e9e4
 8013470:	0803e9e7 	.word	0x0803e9e7
 8013474:	0803e9eb 	.word	0x0803e9eb
 8013478:	0803e9ed 	.word	0x0803e9ed
 801347c:	0803e9ef 	.word	0x0803e9ef
 8013480:	0803e9f1 	.word	0x0803e9f1
 8013484:	0803e9f4 	.word	0x0803e9f4
 8013488:	0803e9f7 	.word	0x0803e9f7
 801348c:	0803e9cb 	.word	0x0803e9cb

08013490 <ehifCmdExecWithRead>:
 * \param[in]       dataLength
 *     Read data length, in most cases sizeof(EHIF_CMD_XXXXX_DATA_T)
 * \param[out]      *pReadData
 *     Pointer to the read data structure, EHIF_CMD_XXXXX_DATA_T
 */
void ehifCmdExecWithRead(uint8_t execSel, uint8_t cmd, uint8_t cmdLength, const void* pCmdParam, uint16_t dataLength, void* pReadData) {
 8013490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013492:	4605      	mov	r5, r0

    // Execute command phase?
    if (execSel & EHIF_EXEC_CMD) {
 8013494:	07a8      	lsls	r0, r5, #30
 * \param[in]       dataLength
 *     Read data length, in most cases sizeof(EHIF_CMD_XXXXX_DATA_T)
 * \param[out]      *pReadData
 *     Pointer to the read data structure, EHIF_CMD_XXXXX_DATA_T
 */
void ehifCmdExecWithRead(uint8_t execSel, uint8_t cmd, uint8_t cmdLength, const void* pCmdParam, uint16_t dataLength, void* pReadData) {
 8013496:	460c      	mov	r4, r1
 8013498:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 801349c:	9f07      	ldr	r7, [sp, #28]
 801349e:	4611      	mov	r1, r2
 80134a0:	461a      	mov	r2, r3

    // Execute command phase?
    if (execSel & EHIF_EXEC_CMD) {
 80134a2:	d533      	bpl.n	801350c <ehifCmdExecWithRead+0x7c>
        const int8_t* pFieldSpec;

        // Locate endianess conversion specification for CMD_REQ
        switch (cmd) {
 80134a4:	f1a4 0310 	sub.w	r3, r4, #16
 80134a8:	2b1e      	cmp	r3, #30
 80134aa:	d867      	bhi.n	801357c <ehifCmdExecWithRead+0xec>
 80134ac:	e8df f003 	tbb	[pc, r3]
 80134b0:	66221614 	.word	0x66221614
 80134b4:	66126666 	.word	0x66126666
 80134b8:	66666666 	.word	0x66666666
 80134bc:	102a1a66 	.word	0x102a1a66
 80134c0:	66282666 	.word	0x66282666
 80134c4:	66246666 	.word	0x66246666
 80134c8:	201e1c66 	.word	0x201e1c66
 80134cc:	6666      	.short	0x6666
 80134ce:	18          	.byte	0x18
 80134cf:	00          	.byte	0x00
        case EHIF_CMD_DI_GET_DEVICE_INFO: { static const int8_t pF[] = { 0 };                        pFieldSpec = pF; } break;
        case EHIF_CMD_DI_GET_CHIP_INFO:   { static const int8_t pF[] = { F16(1), 0 };                pFieldSpec = pF; } break;
 80134d0:	4b2b      	ldr	r3, [pc, #172]	; (8013580 <ehifCmdExecWithRead+0xf0>)
 80134d2:	e018      	b.n	8013506 <ehifCmdExecWithRead+0x76>
        case EHIF_CMD_VC_GET_VOLUME:      { static const int8_t pF[] = { F8(1), 0 };                 pFieldSpec = pF; } break;
 80134d4:	4b2b      	ldr	r3, [pc, #172]	; (8013584 <ehifCmdExecWithRead+0xf4>)
 80134d6:	e016      	b.n	8013506 <ehifCmdExecWithRead+0x76>
        case EHIF_CMD_PS_RF_STATS:        { static const int8_t pF[] = { 0 };                        pFieldSpec = pF; } break;
 80134d8:	4b2b      	ldr	r3, [pc, #172]	; (8013588 <ehifCmdExecWithRead+0xf8>)
 80134da:	e014      	b.n	8013506 <ehifCmdExecWithRead+0x76>
        case EHIF_CMD_PS_AUDIO_STATS:     { static const int8_t pF[] = { 0 };                        pFieldSpec = pF; } break;
 80134dc:	4b2b      	ldr	r3, [pc, #172]	; (801358c <ehifCmdExecWithRead+0xfc>)
 80134de:	e012      	b.n	8013506 <ehifCmdExecWithRead+0x76>
        case EHIF_CMD_RC_GET_DATA:        { static const int8_t pF[] = { F8(1), 0 };                 pFieldSpec = pF; } break;
 80134e0:	4b2b      	ldr	r3, [pc, #172]	; (8013590 <ehifCmdExecWithRead+0x100>)
 80134e2:	e010      	b.n	8013506 <ehifCmdExecWithRead+0x76>
        case EHIF_CMD_PM_GET_DATA:        { static const int8_t pF[] = { 0 };                        pFieldSpec = pF; } break;
 80134e4:	4b2b      	ldr	r3, [pc, #172]	; (8013594 <ehifCmdExecWithRead+0x104>)
 80134e6:	e00e      	b.n	8013506 <ehifCmdExecWithRead+0x76>
        case EHIF_CMD_CAL_GET_DATA:       { static const int8_t pF[] = { 0 };                        pFieldSpec = pF; } break;
 80134e8:	4b2b      	ldr	r3, [pc, #172]	; (8013598 <ehifCmdExecWithRead+0x108>)
 80134ea:	e00c      	b.n	8013506 <ehifCmdExecWithRead+0x76>
        case EHIF_CMD_IO_GET_PIN_VAL:     { static const int8_t pF[] = { 0 };                        pFieldSpec = pF; } break;
 80134ec:	4b2b      	ldr	r3, [pc, #172]	; (801359c <ehifCmdExecWithRead+0x10c>)
 80134ee:	e00a      	b.n	8013506 <ehifCmdExecWithRead+0x76>
        case EHIF_CMD_NVS_GET_DATA:       { static const int8_t pF[] = { F8(1), 0 };                 pFieldSpec = pF; } break;
 80134f0:	4b2b      	ldr	r3, [pc, #172]	; (80135a0 <ehifCmdExecWithRead+0x110>)
 80134f2:	e008      	b.n	8013506 <ehifCmdExecWithRead+0x76>
        case EHIF_CMD_RFT_RXPER:          { static const int8_t pF[] = { F16(1), F32(2), F8(1), 0 }; pFieldSpec = pF; } break;
 80134f4:	4b2b      	ldr	r3, [pc, #172]	; (80135a4 <ehifCmdExecWithRead+0x114>)
 80134f6:	e006      	b.n	8013506 <ehifCmdExecWithRead+0x76>
        case EHIF_CMD_RFT_RXTST_RSSI:     { static const int8_t pF[] = { F8(1), 0 };                 pFieldSpec = pF; } break;
 80134f8:	4b2b      	ldr	r3, [pc, #172]	; (80135a8 <ehifCmdExecWithRead+0x118>)
 80134fa:	e004      	b.n	8013506 <ehifCmdExecWithRead+0x76>
        case EHIF_CMD_AT_DET_TONE:        { static const int8_t pF[] = { F8(1), 0 };                 pFieldSpec = pF; } break;
 80134fc:	4b2b      	ldr	r3, [pc, #172]	; (80135ac <ehifCmdExecWithRead+0x11c>)
 80134fe:	e002      	b.n	8013506 <ehifCmdExecWithRead+0x76>
        case EHIF_CMD_IOTST_INPUT:        { static const int8_t pF[] = { F32(1), 0 };                pFieldSpec = pF; } break;
 8013500:	4b2b      	ldr	r3, [pc, #172]	; (80135b0 <ehifCmdExecWithRead+0x120>)
 8013502:	e000      	b.n	8013506 <ehifCmdExecWithRead+0x76>
    if (execSel & EHIF_EXEC_CMD) {
        const int8_t* pFieldSpec;

        // Locate endianess conversion specification for CMD_REQ
        switch (cmd) {
        case EHIF_CMD_DI_GET_DEVICE_INFO: { static const int8_t pF[] = { 0 };                        pFieldSpec = pF; } break;
 8013504:	4b2b      	ldr	r3, [pc, #172]	; (80135b4 <ehifCmdExecWithRead+0x124>)
        case EHIF_CMD_IOTST_INPUT:        { static const int8_t pF[] = { F32(1), 0 };                pFieldSpec = pF; } break;
        default: return;
        }

        // Send CMD_REQ
        ehifFieldCmdReq(cmd, cmdLength, (const uint8_t*) pCmdParam, pFieldSpec);
 8013506:	4620      	mov	r0, r4
 8013508:	f000 fbcf 	bl	8013caa <ehifFieldCmdReq>
    }

    // Execute data phase?
    if (execSel & EHIF_EXEC_DATA) {
 801350c:	076b      	lsls	r3, r5, #29
 801350e:	d535      	bpl.n	801357c <ehifCmdExecWithRead+0xec>
        const int8_t* pFieldSpec;

        // Locate endianess conversion specification for READ
        switch (cmd) {
 8013510:	3c10      	subs	r4, #16
 8013512:	2c1e      	cmp	r4, #30
 8013514:	d832      	bhi.n	801357c <ehifCmdExecWithRead+0xec>
 8013516:	e8df f004 	tbb	[pc, r4]
 801351a:	1614      	.short	0x1614
 801351c:	31313122 	.word	0x31313122
 8013520:	31313112 	.word	0x31313112
 8013524:	1a313131 	.word	0x1a313131
 8013528:	2631102a 	.word	0x2631102a
 801352c:	31313128 	.word	0x31313128
 8013530:	1c313124 	.word	0x1c313124
 8013534:	3131201e 	.word	0x3131201e
 8013538:	18          	.byte	0x18
 8013539:	00          	.byte	0x00
        case EHIF_CMD_DI_GET_DEVICE_INFO: { static const int8_t pF[] = { F32(3), 0 };                         pFieldSpec = pF; } break;
        case EHIF_CMD_DI_GET_CHIP_INFO:   { static const int8_t pF[] = { F16(2), F32(4), F16(2), 0 };         pFieldSpec = pF; } break;
 801353a:	4a1f      	ldr	r2, [pc, #124]	; (80135b8 <ehifCmdExecWithRead+0x128>)
 801353c:	e018      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
        case EHIF_CMD_VC_GET_VOLUME:      { static const int8_t pF[] = { F16(1), 0 };                         pFieldSpec = pF; } break;
 801353e:	4a1f      	ldr	r2, [pc, #124]	; (80135bc <ehifCmdExecWithRead+0x12c>)
 8013540:	e016      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
        case EHIF_CMD_PS_RF_STATS:        { static const int8_t pF[] = { F32(5), F8(2), F16(21), 0 };         pFieldSpec = pF; } break;
 8013542:	4a1f      	ldr	r2, [pc, #124]	; (80135c0 <ehifCmdExecWithRead+0x130>)
 8013544:	e014      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
        case EHIF_CMD_PS_AUDIO_STATS:     { static const int8_t pF[] = { F32(3), F16(1), F8(2), F16(2), -1 }; pFieldSpec = pF; } break;
 8013546:	4a1f      	ldr	r2, [pc, #124]	; (80135c4 <ehifCmdExecWithRead+0x134>)
 8013548:	e012      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
        case EHIF_CMD_RC_GET_DATA:        { static const int8_t pF[] = { F8(9), F16(2), 0 };                  pFieldSpec = pF; } break;
 801354a:	4a1f      	ldr	r2, [pc, #124]	; (80135c8 <ehifCmdExecWithRead+0x138>)
 801354c:	e010      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
        case EHIF_CMD_PM_GET_DATA:        { static const int8_t pF[] = { F32(3), F16(1), 0 };                 pFieldSpec = pF; } break;
 801354e:	4a1f      	ldr	r2, [pc, #124]	; (80135cc <ehifCmdExecWithRead+0x13c>)
 8013550:	e00e      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
        case EHIF_CMD_CAL_GET_DATA:       { static const int8_t pF[] = { F32(1), 0 };                         pFieldSpec = pF; } break;
 8013552:	4a1f      	ldr	r2, [pc, #124]	; (80135d0 <ehifCmdExecWithRead+0x140>)
 8013554:	e00c      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
        case EHIF_CMD_IO_GET_PIN_VAL:     { static const int8_t pF[] = { F32(1), 0 };                         pFieldSpec = pF; } break;
 8013556:	4a1f      	ldr	r2, [pc, #124]	; (80135d4 <ehifCmdExecWithRead+0x144>)
 8013558:	e00a      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
        case EHIF_CMD_NVS_GET_DATA:       { static const int8_t pF[] = { F32(1), 0 };                         pFieldSpec = pF; } break;
 801355a:	4a1f      	ldr	r2, [pc, #124]	; (80135d8 <ehifCmdExecWithRead+0x148>)
 801355c:	e008      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
        case EHIF_CMD_RFT_RXPER:          { static const int8_t pF[] = { F32(6), F16(3), F32(1), F8(1), -3 }; pFieldSpec = pF; } break;
 801355e:	4a1f      	ldr	r2, [pc, #124]	; (80135dc <ehifCmdExecWithRead+0x14c>)
 8013560:	e006      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
        case EHIF_CMD_RFT_RXTST_RSSI:     { static const int8_t pF[] = { F8(1), 0 };                          pFieldSpec = pF; } break;
 8013562:	4a1f      	ldr	r2, [pc, #124]	; (80135e0 <ehifCmdExecWithRead+0x150>)
 8013564:	e004      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
        case EHIF_CMD_AT_DET_TONE:        { static const int8_t pF[] = { F16(2), 0 };                         pFieldSpec = pF; } break;
 8013566:	4a1f      	ldr	r2, [pc, #124]	; (80135e4 <ehifCmdExecWithRead+0x154>)
 8013568:	e002      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
        case EHIF_CMD_IOTST_INPUT:        { static const int8_t pF[] = { F32(1), 0 };                         pFieldSpec = pF; } break;
 801356a:	4a1f      	ldr	r2, [pc, #124]	; (80135e8 <ehifCmdExecWithRead+0x158>)
 801356c:	e000      	b.n	8013570 <ehifCmdExecWithRead+0xe0>
    if (execSel & EHIF_EXEC_DATA) {
        const int8_t* pFieldSpec;

        // Locate endianess conversion specification for READ
        switch (cmd) {
        case EHIF_CMD_DI_GET_DEVICE_INFO: { static const int8_t pF[] = { F32(3), 0 };                         pFieldSpec = pF; } break;
 801356e:	4a1f      	ldr	r2, [pc, #124]	; (80135ec <ehifCmdExecWithRead+0x15c>)
        case EHIF_CMD_IOTST_INPUT:        { static const int8_t pF[] = { F32(1), 0 };                         pFieldSpec = pF; } break;
        default: return;
        }

        // Send READ
        ehifFieldRead(dataLength, (uint8_t*) pReadData, pFieldSpec);
 8013570:	4639      	mov	r1, r7
 8013572:	4630      	mov	r0, r6
    }

} // ehifCmdExecWithRead
 8013574:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        case EHIF_CMD_IOTST_INPUT:        { static const int8_t pF[] = { F32(1), 0 };                         pFieldSpec = pF; } break;
        default: return;
        }

        // Send READ
        ehifFieldRead(dataLength, (uint8_t*) pReadData, pFieldSpec);
 8013578:	f000 bb36 	b.w	8013be8 <ehifFieldRead>
 801357c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801357e:	bf00      	nop
 8013580:	0803e9fa 	.word	0x0803e9fa
 8013584:	0803e9fc 	.word	0x0803e9fc
 8013588:	0803e9fe 	.word	0x0803e9fe
 801358c:	0803e9ff 	.word	0x0803e9ff
 8013590:	0803ea00 	.word	0x0803ea00
 8013594:	0803ea02 	.word	0x0803ea02
 8013598:	0803ea03 	.word	0x0803ea03
 801359c:	0803ea04 	.word	0x0803ea04
 80135a0:	0803ea05 	.word	0x0803ea05
 80135a4:	0803ea07 	.word	0x0803ea07
 80135a8:	0803ea0b 	.word	0x0803ea0b
 80135ac:	0803ea0d 	.word	0x0803ea0d
 80135b0:	0803ea0f 	.word	0x0803ea0f
 80135b4:	0803e9f9 	.word	0x0803e9f9
 80135b8:	0803ea13 	.word	0x0803ea13
 80135bc:	0803ea17 	.word	0x0803ea17
 80135c0:	0803ea19 	.word	0x0803ea19
 80135c4:	0803ea1d 	.word	0x0803ea1d
 80135c8:	0803ea22 	.word	0x0803ea22
 80135cc:	0803ea25 	.word	0x0803ea25
 80135d0:	0803ea28 	.word	0x0803ea28
 80135d4:	0803ea2a 	.word	0x0803ea2a
 80135d8:	0803ea2c 	.word	0x0803ea2c
 80135dc:	0803ea2e 	.word	0x0803ea2e
 80135e0:	0803ea33 	.word	0x0803ea33
 80135e4:	0803ea35 	.word	0x0803ea35
 80135e8:	0803ea37 	.word	0x0803ea37
 80135ec:	0803ea11 	.word	0x0803ea11

080135f0 <ehifCmdExecWithReadbc>:
 *     Upon function entry \a *pDataVarLength should indicate the size of \a pReadData[]. Upon function
 *     exit the value is changed to indicate the actual number of bytes read (0 to 4095)
 * \param[out]      *pReadbcData
 *     Pointer to the read data structure, EHIF_CMD_XXXXX_DATA_T
 */
void ehifCmdExecWithReadbc(uint8_t execSel, uint8_t cmd, uint8_t cmdLength, const void* pCmdParam, uint16_t* pDataVarLength, void* pReadbcData) {
 80135f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135f2:	4605      	mov	r5, r0

    // Execute command phase?
    if (execSel & EHIF_EXEC_CMD) {
 80135f4:	07a8      	lsls	r0, r5, #30
 *     Upon function entry \a *pDataVarLength should indicate the size of \a pReadData[]. Upon function
 *     exit the value is changed to indicate the actual number of bytes read (0 to 4095)
 * \param[out]      *pReadbcData
 *     Pointer to the read data structure, EHIF_CMD_XXXXX_DATA_T
 */
void ehifCmdExecWithReadbc(uint8_t execSel, uint8_t cmd, uint8_t cmdLength, const void* pCmdParam, uint16_t* pDataVarLength, void* pReadbcData) {
 80135f6:	460c      	mov	r4, r1
 80135f8:	9e06      	ldr	r6, [sp, #24]
 80135fa:	9f07      	ldr	r7, [sp, #28]
 80135fc:	4611      	mov	r1, r2
 80135fe:	461a      	mov	r2, r3

    // Execute command phase?
    if (execSel & EHIF_EXEC_CMD) {
 8013600:	d515      	bpl.n	801362e <ehifCmdExecWithReadbc+0x3e>
        const int8_t* pFieldSpec;

        // Locate endianess conversion specification for CMD_REQ
        switch (cmd) {
 8013602:	2c08      	cmp	r4, #8
 8013604:	d00e      	beq.n	8013624 <ehifCmdExecWithReadbc+0x34>
 8013606:	d802      	bhi.n	801360e <ehifCmdExecWithReadbc+0x1e>
 8013608:	2c05      	cmp	r4, #5
 801360a:	d009      	beq.n	8013620 <ehifCmdExecWithReadbc+0x30>
 801360c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801360e:	2c0a      	cmp	r4, #10
 8013610:	d002      	beq.n	8013618 <ehifCmdExecWithReadbc+0x28>
 8013612:	2c8a      	cmp	r4, #138	; 0x8a
 8013614:	d002      	beq.n	801361c <ehifCmdExecWithReadbc+0x2c>
 8013616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case EHIF_CMD_NWM_DO_SCAN:        { static const int8_t pF[] = { F16(1), F32(3), F8(2), 0 }; pFieldSpec = pF; } break;
        case EHIF_CMD_NWM_GET_STATUS_M:   { static const int8_t pF[] = { 0 };                        pFieldSpec = pF; } break;
 8013618:	4b12      	ldr	r3, [pc, #72]	; (8013664 <ehifCmdExecWithReadbc+0x74>)
 801361a:	e004      	b.n	8013626 <ehifCmdExecWithReadbc+0x36>
        case EHIF_CMD_NWM_GET_STATUS_S:   { static const int8_t pF[] = { 0 };                        pFieldSpec = pF; } break;
 801361c:	4b12      	ldr	r3, [pc, #72]	; (8013668 <ehifCmdExecWithReadbc+0x78>)
 801361e:	e002      	b.n	8013626 <ehifCmdExecWithReadbc+0x36>
        case EHIF_CMD_DSC_RX_DATAGRAM:    { static const int8_t pF[] = { 0 };                        pFieldSpec = pF; } break;
 8013620:	4b12      	ldr	r3, [pc, #72]	; (801366c <ehifCmdExecWithReadbc+0x7c>)
 8013622:	e000      	b.n	8013626 <ehifCmdExecWithReadbc+0x36>
    if (execSel & EHIF_EXEC_CMD) {
        const int8_t* pFieldSpec;

        // Locate endianess conversion specification for CMD_REQ
        switch (cmd) {
        case EHIF_CMD_NWM_DO_SCAN:        { static const int8_t pF[] = { F16(1), F32(3), F8(2), 0 }; pFieldSpec = pF; } break;
 8013624:	4b12      	ldr	r3, [pc, #72]	; (8013670 <ehifCmdExecWithReadbc+0x80>)
        case EHIF_CMD_DSC_RX_DATAGRAM:    { static const int8_t pF[] = { 0 };                        pFieldSpec = pF; } break;
        default: return;
        }

        // Send CMD_REQ
        ehifFieldCmdReq(cmd & 0x3F, cmdLength, (const uint8_t*) pCmdParam, pFieldSpec);
 8013626:	f004 003f 	and.w	r0, r4, #63	; 0x3f
 801362a:	f000 fb3e 	bl	8013caa <ehifFieldCmdReq>
    }

    // Execute data phase?
    if (execSel & EHIF_EXEC_DATA) {
 801362e:	076b      	lsls	r3, r5, #29
 8013630:	d517      	bpl.n	8013662 <ehifCmdExecWithReadbc+0x72>
        const int8_t* pFieldSpec;

        // Locate endianess conversion specification for READBC
        switch (cmd) {
 8013632:	2c08      	cmp	r4, #8
 8013634:	d00e      	beq.n	8013654 <ehifCmdExecWithReadbc+0x64>
 8013636:	d802      	bhi.n	801363e <ehifCmdExecWithReadbc+0x4e>
 8013638:	2c05      	cmp	r4, #5
 801363a:	d009      	beq.n	8013650 <ehifCmdExecWithReadbc+0x60>
 801363c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801363e:	2c0a      	cmp	r4, #10
 8013640:	d002      	beq.n	8013648 <ehifCmdExecWithReadbc+0x58>
 8013642:	2c8a      	cmp	r4, #138	; 0x8a
 8013644:	d002      	beq.n	801364c <ehifCmdExecWithReadbc+0x5c>
 8013646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case EHIF_CMD_NWM_DO_SCAN:        { static const int8_t pF[] = { F32(3), F8(1), F16(1), F8(9), F16(2), -5 }; pFieldSpec = pF; } break;
        case EHIF_CMD_NWM_GET_STATUS_M:   { static const int8_t pF[] = { F8(1), F16(2), F32(3), F16(1), F8(2), -3 }; pFieldSpec = pF; } break;
 8013648:	4a0a      	ldr	r2, [pc, #40]	; (8013674 <ehifCmdExecWithReadbc+0x84>)
 801364a:	e004      	b.n	8013656 <ehifCmdExecWithReadbc+0x66>
        case EHIF_CMD_NWM_GET_STATUS_S:   { static const int8_t pF[] = { F32(3), F8(1), F16(1), F8(9), F16(3), -5 }; pFieldSpec = pF; } break;
 801364c:	4a0a      	ldr	r2, [pc, #40]	; (8013678 <ehifCmdExecWithReadbc+0x88>)
 801364e:	e002      	b.n	8013656 <ehifCmdExecWithReadbc+0x66>
        case EHIF_CMD_DSC_RX_DATAGRAM:    { static const int8_t pF[] = { F8(1), F32(1), F8(1), -1 };                 pFieldSpec = pF; } break;
 8013650:	4a0a      	ldr	r2, [pc, #40]	; (801367c <ehifCmdExecWithReadbc+0x8c>)
 8013652:	e000      	b.n	8013656 <ehifCmdExecWithReadbc+0x66>
    if (execSel & EHIF_EXEC_DATA) {
        const int8_t* pFieldSpec;

        // Locate endianess conversion specification for READBC
        switch (cmd) {
        case EHIF_CMD_NWM_DO_SCAN:        { static const int8_t pF[] = { F32(3), F8(1), F16(1), F8(9), F16(2), -5 }; pFieldSpec = pF; } break;
 8013654:	4a0a      	ldr	r2, [pc, #40]	; (8013680 <ehifCmdExecWithReadbc+0x90>)
        case EHIF_CMD_DSC_RX_DATAGRAM:    { static const int8_t pF[] = { F8(1), F32(1), F8(1), -1 };                 pFieldSpec = pF; } break;
        default: return;
        }

        // Send READBC
        ehifFieldReadbc(pDataVarLength, (uint8_t*) pReadbcData, pFieldSpec);
 8013656:	4639      	mov	r1, r7
 8013658:	4630      	mov	r0, r6
    }

} // ehifCmdExecWithReadbc
 801365a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        case EHIF_CMD_DSC_RX_DATAGRAM:    { static const int8_t pF[] = { F8(1), F32(1), F8(1), -1 };                 pFieldSpec = pF; } break;
        default: return;
        }

        // Send READBC
        ehifFieldReadbc(pDataVarLength, (uint8_t*) pReadbcData, pFieldSpec);
 801365e:	f000 bae9 	b.w	8013c34 <ehifFieldReadbc>
 8013662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013664:	0803ea3d 	.word	0x0803ea3d
 8013668:	0803ea3e 	.word	0x0803ea3e
 801366c:	0803ea3f 	.word	0x0803ea3f
 8013670:	0803ea39 	.word	0x0803ea39
 8013674:	0803ea46 	.word	0x0803ea46
 8013678:	0803ea4c 	.word	0x0803ea4c
 801367c:	0803ea52 	.word	0x0803ea52
 8013680:	0803ea40 	.word	0x0803ea40

08013684 <ehifCmdExecWithWrite>:
 * \param[in]       dataLength
 *     Write data length, in most cases sizeof(EHIF_CMD_XXXXX_DATA_T)
 * \param[in]       *pWriteData
 *     Pointer to the write data structure, EHIF_CMD_XXXXX_DATA_T
 */
void ehifCmdExecWithWrite(uint8_t execSel, uint8_t cmd, uint8_t cmdLength, const void* pCmdParam, uint16_t dataLength, const void* pWriteData) {
 8013684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013686:	4605      	mov	r5, r0

    // Execute command phase?
    if (execSel & EHIF_EXEC_CMD) {
 8013688:	07a8      	lsls	r0, r5, #30
 * \param[in]       dataLength
 *     Write data length, in most cases sizeof(EHIF_CMD_XXXXX_DATA_T)
 * \param[in]       *pWriteData
 *     Pointer to the write data structure, EHIF_CMD_XXXXX_DATA_T
 */
void ehifCmdExecWithWrite(uint8_t execSel, uint8_t cmd, uint8_t cmdLength, const void* pCmdParam, uint16_t dataLength, const void* pWriteData) {
 801368a:	460c      	mov	r4, r1
 801368c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8013690:	9f07      	ldr	r7, [sp, #28]
 8013692:	4611      	mov	r1, r2
 8013694:	461a      	mov	r2, r3

    // Execute command phase?
    if (execSel & EHIF_EXEC_CMD) {
 8013696:	d505      	bpl.n	80136a4 <ehifCmdExecWithWrite+0x20>
        const int8_t* pFieldSpec;

        // Locate endianess conversion specification for CMD_REQ
        switch (cmd) {
 8013698:	2c04      	cmp	r4, #4
 801369a:	d10e      	bne.n	80136ba <ehifCmdExecWithWrite+0x36>
        case EHIF_CMD_DSC_TX_DATAGRAM:    { static const int8_t pF[] = { F8(1), F32(1), 0 }; pFieldSpec = pF; } break;
        default: return;
        }

        // Send CMD_REQ
        ehifFieldCmdReq(cmd, cmdLength, (const uint8_t*) pCmdParam, pFieldSpec);
 801369c:	4b07      	ldr	r3, [pc, #28]	; (80136bc <ehifCmdExecWithWrite+0x38>)
 801369e:	4620      	mov	r0, r4
 80136a0:	f000 fb03 	bl	8013caa <ehifFieldCmdReq>
    }

    // Execute data phase?
    if (execSel & EHIF_EXEC_DATA) {
 80136a4:	076b      	lsls	r3, r5, #29
 80136a6:	d508      	bpl.n	80136ba <ehifCmdExecWithWrite+0x36>
        const int8_t* pFieldSpec;

        // Locate endianess conversion specification for WRITE
        switch (cmd) {
 80136a8:	2c04      	cmp	r4, #4
 80136aa:	d106      	bne.n	80136ba <ehifCmdExecWithWrite+0x36>
        case EHIF_CMD_DSC_TX_DATAGRAM:    { static const int8_t pF[] = { F8(1), -1 }; pFieldSpec = pF; } break;
        default: return;
        }

        // Send WRITE
        ehifFieldWrite(dataLength, (const uint8_t*) pWriteData, pFieldSpec);
 80136ac:	4639      	mov	r1, r7
 80136ae:	4630      	mov	r0, r6
 80136b0:	4a03      	ldr	r2, [pc, #12]	; (80136c0 <ehifCmdExecWithWrite+0x3c>)
    }

} // ehifCmdExecWithWrite
 80136b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        case EHIF_CMD_DSC_TX_DATAGRAM:    { static const int8_t pF[] = { F8(1), -1 }; pFieldSpec = pF; } break;
        default: return;
        }

        // Send WRITE
        ehifFieldWrite(dataLength, (const uint8_t*) pWriteData, pFieldSpec);
 80136b6:	f000 ba6f 	b.w	8013b98 <ehifFieldWrite>
 80136ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136bc:	0803ea56 	.word	0x0803ea56
 80136c0:	0803ea59 	.word	0x0803ea59

080136c4 <ehifBlUnlockSpi>:
 *     - \ref EHIF_BL_SPI_LOADER_READY - Bootloader unlocking succeeded
 *     - \ref EHIF_BL_SPI_LOADER_LOCKED - Bootloader unlocking failed. Make sure that
 *     - Other: EHIF operation failed (CC85XX is not in bootloader mode, incorrect MCU clock speed,
 *       CC85XX crystal problems etc.)
 */
uint16_t ehifBlUnlockSpi(void) {
 80136c4:	b508      	push	{r3, lr}
    static const uint8_t pParams[4] = {
        0x25, 0x05, 0xB0, 0x07 // KEY
    };

    // Send BL_UNLOCK_SPI
    ehifCmdReq(0x00, sizeof(pParams), pParams);
 80136c6:	4a06      	ldr	r2, [pc, #24]	; (80136e0 <ehifBlUnlockSpi+0x1c>)
 80136c8:	2104      	movs	r1, #4
 80136ca:	2000      	movs	r0, #0
 80136cc:	f000 f8f8 	bl	80138c0 <ehifCmdReq>

    // Wait for completion and return status
    ehifWaitReadyMs(1);
 80136d0:	2001      	movs	r0, #1
 80136d2:	f000 f93d 	bl	8013950 <ehifWaitReadyMs>
    return ehifGetStatus();

} // ehifBlUnlockSpi
 80136d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // Send BL_UNLOCK_SPI
    ehifCmdReq(0x00, sizeof(pParams), pParams);

    // Wait for completion and return status
    ehifWaitReadyMs(1);
    return ehifGetStatus();
 80136da:	f000 b860 	b.w	801379e <ehifGetStatus>
 80136de:	bf00      	nop
 80136e0:	0803ea5b 	.word	0x0803ea5b

080136e4 <ehifBlFlashMassErase>:
 *     - \ref EHIF_BL_ERASE_DONE - Flash mass erase succeeded
 *     - \ref EHIF_BL_ERASE_FAILED - Flash mass erase failed (electrical error)
 *     - Other: EHIF operation failed (CC85XX is not in bootloader mode, incorrect MCU clock speed,
 *       CC85XX crystal problems etc.)
 */
uint16_t ehifBlFlashMassErase(void) {
 80136e4:	b508      	push	{r3, lr}
    static const uint8_t pParams[4] = {
        0x25, 0x05, 0x13, 0x37 // KEY
    };

    // Send BL_FLASH_MASS_ERASE
    ehifCmdReq(0x03, sizeof(pParams), pParams);
 80136e6:	4a06      	ldr	r2, [pc, #24]	; (8013700 <ehifBlFlashMassErase+0x1c>)
 80136e8:	2104      	movs	r1, #4
 80136ea:	2003      	movs	r0, #3
 80136ec:	f000 f8e8 	bl	80138c0 <ehifCmdReq>

    // Wait for completion and return status
    ehifWaitReadyMs(25);
 80136f0:	2019      	movs	r0, #25
 80136f2:	f000 f92d 	bl	8013950 <ehifWaitReadyMs>
    return ehifGetStatus();

} // ehifBlFlashMassErase
 80136f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // Send BL_FLASH_MASS_ERASE
    ehifCmdReq(0x03, sizeof(pParams), pParams);

    // Wait for completion and return status
    ehifWaitReadyMs(25);
    return ehifGetStatus();
 80136fa:	f000 b850 	b.w	801379e <ehifGetStatus>
 80136fe:	bf00      	nop
 8013700:	0803ea5f 	.word	0x0803ea5f

08013704 <ehifBlFlashPageProg>:
 *     - \ref EHIF_BL_PROG_DONE - Flash page programming succeeded
 *     - \ref EHIF_BL_PROG_FAILED - Flash page programming failed (electrical error)
 *     - Other: EHIF operation failed (CC85XX is not in bootloader mode, incorrect MCU clock speed,
 *       CC85XX crystal problems etc.)
 */
uint16_t ehifBlFlashPageProg(uint16_t ramAddr, uint16_t flashAddr) {
 8013704:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    // Prepare CMD_REQ parameters
    uint8_t pParams[10] = {
 8013706:	0a03      	lsrs	r3, r0, #8
 8013708:	f88d 3004 	strb.w	r3, [sp, #4]
 801370c:	0a0b      	lsrs	r3, r1, #8
 801370e:	f88d 3006 	strb.w	r3, [sp, #6]
 8013712:	2301      	movs	r3, #1
 8013714:	f88d 3008 	strb.w	r3, [sp, #8]
 8013718:	2300      	movs	r3, #0
 801371a:	f88d 3009 	strb.w	r3, [sp, #9]
 801371e:	2325      	movs	r3, #37	; 0x25
 8013720:	f88d 300a 	strb.w	r3, [sp, #10]
 8013724:	2305      	movs	r3, #5
 8013726:	f88d 300b 	strb.w	r3, [sp, #11]
 801372a:	2313      	movs	r3, #19
        0x01, 0x00,                     // DWORD_COUNT
        0x25, 0x05, 0x13, 0x37          // KEY
    };

    // Send BL_FLASH_PAGE_PROG
    ehifCmdReq(0x07, sizeof(pParams), pParams);
 801372c:	aa01      	add	r2, sp, #4
 *       CC85XX crystal problems etc.)
 */
uint16_t ehifBlFlashPageProg(uint16_t ramAddr, uint16_t flashAddr) {

    // Prepare CMD_REQ parameters
    uint8_t pParams[10] = {
 801372e:	f88d 0005 	strb.w	r0, [sp, #5]
 8013732:	f88d 1007 	strb.w	r1, [sp, #7]
 8013736:	f88d 300c 	strb.w	r3, [sp, #12]
        0x01, 0x00,                     // DWORD_COUNT
        0x25, 0x05, 0x13, 0x37          // KEY
    };

    // Send BL_FLASH_PAGE_PROG
    ehifCmdReq(0x07, sizeof(pParams), pParams);
 801373a:	210a      	movs	r1, #10
 *       CC85XX crystal problems etc.)
 */
uint16_t ehifBlFlashPageProg(uint16_t ramAddr, uint16_t flashAddr) {

    // Prepare CMD_REQ parameters
    uint8_t pParams[10] = {
 801373c:	2337      	movs	r3, #55	; 0x37
        0x01, 0x00,                     // DWORD_COUNT
        0x25, 0x05, 0x13, 0x37          // KEY
    };

    // Send BL_FLASH_PAGE_PROG
    ehifCmdReq(0x07, sizeof(pParams), pParams);
 801373e:	2007      	movs	r0, #7
 *       CC85XX crystal problems etc.)
 */
uint16_t ehifBlFlashPageProg(uint16_t ramAddr, uint16_t flashAddr) {

    // Prepare CMD_REQ parameters
    uint8_t pParams[10] = {
 8013740:	f88d 300d 	strb.w	r3, [sp, #13]
        0x01, 0x00,                     // DWORD_COUNT
        0x25, 0x05, 0x13, 0x37          // KEY
    };

    // Send BL_FLASH_PAGE_PROG
    ehifCmdReq(0x07, sizeof(pParams), pParams);
 8013744:	f000 f8bc 	bl	80138c0 <ehifCmdReq>

    // Wait for completion and return status
    ehifWaitReadyMs(10);
 8013748:	200a      	movs	r0, #10
 801374a:	f000 f901 	bl	8013950 <ehifWaitReadyMs>
    return ehifGetStatus();
 801374e:	f000 f826 	bl	801379e <ehifGetStatus>

} // ehifBlFlashPageProg
 8013752:	b005      	add	sp, #20
 8013754:	f85d fb04 	ldr.w	pc, [sp], #4

08013758 <ehifBlFlashVerify>:
 *     One of the following:
 *     - \ref EHIF_BL_VERIFY_OK - Flash verification succeeded (CC85XX contains image with valid CRC)
 *     - \ref EHIF_BL_VERIFY_FAILED - Flash verification failed (CC85XX contains image with invalid CRC)
 *     - Other: EHIF operation failed (CC85XX is not in bootloader mode etc.)
 */
uint16_t ehifBlFlashVerify(uint16_t byteCount, uint8_t* pCrcVal) {
 8013758:	b513      	push	{r0, r1, r4, lr}

    // Prepare CMD_REQ parameters
    uint8_t pParams[8] = {
 801375a:	2300      	movs	r3, #0
 801375c:	2280      	movs	r2, #128	; 0x80
 *     One of the following:
 *     - \ref EHIF_BL_VERIFY_OK - Flash verification succeeded (CC85XX contains image with valid CRC)
 *     - \ref EHIF_BL_VERIFY_FAILED - Flash verification failed (CC85XX contains image with invalid CRC)
 *     - Other: EHIF operation failed (CC85XX is not in bootloader mode etc.)
 */
uint16_t ehifBlFlashVerify(uint16_t byteCount, uint8_t* pCrcVal) {
 801375e:	460c      	mov	r4, r1

    // Prepare CMD_REQ parameters
    uint8_t pParams[8] = {
 8013760:	f88d 3000 	strb.w	r3, [sp]
 8013764:	f88d 3001 	strb.w	r3, [sp, #1]
 8013768:	f88d 2002 	strb.w	r2, [sp, #2]
 801376c:	f88d 3003 	strb.w	r3, [sp, #3]
        0x00, 0x00, 0x80, 0x00,                    // DATA_ADDR
        0x00, 0x00, HI8(byteCount), LO8(byteCount) // BYTE_COUNT
    };

    // Send BL_FLASH_VERIFY
    ehifCmdReq(0x0F, sizeof(pParams), pParams);
 8013770:	466a      	mov	r2, sp
 *     - Other: EHIF operation failed (CC85XX is not in bootloader mode etc.)
 */
uint16_t ehifBlFlashVerify(uint16_t byteCount, uint8_t* pCrcVal) {

    // Prepare CMD_REQ parameters
    uint8_t pParams[8] = {
 8013772:	f88d 3004 	strb.w	r3, [sp, #4]
 8013776:	f88d 3005 	strb.w	r3, [sp, #5]
 801377a:	f88d 0007 	strb.w	r0, [sp, #7]
 801377e:	0a03      	lsrs	r3, r0, #8
        0x00, 0x00, 0x80, 0x00,                    // DATA_ADDR
        0x00, 0x00, HI8(byteCount), LO8(byteCount) // BYTE_COUNT
    };

    // Send BL_FLASH_VERIFY
    ehifCmdReq(0x0F, sizeof(pParams), pParams);
 8013780:	2108      	movs	r1, #8
 8013782:	200f      	movs	r0, #15
 *     - Other: EHIF operation failed (CC85XX is not in bootloader mode etc.)
 */
uint16_t ehifBlFlashVerify(uint16_t byteCount, uint8_t* pCrcVal) {

    // Prepare CMD_REQ parameters
    uint8_t pParams[8] = {
 8013784:	f88d 3006 	strb.w	r3, [sp, #6]
        0x00, 0x00, 0x80, 0x00,                    // DATA_ADDR
        0x00, 0x00, HI8(byteCount), LO8(byteCount) // BYTE_COUNT
    };

    // Send BL_FLASH_VERIFY
    ehifCmdReq(0x0F, sizeof(pParams), pParams);
 8013788:	f000 f89a 	bl	80138c0 <ehifCmdReq>

    // Get CRC and return status
    ehifWaitReadyMs(15);
 801378c:	200f      	movs	r0, #15
 801378e:	f000 f8df 	bl	8013950 <ehifWaitReadyMs>
    return ehifRead(4, pCrcVal);
 8013792:	4621      	mov	r1, r4
 8013794:	2004      	movs	r0, #4
 8013796:	f000 f85b 	bl	8013850 <ehifRead>

} // ehifBlFlashVerify
 801379a:	b002      	add	sp, #8
 801379c:	bd10      	pop	{r4, pc}

0801379e <ehifGetStatus>:
 *
 * \return
 *     EHIF status word (see \c EHIF_EVT_XXXXX definitions)
 */
uint16_t ehifGetStatus(void)
{
 801379e:	b510      	push	{r4, lr}

  // Begin operation
  EHIF_SPI_BEGIN();
 80137a0:	f7f9 f9c6 	bl	800cb30 <EHIF_SPI_BEGIN>

  // Send type/length, receive status word
  uint16_t statusWord;
  EHIF_SPI_TX(0x80);
 80137a4:	2080      	movs	r0, #128	; 0x80
 80137a6:	f7f9 f9d9 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 80137aa:	f7f9 f9e1 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  statusWord = EHIF_SPI_RX() << 8;
 80137ae:	f7f9 f9e1 	bl	800cb74 <EHIF_SPI_RX>
 80137b2:	0200      	lsls	r0, r0, #8
 80137b4:	b284      	uxth	r4, r0
  EHIF_SPI_TX(0x00);
 80137b6:	2000      	movs	r0, #0
 80137b8:	f7f9 f9d0 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 80137bc:	f7f9 f9d8 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  statusWord |= EHIF_SPI_RX();
 80137c0:	f7f9 f9d8 	bl	800cb74 <EHIF_SPI_RX>
 80137c4:	4320      	orrs	r0, r4
 80137c6:	b284      	uxth	r4, r0

  // End operation
  EHIF_SPI_END();
 80137c8:	f7f9 f9de 	bl	800cb88 <EHIF_SPI_END>
  return statusWord;

} // ehifGetStatus
 80137cc:	4620      	mov	r0, r4
 80137ce:	bd10      	pop	{r4, pc}

080137d0 <ehifWaitReady>:
 * The timeout mechanism ensures that code execution does not hang if the CC85XX does not respond.
 *
 * The function assumes that CSn is active.
 */
void ehifWaitReady(void)
{
 80137d0:	b510      	push	{r4, lr}
  uint16_t maxDelay = 5000;
  while (!EHIF_SPI_IS_CMDREQ_READY() && --maxDelay)
 80137d2:	f241 3488 	movw	r4, #5000	; 0x1388
 80137d6:	f7f9 f9b7 	bl	800cb48 <EHIF_SPI_IS_CMDREQ_READY>
 80137da:	b948      	cbnz	r0, 80137f0 <ehifWaitReady+0x20>
 80137dc:	3c01      	subs	r4, #1
 80137de:	b2a4      	uxth	r4, r4
 80137e0:	b11c      	cbz	r4, 80137ea <ehifWaitReady+0x1a>
    {
      EHIF_DELAY_US(2);
 80137e2:	2002      	movs	r0, #2
 80137e4:	f7f9 fbfe 	bl	800cfe4 <EHIF_DELAY_US>
 80137e8:	e7f5      	b.n	80137d6 <ehifWaitReady+0x6>
    }
  if (!maxDelay) waitReadyError = 1;
 80137ea:	4b02      	ldr	r3, [pc, #8]	; (80137f4 <ehifWaitReady+0x24>)
 80137ec:	2201      	movs	r2, #1
 80137ee:	701a      	strb	r2, [r3, #0]
 80137f0:	bd10      	pop	{r4, pc}
 80137f2:	bf00      	nop
 80137f4:	10002d14 	.word	0x10002d14

080137f8 <ehifWrite>:
 *
 * \return
 *     EHIF status word at start of WRITE operation (see \c EHIF_EVT_XXXXX definitions)
 */
uint16_t ehifWrite(uint16_t length, const uint8_t* pData)
{
 80137f8:	b570      	push	{r4, r5, r6, lr}
 80137fa:	4605      	mov	r5, r0
 80137fc:	460e      	mov	r6, r1

  // Begin operation
  EHIF_SPI_BEGIN();
 80137fe:	f7f9 f997 	bl	800cb30 <EHIF_SPI_BEGIN>
  ehifWaitReady();
 8013802:	f7ff ffe5 	bl	80137d0 <ehifWaitReady>

  // Send type/length, receive status word
  uint16_t statusWord;
  EHIF_SPI_TX(0x80 | ((length >> 8) & 0x0F));
 8013806:	f3c5 2003 	ubfx	r0, r5, #8, #4
 801380a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 801380e:	f7f9 f9a5 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 8013812:	f7f9 f9ad 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  statusWord = EHIF_SPI_RX() << 8;
 8013816:	f7f9 f9ad 	bl	800cb74 <EHIF_SPI_RX>
 801381a:	0200      	lsls	r0, r0, #8
 801381c:	b284      	uxth	r4, r0
  EHIF_SPI_TX(length & 0xFF);
 801381e:	b2e8      	uxtb	r0, r5
 8013820:	f7f9 f99c 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 8013824:	f7f9 f9a4 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  statusWord |= EHIF_SPI_RX();
 8013828:	f7f9 f9a4 	bl	800cb74 <EHIF_SPI_RX>
 801382c:	4320      	orrs	r0, r4
 801382e:	b284      	uxth	r4, r0
 8013830:	4435      	add	r5, r6

  // Send data
  while (length--)
 8013832:	42ae      	cmp	r6, r5
 8013834:	d006      	beq.n	8013844 <ehifWrite+0x4c>
    {
      EHIF_SPI_WAIT_TXRX();
 8013836:	f7f9 f99b 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
      EHIF_SPI_TX(*(pData++));
 801383a:	f816 0b01 	ldrb.w	r0, [r6], #1
 801383e:	f7f9 f98d 	bl	800cb5c <EHIF_SPI_TX>
 8013842:	e7f6      	b.n	8013832 <ehifWrite+0x3a>
    }
  EHIF_SPI_WAIT_TXRX();
 8013844:	f7f9 f994 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>

  // End operation
  EHIF_SPI_END();
 8013848:	f7f9 f99e 	bl	800cb88 <EHIF_SPI_END>
  return statusWord;

} // ehifWrite
 801384c:	4620      	mov	r0, r4
 801384e:	bd70      	pop	{r4, r5, r6, pc}

08013850 <ehifRead>:
 *
 * \return
 *     EHIF status word at start of READ operation (see \c EHIF_EVT_XXXXX definitions)
 */
uint16_t ehifRead(uint16_t length, uint8_t* pData)
{
 8013850:	b570      	push	{r4, r5, r6, lr}
 8013852:	4604      	mov	r4, r0
 8013854:	460e      	mov	r6, r1

  // Begin operation
  EHIF_SPI_BEGIN();
 8013856:	f7f9 f96b 	bl	800cb30 <EHIF_SPI_BEGIN>
  ehifWaitReady();
 801385a:	f7ff ffb9 	bl	80137d0 <ehifWaitReady>

  // Send type/length, receive status word
  uint16_t statusWord;
  EHIF_SPI_TX(0x90 | ((length >> 8) & 0x0F));
 801385e:	f3c4 2003 	ubfx	r0, r4, #8, #4
 8013862:	f040 0090 	orr.w	r0, r0, #144	; 0x90
 8013866:	f7f9 f979 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 801386a:	f7f9 f981 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  statusWord = EHIF_SPI_RX() << 8;
 801386e:	f7f9 f981 	bl	800cb74 <EHIF_SPI_RX>
 8013872:	0200      	lsls	r0, r0, #8
 8013874:	b285      	uxth	r5, r0
  EHIF_SPI_TX(length & 0xFF);
 8013876:	b2e0      	uxtb	r0, r4
 8013878:	f7f9 f970 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 801387c:	f7f9 f978 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  statusWord |= EHIF_SPI_RX();
 8013880:	f7f9 f978 	bl	800cb74 <EHIF_SPI_RX>
 8013884:	4328      	orrs	r0, r5
 8013886:	b285      	uxth	r5, r0

  // Receive data
  if (length--)
 8013888:	b1b4      	cbz	r4, 80138b8 <ehifRead+0x68>
    {
      EHIF_SPI_TX(0x00);
 801388a:	2000      	movs	r0, #0
 801388c:	f7f9 f966 	bl	800cb5c <EHIF_SPI_TX>
 8013890:	3c01      	subs	r4, #1
 8013892:	fa16 f484 	uxtah	r4, r6, r4
      while (length--)
 8013896:	42a6      	cmp	r6, r4
 8013898:	d009      	beq.n	80138ae <ehifRead+0x5e>
        {
          EHIF_SPI_WAIT_TXRX();
 801389a:	f7f9 f969 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
          *(pData++) = EHIF_SPI_RX();
 801389e:	f7f9 f969 	bl	800cb74 <EHIF_SPI_RX>
 80138a2:	f806 0b01 	strb.w	r0, [r6], #1
          EHIF_SPI_TX(0x00);
 80138a6:	2000      	movs	r0, #0
 80138a8:	f7f9 f958 	bl	800cb5c <EHIF_SPI_TX>
 80138ac:	e7f3      	b.n	8013896 <ehifRead+0x46>
        }
      EHIF_SPI_WAIT_TXRX();
 80138ae:	f7f9 f95f 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
      *(pData++) = EHIF_SPI_RX();
 80138b2:	f7f9 f95f 	bl	800cb74 <EHIF_SPI_RX>
 80138b6:	7030      	strb	r0, [r6, #0]
    }

  // End operation
  EHIF_SPI_END();
 80138b8:	f7f9 f966 	bl	800cb88 <EHIF_SPI_END>
  return statusWord;

} // ehifRead
 80138bc:	4628      	mov	r0, r5
 80138be:	bd70      	pop	{r4, r5, r6, pc}

080138c0 <ehifCmdReq>:
 *
 * \return
 *     EHIF status word at start of CMD_REQ operation (see \c EHIF_EVT_XXXXX definitions)
 */
uint16_t ehifCmdReq(uint8_t cmd, uint8_t length, const uint8_t* pParam)
{
 80138c0:	b570      	push	{r4, r5, r6, lr}
 80138c2:	4604      	mov	r4, r0
 80138c4:	460d      	mov	r5, r1
 80138c6:	4616      	mov	r6, r2

  // Begin operation
  EHIF_SPI_BEGIN();
 80138c8:	f7f9 f932 	bl	800cb30 <EHIF_SPI_BEGIN>
  ehifWaitReady();
 80138cc:	f7ff ff80 	bl	80137d0 <ehifWaitReady>

  // Send type/command code/parameter length, receive status word
  uint16_t statusWord;
  EHIF_SPI_TX(0xC0 | cmd);
 80138d0:	f044 00c0 	orr.w	r0, r4, #192	; 0xc0
 80138d4:	f7f9 f942 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 80138d8:	f7f9 f94a 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  statusWord = EHIF_SPI_RX() << 8;
 80138dc:	f7f9 f94a 	bl	800cb74 <EHIF_SPI_RX>
 80138e0:	0200      	lsls	r0, r0, #8
 80138e2:	b284      	uxth	r4, r0
  EHIF_SPI_TX(length & 0xFF);
 80138e4:	4628      	mov	r0, r5
 80138e6:	f7f9 f939 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 80138ea:	f7f9 f941 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  statusWord |= EHIF_SPI_RX();
 80138ee:	f7f9 f941 	bl	800cb74 <EHIF_SPI_RX>
 80138f2:	4320      	orrs	r0, r4
 80138f4:	b284      	uxth	r4, r0
 80138f6:	4435      	add	r5, r6

  // Send parameters
  while(length--)
 80138f8:	42ae      	cmp	r6, r5
 80138fa:	d006      	beq.n	801390a <ehifCmdReq+0x4a>
    {
      EHIF_SPI_WAIT_TXRX();
 80138fc:	f7f9 f938 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
      EHIF_SPI_TX(*(pParam++));
 8013900:	f816 0b01 	ldrb.w	r0, [r6], #1
 8013904:	f7f9 f92a 	bl	800cb5c <EHIF_SPI_TX>
 8013908:	e7f6      	b.n	80138f8 <ehifCmdReq+0x38>
    }
  EHIF_SPI_WAIT_TXRX();
 801390a:	f7f9 f931 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>

  // End operation
  EHIF_SPI_END();
 801390e:	f7f9 f93b 	bl	800cb88 <EHIF_SPI_END>
  return statusWord;

} // ehifCmdReq
 8013912:	4620      	mov	r0, r4
 8013914:	bd70      	pop	{r4, r5, r6, pc}

08013916 <ehifSetAddr>:
 *
 * \return
 *     EHIF status word at start of SET_ADDR operation (see \c EHIF_EVT_XXXXX definitions)
 */
uint16_t ehifSetAddr(uint16_t addr)
{
 8013916:	b538      	push	{r3, r4, r5, lr}
 8013918:	4605      	mov	r5, r0

  // Begin operation
  EHIF_SPI_BEGIN();
 801391a:	f7f9 f909 	bl	800cb30 <EHIF_SPI_BEGIN>
  ehifWaitReady();
 801391e:	f7ff ff57 	bl	80137d0 <ehifWaitReady>

  // Send type/address
  uint16_t statusWord;
  EHIF_SPI_TX(0x00 | (HI8(addr) & 0x7F));
 8013922:	f3c5 2006 	ubfx	r0, r5, #8, #7
 8013926:	f7f9 f919 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 801392a:	f7f9 f921 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  statusWord = EHIF_SPI_RX() << 8;
 801392e:	f7f9 f921 	bl	800cb74 <EHIF_SPI_RX>
 8013932:	0200      	lsls	r0, r0, #8
 8013934:	b284      	uxth	r4, r0
  EHIF_SPI_TX(LO8(addr) & 0xFF);
 8013936:	b2e8      	uxtb	r0, r5
 8013938:	f7f9 f910 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 801393c:	f7f9 f918 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  statusWord |= EHIF_SPI_RX();
 8013940:	f7f9 f918 	bl	800cb74 <EHIF_SPI_RX>
 8013944:	4320      	orrs	r0, r4
 8013946:	b284      	uxth	r4, r0

  // End operation
  EHIF_SPI_END();
 8013948:	f7f9 f91e 	bl	800cb88 <EHIF_SPI_END>
  return statusWord;

} // ehifSetAddr
 801394c:	4620      	mov	r0, r4
 801394e:	bd38      	pop	{r3, r4, r5, pc}

08013950 <ehifWaitReadyMs>:
 *
 * \param[in]       timeout
 *     Timeout in milliseconds
 */
void ehifWaitReadyMs(uint16_t timeout)
{
 8013950:	b510      	push	{r4, lr}
 8013952:	4604      	mov	r4, r0
  EHIF_SPI_BEGIN();
 8013954:	f7f9 f8ec 	bl	800cb30 <EHIF_SPI_BEGIN>
  uint32_t maxDelay = ((uint32_t) timeout) * 1/* 00 */;
  while (!EHIF_SPI_IS_CMDREQ_READY() && --maxDelay)
 8013958:	f7f9 f8f6 	bl	800cb48 <EHIF_SPI_IS_CMDREQ_READY>
 801395c:	b928      	cbnz	r0, 801396a <ehifWaitReadyMs+0x1a>
 801395e:	3c01      	subs	r4, #1
 8013960:	d004      	beq.n	801396c <ehifWaitReadyMs+0x1c>
    {
      EHIF_DELAY_MS(1);
 8013962:	2001      	movs	r0, #1
 8013964:	f7f7 f8d0 	bl	800ab08 <vTaskDelay>
 8013968:	e7f6      	b.n	8013958 <ehifWaitReadyMs+0x8>
    }
  if (!maxDelay) waitReadyError = 1;
 801396a:	b914      	cbnz	r4, 8013972 <ehifWaitReadyMs+0x22>
 801396c:	4b03      	ldr	r3, [pc, #12]	; (801397c <ehifWaitReadyMs+0x2c>)
 801396e:	2201      	movs	r2, #1
 8013970:	701a      	strb	r2, [r3, #0]
  EHIF_SPI_END();
} // ehifWaitReadyMs
 8013972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while (!EHIF_SPI_IS_CMDREQ_READY() && --maxDelay)
    {
      EHIF_DELAY_MS(1);
    }
  if (!maxDelay) waitReadyError = 1;
  EHIF_SPI_END();
 8013976:	f7f9 b907 	b.w	800cb88 <EHIF_SPI_END>
 801397a:	bf00      	nop
 801397c:	10002d14 	.word	0x10002d14

08013980 <ehifSysResetSpi>:
 *
 * Timing must be verified, using oscilloscope or logic analyzer, when porting to new microcontrollers
 * and/or compiler tools.
 */
void ehifSysResetSpi(uint8_t waitReady)
{
 8013980:	b510      	push	{r4, lr}
 8013982:	4604      	mov	r4, r0

  // Perform SYS_RESET sequence
  EHIF_SPI_BEGIN();
 8013984:	f7f9 f8d4 	bl	800cb30 <EHIF_SPI_BEGIN>
  EHIF_DELAY_MS(2);
 8013988:	2002      	movs	r0, #2
 801398a:	f7f7 f8bd 	bl	800ab08 <vTaskDelay>
  EHIF_SPI_TX(0xBF);
 801398e:	20bf      	movs	r0, #191	; 0xbf
 8013990:	f7f9 f8e4 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 8013994:	f7f9 f8ec 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  EHIF_SPI_TX(0xFF);
 8013998:	20ff      	movs	r0, #255	; 0xff
 801399a:	f7f9 f8df 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 801399e:	f7f9 f8e7 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  if (EHIF_DELAY_SPI_RESET_TO_CSN_HIGH)
    {
      EHIF_DELAY_US(EHIF_DELAY_SPI_RESET_TO_CSN_HIGH);
 80139a2:	2002      	movs	r0, #2
 80139a4:	f7f9 fb1e 	bl	800cfe4 <EHIF_DELAY_US>
    }
  EHIF_SPI_END();
 80139a8:	f7f9 f8ee 	bl	800cb88 <EHIF_SPI_END>
  if (waitReady)
 80139ac:	b15c      	cbz	r4, 80139c6 <ehifSysResetSpi+0x46>
    {
      EHIF_DELAY_US(1);
 80139ae:	2001      	movs	r0, #1
 80139b0:	f7f9 fb18 	bl	800cfe4 <EHIF_DELAY_US>
      EHIF_SPI_BEGIN();
 80139b4:	f7f9 f8bc 	bl	800cb30 <EHIF_SPI_BEGIN>
      ehifWaitReadyMs(100);
 80139b8:	2064      	movs	r0, #100	; 0x64
 80139ba:	f7ff ffc9 	bl	8013950 <ehifWaitReadyMs>
      EHIF_SPI_END();
    }

} // ehifSysResetSpi
 80139be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (waitReady)
    {
      EHIF_DELAY_US(1);
      EHIF_SPI_BEGIN();
      ehifWaitReadyMs(100);
      EHIF_SPI_END();
 80139c2:	f7f9 b8e1 	b.w	800cb88 <EHIF_SPI_END>
 80139c6:	bd10      	pop	{r4, pc}

080139c8 <ehifBootResetSpi>:
 * Timing must be verified, using oscilloscope or logic analyzer, when porting to new microcontrollers
 * and/or compiler tools.
 */

void ehifBootResetSpi(void)
{
 80139c8:	b508      	push	{r3, lr}

// Perform SYS_RESET sequence
  EHIF_SPI_BEGIN();
 80139ca:	f7f9 f8b1 	bl	800cb30 <EHIF_SPI_BEGIN>
  EHIF_DELAY_MS(2);
 80139ce:	2002      	movs	r0, #2
 80139d0:	f7f7 f89a 	bl	800ab08 <vTaskDelay>
  EHIF_ENTER_CRITICAL_SECTION();
 80139d4:	f7f6 fcea 	bl	800a3ac <vPortEnterCritical>
 80139d8:	2000      	movs	r0, #0
 80139da:	f7f9 fc43 	bl	800d264 <spiIRQEnable>
  //   int start = TIM14->CNT;
  EHIF_SPI_TX(0xB0);
 80139de:	20b0      	movs	r0, #176	; 0xb0
 80139e0:	f7f9 f8bc 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 80139e4:	f7f9 f8c4 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  EHIF_SPI_TX(0x00);
 80139e8:	2000      	movs	r0, #0
 80139ea:	f7f9 f8b7 	bl	800cb5c <EHIF_SPI_TX>
  EHIF_SPI_WAIT_TXRX();
 80139ee:	f7f9 f8bf 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
  if (EHIF_DELAY_SPI_RESET_TO_CSN_HIGH)
    {
      EHIF_DELAY_US(EHIF_DELAY_SPI_RESET_TO_CSN_HIGH);
 80139f2:	2002      	movs	r0, #2
 80139f4:	f7f9 faf6 	bl	800cfe4 <EHIF_DELAY_US>
    }
  EHIF_SPI_END();
 80139f8:	f7f9 f8c6 	bl	800cb88 <EHIF_SPI_END>
  EHIF_DELAY_US(1);
 80139fc:	2001      	movs	r0, #1
 80139fe:	f7f9 faf1 	bl	800cfe4 <EHIF_DELAY_US>
  EHIF_SPI_BEGIN();
 8013a02:	f7f9 f895 	bl	800cb30 <EHIF_SPI_BEGIN>
  //  int stop = TIM14->CNT;
  EHIF_LEAVE_CRITICAL_SECTION();
 8013a06:	2001      	movs	r0, #1
 8013a08:	f7f9 fc2c 	bl	800d264 <spiIRQEnable>
 8013a0c:	f7f6 fce0 	bl	800a3d0 <vPortExitCritical>
  ehifWaitReadyMs(100);
 8013a10:	2064      	movs	r0, #100	; 0x64
 8013a12:	f7ff ff9d 	bl	8013950 <ehifWaitReadyMs>
  EHIF_SPI_END();

} // ehifBootResetSpi
 8013a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  EHIF_DELAY_US(1);
  EHIF_SPI_BEGIN();
  //  int stop = TIM14->CNT;
  EHIF_LEAVE_CRITICAL_SECTION();
  ehifWaitReadyMs(100);
  EHIF_SPI_END();
 8013a1a:	f7f9 b8b5 	b.w	800cb88 <EHIF_SPI_END>
	...

08013a20 <ehifGetWaitReadyError>:
 * \return
 *     Non-zero if CMD_REQ_READY violation has occurred, otherwise zero.
 */
uint8_t ehifGetWaitReadyError(void)
{
  if (waitReadyError)
 8013a20:	4b03      	ldr	r3, [pc, #12]	; (8013a30 <ehifGetWaitReadyError+0x10>)
 8013a22:	7818      	ldrb	r0, [r3, #0]
 8013a24:	b110      	cbz	r0, 8013a2c <ehifGetWaitReadyError+0xc>
    {
      waitReadyError = 0;
 8013a26:	2200      	movs	r2, #0
 8013a28:	701a      	strb	r2, [r3, #0]
      return 1;
 8013a2a:	2001      	movs	r0, #1
    }
  else
    {
      return 0;
    }
} // ehifGetWaitReadyError
 8013a2c:	4770      	bx	lr
 8013a2e:	bf00      	nop
 8013a30:	10002d14 	.word	0x10002d14

08013a34 <ehifFieldTx>:
 *         - Bits 7:2 = Repeat count (number of times this field size is repeated)
 *     - Negative value (msb is 1):
 *         - Bits 7:0 = Negative offset applied to \a pFieldSpec, creating an infinite loop until the
 *           number of bytes specified by \a length is reached
 */
static void ehifFieldTx(int16_t length, const uint8_t* pData, const int8_t* pFieldSpec) {
 8013a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a38:	4680      	mov	r8, r0
 8013a3a:	4689      	mov	r9, r1
 8013a3c:	4692      	mov	sl, r2
            // Bits 6:2 = repeat count (0 = one field, 1 = 2 fields and so on)
            uint16_t repeatCount = *pFieldSpec >> 2;
            do {

                // Bits 1:0 = field size shift (1 = 1 byte, 2 = 2 bytes, 3 = 4 bytes)
                uint8_t fieldSize = BV(((*pFieldSpec & 0x03) - 1) & 0x03);
 8013a3e:	2701      	movs	r7, #1
 *           number of bytes specified by \a length is reached
 */
static void ehifFieldTx(int16_t length, const uint8_t* pData, const int8_t* pFieldSpec) {

    // Until all the bytes have been consumed ...
    while (length > 0) {
 8013a40:	f1b8 0f00 	cmp.w	r8, #0
 8013a44:	dd47      	ble.n	8013ad6 <ehifFieldTx+0xa2>

        // Positive field spec value = Write field
        if (*pFieldSpec > 0) {
 8013a46:	f99a 6000 	ldrsb.w	r6, [sl]
 8013a4a:	2e00      	cmp	r6, #0
 8013a4c:	dd40      	ble.n	8013ad0 <ehifFieldTx+0x9c>

            // Bits 6:2 = repeat count (0 = one field, 1 = 2 fields and so on)
            uint16_t repeatCount = *pFieldSpec >> 2;
 8013a4e:	f3c6 068f 	ubfx	r6, r6, #2, #16
            do {

                // Bits 1:0 = field size shift (1 = 1 byte, 2 = 2 bytes, 3 = 4 bytes)
                uint8_t fieldSize = BV(((*pFieldSpec & 0x03) - 1) & 0x03);
 8013a52:	f89a 3000 	ldrb.w	r3, [sl]
 8013a56:	3b01      	subs	r3, #1
 8013a58:	f003 0303 	and.w	r3, r3, #3
 8013a5c:	fa07 f403 	lsl.w	r4, r7, r3
                if (fieldSize > length) break;
 8013a60:	4544      	cmp	r4, r8
 8013a62:	dc32      	bgt.n	8013aca <ehifFieldTx+0x96>
                pData += fieldSize;
                switch (fieldSize) {
 8013a64:	2c02      	cmp	r4, #2
            do {

                // Bits 1:0 = field size shift (1 = 1 byte, 2 = 2 bytes, 3 = 4 bytes)
                uint8_t fieldSize = BV(((*pFieldSpec & 0x03) - 1) & 0x03);
                if (fieldSize > length) break;
                pData += fieldSize;
 8013a66:	eb09 0504 	add.w	r5, r9, r4
                switch (fieldSize) {
 8013a6a:	d013      	beq.n	8013a94 <ehifFieldTx+0x60>
 8013a6c:	2c04      	cmp	r4, #4
 8013a6e:	d002      	beq.n	8013a76 <ehifFieldTx+0x42>
 8013a70:	2c01      	cmp	r4, #1
 8013a72:	d130      	bne.n	8013ad6 <ehifFieldTx+0xa2>
 8013a74:	e017      	b.n	8013aa6 <ehifFieldTx+0x72>
                case 4: // 32-bit
                    EHIF_SPI_TX(*(--pData));
 8013a76:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8013a7a:	f7f9 f86f 	bl	800cb5c <EHIF_SPI_TX>
                    EHIF_SPI_WAIT_TXRX();
 8013a7e:	f7f9 f877 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
                    EHIF_SPI_TX(*(--pData));
 8013a82:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8013a86:	f7f9 f869 	bl	800cb5c <EHIF_SPI_TX>
                    EHIF_SPI_WAIT_TXRX();
 8013a8a:	f7f9 f871 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
                pData += fieldSize;
                switch (fieldSize) {
                case 4: // 32-bit
                    EHIF_SPI_TX(*(--pData));
                    EHIF_SPI_WAIT_TXRX();
                    EHIF_SPI_TX(*(--pData));
 8013a8e:	f109 0902 	add.w	r9, r9, #2
 8013a92:	464d      	mov	r5, r9
                    EHIF_SPI_WAIT_TXRX();
                case 2: // 16-bit
                    EHIF_SPI_TX(*(--pData));
 8013a94:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8013a98:	f7f9 f860 	bl	800cb5c <EHIF_SPI_TX>
                    EHIF_SPI_WAIT_TXRX();
 8013a9c:	f7f9 f868 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
                    EHIF_SPI_TX(*(--pData));
                    EHIF_SPI_WAIT_TXRX();
                    EHIF_SPI_TX(*(--pData));
                    EHIF_SPI_WAIT_TXRX();
                case 2: // 16-bit
                    EHIF_SPI_TX(*(--pData));
 8013aa0:	f105 39ff 	add.w	r9, r5, #4294967295
 8013aa4:	464d      	mov	r5, r9
                    EHIF_SPI_WAIT_TXRX();
                case 1: // 8-bit
                    EHIF_SPI_TX(*(--pData));
 8013aa6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8013aaa:	f7f9 f857 	bl	800cb5c <EHIF_SPI_TX>
                    EHIF_SPI_WAIT_TXRX();
                    break;
                default:
                    return;
                }
                pData += fieldSize;
 8013aae:	f104 39ff 	add.w	r9, r4, #4294967295
                case 2: // 16-bit
                    EHIF_SPI_TX(*(--pData));
                    EHIF_SPI_WAIT_TXRX();
                case 1: // 8-bit
                    EHIF_SPI_TX(*(--pData));
                    EHIF_SPI_WAIT_TXRX();
 8013ab2:	f7f9 f85d 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
                    break;
                default:
                    return;
                }
                pData += fieldSize;
                length -= fieldSize;
 8013ab6:	ebc4 0408 	rsb	r4, r4, r8

            } while (repeatCount--);
 8013aba:	1e73      	subs	r3, r6, #1
                    EHIF_SPI_WAIT_TXRX();
                    break;
                default:
                    return;
                }
                pData += fieldSize;
 8013abc:	44a9      	add	r9, r5
                length -= fieldSize;
 8013abe:	fa0f f884 	sxth.w	r8, r4

            } while (repeatCount--);
 8013ac2:	b29b      	uxth	r3, r3
 8013ac4:	b10e      	cbz	r6, 8013aca <ehifFieldTx+0x96>
 8013ac6:	461e      	mov	r6, r3
 8013ac8:	e7c3      	b.n	8013a52 <ehifFieldTx+0x1e>

            pFieldSpec++;
 8013aca:	f10a 0a01 	add.w	sl, sl, #1
 8013ace:	e7b7      	b.n	8013a40 <ehifFieldTx+0xc>

        // Zero field spec value = bail out. This should only happen due to host processor software bugs
        } else if (*pFieldSpec == 0) {
 8013ad0:	d001      	beq.n	8013ad6 <ehifFieldTx+0xa2>
            return;

        // Negative field spec value = Go back in field specification
        } else {
            pFieldSpec += *pFieldSpec;
 8013ad2:	44b2      	add	sl, r6
 8013ad4:	e7b4      	b.n	8013a40 <ehifFieldTx+0xc>
 8013ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013ada <ehifFieldRx>:
 *         - Bits 7:2 = Repeat count (number of times this field size is repeated)
 *     - Negative value (msb is 1):
 *         - Bits 7:0 = Negative offset applied to \a pFieldSpec, creating an infinite loop until the
 *           number of bytes specified by \a length is reached
 */
static void ehifFieldRx(uint16_t length, uint8_t* pData, const int8_t* pFieldSpec) {
 8013ada:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ade:	4606      	mov	r6, r0
 8013ae0:	4689      	mov	r9, r1
 8013ae2:	4690      	mov	r8, r2
            // Bits 6:2 = repeat count (0 = one field, 1 = 2 fields and so on)
            uint16_t repeatCount = *pFieldSpec >> 2;
            do {

                // Bits 1:0 = field size shift (1 = 1 byte, 2 = 2 bytes, 3 = 4 bytes)
                uint8_t fieldSize = BV(((*pFieldSpec & 0x03) - 1) & 0x03);
 8013ae4:	2701      	movs	r7, #1
 *     - Negative value (msb is 1):
 *         - Bits 7:0 = Negative offset applied to \a pFieldSpec, creating an infinite loop until the
 *           number of bytes specified by \a length is reached
 */
static void ehifFieldRx(uint16_t length, uint8_t* pData, const int8_t* pFieldSpec) {
    while (length) {
 8013ae6:	2e00      	cmp	r6, #0
 8013ae8:	d054      	beq.n	8013b94 <ehifFieldRx+0xba>

        // Positive field spec value = Write field
        if (*pFieldSpec > 0) {
 8013aea:	f998 5000 	ldrsb.w	r5, [r8]
 8013aee:	2d00      	cmp	r5, #0
 8013af0:	dd4d      	ble.n	8013b8e <ehifFieldRx+0xb4>

            // Bits 6:2 = repeat count (0 = one field, 1 = 2 fields and so on)
            uint16_t repeatCount = *pFieldSpec >> 2;
 8013af2:	f3c5 058f 	ubfx	r5, r5, #2, #16
            do {

                // Bits 1:0 = field size shift (1 = 1 byte, 2 = 2 bytes, 3 = 4 bytes)
                uint8_t fieldSize = BV(((*pFieldSpec & 0x03) - 1) & 0x03);
 8013af6:	f898 3000 	ldrb.w	r3, [r8]
 8013afa:	3b01      	subs	r3, #1
 8013afc:	f003 0303 	and.w	r3, r3, #3
 8013b00:	fa07 f403 	lsl.w	r4, r7, r3
                if (fieldSize > length) break;
 8013b04:	fa1f fa84 	uxth.w	sl, r4
 8013b08:	4556      	cmp	r6, sl
 8013b0a:	d33d      	bcc.n	8013b88 <ehifFieldRx+0xae>
                pData += fieldSize;
                switch (fieldSize) {
 8013b0c:	2c02      	cmp	r4, #2
            do {

                // Bits 1:0 = field size shift (1 = 1 byte, 2 = 2 bytes, 3 = 4 bytes)
                uint8_t fieldSize = BV(((*pFieldSpec & 0x03) - 1) & 0x03);
                if (fieldSize > length) break;
                pData += fieldSize;
 8013b0e:	eb09 0b04 	add.w	fp, r9, r4
                switch (fieldSize) {
 8013b12:	d019      	beq.n	8013b48 <ehifFieldRx+0x6e>
 8013b14:	2c04      	cmp	r4, #4
 8013b16:	d002      	beq.n	8013b1e <ehifFieldRx+0x44>
 8013b18:	2c01      	cmp	r4, #1
 8013b1a:	d13b      	bne.n	8013b94 <ehifFieldRx+0xba>
 8013b1c:	e020      	b.n	8013b60 <ehifFieldRx+0x86>
                case 4: // 32-bit
                    EHIF_SPI_TX(0x00);
 8013b1e:	2000      	movs	r0, #0
 8013b20:	f7f9 f81c 	bl	800cb5c <EHIF_SPI_TX>
                    EHIF_SPI_WAIT_TXRX();
 8013b24:	f7f9 f824 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
                    *(--pData) = EHIF_SPI_RX();
 8013b28:	f7f9 f824 	bl	800cb74 <EHIF_SPI_RX>
 8013b2c:	f80b 0c01 	strb.w	r0, [fp, #-1]
                    EHIF_SPI_TX(0x00);
 8013b30:	2000      	movs	r0, #0
 8013b32:	f7f9 f813 	bl	800cb5c <EHIF_SPI_TX>
                    EHIF_SPI_WAIT_TXRX();
 8013b36:	f7f9 f81b 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
                    *(--pData) = EHIF_SPI_RX();
 8013b3a:	f7f9 f81b 	bl	800cb74 <EHIF_SPI_RX>
 8013b3e:	f109 0902 	add.w	r9, r9, #2
 8013b42:	f80b 0c02 	strb.w	r0, [fp, #-2]
 8013b46:	46cb      	mov	fp, r9
                case 2: // 16-bit
                    EHIF_SPI_TX(*pData);
 8013b48:	46d9      	mov	r9, fp
 8013b4a:	f819 0901 	ldrb.w	r0, [r9], #-1
 8013b4e:	f7f9 f805 	bl	800cb5c <EHIF_SPI_TX>
                    EHIF_SPI_WAIT_TXRX();
 8013b52:	f7f9 f80d 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
                    *(--pData) = EHIF_SPI_RX();
 8013b56:	f7f9 f80d 	bl	800cb74 <EHIF_SPI_RX>
 8013b5a:	f80b 0c01 	strb.w	r0, [fp, #-1]
 8013b5e:	46cb      	mov	fp, r9
                case 1: // 8-bit
                    EHIF_SPI_TX(0x00);
 8013b60:	2000      	movs	r0, #0
 8013b62:	f7f8 fffb 	bl	800cb5c <EHIF_SPI_TX>
                    EHIF_SPI_WAIT_TXRX();
 8013b66:	f7f9 f803 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
                    *(--pData) = EHIF_SPI_RX();
 8013b6a:	f7f9 f803 	bl	800cb74 <EHIF_SPI_RX>
                    break;
                default:
                    return;
                }
                pData += fieldSize;
 8013b6e:	3c01      	subs	r4, #1
                length -= fieldSize;
 8013b70:	ebca 0606 	rsb	r6, sl, r6

            } while (repeatCount--);
 8013b74:	1e6b      	subs	r3, r5, #1
                    EHIF_SPI_WAIT_TXRX();
                    *(--pData) = EHIF_SPI_RX();
                case 1: // 8-bit
                    EHIF_SPI_TX(0x00);
                    EHIF_SPI_WAIT_TXRX();
                    *(--pData) = EHIF_SPI_RX();
 8013b76:	f80b 0c01 	strb.w	r0, [fp, #-1]
                    break;
                default:
                    return;
                }
                pData += fieldSize;
 8013b7a:	eb0b 0904 	add.w	r9, fp, r4
                length -= fieldSize;
 8013b7e:	b2b6      	uxth	r6, r6

            } while (repeatCount--);
 8013b80:	b29b      	uxth	r3, r3
 8013b82:	b10d      	cbz	r5, 8013b88 <ehifFieldRx+0xae>
 8013b84:	461d      	mov	r5, r3
 8013b86:	e7b6      	b.n	8013af6 <ehifFieldRx+0x1c>

            pFieldSpec++;
 8013b88:	f108 0801 	add.w	r8, r8, #1
 8013b8c:	e7ab      	b.n	8013ae6 <ehifFieldRx+0xc>

        // Zero field spec value = bail out. This should normally not happen, but can for instance happen
        // if an electrical error corrupts the length value returned by READBC
        } else if (*pFieldSpec == 0) {
 8013b8e:	d001      	beq.n	8013b94 <ehifFieldRx+0xba>
            return;

        // Negative field spec value = Go back in field specification
        } else {
            pFieldSpec += *pFieldSpec;
 8013b90:	44a8      	add	r8, r5
 8013b92:	e7a8      	b.n	8013ae6 <ehifFieldRx+0xc>
 8013b94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b98 <ehifFieldWrite>:
 *           number of bytes specified by \a length is reached
 *
 * \return
 *     EHIF status word at start of WRITE operation (see \c EHIF_EVT_XXXXX definitions)
 */
uint16_t ehifFieldWrite(uint16_t length, const uint8_t* pData, const int8_t* pFieldSpec) {
 8013b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	460e      	mov	r6, r1
 8013b9e:	4617      	mov	r7, r2

    // Begin operation
    EHIF_SPI_BEGIN();
 8013ba0:	f7f8 ffc6 	bl	800cb30 <EHIF_SPI_BEGIN>
    ehifWaitReady();
 8013ba4:	f7ff fe14 	bl	80137d0 <ehifWaitReady>

    // Send type/length, receive status word
    uint16_t statusWord;
    EHIF_SPI_TX(0x80 | ((length >> 8) & 0x0F));
 8013ba8:	f3c5 2003 	ubfx	r0, r5, #8, #4
 8013bac:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8013bb0:	f7f8 ffd4 	bl	800cb5c <EHIF_SPI_TX>
    EHIF_SPI_WAIT_TXRX();
 8013bb4:	f7f8 ffdc 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
    statusWord = EHIF_SPI_RX() << 8;
 8013bb8:	f7f8 ffdc 	bl	800cb74 <EHIF_SPI_RX>
 8013bbc:	0200      	lsls	r0, r0, #8
 8013bbe:	b284      	uxth	r4, r0
    EHIF_SPI_TX(length & 0xFF);
 8013bc0:	b2e8      	uxtb	r0, r5
 8013bc2:	f7f8 ffcb 	bl	800cb5c <EHIF_SPI_TX>
    EHIF_SPI_WAIT_TXRX();
 8013bc6:	f7f8 ffd3 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
    statusWord |= EHIF_SPI_RX();
 8013bca:	f7f8 ffd3 	bl	800cb74 <EHIF_SPI_RX>
 8013bce:	4320      	orrs	r0, r4

    // Send data
    ehifFieldTx(length, pData, pFieldSpec);
 8013bd0:	463a      	mov	r2, r7
 8013bd2:	4631      	mov	r1, r6
    EHIF_SPI_TX(0x80 | ((length >> 8) & 0x0F));
    EHIF_SPI_WAIT_TXRX();
    statusWord = EHIF_SPI_RX() << 8;
    EHIF_SPI_TX(length & 0xFF);
    EHIF_SPI_WAIT_TXRX();
    statusWord |= EHIF_SPI_RX();
 8013bd4:	b284      	uxth	r4, r0

    // Send data
    ehifFieldTx(length, pData, pFieldSpec);
 8013bd6:	b228      	sxth	r0, r5
 8013bd8:	f7ff ff2c 	bl	8013a34 <ehifFieldTx>
    EHIF_SPI_WAIT_TXRX();
 8013bdc:	f7f8 ffc8 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>

    // End operation
    EHIF_SPI_END();
 8013be0:	f7f8 ffd2 	bl	800cb88 <EHIF_SPI_END>
    return statusWord;

} // ehifFieldWrite
 8013be4:	4620      	mov	r0, r4
 8013be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013be8 <ehifFieldRead>:
 *           number of bytes specified by \a length is reached
 *
 * \return
 *     EHIF status word at start of READ operation (see \c EHIF_EVT_XXXXX definitions)
 */
uint16_t ehifFieldRead(uint16_t length, uint8_t* pData, const int8_t* pFieldSpec) {
 8013be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bea:	4605      	mov	r5, r0
 8013bec:	460e      	mov	r6, r1
 8013bee:	4617      	mov	r7, r2

    // Begin operation
    EHIF_SPI_BEGIN();
 8013bf0:	f7f8 ff9e 	bl	800cb30 <EHIF_SPI_BEGIN>
    ehifWaitReady();
 8013bf4:	f7ff fdec 	bl	80137d0 <ehifWaitReady>

    // Send type/length, receive status word
    uint16_t statusWord;
    EHIF_SPI_TX(0x90 | ((length >> 8) & 0x0F));
 8013bf8:	f3c5 2003 	ubfx	r0, r5, #8, #4
 8013bfc:	f040 0090 	orr.w	r0, r0, #144	; 0x90
 8013c00:	f7f8 ffac 	bl	800cb5c <EHIF_SPI_TX>
    EHIF_SPI_WAIT_TXRX();
 8013c04:	f7f8 ffb4 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
    statusWord = EHIF_SPI_RX() << 8;
 8013c08:	f7f8 ffb4 	bl	800cb74 <EHIF_SPI_RX>
 8013c0c:	0200      	lsls	r0, r0, #8
 8013c0e:	b284      	uxth	r4, r0
    EHIF_SPI_TX(length & 0xFF);
 8013c10:	b2e8      	uxtb	r0, r5
 8013c12:	f7f8 ffa3 	bl	800cb5c <EHIF_SPI_TX>
    EHIF_SPI_WAIT_TXRX();
 8013c16:	f7f8 ffab 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
    statusWord |= EHIF_SPI_RX();
 8013c1a:	f7f8 ffab 	bl	800cb74 <EHIF_SPI_RX>
 8013c1e:	4320      	orrs	r0, r4
 8013c20:	b284      	uxth	r4, r0

    // Receive data
    ehifFieldRx(length, pData, pFieldSpec);
 8013c22:	463a      	mov	r2, r7
 8013c24:	4628      	mov	r0, r5
 8013c26:	4631      	mov	r1, r6
 8013c28:	f7ff ff57 	bl	8013ada <ehifFieldRx>

    // End operation
    EHIF_SPI_END();
 8013c2c:	f7f8 ffac 	bl	800cb88 <EHIF_SPI_END>
    return statusWord;

} // ehifFieldRead
 8013c30:	4620      	mov	r0, r4
 8013c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c34 <ehifFieldReadbc>:
 *           number of bytes specified by \a length is reached
 *
 * \return
 *     EHIF status word at start of READBC operation (see \c EHIF_EVT_XXXXX definitions)
 */
uint16_t ehifFieldReadbc(uint16_t *pVarLength, uint8_t* pData, const int8_t* pFieldSpec) {
 8013c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c38:	460f      	mov	r7, r1
 8013c3a:	4690      	mov	r8, r2
 8013c3c:	4606      	mov	r6, r0

    // Begin operation
    EHIF_SPI_BEGIN();
 8013c3e:	f7f8 ff77 	bl	800cb30 <EHIF_SPI_BEGIN>
    ehifWaitReady();
 8013c42:	f7ff fdc5 	bl	80137d0 <ehifWaitReady>

    // Send type, receive status word
    uint16_t statusWord;
    EHIF_SPI_TX(0xA0);
 8013c46:	20a0      	movs	r0, #160	; 0xa0
 8013c48:	f7f8 ff88 	bl	800cb5c <EHIF_SPI_TX>
    EHIF_SPI_WAIT_TXRX();
 8013c4c:	f7f8 ff90 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
    statusWord = EHIF_SPI_RX() << 8;
 8013c50:	f7f8 ff90 	bl	800cb74 <EHIF_SPI_RX>
 8013c54:	0200      	lsls	r0, r0, #8
 8013c56:	b284      	uxth	r4, r0
    EHIF_SPI_TX(0x00);
 8013c58:	2000      	movs	r0, #0
 8013c5a:	f7f8 ff7f 	bl	800cb5c <EHIF_SPI_TX>
    EHIF_SPI_WAIT_TXRX();
 8013c5e:	f7f8 ff87 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
    statusWord |= EHIF_SPI_RX();
 8013c62:	f7f8 ff87 	bl	800cb74 <EHIF_SPI_RX>
 8013c66:	4320      	orrs	r0, r4
 8013c68:	b284      	uxth	r4, r0

    // Receive length
    uint16_t length;
    EHIF_SPI_TX(0xA0);
 8013c6a:	20a0      	movs	r0, #160	; 0xa0
 8013c6c:	f7f8 ff76 	bl	800cb5c <EHIF_SPI_TX>
    EHIF_SPI_WAIT_TXRX();
 8013c70:	f7f8 ff7e 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
    length = EHIF_SPI_RX() << 8;
 8013c74:	f7f8 ff7e 	bl	800cb74 <EHIF_SPI_RX>
 8013c78:	0200      	lsls	r0, r0, #8
 8013c7a:	b285      	uxth	r5, r0
    EHIF_SPI_TX(0x00);
 8013c7c:	2000      	movs	r0, #0
 8013c7e:	f7f8 ff6d 	bl	800cb5c <EHIF_SPI_TX>
    EHIF_SPI_WAIT_TXRX();
 8013c82:	f7f8 ff75 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
    length |= EHIF_SPI_RX();
 8013c86:	f7f8 ff75 	bl	800cb74 <EHIF_SPI_RX>
 8013c8a:	4328      	orrs	r0, r5

    // Constrain length
    if (length > *pVarLength) {
 8013c8c:	8835      	ldrh	r5, [r6, #0]
    EHIF_SPI_TX(0xA0);
    EHIF_SPI_WAIT_TXRX();
    length = EHIF_SPI_RX() << 8;
    EHIF_SPI_TX(0x00);
    EHIF_SPI_WAIT_TXRX();
    length |= EHIF_SPI_RX();
 8013c8e:	b280      	uxth	r0, r0
 8013c90:	42a8      	cmp	r0, r5
 8013c92:	bf28      	it	cs
 8013c94:	4628      	movcs	r0, r5

    // Constrain length
    if (length > *pVarLength) {
        length = *pVarLength;
    }
    *pVarLength = length;
 8013c96:	8030      	strh	r0, [r6, #0]

    // Receive data
    ehifFieldRx(length, pData, pFieldSpec);
 8013c98:	4642      	mov	r2, r8
 8013c9a:	4639      	mov	r1, r7
 8013c9c:	f7ff ff1d 	bl	8013ada <ehifFieldRx>

    // End operation
    EHIF_SPI_END();
 8013ca0:	f7f8 ff72 	bl	800cb88 <EHIF_SPI_END>
    return statusWord;

} // ehifFieldReadbc
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013caa <ehifFieldCmdReq>:
 *           number of bytes specified by \a length is reached
 *
 * \return
 *     EHIF status word at start of CMD_REQ operation (see \c EHIF_EVT_XXXXX definitions)
 */
uint16_t ehifFieldCmdReq(uint8_t cmd, uint8_t length, const uint8_t* pParam, const int8_t* pFieldSpec) {
 8013caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cac:	4604      	mov	r4, r0
 8013cae:	461f      	mov	r7, r3
 8013cb0:	460d      	mov	r5, r1
 8013cb2:	4616      	mov	r6, r2

    // Begin operation
    EHIF_SPI_BEGIN();
 8013cb4:	f7f8 ff3c 	bl	800cb30 <EHIF_SPI_BEGIN>
    ehifWaitReady();
 8013cb8:	f7ff fd8a 	bl	80137d0 <ehifWaitReady>

    // Send type/command code/parameter length, receive status word
    uint16_t statusWord;
    EHIF_SPI_TX(0xC0 | cmd);
 8013cbc:	f044 00c0 	orr.w	r0, r4, #192	; 0xc0
 8013cc0:	f7f8 ff4c 	bl	800cb5c <EHIF_SPI_TX>
    EHIF_SPI_WAIT_TXRX();
 8013cc4:	f7f8 ff54 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
    statusWord = EHIF_SPI_RX() << 8;
 8013cc8:	f7f8 ff54 	bl	800cb74 <EHIF_SPI_RX>
 8013ccc:	0200      	lsls	r0, r0, #8
 8013cce:	b284      	uxth	r4, r0
    EHIF_SPI_TX(length & 0xFF);
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	f7f8 ff43 	bl	800cb5c <EHIF_SPI_TX>
    EHIF_SPI_WAIT_TXRX();
 8013cd6:	f7f8 ff4b 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>
    statusWord |= EHIF_SPI_RX();
 8013cda:	f7f8 ff4b 	bl	800cb74 <EHIF_SPI_RX>
 8013cde:	4320      	orrs	r0, r4

    // Send parameters
    ehifFieldTx(length, pParam, pFieldSpec);
 8013ce0:	463a      	mov	r2, r7
 8013ce2:	4631      	mov	r1, r6
    EHIF_SPI_TX(0xC0 | cmd);
    EHIF_SPI_WAIT_TXRX();
    statusWord = EHIF_SPI_RX() << 8;
    EHIF_SPI_TX(length & 0xFF);
    EHIF_SPI_WAIT_TXRX();
    statusWord |= EHIF_SPI_RX();
 8013ce4:	b284      	uxth	r4, r0

    // Send parameters
    ehifFieldTx(length, pParam, pFieldSpec);
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	f7ff fea4 	bl	8013a34 <ehifFieldTx>
    EHIF_SPI_WAIT_TXRX();
 8013cec:	f7f8 ff40 	bl	800cb70 <EHIF_SPI_WAIT_TXRX>

    // End operation
    EHIF_SPI_END();
 8013cf0:	f7f8 ff4a 	bl	800cb88 <EHIF_SPI_END>
    return statusWord;

} // ehifFieldCmdReq
 8013cf4:	4620      	mov	r0, r4
 8013cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013cf8 <mapFreq>:
  return 1;
}

static audioRate_t mapFreq(int freq)
{
  switch (freq)
 8013cf8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8013cfc:	4298      	cmp	r0, r3
 8013cfe:	d021      	beq.n	8013d44 <mapFreq+0x4c>
 8013d00:	dc0b      	bgt.n	8013d1a <mapFreq+0x22>
 8013d02:	f649 4340 	movw	r3, #40000	; 0x9c40
 8013d06:	4298      	cmp	r0, r3
 8013d08:	d018      	beq.n	8013d3c <mapFreq+0x44>
 8013d0a:	f64a 4344 	movw	r3, #44100	; 0xac44
 8013d0e:	4298      	cmp	r0, r3
 8013d10:	d016      	beq.n	8013d40 <mapFreq+0x48>
 8013d12:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 8013d16:	d11b      	bne.n	8013d50 <mapFreq+0x58>
 8013d18:	e01c      	b.n	8013d54 <mapFreq+0x5c>
 8013d1a:	4b0f      	ldr	r3, [pc, #60]	; (8013d58 <mapFreq+0x60>)
 8013d1c:	4298      	cmp	r0, r3
 8013d1e:	d013      	beq.n	8013d48 <mapFreq+0x50>
 8013d20:	dc04      	bgt.n	8013d2c <mapFreq+0x34>
 8013d22:	4b0e      	ldr	r3, [pc, #56]	; (8013d5c <mapFreq+0x64>)
 8013d24:	4298      	cmp	r0, r3
 8013d26:	d113      	bne.n	8013d50 <mapFreq+0x58>
    case  44100:
      return _44_kHz;
    case  48000:
      return _48_kHz;
    case  88200:
      return _88_kHz;
 8013d28:	2004      	movs	r0, #4
 8013d2a:	4770      	bx	lr
  return 1;
}

static audioRate_t mapFreq(int freq)
{
  switch (freq)
 8013d2c:	4b0c      	ldr	r3, [pc, #48]	; (8013d60 <mapFreq+0x68>)
 8013d2e:	4298      	cmp	r0, r3
 8013d30:	d00c      	beq.n	8013d4c <mapFreq+0x54>
 8013d32:	4b0c      	ldr	r3, [pc, #48]	; (8013d64 <mapFreq+0x6c>)
 8013d34:	4298      	cmp	r0, r3
 8013d36:	d10b      	bne.n	8013d50 <mapFreq+0x58>
    case  96000:
      return _96_kHz;
    case 176400:
      return _176_kHz;
    case 192000:
      return _192_kHz;
 8013d38:	2007      	movs	r0, #7
 8013d3a:	4770      	bx	lr
  switch (freq)
    {
    case  32000:
      return _32_kHz;
    case  40000:
      return _40_kHz;
 8013d3c:	2001      	movs	r0, #1
 8013d3e:	4770      	bx	lr
    case  44100:
      return _44_kHz;
 8013d40:	2002      	movs	r0, #2
 8013d42:	4770      	bx	lr
    case  48000:
      return _48_kHz;
 8013d44:	2003      	movs	r0, #3
 8013d46:	4770      	bx	lr
    case  88200:
      return _88_kHz;
    case  96000:
      return _96_kHz;
 8013d48:	2005      	movs	r0, #5
 8013d4a:	4770      	bx	lr
    case 176400:
      return _176_kHz;
 8013d4c:	2006      	movs	r0, #6
 8013d4e:	4770      	bx	lr
    case 192000:
      return _192_kHz;
    }
  return _EXTERNAL;
 8013d50:	2008      	movs	r0, #8
 8013d52:	4770      	bx	lr
static audioRate_t mapFreq(int freq)
{
  switch (freq)
    {
    case  32000:
      return _32_kHz;
 8013d54:	2000      	movs	r0, #0
      return _176_kHz;
    case 192000:
      return _192_kHz;
    }
  return _EXTERNAL;
}
 8013d56:	4770      	bx	lr
 8013d58:	00017700 	.word	0x00017700
 8013d5c:	00015888 	.word	0x00015888
 8013d60:	0002b110 	.word	0x0002b110
 8013d64:	0002ee00 	.word	0x0002ee00

08013d68 <audioDmaGetNextBuf>:
  DPRINTF(CLEAR_LINE"\n");
}


static void audioDmaGetNextBuf(saiBlocks_t block)
{
 8013d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  internalDmaStruct_t *dmaVars = &(internalDmaVars[block]);
  uint32_t currMem = DMA_GetCurrentMemoryTarget(dmaVars->hwDma->DMAy_Streamx);
 8013d6c:	4e19      	ldr	r6, [pc, #100]	; (8013dd4 <audioDmaGetNextBuf+0x6c>)
 8013d6e:	0104      	lsls	r4, r0, #4
 8013d70:	1935      	adds	r5, r6, r4
 8013d72:	68ab      	ldr	r3, [r5, #8]
 8013d74:	6818      	ldr	r0, [r3, #0]
 8013d76:	f7fe fa43 	bl	8012200 <DMA_GetCurrentMemoryTarget>
 8013d7a:	68ab      	ldr	r3, [r5, #8]
  bBuffer_t *oldBuffer;
  uint32_t DMA_Memory;
  if (currMem)
    {
      oldBuffer = bBufferFromData((uint8_t *)dmaVars->hwDma->DMAy_Streamx->M0AR);
 8013d7c:	681b      	ldr	r3, [r3, #0]
{
  internalDmaStruct_t *dmaVars = &(internalDmaVars[block]);
  uint32_t currMem = DMA_GetCurrentMemoryTarget(dmaVars->hwDma->DMAy_Streamx);
  bBuffer_t *oldBuffer;
  uint32_t DMA_Memory;
  if (currMem)
 8013d7e:	b118      	cbz	r0, 8013d88 <audioDmaGetNextBuf+0x20>
    {
      oldBuffer = bBufferFromData((uint8_t *)dmaVars->hwDma->DMAy_Streamx->M0AR);
 8013d80:	68d8      	ldr	r0, [r3, #12]
      DMA_Memory = DMA_Memory_0;
 8013d82:	2700      	movs	r7, #0
  uint32_t currMem = DMA_GetCurrentMemoryTarget(dmaVars->hwDma->DMAy_Streamx);
  bBuffer_t *oldBuffer;
  uint32_t DMA_Memory;
  if (currMem)
    {
      oldBuffer = bBufferFromData((uint8_t *)dmaVars->hwDma->DMAy_Streamx->M0AR);
 8013d84:	3814      	subs	r0, #20
 8013d86:	e003      	b.n	8013d90 <audioDmaGetNextBuf+0x28>
      DMA_Memory = DMA_Memory_0;
    }
  else
    {
      oldBuffer = bBufferFromData((uint8_t *)dmaVars->hwDma->DMAy_Streamx->M1AR);
 8013d88:	6918      	ldr	r0, [r3, #16]
      DMA_Memory = DMA_Memory_1;
 8013d8a:	f44f 2700 	mov.w	r7, #524288	; 0x80000
      oldBuffer = bBufferFromData((uint8_t *)dmaVars->hwDma->DMAy_Streamx->M0AR);
      DMA_Memory = DMA_Memory_0;
    }
  else
    {
      oldBuffer = bBufferFromData((uint8_t *)dmaVars->hwDma->DMAy_Streamx->M1AR);
 8013d8e:	3814      	subs	r0, #20
      DMA_Memory = DMA_Memory_1;
    }
  bFree(oldBuffer);
 8013d90:	f001 fb4e 	bl	8015430 <bFree>
  bBuffer_t *newBuffer = bDequeue(dmaVars->queue);
 8013d94:	5930      	ldr	r0, [r6, r4]
 8013d96:	f001 f8ad 	bl	8014ef4 <bDequeue>
 8013d9a:	eb06 0804 	add.w	r8, r6, r4
  if (!newBuffer)
 8013d9e:	4605      	mov	r5, r0
 8013da0:	b920      	cbnz	r0, 8013dac <audioDmaGetNextBuf+0x44>
    {
      //No data. Transmit silence
      newBuffer = dmaVars->silenceBuf;
 8013da2:	f8d8 5004 	ldr.w	r5, [r8, #4]
      bRef(dmaVars->silenceBuf);
 8013da6:	4628      	mov	r0, r5
 8013da8:	f001 fc80 	bl	80156ac <bRef>
    }
  memcpy(SAIBuf[block], bDataFromBuffer(newBuffer), sizeof(SAIBuf[0]));
 8013dac:	4b0a      	ldr	r3, [pc, #40]	; (8013dd8 <audioDmaGetNextBuf+0x70>)
 8013dae:	f105 0114 	add.w	r1, r5, #20
 8013db2:	460a      	mov	r2, r1
 8013db4:	4423      	add	r3, r4
 8013db6:	3524      	adds	r5, #36	; 0x24
 8013db8:	f852 0b04 	ldr.w	r0, [r2], #4
 8013dbc:	f843 0b04 	str.w	r0, [r3], #4
 8013dc0:	42aa      	cmp	r2, r5
 8013dc2:	d1f9      	bne.n	8013db8 <audioDmaGetNextBuf+0x50>
  DMA_MemoryTargetConfig(dmaVars->hwDma->DMAy_Streamx,
 8013dc4:	4434      	add	r4, r6
 8013dc6:	463a      	mov	r2, r7
 8013dc8:	68a3      	ldr	r3, [r4, #8]
                         (uint32_t)bDataFromBuffer(newBuffer), DMA_Memory);
}
 8013dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      //No data. Transmit silence
      newBuffer = dmaVars->silenceBuf;
      bRef(dmaVars->silenceBuf);
    }
  memcpy(SAIBuf[block], bDataFromBuffer(newBuffer), sizeof(SAIBuf[0]));
  DMA_MemoryTargetConfig(dmaVars->hwDma->DMAy_Streamx,
 8013dce:	6818      	ldr	r0, [r3, #0]
 8013dd0:	f7fe b9ca 	b.w	8012168 <DMA_MemoryTargetConfig>
 8013dd4:	100023a0 	.word	0x100023a0
 8013dd8:	10002d18 	.word	0x10002d18

08013ddc <audioDmaIRQHandler>:
                         (uint32_t)bDataFromBuffer(newBuffer), DMA_Memory);
}

static void audioDmaIRQHandler(saiBlocks_t block)
{
 8013ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  internalDmaStruct_t *dmaVars = &(internalDmaVars[block]);
  if ( DMA_GetITStatus(dmaVars->hwDma->DMAy_Streamx, dmaVars->hwDma->dmaItTCIF) )
 8013dde:	4c23      	ldr	r4, [pc, #140]	; (8013e6c <audioDmaIRQHandler+0x90>)
 8013de0:	0107      	lsls	r7, r0, #4
 8013de2:	19e5      	adds	r5, r4, r7
  DMA_MemoryTargetConfig(dmaVars->hwDma->DMAy_Streamx,
                         (uint32_t)bDataFromBuffer(newBuffer), DMA_Memory);
}

static void audioDmaIRQHandler(saiBlocks_t block)
{
 8013de4:	4606      	mov	r6, r0
  internalDmaStruct_t *dmaVars = &(internalDmaVars[block]);
  if ( DMA_GetITStatus(dmaVars->hwDma->DMAy_Streamx, dmaVars->hwDma->dmaItTCIF) )
 8013de6:	68ab      	ldr	r3, [r5, #8]
 8013de8:	f8d3 100d 	ldr.w	r1, [r3, #13]
 8013dec:	6818      	ldr	r0, [r3, #0]
 8013dee:	f7fe fc5b 	bl	80126a8 <DMA_GetITStatus>
 8013df2:	b140      	cbz	r0, 8013e06 <audioDmaIRQHandler+0x2a>
    {
      audioDmaGetNextBuf(block);
 8013df4:	4630      	mov	r0, r6
 8013df6:	f7ff ffb7 	bl	8013d68 <audioDmaGetNextBuf>

      //clear interrupt:
      DMA_ClearFlag(dmaVars->hwDma->DMAy_Streamx, dmaVars->hwDma->dmaFlagTCIF);
 8013dfa:	68ab      	ldr	r3, [r5, #8]
 8013dfc:	f8d3 101d 	ldr.w	r1, [r3, #29]
 8013e00:	6818      	ldr	r0, [r3, #0]
 8013e02:	f7fe fb77 	bl	80124f4 <DMA_ClearFlag>

    }
  if ( DMA_GetITStatus(dmaVars->hwDma->DMAy_Streamx, dmaVars->hwDma->dmaItTEIF) )
 8013e06:	19e5      	adds	r5, r4, r7
 8013e08:	68ab      	ldr	r3, [r5, #8]
 8013e0a:	f8d3 1011 	ldr.w	r1, [r3, #17]
 8013e0e:	6818      	ldr	r0, [r3, #0]
 8013e10:	f7fe fc4a 	bl	80126a8 <DMA_GetITStatus>
 8013e14:	b988      	cbnz	r0, 8013e3a <audioDmaIRQHandler+0x5e>
    {
      SAI_Cmd(dmaVars->SAI_Block_x_cooperation, DISABLE);
      SAI_FlushFIFO(dmaVars->SAI_Block_x_cooperation);
      massert(0);
    }
  if ( DMA_GetITStatus(dmaVars->hwDma->DMAy_Streamx, dmaVars->hwDma->dmaItFEIF) )
 8013e16:	443c      	add	r4, r7
 8013e18:	68a3      	ldr	r3, [r4, #8]
 8013e1a:	f8d3 1015 	ldr.w	r1, [r3, #21]
 8013e1e:	6818      	ldr	r0, [r3, #0]
 8013e20:	f7fe fc42 	bl	80126a8 <DMA_GetITStatus>
 8013e24:	b300      	cbz	r0, 8013e68 <audioDmaIRQHandler+0x8c>
    {
      massert(0);
 8013e26:	4b12      	ldr	r3, [pc, #72]	; (8013e70 <audioDmaIRQHandler+0x94>)
 8013e28:	4912      	ldr	r1, [pc, #72]	; (8013e74 <audioDmaIRQHandler+0x98>)
 8013e2a:	4813      	ldr	r0, [pc, #76]	; (8013e78 <audioDmaIRQHandler+0x9c>)
 8013e2c:	f240 1255 	movw	r2, #341	; 0x155
 8013e30:	f7f4 fefa 	bl	8008c28 <xprintf>
 8013e34:	2301      	movs	r3, #1
 8013e36:	9301      	str	r3, [sp, #4]
 8013e38:	e013      	b.n	8013e62 <audioDmaIRQHandler+0x86>
      DMA_ClearFlag(dmaVars->hwDma->DMAy_Streamx, dmaVars->hwDma->dmaFlagTCIF);

    }
  if ( DMA_GetITStatus(dmaVars->hwDma->DMAy_Streamx, dmaVars->hwDma->dmaItTEIF) )
    {
      SAI_Cmd(dmaVars->SAI_Block_x_cooperation, DISABLE);
 8013e3a:	2100      	movs	r1, #0
 8013e3c:	68e8      	ldr	r0, [r5, #12]
 8013e3e:	f7fe ffad 	bl	8012d9c <SAI_Cmd>
      SAI_FlushFIFO(dmaVars->SAI_Block_x_cooperation);
 8013e42:	68e8      	ldr	r0, [r5, #12]
 8013e44:	f7fe ffd0 	bl	8012de8 <SAI_FlushFIFO>
      massert(0);
 8013e48:	4b09      	ldr	r3, [pc, #36]	; (8013e70 <audioDmaIRQHandler+0x94>)
 8013e4a:	490a      	ldr	r1, [pc, #40]	; (8013e74 <audioDmaIRQHandler+0x98>)
 8013e4c:	480a      	ldr	r0, [pc, #40]	; (8013e78 <audioDmaIRQHandler+0x9c>)
 8013e4e:	f240 1251 	movw	r2, #337	; 0x151
 8013e52:	f7f4 fee9 	bl	8008c28 <xprintf>
 8013e56:	2301      	movs	r3, #1
 8013e58:	9300      	str	r3, [sp, #0]
 8013e5a:	9b00      	ldr	r3, [sp, #0]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d1fc      	bne.n	8013e5a <audioDmaIRQHandler+0x7e>
 8013e60:	e7d9      	b.n	8013e16 <audioDmaIRQHandler+0x3a>
    }
  if ( DMA_GetITStatus(dmaVars->hwDma->DMAy_Streamx, dmaVars->hwDma->dmaItFEIF) )
    {
      massert(0);
 8013e62:	9b01      	ldr	r3, [sp, #4]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d1fc      	bne.n	8013e62 <audioDmaIRQHandler+0x86>
    }
}
 8013e68:	b003      	add	sp, #12
 8013e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e6c:	100023a0 	.word	0x100023a0
 8013e70:	0801d8c0 	.word	0x0801d8c0
 8013e74:	0803ea64 	.word	0x0803ea64
 8013e78:	0801d5dd 	.word	0x0801d5dd

08013e7c <BlockB_IRQHandler>:
  audioDmaIRQHandler(BLOCK_A);
}

static void BlockB_IRQHandler(void)
{
  audioDmaIRQHandler(BLOCK_B);
 8013e7c:	2001      	movs	r0, #1
 8013e7e:	f7ff bfad 	b.w	8013ddc <audioDmaIRQHandler>

08013e82 <BlockA_IRQHandler>:
    }
}

static void BlockA_IRQHandler(void)
{
  audioDmaIRQHandler(BLOCK_A);
 8013e82:	2000      	movs	r0, #0
 8013e84:	f7ff bfaa 	b.w	8013ddc <audioDmaIRQHandler>

08013e88 <setupAudioClocks>:

static void setupAudioClocks(SAI_Block_TypeDef *SAI_Block_x, saiClkSource_t saiClkSrc, audioRate_t clkFreq, uint8_t div)
{
  uint32_t timeout = 100000;
  int cr1Div = 0;
  switch (saiClkSrc)
 8013e88:	2901      	cmp	r1, #1
{
  audioDmaIRQHandler(BLOCK_B);
}

static void setupAudioClocks(SAI_Block_TypeDef *SAI_Block_x, saiClkSource_t saiClkSrc, audioRate_t clkFreq, uint8_t div)
{
 8013e8a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013e8c:	4605      	mov	r5, r0
 8013e8e:	461c      	mov	r4, r3
  uint32_t timeout = 100000;
  int cr1Div = 0;
  switch (saiClkSrc)
 8013e90:	d04d      	beq.n	8013f2e <setupAudioClocks+0xa6>
 8013e92:	d30d      	bcc.n	8013eb0 <setupAudioClocks+0x28>
 8013e94:	2902      	cmp	r1, #2
 8013e96:	f040 8099 	bne.w	8013fcc <setupAudioClocks+0x144>
    {
    case EXTERNAL:
      configureCKINpin();
 8013e9a:	f7fa fb41 	bl	800e520 <configureCKINpin>
      switch(div)
 8013e9e:	2c02      	cmp	r4, #2
 8013ea0:	d004      	beq.n	8013eac <setupAudioClocks+0x24>
}

static void setupAudioClocks(SAI_Block_TypeDef *SAI_Block_x, saiClkSource_t saiClkSrc, audioRate_t clkFreq, uint8_t div)
{
  uint32_t timeout = 100000;
  int cr1Div = 0;
 8013ea2:	2c04      	cmp	r4, #4
 8013ea4:	bf0c      	ite	eq
 8013ea6:	2302      	moveq	r3, #2
 8013ea8:	2300      	movne	r3, #0
 8013eaa:	e090      	b.n	8013fce <setupAudioClocks+0x146>
        {
        case 1:
          cr1Div = 0;
          break;
        case 2:
          cr1Div = 1;
 8013eac:	2301      	movs	r3, #1
 8013eae:	e08e      	b.n	8013fce <setupAudioClocks+0x146>
 8013eb0:	2a07      	cmp	r2, #7
 8013eb2:	bf9b      	ittet	ls
 8013eb4:	4b4a      	ldrls	r3, [pc, #296]	; (8013fe0 <setupAudioClocks+0x158>)
 8013eb6:	eb03 0282 	addls.w	r2, r3, r2, lsl #2

static void setupAudioClocks(SAI_Block_TypeDef *SAI_Block_x, saiClkSource_t saiClkSrc, audioRate_t clkFreq, uint8_t div)
{
  uint32_t timeout = 100000;
  int cr1Div = 0;
  switch (saiClkSrc)
 8013eba:	2000      	movhi	r0, #0
 8013ebc:	6950      	ldrls	r0, [r2, #20]
          cr1Div = 2;
          break;
        }
      break;
    case SAI_PLL:
      clkFreq = mapFreq(unmapFreq(clkFreq)/div);
 8013ebe:	fb90 f0f4 	sdiv	r0, r0, r4
 8013ec2:	f7ff ff19 	bl	8013cf8 <mapFreq>
      massert(clkFreq == _44_kHz || clkFreq == _48_kHz || clkFreq == _88_kHz || clkFreq == _96_kHz);
 8013ec6:	1e83      	subs	r3, r0, #2
 8013ec8:	b2db      	uxtb	r3, r3
 8013eca:	2b03      	cmp	r3, #3
          cr1Div = 2;
          break;
        }
      break;
    case SAI_PLL:
      clkFreq = mapFreq(unmapFreq(clkFreq)/div);
 8013ecc:	4604      	mov	r4, r0
      massert(clkFreq == _44_kHz || clkFreq == _48_kHz || clkFreq == _88_kHz || clkFreq == _96_kHz);
 8013ece:	d818      	bhi.n	8013f02 <setupAudioClocks+0x7a>
      RCC_PLLSAICmd(DISABLE);
      RCC_PLLSAIConfig(DECODE_N(cfg.SAIclk[clkFreq]), DECODE_Q(cfg.SAIclk[clkFreq]), 7);
 8013ed0:	3416      	adds	r4, #22
 8013ed2:	4e44      	ldr	r6, [pc, #272]	; (8013fe4 <setupAudioClocks+0x15c>)
        }
      break;
    case SAI_PLL:
      clkFreq = mapFreq(unmapFreq(clkFreq)/div);
      massert(clkFreq == _44_kHz || clkFreq == _48_kHz || clkFreq == _88_kHz || clkFreq == _96_kHz);
      RCC_PLLSAICmd(DISABLE);
 8013ed4:	2000      	movs	r0, #0
 8013ed6:	f7fc fdf1 	bl	8010abc <RCC_PLLSAICmd>
      RCC_PLLSAIConfig(DECODE_N(cfg.SAIclk[clkFreq]), DECODE_Q(cfg.SAIclk[clkFreq]), 7);
 8013eda:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013ede:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8013ee2:	2207      	movs	r2, #7
 8013ee4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013ee8:	0c00      	lsrs	r0, r0, #16
 8013eea:	f7fc fdc7 	bl	8010a7c <RCC_PLLSAIConfig>
      RCC_SAIPLLSAIClkDivConfig(DECODE_D(cfg.SAIclk[clkFreq]));
 8013eee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  audioDmaIRQHandler(BLOCK_B);
}

static void setupAudioClocks(SAI_Block_TypeDef *SAI_Block_x, saiClkSource_t saiClkSrc, audioRate_t clkFreq, uint8_t div)
{
  uint32_t timeout = 100000;
 8013ef2:	4c3d      	ldr	r4, [pc, #244]	; (8013fe8 <setupAudioClocks+0x160>)
    case SAI_PLL:
      clkFreq = mapFreq(unmapFreq(clkFreq)/div);
      massert(clkFreq == _44_kHz || clkFreq == _48_kHz || clkFreq == _88_kHz || clkFreq == _96_kHz);
      RCC_PLLSAICmd(DISABLE);
      RCC_PLLSAIConfig(DECODE_N(cfg.SAIclk[clkFreq]), DECODE_Q(cfg.SAIclk[clkFreq]), 7);
      RCC_SAIPLLSAIClkDivConfig(DECODE_D(cfg.SAIclk[clkFreq]));
 8013ef4:	b2c0      	uxtb	r0, r0
 8013ef6:	f7fc fe59 	bl	8010bac <RCC_SAIPLLSAIClkDivConfig>
      RCC_PLLSAICmd(ENABLE);
 8013efa:	2001      	movs	r0, #1
 8013efc:	f7fc fdde 	bl	8010abc <RCC_PLLSAICmd>
      while ( RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET && timeout-- );
 8013f00:	e00f      	b.n	8013f22 <setupAudioClocks+0x9a>
          break;
        }
      break;
    case SAI_PLL:
      clkFreq = mapFreq(unmapFreq(clkFreq)/div);
      massert(clkFreq == _44_kHz || clkFreq == _48_kHz || clkFreq == _88_kHz || clkFreq == _96_kHz);
 8013f02:	4b3a      	ldr	r3, [pc, #232]	; (8013fec <setupAudioClocks+0x164>)
 8013f04:	493a      	ldr	r1, [pc, #232]	; (8013ff0 <setupAudioClocks+0x168>)
 8013f06:	483b      	ldr	r0, [pc, #236]	; (8013ff4 <setupAudioClocks+0x16c>)
 8013f08:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 8013f0c:	f7f4 fe8c 	bl	8008c28 <xprintf>
 8013f10:	2301      	movs	r3, #1
 8013f12:	9301      	str	r3, [sp, #4]
 8013f14:	9b01      	ldr	r3, [sp, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d1fc      	bne.n	8013f14 <setupAudioClocks+0x8c>
 8013f1a:	e7d9      	b.n	8013ed0 <setupAudioClocks+0x48>
      RCC_PLLSAICmd(DISABLE);
      RCC_PLLSAIConfig(DECODE_N(cfg.SAIclk[clkFreq]), DECODE_Q(cfg.SAIclk[clkFreq]), 7);
      RCC_SAIPLLSAIClkDivConfig(DECODE_D(cfg.SAIclk[clkFreq]));
      RCC_PLLSAICmd(ENABLE);
      while ( RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET && timeout-- );
 8013f1c:	f114 34ff 	adds.w	r4, r4, #4294967295
 8013f20:	d354      	bcc.n	8013fcc <setupAudioClocks+0x144>
 8013f22:	203d      	movs	r0, #61	; 0x3d
 8013f24:	f7fc ff42 	bl	8010dac <RCC_GetFlagStatus>
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	d0f7      	beq.n	8013f1c <setupAudioClocks+0x94>
 8013f2c:	e03d      	b.n	8013faa <setupAudioClocks+0x122>
 8013f2e:	2a07      	cmp	r2, #7
 8013f30:	bf9b      	ittet	ls
 8013f32:	4b2b      	ldrls	r3, [pc, #172]	; (8013fe0 <setupAudioClocks+0x158>)
 8013f34:	eb03 0282 	addls.w	r2, r3, r2, lsl #2

static void setupAudioClocks(SAI_Block_TypeDef *SAI_Block_x, saiClkSource_t saiClkSrc, audioRate_t clkFreq, uint8_t div)
{
  uint32_t timeout = 100000;
  int cr1Div = 0;
  switch (saiClkSrc)
 8013f38:	2000      	movhi	r0, #0
 8013f3a:	6950      	ldrls	r0, [r2, #20]
      RCC_SAIPLLSAIClkDivConfig(DECODE_D(cfg.SAIclk[clkFreq]));
      RCC_PLLSAICmd(ENABLE);
      while ( RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET && timeout-- );
      break;
    case I2S_PLL:
      clkFreq = mapFreq(unmapFreq(clkFreq)/div);
 8013f3c:	fb90 f0f4 	sdiv	r0, r0, r4
 8013f40:	f7ff feda 	bl	8013cf8 <mapFreq>
      massert(clkFreq == _44_kHz || clkFreq == _48_kHz || clkFreq == _88_kHz || clkFreq == _96_kHz);
 8013f44:	1e83      	subs	r3, r0, #2
 8013f46:	b2db      	uxtb	r3, r3
 8013f48:	2b03      	cmp	r3, #3
      RCC_SAIPLLSAIClkDivConfig(DECODE_D(cfg.SAIclk[clkFreq]));
      RCC_PLLSAICmd(ENABLE);
      while ( RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET && timeout-- );
      break;
    case I2S_PLL:
      clkFreq = mapFreq(unmapFreq(clkFreq)/div);
 8013f4a:	4604      	mov	r4, r0
      massert(clkFreq == _44_kHz || clkFreq == _48_kHz || clkFreq == _88_kHz || clkFreq == _96_kHz);
 8013f4c:	d818      	bhi.n	8013f80 <setupAudioClocks+0xf8>
      RCC_PLLI2SCmd(DISABLE);
      RCC_PLLI2SConfig(DECODE_N(cfg.SAIclk[clkFreq]), DECODE_Q(cfg.SAIclk[clkFreq]), 7);
 8013f4e:	3416      	adds	r4, #22
 8013f50:	4e24      	ldr	r6, [pc, #144]	; (8013fe4 <setupAudioClocks+0x15c>)
      while ( RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET && timeout-- );
      break;
    case I2S_PLL:
      clkFreq = mapFreq(unmapFreq(clkFreq)/div);
      massert(clkFreq == _44_kHz || clkFreq == _48_kHz || clkFreq == _88_kHz || clkFreq == _96_kHz);
      RCC_PLLI2SCmd(DISABLE);
 8013f52:	2000      	movs	r0, #0
 8013f54:	f7fc fd82 	bl	8010a5c <RCC_PLLI2SCmd>
      RCC_PLLI2SConfig(DECODE_N(cfg.SAIclk[clkFreq]), DECODE_Q(cfg.SAIclk[clkFreq]), 7);
 8013f58:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013f5c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8013f60:	2207      	movs	r2, #7
 8013f62:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013f66:	0c00      	lsrs	r0, r0, #16
 8013f68:	f7fc fd50 	bl	8010a0c <RCC_PLLI2SConfig>
      RCC_SAIPLLI2SClkDivConfig(DECODE_D(cfg.SAIclk[clkFreq]));
 8013f6c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  audioDmaIRQHandler(BLOCK_B);
}

static void setupAudioClocks(SAI_Block_TypeDef *SAI_Block_x, saiClkSource_t saiClkSrc, audioRate_t clkFreq, uint8_t div)
{
  uint32_t timeout = 100000;
 8013f70:	4c1d      	ldr	r4, [pc, #116]	; (8013fe8 <setupAudioClocks+0x160>)
    case I2S_PLL:
      clkFreq = mapFreq(unmapFreq(clkFreq)/div);
      massert(clkFreq == _44_kHz || clkFreq == _48_kHz || clkFreq == _88_kHz || clkFreq == _96_kHz);
      RCC_PLLI2SCmd(DISABLE);
      RCC_PLLI2SConfig(DECODE_N(cfg.SAIclk[clkFreq]), DECODE_Q(cfg.SAIclk[clkFreq]), 7);
      RCC_SAIPLLI2SClkDivConfig(DECODE_D(cfg.SAIclk[clkFreq]));
 8013f72:	b2c0      	uxtb	r0, r0
 8013f74:	f7fc fe04 	bl	8010b80 <RCC_SAIPLLI2SClkDivConfig>
      RCC_PLLI2SCmd(ENABLE);
 8013f78:	2001      	movs	r0, #1
 8013f7a:	f7fc fd6f 	bl	8010a5c <RCC_PLLI2SCmd>
      while ( RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY) == RESET && timeout-- );
 8013f7e:	e00f      	b.n	8013fa0 <setupAudioClocks+0x118>
      RCC_PLLSAICmd(ENABLE);
      while ( RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET && timeout-- );
      break;
    case I2S_PLL:
      clkFreq = mapFreq(unmapFreq(clkFreq)/div);
      massert(clkFreq == _44_kHz || clkFreq == _48_kHz || clkFreq == _88_kHz || clkFreq == _96_kHz);
 8013f80:	4b1a      	ldr	r3, [pc, #104]	; (8013fec <setupAudioClocks+0x164>)
 8013f82:	491b      	ldr	r1, [pc, #108]	; (8013ff0 <setupAudioClocks+0x168>)
 8013f84:	481b      	ldr	r0, [pc, #108]	; (8013ff4 <setupAudioClocks+0x16c>)
 8013f86:	f240 1283 	movw	r2, #387	; 0x183
 8013f8a:	f7f4 fe4d 	bl	8008c28 <xprintf>
 8013f8e:	2301      	movs	r3, #1
 8013f90:	9302      	str	r3, [sp, #8]
 8013f92:	9b02      	ldr	r3, [sp, #8]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d1fc      	bne.n	8013f92 <setupAudioClocks+0x10a>
 8013f98:	e7d9      	b.n	8013f4e <setupAudioClocks+0xc6>
      RCC_PLLI2SCmd(DISABLE);
      RCC_PLLI2SConfig(DECODE_N(cfg.SAIclk[clkFreq]), DECODE_Q(cfg.SAIclk[clkFreq]), 7);
      RCC_SAIPLLI2SClkDivConfig(DECODE_D(cfg.SAIclk[clkFreq]));
      RCC_PLLI2SCmd(ENABLE);
      while ( RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY) == RESET && timeout-- );
 8013f9a:	f114 34ff 	adds.w	r4, r4, #4294967295
 8013f9e:	d315      	bcc.n	8013fcc <setupAudioClocks+0x144>
 8013fa0:	203b      	movs	r0, #59	; 0x3b
 8013fa2:	f7fc ff03 	bl	8010dac <RCC_GetFlagStatus>
 8013fa6:	2800      	cmp	r0, #0
 8013fa8:	d0f7      	beq.n	8013f9a <setupAudioClocks+0x112>

      break;

    }

  if (!timeout)
 8013faa:	b97c      	cbnz	r4, 8013fcc <setupAudioClocks+0x144>
    {
      xprintf("%s timeout\n", __FUNCTION__);
 8013fac:	4910      	ldr	r1, [pc, #64]	; (8013ff0 <setupAudioClocks+0x168>)
 8013fae:	4812      	ldr	r0, [pc, #72]	; (8013ff8 <setupAudioClocks+0x170>)
 8013fb0:	f7f4 fe3a 	bl	8008c28 <xprintf>
      massert(0);
 8013fb4:	4b11      	ldr	r3, [pc, #68]	; (8013ffc <setupAudioClocks+0x174>)
 8013fb6:	490e      	ldr	r1, [pc, #56]	; (8013ff0 <setupAudioClocks+0x168>)
 8013fb8:	480e      	ldr	r0, [pc, #56]	; (8013ff4 <setupAudioClocks+0x16c>)
 8013fba:	f240 1291 	movw	r2, #401	; 0x191
 8013fbe:	f7f4 fe33 	bl	8008c28 <xprintf>
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	9303      	str	r3, [sp, #12]
 8013fc6:	9b03      	ldr	r3, [sp, #12]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d1fc      	bne.n	8013fc6 <setupAudioClocks+0x13e>
}

static void setupAudioClocks(SAI_Block_TypeDef *SAI_Block_x, saiClkSource_t saiClkSrc, audioRate_t clkFreq, uint8_t div)
{
  uint32_t timeout = 100000;
  int cr1Div = 0;
 8013fcc:	2300      	movs	r3, #0
      xprintf("%s timeout\n", __FUNCTION__);
      massert(0);
    }

  //Set clock divisor
  uint32_t cr1 = SAI_Block_x->CR1;
 8013fce:	682a      	ldr	r2, [r5, #0]
  cr1 &= ~(0xF<<20);
 8013fd0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  cr1 |= cr1Div<<20;
 8013fd4:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
  SAI_Block_x->CR1 = cr1;
 8013fd8:	602b      	str	r3, [r5, #0]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOC, &GPIO_InitStructure);

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
#endif
}
 8013fda:	b004      	add	sp, #16
 8013fdc:	bd70      	pop	{r4, r5, r6, pc}
 8013fde:	bf00      	nop
 8013fe0:	0803ea64 	.word	0x0803ea64
 8013fe4:	10001000 	.word	0x10001000
 8013fe8:	000186a0 	.word	0x000186a0
 8013fec:	0803ebf4 	.word	0x0803ebf4
 8013ff0:	0803ea98 	.word	0x0803ea98
 8013ff4:	0801d5dd 	.word	0x0801d5dd
 8013ff8:	0803ec49 	.word	0x0803ec49
 8013ffc:	0801d8c0 	.word	0x0801d8c0

08014000 <SAI_IRQHandler>:
  return 1;
}


static void SAI_IRQHandler(void)
{
 8014000:	b513      	push	{r0, r1, r4, lr}

  uint32_t status = SAI1_Block_A->SR;
 8014002:	4c12      	ldr	r4, [pc, #72]	; (801404c <SAI_IRQHandler+0x4c>)
 8014004:	6963      	ldr	r3, [r4, #20]
  static uint32_t cnt = 0;
  if ( status & SAI_IT_FREQ)
 8014006:	0719      	lsls	r1, r3, #28
 8014008:	d504      	bpl.n	8014014 <SAI_IRQHandler+0x14>
    {
      SAI1_Block_A->DR = cnt++;
 801400a:	4911      	ldr	r1, [pc, #68]	; (8014050 <SAI_IRQHandler+0x50>)
 801400c:	6a0a      	ldr	r2, [r1, #32]
 801400e:	1c50      	adds	r0, r2, #1
 8014010:	6208      	str	r0, [r1, #32]
 8014012:	61e2      	str	r2, [r4, #28]
    }
  if ( status & SAI_IT_OVRUDR)
 8014014:	07da      	lsls	r2, r3, #31
 8014016:	d507      	bpl.n	8014028 <SAI_IRQHandler+0x28>
    {
      SAI_FlushFIFO(SAI1_Block_A);
 8014018:	480c      	ldr	r0, [pc, #48]	; (801404c <SAI_IRQHandler+0x4c>)
 801401a:	f7fe fee5 	bl	8012de8 <SAI_FlushFIFO>
      //clear flag:
      SAI1_Block_A->CLRFR = SAI_FLAG_OVRUDR;
 801401e:	2301      	movs	r3, #1
 8014020:	61a3      	str	r3, [r4, #24]


      SAI1_Block_A->DR = 0x00;
 8014022:	2300      	movs	r3, #0
 8014024:	61e3      	str	r3, [r4, #28]
 8014026:	e000      	b.n	801402a <SAI_IRQHandler+0x2a>
    }
  if (status)
 8014028:	b113      	cbz	r3, 8014030 <SAI_IRQHandler+0x30>
    {
      taskENTER_CRITICAL();
 801402a:	f7f6 f9bf 	bl	800a3ac <vPortEnterCritical>
 801402e:	e7fe      	b.n	801402e <SAI_IRQHandler+0x2e>
      int s = 1;
      while (s);
    }
  massert(0);
 8014030:	4b08      	ldr	r3, [pc, #32]	; (8014054 <SAI_IRQHandler+0x54>)
 8014032:	4909      	ldr	r1, [pc, #36]	; (8014058 <SAI_IRQHandler+0x58>)
 8014034:	4809      	ldr	r0, [pc, #36]	; (801405c <SAI_IRQHandler+0x5c>)
 8014036:	22ff      	movs	r2, #255	; 0xff
 8014038:	f7f4 fdf6 	bl	8008c28 <xprintf>
 801403c:	2301      	movs	r3, #1
 801403e:	9301      	str	r3, [sp, #4]
 8014040:	9b01      	ldr	r3, [sp, #4]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d1fc      	bne.n	8014040 <SAI_IRQHandler+0x40>
}
 8014046:	b002      	add	sp, #8
 8014048:	bd10      	pop	{r4, pc}
 801404a:	bf00      	nop
 801404c:	40015804 	.word	0x40015804
 8014050:	10002d18 	.word	0x10002d18
 8014054:	0801d8c0 	.word	0x0801d8c0
 8014058:	0803eaa9 	.word	0x0803eaa9
 801405c:	0801d5dd 	.word	0x0801d5dd

08014060 <audioPlay.constprop.0>:
  config_DMA(SAI_Block_x, dmaConstSettings);

  return 1;
}

static int audioPlay(SAI_Block_TypeDef *SAI_Block_x, uint32_t pingAddr, uint32_t pongAddr, uint32_t bufferSizeTransfers)
 8014060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  saiBlocks_t currentBlock = getSaiBlockNum(SAI_Block_x) ;

  const constDMAvars_t *dmaConstSettings = &(dmaStreamConstSettings_sai[currentBlock]) ;

  /* Configure the buffers address and size */
  DMA_SetCurrDataCounter(dmaConstSettings->DMAy_Streamx, bufferSizeTransfers);
 8014062:	4b14      	ldr	r3, [pc, #80]	; (80140b4 <audioPlay.constprop.0+0x54>)
 8014064:	1ac3      	subs	r3, r0, r3
  config_DMA(SAI_Block_x, dmaConstSettings);

  return 1;
}

static int audioPlay(SAI_Block_TypeDef *SAI_Block_x, uint32_t pingAddr, uint32_t pongAddr, uint32_t bufferSizeTransfers)
 8014066:	4616      	mov	r6, r2
  saiBlocks_t currentBlock = getSaiBlockNum(SAI_Block_x) ;

  const constDMAvars_t *dmaConstSettings = &(dmaStreamConstSettings_sai[currentBlock]) ;

  /* Configure the buffers address and size */
  DMA_SetCurrDataCounter(dmaConstSettings->DMAy_Streamx, bufferSizeTransfers);
 8014068:	425a      	negs	r2, r3
 801406a:	415a      	adcs	r2, r3
 801406c:	4b12      	ldr	r3, [pc, #72]	; (80140b8 <audioPlay.constprop.0+0x58>)
  config_DMA(SAI_Block_x, dmaConstSettings);

  return 1;
}

static int audioPlay(SAI_Block_TypeDef *SAI_Block_x, uint32_t pingAddr, uint32_t pongAddr, uint32_t bufferSizeTransfers)
 801406e:	460f      	mov	r7, r1
  saiBlocks_t currentBlock = getSaiBlockNum(SAI_Block_x) ;

  const constDMAvars_t *dmaConstSettings = &(dmaStreamConstSettings_sai[currentBlock]) ;

  /* Configure the buffers address and size */
  DMA_SetCurrDataCounter(dmaConstSettings->DMAy_Streamx, bufferSizeTransfers);
 8014070:	2131      	movs	r1, #49	; 0x31
 8014072:	fb01 3302 	mla	r3, r1, r2, r3
  config_DMA(SAI_Block_x, dmaConstSettings);

  return 1;
}

static int audioPlay(SAI_Block_TypeDef *SAI_Block_x, uint32_t pingAddr, uint32_t pongAddr, uint32_t bufferSizeTransfers)
 8014076:	4605      	mov	r5, r0
  saiBlocks_t currentBlock = getSaiBlockNum(SAI_Block_x) ;

  const constDMAvars_t *dmaConstSettings = &(dmaStreamConstSettings_sai[currentBlock]) ;

  /* Configure the buffers address and size */
  DMA_SetCurrDataCounter(dmaConstSettings->DMAy_Streamx, bufferSizeTransfers);
 8014078:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 801407a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801407e:	4620      	mov	r0, r4
 8014080:	f7fd ff90 	bl	8011fa4 <DMA_SetCurrDataCounter>
  DMA_MemoryTargetConfig(dmaConstSettings->DMAy_Streamx, pingAddr, DMA_Memory_0);
 8014084:	4639      	mov	r1, r7
 8014086:	4620      	mov	r0, r4
 8014088:	2200      	movs	r2, #0
 801408a:	f7fe f86d 	bl	8012168 <DMA_MemoryTargetConfig>
  DMA_DoubleBufferModeConfig(dmaConstSettings->DMAy_Streamx, pongAddr, 0 );    // zero stands for first used buffer
 801408e:	2200      	movs	r2, #0
 8014090:	4631      	mov	r1, r6
 8014092:	4620      	mov	r0, r4
 8014094:	f7fd ffc6 	bl	8012024 <DMA_DoubleBufferModeConfig>
  DMA_DoubleBufferModeCmd(dmaConstSettings->DMAy_Streamx, ENABLE);
 8014098:	4620      	mov	r0, r4
 801409a:	2101      	movs	r1, #1
 801409c:	f7fe f814 	bl	80120c8 <DMA_DoubleBufferModeCmd>
  DMA_Cmd( dmaConstSettings->DMAy_Streamx, ENABLE);
 80140a0:	4620      	mov	r0, r4
 80140a2:	2101      	movs	r1, #1
 80140a4:	f7fd ff2e 	bl	8011f04 <DMA_Cmd>
    {
      SAI_Cmd(SAI_Block_x, DISABLE);
    }
  else
    {
      SAI_Cmd(SAI_Block_x, ENABLE);
 80140a8:	4628      	mov	r0, r5
 80140aa:	2101      	movs	r1, #1
 80140ac:	f7fe fe76 	bl	8012d9c <SAI_Cmd>
  DMA_Cmd( dmaConstSettings->DMAy_Streamx, ENABLE);

  audioPause(SAI_Block_x,  ENABLE); // start SAI transmission

  return 1;
}
 80140b0:	2001      	movs	r0, #1
 80140b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140b4:	40015824 	.word	0x40015824
 80140b8:	0803ea64 	.word	0x0803ea64

080140bc <audioOutSetupHw.constprop.1>:
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
#endif
}

//external interface functions:
static int  audioOutSetupHw(SAI_Block_TypeDef *SAI_Block_x, saiClkSource_t clkSrc, audioRate_t clkFreq, uint8_t div, audioI2SFormat_t audioI2SFormat)
 80140bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  saiBlocks_t currentBlock = getSaiBlockNum(SAI_Block_x);

  saiDefs[currentBlock].clkSrcSelectFunction( saiClkTable[currentBlock][clkSrc] );
 80140c0:	4f6f      	ldr	r7, [pc, #444]	; (8014280 <audioOutSetupHw.constprop.1+0x1c4>)
 80140c2:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8014290 <audioOutSetupHw.constprop.1+0x1d4>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
#endif
}

//external interface functions:
static int  audioOutSetupHw(SAI_Block_TypeDef *SAI_Block_x, saiClkSource_t clkSrc, audioRate_t clkFreq, uint8_t div, audioI2SFormat_t audioI2SFormat)
 80140c6:	4699      	mov	r9, r3
{
  saiBlocks_t currentBlock = getSaiBlockNum(SAI_Block_x);

  saiDefs[currentBlock].clkSrcSelectFunction( saiClkTable[currentBlock][clkSrc] );
 80140c8:	1bc3      	subs	r3, r0, r7
 80140ca:	425f      	negs	r7, r3
 80140cc:	415f      	adcs	r7, r3
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
#endif
}

//external interface functions:
static int  audioOutSetupHw(SAI_Block_TypeDef *SAI_Block_x, saiClkSource_t clkSrc, audioRate_t clkFreq, uint8_t div, audioI2SFormat_t audioI2SFormat)
 80140ce:	4604      	mov	r4, r0
{
  saiBlocks_t currentBlock = getSaiBlockNum(SAI_Block_x);

  saiDefs[currentBlock].clkSrcSelectFunction( saiClkTable[currentBlock][clkSrc] );
 80140d0:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 80140d4:	4408      	add	r0, r1
 80140d6:	eb08 0387 	add.w	r3, r8, r7, lsl #2
 80140da:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
#endif
}

//external interface functions:
static int  audioOutSetupHw(SAI_Block_TypeDef *SAI_Block_x, saiClkSource_t clkSrc, audioRate_t clkFreq, uint8_t div, audioI2SFormat_t audioI2SFormat)
 80140de:	b09b      	sub	sp, #108	; 0x6c
 80140e0:	460d      	mov	r5, r1
 80140e2:	4616      	mov	r6, r2
{
  saiBlocks_t currentBlock = getSaiBlockNum(SAI_Block_x);

  saiDefs[currentBlock].clkSrcSelectFunction( saiClkTable[currentBlock][clkSrc] );
 80140e4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80140e8:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 80140ec:	4798      	blx	r3

  clkSrcFreq[clkSrc] = clkFreq;
  setupAudioClocks(SAI_Block_x, clkSrc, clkFreq, div);
 80140ee:	4632      	mov	r2, r6
 80140f0:	464b      	mov	r3, r9
 80140f2:	4629      	mov	r1, r5
 80140f4:	4620      	mov	r0, r4
 80140f6:	f7ff fec7 	bl	8013e88 <setupAudioClocks>
static uint32_t setupSai( SAI_Block_TypeDef *SAI_Block_x, const saiSettings_t *i2sSettings)
{

  //SAI_DeInit(NULL);

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SAI1, ENABLE);
 80140fa:	2101      	movs	r1, #1
 80140fc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8014100:	f7fc fde8 	bl	8010cd4 <RCC_APB2PeriphClockCmd>

  SAI_InitTypeDef SAI_InitStruct;
  SAI_StructInit(&SAI_InitStruct);
 8014104:	a80b      	add	r0, sp, #44	; 0x2c
 8014106:	f7fe fe3b 	bl	8012d80 <SAI_StructInit>
  //General block peripherial config
  SAI_InitStruct.SAI_AudioMode = SAI_Mode_MasterTx;
  SAI_InitStruct.SAI_Protocol = SAI_Free_Protocol;
  SAI_InitStruct.SAI_DataSize = i2sSettings->SAI_DataSize_xb;
 801410a:	2380      	movs	r3, #128	; 0x80
 801410c:	930d      	str	r3, [sp, #52]	; 0x34
  SAI_InitStruct.SAI_FirstBit = SAI_FirstBit_MSB;
  SAI_InitStruct.SAI_ClockStrobing = SAI_ClockStrobing_RisingEdge;
 801410e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014112:	930f      	str	r3, [sp, #60]	; 0x3c
  SAI_InitStruct.SAI_Synchro = i2sSettings->SAI_xynchronous;
  SAI_InitStruct.SAI_OUTDRIV = SAI_OutputDrive_Enabled;
 8014114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SAI1, ENABLE);

  SAI_InitTypeDef SAI_InitStruct;
  SAI_StructInit(&SAI_InitStruct);
  //General block peripherial config
  SAI_InitStruct.SAI_AudioMode = SAI_Mode_MasterTx;
 8014118:	2500      	movs	r5, #0
  SAI_InitStruct.SAI_Protocol = SAI_Free_Protocol;
  SAI_InitStruct.SAI_DataSize = i2sSettings->SAI_DataSize_xb;
  SAI_InitStruct.SAI_FirstBit = SAI_FirstBit_MSB;
  SAI_InitStruct.SAI_ClockStrobing = SAI_ClockStrobing_RisingEdge;
  SAI_InitStruct.SAI_Synchro = i2sSettings->SAI_xynchronous;
  SAI_InitStruct.SAI_OUTDRIV = SAI_OutputDrive_Enabled;
 801411a:	9311      	str	r3, [sp, #68]	; 0x44
  SAI_InitStruct.SAI_NoDivider = i2sSettings->SAI_MasterDivider_DisEna;
  SAI_InitStruct.SAI_MasterDivider = i2sSettings->MasterDivider;
  SAI_InitStruct.SAI_FIFOThreshold = SAI_FIFOThreshold_HalfFull; //SAI_FIFOThreshold_HalfFull;

  SAI_Init(SAI_Block_x, &SAI_InitStruct);
 801411c:	a90b      	add	r1, sp, #44	; 0x2c
  SAI_InitStruct.SAI_ClockStrobing = SAI_ClockStrobing_RisingEdge;
  SAI_InitStruct.SAI_Synchro = i2sSettings->SAI_xynchronous;
  SAI_InitStruct.SAI_OUTDRIV = SAI_OutputDrive_Enabled;
  SAI_InitStruct.SAI_NoDivider = i2sSettings->SAI_MasterDivider_DisEna;
  SAI_InitStruct.SAI_MasterDivider = i2sSettings->MasterDivider;
  SAI_InitStruct.SAI_FIFOThreshold = SAI_FIFOThreshold_HalfFull; //SAI_FIFOThreshold_HalfFull;
 801411e:	2302      	movs	r3, #2

  SAI_Init(SAI_Block_x, &SAI_InitStruct);
 8014120:	4620      	mov	r0, r4
  //               FS Offset using SAI_FrameInit() function.

  SAI_FrameInitTypeDef SAI_FrameInitStruct;

  SAI_FrameInitStruct.SAI_FrameLength = i2sSettings->SAI_FrameLength;    //number of all clock pulses
  SAI_FrameInitStruct.SAI_ActiveFrameLength = i2sSettings->SAI_ActiveFrameLength;   // FS pulse length
 8014122:	2601      	movs	r6, #1
  // Program the Frame Length, Frame active Length, FS Definition, FS Polarity,
  //               FS Offset using SAI_FrameInit() function.

  SAI_FrameInitTypeDef SAI_FrameInitStruct;

  SAI_FrameInitStruct.SAI_FrameLength = i2sSettings->SAI_FrameLength;    //number of all clock pulses
 8014124:	f04f 0b40 	mov.w	fp, #64	; 0x40
  SAI_InitStruct.SAI_ClockStrobing = SAI_ClockStrobing_RisingEdge;
  SAI_InitStruct.SAI_Synchro = i2sSettings->SAI_xynchronous;
  SAI_InitStruct.SAI_OUTDRIV = SAI_OutputDrive_Enabled;
  SAI_InitStruct.SAI_NoDivider = i2sSettings->SAI_MasterDivider_DisEna;
  SAI_InitStruct.SAI_MasterDivider = i2sSettings->MasterDivider;
  SAI_InitStruct.SAI_FIFOThreshold = SAI_FIFOThreshold_HalfFull; //SAI_FIFOThreshold_HalfFull;
 8014128:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SAI1, ENABLE);

  SAI_InitTypeDef SAI_InitStruct;
  SAI_StructInit(&SAI_InitStruct);
  //General block peripherial config
  SAI_InitStruct.SAI_AudioMode = SAI_Mode_MasterTx;
 801412a:	950b      	str	r5, [sp, #44]	; 0x2c
  SAI_InitStruct.SAI_Protocol = SAI_Free_Protocol;
 801412c:	950c      	str	r5, [sp, #48]	; 0x30
  SAI_InitStruct.SAI_DataSize = i2sSettings->SAI_DataSize_xb;
  SAI_InitStruct.SAI_FirstBit = SAI_FirstBit_MSB;
 801412e:	950e      	str	r5, [sp, #56]	; 0x38
  SAI_InitStruct.SAI_ClockStrobing = SAI_ClockStrobing_RisingEdge;
  SAI_InitStruct.SAI_Synchro = i2sSettings->SAI_xynchronous;
 8014130:	9510      	str	r5, [sp, #64]	; 0x40
  SAI_InitStruct.SAI_OUTDRIV = SAI_OutputDrive_Enabled;
  SAI_InitStruct.SAI_NoDivider = i2sSettings->SAI_MasterDivider_DisEna;
 8014132:	9512      	str	r5, [sp, #72]	; 0x48
  SAI_InitStruct.SAI_MasterDivider = i2sSettings->MasterDivider;
 8014134:	9513      	str	r5, [sp, #76]	; 0x4c
  SAI_InitStruct.SAI_FIFOThreshold = SAI_FIFOThreshold_HalfFull; //SAI_FIFOThreshold_HalfFull;

  SAI_Init(SAI_Block_x, &SAI_InitStruct);
 8014136:	f7fe fcf1 	bl	8012b1c <SAI_Init>
  SAI_FrameInitTypeDef SAI_FrameInitStruct;

  SAI_FrameInitStruct.SAI_FrameLength = i2sSettings->SAI_FrameLength;    //number of all clock pulses
  SAI_FrameInitStruct.SAI_ActiveFrameLength = i2sSettings->SAI_ActiveFrameLength;   // FS pulse length
  SAI_FrameInitStruct.SAI_FSDefinition = i2sSettings->SAI_FSDefinition;
  SAI_FrameInitStruct.SAI_FSPolarity = SAI_FS_ActiveHigh;
 801413a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  SAI_FrameInitStruct.SAI_FSOffset = i2sSettings->SAI_FS_Position;//SAI_FS_BeforeFirstBit; //SAI_FS_FirstBit;

  SAI_FrameInit(SAI_Block_x, &SAI_FrameInitStruct);
 801413e:	a906      	add	r1, sp, #24
 8014140:	4620      	mov	r0, r4
  //               using SAI_SlotInit() function.

  SAI_SlotInitTypeDef SAI_SlotInitStruct;
  SAI_SlotInitStruct.SAI_FirstBitOffset = 0;
  SAI_SlotInitStruct.SAI_SlotSize = i2sSettings->SAI_SlotSize_xb;
  SAI_SlotInitStruct.SAI_SlotNumber = i2sSettings->slotsNum;
 8014142:	f04f 0a04 	mov.w	sl, #4
  SAI_FrameInitTypeDef SAI_FrameInitStruct;

  SAI_FrameInitStruct.SAI_FrameLength = i2sSettings->SAI_FrameLength;    //number of all clock pulses
  SAI_FrameInitStruct.SAI_ActiveFrameLength = i2sSettings->SAI_ActiveFrameLength;   // FS pulse length
  SAI_FrameInitStruct.SAI_FSDefinition = i2sSettings->SAI_FSDefinition;
  SAI_FrameInitStruct.SAI_FSPolarity = SAI_FS_ActiveHigh;
 8014146:	9309      	str	r3, [sp, #36]	; 0x24
  // Program the Frame Length, Frame active Length, FS Definition, FS Polarity,
  //               FS Offset using SAI_FrameInit() function.

  SAI_FrameInitTypeDef SAI_FrameInitStruct;

  SAI_FrameInitStruct.SAI_FrameLength = i2sSettings->SAI_FrameLength;    //number of all clock pulses
 8014148:	f8cd b018 	str.w	fp, [sp, #24]
  SAI_FrameInitStruct.SAI_ActiveFrameLength = i2sSettings->SAI_ActiveFrameLength;   // FS pulse length
 801414c:	9607      	str	r6, [sp, #28]
  SAI_FrameInitStruct.SAI_FSDefinition = i2sSettings->SAI_FSDefinition;
 801414e:	9508      	str	r5, [sp, #32]
  SAI_FrameInitStruct.SAI_FSPolarity = SAI_FS_ActiveHigh;
  SAI_FrameInitStruct.SAI_FSOffset = i2sSettings->SAI_FS_Position;//SAI_FS_BeforeFirstBit; //SAI_FS_FirstBit;
 8014150:	950a      	str	r5, [sp, #40]	; 0x28

  SAI_FrameInit(SAI_Block_x, &SAI_FrameInitStruct);
 8014152:	f7fe fd81 	bl	8012c58 <SAI_FrameInit>

  SAI_SlotInitTypeDef SAI_SlotInitStruct;
  SAI_SlotInitStruct.SAI_FirstBitOffset = 0;
  SAI_SlotInitStruct.SAI_SlotSize = i2sSettings->SAI_SlotSize_xb;
  SAI_SlotInitStruct.SAI_SlotNumber = i2sSettings->slotsNum;
  SAI_SlotInitStruct.SAI_SlotActive = i2sSettings->slotsActive;
 8014156:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
  SAI_SlotInit(SAI_Block_x, &SAI_SlotInitStruct);
 801415a:	a902      	add	r1, sp, #8
 801415c:	4620      	mov	r0, r4

  SAI_SlotInitTypeDef SAI_SlotInitStruct;
  SAI_SlotInitStruct.SAI_FirstBitOffset = 0;
  SAI_SlotInitStruct.SAI_SlotSize = i2sSettings->SAI_SlotSize_xb;
  SAI_SlotInitStruct.SAI_SlotNumber = i2sSettings->slotsNum;
  SAI_SlotInitStruct.SAI_SlotActive = i2sSettings->slotsActive;
 801415e:	9305      	str	r3, [sp, #20]

  // Program the Slot First Bit Offset, Slot Size, Slot Number, Slot Active
  //               using SAI_SlotInit() function.

  SAI_SlotInitTypeDef SAI_SlotInitStruct;
  SAI_SlotInitStruct.SAI_FirstBitOffset = 0;
 8014160:	9502      	str	r5, [sp, #8]
  SAI_SlotInitStruct.SAI_SlotSize = i2sSettings->SAI_SlotSize_xb;
 8014162:	f8cd b00c 	str.w	fp, [sp, #12]
  SAI_SlotInitStruct.SAI_SlotNumber = i2sSettings->slotsNum;
 8014166:	f8cd a010 	str.w	sl, [sp, #16]
  SAI_SlotInitStruct.SAI_SlotActive = i2sSettings->slotsActive;
  SAI_SlotInit(SAI_Block_x, &SAI_SlotInitStruct);
 801416a:	f7fe fdc7 	bl	8012cfc <SAI_SlotInit>


  SAI_ITConfig(SAI_Block_x, SAI_IT_OVRUDR, ENABLE);
 801416e:	4632      	mov	r2, r6
 8014170:	4631      	mov	r1, r6
 8014172:	4620      	mov	r0, r4
 8014174:	f7fe fe76 	bl	8012e64 <SAI_ITConfig>
  SAI_ITConfig(SAI_Block_x, SAI_IT_AFSDET, ENABLE);  // specifies the interrupt source for anticipated frame synchronization
 8014178:	4632      	mov	r2, r6
 801417a:	4620      	mov	r0, r4
 801417c:	2120      	movs	r1, #32
 801417e:	f7fe fe71 	bl	8012e64 <SAI_ITConfig>
  SAI_ITConfig(SAI_Block_x, SAI_IT_LFSDET, ENABLE);   //to indicate if there is the detection of a audio frame synchronisation (FS) later than expected
 8014182:	4632      	mov	r2, r6
 8014184:	4659      	mov	r1, fp
 8014186:	4620      	mov	r0, r4
 8014188:	f7fe fe6c 	bl	8012e64 <SAI_ITConfig>
  SAI_ITConfig(SAI_Block_x, SAI_IT_WCKCFG, ENABLE);   // wrong clock/frame config
 801418c:	4632      	mov	r2, r6
 801418e:	4651      	mov	r1, sl
 8014190:	4620      	mov	r0, r4
 8014192:	f7fe fe67 	bl	8012e64 <SAI_ITConfig>
  //SAI_ITConfig(SAI_Block_x, SAI_IT_MUTEDET, ENABLE); //mute
  //SAI_ITConfig(SAI_Block_x, SAI_IT_FREQ , ENABLE);   //fifo request

  uint32_t status = SAI_Block_x->SR;
  (void)status;
  SAI_FlushFIFO(SAI_Block_x);
 8014196:	4620      	mov	r0, r4
  SAI_ITConfig(SAI_Block_x, SAI_IT_LFSDET, ENABLE);   //to indicate if there is the detection of a audio frame synchronisation (FS) later than expected
  SAI_ITConfig(SAI_Block_x, SAI_IT_WCKCFG, ENABLE);   // wrong clock/frame config
  //SAI_ITConfig(SAI_Block_x, SAI_IT_MUTEDET, ENABLE); //mute
  //SAI_ITConfig(SAI_Block_x, SAI_IT_FREQ , ENABLE);   //fifo request

  uint32_t status = SAI_Block_x->SR;
 8014198:	6963      	ldr	r3, [r4, #20]
  (void)status;
  SAI_FlushFIFO(SAI_Block_x);
 801419a:	f7fe fe25 	bl	8012de8 <SAI_FlushFIFO>

  registerIRQ(SAI1_IRQn, SAI_IRQHandler);
 801419e:	4939      	ldr	r1, [pc, #228]	; (8014284 <audioOutSetupHw.constprop.1+0x1c8>)
 80141a0:	2057      	movs	r0, #87	; 0x57
 80141a2:	f7f4 fab1 	bl	8008708 <registerIRQ>
//dry DMA settings: no buffor or enable settings:
static void config_DMA(SAI_Block_TypeDef *SAI_Block_x, const constDMAvars_t *dmaSettings)
{
  DMA_InitTypeDef DMA_InitStructure;

  RCC_AHB1PeriphClockCmd(dmaSettings->RCC_AHBPeriph_DMAx , ENABLE);
 80141a6:	f04f 0931 	mov.w	r9, #49	; 0x31
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80141aa:	4a37      	ldr	r2, [pc, #220]	; (8014288 <audioOutSetupHw.constprop.1+0x1cc>)
 80141ac:	fb09 8907 	mla	r9, r9, r7, r8
 80141b0:	23f0      	movs	r3, #240	; 0xf0
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80141b2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80141b6:	f882 3357 	strb.w	r3, [r2, #855]	; 0x357

  registerIRQ(SAI1_IRQn, SAI_IRQHandler);
  NVIC_SetPriority(SAI1_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY);
  NVIC_EnableIRQ(SAI1_IRQn);

  SAI_DMACmd(SAI_Block_x, ENABLE);
 80141ba:	4620      	mov	r0, r4
 80141bc:	9301      	str	r3, [sp, #4]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80141be:	6091      	str	r1, [r2, #8]
 80141c0:	4631      	mov	r1, r6
 80141c2:	f7fe fe29 	bl	8012e18 <SAI_DMACmd>
//dry DMA settings: no buffor or enable settings:
static void config_DMA(SAI_Block_TypeDef *SAI_Block_x, const constDMAvars_t *dmaSettings)
{
  DMA_InitTypeDef DMA_InitStructure;

  RCC_AHB1PeriphClockCmd(dmaSettings->RCC_AHBPeriph_DMAx , ENABLE);
 80141c6:	4631      	mov	r1, r6
 80141c8:	f8d9 005c 	ldr.w	r0, [r9, #92]	; 0x5c
 80141cc:	f7fc fd3a 	bl	8010c44 <RCC_AHB1PeriphClockCmd>
  /* DMA2 Stream0 SAI_BlockB configuration **************************************/
  DMA_InitStructure.DMA_Channel = dmaSettings->DMA_Channel_x;
 80141d0:	f8d9 1058 	ldr.w	r1, [r9, #88]	; 0x58
 80141d4:	910b      	str	r1, [sp, #44]	; 0x2c
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SAI_Block_x->DR);
  DMA_InitStructure.DMA_Memory0BaseAddr = 0;     //will be set in separate function
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_BufferSize = 0xFFF;      //will be set in separate function
 80141d6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80141da:	910f      	str	r1, [sp, #60]	; 0x3c
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80141dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80141e0:	9111      	str	r1, [sp, #68]	; 0x44
  DMA_InitTypeDef DMA_InitStructure;

  RCC_AHB1PeriphClockCmd(dmaSettings->RCC_AHBPeriph_DMAx , ENABLE);
  /* DMA2 Stream0 SAI_BlockB configuration **************************************/
  DMA_InitStructure.DMA_Channel = dmaSettings->DMA_Channel_x;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SAI_Block_x->DR);
 80141e2:	341c      	adds	r4, #28
  DMA_InitStructure.DMA_Memory0BaseAddr = 0;     //will be set in separate function
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_BufferSize = 0xFFF;      //will be set in separate function
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80141e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  DMA_InitTypeDef DMA_InitStructure;

  RCC_AHB1PeriphClockCmd(dmaSettings->RCC_AHBPeriph_DMAx , ENABLE);
  /* DMA2 Stream0 SAI_BlockB configuration **************************************/
  DMA_InitStructure.DMA_Channel = dmaSettings->DMA_Channel_x;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SAI_Block_x->DR);
 80141e8:	940c      	str	r4, [sp, #48]	; 0x30
  DMA_InitStructure.DMA_Memory0BaseAddr = 0;     //will be set in separate function
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_BufferSize = 0xFFF;      //will be set in separate function
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80141ea:	9112      	str	r1, [sp, #72]	; 0x48
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  DMA_Init(dmaSettings->DMAy_Streamx, &DMA_InitStructure);
 80141ec:	f8d9 4054 	ldr.w	r4, [r9, #84]	; 0x54

  RCC_AHB1PeriphClockCmd(dmaSettings->RCC_AHBPeriph_DMAx , ENABLE);
  /* DMA2 Stream0 SAI_BlockB configuration **************************************/
  DMA_InitStructure.DMA_Channel = dmaSettings->DMA_Channel_x;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SAI_Block_x->DR);
  DMA_InitStructure.DMA_Memory0BaseAddr = 0;     //will be set in separate function
 80141f0:	950d      	str	r5, [sp, #52]	; 0x34
  DMA_InitStructure.DMA_BufferSize = 0xFFF;      //will be set in separate function
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; //also double buffered
 80141f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80141f6:	9114      	str	r1, [sp, #80]	; 0x50
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_BufferSize = 0xFFF;      //will be set in separate function
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80141f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; //also double buffered
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 80141fc:	2103      	movs	r1, #3
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_BufferSize = 0xFFF;      //will be set in separate function
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80141fe:	9313      	str	r3, [sp, #76]	; 0x4c
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; //also double buffered
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8014200:	9117      	str	r1, [sp, #92]	; 0x5c
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; //also double buffered
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8014202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  DMA_Init(dmaSettings->DMAy_Streamx, &DMA_InitStructure);
 8014206:	a90b      	add	r1, sp, #44	; 0x2c
 8014208:	4620      	mov	r0, r4
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; //also double buffered
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 801420a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_AHB1PeriphClockCmd(dmaSettings->RCC_AHBPeriph_DMAx , ENABLE);
  /* DMA2 Stream0 SAI_BlockB configuration **************************************/
  DMA_InitStructure.DMA_Channel = dmaSettings->DMA_Channel_x;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SAI_Block_x->DR);
  DMA_InitStructure.DMA_Memory0BaseAddr = 0;     //will be set in separate function
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 801420c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  DMA_InitStructure.DMA_BufferSize = 0xFFF;      //will be set in separate function
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8014210:	9510      	str	r5, [sp, #64]	; 0x40
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; //also double buffered
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8014212:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8014216:	9518      	str	r5, [sp, #96]	; 0x60
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8014218:	9519      	str	r5, [sp, #100]	; 0x64
  DMA_Init(dmaSettings->DMAy_Streamx, &DMA_InitStructure);
 801421a:	f7fd fd73 	bl	8011d04 <DMA_Init>

  //Enable interrupts:
  //#warning Use interrupt for error handling and buffer switching
  DMA_ITConfig(dmaSettings->DMAy_Streamx, DMA_IT_TC, ENABLE);
 801421e:	4632      	mov	r2, r6
 8014220:	4620      	mov	r0, r4
 8014222:	2110      	movs	r1, #16
 8014224:	f7fe f9d0 	bl	80125c8 <DMA_ITConfig>
  DMA_ITConfig(dmaSettings->DMAy_Streamx, DMA_IT_TE, ENABLE);
 8014228:	4632      	mov	r2, r6
 801422a:	4651      	mov	r1, sl
 801422c:	4620      	mov	r0, r4
 801422e:	f7fe f9cb 	bl	80125c8 <DMA_ITConfig>

  registerIRQ( dmaSettings->DMAx_Streamx_IRQn , dmaSettings->isrHandler);
 8014232:	f999 4060 	ldrsb.w	r4, [r9, #96]	; 0x60
 8014236:	f8d9 1081 	ldr.w	r1, [r9, #129]	; 0x81
 801423a:	4620      	mov	r0, r4
 801423c:	f7f4 fa64 	bl	8008708 <registerIRQ>
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8014240:	42ac      	cmp	r4, r5
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8014242:	bfac      	ite	ge
 8014244:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8014248:	4a10      	ldrlt	r2, [pc, #64]	; (801428c <audioOutSetupHw.constprop.1+0x1d0>)
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 801424a:	9b01      	ldr	r3, [sp, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 801424c:	bfb5      	itete	lt
 801424e:	f004 040f 	andlt.w	r4, r4, #15
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8014252:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8014256:	5513      	strblt	r3, [r2, r4]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8014258:	f884 3300 	strbge.w	r3, [r4, #768]	; 0x300
  NVIC_SetPriority(dmaSettings->DMAx_Streamx_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY);
  NVIC_EnableIRQ(dmaSettings->DMAx_Streamx_IRQn);
 801425c:	2331      	movs	r3, #49	; 0x31
 801425e:	fb03 8707 	mla	r7, r3, r7, r8
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8014262:	2001      	movs	r0, #1
 8014264:	f997 3060 	ldrsb.w	r3, [r7, #96]	; 0x60
 8014268:	4a07      	ldr	r2, [pc, #28]	; (8014288 <audioOutSetupHw.constprop.1+0x1cc>)
 801426a:	0959      	lsrs	r1, r3, #5
 801426c:	f003 031f 	and.w	r3, r3, #31
 8014270:	fa00 f303 	lsl.w	r3, r0, r3
 8014274:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  const constDMAvars_t *dmaConstSettings = &(dmaStreamConstSettings_sai[currentBlock]) ;
  config_DMA(SAI_Block_x, dmaConstSettings);

  return 1;
}
 8014278:	b01b      	add	sp, #108	; 0x6c
 801427a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801427e:	bf00      	nop
 8014280:	40015824 	.word	0x40015824
 8014284:	08014001 	.word	0x08014001
 8014288:	e000e100 	.word	0xe000e100
 801428c:	e000ed14 	.word	0xe000ed14
 8014290:	0803ea64 	.word	0x0803ea64

08014294 <printSAIBufs>:
  massert(0);
}

static uint8_t SAIBuf[2][16];
void printSAIBufs(int *bufSize, char *bufPtr)
{
 8014294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014298:	4604      	mov	r4, r0
  int i,j;
  DPRINTF(CLEAR_LINE"SAI buffers   : ");
 801429a:	6800      	ldr	r0, [r0, #0]
 801429c:	f241 2387 	movw	r3, #4743	; 0x1287
 80142a0:	4298      	cmp	r0, r3
  massert(0);
}

static uint8_t SAIBuf[2][16];
void printSAIBufs(int *bufSize, char *bufPtr)
{
 80142a2:	460d      	mov	r5, r1
  int i,j;
  DPRINTF(CLEAR_LINE"SAI buffers   : ");
 80142a4:	dc09      	bgt.n	80142ba <printSAIBufs+0x26>
 80142a6:	4963      	ldr	r1, [pc, #396]	; (8014434 <printSAIBufs+0x1a0>)
 80142a8:	4428      	add	r0, r5
 80142aa:	f7f4 fcdb 	bl	8008c64 <xsprintf>
 80142ae:	6826      	ldr	r6, [r4, #0]
 80142b0:	19a8      	adds	r0, r5, r6
 80142b2:	f008 ffc5 	bl	801d240 <strlen>
 80142b6:	4430      	add	r0, r6
 80142b8:	6020      	str	r0, [r4, #0]
  for(j = 0; j < 2; j++)
    {
      for(i = 0; i < sizeof(SAIBuf[0]); i++)
        {
          if((i%8) == 0 && i > 0) DPRINTF(" | ");
          DPRINTF("%02x", SAIBuf[j][i]);
 80142ba:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8014454 <printSAIBufs+0x1c0>
  massert(0);
}

static uint8_t SAIBuf[2][16];
void printSAIBufs(int *bufSize, char *bufPtr)
{
 80142be:	2700      	movs	r7, #0
 80142c0:	2600      	movs	r6, #0
  for(j = 0; j < 2; j++)
    {
      for(i = 0; i < sizeof(SAIBuf[0]); i++)
        {
          if((i%8) == 0 && i > 0) DPRINTF(" | ");
          DPRINTF("%02x", SAIBuf[j][i]);
 80142c2:	eb08 0a07 	add.w	sl, r8, r7
{
  int i,j;
  DPRINTF(CLEAR_LINE"SAI buffers   : ");
  for(j = 0; j < 2; j++)
    {
      for(i = 0; i < sizeof(SAIBuf[0]); i++)
 80142c6:	2e10      	cmp	r6, #16
 80142c8:	6820      	ldr	r0, [r4, #0]
 80142ca:	d027      	beq.n	801431c <printSAIBufs+0x88>
        {
          if((i%8) == 0 && i > 0) DPRINTF(" | ");
 80142cc:	0773      	lsls	r3, r6, #29
 80142ce:	d110      	bne.n	80142f2 <printSAIBufs+0x5e>
 80142d0:	b17e      	cbz	r6, 80142f2 <printSAIBufs+0x5e>
 80142d2:	f241 2387 	movw	r3, #4743	; 0x1287
 80142d6:	4298      	cmp	r0, r3
 80142d8:	dc0b      	bgt.n	80142f2 <printSAIBufs+0x5e>
 80142da:	4957      	ldr	r1, [pc, #348]	; (8014438 <printSAIBufs+0x1a4>)
 80142dc:	4428      	add	r0, r5
 80142de:	f7f4 fcc1 	bl	8008c64 <xsprintf>
 80142e2:	f8d4 9000 	ldr.w	r9, [r4]
 80142e6:	eb05 0009 	add.w	r0, r5, r9
 80142ea:	f008 ffa9 	bl	801d240 <strlen>
 80142ee:	4448      	add	r0, r9
 80142f0:	6020      	str	r0, [r4, #0]
          DPRINTF("%02x", SAIBuf[j][i]);
 80142f2:	6820      	ldr	r0, [r4, #0]
 80142f4:	f241 2387 	movw	r3, #4743	; 0x1287
 80142f8:	4298      	cmp	r0, r3
 80142fa:	dc0d      	bgt.n	8014318 <printSAIBufs+0x84>
 80142fc:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8014300:	494e      	ldr	r1, [pc, #312]	; (801443c <printSAIBufs+0x1a8>)
 8014302:	4428      	add	r0, r5
 8014304:	f7f4 fcae 	bl	8008c64 <xsprintf>
 8014308:	f8d4 9000 	ldr.w	r9, [r4]
 801430c:	eb05 0009 	add.w	r0, r5, r9
 8014310:	f008 ff96 	bl	801d240 <strlen>
 8014314:	4448      	add	r0, r9
 8014316:	6020      	str	r0, [r4, #0]
{
  int i,j;
  DPRINTF(CLEAR_LINE"SAI buffers   : ");
  for(j = 0; j < 2; j++)
    {
      for(i = 0; i < sizeof(SAIBuf[0]); i++)
 8014318:	3601      	adds	r6, #1
 801431a:	e7d4      	b.n	80142c6 <printSAIBufs+0x32>
        {
          if((i%8) == 0 && i > 0) DPRINTF(" | ");
          DPRINTF("%02x", SAIBuf[j][i]);
        }
      DPRINTF("          ");
 801431c:	f241 2387 	movw	r3, #4743	; 0x1287
 8014320:	4298      	cmp	r0, r3
 8014322:	dc09      	bgt.n	8014338 <printSAIBufs+0xa4>
 8014324:	4946      	ldr	r1, [pc, #280]	; (8014440 <printSAIBufs+0x1ac>)
 8014326:	4428      	add	r0, r5
 8014328:	f7f4 fc9c 	bl	8008c64 <xsprintf>
 801432c:	6826      	ldr	r6, [r4, #0]
 801432e:	19a8      	adds	r0, r5, r6
 8014330:	f008 ff86 	bl	801d240 <strlen>
 8014334:	4430      	add	r0, r6
 8014336:	6020      	str	r0, [r4, #0]
 8014338:	3710      	adds	r7, #16
static uint8_t SAIBuf[2][16];
void printSAIBufs(int *bufSize, char *bufPtr)
{
  int i,j;
  DPRINTF(CLEAR_LINE"SAI buffers   : ");
  for(j = 0; j < 2; j++)
 801433a:	2f20      	cmp	r7, #32
 801433c:	d1c0      	bne.n	80142c0 <printSAIBufs+0x2c>
          if((i%8) == 0 && i > 0) DPRINTF(" | ");
          DPRINTF("%02x", SAIBuf[j][i]);
        }
      DPRINTF("          ");
    }
  DPRINTF(CLEAR_LINE"\nSAI interfaces: ");
 801433e:	6820      	ldr	r0, [r4, #0]
 8014340:	f241 2387 	movw	r3, #4743	; 0x1287
 8014344:	4298      	cmp	r0, r3
 8014346:	dc09      	bgt.n	801435c <printSAIBufs+0xc8>
 8014348:	493e      	ldr	r1, [pc, #248]	; (8014444 <printSAIBufs+0x1b0>)
 801434a:	4428      	add	r0, r5
 801434c:	f7f4 fc8a 	bl	8008c64 <xsprintf>
 8014350:	6826      	ldr	r6, [r4, #0]
 8014352:	19a8      	adds	r0, r5, r6
 8014354:	f008 ff74 	bl	801d240 <strlen>
 8014358:	4430      	add	r0, r6
 801435a:	6020      	str	r0, [r4, #0]
  for(j = 0; j < 2; j++)
    {
      for(i = 0; i < sizeof(SAIBuf[0]); i++)
        {
          DPRINTF("%02x", SAIBuf[j][(i&1)?i&0xfe:i|1]);
 801435c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8014454 <printSAIBufs+0x1c0>
  massert(0);
}

static uint8_t SAIBuf[2][16];
void printSAIBufs(int *bufSize, char *bufPtr)
{
 8014360:	2700      	movs	r7, #0
  DPRINTF(CLEAR_LINE"\nSAI interfaces: ");
  for(j = 0; j < 2; j++)
    {
      for(i = 0; i < sizeof(SAIBuf[0]); i++)
        {
          DPRINTF("%02x", SAIBuf[j][(i&1)?i&0xfe:i|1]);
 8014362:	f241 2887 	movw	r8, #4743	; 0x1287
  massert(0);
}

static uint8_t SAIBuf[2][16];
void printSAIBufs(int *bufSize, char *bufPtr)
{
 8014366:	2600      	movs	r6, #0
  DPRINTF(CLEAR_LINE"\nSAI interfaces: ");
  for(j = 0; j < 2; j++)
    {
      for(i = 0; i < sizeof(SAIBuf[0]); i++)
        {
          DPRINTF("%02x", SAIBuf[j][(i&1)?i&0xfe:i|1]);
 8014368:	eb09 1b07 	add.w	fp, r9, r7, lsl #4
 801436c:	6820      	ldr	r0, [r4, #0]
 801436e:	4540      	cmp	r0, r8
 8014370:	f006 0301 	and.w	r3, r6, #1
 8014374:	dc15      	bgt.n	80143a2 <printSAIBufs+0x10e>
 8014376:	4428      	add	r0, r5
 8014378:	b113      	cbz	r3, 8014380 <printSAIBufs+0xec>
 801437a:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 801437e:	e001      	b.n	8014384 <printSAIBufs+0xf0>
 8014380:	f046 0201 	orr.w	r2, r6, #1
 8014384:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8014388:	492c      	ldr	r1, [pc, #176]	; (801443c <printSAIBufs+0x1a8>)
 801438a:	9301      	str	r3, [sp, #4]
 801438c:	f7f4 fc6a 	bl	8008c64 <xsprintf>
 8014390:	f8d4 a000 	ldr.w	sl, [r4]
 8014394:	eb05 000a 	add.w	r0, r5, sl
 8014398:	f008 ff52 	bl	801d240 <strlen>
 801439c:	9b01      	ldr	r3, [sp, #4]
 801439e:	4450      	add	r0, sl
 80143a0:	6020      	str	r0, [r4, #0]
          if((i%2) == 1)
 80143a2:	b173      	cbz	r3, 80143c2 <printSAIBufs+0x12e>
            {
              DPRINTF(" ");
 80143a4:	6820      	ldr	r0, [r4, #0]
 80143a6:	4540      	cmp	r0, r8
 80143a8:	dc0b      	bgt.n	80143c2 <printSAIBufs+0x12e>
 80143aa:	4927      	ldr	r1, [pc, #156]	; (8014448 <printSAIBufs+0x1b4>)
 80143ac:	4428      	add	r0, r5
 80143ae:	f7f4 fc59 	bl	8008c64 <xsprintf>
 80143b2:	f8d4 a000 	ldr.w	sl, [r4]
 80143b6:	eb05 000a 	add.w	r0, r5, sl
 80143ba:	f008 ff41 	bl	801d240 <strlen>
 80143be:	4450      	add	r0, sl
 80143c0:	6020      	str	r0, [r4, #0]
            }
          if((i%8) == 7)
 80143c2:	f006 0307 	and.w	r3, r6, #7
 80143c6:	2b07      	cmp	r3, #7
 80143c8:	d10e      	bne.n	80143e8 <printSAIBufs+0x154>
            {
              DPRINTF(" ");
 80143ca:	6820      	ldr	r0, [r4, #0]
 80143cc:	4540      	cmp	r0, r8
 80143ce:	dc0b      	bgt.n	80143e8 <printSAIBufs+0x154>
 80143d0:	491d      	ldr	r1, [pc, #116]	; (8014448 <printSAIBufs+0x1b4>)
 80143d2:	4428      	add	r0, r5
 80143d4:	f7f4 fc46 	bl	8008c64 <xsprintf>
 80143d8:	f8d4 a000 	ldr.w	sl, [r4]
 80143dc:	eb05 000a 	add.w	r0, r5, sl
 80143e0:	f008 ff2e 	bl	801d240 <strlen>
 80143e4:	4450      	add	r0, sl
 80143e6:	6020      	str	r0, [r4, #0]
      DPRINTF("          ");
    }
  DPRINTF(CLEAR_LINE"\nSAI interfaces: ");
  for(j = 0; j < 2; j++)
    {
      for(i = 0; i < sizeof(SAIBuf[0]); i++)
 80143e8:	3601      	adds	r6, #1
 80143ea:	2e10      	cmp	r6, #16
 80143ec:	d1be      	bne.n	801436c <printSAIBufs+0xd8>
          if((i%8) == 7)
            {
              DPRINTF(" ");
            }
        }
      DPRINTF("   ");
 80143ee:	6820      	ldr	r0, [r4, #0]
 80143f0:	4540      	cmp	r0, r8
 80143f2:	dc09      	bgt.n	8014408 <printSAIBufs+0x174>
 80143f4:	4915      	ldr	r1, [pc, #84]	; (801444c <printSAIBufs+0x1b8>)
 80143f6:	4428      	add	r0, r5
 80143f8:	f7f4 fc34 	bl	8008c64 <xsprintf>
 80143fc:	6826      	ldr	r6, [r4, #0]
 80143fe:	19a8      	adds	r0, r5, r6
 8014400:	f008 ff1e 	bl	801d240 <strlen>
 8014404:	4430      	add	r0, r6
 8014406:	6020      	str	r0, [r4, #0]
          DPRINTF("%02x", SAIBuf[j][i]);
        }
      DPRINTF("          ");
    }
  DPRINTF(CLEAR_LINE"\nSAI interfaces: ");
  for(j = 0; j < 2; j++)
 8014408:	3701      	adds	r7, #1
 801440a:	2f02      	cmp	r7, #2
 801440c:	d1ab      	bne.n	8014366 <printSAIBufs+0xd2>
              DPRINTF(" ");
            }
        }
      DPRINTF("   ");
    }
  DPRINTF(CLEAR_LINE"\n");
 801440e:	6820      	ldr	r0, [r4, #0]
 8014410:	f241 2387 	movw	r3, #4743	; 0x1287
 8014414:	4298      	cmp	r0, r3
 8014416:	dc09      	bgt.n	801442c <printSAIBufs+0x198>
 8014418:	490d      	ldr	r1, [pc, #52]	; (8014450 <printSAIBufs+0x1bc>)
 801441a:	4428      	add	r0, r5
 801441c:	f7f4 fc22 	bl	8008c64 <xsprintf>
 8014420:	6826      	ldr	r6, [r4, #0]
 8014422:	19a8      	adds	r0, r5, r6
 8014424:	f008 ff0c 	bl	801d240 <strlen>
 8014428:	4430      	add	r0, r6
 801442a:	6020      	str	r0, [r4, #0]
}
 801442c:	b003      	add	sp, #12
 801442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014432:	bf00      	nop
 8014434:	0803ec55 	.word	0x0803ec55
 8014438:	0803ec66 	.word	0x0803ec66
 801443c:	0803de03 	.word	0x0803de03
 8014440:	0803ec6a 	.word	0x0803ec6a
 8014444:	0803ec75 	.word	0x0803ec75
 8014448:	0803ec73 	.word	0x0803ec73
 801444c:	0803ec71 	.word	0x0803ec71
 8014450:	0803de8a 	.word	0x0803de8a
 8014454:	10002d18 	.word	0x10002d18

08014458 <saiInit>:
  [BLOCK_B] = {SAI_PLL, 44100, 1},
};


void saiInit(void)
{
 8014458:	b570      	push	{r4, r5, r6, lr}
  internalDmaVars[BLOCK_A].silenceBuf = bAlloc(AUDIO_BUFFER_OUT_SIZE);
 801445a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801445e:	f000 fd8d 	bl	8014f7c <bAlloc>
 8014462:	4c24      	ldr	r4, [pc, #144]	; (80144f4 <saiInit+0x9c>)
  //Prevent buffer from releasing as it may be used by 2 entities at a time
  bRef(internalDmaVars[BLOCK_B].silenceBuf);
  bRef(internalDmaVars[BLOCK_B].silenceBuf);
  memset(internalDmaVars[BLOCK_B].silenceBuf->data, 0, AUDIO_BUFFER_OUT_SIZE);

  audioOutSetupHw(SAI1_Block_A, saiClkCfg[BLOCK_A].clkSrc, mapFreq(saiClkCfg[BLOCK_A].freq), saiClkCfg[BLOCK_A].div, SET_DSP);
 8014464:	4e24      	ldr	r6, [pc, #144]	; (80144f8 <saiInit+0xa0>)
};


void saiInit(void)
{
  internalDmaVars[BLOCK_A].silenceBuf = bAlloc(AUDIO_BUFFER_OUT_SIZE);
 8014466:	6060      	str	r0, [r4, #4]
  internalDmaVars[BLOCK_A].silenceBuf->size = AUDIO_BUFFER_OUT_SIZE;
 8014468:	f44f 7500 	mov.w	r5, #512	; 0x200
 801446c:	8005      	strh	r5, [r0, #0]
  //Prevent buffer from releasing as it may be used by 2 entities at a time
  bRef(internalDmaVars[BLOCK_A].silenceBuf);
 801446e:	6860      	ldr	r0, [r4, #4]
 8014470:	f001 f91c 	bl	80156ac <bRef>
  bRef(internalDmaVars[BLOCK_A].silenceBuf);
 8014474:	6860      	ldr	r0, [r4, #4]
 8014476:	f001 f919 	bl	80156ac <bRef>
  memset(internalDmaVars[BLOCK_A].silenceBuf->data, 0, AUDIO_BUFFER_OUT_SIZE);
 801447a:	6860      	ldr	r0, [r4, #4]
 801447c:	462a      	mov	r2, r5
 801447e:	2100      	movs	r1, #0
 8014480:	3014      	adds	r0, #20
 8014482:	f008 fe77 	bl	801d174 <memset>
  internalDmaVars[BLOCK_B].silenceBuf = bAlloc(AUDIO_BUFFER_OUT_SIZE);
 8014486:	4628      	mov	r0, r5
 8014488:	f000 fd78 	bl	8014f7c <bAlloc>
 801448c:	6160      	str	r0, [r4, #20]
  internalDmaVars[BLOCK_B].silenceBuf->size = AUDIO_BUFFER_OUT_SIZE;
 801448e:	8005      	strh	r5, [r0, #0]
  //Prevent buffer from releasing as it may be used by 2 entities at a time
  bRef(internalDmaVars[BLOCK_B].silenceBuf);
 8014490:	6960      	ldr	r0, [r4, #20]
 8014492:	f001 f90b 	bl	80156ac <bRef>
  bRef(internalDmaVars[BLOCK_B].silenceBuf);
 8014496:	6960      	ldr	r0, [r4, #20]
 8014498:	f001 f908 	bl	80156ac <bRef>
  memset(internalDmaVars[BLOCK_B].silenceBuf->data, 0, AUDIO_BUFFER_OUT_SIZE);
 801449c:	6960      	ldr	r0, [r4, #20]
 801449e:	462a      	mov	r2, r5
 80144a0:	2100      	movs	r1, #0
 80144a2:	3014      	adds	r0, #20
 80144a4:	f008 fe66 	bl	801d174 <memset>

  audioOutSetupHw(SAI1_Block_A, saiClkCfg[BLOCK_A].clkSrc, mapFreq(saiClkCfg[BLOCK_A].freq), saiClkCfg[BLOCK_A].div, SET_DSP);
 80144a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80144aa:	f894 1020 	ldrb.w	r1, [r4, #32]
  audioOutSetupHw(SAI1_Block_B, saiClkCfg[BLOCK_B].clkSrc, mapFreq(saiClkCfg[BLOCK_B].freq), saiClkCfg[BLOCK_B].div, SET_DSP);
 80144ae:	4d13      	ldr	r5, [pc, #76]	; (80144fc <saiInit+0xa4>)
  //Prevent buffer from releasing as it may be used by 2 entities at a time
  bRef(internalDmaVars[BLOCK_B].silenceBuf);
  bRef(internalDmaVars[BLOCK_B].silenceBuf);
  memset(internalDmaVars[BLOCK_B].silenceBuf->data, 0, AUDIO_BUFFER_OUT_SIZE);

  audioOutSetupHw(SAI1_Block_A, saiClkCfg[BLOCK_A].clkSrc, mapFreq(saiClkCfg[BLOCK_A].freq), saiClkCfg[BLOCK_A].div, SET_DSP);
 80144b0:	f7ff fc22 	bl	8013cf8 <mapFreq>
 80144b4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80144b8:	4602      	mov	r2, r0
 80144ba:	4630      	mov	r0, r6
 80144bc:	f7ff fdfe 	bl	80140bc <audioOutSetupHw.constprop.1>
  audioOutSetupHw(SAI1_Block_B, saiClkCfg[BLOCK_B].clkSrc, mapFreq(saiClkCfg[BLOCK_B].freq), saiClkCfg[BLOCK_B].div, SET_DSP);
 80144c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80144c2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80144c6:	f7ff fc17 	bl	8013cf8 <mapFreq>
 80144ca:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80144ce:	4602      	mov	r2, r0
 80144d0:	4628      	mov	r0, r5
 80144d2:	f7ff fdf3 	bl	80140bc <audioOutSetupHw.constprop.1>
  audioPlay(SAI1_Block_A, (uint32_t)internalDmaVars[BLOCK_A].silenceBuf->data, (uint32_t)internalDmaVars[BLOCK_A].silenceBuf->data, AUDIO_BUFFER_OUT_SIZE / 2);
 80144d6:	6862      	ldr	r2, [r4, #4]
 80144d8:	3214      	adds	r2, #20
 80144da:	4611      	mov	r1, r2
 80144dc:	4630      	mov	r0, r6
 80144de:	f7ff fdbf 	bl	8014060 <audioPlay.constprop.0>
  audioPlay(SAI1_Block_B, (uint32_t)internalDmaVars[BLOCK_B].silenceBuf->data, (uint32_t)internalDmaVars[BLOCK_B].silenceBuf->data, AUDIO_BUFFER_OUT_SIZE / 2);
 80144e2:	6962      	ldr	r2, [r4, #20]
 80144e4:	3214      	adds	r2, #20
 80144e6:	4628      	mov	r0, r5
 80144e8:	4611      	mov	r1, r2
}
 80144ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  memset(internalDmaVars[BLOCK_B].silenceBuf->data, 0, AUDIO_BUFFER_OUT_SIZE);

  audioOutSetupHw(SAI1_Block_A, saiClkCfg[BLOCK_A].clkSrc, mapFreq(saiClkCfg[BLOCK_A].freq), saiClkCfg[BLOCK_A].div, SET_DSP);
  audioOutSetupHw(SAI1_Block_B, saiClkCfg[BLOCK_B].clkSrc, mapFreq(saiClkCfg[BLOCK_B].freq), saiClkCfg[BLOCK_B].div, SET_DSP);
  audioPlay(SAI1_Block_A, (uint32_t)internalDmaVars[BLOCK_A].silenceBuf->data, (uint32_t)internalDmaVars[BLOCK_A].silenceBuf->data, AUDIO_BUFFER_OUT_SIZE / 2);
  audioPlay(SAI1_Block_B, (uint32_t)internalDmaVars[BLOCK_B].silenceBuf->data, (uint32_t)internalDmaVars[BLOCK_B].silenceBuf->data, AUDIO_BUFFER_OUT_SIZE / 2);
 80144ee:	f7ff bdb7 	b.w	8014060 <audioPlay.constprop.0>
 80144f2:	bf00      	nop
 80144f4:	100023a0 	.word	0x100023a0
 80144f8:	40015804 	.word	0x40015804
 80144fc:	40015824 	.word	0x40015824

08014500 <saiReconfigure>:
	}								\
  }


int saiReconfigure(int outMask, saiClkSource_t clkSrc, int freq, uint8_t div)
{
 8014500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  //Check if anything changed
  {
    int block = (outMask&1)?BLOCK_B:BLOCK_A;
    if (clkSrc == saiClkCfg[block].clkSrc && freq == saiClkCfg[block].freq && div == saiClkCfg[block].div)
 8014504:	4c50      	ldr	r4, [pc, #320]	; (8014648 <saiReconfigure+0x148>)
	}								\
  }


int saiReconfigure(int outMask, saiClkSource_t clkSrc, int freq, uint8_t div)
{
 8014506:	461f      	mov	r7, r3

  //Check if anything changed
  {
    int block = (outMask&1)?BLOCK_B:BLOCK_A;
 8014508:	f000 0601 	and.w	r6, r0, #1
    if (clkSrc == saiClkCfg[block].clkSrc && freq == saiClkCfg[block].freq && div == saiClkCfg[block].div)
 801450c:	230c      	movs	r3, #12
 801450e:	fb03 4306 	mla	r3, r3, r6, r4
	}								\
  }


int saiReconfigure(int outMask, saiClkSource_t clkSrc, int freq, uint8_t div)
{
 8014512:	4690      	mov	r8, r2

  //Check if anything changed
  {
    int block = (outMask&1)?BLOCK_B:BLOCK_A;
    if (clkSrc == saiClkCfg[block].clkSrc && freq == saiClkCfg[block].freq && div == saiClkCfg[block].div)
 8014514:	f893 2020 	ldrb.w	r2, [r3, #32]
 8014518:	428a      	cmp	r2, r1
	}								\
  }


int saiReconfigure(int outMask, saiClkSource_t clkSrc, int freq, uint8_t div)
{
 801451a:	4681      	mov	r9, r0
 801451c:	460d      	mov	r5, r1

  //Check if anything changed
  {
    int block = (outMask&1)?BLOCK_B:BLOCK_A;
    if (clkSrc == saiClkCfg[block].clkSrc && freq == saiClkCfg[block].freq && div == saiClkCfg[block].div)
 801451e:	d107      	bne.n	8014530 <saiReconfigure+0x30>
 8014520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014522:	4542      	cmp	r2, r8
 8014524:	d104      	bne.n	8014530 <saiReconfigure+0x30>
 8014526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801452a:	42bb      	cmp	r3, r7
 801452c:	f000 8085 	beq.w	801463a <saiReconfigure+0x13a>
      return 0;
  }

  //Disable SAI(s)
  FOR_EACH_SAI(
 8014530:	b11e      	cbz	r6, 801453a <saiReconfigure+0x3a>
 8014532:	2100      	movs	r1, #0
 8014534:	4845      	ldr	r0, [pc, #276]	; (801464c <saiReconfigure+0x14c>)
 8014536:	f7fe fc31 	bl	8012d9c <SAI_Cmd>
 801453a:	f3c9 0a40 	ubfx	sl, r9, #1, #1
 801453e:	f1ba 0f00 	cmp.w	sl, #0
 8014542:	d003      	beq.n	801454c <saiReconfigure+0x4c>
 8014544:	2100      	movs	r1, #0
 8014546:	4842      	ldr	r0, [pc, #264]	; (8014650 <saiReconfigure+0x150>)
 8014548:	f7fe fc28 	bl	8012d9c <SAI_Cmd>
  {
    SAI_Cmd(SAI1_Block_x, DISABLE);
  });

  //Wait for SAI disabled
  FOR_EACH_SAI
 801454c:	b166      	cbz	r6, 8014568 <saiReconfigure+0x68>
 801454e:	f44f 7bfa 	mov.w	fp, #500	; 0x1f4
 8014552:	483e      	ldr	r0, [pc, #248]	; (801464c <saiReconfigure+0x14c>)
 8014554:	f7fe fcba 	bl	8012ecc <SAI_GetCmdStatus>
 8014558:	b130      	cbz	r0, 8014568 <saiReconfigure+0x68>
 801455a:	f1bb 0b01 	subs.w	fp, fp, #1
 801455e:	d06f      	beq.n	8014640 <saiReconfigure+0x140>
 8014560:	2001      	movs	r0, #1
 8014562:	f7f6 fad1 	bl	800ab08 <vTaskDelay>
 8014566:	e7f4      	b.n	8014552 <saiReconfigure+0x52>
 8014568:	f1ba 0f00 	cmp.w	sl, #0
 801456c:	d00c      	beq.n	8014588 <saiReconfigure+0x88>
 801456e:	f44f 7bfa 	mov.w	fp, #500	; 0x1f4
 8014572:	4837      	ldr	r0, [pc, #220]	; (8014650 <saiReconfigure+0x150>)
 8014574:	f7fe fcaa 	bl	8012ecc <SAI_GetCmdStatus>
 8014578:	b130      	cbz	r0, 8014588 <saiReconfigure+0x88>
 801457a:	f1bb 0b01 	subs.w	fp, fp, #1
 801457e:	d05f      	beq.n	8014640 <saiReconfigure+0x140>
 8014580:	2001      	movs	r0, #1
 8014582:	f7f6 fac1 	bl	800ab08 <vTaskDelay>
 8014586:	e7f4      	b.n	8014572 <saiReconfigure+0x72>
    if (timeoutCnt == 0) return -1;
  });

  clkSrcFreq[clkSrc] = freq;

  FOR_EACH_SAI
 8014588:	b1de      	cbz	r6, 80145c2 <saiReconfigure+0xc2>
 801458a:	4640      	mov	r0, r8
 801458c:	f7ff fbb4 	bl	8013cf8 <mapFreq>
 8014590:	463b      	mov	r3, r7
 8014592:	4683      	mov	fp, r0
 8014594:	4602      	mov	r2, r0
 8014596:	4629      	mov	r1, r5
 8014598:	482c      	ldr	r0, [pc, #176]	; (801464c <saiReconfigure+0x14c>)
 801459a:	f7ff fc75 	bl	8013e88 <setupAudioClocks>
 801459e:	f1bb 0f08 	cmp.w	fp, #8
 80145a2:	d106      	bne.n	80145b2 <saiReconfigure+0xb2>
 80145a4:	f884 5020 	strb.w	r5, [r4, #32]
 80145a8:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 80145ac:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
 80145b0:	e007      	b.n	80145c2 <saiReconfigure+0xc2>
 80145b2:	4b28      	ldr	r3, [pc, #160]	; (8014654 <saiReconfigure+0x154>)
 80145b4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80145b8:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80145bc:	f7fc fb0e 	bl	8010bdc <RCC_SAIBlockACLKConfig>
 80145c0:	e7f0      	b.n	80145a4 <saiReconfigure+0xa4>
 80145c2:	f1ba 0f00 	cmp.w	sl, #0
 80145c6:	d019      	beq.n	80145fc <saiReconfigure+0xfc>
 80145c8:	4640      	mov	r0, r8
 80145ca:	f7ff fb95 	bl	8013cf8 <mapFreq>
 80145ce:	463b      	mov	r3, r7
 80145d0:	4683      	mov	fp, r0
 80145d2:	4602      	mov	r2, r0
 80145d4:	4629      	mov	r1, r5
 80145d6:	481e      	ldr	r0, [pc, #120]	; (8014650 <saiReconfigure+0x150>)
 80145d8:	f7ff fc56 	bl	8013e88 <setupAudioClocks>
 80145dc:	f1bb 0f08 	cmp.w	fp, #8
 80145e0:	d006      	beq.n	80145f0 <saiReconfigure+0xf0>
 80145e2:	4b1c      	ldr	r3, [pc, #112]	; (8014654 <saiReconfigure+0x154>)
 80145e4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80145e8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80145ec:	f7fc fb10 	bl	8010c10 <RCC_SAIBlockBCLKConfig>
 80145f0:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80145f4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 80145f8:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 80145fc:	2500      	movs	r5, #0
    saiClkCfg[block].clkSrc = clkSrc;
    saiClkCfg[block].freq = freq;
    saiClkCfg[block].div = div;
  });

  FOR_EACH_SAI
 80145fe:	fa49 f305 	asr.w	r3, r9, r5
 8014602:	07db      	lsls	r3, r3, #31
 8014604:	d50a      	bpl.n	801461c <saiReconfigure+0x11c>
 8014606:	012f      	lsls	r7, r5, #4
 8014608:	59e0      	ldr	r0, [r4, r7]
 801460a:	f000 fc73 	bl	8014ef4 <bDequeue>
 801460e:	b110      	cbz	r0, 8014616 <saiReconfigure+0x116>
 8014610:	f000 ff0e 	bl	8015430 <bFree>
 8014614:	e7f8      	b.n	8014608 <saiReconfigure+0x108>
 8014616:	b2e8      	uxtb	r0, r5
 8014618:	f7ff fba6 	bl	8013d68 <audioDmaGetNextBuf>
 801461c:	3501      	adds	r5, #1
 801461e:	2d02      	cmp	r5, #2
 8014620:	d1ed      	bne.n	80145fe <saiReconfigure+0xfe>
    //And replace current with silence
    audioDmaGetNextBuf(block);
  });

  //Enable SAI(s)
  FOR_EACH_SAI
 8014622:	b11e      	cbz	r6, 801462c <saiReconfigure+0x12c>
 8014624:	2101      	movs	r1, #1
 8014626:	4809      	ldr	r0, [pc, #36]	; (801464c <saiReconfigure+0x14c>)
 8014628:	f7fe fbb8 	bl	8012d9c <SAI_Cmd>
 801462c:	f1ba 0f00 	cmp.w	sl, #0
 8014630:	d003      	beq.n	801463a <saiReconfigure+0x13a>
 8014632:	2101      	movs	r1, #1
 8014634:	4806      	ldr	r0, [pc, #24]	; (8014650 <saiReconfigure+0x150>)
 8014636:	f7fe fbb1 	bl	8012d9c <SAI_Cmd>
  (
  {
    SAI_Cmd(SAI1_Block_x, ENABLE);
  });

  return 0;
 801463a:	2000      	movs	r0, #0
 801463c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
    SAI_Cmd(SAI1_Block_x, DISABLE);
  });

  //Wait for SAI disabled
  FOR_EACH_SAI
 8014640:	f04f 30ff 	mov.w	r0, #4294967295
  {
    SAI_Cmd(SAI1_Block_x, ENABLE);
  });

  return 0;
}
 8014644:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014648:	100023a0 	.word	0x100023a0
 801464c:	40015804 	.word	0x40015804
 8014650:	40015824 	.word	0x40015824
 8014654:	0803ea64 	.word	0x0803ea64

08014658 <inputAudioI2S_IRQHandler>:


//////////////////////// ISR ////////////////////////////

void inputAudioI2S_IRQHandler(void)
{
 8014658:	b513      	push	{r0, r1, r4, lr}
  static signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;

  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(constGlobHwDma->DMAy_Streamx, constGlobHwDma->dmaFlagTCIF) != RESET)
 801465a:	4c2a      	ldr	r4, [pc, #168]	; (8014704 <inputAudioI2S_IRQHandler+0xac>)
 801465c:	6823      	ldr	r3, [r4, #0]
 801465e:	f8d3 101d 	ldr.w	r1, [r3, #29]
 8014662:	6818      	ldr	r0, [r3, #0]
 8014664:	f7fd fe48 	bl	80122f8 <DMA_GetFlagStatus>
 8014668:	b330      	cbz	r0, 80146b8 <inputAudioI2S_IRQHandler+0x60>
    {
      ///////////////////////////////////////////////////////////////////////////////////////////////////////
      uint32_t currMem = DMA_GetCurrentMemoryTarget(constGlobHwDma->DMAy_Streamx);
 801466a:	6823      	ldr	r3, [r4, #0]
 801466c:	6818      	ldr	r0, [r3, #0]
 801466e:	f7fd fdc7 	bl	8012200 <DMA_GetCurrentMemoryTarget>
      //#warning Implement idea: use 2 element tables for MxAR and DMA_Memory_x to avoid if conditons
      if (currMem)
        {
          uint32_t replaceAddr = constGlobHwDma->DMAy_Streamx->M0AR;
 8014672:	4622      	mov	r2, r4
 8014674:	f852 3b04 	ldr.w	r3, [r2], #4
 8014678:	6819      	ldr	r1, [r3, #0]
  if (DMA_GetFlagStatus(constGlobHwDma->DMAy_Streamx, constGlobHwDma->dmaFlagTCIF) != RESET)
    {
      ///////////////////////////////////////////////////////////////////////////////////////////////////////
      uint32_t currMem = DMA_GetCurrentMemoryTarget(constGlobHwDma->DMAy_Streamx);
      //#warning Implement idea: use 2 element tables for MxAR and DMA_Memory_x to avoid if conditons
      if (currMem)
 801467a:	b148      	cbz	r0, 8014690 <inputAudioI2S_IRQHandler+0x38>
        {
          uint32_t replaceAddr = constGlobHwDma->DMAy_Streamx->M0AR;
 801467c:	68c9      	ldr	r1, [r1, #12]
 801467e:	9101      	str	r1, [sp, #4]
          AUDIO_TransferComplete_CallBack( &replaceAddr , constGlobHwDma->DMAy_Streamx->NDTR, &xHigherPriorityTaskWoken);
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	a801      	add	r0, sp, #4
 8014684:	6859      	ldr	r1, [r3, #4]
 8014686:	f000 fb73 	bl	8014d70 <AUDIO_TransferComplete_CallBack>
          DMA_MemoryTargetConfig(constGlobHwDma->DMAy_Streamx, replaceAddr, DMA_Memory_0);
 801468a:	6823      	ldr	r3, [r4, #0]
 801468c:	2200      	movs	r2, #0
 801468e:	e009      	b.n	80146a4 <inputAudioI2S_IRQHandler+0x4c>
        }
      else
        {
          uint32_t replaceAddr = constGlobHwDma->DMAy_Streamx->M1AR;
 8014690:	6909      	ldr	r1, [r1, #16]
 8014692:	9101      	str	r1, [sp, #4]
          AUDIO_TransferComplete_CallBack( &replaceAddr , constGlobHwDma->DMAy_Streamx->NDTR, &xHigherPriorityTaskWoken);
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	a801      	add	r0, sp, #4
 8014698:	6859      	ldr	r1, [r3, #4]
 801469a:	f000 fb69 	bl	8014d70 <AUDIO_TransferComplete_CallBack>
          DMA_MemoryTargetConfig(constGlobHwDma->DMAy_Streamx, replaceAddr, DMA_Memory_1);
 801469e:	6823      	ldr	r3, [r4, #0]
 80146a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80146a4:	6818      	ldr	r0, [r3, #0]
 80146a6:	9901      	ldr	r1, [sp, #4]
 80146a8:	f7fd fd5e 	bl	8012168 <DMA_MemoryTargetConfig>
        }

      /* Clear the Interrupt flag */
      DMA_ClearFlag(constGlobHwDma->DMAy_Streamx, constGlobHwDma->dmaFlagTCIF);
 80146ac:	6823      	ldr	r3, [r4, #0]
 80146ae:	f8d3 101d 	ldr.w	r1, [r3, #29]
 80146b2:	6818      	ldr	r0, [r3, #0]
 80146b4:	f7fd ff1e 	bl	80124f4 <DMA_ClearFlag>
  //     DMA_ClearFlag(constGlobHwDma->DMAy_Streamx, AUDIO_MAL_DMA_FLAG_HT);
  //   }


  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(constGlobHwDma->DMAy_Streamx, constGlobHwDma->dmaFlagTEIF) != RESET) ||
 80146b8:	6823      	ldr	r3, [r4, #0]
 80146ba:	f8d3 1021 	ldr.w	r1, [r3, #33]	; 0x21
 80146be:	6818      	ldr	r0, [r3, #0]
 80146c0:	f7fd fe1a 	bl	80122f8 <DMA_GetFlagStatus>
 80146c4:	b160      	cbz	r0, 80146e0 <inputAudioI2S_IRQHandler+0x88>
      (DMA_GetFlagStatus(constGlobHwDma->DMAy_Streamx, constGlobHwDma->dmaFlagDMEIF) != RESET))

    {
      // Manage the error generated on DMA FIFO: This function
      //   should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h)
      I2S_AUDIO_Error_CallBack((uint32_t *)NULL);
 80146c6:	2000      	movs	r0, #0
 80146c8:	f000 fbac 	bl	8014e24 <I2S_AUDIO_Error_CallBack>

      /* Clear the Interrupt flag */
      DMA_ClearFlag(constGlobHwDma->DMAy_Streamx, constGlobHwDma->dmaFlagTEIF |
 80146cc:	6823      	ldr	r3, [r4, #0]
 80146ce:	f8d3 1021 	ldr.w	r1, [r3, #33]	; 0x21
                    //AUDIO_MAL_DMA_FLAG_FE |
                    constGlobHwDma->dmaFlagDMEIF);
 80146d2:	f8d3 2029 	ldr.w	r2, [r3, #41]	; 0x29
      // Manage the error generated on DMA FIFO: This function
      //   should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h)
      I2S_AUDIO_Error_CallBack((uint32_t *)NULL);

      /* Clear the Interrupt flag */
      DMA_ClearFlag(constGlobHwDma->DMAy_Streamx, constGlobHwDma->dmaFlagTEIF |
 80146d6:	6818      	ldr	r0, [r3, #0]
 80146d8:	4311      	orrs	r1, r2
 80146da:	f7fd ff0b 	bl	80124f4 <DMA_ClearFlag>
 80146de:	e008      	b.n	80146f2 <inputAudioI2S_IRQHandler+0x9a>


  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(constGlobHwDma->DMAy_Streamx, constGlobHwDma->dmaFlagTEIF) != RESET) ||
      //(DMA_GetFlagStatus(constGlobHwDma->DMAy_Streamx, AUDIO_MAL_DMA_FLAG_FE) != RESET) ||
      (DMA_GetFlagStatus(constGlobHwDma->DMAy_Streamx, constGlobHwDma->dmaFlagDMEIF) != RESET))
 80146e0:	4b08      	ldr	r3, [pc, #32]	; (8014704 <inputAudioI2S_IRQHandler+0xac>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	f8d3 1029 	ldr.w	r1, [r3, #41]	; 0x29
 80146e8:	6818      	ldr	r0, [r3, #0]
 80146ea:	f7fd fe05 	bl	80122f8 <DMA_GetFlagStatus>
  //     DMA_ClearFlag(constGlobHwDma->DMAy_Streamx, AUDIO_MAL_DMA_FLAG_HT);
  //   }


  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(constGlobHwDma->DMAy_Streamx, constGlobHwDma->dmaFlagTEIF) != RESET) ||
 80146ee:	2800      	cmp	r0, #0
 80146f0:	d1e9      	bne.n	80146c6 <inputAudioI2S_IRQHandler+0x6e>
      DMA_ClearFlag(constGlobHwDma->DMAy_Streamx, constGlobHwDma->dmaFlagTEIF |
                    //AUDIO_MAL_DMA_FLAG_FE |
                    constGlobHwDma->dmaFlagDMEIF);
    }

  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80146f2:	6863      	ldr	r3, [r4, #4]
 80146f4:	b11b      	cbz	r3, 80146fe <inputAudioI2S_IRQHandler+0xa6>
 80146f6:	4b04      	ldr	r3, [pc, #16]	; (8014708 <inputAudioI2S_IRQHandler+0xb0>)
 80146f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146fc:	601a      	str	r2, [r3, #0]
}
 80146fe:	b002      	add	sp, #8
 8014700:	bd10      	pop	{r4, pc}
 8014702:	bf00      	nop
 8014704:	10002d3c 	.word	0x10002d3c
 8014708:	e000ed04 	.word	0xe000ed04

0801470c <I2S_AudioInterfaceInit>:
  * @param  SPIx: Selects one of two possible SPIx: 2,3.
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
  * @retval None
  */
void I2S_AudioInterfaceInit( SPI_TypeDef *SPIx )
{
 801470c:	b570      	push	{r4, r5, r6, lr}
  I2S_InitTypeDef I2S_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  switch ((uint32_t)SPIx)
 801470e:	4b61      	ldr	r3, [pc, #388]	; (8014894 <I2S_AudioInterfaceInit+0x188>)
 8014710:	4298      	cmp	r0, r3
  * @param  SPIx: Selects one of two possible SPIx: 2,3.
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
  * @retval None
  */
void I2S_AudioInterfaceInit( SPI_TypeDef *SPIx )
{
 8014712:	b096      	sub	sp, #88	; 0x58
 8014714:	4605      	mov	r5, r0
  I2S_InitTypeDef I2S_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  switch ((uint32_t)SPIx)
 8014716:	d009      	beq.n	801472c <I2S_AudioInterfaceInit+0x20>
 8014718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801471c:	4298      	cmp	r0, r3
 801471e:	d119      	bne.n	8014754 <I2S_AudioInterfaceInit+0x48>
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
      massert(0); // no I2S2_DMA position in table with constant DMA settings
      constGlobHwDma = &(dmaStreamconstSettings[I2S3_DMA]);  // for dma settings
      break;
    case (uint32_t)SPI3:
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
 8014720:	2101      	movs	r1, #1
 8014722:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8014726:	f7fc fab1 	bl	8010c8c <RCC_APB1PeriphClockCmd>
 801472a:	e00f      	b.n	801474c <I2S_AudioInterfaceInit+0x40>

  /* Enable the CODEC_I2S peripheral clock */
  switch ((uint32_t)SPIx)
    {
    case (uint32_t)SPI2:
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 801472c:	2101      	movs	r1, #1
 801472e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8014732:	f7fc faab 	bl	8010c8c <RCC_APB1PeriphClockCmd>
      massert(0); // no I2S2_DMA position in table with constant DMA settings
 8014736:	4b58      	ldr	r3, [pc, #352]	; (8014898 <I2S_AudioInterfaceInit+0x18c>)
 8014738:	4958      	ldr	r1, [pc, #352]	; (801489c <I2S_AudioInterfaceInit+0x190>)
 801473a:	4859      	ldr	r0, [pc, #356]	; (80148a0 <I2S_AudioInterfaceInit+0x194>)
 801473c:	2231      	movs	r2, #49	; 0x31
 801473e:	f7f4 fa73 	bl	8008c28 <xprintf>
 8014742:	2301      	movs	r3, #1
 8014744:	9300      	str	r3, [sp, #0]
 8014746:	9b00      	ldr	r3, [sp, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d1fc      	bne.n	8014746 <I2S_AudioInterfaceInit+0x3a>
      constGlobHwDma = &(dmaStreamconstSettings[I2S3_DMA]);  // for dma settings
      break;
    case (uint32_t)SPI3:
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
      constGlobHwDma = &(dmaStreamconstSettings[I2S3_DMA]);  // for dma settings
 801474c:	4b55      	ldr	r3, [pc, #340]	; (80148a4 <I2S_AudioInterfaceInit+0x198>)
 801474e:	4a56      	ldr	r2, [pc, #344]	; (80148a8 <I2S_AudioInterfaceInit+0x19c>)
 8014750:	601a      	str	r2, [r3, #0]
      break;
 8014752:	e00a      	b.n	801476a <I2S_AudioInterfaceInit+0x5e>
    default:
      //perph not supported
      massert(0);
 8014754:	4b50      	ldr	r3, [pc, #320]	; (8014898 <I2S_AudioInterfaceInit+0x18c>)
 8014756:	4951      	ldr	r1, [pc, #324]	; (801489c <I2S_AudioInterfaceInit+0x190>)
 8014758:	4851      	ldr	r0, [pc, #324]	; (80148a0 <I2S_AudioInterfaceInit+0x194>)
 801475a:	223a      	movs	r2, #58	; 0x3a
 801475c:	f7f4 fa64 	bl	8008c28 <xprintf>
 8014760:	2301      	movs	r3, #1
 8014762:	9301      	str	r3, [sp, #4]
 8014764:	9b01      	ldr	r3, [sp, #4]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d1fc      	bne.n	8014764 <I2S_AudioInterfaceInit+0x58>
    }


  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(SPIx);
 801476a:	4628      	mov	r0, r5
 801476c:	f7fc fe5c 	bl	8011428 <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = 48000;  // not used in slaveRX
 8014770:	f64b 3380 	movw	r3, #48000	; 0xbb80
  I2S_InitStructure.I2S_Standard = I2S_Standard_Phillips;
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_32b;
 8014774:	2205      	movs	r2, #5
    }


  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(SPIx);
  I2S_InitStructure.I2S_AudioFreq = 48000;  // not used in slaveRX
 8014776:	9305      	str	r3, [sp, #20]
  I2S_InitStructure.I2S_Standard = I2S_Standard_Phillips;
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_32b;
 8014778:	f8ad 2010 	strh.w	r2, [sp, #16]


  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(SPIx);
  I2S_InitStructure.I2S_AudioFreq = 48000;  // not used in slaveRX
  I2S_InitStructure.I2S_Standard = I2S_Standard_Phillips;
 801477c:	2300      	movs	r3, #0
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_32b;
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
  I2S_InitStructure.I2S_Mode = I2S_Mode_SlaveRx;
 801477e:	f44f 7280 	mov.w	r2, #256	; 0x100
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Disable;

  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(SPIx, &I2S_InitStructure);
 8014782:	a903      	add	r1, sp, #12
 8014784:	4628      	mov	r0, r5
  (void)SPI_I2S_ReceiveData(SPIx);

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  //Audio_MAL_Init();
  I2S_DataStreamInit(SPIx, constGlobHwDma);
 8014786:	4e47      	ldr	r6, [pc, #284]	; (80148a4 <I2S_AudioInterfaceInit+0x198>)


  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(SPIx);
  I2S_InitStructure.I2S_AudioFreq = 48000;  // not used in slaveRX
  I2S_InitStructure.I2S_Standard = I2S_Standard_Phillips;
 8014788:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_32b;
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 801478c:	f8ad 3018 	strh.w	r3, [sp, #24]
  I2S_InitStructure.I2S_Mode = I2S_Mode_SlaveRx;
 8014790:	f8ad 200c 	strh.w	r2, [sp, #12]
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8014794:	f8ad 3012 	strh.w	r3, [sp, #18]

  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(SPIx, &I2S_InitStructure);
 8014798:	f7fc ff3c 	bl	8011614 <I2S_Init>
  (void)SPI_I2S_ReceiveData(SPIx);
 801479c:	4628      	mov	r0, r5
 801479e:	f7fd f869 	bl	8011874 <SPI_I2S_ReceiveData>

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  //Audio_MAL_Init();
  I2S_DataStreamInit(SPIx, constGlobHwDma);
 80147a2:	6834      	ldr	r4, [r6, #0]
  * @retval None
  */
static int registered = 0;
static void I2S_DataStreamInit(SPI_TypeDef *SPIx, constDMAsettings *hwDma)
{
  massert(SPIx);
 80147a4:	2d00      	cmp	r5, #0
 80147a6:	d03e      	beq.n	8014826 <I2S_AudioInterfaceInit+0x11a>
  DMA_InitTypeDef DMA_InitStructure;

  /* Enable the DMA clock */
  RCC_AHB1PeriphClockCmd(hwDma->RCC_AHB_DMA_Clock, ENABLE);
 80147a8:	2101      	movs	r1, #1
 80147aa:	68a0      	ldr	r0, [r4, #8]
 80147ac:	f7fc fa4a 	bl	8010c44 <RCC_AHB1PeriphClockCmd>

  /* Configure the DMA Stream */
  DMA_Cmd(hwDma->DMAy_Streamx, DISABLE);
 80147b0:	2100      	movs	r1, #0
 80147b2:	6820      	ldr	r0, [r4, #0]
 80147b4:	f7fd fba6 	bl	8011f04 <DMA_Cmd>
  DMA_DeInit(hwDma->DMAy_Streamx);
 80147b8:	6820      	ldr	r0, [r4, #0]
 80147ba:	f7fd f9dd 	bl	8011b78 <DMA_DeInit>
  /* Set the parameters to be configured */
  DMA_InitStructure.DMA_Channel = hwDma->DMA_Channel_x;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SPIx->DR);
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  DMA_InitStructure.DMA_BufferSize = (uint16_t)0xFFFE;      /* This field will be configured in play function */
 80147be:	f64f 72fe 	movw	r2, #65534	; 0xfffe

  /* Configure the DMA Stream */
  DMA_Cmd(hwDma->DMAy_Streamx, DISABLE);
  DMA_DeInit(hwDma->DMAy_Streamx);
  /* Set the parameters to be configured */
  DMA_InitStructure.DMA_Channel = hwDma->DMA_Channel_x;
 80147c2:	6863      	ldr	r3, [r4, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SPIx->DR);
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  DMA_InitStructure.DMA_BufferSize = (uint16_t)0xFFFE;      /* This field will be configured in play function */
 80147c4:	920b      	str	r2, [sp, #44]	; 0x2c
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80147c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80147ca:	920d      	str	r2, [sp, #52]	; 0x34
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80147cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80147d0:	920e      	str	r2, [sp, #56]	; 0x38
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80147d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000

  /* Configure the DMA Stream */
  DMA_Cmd(hwDma->DMAy_Streamx, DISABLE);
  DMA_DeInit(hwDma->DMAy_Streamx);
  /* Set the parameters to be configured */
  DMA_InitStructure.DMA_Channel = hwDma->DMA_Channel_x;
 80147d6:	9307      	str	r3, [sp, #28]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  DMA_InitStructure.DMA_BufferSize = (uint16_t)0xFFFE;      /* This field will be configured in play function */
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80147d8:	920f      	str	r2, [sp, #60]	; 0x3c
  /* Configure the DMA Stream */
  DMA_Cmd(hwDma->DMAy_Streamx, DISABLE);
  DMA_DeInit(hwDma->DMAy_Streamx);
  /* Set the parameters to be configured */
  DMA_InitStructure.DMA_Channel = hwDma->DMA_Channel_x;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SPIx->DR);
 80147da:	f105 030c 	add.w	r3, r5, #12
  DMA_InitStructure.DMA_BufferSize = (uint16_t)0xFFFE;      /* This field will be configured in play function */
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80147de:	f44f 7280 	mov.w	r2, #256	; 0x100
  /* Configure the DMA Stream */
  DMA_Cmd(hwDma->DMAy_Streamx, DISABLE);
  DMA_DeInit(hwDma->DMAy_Streamx);
  /* Set the parameters to be configured */
  DMA_InitStructure.DMA_Channel = hwDma->DMA_Channel_x;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SPIx->DR);
 80147e2:	9308      	str	r3, [sp, #32]
  DMA_InitStructure.DMA_BufferSize = (uint16_t)0xFFFE;      /* This field will be configured in play function */
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80147e4:	9210      	str	r2, [sp, #64]	; 0x40
  DMA_Cmd(hwDma->DMAy_Streamx, DISABLE);
  DMA_DeInit(hwDma->DMAy_Streamx);
  /* Set the parameters to be configured */
  DMA_InitStructure.DMA_Channel = hwDma->DMA_Channel_x;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SPIx->DR);
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 80147e6:	2300      	movs	r3, #0
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80147e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  DMA_Cmd(hwDma->DMAy_Streamx, DISABLE);
  DMA_DeInit(hwDma->DMAy_Streamx);
  /* Set the parameters to be configured */
  DMA_InitStructure.DMA_Channel = hwDma->DMA_Channel_x;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SPIx->DR);
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 80147ec:	9309      	str	r3, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 80147ee:	930a      	str	r3, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_BufferSize = (uint16_t)0xFFFE;      /* This field will be configured in play function */
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80147f0:	930c      	str	r3, [sp, #48]	; 0x30
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80147f2:	9312      	str	r3, [sp, #72]	; 0x48
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80147f4:	9313      	str	r3, [sp, #76]	; 0x4c
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80147f6:	9314      	str	r3, [sp, #80]	; 0x50
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80147f8:	9315      	str	r3, [sp, #84]	; 0x54
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80147fa:	9211      	str	r2, [sp, #68]	; 0x44
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  DMA_Init(hwDma->DMAy_Streamx, &DMA_InitStructure);
 80147fc:	a907      	add	r1, sp, #28
 80147fe:	6820      	ldr	r0, [r4, #0]
 8014800:	f7fd fa80 	bl	8011d04 <DMA_Init>

  DMA_DoubleBufferModeCmd(hwDma->DMAy_Streamx, ENABLE);
 8014804:	2101      	movs	r1, #1
 8014806:	6820      	ldr	r0, [r4, #0]
 8014808:	f7fd fc5e 	bl	80120c8 <DMA_DoubleBufferModeCmd>

  DMA_ITConfig(hwDma->DMAy_Streamx, DMA_IT_TC, ENABLE);
 801480c:	2201      	movs	r2, #1
 801480e:	2110      	movs	r1, #16
 8014810:	6820      	ldr	r0, [r4, #0]
 8014812:	f7fd fed9 	bl	80125c8 <DMA_ITConfig>
  // DMA_ITConfig(hwDma->DMAy_Streamx, DMA_IT_HT, ENABLE);
  //DMA_ITConfig(hwDma->DMAy_Streamx, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
  DMA_ITConfig(hwDma->DMAy_Streamx, DMA_IT_TE | DMA_IT_DME, ENABLE);
 8014816:	2201      	movs	r2, #1
 8014818:	2106      	movs	r1, #6
 801481a:	6820      	ldr	r0, [r4, #0]
 801481c:	f7fd fed4 	bl	80125c8 <DMA_ITConfig>

  if(!registered)
 8014820:	68b3      	ldr	r3, [r6, #8]
 8014822:	bb7b      	cbnz	r3, 8014884 <I2S_AudioInterfaceInit+0x178>
 8014824:	e00b      	b.n	801483e <I2S_AudioInterfaceInit+0x132>
  * @retval None
  */
static int registered = 0;
static void I2S_DataStreamInit(SPI_TypeDef *SPIx, constDMAsettings *hwDma)
{
  massert(SPIx);
 8014826:	4b21      	ldr	r3, [pc, #132]	; (80148ac <I2S_AudioInterfaceInit+0x1a0>)
 8014828:	4921      	ldr	r1, [pc, #132]	; (80148b0 <I2S_AudioInterfaceInit+0x1a4>)
 801482a:	481d      	ldr	r0, [pc, #116]	; (80148a0 <I2S_AudioInterfaceInit+0x194>)
 801482c:	2259      	movs	r2, #89	; 0x59
 801482e:	f7f4 f9fb 	bl	8008c28 <xprintf>
 8014832:	2301      	movs	r3, #1
 8014834:	9302      	str	r3, [sp, #8]
 8014836:	9b02      	ldr	r3, [sp, #8]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d1fc      	bne.n	8014836 <I2S_AudioInterfaceInit+0x12a>
 801483c:	e7b4      	b.n	80147a8 <I2S_AudioInterfaceInit+0x9c>
  //DMA_ITConfig(hwDma->DMAy_Streamx, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
  DMA_ITConfig(hwDma->DMAy_Streamx, DMA_IT_TE | DMA_IT_DME, ENABLE);

  if(!registered)
    {
      registerIRQ(hwDma->DMAx_Streamx_IRQn, inputAudioI2S_IRQHandler);
 801483e:	491d      	ldr	r1, [pc, #116]	; (80148b4 <I2S_AudioInterfaceInit+0x1a8>)
 8014840:	f994 000c 	ldrsb.w	r0, [r4, #12]
 8014844:	f7f3 ff60 	bl	8008708 <registerIRQ>
      NVIC_SetPriority(hwDma->DMAx_Streamx_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY);
 8014848:	f994 300c 	ldrsb.w	r3, [r4, #12]
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 801484c:	2b00      	cmp	r3, #0
 801484e:	da06      	bge.n	801485e <I2S_AudioInterfaceInit+0x152>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8014850:	4a19      	ldr	r2, [pc, #100]	; (80148b8 <I2S_AudioInterfaceInit+0x1ac>)
 8014852:	f003 030f 	and.w	r3, r3, #15
 8014856:	441a      	add	r2, r3
 8014858:	23f0      	movs	r3, #240	; 0xf0
 801485a:	7613      	strb	r3, [r2, #24]
 801485c:	e006      	b.n	801486c <I2S_AudioInterfaceInit+0x160>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 801485e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8014862:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8014866:	22f0      	movs	r2, #240	; 0xf0
 8014868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ(hwDma->DMAx_Streamx_IRQn);
 801486c:	f994 300c 	ldrsb.w	r3, [r4, #12]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8014870:	4912      	ldr	r1, [pc, #72]	; (80148bc <I2S_AudioInterfaceInit+0x1b0>)
 8014872:	0958      	lsrs	r0, r3, #5
 8014874:	2201      	movs	r2, #1
 8014876:	f003 031f 	and.w	r3, r3, #31
 801487a:	fa02 f303 	lsl.w	r3, r2, r3
 801487e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
      registered = 1;
 8014882:	60b2      	str	r2, [r6, #8]
    }
  SPI_I2S_DMACmd(SPIx, SPI_I2S_DMAReq_Rx, ENABLE);
 8014884:	2201      	movs	r2, #1
 8014886:	4611      	mov	r1, r2
 8014888:	4628      	mov	r0, r5
 801488a:	f7fd f849 	bl	8011920 <SPI_I2S_DMACmd>

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  //Audio_MAL_Init();
  I2S_DataStreamInit(SPIx, constGlobHwDma);
}
 801488e:	b016      	add	sp, #88	; 0x58
 8014890:	bd70      	pop	{r4, r5, r6, pc}
 8014892:	bf00      	nop
 8014894:	40003800 	.word	0x40003800
 8014898:	0801d8c0 	.word	0x0801d8c0
 801489c:	0803ec87 	.word	0x0803ec87
 80148a0:	0801d5dd 	.word	0x0801d5dd
 80148a4:	10002d3c 	.word	0x10002d3c
 80148a8:	0803e451 	.word	0x0803e451
 80148ac:	0803ecb1 	.word	0x0803ecb1
 80148b0:	0803ec9e 	.word	0x0803ec9e
 80148b4:	08014659 	.word	0x08014659
 80148b8:	e000ecfc 	.word	0xe000ecfc
 80148bc:	e000e100 	.word	0xe000e100

080148c0 <I2S_AudioPlay>:
  SPI_I2S_DMACmd(SPIx, SPI_I2S_DMAReq_Rx, ENABLE);

}

void I2S_AudioPlay(SPI_TypeDef *SPIx, uint32_t Addr, uint32_t Addr2, uint32_t Size)
{
 80148c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Configure the buffer address and size */
  //Twice the DMA transfers for 32b in I2S3
  DMA_SetCurrDataCounter(constGlobHwDma->DMAy_Streamx, Size);
 80148c2:	4c18      	ldr	r4, [pc, #96]	; (8014924 <I2S_AudioPlay+0x64>)
  SPI_I2S_DMACmd(SPIx, SPI_I2S_DMAReq_Rx, ENABLE);

}

void I2S_AudioPlay(SPI_TypeDef *SPIx, uint32_t Addr, uint32_t Addr2, uint32_t Size)
{
 80148c4:	4616      	mov	r6, r2
  /* Configure the buffer address and size */
  //Twice the DMA transfers for 32b in I2S3
  DMA_SetCurrDataCounter(constGlobHwDma->DMAy_Streamx, Size);
 80148c6:	6822      	ldr	r2, [r4, #0]
  SPI_I2S_DMACmd(SPIx, SPI_I2S_DMAReq_Rx, ENABLE);

}

void I2S_AudioPlay(SPI_TypeDef *SPIx, uint32_t Addr, uint32_t Addr2, uint32_t Size)
{
 80148c8:	460f      	mov	r7, r1
 80148ca:	4605      	mov	r5, r0
  /* Configure the buffer address and size */
  //Twice the DMA transfers for 32b in I2S3
  DMA_SetCurrDataCounter(constGlobHwDma->DMAy_Streamx, Size);
 80148cc:	b299      	uxth	r1, r3
 80148ce:	6810      	ldr	r0, [r2, #0]
 80148d0:	f7fd fb68 	bl	8011fa4 <DMA_SetCurrDataCounter>

  DMA_MemoryTargetConfig(constGlobHwDma->DMAy_Streamx, Addr, DMA_Memory_0);
 80148d4:	6823      	ldr	r3, [r4, #0]
 80148d6:	2200      	movs	r2, #0
 80148d8:	6818      	ldr	r0, [r3, #0]
 80148da:	4639      	mov	r1, r7
 80148dc:	f7fd fc44 	bl	8012168 <DMA_MemoryTargetConfig>
  //DMA_MemoryTargetConfig(constGlobHwDma->DMAy_Streamx, Addr2, DMA_Memory_0);
  DMA_DoubleBufferModeConfig(constGlobHwDma->DMAy_Streamx, (uint32_t)Addr2, 0 );    // zero stands for first used buffer
 80148e0:	6823      	ldr	r3, [r4, #0]
 80148e2:	4631      	mov	r1, r6
 80148e4:	6818      	ldr	r0, [r3, #0]
 80148e6:	2200      	movs	r2, #0
 80148e8:	f7fd fb9c 	bl	8012024 <DMA_DoubleBufferModeConfig>

  /* Enable the I2S DMA Stream*/
  DMA_Cmd(constGlobHwDma->DMAy_Streamx, ENABLE);
 80148ec:	6823      	ldr	r3, [r4, #0]
 80148ee:	2101      	movs	r1, #1
 80148f0:	6818      	ldr	r0, [r3, #0]
 80148f2:	f7fd fb07 	bl	8011f04 <DMA_Cmd>

  /* If the I2S peripheral is still not enabled, enable it */

  //Wait for the beginning of WS high
  while(GPIO_ReadInputDataBit(I2S_INPUT_WS_GPIO, I2S_INPUT_WS_PIN) == 1);
 80148f6:	2110      	movs	r1, #16
 80148f8:	480b      	ldr	r0, [pc, #44]	; (8014928 <I2S_AudioPlay+0x68>)
 80148fa:	f7fb ff53 	bl	80107a4 <GPIO_ReadInputDataBit>
 80148fe:	2801      	cmp	r0, #1
 8014900:	d0f9      	beq.n	80148f6 <I2S_AudioPlay+0x36>
  while(GPIO_ReadInputDataBit(I2S_INPUT_WS_GPIO, I2S_INPUT_WS_PIN) == 0);
 8014902:	2110      	movs	r1, #16
 8014904:	4808      	ldr	r0, [pc, #32]	; (8014928 <I2S_AudioPlay+0x68>)
 8014906:	f7fb ff4d 	bl	80107a4 <GPIO_ReadInputDataBit>
 801490a:	2800      	cmp	r0, #0
 801490c:	d0f9      	beq.n	8014902 <I2S_AudioPlay+0x42>

  if ((SPIx->I2SCFGR & I2S_ENABLE_MASK) == 0)
 801490e:	8bab      	ldrh	r3, [r5, #28]
 8014910:	055b      	lsls	r3, r3, #21
 8014912:	d405      	bmi.n	8014920 <I2S_AudioPlay+0x60>
    {
      I2S_Cmd(SPIx, ENABLE);
 8014914:	4628      	mov	r0, r5
 8014916:	2101      	movs	r1, #1
    }
}
 8014918:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  while(GPIO_ReadInputDataBit(I2S_INPUT_WS_GPIO, I2S_INPUT_WS_PIN) == 1);
  while(GPIO_ReadInputDataBit(I2S_INPUT_WS_GPIO, I2S_INPUT_WS_PIN) == 0);

  if ((SPIx->I2SCFGR & I2S_ENABLE_MASK) == 0)
    {
      I2S_Cmd(SPIx, ENABLE);
 801491c:	f7fc bf7a 	b.w	8011814 <I2S_Cmd>
 8014920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014922:	bf00      	nop
 8014924:	10002d3c 	.word	0x10002d3c
 8014928:	40020000 	.word	0x40020000

0801492c <I2S_AudioStop>:
{
  I2S_Cmd(SPIx, DISABLE);
}

void I2S_AudioStop(SPI_TypeDef *SPIx)
{
 801492c:	b538      	push	{r3, r4, r5, lr}
  DMA_Cmd(constGlobHwDma->DMAy_Streamx, DISABLE);
 801492e:	4c0f      	ldr	r4, [pc, #60]	; (801496c <I2S_AudioStop+0x40>)
 8014930:	6823      	ldr	r3, [r4, #0]
{
  I2S_Cmd(SPIx, DISABLE);
}

void I2S_AudioStop(SPI_TypeDef *SPIx)
{
 8014932:	4605      	mov	r5, r0
  DMA_Cmd(constGlobHwDma->DMAy_Streamx, DISABLE);
 8014934:	2100      	movs	r1, #0
 8014936:	6818      	ldr	r0, [r3, #0]
 8014938:	f7fd fae4 	bl	8011f04 <DMA_Cmd>
  I2S_Cmd(SPIx, DISABLE);
 801493c:	2100      	movs	r1, #0
 801493e:	4628      	mov	r0, r5
 8014940:	f7fc ff68 	bl	8011814 <I2S_Cmd>
  while ((SPIx->I2SCFGR & I2S_ENABLE_MASK) != 0);
 8014944:	8bab      	ldrh	r3, [r5, #28]
 8014946:	055b      	lsls	r3, r3, #21
 8014948:	d4fc      	bmi.n	8014944 <I2S_AudioStop+0x18>
  bBuffer_t *buf = NULL;
  buf = bBufferFromData( (void *)constGlobHwDma->DMAy_Streamx->M0AR);
 801494a:	6823      	ldr	r3, [r4, #0]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	68d8      	ldr	r0, [r3, #12]
  bFree(buf);
 8014950:	3814      	subs	r0, #20
 8014952:	f000 fd6d 	bl	8015430 <bFree>
  buf = bBufferFromData( (void *)constGlobHwDma->DMAy_Streamx->M1AR);
 8014956:	6823      	ldr	r3, [r4, #0]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	6918      	ldr	r0, [r3, #16]
  bFree(buf);
 801495c:	3814      	subs	r0, #20
 801495e:	f000 fd67 	bl	8015430 <bFree>
  (void)SPI_I2S_ReceiveData(SPIx);
 8014962:	4628      	mov	r0, r5
}
 8014964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  bBuffer_t *buf = NULL;
  buf = bBufferFromData( (void *)constGlobHwDma->DMAy_Streamx->M0AR);
  bFree(buf);
  buf = bBufferFromData( (void *)constGlobHwDma->DMAy_Streamx->M1AR);
  bFree(buf);
  (void)SPI_I2S_ReceiveData(SPIx);
 8014968:	f7fc bf84 	b.w	8011874 <SPI_I2S_ReceiveData>
 801496c:	10002d3c 	.word	0x10002d3c

08014970 <I2S_AudioIsFER>:
}

int I2S_AudioIsFER(SPI_TypeDef *SPIx)
{
  return !!(SPIx->SR & (SPI_I2S_FLAG_TIFRFE | SPI_I2S_FLAG_OVR | I2S_FLAG_UDR));
 8014970:	8900      	ldrh	r0, [r0, #8]
 8014972:	f400 70a4 	and.w	r0, r0, #328	; 0x148
}
 8014976:	3000      	adds	r0, #0
 8014978:	bf18      	it	ne
 801497a:	2001      	movne	r0, #1
 801497c:	4770      	bx	lr
	...

08014980 <i2sSelectSource>:

static int rxChannel[2] = {-1, -1};
void i2sSelectSource(int wmNum, int input)
{
 8014980:	b570      	push	{r4, r5, r6, lr}
  if(rxChannel[wmNum] != input)
 8014982:	4d07      	ldr	r5, [pc, #28]	; (80149a0 <i2sSelectSource+0x20>)
 8014984:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8014988:	428b      	cmp	r3, r1
  return !!(SPIx->SR & (SPI_I2S_FLAG_TIFRFE | SPI_I2S_FLAG_OVR | I2S_FLAG_UDR));
}

static int rxChannel[2] = {-1, -1};
void i2sSelectSource(int wmNum, int input)
{
 801498a:	4604      	mov	r4, r0
 801498c:	460e      	mov	r6, r1
  if(rxChannel[wmNum] != input)
 801498e:	d006      	beq.n	801499e <i2sSelectSource+0x1e>
    {
      spdifChip_t wmChip = wmNum?WM8805_2:WM8805_1;
      WM88XXSetReceiverChannel(wmChip, input);
 8014990:	3000      	adds	r0, #0
 8014992:	bf18      	it	ne
 8014994:	2001      	movne	r0, #1
 8014996:	f7fb fd3d 	bl	8010414 <WM88XXSetReceiverChannel>
      rxChannel[wmNum] = input;
 801499a:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
 801499e:	bd70      	pop	{r4, r5, r6, pc}
 80149a0:	100023d8 	.word	0x100023d8

080149a4 <SPIenable>:
}

static int init = 0;

static void SPIenable(int spi, int enable)
{
 80149a4:	b570      	push	{r4, r5, r6, lr}
  if(!init)
 80149a6:	4c23      	ldr	r4, [pc, #140]	; (8014a34 <SPIenable+0x90>)
 80149a8:	6823      	ldr	r3, [r4, #0]
}

static int init = 0;

static void SPIenable(int spi, int enable)
{
 80149aa:	4605      	mov	r5, r0
 80149ac:	460e      	mov	r6, r1
  if(!init)
 80149ae:	b91b      	cbnz	r3, 80149b8 <SPIenable+0x14>
    {
      spiSetupDmaForStream();
 80149b0:	f7fb faa2 	bl	800fef8 <spiSetupDmaForStream>
      init = 1;
 80149b4:	2301      	movs	r3, #1
 80149b6:	6023      	str	r3, [r4, #0]
    }
  taskENTER_CRITICAL();
 80149b8:	f7f5 fcf8 	bl	800a3ac <vPortEnterCritical>
  if(enable)
 80149bc:	b346      	cbz	r6, 8014a10 <SPIenable+0x6c>
    {
      switch(spi)
 80149be:	2d01      	cmp	r5, #1
 80149c0:	d00c      	beq.n	80149dc <SPIenable+0x38>
 80149c2:	2d02      	cmp	r5, #2
 80149c4:	d117      	bne.n	80149f6 <SPIenable+0x52>
          spiNum = 1;

          PIN_SET(E, 9, 0);
          break;
        case 2:
          PIN_SET(E, 9, 1);
 80149c6:	2201      	movs	r2, #1
 80149c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80149cc:	481a      	ldr	r0, [pc, #104]	; (8014a38 <SPIenable+0x94>)
 80149ce:	f7fb ff53 	bl	8010878 <GPIO_WriteBit>
          queue = &inQueueSPI2;
 80149d2:	4b1a      	ldr	r3, [pc, #104]	; (8014a3c <SPIenable+0x98>)
 80149d4:	6063      	str	r3, [r4, #4]
          spiNum = 2;
 80149d6:	60a5      	str	r5, [r4, #8]
          PIN_SET(E, 10, 0);
 80149d8:	2200      	movs	r2, #0
 80149da:	e013      	b.n	8014a04 <SPIenable+0x60>
  if(enable)
    {
      switch(spi)
        {
        case 1:
          PIN_SET(E, 10, 1);
 80149dc:	462a      	mov	r2, r5
 80149de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80149e2:	4815      	ldr	r0, [pc, #84]	; (8014a38 <SPIenable+0x94>)
 80149e4:	f7fb ff48 	bl	8010878 <GPIO_WriteBit>
          queue = &inQueueSPI1;
 80149e8:	4b15      	ldr	r3, [pc, #84]	; (8014a40 <SPIenable+0x9c>)
 80149ea:	6063      	str	r3, [r4, #4]
          spiNum = 1;
 80149ec:	60a5      	str	r5, [r4, #8]

          PIN_SET(E, 9, 0);
 80149ee:	2200      	movs	r2, #0
 80149f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80149f4:	e008      	b.n	8014a08 <SPIenable+0x64>
          queue = &inQueueSPI2;
          spiNum = 2;
          PIN_SET(E, 10, 0);
          break;
        default:
          PIN_SET(E, 9, 1);
 80149f6:	2201      	movs	r2, #1
 80149f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80149fc:	480e      	ldr	r0, [pc, #56]	; (8014a38 <SPIenable+0x94>)
 80149fe:	f7fb ff3b 	bl	8010878 <GPIO_WriteBit>
          PIN_SET(E, 10, 1);
 8014a02:	2201      	movs	r2, #1
          break;
        case 2:
          PIN_SET(E, 9, 1);
          queue = &inQueueSPI2;
          spiNum = 2;
          PIN_SET(E, 10, 0);
 8014a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014a08:	480b      	ldr	r0, [pc, #44]	; (8014a38 <SPIenable+0x94>)
 8014a0a:	f7fb ff35 	bl	8010878 <GPIO_WriteBit>
          break;
 8014a0e:	e00d      	b.n	8014a2c <SPIenable+0x88>
          break;
        }
    }
  else
    {
      PIN_SET(E, 9, 1);
 8014a10:	2201      	movs	r2, #1
 8014a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014a16:	4808      	ldr	r0, [pc, #32]	; (8014a38 <SPIenable+0x94>)
 8014a18:	f7fb ff2e 	bl	8010878 <GPIO_WriteBit>
      PIN_SET(E, 10, 1);
 8014a1c:	2201      	movs	r2, #1
 8014a1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014a22:	4805      	ldr	r0, [pc, #20]	; (8014a38 <SPIenable+0x94>)
 8014a24:	f7fb ff28 	bl	8010878 <GPIO_WriteBit>
      queue = NULL;
 8014a28:	6066      	str	r6, [r4, #4]
      spiNum = 0;
 8014a2a:	60a6      	str	r6, [r4, #8]
    }
  taskEXIT_CRITICAL();
}
 8014a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      PIN_SET(E, 9, 1);
      PIN_SET(E, 10, 1);
      queue = NULL;
      spiNum = 0;
    }
  taskEXIT_CRITICAL();
 8014a30:	f7f5 bcce 	b.w	800a3d0 <vPortExitCritical>
 8014a34:	10002d48 	.word	0x10002d48
 8014a38:	40021000 	.word	0x40021000
 8014a3c:	100026e0 	.word	0x100026e0
 8014a40:	100026ac 	.word	0x100026ac

08014a44 <spiAudioStreamTC_Callback>:
static bQueue_t *queue = NULL;
static int spiNum = 0;
static int frequencies[3] = {0,0,0};
static input_format_e formats[3] = {0,0,0};
void spiAudioStreamTC_Callback(uint32_t *replaceBufforAdr, uint32_t Size, signed portBASE_TYPE *xHigherPriorityTaskWoken)
{
 8014a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Replace receive buffer */
  bBuffer_t *buf = bBufferFromData((uint8_t *)*replaceBufforAdr);
  audioHeader_t *header = (void*)buf->data;
  int sampleSize = header->sizeOfSample;
  int rate       = header->audioRate;
  if(spiNum > 0 && spiNum < 3)
 8014a46:	4d2c      	ldr	r5, [pc, #176]	; (8014af8 <spiAudioStreamTC_Callback+0xb4>)
static int frequencies[3] = {0,0,0};
static input_format_e formats[3] = {0,0,0};
void spiAudioStreamTC_Callback(uint32_t *replaceBufforAdr, uint32_t Size, signed portBASE_TYPE *xHigherPriorityTaskWoken)
{
  /* Replace receive buffer */
  bBuffer_t *buf = bBufferFromData((uint8_t *)*replaceBufforAdr);
 8014a48:	6804      	ldr	r4, [r0, #0]
  audioHeader_t *header = (void*)buf->data;
  int sampleSize = header->sizeOfSample;
  int rate       = header->audioRate;
  if(spiNum > 0 && spiNum < 3)
 8014a4a:	68ab      	ldr	r3, [r5, #8]
 8014a4c:	1e5a      	subs	r2, r3, #1
 8014a4e:	2a01      	cmp	r2, #1
static bQueue_t *queue = NULL;
static int spiNum = 0;
static int frequencies[3] = {0,0,0};
static input_format_e formats[3] = {0,0,0};
void spiAudioStreamTC_Callback(uint32_t *replaceBufforAdr, uint32_t Size, signed portBASE_TYPE *xHigherPriorityTaskWoken)
{
 8014a50:	4606      	mov	r6, r0
  /* Replace receive buffer */
  bBuffer_t *buf = bBufferFromData((uint8_t *)*replaceBufforAdr);
 8014a52:	f1a4 0414 	sub.w	r4, r4, #20
  audioHeader_t *header = (void*)buf->data;
  int sampleSize = header->sizeOfSample;
  int rate       = header->audioRate;
  if(spiNum > 0 && spiNum < 3)
 8014a56:	d838      	bhi.n	8014aca <spiAudioStreamTC_Callback+0x86>
    {
      int send = 0;
      if(frequencies[spiNum] != mapFreq(rate)) send = 1;
 8014a58:	009f      	lsls	r7, r3, #2
 8014a5a:	19ea      	adds	r2, r5, r7
 8014a5c:	68d0      	ldr	r0, [r2, #12]
} audioHeader_t;


static int mapFreq(int mapFreq)
{
  switch(mapFreq)
 8014a5e:	7e22      	ldrb	r2, [r4, #24]
 8014a60:	2a60      	cmp	r2, #96	; 0x60
 8014a62:	d00e      	beq.n	8014a82 <spiAudioStreamTC_Callback+0x3e>
 8014a64:	d804      	bhi.n	8014a70 <spiAudioStreamTC_Callback+0x2c>
 8014a66:	2a2c      	cmp	r2, #44	; 0x2c
 8014a68:	d011      	beq.n	8014a8e <spiAudioStreamTC_Callback+0x4a>
 8014a6a:	2a58      	cmp	r2, #88	; 0x58
 8014a6c:	d007      	beq.n	8014a7e <spiAudioStreamTC_Callback+0x3a>
 8014a6e:	e003      	b.n	8014a78 <spiAudioStreamTC_Callback+0x34>
 8014a70:	2ab0      	cmp	r2, #176	; 0xb0
 8014a72:	d008      	beq.n	8014a86 <spiAudioStreamTC_Callback+0x42>
 8014a74:	2ac0      	cmp	r2, #192	; 0xc0
 8014a76:	d008      	beq.n	8014a8a <spiAudioStreamTC_Callback+0x46>
    {
    case 44:
      return 44100;
    case 48:
      return 48000;
 8014a78:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8014a7c:	e009      	b.n	8014a92 <spiAudioStreamTC_Callback+0x4e>
    case 88:
      return 88200;
 8014a7e:	4a1f      	ldr	r2, [pc, #124]	; (8014afc <spiAudioStreamTC_Callback+0xb8>)
 8014a80:	e007      	b.n	8014a92 <spiAudioStreamTC_Callback+0x4e>
    case 96:
      return 96000;
 8014a82:	4a1f      	ldr	r2, [pc, #124]	; (8014b00 <spiAudioStreamTC_Callback+0xbc>)
 8014a84:	e005      	b.n	8014a92 <spiAudioStreamTC_Callback+0x4e>
    case 176:
      return 176400;
 8014a86:	4a1f      	ldr	r2, [pc, #124]	; (8014b04 <spiAudioStreamTC_Callback+0xc0>)
 8014a88:	e003      	b.n	8014a92 <spiAudioStreamTC_Callback+0x4e>
    case 192:
      return 192000;
 8014a8a:	4a1f      	ldr	r2, [pc, #124]	; (8014b08 <spiAudioStreamTC_Callback+0xc4>)
 8014a8c:	e001      	b.n	8014a92 <spiAudioStreamTC_Callback+0x4e>
static int mapFreq(int mapFreq)
{
  switch(mapFreq)
    {
    case 44:
      return 44100;
 8014a8e:	f64a 4244 	movw	r2, #44100	; 0xac44
  int rate       = header->audioRate;
  if(spiNum > 0 && spiNum < 3)
    {
      int send = 0;
      if(frequencies[spiNum] != mapFreq(rate)) send = 1;
      if(formats[spiNum] != mapFormat(sampleSize)) send = 1;
 8014a92:	18e9      	adds	r1, r5, r3
 8014a94:	f891 e018 	ldrb.w	lr, [r1, #24]
    }
  return 48000;
}
static input_format_e mapFormat(int mapbit)
{
  switch(mapbit)
 8014a98:	7e61      	ldrb	r1, [r4, #25]
 8014a9a:	2902      	cmp	r1, #2
 8014a9c:	d003      	beq.n	8014aa6 <spiAudioStreamTC_Callback+0x62>
    {
    case 0:
      return IF_16L16P;
 8014a9e:	2903      	cmp	r1, #3
 8014aa0:	bf0c      	ite	eq
 8014aa2:	2103      	moveq	r1, #3
 8014aa4:	2100      	movne	r1, #0
  int rate       = header->audioRate;
  if(spiNum > 0 && spiNum < 3)
    {
      int send = 0;
      if(frequencies[spiNum] != mapFreq(rate)) send = 1;
      if(formats[spiNum] != mapFormat(sampleSize)) send = 1;
 8014aa6:	458e      	cmp	lr, r1
 8014aa8:	d103      	bne.n	8014ab2 <spiAudioStreamTC_Callback+0x6e>
  audioHeader_t *header = (void*)buf->data;
  int sampleSize = header->sizeOfSample;
  int rate       = header->audioRate;
  if(spiNum > 0 && spiNum < 3)
    {
      int send = 0;
 8014aaa:	1a80      	subs	r0, r0, r2
 8014aac:	bf18      	it	ne
 8014aae:	2001      	movne	r0, #1
 8014ab0:	e000      	b.n	8014ab4 <spiAudioStreamTC_Callback+0x70>
      if(frequencies[spiNum] != mapFreq(rate)) send = 1;
      if(formats[spiNum] != mapFormat(sampleSize)) send = 1;
 8014ab2:	2001      	movs	r0, #1
      frequencies[spiNum] = mapFreq(rate);
 8014ab4:	442f      	add	r7, r5
 8014ab6:	60fa      	str	r2, [r7, #12]
      formats[spiNum] = mapFormat(sampleSize);
 8014ab8:	18ef      	adds	r7, r5, r3
 8014aba:	7639      	strb	r1, [r7, #24]
      if(send)
 8014abc:	b128      	cbz	r0, 8014aca <spiAudioStreamTC_Callback+0x86>
        formatChange((spiNum==1)?INPUT_SPI1:INPUT_SPI2, formats[spiNum], frequencies[spiNum]);
 8014abe:	2b01      	cmp	r3, #1
 8014ac0:	bf0c      	ite	eq
 8014ac2:	2003      	moveq	r0, #3
 8014ac4:	2004      	movne	r0, #4
 8014ac6:	f001 fabd 	bl	8016044 <formatChange>
    }
  if(queue)
 8014aca:	6868      	ldr	r0, [r5, #4]
 8014acc:	b148      	cbz	r0, 8014ae2 <spiAudioStreamTC_Callback+0x9e>
    {
      if (bEnqueue(queue, buf) >= 0)
 8014ace:	4621      	mov	r1, r4
 8014ad0:	f000 f9e1 	bl	8014e96 <bEnqueue>
 8014ad4:	2800      	cmp	r0, #0
 8014ad6:	db04      	blt.n	8014ae2 <spiAudioStreamTC_Callback+0x9e>
        buf = bAlloc(SPI_TOTAL_BUFFER_SIZE);
 8014ad8:	f44f 6004 	mov.w	r0, #2112	; 0x840
 8014adc:	f000 fa4e 	bl	8014f7c <bAlloc>
 8014ae0:	4604      	mov	r4, r0
    }
  buf->size = SPI_BUFFER_SIZE;
 8014ae2:	2208      	movs	r2, #8
 8014ae4:	7062      	strb	r2, [r4, #1]
 8014ae6:	2300      	movs	r3, #0
  buf->offset = SPI_HEADER_TAIL_SIZE;
 8014ae8:	2220      	movs	r2, #32
  if(queue)
    {
      if (bEnqueue(queue, buf) >= 0)
        buf = bAlloc(SPI_TOTAL_BUFFER_SIZE);
    }
  buf->size = SPI_BUFFER_SIZE;
 8014aea:	7023      	strb	r3, [r4, #0]
  buf->offset = SPI_HEADER_TAIL_SIZE;
 8014aec:	7122      	strb	r2, [r4, #4]
 8014aee:	7163      	strb	r3, [r4, #5]
  *replaceBufforAdr = (uint32_t)bDataFromBuffer(buf);
 8014af0:	3414      	adds	r4, #20
 8014af2:	6034      	str	r4, [r6, #0]
 8014af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014af6:	bf00      	nop
 8014af8:	10002d48 	.word	0x10002d48
 8014afc:	00015888 	.word	0x00015888
 8014b00:	00017700 	.word	0x00017700
 8014b04:	0002b110 	.word	0x0002b110
 8014b08:	0002ee00 	.word	0x0002ee00

08014b0c <SPI1Trimm>:
}

void SPI1Trimm(unsigned int count)
{
  int limits[4] = {QUEUE_SPI1_LIMITS};
  if(count < limits[1])
 8014b0c:	2801      	cmp	r0, #1
 8014b0e:	d802      	bhi.n	8014b16 <SPI1Trimm+0xa>
    {
      //Enable stream
      SPIenable(1, 1);
 8014b10:	2101      	movs	r1, #1
 8014b12:	4608      	mov	r0, r1
 8014b14:	e003      	b.n	8014b1e <SPI1Trimm+0x12>
    }
  if(count >= limits[2])
 8014b16:	2802      	cmp	r0, #2
 8014b18:	d003      	beq.n	8014b22 <SPI1Trimm+0x16>
    {
      //Disable stream
      SPIenable(1, 0);
 8014b1a:	2100      	movs	r1, #0
 8014b1c:	2001      	movs	r0, #1
 8014b1e:	f7ff bf41 	b.w	80149a4 <SPIenable>
 8014b22:	4770      	bx	lr

08014b24 <SPI2Trimm>:
}

void SPI2Trimm(unsigned int count)
{
  int limits[4] = {QUEUE_SPI2_LIMITS};
  if(count < limits[1])
 8014b24:	2801      	cmp	r0, #1
 8014b26:	d801      	bhi.n	8014b2c <SPI2Trimm+0x8>
    {
      //Enable stream
      SPIenable(2, 1);
 8014b28:	2101      	movs	r1, #1
 8014b2a:	e002      	b.n	8014b32 <SPI2Trimm+0xe>
    }
  if(count >= limits[2])
 8014b2c:	2802      	cmp	r0, #2
 8014b2e:	d003      	beq.n	8014b38 <SPI2Trimm+0x14>
    {
      //Disable stream
      SPIenable(2, 0);
 8014b30:	2100      	movs	r1, #0
 8014b32:	2002      	movs	r0, #2
 8014b34:	f7ff bf36 	b.w	80149a4 <SPIenable>
 8014b38:	4770      	bx	lr

08014b3a <configureI2S_input>:
/* I2S peripheral global pointer */
void Audio_MAL_I2S_IRQHandler(void);


inline void configureI2S_input(SPI_TypeDef *SPIx, uint8_t *audioOutBuff, uint8_t *secAudioOutBuff, uint32_t numberOfTransfers)
{
 8014b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b3e:	4604      	mov	r4, r0
 8014b40:	460d      	mov	r5, r1
 8014b42:	4616      	mov	r6, r2
 8014b44:	461f      	mov	r7, r3
  /* Configure the I2S peripheral */
  I2S_AudioInterfaceInit( SPIx );
 8014b46:	f7ff fde1 	bl	801470c <I2S_AudioInterfaceInit>

  /* Play on */
  I2S_AudioPlay( SPIx, (uint32_t)audioOutBuff, (uint32_t)secAudioOutBuff, numberOfTransfers );
 8014b4a:	463b      	mov	r3, r7
 8014b4c:	4632      	mov	r2, r6
 8014b4e:	4629      	mov	r1, r5
 8014b50:	4620      	mov	r0, r4
}
 8014b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
{
  /* Configure the I2S peripheral */
  I2S_AudioInterfaceInit( SPIx );

  /* Play on */
  I2S_AudioPlay( SPIx, (uint32_t)audioOutBuff, (uint32_t)secAudioOutBuff, numberOfTransfers );
 8014b56:	f7ff beb3 	b.w	80148c0 <I2S_AudioPlay>
	...

08014b5c <i2sResync>:
#define I2S_RESTART 2
#define I2S_RUNNING 3
static int i2sinit = I2S_START;
void i2sResync(void)
{
  if(i2sinit == I2S_RUNNING)
 8014b5c:	4b03      	ldr	r3, [pc, #12]	; (8014b6c <i2sResync+0x10>)
 8014b5e:	681a      	ldr	r2, [r3, #0]
 8014b60:	2a03      	cmp	r2, #3
    i2sinit = I2S_RESTART;
 8014b62:	bf04      	itt	eq
 8014b64:	2202      	moveq	r2, #2
 8014b66:	601a      	streq	r2, [r3, #0]
 8014b68:	4770      	bx	lr
 8014b6a:	bf00      	nop
 8014b6c:	100023e0 	.word	0x100023e0

08014b70 <I2STrimm>:
}


void __attribute__((weak))I2STrimm(unsigned int count)
{
 8014b70:	b570      	push	{r4, r5, r6, lr}
  if(i2sinit == I2S_RUNNING && I2S_AudioIsFER(SPI3))
 8014b72:	4c15      	ldr	r4, [pc, #84]	; (8014bc8 <I2STrimm+0x58>)
 8014b74:	6823      	ldr	r3, [r4, #0]
 8014b76:	2b03      	cmp	r3, #3
 8014b78:	d105      	bne.n	8014b86 <I2STrimm+0x16>
 8014b7a:	4814      	ldr	r0, [pc, #80]	; (8014bcc <I2STrimm+0x5c>)
 8014b7c:	f7ff fef8 	bl	8014970 <I2S_AudioIsFER>
 8014b80:	b108      	cbz	r0, 8014b86 <I2STrimm+0x16>
    i2sinit = I2S_RESTART;
 8014b82:	2302      	movs	r3, #2
 8014b84:	6023      	str	r3, [r4, #0]

  switch(i2sinit)
 8014b86:	6823      	ldr	r3, [r4, #0]
 8014b88:	2b01      	cmp	r3, #1
 8014b8a:	d004      	beq.n	8014b96 <I2STrimm+0x26>
 8014b8c:	2b02      	cmp	r3, #2
 8014b8e:	d119      	bne.n	8014bc4 <I2STrimm+0x54>
    {
    case I2S_RESTART:
    {
      //Stop I2S

      I2S_AudioStop(SPI3);
 8014b90:	480e      	ldr	r0, [pc, #56]	; (8014bcc <I2STrimm+0x5c>)
 8014b92:	f7ff fecb 	bl	801492c <I2S_AudioStop>
    {

      bBuffer_t *buf1 = NULL;
      bBuffer_t *buf2 = NULL;

      buf1 = bAlloc(I2S_IN_BUFF_SIZE_BYTES);
 8014b96:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014b9a:	f000 f9ef 	bl	8014f7c <bAlloc>
      buf1->size = I2S_IN_BUFF_SIZE_BYTES;
 8014b9e:	4605      	mov	r5, r0
 8014ba0:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8014ba4:	f825 6b14 	strh.w	r6, [r5], #20

      buf2 = bAlloc(I2S_IN_BUFF_SIZE_BYTES);
 8014ba8:	4630      	mov	r0, r6
 8014baa:	f000 f9e7 	bl	8014f7c <bAlloc>
      buf2->size = I2S_IN_BUFF_SIZE_BYTES;
 8014bae:	4602      	mov	r2, r0

      if ( buf1 && buf2 )
        configureI2S_input(SPIx_AUDIO_STREAM, buf1->data, buf2->data, I2S_IN_BUFF_SIZE_BYTES / sizeof(short) );
 8014bb0:	f44f 7300 	mov.w	r3, #512	; 0x200

      buf1 = bAlloc(I2S_IN_BUFF_SIZE_BYTES);
      buf1->size = I2S_IN_BUFF_SIZE_BYTES;

      buf2 = bAlloc(I2S_IN_BUFF_SIZE_BYTES);
      buf2->size = I2S_IN_BUFF_SIZE_BYTES;
 8014bb4:	f822 6b14 	strh.w	r6, [r2], #20

      if ( buf1 && buf2 )
        configureI2S_input(SPIx_AUDIO_STREAM, buf1->data, buf2->data, I2S_IN_BUFF_SIZE_BYTES / sizeof(short) );
 8014bb8:	4629      	mov	r1, r5
 8014bba:	4804      	ldr	r0, [pc, #16]	; (8014bcc <I2STrimm+0x5c>)
 8014bbc:	f7ff ffbd 	bl	8014b3a <configureI2S_input>

      i2sinit = I2S_RUNNING;
 8014bc0:	2303      	movs	r3, #3
 8014bc2:	6023      	str	r3, [r4, #0]
 8014bc4:	bd70      	pop	{r4, r5, r6, pc}
 8014bc6:	bf00      	nop
 8014bc8:	100023e0 	.word	0x100023e0
 8014bcc:	40003c00 	.word	0x40003c00

08014bd0 <i2sGetFreq>:


#define SAMPLE_PERIOD(arg_freq) (((I2S_IN_BUFF_SIZE/2)*1000000)/(arg_freq))
#define CASE_RANGE(arg_freq) SAMPLE_PERIOD(arg_freq)-((SAMPLE_PERIOD(arg_freq)*2)/100) ... SAMPLE_PERIOD(arg_freq)+((SAMPLE_PERIOD(arg_freq)*2)/100)
int i2sGetFreq(void)
{
 8014bd0:	b508      	push	{r3, lr}
  switch(i2sPeriod/1000)
 8014bd2:	492c      	ldr	r1, [pc, #176]	; (8014c84 <i2sGetFreq+0xb4>)
 8014bd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014bd8:	2300      	movs	r3, #0
 8014bda:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8014bde:	f008 f871 	bl	801ccc4 <__aeabi_uldivmod>
 8014be2:	2900      	cmp	r1, #0
 8014be4:	bf08      	it	eq
 8014be6:	f5b0 6faa 	cmpeq.w	r0, #1360	; 0x550
 8014bea:	d21d      	bcs.n	8014c28 <i2sGetFreq+0x58>
 8014bec:	2300      	movs	r3, #0
 8014bee:	f240 521b 	movw	r2, #1307	; 0x51b
 8014bf2:	4299      	cmp	r1, r3
 8014bf4:	bf08      	it	eq
 8014bf6:	4290      	cmpeq	r0, r2
 8014bf8:	d23a      	bcs.n	8014c70 <i2sGetFreq+0xa0>
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	f240 228d 	movw	r2, #653	; 0x28d
 8014c00:	4299      	cmp	r1, r3
 8014c02:	bf08      	it	eq
 8014c04:	4290      	cmpeq	r0, r2
 8014c06:	d337      	bcc.n	8014c78 <i2sGetFreq+0xa8>
 8014c08:	2900      	cmp	r1, #0
 8014c0a:	bf08      	it	eq
 8014c0c:	f5b0 7f2a 	cmpeq.w	r0, #680	; 0x2a8
 8014c10:	d330      	bcc.n	8014c74 <i2sGetFreq+0xa4>
 8014c12:	4a1d      	ldr	r2, [pc, #116]	; (8014c88 <i2sGetFreq+0xb8>)
 8014c14:	f04f 33ff 	mov.w	r3, #4294967295
 8014c18:	1880      	adds	r0, r0, r2
 8014c1a:	4159      	adcs	r1, r3
 8014c1c:	2900      	cmp	r1, #0
 8014c1e:	bf08      	it	eq
 8014c20:	281d      	cmpeq	r0, #29
 8014c22:	d229      	bcs.n	8014c78 <i2sGetFreq+0xa8>
    case CASE_RANGE(88200):
      return 88200;
    case CASE_RANGE(96000):
      return 96000;
    case CASE_RANGE(176400):
      return 176400;
 8014c24:	4819      	ldr	r0, [pc, #100]	; (8014c8c <i2sGetFreq+0xbc>)
 8014c26:	bd08      	pop	{r3, pc}

#define SAMPLE_PERIOD(arg_freq) (((I2S_IN_BUFF_SIZE/2)*1000000)/(arg_freq))
#define CASE_RANGE(arg_freq) SAMPLE_PERIOD(arg_freq)-((SAMPLE_PERIOD(arg_freq)*2)/100) ... SAMPLE_PERIOD(arg_freq)+((SAMPLE_PERIOD(arg_freq)*2)/100)
int i2sGetFreq(void)
{
  switch(i2sPeriod/1000)
 8014c28:	2900      	cmp	r1, #0
 8014c2a:	bf08      	it	eq
 8014c2c:	f5b0 6f2a 	cmpeq.w	r0, #2720	; 0xaa0
 8014c30:	d211      	bcs.n	8014c56 <i2sGetFreq+0x86>
 8014c32:	2300      	movs	r3, #0
 8014c34:	f640 2235 	movw	r2, #2613	; 0xa35
 8014c38:	4299      	cmp	r1, r3
 8014c3a:	bf08      	it	eq
 8014c3c:	4290      	cmpeq	r0, r2
 8014c3e:	d214      	bcs.n	8014c6a <i2sGetFreq+0x9a>
 8014c40:	4a13      	ldr	r2, [pc, #76]	; (8014c90 <i2sGetFreq+0xc0>)
 8014c42:	f04f 33ff 	mov.w	r3, #4294967295
 8014c46:	1880      	adds	r0, r0, r2
 8014c48:	4159      	adcs	r1, r3
 8014c4a:	2900      	cmp	r1, #0
 8014c4c:	bf08      	it	eq
 8014c4e:	283b      	cmpeq	r0, #59	; 0x3b
 8014c50:	d212      	bcs.n	8014c78 <i2sGetFreq+0xa8>
    case CASE_RANGE(44100):
      return 44100;
    case CASE_RANGE(48000):
      return 48000;
    case CASE_RANGE(88200):
      return 88200;
 8014c52:	4810      	ldr	r0, [pc, #64]	; (8014c94 <i2sGetFreq+0xc4>)
 8014c54:	bd08      	pop	{r3, pc}

#define SAMPLE_PERIOD(arg_freq) (((I2S_IN_BUFF_SIZE/2)*1000000)/(arg_freq))
#define CASE_RANGE(arg_freq) SAMPLE_PERIOD(arg_freq)-((SAMPLE_PERIOD(arg_freq)*2)/100) ... SAMPLE_PERIOD(arg_freq)+((SAMPLE_PERIOD(arg_freq)*2)/100)
int i2sGetFreq(void)
{
  switch(i2sPeriod/1000)
 8014c56:	4a10      	ldr	r2, [pc, #64]	; (8014c98 <i2sGetFreq+0xc8>)
 8014c58:	f04f 33ff 	mov.w	r3, #4294967295
 8014c5c:	1880      	adds	r0, r0, r2
 8014c5e:	4159      	adcs	r1, r3
 8014c60:	2900      	cmp	r1, #0
 8014c62:	bf08      	it	eq
 8014c64:	2875      	cmpeq	r0, #117	; 0x75
 8014c66:	d309      	bcc.n	8014c7c <i2sGetFreq+0xac>
 8014c68:	e006      	b.n	8014c78 <i2sGetFreq+0xa8>
    {
    case CASE_RANGE(44100):
      return 44100;
    case CASE_RANGE(48000):
      return 48000;
 8014c6a:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8014c6e:	bd08      	pop	{r3, pc}
    case CASE_RANGE(88200):
      return 88200;
    case CASE_RANGE(96000):
      return 96000;
 8014c70:	480a      	ldr	r0, [pc, #40]	; (8014c9c <i2sGetFreq+0xcc>)
 8014c72:	bd08      	pop	{r3, pc}
    case CASE_RANGE(176400):
      return 176400;
    case CASE_RANGE(192000):
      return 192000;
 8014c74:	480a      	ldr	r0, [pc, #40]	; (8014ca0 <i2sGetFreq+0xd0>)
 8014c76:	bd08      	pop	{r3, pc}
    }
  return 0;
 8014c78:	2000      	movs	r0, #0
 8014c7a:	bd08      	pop	{r3, pc}
int i2sGetFreq(void)
{
  switch(i2sPeriod/1000)
    {
    case CASE_RANGE(44100):
      return 44100;
 8014c7c:	f64a 4044 	movw	r0, #44100	; 0xac44
      return 176400;
    case CASE_RANGE(192000):
      return 192000;
    }
  return 0;
}
 8014c80:	bd08      	pop	{r3, pc}
 8014c82:	bf00      	nop
 8014c84:	100023e0 	.word	0x100023e0
 8014c88:	fffffd39 	.word	0xfffffd39
 8014c8c:	0002b110 	.word	0x0002b110
 8014c90:	fffffa72 	.word	0xfffffa72
 8014c94:	00015888 	.word	0x00015888
 8014c98:	fffff4e4 	.word	0xfffff4e4
 8014c9c:	00017700 	.word	0x00017700
 8014ca0:	0002ee00 	.word	0x0002ee00

08014ca4 <printi2s>:

static uint8_t i2sBuf[32];
static uint64_t i2sPeriod = 1;
void printi2s(int *bufSize, char *bufPtr);
void printi2s(int *bufSize, char *bufPtr)
{
 8014ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ca8:	4604      	mov	r4, r0
  int i;
  DPRINTF("is2: ");
 8014caa:	6800      	ldr	r0, [r0, #0]
 8014cac:	f241 2387 	movw	r3, #4743	; 0x1287
 8014cb0:	4298      	cmp	r0, r3

static uint8_t i2sBuf[32];
static uint64_t i2sPeriod = 1;
void printi2s(int *bufSize, char *bufPtr);
void printi2s(int *bufSize, char *bufPtr)
{
 8014cb2:	460d      	mov	r5, r1
  int i;
  DPRINTF("is2: ");
 8014cb4:	dc09      	bgt.n	8014cca <printi2s+0x26>
 8014cb6:	4928      	ldr	r1, [pc, #160]	; (8014d58 <printi2s+0xb4>)
 8014cb8:	4428      	add	r0, r5
 8014cba:	f7f3 ffd3 	bl	8008c64 <xsprintf>
 8014cbe:	6826      	ldr	r6, [r4, #0]
 8014cc0:	19a8      	adds	r0, r5, r6
 8014cc2:	f008 fabd 	bl	801d240 <strlen>
 8014cc6:	4430      	add	r0, r6
 8014cc8:	6020      	str	r0, [r4, #0]
  for(i = 0; i < sizeof(i2sBuf); i++)
    {
      if((i%8) == 0)	DPRINTF(" ");
      DPRINTF("%02x", i2sBuf[i]);
 8014cca:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8014d6c <printi2s+0xc8>

static uint8_t i2sBuf[32];
static uint64_t i2sPeriod = 1;
void printi2s(int *bufSize, char *bufPtr);
void printi2s(int *bufSize, char *bufPtr)
{
 8014cce:	2600      	movs	r6, #0
  int i;
  DPRINTF("is2: ");
  for(i = 0; i < sizeof(i2sBuf); i++)
 8014cd0:	2e20      	cmp	r6, #32
 8014cd2:	6820      	ldr	r0, [r4, #0]
 8014cd4:	d022      	beq.n	8014d1c <printi2s+0x78>
    {
      if((i%8) == 0)	DPRINTF(" ");
 8014cd6:	0773      	lsls	r3, r6, #29
 8014cd8:	d10d      	bne.n	8014cf6 <printi2s+0x52>
 8014cda:	f241 2387 	movw	r3, #4743	; 0x1287
 8014cde:	4298      	cmp	r0, r3
 8014ce0:	dc09      	bgt.n	8014cf6 <printi2s+0x52>
 8014ce2:	491e      	ldr	r1, [pc, #120]	; (8014d5c <printi2s+0xb8>)
 8014ce4:	4428      	add	r0, r5
 8014ce6:	f7f3 ffbd 	bl	8008c64 <xsprintf>
 8014cea:	6827      	ldr	r7, [r4, #0]
 8014cec:	19e8      	adds	r0, r5, r7
 8014cee:	f008 faa7 	bl	801d240 <strlen>
 8014cf2:	4438      	add	r0, r7
 8014cf4:	6020      	str	r0, [r4, #0]
      DPRINTF("%02x", i2sBuf[i]);
 8014cf6:	6820      	ldr	r0, [r4, #0]
 8014cf8:	f241 2387 	movw	r3, #4743	; 0x1287
 8014cfc:	4298      	cmp	r0, r3
 8014cfe:	dc0b      	bgt.n	8014d18 <printi2s+0x74>
 8014d00:	f818 2006 	ldrb.w	r2, [r8, r6]
 8014d04:	4916      	ldr	r1, [pc, #88]	; (8014d60 <printi2s+0xbc>)
 8014d06:	4428      	add	r0, r5
 8014d08:	f7f3 ffac 	bl	8008c64 <xsprintf>
 8014d0c:	6827      	ldr	r7, [r4, #0]
 8014d0e:	19e8      	adds	r0, r5, r7
 8014d10:	f008 fa96 	bl	801d240 <strlen>
 8014d14:	4438      	add	r0, r7
 8014d16:	6020      	str	r0, [r4, #0]
void printi2s(int *bufSize, char *bufPtr);
void printi2s(int *bufSize, char *bufPtr)
{
  int i;
  DPRINTF("is2: ");
  for(i = 0; i < sizeof(i2sBuf); i++)
 8014d18:	3601      	adds	r6, #1
 8014d1a:	e7d9      	b.n	8014cd0 <printi2s+0x2c>
    {
      if((i%8) == 0)	DPRINTF(" ");
      DPRINTF("%02x", i2sBuf[i]);
    }
  DPRINTF(" period = %uns freq = %uHz"CLEAR_LINE"\n", (uint32_t)(i2sPeriod/1000), i2sGetFreq());
 8014d1c:	f241 2387 	movw	r3, #4743	; 0x1287
 8014d20:	4298      	cmp	r0, r3
 8014d22:	dc17      	bgt.n	8014d54 <printi2s+0xb0>
 8014d24:	182e      	adds	r6, r5, r0
 8014d26:	f7ff ff53 	bl	8014bd0 <i2sGetFreq>
 8014d2a:	490e      	ldr	r1, [pc, #56]	; (8014d64 <printi2s+0xc0>)
 8014d2c:	4607      	mov	r7, r0
 8014d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014d32:	2300      	movs	r3, #0
 8014d34:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8014d38:	f007 ffc4 	bl	801ccc4 <__aeabi_uldivmod>
 8014d3c:	463b      	mov	r3, r7
 8014d3e:	4602      	mov	r2, r0
 8014d40:	4909      	ldr	r1, [pc, #36]	; (8014d68 <printi2s+0xc4>)
 8014d42:	4630      	mov	r0, r6
 8014d44:	f7f3 ff8e 	bl	8008c64 <xsprintf>
 8014d48:	6826      	ldr	r6, [r4, #0]
 8014d4a:	19a8      	adds	r0, r5, r6
 8014d4c:	f008 fa78 	bl	801d240 <strlen>
 8014d50:	4430      	add	r0, r6
 8014d52:	6020      	str	r0, [r4, #0]
 8014d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d58:	0803ecb6 	.word	0x0803ecb6
 8014d5c:	0803ec73 	.word	0x0803ec73
 8014d60:	0803de03 	.word	0x0803de03
 8014d64:	100023e0 	.word	0x100023e0
 8014d68:	0803ecbc 	.word	0x0803ecbc
 8014d6c:	10002d68 	.word	0x10002d68

08014d70 <AUDIO_TransferComplete_CallBack>:
  return 0;
}

static uint64_t lastUptime = 0ULL;
void AUDIO_TransferComplete_CallBack(uint32_t *replaceBufforAdr, uint32_t Size, signed portBASE_TYPE *xHigherPriorityTaskWoken)
{
 8014d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d72:	4607      	mov	r7, r0
  /* Replace receive buffer */
  uint64_t uptime = getUptimePrecise();
 8014d74:	f7f3 fd24 	bl	80087c0 <getUptimePrecise>
 8014d78:	460d      	mov	r5, r1
  i2sPeriod = uptime - lastUptime;
 8014d7a:	4925      	ldr	r1, [pc, #148]	; (8014e10 <AUDIO_TransferComplete_CallBack+0xa0>)
  lastUptime = uptime;

  bBuffer_t *buf = NULL;
  buf = bBufferFromData( (void *)*replaceBufforAdr );

  if(streamCaptureBuffer && !(streamCaptureBuffer->offset == streamCaptureBuffer->size))
 8014d7c:	4e25      	ldr	r6, [pc, #148]	; (8014e14 <AUDIO_TransferComplete_CallBack+0xa4>)
static uint64_t lastUptime = 0ULL;
void AUDIO_TransferComplete_CallBack(uint32_t *replaceBufforAdr, uint32_t Size, signed portBASE_TYPE *xHigherPriorityTaskWoken)
{
  /* Replace receive buffer */
  uint64_t uptime = getUptimePrecise();
  i2sPeriod = uptime - lastUptime;
 8014d7e:	e9d1 2308 	ldrd	r2, r3, [r1, #32]

static uint64_t lastUptime = 0ULL;
void AUDIO_TransferComplete_CallBack(uint32_t *replaceBufforAdr, uint32_t Size, signed portBASE_TYPE *xHigherPriorityTaskWoken)
{
  /* Replace receive buffer */
  uint64_t uptime = getUptimePrecise();
 8014d82:	4604      	mov	r4, r0
  i2sPeriod = uptime - lastUptime;
 8014d84:	1aa2      	subs	r2, r4, r2
 8014d86:	4824      	ldr	r0, [pc, #144]	; (8014e18 <AUDIO_TransferComplete_CallBack+0xa8>)
 8014d88:	eb65 0303 	sbc.w	r3, r5, r3
 8014d8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
  lastUptime = uptime;

  bBuffer_t *buf = NULL;
  buf = bBufferFromData( (void *)*replaceBufforAdr );
 8014d90:	683a      	ldr	r2, [r7, #0]

  if(streamCaptureBuffer && !(streamCaptureBuffer->offset == streamCaptureBuffer->size))
 8014d92:	6830      	ldr	r0, [r6, #0]
void AUDIO_TransferComplete_CallBack(uint32_t *replaceBufforAdr, uint32_t Size, signed portBASE_TYPE *xHigherPriorityTaskWoken)
{
  /* Replace receive buffer */
  uint64_t uptime = getUptimePrecise();
  i2sPeriod = uptime - lastUptime;
  lastUptime = uptime;
 8014d94:	e9c1 4508 	strd	r4, r5, [r1, #32]

  bBuffer_t *buf = NULL;
  buf = bBufferFromData( (void *)*replaceBufforAdr );
 8014d98:	f1a2 0414 	sub.w	r4, r2, #20

  if(streamCaptureBuffer && !(streamCaptureBuffer->offset == streamCaptureBuffer->size))
 8014d9c:	b1c8      	cbz	r0, 8014dd2 <AUDIO_TransferComplete_CallBack+0x62>
 8014d9e:	8883      	ldrh	r3, [r0, #4]
 8014da0:	8805      	ldrh	r5, [r0, #0]
 8014da2:	42ab      	cmp	r3, r5
 8014da4:	d015      	beq.n	8014dd2 <AUDIO_TransferComplete_CallBack+0x62>
    {
      int copySize = streamCaptureBuffer->size - streamCaptureBuffer->offset;
      if(copySize > buf->size)
 8014da6:	f832 2c14 	ldrh.w	r2, [r2, #-20]
  bBuffer_t *buf = NULL;
  buf = bBufferFromData( (void *)*replaceBufforAdr );

  if(streamCaptureBuffer && !(streamCaptureBuffer->offset == streamCaptureBuffer->size))
    {
      int copySize = streamCaptureBuffer->size - streamCaptureBuffer->offset;
 8014daa:	1aed      	subs	r5, r5, r3
 8014dac:	4295      	cmp	r5, r2
 8014dae:	bfa8      	it	ge
 8014db0:	4615      	movge	r5, r2
      if(copySize > buf->size)
        copySize = buf->size;
      if(copySize)
 8014db2:	b13d      	cbz	r5, 8014dc4 <AUDIO_TransferComplete_CallBack+0x54>
        memcpy(&(streamCaptureBuffer->data[streamCaptureBuffer->offset]), &(buf->data[buf->offset]), copySize);
 8014db4:	88a1      	ldrh	r1, [r4, #4]
 8014db6:	4418      	add	r0, r3
 8014db8:	4421      	add	r1, r4
 8014dba:	462a      	mov	r2, r5
 8014dbc:	3114      	adds	r1, #20
 8014dbe:	3014      	adds	r0, #20
 8014dc0:	f008 f93e 	bl	801d040 <memcpy>
      streamCaptureBuffer->offset += copySize;
 8014dc4:	6832      	ldr	r2, [r6, #0]
 8014dc6:	8893      	ldrh	r3, [r2, #4]
 8014dc8:	441d      	add	r5, r3
      streamCaptureBufferFormat = IF_16L8L8N16P8P8N;
 8014dca:	4b14      	ldr	r3, [pc, #80]	; (8014e1c <AUDIO_TransferComplete_CallBack+0xac>)
      int copySize = streamCaptureBuffer->size - streamCaptureBuffer->offset;
      if(copySize > buf->size)
        copySize = buf->size;
      if(copySize)
        memcpy(&(streamCaptureBuffer->data[streamCaptureBuffer->offset]), &(buf->data[buf->offset]), copySize);
      streamCaptureBuffer->offset += copySize;
 8014dcc:	8095      	strh	r5, [r2, #4]
      streamCaptureBufferFormat = IF_16L8L8N16P8P8N;
 8014dce:	2204      	movs	r2, #4
 8014dd0:	701a      	strb	r2, [r3, #0]
    }


  memcpy(i2sBuf, buf->data, sizeof(i2sBuf));
 8014dd2:	4a0f      	ldr	r2, [pc, #60]	; (8014e10 <AUDIO_TransferComplete_CallBack+0xa0>)
 8014dd4:	f104 0314 	add.w	r3, r4, #20
 8014dd8:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8014ddc:	f853 0b04 	ldr.w	r0, [r3], #4
 8014de0:	f842 0b04 	str.w	r0, [r2], #4
 8014de4:	428b      	cmp	r3, r1
 8014de6:	d1f9      	bne.n	8014ddc <AUDIO_TransferComplete_CallBack+0x6c>
  if (bEnqueue(&inQueueI2S, buf) < 0)
 8014de8:	4621      	mov	r1, r4
 8014dea:	480d      	ldr	r0, [pc, #52]	; (8014e20 <AUDIO_TransferComplete_CallBack+0xb0>)
 8014dec:	f000 f853 	bl	8014e96 <bEnqueue>
 8014df0:	2800      	cmp	r0, #0
 8014df2:	da02      	bge.n	8014dfa <AUDIO_TransferComplete_CallBack+0x8a>
    bFree(buf);
 8014df4:	4620      	mov	r0, r4
 8014df6:	f000 fb1b 	bl	8015430 <bFree>
  buf = NULL;

  buf = bAlloc(I2S_IN_BUFF_SIZE_BYTES);
 8014dfa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014dfe:	f000 f8bd 	bl	8014f7c <bAlloc>
  buf->size = I2S_IN_BUFF_SIZE_BYTES;
 8014e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e06:	f820 3b14 	strh.w	r3, [r0], #20

  *replaceBufforAdr = (uint32_t)bDataFromBuffer(buf);
 8014e0a:	6038      	str	r0, [r7, #0]
 8014e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e0e:	bf00      	nop
 8014e10:	10002d68 	.word	0x10002d68
 8014e14:	10002e44 	.word	0x10002e44
 8014e18:	100023e0 	.word	0x100023e0
 8014e1c:	100033bd 	.word	0x100033bd
 8014e20:	10002714 	.word	0x10002714

08014e24 <I2S_AUDIO_Error_CallBack>:
 * @brief  Manages the DMA FIFO error interrupt.
 * @param  None
 * @retval None
 */
void I2S_AUDIO_Error_CallBack(void *pData)
{
 8014e24:	b508      	push	{r3, lr}
  I2S_Cmd(SPIx_AUDIO_STREAM, DISABLE);
 8014e26:	2100      	movs	r1, #0
 8014e28:	4801      	ldr	r0, [pc, #4]	; (8014e30 <I2S_AUDIO_Error_CallBack+0xc>)
 8014e2a:	f7fc fcf3 	bl	8011814 <I2S_Cmd>
 8014e2e:	e7fe      	b.n	8014e2e <I2S_AUDIO_Error_CallBack+0xa>
 8014e30:	40003c00 	.word	0x40003c00

08014e34 <bAdd>:
#define bEnterCS(...) taskENTER_CRITICAL()
#define bExitCS(...)  taskEXIT_CRITICAL()

void bAdd(bBuffer_t **first, bBuffer_t *buf)
{
  buf->next = *first;
 8014e34:	6803      	ldr	r3, [r0, #0]
 8014e36:	610b      	str	r3, [r1, #16]
  *first = buf;
 8014e38:	6001      	str	r1, [r0, #0]
 8014e3a:	4770      	bx	lr

08014e3c <bRemove>:
}

void bRemove(bBuffer_t **first, bBuffer_t *buf)
{
  if (*first == buf)
 8014e3c:	6803      	ldr	r3, [r0, #0]
 8014e3e:	428b      	cmp	r3, r1
 8014e40:	d108      	bne.n	8014e54 <bRemove+0x18>
    {
      *first = buf->next;
 8014e42:	691a      	ldr	r2, [r3, #16]
 8014e44:	6002      	str	r2, [r0, #0]
      buf->next = NULL;
 8014e46:	2200      	movs	r2, #0
 8014e48:	611a      	str	r2, [r3, #16]
 8014e4a:	4770      	bx	lr
    }
  else
    {
      bBuffer_t *prev = *first;
      while (prev && prev->next != buf)
 8014e4c:	691a      	ldr	r2, [r3, #16]
 8014e4e:	4291      	cmp	r1, r2
 8014e50:	d003      	beq.n	8014e5a <bRemove+0x1e>
 8014e52:	4613      	mov	r3, r2
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d1f9      	bne.n	8014e4c <bRemove+0x10>
 8014e58:	e003      	b.n	8014e62 <bRemove+0x26>
        prev = prev->next;
      if (prev)
        {
          prev->next = buf->next;
 8014e5a:	690a      	ldr	r2, [r1, #16]
 8014e5c:	611a      	str	r2, [r3, #16]
          buf->next = NULL;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	610b      	str	r3, [r1, #16]
 8014e62:	4770      	bx	lr

08014e64 <bQueueInit>:
        }
    }
}

int bQueueInit(bQueue_t *queue, int maxCount, int belowCount, int aboveCount, int refillCount, void (*callback)(unsigned int num))
{
 8014e64:	b530      	push	{r4, r5, lr}
  queue->count      = 0;
  queue->callback   = callback;
  queue->maxCount   = maxCount;
  queue->belowCount = belowCount;
 8014e66:	6102      	str	r2, [r0, #16]
  queue->aboveCount = aboveCount;
 8014e68:	6143      	str	r3, [r0, #20]
  queue->refillCount = refillCount;
 8014e6a:	9a03      	ldr	r2, [sp, #12]
 8014e6c:	6983      	ldr	r3, [r0, #24]
}

int bQueueInit(bQueue_t *queue, int maxCount, int belowCount, int aboveCount, int refillCount, void (*callback)(unsigned int num))
{
  queue->count      = 0;
  queue->callback   = callback;
 8014e6e:	9d04      	ldr	r5, [sp, #16]
 8014e70:	61c5      	str	r5, [r0, #28]
  queue->maxCount   = maxCount;
  queue->belowCount = belowCount;
  queue->aboveCount = aboveCount;
  queue->refillCount = refillCount;
 8014e72:	f362 031e 	bfi	r3, r2, #0, #31
    }
}

int bQueueInit(bQueue_t *queue, int maxCount, int belowCount, int aboveCount, int refillCount, void (*callback)(unsigned int num))
{
  queue->count      = 0;
 8014e76:	2400      	movs	r4, #0
  queue->callback   = callback;
  queue->maxCount   = maxCount;
  queue->belowCount = belowCount;
  queue->aboveCount = aboveCount;
  queue->refillCount = refillCount;
 8014e78:	6183      	str	r3, [r0, #24]
  queue->tail       = NULL;
  queue->full       = 0;
  queue->enqueues   = 0;
  queue->dequeues   = 0;
  queue->maxFilling = 0;
  queue->refilling  = 0;
 8014e7a:	0e1b      	lsrs	r3, r3, #24
 8014e7c:	f364 13c7 	bfi	r3, r4, #7, #1
    }
}

int bQueueInit(bQueue_t *queue, int maxCount, int belowCount, int aboveCount, int refillCount, void (*callback)(unsigned int num))
{
  queue->count      = 0;
 8014e80:	6084      	str	r4, [r0, #8]
  queue->callback   = callback;
  queue->maxCount   = maxCount;
 8014e82:	60c1      	str	r1, [r0, #12]
  queue->belowCount = belowCount;
  queue->aboveCount = aboveCount;
  queue->refillCount = refillCount;
  queue->head       = NULL;
 8014e84:	6004      	str	r4, [r0, #0]
  queue->tail       = NULL;
 8014e86:	6044      	str	r4, [r0, #4]
  queue->full       = 0;
 8014e88:	6284      	str	r4, [r0, #40]	; 0x28
  queue->enqueues   = 0;
 8014e8a:	6244      	str	r4, [r0, #36]	; 0x24
  queue->dequeues   = 0;
 8014e8c:	6204      	str	r4, [r0, #32]
  queue->maxFilling = 0;
 8014e8e:	6304      	str	r4, [r0, #48]	; 0x30
  queue->refilling  = 0;
 8014e90:	76c3      	strb	r3, [r0, #27]
  queue->refillCount = refillCount;
  return 0;
}
 8014e92:	4620      	mov	r0, r4
 8014e94:	bd30      	pop	{r4, r5, pc}

08014e96 <bEnqueue>:
int __attribute__((optimize("-O4")))bEnqueue(bQueue_t *queue, bBuffer_t *buffer)
{
 8014e96:	b538      	push	{r3, r4, r5, lr}
  if (queue->callback && queue->count > queue->aboveCount)
 8014e98:	69c3      	ldr	r3, [r0, #28]
  queue->refilling  = 0;
  queue->refillCount = refillCount;
  return 0;
}
int __attribute__((optimize("-O4")))bEnqueue(bQueue_t *queue, bBuffer_t *buffer)
{
 8014e9a:	4604      	mov	r4, r0
 8014e9c:	460d      	mov	r5, r1
  if (queue->callback && queue->count > queue->aboveCount)
 8014e9e:	6880      	ldr	r0, [r0, #8]
 8014ea0:	b113      	cbz	r3, 8014ea8 <bEnqueue+0x12>
 8014ea2:	6962      	ldr	r2, [r4, #20]
 8014ea4:	4290      	cmp	r0, r2
 8014ea6:	d819      	bhi.n	8014edc <bEnqueue+0x46>
    queue->callback(queue->count);

  if (queue->count == queue->maxCount)
 8014ea8:	68e3      	ldr	r3, [r4, #12]
 8014eaa:	4283      	cmp	r3, r0
 8014eac:	d01c      	beq.n	8014ee8 <bEnqueue+0x52>
    {
      queue->full++;
      return -1;
    }
  bEnterCS();
 8014eae:	f7f5 fa7d 	bl	800a3ac <vPortEnterCritical>
  buffer->next = NULL;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	612b      	str	r3, [r5, #16]
  if (queue->head)
 8014eb6:	6823      	ldr	r3, [r4, #0]
 8014eb8:	b19b      	cbz	r3, 8014ee2 <bEnqueue+0x4c>
    {
      queue->tail->next = buffer;
 8014eba:	6863      	ldr	r3, [r4, #4]
 8014ebc:	611d      	str	r5, [r3, #16]
      queue->tail = buffer;
 8014ebe:	6065      	str	r5, [r4, #4]
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
  queue->count++;
 8014ec0:	68a3      	ldr	r3, [r4, #8]
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 8014ec2:	6a62      	ldr	r2, [r4, #36]	; 0x24
  queue->count++;
  if (queue->count > queue->maxFilling)
 8014ec4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
  queue->count++;
 8014ec6:	3301      	adds	r3, #1
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 8014ec8:	3201      	adds	r2, #1
  queue->count++;
  if (queue->count > queue->maxFilling)
 8014eca:	428b      	cmp	r3, r1
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 8014ecc:	6262      	str	r2, [r4, #36]	; 0x24
  queue->count++;
 8014ece:	60a3      	str	r3, [r4, #8]
  if (queue->count > queue->maxFilling)
    queue->maxFilling = queue->count;
 8014ed0:	bf88      	it	hi
 8014ed2:	6323      	strhi	r3, [r4, #48]	; 0x30


  bExitCS();
 8014ed4:	f7f5 fa7c 	bl	800a3d0 <vPortExitCritical>
  return 0;
 8014ed8:	2000      	movs	r0, #0
}
 8014eda:	bd38      	pop	{r3, r4, r5, pc}
  return 0;
}
int __attribute__((optimize("-O4")))bEnqueue(bQueue_t *queue, bBuffer_t *buffer)
{
  if (queue->callback && queue->count > queue->aboveCount)
    queue->callback(queue->count);
 8014edc:	4798      	blx	r3
 8014ede:	68a0      	ldr	r0, [r4, #8]
 8014ee0:	e7e2      	b.n	8014ea8 <bEnqueue+0x12>
      queue->tail->next = buffer;
      queue->tail = buffer;
    }
  else
    {
      queue->tail = buffer;
 8014ee2:	6065      	str	r5, [r4, #4]
      queue->head = buffer;
 8014ee4:	6025      	str	r5, [r4, #0]
 8014ee6:	e7eb      	b.n	8014ec0 <bEnqueue+0x2a>
  if (queue->callback && queue->count > queue->aboveCount)
    queue->callback(queue->count);

  if (queue->count == queue->maxCount)
    {
      queue->full++;
 8014ee8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014eea:	3301      	adds	r3, #1
 8014eec:	62a3      	str	r3, [r4, #40]	; 0x28
      return -1;
 8014eee:	f04f 30ff 	mov.w	r0, #4294967295
 8014ef2:	bd38      	pop	{r3, r4, r5, pc}

08014ef4 <bDequeue>:
  bExitCS();
  return 0;
}

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
 8014ef4:	b570      	push	{r4, r5, r6, lr}
 8014ef6:	4604      	mov	r4, r0
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
 8014ef8:	f7f5 fa58 	bl	800a3ac <vPortEnterCritical>
  if (queue->refilling)
 8014efc:	7ee3      	ldrb	r3, [r4, #27]
 8014efe:	061a      	lsls	r2, r3, #24
 8014f00:	d50a      	bpl.n	8014f18 <bDequeue+0x24>
    {
      if (queue->refillCount < queue->count)
 8014f02:	69a2      	ldr	r2, [r4, #24]
 8014f04:	68a1      	ldr	r1, [r4, #8]
 8014f06:	f342 021e 	sbfx	r2, r2, #0, #31
 8014f0a:	428a      	cmp	r2, r1
 8014f0c:	d21e      	bcs.n	8014f4c <bDequeue+0x58>
        queue->refilling = 0;
 8014f0e:	f36f 13c7 	bfc	r3, #7, #1
 8014f12:	76e3      	strb	r3, [r4, #27]
    }

  if (!queue->refilling)
 8014f14:	061b      	lsls	r3, r3, #24
 8014f16:	d419      	bmi.n	8014f4c <bDequeue+0x58>
    {
      buffer = queue->head;
 8014f18:	6826      	ldr	r6, [r4, #0]
      if (buffer)
 8014f1a:	b1ee      	cbz	r6, 8014f58 <bDequeue+0x64>
        {
          queue->head = queue->head->next;
 8014f1c:	6933      	ldr	r3, [r6, #16]
 8014f1e:	6023      	str	r3, [r4, #0]
          buffer->next = NULL;
 8014f20:	2300      	movs	r3, #0
 8014f22:	6133      	str	r3, [r6, #16]
          count = --queue->count;
 8014f24:	68a5      	ldr	r5, [r4, #8]
          queue->dequeues++;
 8014f26:	6a23      	ldr	r3, [r4, #32]
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 8014f28:	3d01      	subs	r5, #1
          queue->dequeues++;
 8014f2a:	3301      	adds	r3, #1
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 8014f2c:	60a5      	str	r5, [r4, #8]
          queue->dequeues++;
 8014f2e:	6223      	str	r3, [r4, #32]
        }
    }
  else
    queue->empty++;

  bExitCS();
 8014f30:	f7f5 fa4e 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 8014f34:	69e3      	ldr	r3, [r4, #28]
 8014f36:	b13b      	cbz	r3, 8014f48 <bDequeue+0x54>
 8014f38:	6922      	ldr	r2, [r4, #16]
 8014f3a:	4295      	cmp	r5, r2
 8014f3c:	d302      	bcc.n	8014f44 <bDequeue+0x50>
 8014f3e:	6962      	ldr	r2, [r4, #20]
 8014f40:	4295      	cmp	r5, r2
 8014f42:	d901      	bls.n	8014f48 <bDequeue+0x54>
    queue->callback(count);
 8014f44:	4628      	mov	r0, r5
 8014f46:	4798      	blx	r3

  return buffer;
}
 8014f48:	4630      	mov	r0, r6
 8014f4a:	bd70      	pop	{r4, r5, r6, pc}
          if (queue->refillCount > queue->count)
            queue->refilling = 1;
        }
    }
  else
    queue->empty++;
 8014f4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
 8014f4e:	2600      	movs	r6, #0
          if (queue->refillCount > queue->count)
            queue->refilling = 1;
        }
    }
  else
    queue->empty++;
 8014f50:	3301      	adds	r3, #1
 8014f52:	62e3      	str	r3, [r4, #44]	; 0x2c
  return 0;
}

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
 8014f54:	4635      	mov	r5, r6
 8014f56:	e7eb      	b.n	8014f30 <bDequeue+0x3c>
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
          if (queue->refillCount > queue->count)
 8014f58:	69a3      	ldr	r3, [r4, #24]
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8014f5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          if (queue->refillCount > queue->count)
 8014f5c:	68a1      	ldr	r1, [r4, #8]
 8014f5e:	f343 031e 	sbfx	r3, r3, #0, #31
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8014f62:	3201      	adds	r2, #1
          if (queue->refillCount > queue->count)
 8014f64:	428b      	cmp	r3, r1
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8014f66:	62e2      	str	r2, [r4, #44]	; 0x2c
          if (queue->refillCount > queue->count)
 8014f68:	d905      	bls.n	8014f76 <bDequeue+0x82>
            queue->refilling = 1;
 8014f6a:	7ee3      	ldrb	r3, [r4, #27]
 8014f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f70:	76e3      	strb	r3, [r4, #27]
  return 0;
}

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
 8014f72:	4635      	mov	r5, r6
 8014f74:	e7dc      	b.n	8014f30 <bDequeue+0x3c>
 8014f76:	4635      	mov	r5, r6
 8014f78:	e7da      	b.n	8014f30 <bDequeue+0x3c>
	...

08014f7c <bAlloc>:
unsigned int heapLastSize  = 0;
bBuffer_t __attribute__((optimize("-O4"))) *bAlloc(int size)
{
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
 8014f7c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
unsigned int heapAllocs    = 0;
unsigned int heapFrees     = 0;
unsigned int heapAllocated = 0;
unsigned int heapLastSize  = 0;
bBuffer_t __attribute__((optimize("-O4"))) *bAlloc(int size)
{
 8014f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f82:	4605      	mov	r5, r0
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
 8014f84:	f000 80d3 	beq.w	801512e <bAlloc+0x1b2>
 8014f88:	dc24      	bgt.n	8014fd4 <bAlloc+0x58>
 8014f8a:	2801      	cmp	r0, #1
 8014f8c:	db51      	blt.n	8015032 <bAlloc+0xb6>
 8014f8e:	2820      	cmp	r0, #32
 8014f90:	dd69      	ble.n	8015066 <bAlloc+0xea>
 8014f92:	28c0      	cmp	r0, #192	; 0xc0
 8014f94:	dc4d      	bgt.n	8015032 <bAlloc+0xb6>
bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
 8014f96:	4eb8      	ldr	r6, [pc, #736]	; (8015278 <bAlloc+0x2fc>)

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
 8014f98:	f7f5 fa08 	bl	800a3ac <vPortEnterCritical>
  if (queue->refilling)
 8014f9c:	f896 304f 	ldrb.w	r3, [r6, #79]	; 0x4f
 8014fa0:	061a      	lsls	r2, r3, #24
 8014fa2:	f140 80ef 	bpl.w	8015184 <bAlloc+0x208>
    {
      if (queue->refillCount < queue->count)
 8014fa6:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8014fa8:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8014faa:	f342 021e 	sbfx	r2, r2, #0, #31
 8014fae:	428a      	cmp	r2, r1
 8014fb0:	f0c0 80e1 	bcc.w	8015176 <bAlloc+0x1fa>
          if (queue->refillCount > queue->count)
            queue->refilling = 1;
        }
    }
  else
    queue->empty++;
 8014fb4:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8014fb6:	3301      	adds	r3, #1
 8014fb8:	6633      	str	r3, [r6, #96]	; 0x60

  bExitCS();
 8014fba:	f7f5 fa09 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 8014fbe:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8014fc0:	4aad      	ldr	r2, [pc, #692]	; (8015278 <bAlloc+0x2fc>)
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	f000 8214 	beq.w	80153f0 <bAlloc+0x474>
 8014fc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8014fca:	2a00      	cmp	r2, #0
 8014fcc:	f040 821e 	bne.w	801540c <bAlloc+0x490>
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
 8014fd0:	23c0      	movs	r3, #192	; 0xc0
 8014fd2:	e02a      	b.n	801502a <bAlloc+0xae>
unsigned int heapLastSize  = 0;
bBuffer_t __attribute__((optimize("-O4"))) *bAlloc(int size)
{
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
 8014fd4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014fd8:	dd7d      	ble.n	80150d6 <bAlloc+0x15a>
 8014fda:	f5b0 6f04 	cmp.w	r0, #2112	; 0x840
 8014fde:	dc28      	bgt.n	8015032 <bAlloc+0xb6>
bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
 8014fe0:	4ea5      	ldr	r6, [pc, #660]	; (8015278 <bAlloc+0x2fc>)

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
 8014fe2:	f7f5 f9e3 	bl	800a3ac <vPortEnterCritical>
  if (queue->refilling)
 8014fe6:	f896 30eb 	ldrb.w	r3, [r6, #235]	; 0xeb
 8014fea:	061a      	lsls	r2, r3, #24
 8014fec:	f140 80f0 	bpl.w	80151d0 <bAlloc+0x254>
    {
      if (queue->refillCount < queue->count)
 8014ff0:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
 8014ff4:	f8d6 10d8 	ldr.w	r1, [r6, #216]	; 0xd8
 8014ff8:	f342 021e 	sbfx	r2, r2, #0, #31
 8014ffc:	428a      	cmp	r2, r1
 8014ffe:	f0c0 80e0 	bcc.w	80151c2 <bAlloc+0x246>
          if (queue->refillCount > queue->count)
            queue->refilling = 1;
        }
    }
  else
    queue->empty++;
 8015002:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
 8015006:	3301      	adds	r3, #1
 8015008:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc

  bExitCS();
 801500c:	f7f5 f9e0 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 8015010:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
 8015014:	4a98      	ldr	r2, [pc, #608]	; (8015278 <bAlloc+0x2fc>)
 8015016:	2b00      	cmp	r3, #0
 8015018:	f000 8201 	beq.w	801541e <bAlloc+0x4a2>
 801501c:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 8015020:	2a00      	cmp	r2, #0
 8015022:	f040 81ed 	bne.w	8015400 <bAlloc+0x484>
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
      ALLOC_BUFFER(513, 1024);
      ALLOC_BUFFER(1025,2112);
 8015026:	f44f 6304 	mov.w	r3, #2112	; 0x840
 801502a:	461e      	mov	r6, r3
 801502c:	f103 0014 	add.w	r0, r3, #20
 8015030:	e002      	b.n	8015038 <bAlloc+0xbc>
 8015032:	462e      	mov	r6, r5
 8015034:	f105 0014 	add.w	r0, r5, #20
    }
  if (!buffer)
    {
      //No suitable buffer on queue. Alloc from heap
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
 8015038:	f7f3 fc75 	bl	8008926 <intSafeMalloc>
      if (buffer)
 801503c:	4604      	mov	r4, r0
 801503e:	2800      	cmp	r0, #0
 8015040:	f000 8165 	beq.w	801530e <bAlloc+0x392>
        memset(buffer, 0x00, alloc_size);
      heapLastSize = alloc_size;
 8015044:	4f8d      	ldr	r7, [pc, #564]	; (801527c <bAlloc+0x300>)
  if (!buffer)
    {
      //No suitable buffer on queue. Alloc from heap
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
      if (buffer)
        memset(buffer, 0x00, alloc_size);
 8015046:	4632      	mov	r2, r6
 8015048:	2100      	movs	r1, #0
 801504a:	f008 f893 	bl	801d174 <memset>
      heapLastSize = alloc_size;
 801504e:	603e      	str	r6, [r7, #0]
      bEnterCS();
 8015050:	f7f5 f9ac 	bl	800a3ac <vPortEnterCritical>
      heapAllocs++;
 8015054:	687a      	ldr	r2, [r7, #4]
      heapAllocated++;
 8015056:	68bb      	ldr	r3, [r7, #8]
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
      if (buffer)
        memset(buffer, 0x00, alloc_size);
      heapLastSize = alloc_size;
      bEnterCS();
      heapAllocs++;
 8015058:	3201      	adds	r2, #1
      heapAllocated++;
 801505a:	3301      	adds	r3, #1
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
      if (buffer)
        memset(buffer, 0x00, alloc_size);
      heapLastSize = alloc_size;
      bEnterCS();
      heapAllocs++;
 801505c:	607a      	str	r2, [r7, #4]
      heapAllocated++;
 801505e:	60bb      	str	r3, [r7, #8]
      bExitCS();
 8015060:	f7f5 f9b6 	bl	800a3d0 <vPortExitCritical>
 8015064:	e024      	b.n	80150b0 <bAlloc+0x134>
bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
 8015066:	4e84      	ldr	r6, [pc, #528]	; (8015278 <bAlloc+0x2fc>)

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
 8015068:	f7f5 f9a0 	bl	800a3ac <vPortEnterCritical>
  if (queue->refilling)
 801506c:	7ef3      	ldrb	r3, [r6, #27]
 801506e:	0618      	lsls	r0, r3, #24
 8015070:	f100 8132 	bmi.w	80152d8 <bAlloc+0x35c>
 8015074:	68b0      	ldr	r0, [r6, #8]
        queue->refilling = 0;
    }

  if (!queue->refilling)
    {
      buffer = queue->head;
 8015076:	6834      	ldr	r4, [r6, #0]
 8015078:	4f7f      	ldr	r7, [pc, #508]	; (8015278 <bAlloc+0x2fc>)
      if (buffer)
 801507a:	2c00      	cmp	r4, #0
 801507c:	f000 8154 	beq.w	8015328 <bAlloc+0x3ac>
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
 8015080:	2300      	movs	r3, #0
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 8015082:	6922      	ldr	r2, [r4, #16]
          buffer->next = NULL;
 8015084:	6123      	str	r3, [r4, #16]
          count = --queue->count;
          queue->dequeues++;
 8015086:	6a3b      	ldr	r3, [r7, #32]
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 8015088:	603a      	str	r2, [r7, #0]
          buffer->next = NULL;
          count = --queue->count;
          queue->dequeues++;
 801508a:	3301      	adds	r3, #1
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 801508c:	1e46      	subs	r6, r0, #1
          queue->dequeues++;
 801508e:	623b      	str	r3, [r7, #32]
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 8015090:	60be      	str	r6, [r7, #8]
        }
    }
  else
    queue->empty++;

  bExitCS();
 8015092:	f7f5 f99d 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 8015096:	69fb      	ldr	r3, [r7, #28]
 8015098:	b153      	cbz	r3, 80150b0 <bAlloc+0x134>
 801509a:	693a      	ldr	r2, [r7, #16]
 801509c:	4296      	cmp	r6, r2
 801509e:	d302      	bcc.n	80150a6 <bAlloc+0x12a>
 80150a0:	697a      	ldr	r2, [r7, #20]
 80150a2:	4296      	cmp	r6, r2
 80150a4:	d904      	bls.n	80150b0 <bAlloc+0x134>
    queue->callback(count);
 80150a6:	4630      	mov	r0, r6
 80150a8:	4798      	blx	r3
{
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
 80150aa:	2320      	movs	r3, #32
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
      ALLOC_BUFFER(513, 1024);
      ALLOC_BUFFER(1025,2112);
    }
  if (!buffer)
 80150ac:	2c00      	cmp	r4, #0
 80150ae:	d0bc      	beq.n	801502a <bAlloc+0xae>
      heapAllocated++;
      bExitCS();
    }
  if (buffer)
    {
      if(cfg.empty_buffers)
 80150b0:	4b73      	ldr	r3, [pc, #460]	; (8015280 <bAlloc+0x304>)
 80150b2:	68db      	ldr	r3, [r3, #12]
 80150b4:	b943      	cbnz	r3, 80150c8 <bAlloc+0x14c>
        memset(buffer->data, 0, size);
      buffer->maxSize = size;
      buffer->size = 0;
 80150b6:	2300      	movs	r3, #0
      buffer->offset = 0;
      buffer->ref = 1;
 80150b8:	2201      	movs	r2, #1
    }
  if (buffer)
    {
      if(cfg.empty_buffers)
        memset(buffer->data, 0, size);
      buffer->maxSize = size;
 80150ba:	8065      	strh	r5, [r4, #2]
      buffer->size = 0;
 80150bc:	8023      	strh	r3, [r4, #0]
      buffer->offset = 0;
 80150be:	80a3      	strh	r3, [r4, #4]
      buffer->ref = 1;
      buffer->next = NULL;
 80150c0:	6123      	str	r3, [r4, #16]
      if(cfg.empty_buffers)
        memset(buffer->data, 0, size);
      buffer->maxSize = size;
      buffer->size = 0;
      buffer->offset = 0;
      buffer->ref = 1;
 80150c2:	80e2      	strh	r2, [r4, #6]
      buffer->next = NULL;
    }
  return buffer;
}
 80150c4:	4620      	mov	r0, r4
 80150c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      bExitCS();
    }
  if (buffer)
    {
      if(cfg.empty_buffers)
        memset(buffer->data, 0, size);
 80150c8:	462a      	mov	r2, r5
 80150ca:	2100      	movs	r1, #0
 80150cc:	f104 0014 	add.w	r0, r4, #20
 80150d0:	f008 f850 	bl	801d174 <memset>
 80150d4:	e7ef      	b.n	80150b6 <bAlloc+0x13a>
bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
 80150d6:	4e68      	ldr	r6, [pc, #416]	; (8015278 <bAlloc+0x2fc>)

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
 80150d8:	f7f5 f968 	bl	800a3ac <vPortEnterCritical>
  if (queue->refilling)
 80150dc:	f896 30b7 	ldrb.w	r3, [r6, #183]	; 0xb7
 80150e0:	0618      	lsls	r0, r3, #24
 80150e2:	f140 809f 	bpl.w	8015224 <bAlloc+0x2a8>
    {
      if (queue->refillCount < queue->count)
 80150e6:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
 80150ea:	f8d6 10a4 	ldr.w	r1, [r6, #164]	; 0xa4
 80150ee:	f342 021e 	sbfx	r2, r2, #0, #31
 80150f2:	428a      	cmp	r2, r1
 80150f4:	d206      	bcs.n	8015104 <bAlloc+0x188>
        queue->refilling = 0;
 80150f6:	f36f 13c7 	bfc	r3, #7, #1
    }

  if (!queue->refilling)
 80150fa:	0619      	lsls	r1, r3, #24
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 80150fc:	f886 30b7 	strb.w	r3, [r6, #183]	; 0xb7
    }

  if (!queue->refilling)
 8015100:	f140 8090 	bpl.w	8015224 <bAlloc+0x2a8>
          if (queue->refillCount > queue->count)
            queue->refilling = 1;
        }
    }
  else
    queue->empty++;
 8015104:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
 8015108:	3301      	adds	r3, #1
 801510a:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8

  bExitCS();
 801510e:	f7f5 f95f 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 8015112:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
 8015116:	4a58      	ldr	r2, [pc, #352]	; (8015278 <bAlloc+0x2fc>)
 8015118:	2b00      	cmp	r3, #0
 801511a:	f000 816c 	beq.w	80153f6 <bAlloc+0x47a>
 801511e:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8015122:	2a00      	cmp	r2, #0
 8015124:	f040 816f 	bne.w	8015406 <bAlloc+0x48a>
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
      ALLOC_BUFFER(513, 1024);
 8015128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801512c:	e77d      	b.n	801502a <bAlloc+0xae>
bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
 801512e:	4e52      	ldr	r6, [pc, #328]	; (8015278 <bAlloc+0x2fc>)

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
 8015130:	f7f5 f93c 	bl	800a3ac <vPortEnterCritical>
  if (queue->refilling)
 8015134:	f896 3083 	ldrb.w	r3, [r6, #131]	; 0x83
 8015138:	061f      	lsls	r7, r3, #24
 801513a:	f140 80aa 	bpl.w	8015292 <bAlloc+0x316>
    {
      if (queue->refillCount < queue->count)
 801513e:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 8015142:	6f31      	ldr	r1, [r6, #112]	; 0x70
 8015144:	f342 021e 	sbfx	r2, r2, #0, #31
 8015148:	428a      	cmp	r2, r1
 801514a:	f0c0 809b 	bcc.w	8015284 <bAlloc+0x308>
          if (queue->refillCount > queue->count)
            queue->refilling = 1;
        }
    }
  else
    queue->empty++;
 801514e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8015152:	3301      	adds	r3, #1
 8015154:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94

  bExitCS();
 8015158:	f7f5 f93a 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 801515c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8015160:	4a45      	ldr	r2, [pc, #276]	; (8015278 <bAlloc+0x2fc>)
 8015162:	2b00      	cmp	r3, #0
 8015164:	f000 813c 	beq.w	80153e0 <bAlloc+0x464>
 8015168:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801516a:	2a00      	cmp	r2, #0
 801516c:	f040 8151 	bne.w	8015412 <bAlloc+0x496>
  int alloc_size = size;
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
 8015170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015174:	e759      	b.n	801502a <bAlloc+0xae>
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 8015176:	f36f 13c7 	bfc	r3, #7, #1
 801517a:	f886 304f 	strb.w	r3, [r6, #79]	; 0x4f
    }

  if (!queue->refilling)
 801517e:	061b      	lsls	r3, r3, #24
 8015180:	f53f af18 	bmi.w	8014fb4 <bAlloc+0x38>
    {
      buffer = queue->head;
 8015184:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8015186:	4f3c      	ldr	r7, [pc, #240]	; (8015278 <bAlloc+0x2fc>)
      if (buffer)
 8015188:	2c00      	cmp	r4, #0
 801518a:	f000 80da 	beq.w	8015342 <bAlloc+0x3c6>
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
 801518e:	2300      	movs	r3, #0
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 8015190:	6922      	ldr	r2, [r4, #16]
          buffer->next = NULL;
 8015192:	6123      	str	r3, [r4, #16]
          count = --queue->count;
          queue->dequeues++;
 8015194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 8015196:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 8015198:	637a      	str	r2, [r7, #52]	; 0x34
          buffer->next = NULL;
          count = --queue->count;
          queue->dequeues++;
 801519a:	3301      	adds	r3, #1
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 801519c:	3e01      	subs	r6, #1
          queue->dequeues++;
 801519e:	657b      	str	r3, [r7, #84]	; 0x54
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 80151a0:	63fe      	str	r6, [r7, #60]	; 0x3c
        }
    }
  else
    queue->empty++;

  bExitCS();
 80151a2:	f7f5 f915 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 80151a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d081      	beq.n	80150b0 <bAlloc+0x134>
 80151ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80151ae:	4296      	cmp	r6, r2
 80151b0:	d303      	bcc.n	80151ba <bAlloc+0x23e>
 80151b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80151b4:	4296      	cmp	r6, r2
 80151b6:	f67f af7b 	bls.w	80150b0 <bAlloc+0x134>
    queue->callback(count);
 80151ba:	4630      	mov	r0, r6
 80151bc:	4798      	blx	r3
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
 80151be:	23c0      	movs	r3, #192	; 0xc0
 80151c0:	e774      	b.n	80150ac <bAlloc+0x130>
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 80151c2:	f36f 13c7 	bfc	r3, #7, #1
 80151c6:	f886 30eb 	strb.w	r3, [r6, #235]	; 0xeb
    }

  if (!queue->refilling)
 80151ca:	061b      	lsls	r3, r3, #24
 80151cc:	f53f af19 	bmi.w	8015002 <bAlloc+0x86>
    {
      buffer = queue->head;
 80151d0:	f8d6 40d0 	ldr.w	r4, [r6, #208]	; 0xd0
 80151d4:	4f28      	ldr	r7, [pc, #160]	; (8015278 <bAlloc+0x2fc>)
      if (buffer)
 80151d6:	2c00      	cmp	r4, #0
 80151d8:	f000 80ed 	beq.w	80153b6 <bAlloc+0x43a>
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
 80151dc:	2300      	movs	r3, #0
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 80151de:	6922      	ldr	r2, [r4, #16]
          buffer->next = NULL;
 80151e0:	6123      	str	r3, [r4, #16]
          count = --queue->count;
          queue->dequeues++;
 80151e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 80151e6:	f8d7 60d8 	ldr.w	r6, [r7, #216]	; 0xd8
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 80151ea:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
          buffer->next = NULL;
          count = --queue->count;
          queue->dequeues++;
 80151ee:	3301      	adds	r3, #1
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 80151f0:	3e01      	subs	r6, #1
          queue->dequeues++;
 80151f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 80151f6:	f8c7 60d8 	str.w	r6, [r7, #216]	; 0xd8
        }
    }
  else
    queue->empty++;

  bExitCS();
 80151fa:	f7f5 f8e9 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 80151fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015202:	2b00      	cmp	r3, #0
 8015204:	f43f af54 	beq.w	80150b0 <bAlloc+0x134>
 8015208:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801520c:	4296      	cmp	r6, r2
 801520e:	d304      	bcc.n	801521a <bAlloc+0x29e>
 8015210:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8015214:	4296      	cmp	r6, r2
 8015216:	f67f af4b 	bls.w	80150b0 <bAlloc+0x134>
    queue->callback(count);
 801521a:	4630      	mov	r0, r6
 801521c:	4798      	blx	r3
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
      ALLOC_BUFFER(513, 1024);
      ALLOC_BUFFER(1025,2112);
 801521e:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8015222:	e743      	b.n	80150ac <bAlloc+0x130>
        queue->refilling = 0;
    }

  if (!queue->refilling)
    {
      buffer = queue->head;
 8015224:	f8d6 409c 	ldr.w	r4, [r6, #156]	; 0x9c
 8015228:	4f13      	ldr	r7, [pc, #76]	; (8015278 <bAlloc+0x2fc>)
      if (buffer)
 801522a:	2c00      	cmp	r4, #0
 801522c:	f000 80ae 	beq.w	801538c <bAlloc+0x410>
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
 8015230:	2300      	movs	r3, #0
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 8015232:	6922      	ldr	r2, [r4, #16]
          buffer->next = NULL;
 8015234:	6123      	str	r3, [r4, #16]
          count = --queue->count;
          queue->dequeues++;
 8015236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 801523a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 801523e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
          buffer->next = NULL;
          count = --queue->count;
          queue->dequeues++;
 8015242:	3301      	adds	r3, #1
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 8015244:	3e01      	subs	r6, #1
          queue->dequeues++;
 8015246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 801524a:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
        }
    }
  else
    queue->empty++;

  bExitCS();
 801524e:	f7f5 f8bf 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 8015252:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015256:	2b00      	cmp	r3, #0
 8015258:	f43f af2a 	beq.w	80150b0 <bAlloc+0x134>
 801525c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8015260:	4296      	cmp	r6, r2
 8015262:	d304      	bcc.n	801526e <bAlloc+0x2f2>
 8015264:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015268:	4296      	cmp	r6, r2
 801526a:	f67f af21 	bls.w	80150b0 <bAlloc+0x134>
    queue->callback(count);
 801526e:	4630      	mov	r0, r6
 8015270:	4798      	blx	r3
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
      ALLOC_BUFFER(513, 1024);
 8015272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015276:	e719      	b.n	80150ac <bAlloc+0x130>
 8015278:	100023f0 	.word	0x100023f0
 801527c:	10002d90 	.word	0x10002d90
 8015280:	10001000 	.word	0x10001000
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 8015284:	f36f 13c7 	bfc	r3, #7, #1
    }

  if (!queue->refilling)
 8015288:	061c      	lsls	r4, r3, #24
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 801528a:	f886 3083 	strb.w	r3, [r6, #131]	; 0x83
    }

  if (!queue->refilling)
 801528e:	f53f af5e 	bmi.w	801514e <bAlloc+0x1d2>
    {
      buffer = queue->head;
 8015292:	6eb4      	ldr	r4, [r6, #104]	; 0x68
 8015294:	4f64      	ldr	r7, [pc, #400]	; (8015428 <bAlloc+0x4ac>)
      if (buffer)
 8015296:	2c00      	cmp	r4, #0
 8015298:	d064      	beq.n	8015364 <bAlloc+0x3e8>
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
 801529a:	2300      	movs	r3, #0
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 801529c:	6922      	ldr	r2, [r4, #16]
          buffer->next = NULL;
 801529e:	6123      	str	r3, [r4, #16]
          count = --queue->count;
          queue->dequeues++;
 80152a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 80152a4:	6f3e      	ldr	r6, [r7, #112]	; 0x70
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 80152a6:	66ba      	str	r2, [r7, #104]	; 0x68
          buffer->next = NULL;
          count = --queue->count;
          queue->dequeues++;
 80152a8:	3301      	adds	r3, #1
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 80152aa:	3e01      	subs	r6, #1
          queue->dequeues++;
 80152ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 80152b0:	673e      	str	r6, [r7, #112]	; 0x70
        }
    }
  else
    queue->empty++;

  bExitCS();
 80152b2:	f7f5 f88d 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 80152b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f43f aef8 	beq.w	80150b0 <bAlloc+0x134>
 80152c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80152c2:	4296      	cmp	r6, r2
 80152c4:	d303      	bcc.n	80152ce <bAlloc+0x352>
 80152c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80152c8:	4296      	cmp	r6, r2
 80152ca:	f67f aef1 	bls.w	80150b0 <bAlloc+0x134>
    queue->callback(count);
 80152ce:	4630      	mov	r0, r6
 80152d0:	4798      	blx	r3
  int alloc_size = size;
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
 80152d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80152d6:	e6e9      	b.n	80150ac <bAlloc+0x130>
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
 80152d8:	69b2      	ldr	r2, [r6, #24]
 80152da:	68b0      	ldr	r0, [r6, #8]
 80152dc:	f342 021e 	sbfx	r2, r2, #0, #31
 80152e0:	4282      	cmp	r2, r0
 80152e2:	d30e      	bcc.n	8015302 <bAlloc+0x386>
          if (queue->refillCount > queue->count)
            queue->refilling = 1;
        }
    }
  else
    queue->empty++;
 80152e4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80152e6:	3301      	adds	r3, #1
 80152e8:	62f3      	str	r3, [r6, #44]	; 0x2c

  bExitCS();
 80152ea:	f7f5 f871 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 80152ee:	69f3      	ldr	r3, [r6, #28]
 80152f0:	4a4d      	ldr	r2, [pc, #308]	; (8015428 <bAlloc+0x4ac>)
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d079      	beq.n	80153ea <bAlloc+0x46e>
 80152f6:	6912      	ldr	r2, [r2, #16]
 80152f8:	2a00      	cmp	r2, #0
 80152fa:	f040 808d 	bne.w	8015418 <bAlloc+0x49c>
{
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
 80152fe:	2320      	movs	r3, #32
 8015300:	e693      	b.n	801502a <bAlloc+0xae>
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 8015302:	f36f 13c7 	bfc	r3, #7, #1
    }

  if (!queue->refilling)
 8015306:	0619      	lsls	r1, r3, #24
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 8015308:	76f3      	strb	r3, [r6, #27]
    }

  if (!queue->refilling)
 801530a:	d4eb      	bmi.n	80152e4 <bAlloc+0x368>
 801530c:	e6b3      	b.n	8015076 <bAlloc+0xfa>
    {
      //No suitable buffer on queue. Alloc from heap
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
      if (buffer)
        memset(buffer, 0x00, alloc_size);
      heapLastSize = alloc_size;
 801530e:	4d47      	ldr	r5, [pc, #284]	; (801542c <bAlloc+0x4b0>)
 8015310:	602e      	str	r6, [r5, #0]
      bEnterCS();
 8015312:	f7f5 f84b 	bl	800a3ac <vPortEnterCritical>
      heapAllocs++;
 8015316:	686a      	ldr	r2, [r5, #4]
      heapAllocated++;
 8015318:	68ab      	ldr	r3, [r5, #8]
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
      if (buffer)
        memset(buffer, 0x00, alloc_size);
      heapLastSize = alloc_size;
      bEnterCS();
      heapAllocs++;
 801531a:	3201      	adds	r2, #1
      heapAllocated++;
 801531c:	3301      	adds	r3, #1
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
      if (buffer)
        memset(buffer, 0x00, alloc_size);
      heapLastSize = alloc_size;
      bEnterCS();
      heapAllocs++;
 801531e:	606a      	str	r2, [r5, #4]
      heapAllocated++;
 8015320:	60ab      	str	r3, [r5, #8]
      bExitCS();
 8015322:	f7f5 f855 	bl	800a3d0 <vPortExitCritical>
      buffer->size = 0;
      buffer->offset = 0;
      buffer->ref = 1;
      buffer->next = NULL;
    }
  return buffer;
 8015326:	e6cd      	b.n	80150c4 <bAlloc+0x148>
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
          if (queue->refillCount > queue->count)
 8015328:	69bb      	ldr	r3, [r7, #24]
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 801532a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
          if (queue->refillCount > queue->count)
 801532c:	f343 031e 	sbfx	r3, r3, #0, #31
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015330:	3201      	adds	r2, #1
          if (queue->refillCount > queue->count)
 8015332:	4283      	cmp	r3, r0
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015334:	62fa      	str	r2, [r7, #44]	; 0x2c
          if (queue->refillCount > queue->count)
 8015336:	d9d8      	bls.n	80152ea <bAlloc+0x36e>
            queue->refilling = 1;
 8015338:	7efb      	ldrb	r3, [r7, #27]
 801533a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801533e:	76fb      	strb	r3, [r7, #27]
 8015340:	e7d3      	b.n	80152ea <bAlloc+0x36e>
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
          if (queue->refillCount > queue->count)
 8015342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
          if (queue->refillCount > queue->count)
 8015346:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015348:	f343 031e 	sbfx	r3, r3, #0, #31
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 801534c:	3201      	adds	r2, #1
          if (queue->refillCount > queue->count)
 801534e:	428b      	cmp	r3, r1
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015350:	663a      	str	r2, [r7, #96]	; 0x60
          if (queue->refillCount > queue->count)
 8015352:	f67f ae32 	bls.w	8014fba <bAlloc+0x3e>
            queue->refilling = 1;
 8015356:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801535a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801535e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015362:	e62a      	b.n	8014fba <bAlloc+0x3e>
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
          if (queue->refillCount > queue->count)
 8015364:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015368:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
          if (queue->refillCount > queue->count)
 801536c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801536e:	f343 031e 	sbfx	r3, r3, #0, #31
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015372:	3201      	adds	r2, #1
          if (queue->refillCount > queue->count)
 8015374:	428b      	cmp	r3, r1
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015376:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
          if (queue->refillCount > queue->count)
 801537a:	f67f aeed 	bls.w	8015158 <bAlloc+0x1dc>
            queue->refilling = 1;
 801537e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015386:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 801538a:	e6e5      	b.n	8015158 <bAlloc+0x1dc>
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
          if (queue->refillCount > queue->count)
 801538c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015390:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
          if (queue->refillCount > queue->count)
 8015394:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8015398:	f343 031e 	sbfx	r3, r3, #0, #31
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 801539c:	3201      	adds	r2, #1
          if (queue->refillCount > queue->count)
 801539e:	428b      	cmp	r3, r1
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 80153a0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
          if (queue->refillCount > queue->count)
 80153a4:	f67f aeb3 	bls.w	801510e <bAlloc+0x192>
            queue->refilling = 1;
 80153a8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80153ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153b0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80153b4:	e6ab      	b.n	801510e <bAlloc+0x192>
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
          if (queue->refillCount > queue->count)
 80153b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 80153ba:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
          if (queue->refillCount > queue->count)
 80153be:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80153c2:	f343 031e 	sbfx	r3, r3, #0, #31
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 80153c6:	3201      	adds	r2, #1
          if (queue->refillCount > queue->count)
 80153c8:	428b      	cmp	r3, r1
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 80153ca:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
          if (queue->refillCount > queue->count)
 80153ce:	f67f ae1d 	bls.w	801500c <bAlloc+0x90>
            queue->refilling = 1;
 80153d2:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80153d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153da:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
 80153de:	e615      	b.n	801500c <bAlloc+0x90>
    queue->empty++;

  bExitCS();

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 80153e0:	f44f 7005 	mov.w	r0, #532	; 0x214
 80153e4:	f44f 7600 	mov.w	r6, #512	; 0x200
 80153e8:	e626      	b.n	8015038 <bAlloc+0xbc>
 80153ea:	2034      	movs	r0, #52	; 0x34
 80153ec:	2620      	movs	r6, #32
 80153ee:	e623      	b.n	8015038 <bAlloc+0xbc>
 80153f0:	20d4      	movs	r0, #212	; 0xd4
 80153f2:	26c0      	movs	r6, #192	; 0xc0
 80153f4:	e620      	b.n	8015038 <bAlloc+0xbc>
 80153f6:	f240 4014 	movw	r0, #1044	; 0x414
 80153fa:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80153fe:	e61b      	b.n	8015038 <bAlloc+0xbc>
 8015400:	2400      	movs	r4, #0
 8015402:	4626      	mov	r6, r4
 8015404:	e709      	b.n	801521a <bAlloc+0x29e>
 8015406:	2400      	movs	r4, #0
 8015408:	4626      	mov	r6, r4
 801540a:	e730      	b.n	801526e <bAlloc+0x2f2>
 801540c:	2400      	movs	r4, #0
 801540e:	4626      	mov	r6, r4
 8015410:	e6d3      	b.n	80151ba <bAlloc+0x23e>
 8015412:	2400      	movs	r4, #0
 8015414:	4626      	mov	r6, r4
 8015416:	e75a      	b.n	80152ce <bAlloc+0x352>
 8015418:	2400      	movs	r4, #0
 801541a:	4626      	mov	r6, r4
 801541c:	e643      	b.n	80150a6 <bAlloc+0x12a>
 801541e:	f640 0054 	movw	r0, #2132	; 0x854
 8015422:	f44f 6604 	mov.w	r6, #2112	; 0x840
 8015426:	e607      	b.n	8015038 <bAlloc+0xbc>
 8015428:	100023f0 	.word	0x100023f0
 801542c:	10002d90 	.word	0x10002d90

08015430 <bFree>:
      buffer->next = NULL;
    }
  return buffer;
}
void __attribute__((optimize("-O4")))bFree(bBuffer_t *buffer)
{
 8015430:	b570      	push	{r4, r5, r6, lr}
 8015432:	4605      	mov	r5, r0
  bEnterCS();
 8015434:	f7f4 ffba 	bl	800a3ac <vPortEnterCritical>
  int ref = --buffer->ref;
 8015438:	88ec      	ldrh	r4, [r5, #6]
 801543a:	3c01      	subs	r4, #1
 801543c:	b2a4      	uxth	r4, r4
 801543e:	80ec      	strh	r4, [r5, #6]
  bExitCS();
 8015440:	f7f4 ffc6 	bl	800a3d0 <vPortExitCritical>

  if (ref == 0)
 8015444:	2c00      	cmp	r4, #0
 8015446:	f040 80f3 	bne.w	8015630 <bFree+0x200>
    {
      switch (buffer->maxSize)
 801544a:	886b      	ldrh	r3, [r5, #2]
 801544c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015450:	f000 80c8 	beq.w	80155e4 <bFree+0x1b4>
 8015454:	d829      	bhi.n	80154aa <bFree+0x7a>
 8015456:	2b00      	cmp	r3, #0
 8015458:	d063      	beq.n	8015522 <bFree+0xf2>
 801545a:	2b20      	cmp	r3, #32
 801545c:	d971      	bls.n	8015542 <bFree+0x112>
 801545e:	2bc0      	cmp	r3, #192	; 0xc0
 8015460:	d85f      	bhi.n	8015522 <bFree+0xf2>
  queue->refillCount = refillCount;
  return 0;
}
int __attribute__((optimize("-O4")))bEnqueue(bQueue_t *queue, bBuffer_t *buffer)
{
  if (queue->callback && queue->count > queue->aboveCount)
 8015462:	4c90      	ldr	r4, [pc, #576]	; (80156a4 <bFree+0x274>)
 8015464:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8015466:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015468:	b11b      	cbz	r3, 8015472 <bFree+0x42>
 801546a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801546c:	4290      	cmp	r0, r2
 801546e:	f200 80e7 	bhi.w	8015640 <bFree+0x210>
    queue->callback(queue->count);

  if (queue->count == queue->maxCount)
 8015472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015474:	4e8b      	ldr	r6, [pc, #556]	; (80156a4 <bFree+0x274>)
 8015476:	4283      	cmp	r3, r0
 8015478:	f000 810f 	beq.w	801569a <bFree+0x26a>
    {
      queue->full++;
      return -1;
    }
  bEnterCS();
 801547c:	f7f4 ff96 	bl	800a3ac <vPortEnterCritical>
  buffer->next = NULL;
  if (queue->head)
 8015480:	6b73      	ldr	r3, [r6, #52]	; 0x34
    {
      queue->full++;
      return -1;
    }
  bEnterCS();
  buffer->next = NULL;
 8015482:	2200      	movs	r2, #0
 8015484:	612a      	str	r2, [r5, #16]
  if (queue->head)
 8015486:	2b00      	cmp	r3, #0
 8015488:	f000 80ee 	beq.w	8015668 <bFree+0x238>
    {
      queue->tail->next = buffer;
 801548c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
      queue->tail = buffer;
 801548e:	63b5      	str	r5, [r6, #56]	; 0x38
    }
  bEnterCS();
  buffer->next = NULL;
  if (queue->head)
    {
      queue->tail->next = buffer;
 8015490:	611d      	str	r5, [r3, #16]
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
  queue->count++;
 8015492:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 8015494:	6da2      	ldr	r2, [r4, #88]	; 0x58
  queue->count++;
  if (queue->count > queue->maxFilling)
 8015496:	6e61      	ldr	r1, [r4, #100]	; 0x64
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 8015498:	4882      	ldr	r0, [pc, #520]	; (80156a4 <bFree+0x274>)
  queue->count++;
 801549a:	3301      	adds	r3, #1
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 801549c:	3201      	adds	r2, #1
  queue->count++;
  if (queue->count > queue->maxFilling)
 801549e:	428b      	cmp	r3, r1
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 80154a0:	65a2      	str	r2, [r4, #88]	; 0x58
  queue->count++;
 80154a2:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (queue->count > queue->maxFilling)
 80154a4:	d949      	bls.n	801553a <bFree+0x10a>
    queue->maxFilling = queue->count;
 80154a6:	6643      	str	r3, [r0, #100]	; 0x64
 80154a8:	e047      	b.n	801553a <bFree+0x10a>
  int ref = --buffer->ref;
  bExitCS();

  if (ref == 0)
    {
      switch (buffer->maxSize)
 80154aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80154ae:	d96b      	bls.n	8015588 <bFree+0x158>
 80154b0:	f5b3 6f04 	cmp.w	r3, #2112	; 0x840
 80154b4:	d835      	bhi.n	8015522 <bFree+0xf2>
  queue->refillCount = refillCount;
  return 0;
}
int __attribute__((optimize("-O4")))bEnqueue(bQueue_t *queue, bBuffer_t *buffer)
{
  if (queue->callback && queue->count > queue->aboveCount)
 80154b6:	4c7b      	ldr	r4, [pc, #492]	; (80156a4 <bFree+0x274>)
 80154b8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80154bc:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 80154c0:	b123      	cbz	r3, 80154cc <bFree+0x9c>
 80154c2:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 80154c6:	4290      	cmp	r0, r2
 80154c8:	f200 80b3 	bhi.w	8015632 <bFree+0x202>
    queue->callback(queue->count);

  if (queue->count == queue->maxCount)
 80154cc:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80154d0:	4e74      	ldr	r6, [pc, #464]	; (80156a4 <bFree+0x274>)
 80154d2:	4298      	cmp	r0, r3
 80154d4:	f000 80db 	beq.w	801568e <bFree+0x25e>
    {
      queue->full++;
      return -1;
    }
  bEnterCS();
 80154d8:	f7f4 ff68 	bl	800a3ac <vPortEnterCritical>
  buffer->next = NULL;
  if (queue->head)
 80154dc:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
    {
      queue->full++;
      return -1;
    }
  bEnterCS();
  buffer->next = NULL;
 80154e0:	2200      	movs	r2, #0
 80154e2:	612a      	str	r2, [r5, #16]
  if (queue->head)
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	f000 80ba 	beq.w	801565e <bFree+0x22e>
    {
      queue->tail->next = buffer;
 80154ea:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
      queue->tail = buffer;
 80154ee:	f8c6 50d4 	str.w	r5, [r6, #212]	; 0xd4
    }
  bEnterCS();
  buffer->next = NULL;
  if (queue->head)
    {
      queue->tail->next = buffer;
 80154f2:	611d      	str	r5, [r3, #16]
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
  queue->count++;
 80154f4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 80154f8:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
  queue->count++;
  if (queue->count > queue->maxFilling)
 80154fc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 8015500:	4868      	ldr	r0, [pc, #416]	; (80156a4 <bFree+0x274>)
  queue->count++;
 8015502:	3301      	adds	r3, #1
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 8015504:	3201      	adds	r2, #1
  queue->count++;
  if (queue->count > queue->maxFilling)
 8015506:	428b      	cmp	r3, r1
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 8015508:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
  queue->count++;
 801550c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
  if (queue->count > queue->maxFilling)
 8015510:	d913      	bls.n	801553a <bFree+0x10a>
    queue->maxFilling = queue->count;
 8015512:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8015516:	e010      	b.n	801553a <bFree+0x10a>
  if (queue->callback && queue->count > queue->aboveCount)
    queue->callback(queue->count);

  if (queue->count == queue->maxCount)
    {
      queue->full++;
 8015518:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 801551c:	3301      	adds	r3, #1
 801551e:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
          FREE_BUFFER(1025,2112);
        }
      if (buffer)
        {
          //No suitable buffer queue.
          intSafeFree(buffer);
 8015522:	4628      	mov	r0, r5
 8015524:	f7f3 fa10 	bl	8008948 <intSafeFree>
          bEnterCS();
 8015528:	f7f4 ff40 	bl	800a3ac <vPortEnterCritical>
          heapFrees++;
 801552c:	4b5e      	ldr	r3, [pc, #376]	; (80156a8 <bFree+0x278>)
 801552e:	68d9      	ldr	r1, [r3, #12]
          heapAllocated--;
 8015530:	689a      	ldr	r2, [r3, #8]
      if (buffer)
        {
          //No suitable buffer queue.
          intSafeFree(buffer);
          bEnterCS();
          heapFrees++;
 8015532:	3101      	adds	r1, #1
          heapAllocated--;
 8015534:	3a01      	subs	r2, #1
      if (buffer)
        {
          //No suitable buffer queue.
          intSafeFree(buffer);
          bEnterCS();
          heapFrees++;
 8015536:	60d9      	str	r1, [r3, #12]
          heapAllocated--;
 8015538:	609a      	str	r2, [r3, #8]
          bExitCS();
        }
    }
}
 801553a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          //No suitable buffer queue.
          intSafeFree(buffer);
          bEnterCS();
          heapFrees++;
          heapAllocated--;
          bExitCS();
 801553e:	f7f4 bf47 	b.w	800a3d0 <vPortExitCritical>
  queue->refillCount = refillCount;
  return 0;
}
int __attribute__((optimize("-O4")))bEnqueue(bQueue_t *queue, bBuffer_t *buffer)
{
  if (queue->callback && queue->count > queue->aboveCount)
 8015542:	4c58      	ldr	r4, [pc, #352]	; (80156a4 <bFree+0x274>)
 8015544:	69e3      	ldr	r3, [r4, #28]
 8015546:	68a0      	ldr	r0, [r4, #8]
 8015548:	b113      	cbz	r3, 8015550 <bFree+0x120>
 801554a:	6962      	ldr	r2, [r4, #20]
 801554c:	4290      	cmp	r0, r2
 801554e:	d874      	bhi.n	801563a <bFree+0x20a>
    queue->callback(queue->count);

  if (queue->count == queue->maxCount)
 8015550:	68e3      	ldr	r3, [r4, #12]
 8015552:	4e54      	ldr	r6, [pc, #336]	; (80156a4 <bFree+0x274>)
 8015554:	4283      	cmp	r3, r0
 8015556:	f000 8090 	beq.w	801567a <bFree+0x24a>
    {
      queue->full++;
      return -1;
    }
  bEnterCS();
 801555a:	f7f4 ff27 	bl	800a3ac <vPortEnterCritical>
  buffer->next = NULL;
  if (queue->head)
 801555e:	6833      	ldr	r3, [r6, #0]
    {
      queue->full++;
      return -1;
    }
  bEnterCS();
  buffer->next = NULL;
 8015560:	2200      	movs	r2, #0
 8015562:	612a      	str	r2, [r5, #16]
  if (queue->head)
 8015564:	2b00      	cmp	r3, #0
 8015566:	f000 8085 	beq.w	8015674 <bFree+0x244>
    {
      queue->tail->next = buffer;
 801556a:	6873      	ldr	r3, [r6, #4]
      queue->tail = buffer;
 801556c:	6075      	str	r5, [r6, #4]
    }
  bEnterCS();
  buffer->next = NULL;
  if (queue->head)
    {
      queue->tail->next = buffer;
 801556e:	611d      	str	r5, [r3, #16]
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
  queue->count++;
 8015570:	68a3      	ldr	r3, [r4, #8]
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 8015572:	6a62      	ldr	r2, [r4, #36]	; 0x24
  queue->count++;
  if (queue->count > queue->maxFilling)
 8015574:	6b21      	ldr	r1, [r4, #48]	; 0x30
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 8015576:	484b      	ldr	r0, [pc, #300]	; (80156a4 <bFree+0x274>)
  queue->count++;
 8015578:	3301      	adds	r3, #1
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 801557a:	3201      	adds	r2, #1
  queue->count++;
  if (queue->count > queue->maxFilling)
 801557c:	428b      	cmp	r3, r1
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 801557e:	6262      	str	r2, [r4, #36]	; 0x24
  queue->count++;
 8015580:	60a3      	str	r3, [r4, #8]
  if (queue->count > queue->maxFilling)
 8015582:	d9da      	bls.n	801553a <bFree+0x10a>
    queue->maxFilling = queue->count;
 8015584:	6303      	str	r3, [r0, #48]	; 0x30
 8015586:	e7d8      	b.n	801553a <bFree+0x10a>
  queue->refillCount = refillCount;
  return 0;
}
int __attribute__((optimize("-O4")))bEnqueue(bQueue_t *queue, bBuffer_t *buffer)
{
  if (queue->callback && queue->count > queue->aboveCount)
 8015588:	4c46      	ldr	r4, [pc, #280]	; (80156a4 <bFree+0x274>)
 801558a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 801558e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8015592:	b11b      	cbz	r3, 801559c <bFree+0x16c>
 8015594:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8015598:	4290      	cmp	r0, r2
 801559a:	d857      	bhi.n	801564c <bFree+0x21c>
    queue->callback(queue->count);

  if (queue->count == queue->maxCount)
 801559c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80155a0:	4e40      	ldr	r6, [pc, #256]	; (80156a4 <bFree+0x274>)
 80155a2:	4283      	cmp	r3, r0
 80155a4:	d06d      	beq.n	8015682 <bFree+0x252>
    {
      queue->full++;
      return -1;
    }
  bEnterCS();
 80155a6:	f7f4 ff01 	bl	800a3ac <vPortEnterCritical>
  buffer->next = NULL;
  if (queue->head)
 80155aa:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
    {
      queue->full++;
      return -1;
    }
  bEnterCS();
  buffer->next = NULL;
 80155ae:	2200      	movs	r2, #0
 80155b0:	612a      	str	r2, [r5, #16]
  if (queue->head)
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d04e      	beq.n	8015654 <bFree+0x224>
    {
      queue->tail->next = buffer;
 80155b6:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
      queue->tail = buffer;
 80155ba:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
    }
  bEnterCS();
  buffer->next = NULL;
  if (queue->head)
    {
      queue->tail->next = buffer;
 80155be:	611d      	str	r5, [r3, #16]
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
  queue->count++;
 80155c0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 80155c4:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
  queue->count++;
  if (queue->count > queue->maxFilling)
 80155c8:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 80155cc:	4835      	ldr	r0, [pc, #212]	; (80156a4 <bFree+0x274>)
  queue->count++;
 80155ce:	3301      	adds	r3, #1
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 80155d0:	3201      	adds	r2, #1
  queue->count++;
  if (queue->count > queue->maxFilling)
 80155d2:	428b      	cmp	r3, r1
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 80155d4:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
  queue->count++;
 80155d8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  if (queue->count > queue->maxFilling)
 80155dc:	d9ad      	bls.n	801553a <bFree+0x10a>
    queue->maxFilling = queue->count;
 80155de:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
 80155e2:	e7aa      	b.n	801553a <bFree+0x10a>
  queue->refillCount = refillCount;
  return 0;
}
int __attribute__((optimize("-O4")))bEnqueue(bQueue_t *queue, bBuffer_t *buffer)
{
  if (queue->callback && queue->count > queue->aboveCount)
 80155e4:	4c2f      	ldr	r4, [pc, #188]	; (80156a4 <bFree+0x274>)
 80155e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80155ea:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80155ec:	b113      	cbz	r3, 80155f4 <bFree+0x1c4>
 80155ee:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80155f0:	4290      	cmp	r0, r2
 80155f2:	d828      	bhi.n	8015646 <bFree+0x216>
    queue->callback(queue->count);

  if (queue->count == queue->maxCount)
 80155f4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80155f6:	4e2b      	ldr	r6, [pc, #172]	; (80156a4 <bFree+0x274>)
 80155f8:	4283      	cmp	r3, r0
 80155fa:	d08d      	beq.n	8015518 <bFree+0xe8>
    {
      queue->full++;
      return -1;
    }
  bEnterCS();
 80155fc:	f7f4 fed6 	bl	800a3ac <vPortEnterCritical>
  buffer->next = NULL;
  if (queue->head)
 8015600:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    {
      queue->full++;
      return -1;
    }
  bEnterCS();
  buffer->next = NULL;
 8015602:	2200      	movs	r2, #0
 8015604:	612a      	str	r2, [r5, #16]
  if (queue->head)
 8015606:	2b00      	cmp	r3, #0
 8015608:	d031      	beq.n	801566e <bFree+0x23e>
    {
      queue->tail->next = buffer;
 801560a:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
      queue->tail = buffer;
 801560c:	66f5      	str	r5, [r6, #108]	; 0x6c
    }
  bEnterCS();
  buffer->next = NULL;
  if (queue->head)
    {
      queue->tail->next = buffer;
 801560e:	611d      	str	r5, [r3, #16]
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
  queue->count++;
 8015610:	6f23      	ldr	r3, [r4, #112]	; 0x70
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 8015612:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
  queue->count++;
  if (queue->count > queue->maxFilling)
 8015616:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 801561a:	4822      	ldr	r0, [pc, #136]	; (80156a4 <bFree+0x274>)
  queue->count++;
 801561c:	3301      	adds	r3, #1
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 801561e:	3201      	adds	r2, #1
  queue->count++;
  if (queue->count > queue->maxFilling)
 8015620:	428b      	cmp	r3, r1
  else
    {
      queue->tail = buffer;
      queue->head = buffer;
    }
  queue->enqueues++;
 8015622:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  queue->count++;
 8015626:	6723      	str	r3, [r4, #112]	; 0x70
  if (queue->count > queue->maxFilling)
 8015628:	d987      	bls.n	801553a <bFree+0x10a>
    queue->maxFilling = queue->count;
 801562a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 801562e:	e784      	b.n	801553a <bFree+0x10a>
 8015630:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
}
int __attribute__((optimize("-O4")))bEnqueue(bQueue_t *queue, bBuffer_t *buffer)
{
  if (queue->callback && queue->count > queue->aboveCount)
    queue->callback(queue->count);
 8015632:	4798      	blx	r3
 8015634:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 8015638:	e748      	b.n	80154cc <bFree+0x9c>
 801563a:	4798      	blx	r3
 801563c:	68a0      	ldr	r0, [r4, #8]
 801563e:	e787      	b.n	8015550 <bFree+0x120>
 8015640:	4798      	blx	r3
 8015642:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015644:	e715      	b.n	8015472 <bFree+0x42>
 8015646:	4798      	blx	r3
 8015648:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801564a:	e7d3      	b.n	80155f4 <bFree+0x1c4>
 801564c:	4798      	blx	r3
 801564e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8015652:	e7a3      	b.n	801559c <bFree+0x16c>
      queue->tail->next = buffer;
      queue->tail = buffer;
    }
  else
    {
      queue->tail = buffer;
 8015654:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
      queue->head = buffer;
 8015658:	f8c6 509c 	str.w	r5, [r6, #156]	; 0x9c
 801565c:	e7b0      	b.n	80155c0 <bFree+0x190>
      queue->tail->next = buffer;
      queue->tail = buffer;
    }
  else
    {
      queue->tail = buffer;
 801565e:	f8c6 50d4 	str.w	r5, [r6, #212]	; 0xd4
      queue->head = buffer;
 8015662:	f8c6 50d0 	str.w	r5, [r6, #208]	; 0xd0
 8015666:	e745      	b.n	80154f4 <bFree+0xc4>
      queue->tail->next = buffer;
      queue->tail = buffer;
    }
  else
    {
      queue->tail = buffer;
 8015668:	63b5      	str	r5, [r6, #56]	; 0x38
      queue->head = buffer;
 801566a:	6375      	str	r5, [r6, #52]	; 0x34
 801566c:	e711      	b.n	8015492 <bFree+0x62>
      queue->tail->next = buffer;
      queue->tail = buffer;
    }
  else
    {
      queue->tail = buffer;
 801566e:	66f5      	str	r5, [r6, #108]	; 0x6c
      queue->head = buffer;
 8015670:	66b5      	str	r5, [r6, #104]	; 0x68
 8015672:	e7cd      	b.n	8015610 <bFree+0x1e0>
      queue->tail->next = buffer;
      queue->tail = buffer;
    }
  else
    {
      queue->tail = buffer;
 8015674:	6075      	str	r5, [r6, #4]
      queue->head = buffer;
 8015676:	6035      	str	r5, [r6, #0]
 8015678:	e77a      	b.n	8015570 <bFree+0x140>
  if (queue->callback && queue->count > queue->aboveCount)
    queue->callback(queue->count);

  if (queue->count == queue->maxCount)
    {
      queue->full++;
 801567a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 801567c:	3301      	adds	r3, #1
 801567e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015680:	e74f      	b.n	8015522 <bFree+0xf2>
 8015682:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
 8015686:	3301      	adds	r3, #1
 8015688:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 801568c:	e749      	b.n	8015522 <bFree+0xf2>
 801568e:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 8015692:	3301      	adds	r3, #1
 8015694:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
 8015698:	e743      	b.n	8015522 <bFree+0xf2>
 801569a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 801569c:	3301      	adds	r3, #1
 801569e:	65f3      	str	r3, [r6, #92]	; 0x5c
 80156a0:	e73f      	b.n	8015522 <bFree+0xf2>
 80156a2:	bf00      	nop
 80156a4:	100023f0 	.word	0x100023f0
 80156a8:	10002d90 	.word	0x10002d90

080156ac <bRef>:
        }
    }
}

void __attribute__((optimize("-O4")))bRef(bBuffer_t *buffer)
{
 80156ac:	b510      	push	{r4, lr}
 80156ae:	4604      	mov	r4, r0
  bEnterCS();
 80156b0:	f7f4 fe7c 	bl	800a3ac <vPortEnterCritical>
  buffer->ref++;
 80156b4:	88e3      	ldrh	r3, [r4, #6]
 80156b6:	3301      	adds	r3, #1
 80156b8:	80e3      	strh	r3, [r4, #6]
  bExitCS();
}
 80156ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void __attribute__((optimize("-O4")))bRef(bBuffer_t *buffer)
{
  bEnterCS();
  buffer->ref++;
  bExitCS();
 80156be:	f7f4 be87 	b.w	800a3d0 <vPortExitCritical>
	...

080156c4 <bCopy>:
}

bBuffer_t *__attribute__((optimize("-O4")))bCopy(bBuffer_t *buffer)
{
 80156c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bBuffer_t *new = bAlloc(buffer->maxSize);
 80156c8:	8845      	ldrh	r5, [r0, #2]
unsigned int heapLastSize  = 0;
bBuffer_t __attribute__((optimize("-O4"))) *bAlloc(int size)
{
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
 80156ca:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  buffer->ref++;
  bExitCS();
}

bBuffer_t *__attribute__((optimize("-O4")))bCopy(bBuffer_t *buffer)
{
 80156ce:	4607      	mov	r7, r0
unsigned int heapLastSize  = 0;
bBuffer_t __attribute__((optimize("-O4"))) *bAlloc(int size)
{
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
 80156d0:	f000 80e9 	beq.w	80158a6 <bCopy+0x1e2>
 80156d4:	d824      	bhi.n	8015720 <bCopy+0x5c>
 80156d6:	2d00      	cmp	r5, #0
 80156d8:	d052      	beq.n	8015780 <bCopy+0xbc>
 80156da:	2d20      	cmp	r5, #32
 80156dc:	d970      	bls.n	80157c0 <bCopy+0xfc>
 80156de:	2dc0      	cmp	r5, #192	; 0xc0
 80156e0:	d84e      	bhi.n	8015780 <bCopy+0xbc>
bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
 80156e2:	4ec9      	ldr	r6, [pc, #804]	; (8015a08 <bCopy+0x344>)

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
 80156e4:	f7f4 fe62 	bl	800a3ac <vPortEnterCritical>
  if (queue->refilling)
 80156e8:	f896 304f 	ldrb.w	r3, [r6, #79]	; 0x4f
 80156ec:	0618      	lsls	r0, r3, #24
 80156ee:	f140 8105 	bpl.w	80158fc <bCopy+0x238>
    {
      if (queue->refillCount < queue->count)
 80156f2:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80156f4:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80156f6:	f342 021e 	sbfx	r2, r2, #0, #31
 80156fa:	428a      	cmp	r2, r1
 80156fc:	f0c0 80f7 	bcc.w	80158ee <bCopy+0x22a>
          if (queue->refillCount > queue->count)
            queue->refilling = 1;
        }
    }
  else
    queue->empty++;
 8015700:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8015702:	3301      	adds	r3, #1
 8015704:	6633      	str	r3, [r6, #96]	; 0x60

  bExitCS();
 8015706:	f7f4 fe63 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 801570a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801570c:	4abe      	ldr	r2, [pc, #760]	; (8015a08 <bCopy+0x344>)
 801570e:	2b00      	cmp	r3, #0
 8015710:	f000 8247 	beq.w	8015ba2 <bCopy+0x4de>
 8015714:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8015716:	2a00      	cmp	r2, #0
 8015718:	f040 8251 	bne.w	8015bbe <bCopy+0x4fa>
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
 801571c:	23c0      	movs	r3, #192	; 0xc0
 801571e:	e02b      	b.n	8015778 <bCopy+0xb4>
unsigned int heapLastSize  = 0;
bBuffer_t __attribute__((optimize("-O4"))) *bAlloc(int size)
{
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
 8015720:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8015724:	f240 8093 	bls.w	801584e <bCopy+0x18a>
 8015728:	f5b5 6f04 	cmp.w	r5, #2112	; 0x840
 801572c:	d828      	bhi.n	8015780 <bCopy+0xbc>
bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
 801572e:	4eb6      	ldr	r6, [pc, #728]	; (8015a08 <bCopy+0x344>)

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
 8015730:	f7f4 fe3c 	bl	800a3ac <vPortEnterCritical>
  if (queue->refilling)
 8015734:	f896 30eb 	ldrb.w	r3, [r6, #235]	; 0xeb
 8015738:	061a      	lsls	r2, r3, #24
 801573a:	f140 810f 	bpl.w	801595c <bCopy+0x298>
    {
      if (queue->refillCount < queue->count)
 801573e:	f8d6 20e8 	ldr.w	r2, [r6, #232]	; 0xe8
 8015742:	f8d6 10d8 	ldr.w	r1, [r6, #216]	; 0xd8
 8015746:	f342 021e 	sbfx	r2, r2, #0, #31
 801574a:	428a      	cmp	r2, r1
 801574c:	f0c0 80ff 	bcc.w	801594e <bCopy+0x28a>
          if (queue->refillCount > queue->count)
            queue->refilling = 1;
        }
    }
  else
    queue->empty++;
 8015750:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
 8015754:	3301      	adds	r3, #1
 8015756:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc

  bExitCS();
 801575a:	f7f4 fe39 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 801575e:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
 8015762:	4aa9      	ldr	r2, [pc, #676]	; (8015a08 <bCopy+0x344>)
 8015764:	2b00      	cmp	r3, #0
 8015766:	f000 8233 	beq.w	8015bd0 <bCopy+0x50c>
 801576a:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 801576e:	2a00      	cmp	r2, #0
 8015770:	f040 821f 	bne.w	8015bb2 <bCopy+0x4ee>
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
      ALLOC_BUFFER(513, 1024);
      ALLOC_BUFFER(1025,2112);
 8015774:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8015778:	461e      	mov	r6, r3
 801577a:	f103 0014 	add.w	r0, r3, #20
 801577e:	e002      	b.n	8015786 <bCopy+0xc2>
 8015780:	462e      	mov	r6, r5
 8015782:	f105 0014 	add.w	r0, r5, #20
    }
  if (!buffer)
    {
      //No suitable buffer on queue. Alloc from heap
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
 8015786:	f7f3 f8ce 	bl	8008926 <intSafeMalloc>
      if (buffer)
 801578a:	4604      	mov	r4, r0
 801578c:	2800      	cmp	r0, #0
 801578e:	f000 818d 	beq.w	8015aac <bCopy+0x3e8>
        memset(buffer, 0x00, alloc_size);
      heapLastSize = alloc_size;
 8015792:	f8df 827c 	ldr.w	r8, [pc, #636]	; 8015a10 <bCopy+0x34c>
  if (!buffer)
    {
      //No suitable buffer on queue. Alloc from heap
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
      if (buffer)
        memset(buffer, 0x00, alloc_size);
 8015796:	4632      	mov	r2, r6
 8015798:	2100      	movs	r1, #0
 801579a:	f007 fceb 	bl	801d174 <memset>
      heapLastSize = alloc_size;
 801579e:	f8c8 6000 	str.w	r6, [r8]
      bEnterCS();
 80157a2:	f7f4 fe03 	bl	800a3ac <vPortEnterCritical>
      heapAllocs++;
 80157a6:	f8d8 2004 	ldr.w	r2, [r8, #4]
      heapAllocated++;
 80157aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
      if (buffer)
        memset(buffer, 0x00, alloc_size);
      heapLastSize = alloc_size;
      bEnterCS();
      heapAllocs++;
 80157ae:	3201      	adds	r2, #1
      heapAllocated++;
 80157b0:	3301      	adds	r3, #1
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
      if (buffer)
        memset(buffer, 0x00, alloc_size);
      heapLastSize = alloc_size;
      bEnterCS();
      heapAllocs++;
 80157b2:	f8c8 2004 	str.w	r2, [r8, #4]
      heapAllocated++;
 80157b6:	f8c8 3008 	str.w	r3, [r8, #8]
      bExitCS();
 80157ba:	f7f4 fe09 	bl	800a3d0 <vPortExitCritical>
 80157be:	e02c      	b.n	801581a <bCopy+0x156>
bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
 80157c0:	4e91      	ldr	r6, [pc, #580]	; (8015a08 <bCopy+0x344>)

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
 80157c2:	f7f4 fdf3 	bl	800a3ac <vPortEnterCritical>
  if (queue->refilling)
 80157c6:	7ef3      	ldrb	r3, [r6, #27]
 80157c8:	061a      	lsls	r2, r3, #24
 80157ca:	f100 8153 	bmi.w	8015a74 <bCopy+0x3b0>
 80157ce:	68b0      	ldr	r0, [r6, #8]
        queue->refilling = 0;
    }

  if (!queue->refilling)
    {
      buffer = queue->head;
 80157d0:	6834      	ldr	r4, [r6, #0]
 80157d2:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8015a08 <bCopy+0x344>
      if (buffer)
 80157d6:	2c00      	cmp	r4, #0
 80157d8:	f000 8175 	beq.w	8015ac6 <bCopy+0x402>
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
 80157dc:	2300      	movs	r3, #0
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 80157de:	6922      	ldr	r2, [r4, #16]
          buffer->next = NULL;
 80157e0:	6123      	str	r3, [r4, #16]
          count = --queue->count;
          queue->dequeues++;
 80157e2:	f8d8 3020 	ldr.w	r3, [r8, #32]
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 80157e6:	f8c8 2000 	str.w	r2, [r8]
          buffer->next = NULL;
          count = --queue->count;
          queue->dequeues++;
 80157ea:	3301      	adds	r3, #1
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 80157ec:	1e46      	subs	r6, r0, #1
          queue->dequeues++;
 80157ee:	f8c8 3020 	str.w	r3, [r8, #32]
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 80157f2:	f8c8 6008 	str.w	r6, [r8, #8]
        }
    }
  else
    queue->empty++;

  bExitCS();
 80157f6:	f7f4 fdeb 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 80157fa:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80157fe:	b163      	cbz	r3, 801581a <bCopy+0x156>
 8015800:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015804:	4296      	cmp	r6, r2
 8015806:	d303      	bcc.n	8015810 <bCopy+0x14c>
 8015808:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801580c:	4296      	cmp	r6, r2
 801580e:	d904      	bls.n	801581a <bCopy+0x156>
    queue->callback(count);
 8015810:	4630      	mov	r0, r6
 8015812:	4798      	blx	r3
{
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
 8015814:	2320      	movs	r3, #32
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
      ALLOC_BUFFER(513, 1024);
      ALLOC_BUFFER(1025,2112);
    }
  if (!buffer)
 8015816:	2c00      	cmp	r4, #0
 8015818:	d0ae      	beq.n	8015778 <bCopy+0xb4>
      heapAllocated++;
      bExitCS();
    }
  if (buffer)
    {
      if(cfg.empty_buffers)
 801581a:	4b7c      	ldr	r3, [pc, #496]	; (8015a0c <bCopy+0x348>)
 801581c:	68db      	ldr	r3, [r3, #12]
 801581e:	b97b      	cbnz	r3, 8015840 <bCopy+0x17c>
        memset(buffer->data, 0, size);
      buffer->maxSize = size;
      buffer->size = 0;
 8015820:	2300      	movs	r3, #0
      buffer->offset = 0;
      buffer->ref = 1;
 8015822:	2201      	movs	r2, #1
    }
  if (buffer)
    {
      if(cfg.empty_buffers)
        memset(buffer->data, 0, size);
      buffer->maxSize = size;
 8015824:	8065      	strh	r5, [r4, #2]
      buffer->size = 0;
 8015826:	8023      	strh	r3, [r4, #0]
      buffer->offset = 0;
 8015828:	80a3      	strh	r3, [r4, #4]
      buffer->ref = 1;
      buffer->next = NULL;
 801582a:	6123      	str	r3, [r4, #16]
      if(cfg.empty_buffers)
        memset(buffer->data, 0, size);
      buffer->maxSize = size;
      buffer->size = 0;
      buffer->offset = 0;
      buffer->ref = 1;
 801582c:	80e2      	strh	r2, [r4, #6]
}

bBuffer_t *__attribute__((optimize("-O4")))bCopy(bBuffer_t *buffer)
{
  bBuffer_t *new = bAlloc(buffer->maxSize);
  memcpy(new, buffer, buffer->maxSize + sizeof(bBuffer_t));
 801582e:	887a      	ldrh	r2, [r7, #2]
 8015830:	4639      	mov	r1, r7
 8015832:	3214      	adds	r2, #20
 8015834:	4620      	mov	r0, r4
 8015836:	f007 fc03 	bl	801d040 <memcpy>
  return new;
}
 801583a:	4620      	mov	r0, r4
 801583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      bExitCS();
    }
  if (buffer)
    {
      if(cfg.empty_buffers)
        memset(buffer->data, 0, size);
 8015840:	462a      	mov	r2, r5
 8015842:	2100      	movs	r1, #0
 8015844:	f104 0014 	add.w	r0, r4, #20
 8015848:	f007 fc94 	bl	801d174 <memset>
 801584c:	e7e8      	b.n	8015820 <bCopy+0x15c>
bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
 801584e:	4e6e      	ldr	r6, [pc, #440]	; (8015a08 <bCopy+0x344>)

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
 8015850:	f7f4 fdac 	bl	800a3ac <vPortEnterCritical>
  if (queue->refilling)
 8015854:	f896 30b7 	ldrb.w	r3, [r6, #183]	; 0xb7
 8015858:	0618      	lsls	r0, r3, #24
 801585a:	f140 80aa 	bpl.w	80159b2 <bCopy+0x2ee>
    {
      if (queue->refillCount < queue->count)
 801585e:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
 8015862:	f8d6 10a4 	ldr.w	r1, [r6, #164]	; 0xa4
 8015866:	f342 021e 	sbfx	r2, r2, #0, #31
 801586a:	428a      	cmp	r2, r1
 801586c:	d206      	bcs.n	801587c <bCopy+0x1b8>
        queue->refilling = 0;
 801586e:	f36f 13c7 	bfc	r3, #7, #1
    }

  if (!queue->refilling)
 8015872:	0619      	lsls	r1, r3, #24
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 8015874:	f886 30b7 	strb.w	r3, [r6, #183]	; 0xb7
    }

  if (!queue->refilling)
 8015878:	f140 809b 	bpl.w	80159b2 <bCopy+0x2ee>
          if (queue->refillCount > queue->count)
            queue->refilling = 1;
        }
    }
  else
    queue->empty++;
 801587c:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
 8015880:	3301      	adds	r3, #1
 8015882:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8

  bExitCS();
 8015886:	f7f4 fda3 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 801588a:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
 801588e:	4a5e      	ldr	r2, [pc, #376]	; (8015a08 <bCopy+0x344>)
 8015890:	2b00      	cmp	r3, #0
 8015892:	f000 8189 	beq.w	8015ba8 <bCopy+0x4e4>
 8015896:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 801589a:	2a00      	cmp	r2, #0
 801589c:	f040 818c 	bne.w	8015bb8 <bCopy+0x4f4>
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
      ALLOC_BUFFER(513, 1024);
 80158a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80158a4:	e768      	b.n	8015778 <bCopy+0xb4>
bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
 80158a6:	4e58      	ldr	r6, [pc, #352]	; (8015a08 <bCopy+0x344>)

bBuffer_t __attribute__((optimize("-O4"))) *bDequeue(bQueue_t *queue)
{
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
 80158a8:	f7f4 fd80 	bl	800a3ac <vPortEnterCritical>
  if (queue->refilling)
 80158ac:	f896 3083 	ldrb.w	r3, [r6, #131]	; 0x83
 80158b0:	061a      	lsls	r2, r3, #24
 80158b2:	f140 80b6 	bpl.w	8015a22 <bCopy+0x35e>
    {
      if (queue->refillCount < queue->count)
 80158b6:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 80158ba:	6f31      	ldr	r1, [r6, #112]	; 0x70
 80158bc:	f342 021e 	sbfx	r2, r2, #0, #31
 80158c0:	428a      	cmp	r2, r1
 80158c2:	f0c0 80a7 	bcc.w	8015a14 <bCopy+0x350>
          if (queue->refillCount > queue->count)
            queue->refilling = 1;
        }
    }
  else
    queue->empty++;
 80158c6:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80158ca:	3301      	adds	r3, #1
 80158cc:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94

  bExitCS();
 80158d0:	f7f4 fd7e 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 80158d4:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80158d8:	4a4b      	ldr	r2, [pc, #300]	; (8015a08 <bCopy+0x344>)
 80158da:	2b00      	cmp	r3, #0
 80158dc:	f000 8159 	beq.w	8015b92 <bCopy+0x4ce>
 80158e0:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80158e2:	2a00      	cmp	r2, #0
 80158e4:	f040 816e 	bne.w	8015bc4 <bCopy+0x500>
  int alloc_size = size;
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
 80158e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80158ec:	e744      	b.n	8015778 <bCopy+0xb4>
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 80158ee:	f36f 13c7 	bfc	r3, #7, #1
    }

  if (!queue->refilling)
 80158f2:	0619      	lsls	r1, r3, #24
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 80158f4:	f886 304f 	strb.w	r3, [r6, #79]	; 0x4f
    }

  if (!queue->refilling)
 80158f8:	f53f af02 	bmi.w	8015700 <bCopy+0x3c>
    {
      buffer = queue->head;
 80158fc:	6b74      	ldr	r4, [r6, #52]	; 0x34
 80158fe:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8015a08 <bCopy+0x344>
      if (buffer)
 8015902:	2c00      	cmp	r4, #0
 8015904:	f000 80f1 	beq.w	8015aea <bCopy+0x426>
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
 8015908:	2300      	movs	r3, #0
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 801590a:	6922      	ldr	r2, [r4, #16]
          buffer->next = NULL;
 801590c:	6123      	str	r3, [r4, #16]
          count = --queue->count;
          queue->dequeues++;
 801590e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 8015912:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 8015916:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
          buffer->next = NULL;
          count = --queue->count;
          queue->dequeues++;
 801591a:	3301      	adds	r3, #1
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 801591c:	3e01      	subs	r6, #1
          queue->dequeues++;
 801591e:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 8015922:	f8c8 603c 	str.w	r6, [r8, #60]	; 0x3c
        }
    }
  else
    queue->empty++;

  bExitCS();
 8015926:	f7f4 fd53 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 801592a:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 801592e:	2b00      	cmp	r3, #0
 8015930:	f43f af73 	beq.w	801581a <bCopy+0x156>
 8015934:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8015938:	4296      	cmp	r6, r2
 801593a:	d304      	bcc.n	8015946 <bCopy+0x282>
 801593c:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8015940:	4296      	cmp	r6, r2
 8015942:	f67f af6a 	bls.w	801581a <bCopy+0x156>
    queue->callback(count);
 8015946:	4630      	mov	r0, r6
 8015948:	4798      	blx	r3
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
 801594a:	23c0      	movs	r3, #192	; 0xc0
 801594c:	e763      	b.n	8015816 <bCopy+0x152>
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 801594e:	f36f 13c7 	bfc	r3, #7, #1
 8015952:	f886 30eb 	strb.w	r3, [r6, #235]	; 0xeb
    }

  if (!queue->refilling)
 8015956:	061b      	lsls	r3, r3, #24
 8015958:	f53f aefa 	bmi.w	8015750 <bCopy+0x8c>
    {
      buffer = queue->head;
 801595c:	f8d6 40d0 	ldr.w	r4, [r6, #208]	; 0xd0
 8015960:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8015a08 <bCopy+0x344>
      if (buffer)
 8015964:	2c00      	cmp	r4, #0
 8015966:	f000 80ff 	beq.w	8015b68 <bCopy+0x4a4>
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
 801596a:	2300      	movs	r3, #0
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 801596c:	6922      	ldr	r2, [r4, #16]
          buffer->next = NULL;
 801596e:	6123      	str	r3, [r4, #16]
          count = --queue->count;
          queue->dequeues++;
 8015970:	f8d8 30f0 	ldr.w	r3, [r8, #240]	; 0xf0
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 8015974:	f8d8 60d8 	ldr.w	r6, [r8, #216]	; 0xd8
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 8015978:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
          buffer->next = NULL;
          count = --queue->count;
          queue->dequeues++;
 801597c:	3301      	adds	r3, #1
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 801597e:	3e01      	subs	r6, #1
          queue->dequeues++;
 8015980:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 8015984:	f8c8 60d8 	str.w	r6, [r8, #216]	; 0xd8
        }
    }
  else
    queue->empty++;

  bExitCS();
 8015988:	f7f4 fd22 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 801598c:	f8d8 30ec 	ldr.w	r3, [r8, #236]	; 0xec
 8015990:	2b00      	cmp	r3, #0
 8015992:	f43f af42 	beq.w	801581a <bCopy+0x156>
 8015996:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 801599a:	4296      	cmp	r6, r2
 801599c:	d304      	bcc.n	80159a8 <bCopy+0x2e4>
 801599e:	f8d8 20e4 	ldr.w	r2, [r8, #228]	; 0xe4
 80159a2:	4296      	cmp	r6, r2
 80159a4:	f67f af39 	bls.w	801581a <bCopy+0x156>
    queue->callback(count);
 80159a8:	4630      	mov	r0, r6
 80159aa:	4798      	blx	r3
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
      ALLOC_BUFFER(513, 1024);
      ALLOC_BUFFER(1025,2112);
 80159ac:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80159b0:	e731      	b.n	8015816 <bCopy+0x152>
        queue->refilling = 0;
    }

  if (!queue->refilling)
    {
      buffer = queue->head;
 80159b2:	f8d6 409c 	ldr.w	r4, [r6, #156]	; 0x9c
 80159b6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8015a08 <bCopy+0x344>
      if (buffer)
 80159ba:	2c00      	cmp	r4, #0
 80159bc:	f000 80bf 	beq.w	8015b3e <bCopy+0x47a>
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
 80159c0:	2300      	movs	r3, #0
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 80159c2:	6922      	ldr	r2, [r4, #16]
          buffer->next = NULL;
 80159c4:	6123      	str	r3, [r4, #16]
          count = --queue->count;
          queue->dequeues++;
 80159c6:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 80159ca:	f8d8 60a4 	ldr.w	r6, [r8, #164]	; 0xa4
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 80159ce:	f8c8 209c 	str.w	r2, [r8, #156]	; 0x9c
          buffer->next = NULL;
          count = --queue->count;
          queue->dequeues++;
 80159d2:	3301      	adds	r3, #1
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 80159d4:	3e01      	subs	r6, #1
          queue->dequeues++;
 80159d6:	f8c8 30bc 	str.w	r3, [r8, #188]	; 0xbc
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 80159da:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
        }
    }
  else
    queue->empty++;

  bExitCS();
 80159de:	f7f4 fcf7 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 80159e2:	f8d8 30b8 	ldr.w	r3, [r8, #184]	; 0xb8
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	f43f af17 	beq.w	801581a <bCopy+0x156>
 80159ec:	f8d8 20ac 	ldr.w	r2, [r8, #172]	; 0xac
 80159f0:	4296      	cmp	r6, r2
 80159f2:	d304      	bcc.n	80159fe <bCopy+0x33a>
 80159f4:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 80159f8:	4296      	cmp	r6, r2
 80159fa:	f67f af0e 	bls.w	801581a <bCopy+0x156>
    queue->callback(count);
 80159fe:	4630      	mov	r0, r6
 8015a00:	4798      	blx	r3
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
      ALLOC_BUFFER(513, 1024);
 8015a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a06:	e706      	b.n	8015816 <bCopy+0x152>
 8015a08:	100023f0 	.word	0x100023f0
 8015a0c:	10001000 	.word	0x10001000
 8015a10:	10002d90 	.word	0x10002d90
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 8015a14:	f36f 13c7 	bfc	r3, #7, #1
    }

  if (!queue->refilling)
 8015a18:	061c      	lsls	r4, r3, #24
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 8015a1a:	f886 3083 	strb.w	r3, [r6, #131]	; 0x83
    }

  if (!queue->refilling)
 8015a1e:	f53f af52 	bmi.w	80158c6 <bCopy+0x202>
    {
      buffer = queue->head;
 8015a22:	6eb4      	ldr	r4, [r6, #104]	; 0x68
 8015a24:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8015bdc <bCopy+0x518>
      if (buffer)
 8015a28:	2c00      	cmp	r4, #0
 8015a2a:	d073      	beq.n	8015b14 <bCopy+0x450>
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
 8015a2c:	2300      	movs	r3, #0
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 8015a2e:	6922      	ldr	r2, [r4, #16]
          buffer->next = NULL;
 8015a30:	6123      	str	r3, [r4, #16]
          count = --queue->count;
          queue->dequeues++;
 8015a32:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 8015a36:	f8d8 6070 	ldr.w	r6, [r8, #112]	; 0x70
  if (!queue->refilling)
    {
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
 8015a3a:	f8c8 2068 	str.w	r2, [r8, #104]	; 0x68
          buffer->next = NULL;
          count = --queue->count;
          queue->dequeues++;
 8015a3e:	3301      	adds	r3, #1
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 8015a40:	3e01      	subs	r6, #1
          queue->dequeues++;
 8015a42:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
      buffer = queue->head;
      if (buffer)
        {
          queue->head = queue->head->next;
          buffer->next = NULL;
          count = --queue->count;
 8015a46:	f8c8 6070 	str.w	r6, [r8, #112]	; 0x70
        }
    }
  else
    queue->empty++;

  bExitCS();
 8015a4a:	f7f4 fcc1 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 8015a4e:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	f43f aee1 	beq.w	801581a <bCopy+0x156>
 8015a58:	f8d8 2078 	ldr.w	r2, [r8, #120]	; 0x78
 8015a5c:	4296      	cmp	r6, r2
 8015a5e:	d304      	bcc.n	8015a6a <bCopy+0x3a6>
 8015a60:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
 8015a64:	4296      	cmp	r6, r2
 8015a66:	f67f aed8 	bls.w	801581a <bCopy+0x156>
    queue->callback(count);
 8015a6a:	4630      	mov	r0, r6
 8015a6c:	4798      	blx	r3
  int alloc_size = size;
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
      ALLOC_BUFFER( 33,  192);
      ALLOC_BUFFER(512,  512);
 8015a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015a72:	e6d0      	b.n	8015816 <bCopy+0x152>
  unsigned int count = 0;
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
 8015a74:	69b2      	ldr	r2, [r6, #24]
 8015a76:	68b0      	ldr	r0, [r6, #8]
 8015a78:	f342 021e 	sbfx	r2, r2, #0, #31
 8015a7c:	4282      	cmp	r2, r0
 8015a7e:	d30f      	bcc.n	8015aa0 <bCopy+0x3dc>
          if (queue->refillCount > queue->count)
            queue->refilling = 1;
        }
    }
  else
    queue->empty++;
 8015a80:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8015a82:	3301      	adds	r3, #1
 8015a84:	62f3      	str	r3, [r6, #44]	; 0x2c

  bExitCS();
 8015a86:	f7f4 fca3 	bl	800a3d0 <vPortExitCritical>

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 8015a8a:	69f3      	ldr	r3, [r6, #28]
 8015a8c:	4a53      	ldr	r2, [pc, #332]	; (8015bdc <bCopy+0x518>)
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	f000 8084 	beq.w	8015b9c <bCopy+0x4d8>
 8015a94:	6912      	ldr	r2, [r2, #16]
 8015a96:	2a00      	cmp	r2, #0
 8015a98:	f040 8097 	bne.w	8015bca <bCopy+0x506>
{
  bBuffer_t *buffer = NULL;
  int alloc_size = size;
  switch (size)
    {
      ALLOC_BUFFER(  1,   32);
 8015a9c:	2320      	movs	r3, #32
 8015a9e:	e66b      	b.n	8015778 <bCopy+0xb4>
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 8015aa0:	f36f 13c7 	bfc	r3, #7, #1
    }

  if (!queue->refilling)
 8015aa4:	061c      	lsls	r4, r3, #24
  bBuffer_t *buffer = NULL;
  bEnterCS();
  if (queue->refilling)
    {
      if (queue->refillCount < queue->count)
        queue->refilling = 0;
 8015aa6:	76f3      	strb	r3, [r6, #27]
    }

  if (!queue->refilling)
 8015aa8:	d4ea      	bmi.n	8015a80 <bCopy+0x3bc>
 8015aaa:	e691      	b.n	80157d0 <bCopy+0x10c>
    {
      //No suitable buffer on queue. Alloc from heap
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
      if (buffer)
        memset(buffer, 0x00, alloc_size);
      heapLastSize = alloc_size;
 8015aac:	4d4c      	ldr	r5, [pc, #304]	; (8015be0 <bCopy+0x51c>)
 8015aae:	602e      	str	r6, [r5, #0]
      bEnterCS();
 8015ab0:	f7f4 fc7c 	bl	800a3ac <vPortEnterCritical>
      heapAllocs++;
 8015ab4:	686a      	ldr	r2, [r5, #4]
      heapAllocated++;
 8015ab6:	68ab      	ldr	r3, [r5, #8]
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
      if (buffer)
        memset(buffer, 0x00, alloc_size);
      heapLastSize = alloc_size;
      bEnterCS();
      heapAllocs++;
 8015ab8:	3201      	adds	r2, #1
      heapAllocated++;
 8015aba:	3301      	adds	r3, #1
      buffer = intSafeMalloc(alloc_size + sizeof(bBuffer_t));
      if (buffer)
        memset(buffer, 0x00, alloc_size);
      heapLastSize = alloc_size;
      bEnterCS();
      heapAllocs++;
 8015abc:	606a      	str	r2, [r5, #4]
      heapAllocated++;
 8015abe:	60ab      	str	r3, [r5, #8]
      bExitCS();
 8015ac0:	f7f4 fc86 	bl	800a3d0 <vPortExitCritical>
 8015ac4:	e6b3      	b.n	801582e <bCopy+0x16a>
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
          if (queue->refillCount > queue->count)
 8015ac6:	f8d8 3018 	ldr.w	r3, [r8, #24]
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015aca:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
          if (queue->refillCount > queue->count)
 8015ace:	f343 031e 	sbfx	r3, r3, #0, #31
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015ad2:	3201      	adds	r2, #1
          if (queue->refillCount > queue->count)
 8015ad4:	4283      	cmp	r3, r0
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015ad6:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
          if (queue->refillCount > queue->count)
 8015ada:	d9d4      	bls.n	8015a86 <bCopy+0x3c2>
            queue->refilling = 1;
 8015adc:	f898 301b 	ldrb.w	r3, [r8, #27]
 8015ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ae4:	f888 301b 	strb.w	r3, [r8, #27]
 8015ae8:	e7cd      	b.n	8015a86 <bCopy+0x3c2>
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
          if (queue->refillCount > queue->count)
 8015aea:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015aee:	f8d8 2060 	ldr.w	r2, [r8, #96]	; 0x60
          if (queue->refillCount > queue->count)
 8015af2:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8015af6:	f343 031e 	sbfx	r3, r3, #0, #31
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015afa:	3201      	adds	r2, #1
          if (queue->refillCount > queue->count)
 8015afc:	428b      	cmp	r3, r1
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015afe:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
          if (queue->refillCount > queue->count)
 8015b02:	f67f ae00 	bls.w	8015706 <bCopy+0x42>
            queue->refilling = 1;
 8015b06:	f898 304f 	ldrb.w	r3, [r8, #79]	; 0x4f
 8015b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b0e:	f888 304f 	strb.w	r3, [r8, #79]	; 0x4f
 8015b12:	e5f8      	b.n	8015706 <bCopy+0x42>
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
          if (queue->refillCount > queue->count)
 8015b14:	f8d8 3080 	ldr.w	r3, [r8, #128]	; 0x80
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015b18:	f8d8 2094 	ldr.w	r2, [r8, #148]	; 0x94
          if (queue->refillCount > queue->count)
 8015b1c:	f8d8 1070 	ldr.w	r1, [r8, #112]	; 0x70
 8015b20:	f343 031e 	sbfx	r3, r3, #0, #31
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015b24:	3201      	adds	r2, #1
          if (queue->refillCount > queue->count)
 8015b26:	428b      	cmp	r3, r1
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015b28:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
          if (queue->refillCount > queue->count)
 8015b2c:	f67f aed0 	bls.w	80158d0 <bCopy+0x20c>
            queue->refilling = 1;
 8015b30:	f898 3083 	ldrb.w	r3, [r8, #131]	; 0x83
 8015b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b38:	f888 3083 	strb.w	r3, [r8, #131]	; 0x83
 8015b3c:	e6c8      	b.n	80158d0 <bCopy+0x20c>
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
          if (queue->refillCount > queue->count)
 8015b3e:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015b42:	f8d8 20c8 	ldr.w	r2, [r8, #200]	; 0xc8
          if (queue->refillCount > queue->count)
 8015b46:	f8d8 10a4 	ldr.w	r1, [r8, #164]	; 0xa4
 8015b4a:	f343 031e 	sbfx	r3, r3, #0, #31
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015b4e:	3201      	adds	r2, #1
          if (queue->refillCount > queue->count)
 8015b50:	428b      	cmp	r3, r1
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015b52:	f8c8 20c8 	str.w	r2, [r8, #200]	; 0xc8
          if (queue->refillCount > queue->count)
 8015b56:	f67f ae96 	bls.w	8015886 <bCopy+0x1c2>
            queue->refilling = 1;
 8015b5a:	f898 30b7 	ldrb.w	r3, [r8, #183]	; 0xb7
 8015b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b62:	f888 30b7 	strb.w	r3, [r8, #183]	; 0xb7
 8015b66:	e68e      	b.n	8015886 <bCopy+0x1c2>
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
          if (queue->refillCount > queue->count)
 8015b68:	f8d8 30e8 	ldr.w	r3, [r8, #232]	; 0xe8
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015b6c:	f8d8 20fc 	ldr.w	r2, [r8, #252]	; 0xfc
          if (queue->refillCount > queue->count)
 8015b70:	f8d8 10d8 	ldr.w	r1, [r8, #216]	; 0xd8
 8015b74:	f343 031e 	sbfx	r3, r3, #0, #31
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015b78:	3201      	adds	r2, #1
          if (queue->refillCount > queue->count)
 8015b7a:	428b      	cmp	r3, r1
          count = --queue->count;
          queue->dequeues++;
        }
      else
        {
          queue->empty++;
 8015b7c:	f8c8 20fc 	str.w	r2, [r8, #252]	; 0xfc
          if (queue->refillCount > queue->count)
 8015b80:	f67f adeb 	bls.w	801575a <bCopy+0x96>
            queue->refilling = 1;
 8015b84:	f898 30eb 	ldrb.w	r3, [r8, #235]	; 0xeb
 8015b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b8c:	f888 30eb 	strb.w	r3, [r8, #235]	; 0xeb
 8015b90:	e5e3      	b.n	801575a <bCopy+0x96>
    queue->empty++;

  bExitCS();

  //Call a callback if number of elements in queue went below initialized value
  if (queue->callback && (count < queue->belowCount || count > queue->aboveCount))
 8015b92:	f44f 7005 	mov.w	r0, #532	; 0x214
 8015b96:	f44f 7600 	mov.w	r6, #512	; 0x200
 8015b9a:	e5f4      	b.n	8015786 <bCopy+0xc2>
 8015b9c:	2034      	movs	r0, #52	; 0x34
 8015b9e:	2620      	movs	r6, #32
 8015ba0:	e5f1      	b.n	8015786 <bCopy+0xc2>
 8015ba2:	20d4      	movs	r0, #212	; 0xd4
 8015ba4:	26c0      	movs	r6, #192	; 0xc0
 8015ba6:	e5ee      	b.n	8015786 <bCopy+0xc2>
 8015ba8:	f240 4014 	movw	r0, #1044	; 0x414
 8015bac:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8015bb0:	e5e9      	b.n	8015786 <bCopy+0xc2>
 8015bb2:	2400      	movs	r4, #0
 8015bb4:	4626      	mov	r6, r4
 8015bb6:	e6f7      	b.n	80159a8 <bCopy+0x2e4>
 8015bb8:	2400      	movs	r4, #0
 8015bba:	4626      	mov	r6, r4
 8015bbc:	e71f      	b.n	80159fe <bCopy+0x33a>
 8015bbe:	2400      	movs	r4, #0
 8015bc0:	4626      	mov	r6, r4
 8015bc2:	e6c0      	b.n	8015946 <bCopy+0x282>
 8015bc4:	2400      	movs	r4, #0
 8015bc6:	4626      	mov	r6, r4
 8015bc8:	e74f      	b.n	8015a6a <bCopy+0x3a6>
 8015bca:	2400      	movs	r4, #0
 8015bcc:	4626      	mov	r6, r4
 8015bce:	e61f      	b.n	8015810 <bCopy+0x14c>
 8015bd0:	f640 0054 	movw	r0, #2132	; 0x854
 8015bd4:	f44f 6604 	mov.w	r6, #2112	; 0x840
 8015bd8:	e5d5      	b.n	8015786 <bCopy+0xc2>
 8015bda:	bf00      	nop
 8015bdc:	100023f0 	.word	0x100023f0
 8015be0:	10002d90 	.word	0x10002d90

08015be4 <isHD>:
  [OF_16L16L8L8L16N_16P16P8P8P16N] = "16L16L8L8L16N_16P16P8P8P16N",
};

int isHD(void)
{
  if(pipes[0].active && (pipes[0].inFreq >= 88200 || pipes[0].inputFormat >= IF_24L24P)) return 1;
 8015be4:	4b12      	ldr	r3, [pc, #72]	; (8015c30 <isHD+0x4c>)
 8015be6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8015bea:	f012 0f02 	tst.w	r2, #2
 8015bee:	4619      	mov	r1, r3
 8015bf0:	d007      	beq.n	8015c02 <isHD+0x1e>
 8015bf2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8015bf4:	4a0f      	ldr	r2, [pc, #60]	; (8015c34 <isHD+0x50>)
 8015bf6:	4290      	cmp	r0, r2
 8015bf8:	dc17      	bgt.n	8015c2a <isHD+0x46>
 8015bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015bfe:	2b01      	cmp	r3, #1
 8015c00:	d813      	bhi.n	8015c2a <isHD+0x46>
  if(pipes[1].active && (pipes[1].inFreq >= 88200 || pipes[1].inputFormat >= IF_24L24P)) return 1;
 8015c02:	f891 3098 	ldrb.w	r3, [r1, #152]	; 0x98
 8015c06:	4a0a      	ldr	r2, [pc, #40]	; (8015c30 <isHD+0x4c>)
 8015c08:	f003 0302 	and.w	r3, r3, #2
 8015c0c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8015c10:	b163      	cbz	r3, 8015c2c <isHD+0x48>
 8015c12:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
 8015c16:	4b07      	ldr	r3, [pc, #28]	; (8015c34 <isHD+0x50>)
 8015c18:	4299      	cmp	r1, r3
 8015c1a:	dc06      	bgt.n	8015c2a <isHD+0x46>
  [OF_16L16L8L8L16N_16P16P8P8P16N] = "16L16L8L8L16N_16P16P8P8P16N",
};

int isHD(void)
{
  if(pipes[0].active && (pipes[0].inFreq >= 88200 || pipes[0].inputFormat >= IF_24L24P)) return 1;
 8015c1c:	f892 00a1 	ldrb.w	r0, [r2, #161]	; 0xa1
 8015c20:	2801      	cmp	r0, #1
 8015c22:	bf94      	ite	ls
 8015c24:	2000      	movls	r0, #0
 8015c26:	2001      	movhi	r0, #1
 8015c28:	4770      	bx	lr
 8015c2a:	2001      	movs	r0, #1
  if(pipes[1].active && (pipes[1].inFreq >= 88200 || pipes[1].inputFormat >= IF_24L24P)) return 1;

  return 0;
}
 8015c2c:	4770      	bx	lr
 8015c2e:	bf00      	nop
 8015c30:	100024f4 	.word	0x100024f4
 8015c34:	00015887 	.word	0x00015887

08015c38 <outQueuePipeAlloc>:

static void convert(int pipeNum);

static int outQueuePipeAlloc(bQueue_t *queue)
{
  if (pipes[0].outQueue1 == queue || pipes[0].outQueue2 == queue)
 8015c38:	4b0b      	ldr	r3, [pc, #44]	; (8015c68 <outQueuePipeAlloc+0x30>)
 8015c3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8015c3c:	4282      	cmp	r2, r0
 8015c3e:	d00e      	beq.n	8015c5e <outQueuePipeAlloc+0x26>
 8015c40:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8015c42:	4290      	cmp	r0, r2
 8015c44:	d00b      	beq.n	8015c5e <outQueuePipeAlloc+0x26>
    return 0;
  if (pipes[1].outQueue1 == queue || pipes[1].outQueue2 == queue)
 8015c46:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8015c4a:	4290      	cmp	r0, r2
 8015c4c:	d009      	beq.n	8015c62 <outQueuePipeAlloc+0x2a>
 8015c4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
    return 1;
  return -1;
 8015c52:	4298      	cmp	r0, r3
 8015c54:	bf0c      	ite	eq
 8015c56:	2001      	moveq	r0, #1
 8015c58:	f04f 30ff 	movne.w	r0, #4294967295
 8015c5c:	4770      	bx	lr
static void convert(int pipeNum);

static int outQueuePipeAlloc(bQueue_t *queue)
{
  if (pipes[0].outQueue1 == queue || pipes[0].outQueue2 == queue)
    return 0;
 8015c5e:	2000      	movs	r0, #0
 8015c60:	4770      	bx	lr
  if (pipes[1].outQueue1 == queue || pipes[1].outQueue2 == queue)
    return 1;
 8015c62:	2001      	movs	r0, #1
  return -1;
}
 8015c64:	4770      	bx	lr
 8015c66:	bf00      	nop
 8015c68:	100024f4 	.word	0x100024f4

08015c6c <fillUpSAI1>:

void fillUpSAI1(unsigned int count)
{
 8015c6c:	b508      	push	{r3, lr}
  int pipe = outQueuePipeAlloc(&outQueueSAI1);
 8015c6e:	4806      	ldr	r0, [pc, #24]	; (8015c88 <fillUpSAI1+0x1c>)
 8015c70:	f7ff ffe2 	bl	8015c38 <outQueuePipeAlloc>
  if(pipe >= 0)
 8015c74:	1e02      	subs	r2, r0, #0
 8015c76:	db05      	blt.n	8015c84 <fillUpSAI1+0x18>
    {
      if (moduleSendCommand(&module[0], CMD_CONVERT, (void*)pipe) < 0)
 8015c78:	2100      	movs	r1, #0
 8015c7a:	4804      	ldr	r0, [pc, #16]	; (8015c8c <fillUpSAI1+0x20>)
        {
          //Sending failed
        }
    }
}
 8015c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void fillUpSAI1(unsigned int count)
{
  int pipe = outQueuePipeAlloc(&outQueueSAI1);
  if(pipe >= 0)
    {
      if (moduleSendCommand(&module[0], CMD_CONVERT, (void*)pipe) < 0)
 8015c80:	f7f5 bba6 	b.w	800b3d0 <moduleSendCommand>
 8015c84:	bd08      	pop	{r3, pc}
 8015c86:	bf00      	nop
 8015c88:	100025dc 	.word	0x100025dc
 8015c8c:	100024fc 	.word	0x100024fc

08015c90 <fillUpSAI2>:
          //Sending failed
        }
    }
}
void fillUpSAI2(unsigned int count)
{
 8015c90:	b508      	push	{r3, lr}
  int pipe = outQueuePipeAlloc(&outQueueSAI2);
 8015c92:	4806      	ldr	r0, [pc, #24]	; (8015cac <fillUpSAI2+0x1c>)
 8015c94:	f7ff ffd0 	bl	8015c38 <outQueuePipeAlloc>
  if(pipe >= 0)
 8015c98:	1e02      	subs	r2, r0, #0
 8015c9a:	db05      	blt.n	8015ca8 <fillUpSAI2+0x18>
    {
      if (moduleSendCommand(&module[0], CMD_CONVERT, (void*)pipe) < 0)
 8015c9c:	2100      	movs	r1, #0
 8015c9e:	4804      	ldr	r0, [pc, #16]	; (8015cb0 <fillUpSAI2+0x20>)
        {
          //Sending failed
        }
    }
}
 8015ca0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void fillUpSAI2(unsigned int count)
{
  int pipe = outQueuePipeAlloc(&outQueueSAI2);
  if(pipe >= 0)
    {
      if (moduleSendCommand(&module[0], CMD_CONVERT, (void*)pipe) < 0)
 8015ca4:	f7f5 bb94 	b.w	800b3d0 <moduleSendCommand>
 8015ca8:	bd08      	pop	{r3, pc}
 8015caa:	bf00      	nop
 8015cac:	10002610 	.word	0x10002610
 8015cb0:	100024fc 	.word	0x100024fc

08015cb4 <mapFreq>:
  [INPUT_TEST] = IF_16L16P,
};

static freq_e mapFreq(int freq)
{
  switch (freq)
 8015cb4:	4b11      	ldr	r3, [pc, #68]	; (8015cfc <mapFreq+0x48>)
 8015cb6:	4298      	cmp	r0, r3
 8015cb8:	d015      	beq.n	8015ce6 <mapFreq+0x32>
 8015cba:	dc09      	bgt.n	8015cd0 <mapFreq+0x1c>
 8015cbc:	f64a 4344 	movw	r3, #44100	; 0xac44
 8015cc0:	4298      	cmp	r0, r3
 8015cc2:	d018      	beq.n	8015cf6 <mapFreq+0x42>
 8015cc4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8015cc8:	4298      	cmp	r0, r3
 8015cca:	d112      	bne.n	8015cf2 <mapFreq+0x3e>
    {
    case 44100:
      return FREQ_44100;
      break;
    case 48000:
      return FREQ_48000;
 8015ccc:	2002      	movs	r0, #2
 8015cce:	4770      	bx	lr
  [INPUT_TEST] = IF_16L16P,
};

static freq_e mapFreq(int freq)
{
  switch (freq)
 8015cd0:	4b0b      	ldr	r3, [pc, #44]	; (8015d00 <mapFreq+0x4c>)
 8015cd2:	4298      	cmp	r0, r3
 8015cd4:	d009      	beq.n	8015cea <mapFreq+0x36>
 8015cd6:	4b0b      	ldr	r3, [pc, #44]	; (8015d04 <mapFreq+0x50>)
 8015cd8:	4298      	cmp	r0, r3
 8015cda:	d008      	beq.n	8015cee <mapFreq+0x3a>
 8015cdc:	4b0a      	ldr	r3, [pc, #40]	; (8015d08 <mapFreq+0x54>)
 8015cde:	4298      	cmp	r0, r3
 8015ce0:	d107      	bne.n	8015cf2 <mapFreq+0x3e>
      break;
    case 88200:
      return FREQ_88200;
      break;
    case 96000:
      return FREQ_96000;
 8015ce2:	2004      	movs	r0, #4
 8015ce4:	4770      	bx	lr
      break;
    case 48000:
      return FREQ_48000;
      break;
    case 88200:
      return FREQ_88200;
 8015ce6:	2003      	movs	r0, #3
 8015ce8:	4770      	bx	lr
      break;
    case 96000:
      return FREQ_96000;
      break;
    case 176400:
      return FREQ_176400;
 8015cea:	2005      	movs	r0, #5
 8015cec:	4770      	bx	lr
      break;
    case 192000:
      return FREQ_192000;
 8015cee:	2006      	movs	r0, #6
 8015cf0:	4770      	bx	lr
      break;
    }
  return FREQ_NONE;
 8015cf2:	2000      	movs	r0, #0
 8015cf4:	4770      	bx	lr
static freq_e mapFreq(int freq)
{
  switch (freq)
    {
    case 44100:
      return FREQ_44100;
 8015cf6:	2001      	movs	r0, #1
    case 192000:
      return FREQ_192000;
      break;
    }
  return FREQ_NONE;
}
 8015cf8:	4770      	bx	lr
 8015cfa:	bf00      	nop
 8015cfc:	00015888 	.word	0x00015888
 8015d00:	0002b110 	.word	0x0002b110
 8015d04:	0002ee00 	.word	0x0002ee00
 8015d08:	00017700 	.word	0x00017700

08015d0c <getOutputType>:
  [FREQ_176400][OF_16L16L8L8L16N_16P16P8P8P16N] = 0x13,
  [FREQ_192000][OF_16L16L8L8L16N_16P16P8P8P16N] = 0x14,
};

int getOutputType(int pipeNum)
{
 8015d0c:	b508      	push	{r3, lr}
  pipe_t *pipe = &pipes[pipeNum];
  if(pipe)
    return audioOutputType[mapFreq(pipe->inFreq)][pipe->outputFormat];
 8015d0e:	4a08      	ldr	r2, [pc, #32]	; (8015d30 <getOutputType+0x24>)
 8015d10:	2350      	movs	r3, #80	; 0x50
 8015d12:	fb03 2200 	mla	r2, r3, r0, r2
 8015d16:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 8015d18:	f7ff ffcc 	bl	8015cb4 <mapFreq>
 8015d1c:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8015d20:	4a04      	ldr	r2, [pc, #16]	; (8015d34 <getOutputType+0x28>)
 8015d22:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8015d26:	4410      	add	r0, r2
 8015d28:	4403      	add	r3, r0
  return 0;
}
 8015d2a:	f893 03e4 	ldrb.w	r0, [r3, #996]	; 0x3e4
 8015d2e:	bd08      	pop	{r3, pc}
 8015d30:	100024f4 	.word	0x100024f4
 8015d34:	0803f04c 	.word	0x0803f04c

08015d38 <getOutputMode>:

int getOutputMode(int pipeNum)
{
  pipe_t *pipe = &pipes[pipeNum];
  if(pipe)
    return (pipe->outputMode == OM_RADIO)?1:2;
 8015d38:	4a05      	ldr	r2, [pc, #20]	; (8015d50 <getOutputMode+0x18>)
 8015d3a:	2350      	movs	r3, #80	; 0x50
 8015d3c:	fb03 2000 	mla	r0, r3, r0, r2
 8015d40:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8015d44:	2b00      	cmp	r3, #0
  return 0;
}
 8015d46:	bf0c      	ite	eq
 8015d48:	2001      	moveq	r0, #1
 8015d4a:	2002      	movne	r0, #2
 8015d4c:	4770      	bx	lr
 8015d4e:	bf00      	nop
 8015d50:	100024f4 	.word	0x100024f4

08015d54 <sendStreamInfo>:
      msgGenSend(msg);
    }
}

void sendStreamInfo(int pipeNum)
{
 8015d54:	2350      	movs	r3, #80	; 0x50
 8015d56:	4343      	muls	r3, r0
 8015d58:	4a0e      	ldr	r2, [pc, #56]	; (8015d94 <sendStreamInfo+0x40>)
 8015d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d5e:	f103 0508 	add.w	r5, r3, #8
 8015d62:	f103 0818 	add.w	r8, r3, #24
 8015d66:	4607      	mov	r7, r0
 8015d68:	4415      	add	r5, r2
 8015d6a:	4490      	add	r8, r2
}

static void sendStreamInfoSpkPipe(int pipeNum, int spkSet)
{
  pipe_t *pipe = &pipes[pipeNum];
  freq_e fr = mapFreq(pipe->inFreq);
 8015d6c:	f1a2 0648 	sub.w	r6, r2, #72	; 0x48
 8015d70:	461c      	mov	r4, r3
void sendStreamInfo(int pipeNum)
{
  pipe_t *pipe = &pipes[pipeNum];
  int spkNum;
  for(spkNum = 0; spkNum < 4; spkNum++)
    if(pipe->spkSets[spkNum] >= 0)
 8015d72:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8015d76:	2900      	cmp	r1, #0
 8015d78:	db07      	blt.n	8015d8a <sendStreamInfo+0x36>
}

static void sendStreamInfoSpkPipe(int pipeNum, int spkSet)
{
  pipe_t *pipe = &pipes[pipeNum];
  freq_e fr = mapFreq(pipe->inFreq);
 8015d7a:	1933      	adds	r3, r6, r4
 8015d7c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8015d7e:	f7ff ff99 	bl	8015cb4 <mapFreq>

  if (fr != FREQ_NONE)
 8015d82:	b110      	cbz	r0, 8015d8a <sendStreamInfo+0x36>
 8015d84:	4638      	mov	r0, r7
 8015d86:	f004 fd33 	bl	801a7f0 <sendStreamInfoSpkPipe.part.2>

void sendStreamInfo(int pipeNum)
{
  pipe_t *pipe = &pipes[pipeNum];
  int spkNum;
  for(spkNum = 0; spkNum < 4; spkNum++)
 8015d8a:	4545      	cmp	r5, r8
 8015d8c:	d1f1      	bne.n	8015d72 <sendStreamInfo+0x1e>
    if(pipe->spkSets[spkNum] >= 0)
      sendStreamInfoSpkPipe(pipeNum, pipe->spkSets[spkNum]);
}
 8015d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d92:	bf00      	nop
 8015d94:	1000253c 	.word	0x1000253c

08015d98 <streamDisable>:
    }
}

static void streamDisable(int pipeNum)
{
  if(pipeNum < 0) return;
 8015d98:	2800      	cmp	r0, #0
 8015d9a:	db01      	blt.n	8015da0 <streamDisable+0x8>
 8015d9c:	f004 bcd8 	b.w	801a750 <streamDisable.part.1>
 8015da0:	4770      	bx	lr
	...

08015da4 <pipeSetSpkSet>:
      }
}

void pipeSetSpkSet(int pipeNum, int spkSet, int spkNum)
{
  if(spkNum == -1)
 8015da4:	1c53      	adds	r3, r2, #1
        msgGenSend(msg);
      }
}

void pipeSetSpkSet(int pipeNum, int spkSet, int spkNum)
{
 8015da6:	b530      	push	{r4, r5, lr}
  if(spkNum == -1)
 8015da8:	d10c      	bne.n	8015dc4 <pipeSetSpkSet+0x20>
 8015daa:	4b0f      	ldr	r3, [pc, #60]	; (8015de8 <pipeSetSpkSet+0x44>)
 8015dac:	2200      	movs	r2, #0
    {
      for(spkNum = 0; spkNum < 4; spkNum++)
        {
          if(pipes[0].spkSets[spkNum] == spkSet)break;
 8015dae:	f853 4f04 	ldr.w	r4, [r3, #4]!
 8015db2:	428c      	cmp	r4, r1
 8015db4:	d006      	beq.n	8015dc4 <pipeSetSpkSet+0x20>
          if(pipes[1].spkSets[spkNum] == spkSet)break;
 8015db6:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8015db8:	42a1      	cmp	r1, r4
 8015dba:	d003      	beq.n	8015dc4 <pipeSetSpkSet+0x20>

void pipeSetSpkSet(int pipeNum, int spkSet, int spkNum)
{
  if(spkNum == -1)
    {
      for(spkNum = 0; spkNum < 4; spkNum++)
 8015dbc:	3201      	adds	r2, #1
 8015dbe:	2a04      	cmp	r2, #4
 8015dc0:	d1f5      	bne.n	8015dae <pipeSetSpkSet+0xa>
 8015dc2:	bd30      	pop	{r4, r5, pc}
          if(pipes[1].spkSets[spkNum] == spkSet)break;
        }
      //exit if not found
      if(spkNum > 3) return;
    }
  pipes[0].spkSets[spkNum] = -1;
 8015dc4:	4b09      	ldr	r3, [pc, #36]	; (8015dec <pipeSetSpkSet+0x48>)
 8015dc6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8015dca:	f04f 34ff 	mov.w	r4, #4294967295
  pipes[1].spkSets[spkNum] = -1;
  if(pipeNum >= 0)
 8015dce:	2800      	cmp	r0, #0
          if(pipes[1].spkSets[spkNum] == spkSet)break;
        }
      //exit if not found
      if(spkNum > 3) return;
    }
  pipes[0].spkSets[spkNum] = -1;
 8015dd0:	656c      	str	r4, [r5, #84]	; 0x54
  pipes[1].spkSets[spkNum] = -1;
 8015dd2:	f8c5 40a4 	str.w	r4, [r5, #164]	; 0xa4
  if(pipeNum >= 0)
    pipes[pipeNum].spkSets[spkNum] = spkSet;
 8015dd6:	bfa1      	itttt	ge
 8015dd8:	2414      	movge	r4, #20
 8015dda:	fb04 2200 	mlage	r2, r4, r0, r2
 8015dde:	eb03 0382 	addge.w	r3, r3, r2, lsl #2
 8015de2:	6559      	strge	r1, [r3, #84]	; 0x54
 8015de4:	bd30      	pop	{r4, r5, pc}
 8015de6:	bf00      	nop
 8015de8:	10002544 	.word	0x10002544
 8015dec:	100024f4 	.word	0x100024f4

08015df0 <getPipeNum>:
}

#define PIPE_SPK_SET 0
#define PIPE_INPUT   1
int getPipeNum(int spkSet)
{
 8015df0:	4b0c      	ldr	r3, [pc, #48]	; (8015e24 <getPipeNum+0x34>)
 8015df2:	f103 0210 	add.w	r2, r3, #16
  int i;
  for(i = 0; i < sizeof(pipes)/sizeof(pipes[0]); i++)
    {
      int spkNum;
      for(spkNum = 0; spkNum < 4; spkNum++)
        if(pipes[i].spkSets[spkNum] == spkSet) return i;
 8015df6:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8015dfa:	4288      	cmp	r0, r1
 8015dfc:	d00d      	beq.n	8015e1a <getPipeNum+0x2a>
{
  int i;
  for(i = 0; i < sizeof(pipes)/sizeof(pipes[0]); i++)
    {
      int spkNum;
      for(spkNum = 0; spkNum < 4; spkNum++)
 8015dfe:	4293      	cmp	r3, r2
 8015e00:	d1f9      	bne.n	8015df6 <getPipeNum+0x6>
 8015e02:	4b09      	ldr	r3, [pc, #36]	; (8015e28 <getPipeNum+0x38>)
 8015e04:	f103 0210 	add.w	r2, r3, #16
        if(pipes[i].spkSets[spkNum] == spkSet) return i;
 8015e08:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8015e0c:	4288      	cmp	r0, r1
 8015e0e:	d006      	beq.n	8015e1e <getPipeNum+0x2e>
{
  int i;
  for(i = 0; i < sizeof(pipes)/sizeof(pipes[0]); i++)
    {
      int spkNum;
      for(spkNum = 0; spkNum < 4; spkNum++)
 8015e10:	429a      	cmp	r2, r3
 8015e12:	d1f9      	bne.n	8015e08 <getPipeNum+0x18>
        if(pipes[i].spkSets[spkNum] == spkSet) return i;
    }
  return -1;;
 8015e14:	f04f 30ff 	mov.w	r0, #4294967295
 8015e18:	4770      	bx	lr
#define PIPE_SPK_SET 0
#define PIPE_INPUT   1
int getPipeNum(int spkSet)
{
  int i;
  for(i = 0; i < sizeof(pipes)/sizeof(pipes[0]); i++)
 8015e1a:	2000      	movs	r0, #0
 8015e1c:	4770      	bx	lr
 8015e1e:	2001      	movs	r0, #1
      int spkNum;
      for(spkNum = 0; spkNum < 4; spkNum++)
        if(pipes[i].spkSets[spkNum] == spkSet) return i;
    }
  return -1;;
}
 8015e20:	4770      	bx	lr
 8015e22:	bf00      	nop
 8015e24:	10002544 	.word	0x10002544
 8015e28:	10002594 	.word	0x10002594

08015e2c <inputChange>:
  int     subInput;
  uint8_t spkSet;
  outputMode_e outputMode;
} inputChange_t;
void inputChange(input_e input, int subinput, uint8_t spkSet, outputMode_e outputMode)
{
 8015e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e30:	4680      	mov	r8, r0
  //Allocate resources for data transfer
  inputChange_t *message = dAlloc(sizeof(inputChange_t));
 8015e32:	200c      	movs	r0, #12
  int     subInput;
  uint8_t spkSet;
  outputMode_e outputMode;
} inputChange_t;
void inputChange(input_e input, int subinput, uint8_t spkSet, outputMode_e outputMode)
{
 8015e34:	460f      	mov	r7, r1
 8015e36:	4616      	mov	r6, r2
 8015e38:	461d      	mov	r5, r3
  //Allocate resources for data transfer
  inputChange_t *message = dAlloc(sizeof(inputChange_t));
 8015e3a:	f7ff f89f 	bl	8014f7c <bAlloc>
 8015e3e:	4604      	mov	r4, r0
 8015e40:	b188      	cbz	r0, 8015e66 <inputChange+0x3a>

  if (message == NULL)
    return;

  //Fill message
  message->input = input;
 8015e42:	f880 8014 	strb.w	r8, [r0, #20]
  message->subInput = subinput;
 8015e46:	6187      	str	r7, [r0, #24]
  message->spkSet = spkSet;
 8015e48:	7706      	strb	r6, [r0, #28]
  message->outputMode = outputMode;
 8015e4a:	7745      	strb	r5, [r0, #29]

  //Send the message to communicator
  if (moduleSendCommand(module, CMD_INPUT_CHANGE, message) < 0)
 8015e4c:	f100 0214 	add.w	r2, r0, #20
 8015e50:	2101      	movs	r1, #1
 8015e52:	4806      	ldr	r0, [pc, #24]	; (8015e6c <inputChange+0x40>)
 8015e54:	f7f5 fabc 	bl	800b3d0 <moduleSendCommand>
 8015e58:	2800      	cmp	r0, #0
 8015e5a:	da04      	bge.n	8015e66 <inputChange+0x3a>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 8015e5c:	4620      	mov	r0, r4
    }
}
 8015e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  //Send the message to communicator
  if (moduleSendCommand(module, CMD_INPUT_CHANGE, message) < 0)
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 8015e62:	f7ff bae5 	b.w	8015430 <bFree>
 8015e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e6a:	bf00      	nop
 8015e6c:	100024fc 	.word	0x100024fc

08015e70 <inputChangeMsg>:
    }
}
static void inputChangeMsg(void *data)
{
 8015e70:	b570      	push	{r4, r5, r6, lr}
 8015e72:	4b2b      	ldr	r3, [pc, #172]	; (8015f20 <inputChangeMsg+0xb0>)
  inputChange_t *message = data;
  int pipeNum = getPipe(PIPE_SPK_SET, message->spkSet);
 8015e74:	7a01      	ldrb	r1, [r0, #8]
      //Free allocated resources
      dFree(message);
    }
}
static void inputChangeMsg(void *data)
{
 8015e76:	4604      	mov	r4, r0
 8015e78:	f103 0210 	add.w	r2, r3, #16
        {
        case PIPE_SPK_SET:
        {
          int spkNum;
          for(spkNum = 0; spkNum < 4; spkNum++)
            if(pipes[i].spkSets[spkNum] == value) return i;
 8015e7c:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8015e80:	4281      	cmp	r1, r0
 8015e82:	d00b      	beq.n	8015e9c <inputChangeMsg+0x2c>
      switch(searchFilter)
        {
        case PIPE_SPK_SET:
        {
          int spkNum;
          for(spkNum = 0; spkNum < 4; spkNum++)
 8015e84:	429a      	cmp	r2, r3
 8015e86:	d1f9      	bne.n	8015e7c <inputChangeMsg+0xc>
 8015e88:	4b26      	ldr	r3, [pc, #152]	; (8015f24 <inputChangeMsg+0xb4>)
 8015e8a:	f103 0210 	add.w	r2, r3, #16
            if(pipes[i].spkSets[spkNum] == value) return i;
 8015e8e:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8015e92:	4281      	cmp	r1, r0
 8015e94:	d004      	beq.n	8015ea0 <inputChangeMsg+0x30>
      switch(searchFilter)
        {
        case PIPE_SPK_SET:
        {
          int spkNum;
          for(spkNum = 0; spkNum < 4; spkNum++)
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d1f9      	bne.n	8015e8e <inputChangeMsg+0x1e>
 8015e9a:	e033      	b.n	8015f04 <inputChangeMsg+0x94>
}

static int getPipe(uint8_t searchFilter, uint32_t value)
{
  int i;
  for(i = 0; i < sizeof(pipes)/sizeof(pipes[0]); i++)
 8015e9c:	2600      	movs	r6, #0
 8015e9e:	e000      	b.n	8015ea2 <inputChangeMsg+0x32>
 8015ea0:	2601      	movs	r6, #1
      dprintf(LL_DEBUG, "Pipe for spkSet %x not found.\n", message->spkSet);
      dFree(message);
      return;
    }

  if(message->outputMode != OM_NO_CHANGE)
 8015ea2:	7a63      	ldrb	r3, [r4, #9]
 8015ea4:	4d20      	ldr	r5, [pc, #128]	; (8015f28 <inputChangeMsg+0xb8>)
 8015ea6:	2b03      	cmp	r3, #3
 8015ea8:	d00a      	beq.n	8015ec0 <inputChangeMsg+0x50>
    {
      pipes[0].outputMode = message->outputMode;
 8015eaa:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
      pipes[1].outputMode = message->outputMode;
 8015eae:	7a63      	ldrb	r3, [r4, #9]
 8015eb0:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
 8015eb4:	2000      	movs	r0, #0
 8015eb6:	f004 fc4b 	bl	801a750 <streamDisable.part.1>
 8015eba:	2001      	movs	r0, #1
 8015ebc:	f004 fc48 	bl	801a750 <streamDisable.part.1>
  pipe_t *pipe = &pipes[pipeNum];

  //Reconfigure pipe
  //  if(pipe->input != message->input)
  {
    pipe->input = message->input;
 8015ec0:	2350      	movs	r3, #80	; 0x50
 8015ec2:	fb03 5306 	mla	r3, r3, r6, r5
 8015ec6:	7822      	ldrb	r2, [r4, #0]
 8015ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    pipe->subinput = message->subInput;
 8015ecc:	6861      	ldr	r1, [r4, #4]
 8015ece:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8015ed2:	f361 0285 	bfi	r2, r1, #2, #4
 8015ed6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    pipe->inputFormat = cInputFormat[message->input];
 8015eda:	7822      	ldrb	r2, [r4, #0]
 8015edc:	442a      	add	r2, r5
    pipe->inFreq = cInFreq[message->input];
    pipeConfigure(pipeNum);
 8015ede:	4630      	mov	r0, r6
  //Reconfigure pipe
  //  if(pipe->input != message->input)
  {
    pipe->input = message->input;
    pipe->subinput = message->subInput;
    pipe->inputFormat = cInputFormat[message->input];
 8015ee0:	f892 22b0 	ldrb.w	r2, [r2, #688]	; 0x2b0
 8015ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    pipe->inFreq = cInFreq[message->input];
 8015ee8:	f814 2914 	ldrb.w	r2, [r4], #-20
 8015eec:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8015ef0:	f8d5 2288 	ldr.w	r2, [r5, #648]	; 0x288
 8015ef4:	67da      	str	r2, [r3, #124]	; 0x7c
    pipeConfigure(pipeNum);
 8015ef6:	f000 f96d 	bl	80161d4 <pipeConfigure>
  }

  dFree(message);
 8015efa:	4620      	mov	r0, r4
}
 8015efc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pipe->inputFormat = cInputFormat[message->input];
    pipe->inFreq = cInFreq[message->input];
    pipeConfigure(pipeNum);
  }

  dFree(message);
 8015f00:	f7ff ba96 	b.w	8015430 <bFree>
{
  inputChange_t *message = data;
  int pipeNum = getPipe(PIPE_SPK_SET, message->spkSet);
  if(pipeNum < 0)
    {
      dprintf(LL_DEBUG, "Pipe for spkSet %x not found.\n", message->spkSet);
 8015f04:	4b09      	ldr	r3, [pc, #36]	; (8015f2c <inputChangeMsg+0xbc>)
 8015f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f08:	2b02      	cmp	r3, #2
 8015f0a:	dd02      	ble.n	8015f12 <inputChangeMsg+0xa2>
 8015f0c:	4808      	ldr	r0, [pc, #32]	; (8015f30 <inputChangeMsg+0xc0>)
 8015f0e:	f7f2 fe8b 	bl	8008c28 <xprintf>
      dFree(message);
 8015f12:	f1a4 0014 	sub.w	r0, r4, #20
    pipe->inFreq = cInFreq[message->input];
    pipeConfigure(pipeNum);
  }

  dFree(message);
}
 8015f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  inputChange_t *message = data;
  int pipeNum = getPipe(PIPE_SPK_SET, message->spkSet);
  if(pipeNum < 0)
    {
      dprintf(LL_DEBUG, "Pipe for spkSet %x not found.\n", message->spkSet);
      dFree(message);
 8015f1a:	f7ff ba89 	b.w	8015430 <bFree>
 8015f1e:	bf00      	nop
 8015f20:	10002544 	.word	0x10002544
 8015f24:	10002594 	.word	0x10002594
 8015f28:	100024f4 	.word	0x100024f4
 8015f2c:	10001000 	.word	0x10001000
 8015f30:	0803f46f 	.word	0x0803f46f

08015f34 <rmChange>:
{
  radioMode_e radioMode;
  int spkSet;
} rmChange_t;
void rmChange(radioMode_e radioMode, int spkSet, int wait)
{
 8015f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f36:	4605      	mov	r5, r0
  //Allocate resources for data transfer
  rmChange_t *message = dAlloc(sizeof(rmChange_t));
 8015f38:	2008      	movs	r0, #8
{
  radioMode_e radioMode;
  int spkSet;
} rmChange_t;
void rmChange(radioMode_e radioMode, int spkSet, int wait)
{
 8015f3a:	460f      	mov	r7, r1
 8015f3c:	4616      	mov	r6, r2
  //Allocate resources for data transfer
  rmChange_t *message = dAlloc(sizeof(rmChange_t));
 8015f3e:	f7ff f81d 	bl	8014f7c <bAlloc>
 8015f42:	4604      	mov	r4, r0
 8015f44:	b1b8      	cbz	r0, 8015f76 <rmChange+0x42>

  if (message == NULL)
    return;

  //Fill message
  message->radioMode = radioMode;
 8015f46:	7505      	strb	r5, [r0, #20]
  message->spkSet = spkSet;
 8015f48:	6187      	str	r7, [r0, #24]

  //Send the message to communicator
  if (moduleSendCommand(module, CMD_RADIO_MODE_CHANGE, message) < 0)
 8015f4a:	f100 0214 	add.w	r2, r0, #20
 8015f4e:	2103      	movs	r1, #3
 8015f50:	4809      	ldr	r0, [pc, #36]	; (8015f78 <rmChange+0x44>)
 8015f52:	f7f5 fa3d 	bl	800b3d0 <moduleSendCommand>
 8015f56:	2800      	cmp	r0, #0
 8015f58:	da04      	bge.n	8015f64 <rmChange+0x30>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 8015f5a:	4620      	mov	r0, r4
    }
  else
    while(wait && radioMode != rMode) mdelay(1);

}
 8015f5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  //Send the message to communicator
  if (moduleSendCommand(module, CMD_RADIO_MODE_CHANGE, message) < 0)
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 8015f60:	f7ff ba66 	b.w	8015430 <bFree>
    }
  else
    while(wait && radioMode != rMode) mdelay(1);
 8015f64:	4c05      	ldr	r4, [pc, #20]	; (8015f7c <rmChange+0x48>)
 8015f66:	b136      	cbz	r6, 8015f76 <rmChange+0x42>
 8015f68:	7823      	ldrb	r3, [r4, #0]
 8015f6a:	42ab      	cmp	r3, r5
 8015f6c:	d003      	beq.n	8015f76 <rmChange+0x42>
 8015f6e:	2001      	movs	r0, #1
 8015f70:	f7f4 fdca 	bl	800ab08 <vTaskDelay>
 8015f74:	e7f7      	b.n	8015f66 <rmChange+0x32>
 8015f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f78:	100024fc 	.word	0x100024fc
 8015f7c:	100024f4 	.word	0x100024f4

08015f80 <rmChangeMsg>:

}
static void rmChangeMsg(void *data)
{
 8015f80:	b510      	push	{r4, lr}
  stereoSpkSet = -1;
 8015f82:	4b11      	ldr	r3, [pc, #68]	; (8015fc8 <rmChangeMsg+0x48>)
 8015f84:	f04f 32ff 	mov.w	r2, #4294967295
 8015f88:	605a      	str	r2, [r3, #4]
  twoOutputs = 0;
 8015f8a:	4a10      	ldr	r2, [pc, #64]	; (8015fcc <rmChangeMsg+0x4c>)
 8015f8c:	2100      	movs	r1, #0
 8015f8e:	6011      	str	r1, [r2, #0]
  rmChange_t *message = data;
  switch(message->radioMode)
 8015f90:	7801      	ldrb	r1, [r0, #0]
  else
    while(wait && radioMode != rMode) mdelay(1);

}
static void rmChangeMsg(void *data)
{
 8015f92:	4604      	mov	r4, r0
  stereoSpkSet = -1;
  twoOutputs = 0;
  rmChange_t *message = data;
  switch(message->radioMode)
 8015f94:	b129      	cbz	r1, 8015fa2 <rmChangeMsg+0x22>
 8015f96:	2902      	cmp	r1, #2
 8015f98:	d80f      	bhi.n	8015fba <rmChangeMsg+0x3a>
    {
    default:
      break;
    case RM_MULTISLAVE_STEREO:
    case RM_SINGLESLAVE:
      twoOutputs = 1;
 8015f9a:	2101      	movs	r1, #1
 8015f9c:	6011      	str	r1, [r2, #0]
      stereoSpkSet = message->spkSet;
 8015f9e:	6842      	ldr	r2, [r0, #4]
 8015fa0:	605a      	str	r2, [r3, #4]
    case RM_MULTISLAVE:
      if(message->radioMode != rMode)
 8015fa2:	7822      	ldrb	r2, [r4, #0]
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	4293      	cmp	r3, r2
 8015fa8:	d007      	beq.n	8015fba <rmChangeMsg+0x3a>
        {
          rMode = message->radioMode;
 8015faa:	4b07      	ldr	r3, [pc, #28]	; (8015fc8 <rmChangeMsg+0x48>)
          pipeConfigure(0);
 8015fac:	2000      	movs	r0, #0
      twoOutputs = 1;
      stereoSpkSet = message->spkSet;
    case RM_MULTISLAVE:
      if(message->radioMode != rMode)
        {
          rMode = message->radioMode;
 8015fae:	701a      	strb	r2, [r3, #0]
          pipeConfigure(0);
 8015fb0:	f000 f910 	bl	80161d4 <pipeConfigure>
          pipeConfigure(1);
 8015fb4:	2001      	movs	r0, #1
 8015fb6:	f000 f90d 	bl	80161d4 <pipeConfigure>
        }
      break;
    }

  dFree(message);
 8015fba:	f1a4 0014 	sub.w	r0, r4, #20
}
 8015fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          pipeConfigure(1);
        }
      break;
    }

  dFree(message);
 8015fc2:	f7ff ba35 	b.w	8015430 <bFree>
 8015fc6:	bf00      	nop
 8015fc8:	100024f4 	.word	0x100024f4
 8015fcc:	10002da0 	.word	0x10002da0

08015fd0 <unMute>:
{
  int pipeNum;
} unmute_t;

void unMute(int pipeNum)
{
 8015fd0:	b538      	push	{r3, r4, r5, lr}
 8015fd2:	4605      	mov	r5, r0
  //Allocate resources for data transfer
  unmute_t *message = dAlloc(sizeof(unmute_t));
 8015fd4:	2004      	movs	r0, #4
 8015fd6:	f7fe ffd1 	bl	8014f7c <bAlloc>
 8015fda:	4604      	mov	r4, r0
 8015fdc:	b168      	cbz	r0, 8015ffa <unMute+0x2a>

  if (message == NULL)
    return;

  //Fill message
  message->pipeNum = pipeNum;
 8015fde:	4602      	mov	r2, r0

  //Send the message to communicator
  if (moduleSendCommand(module, CMD_UNMUTE, message) < 0)
 8015fe0:	2104      	movs	r1, #4

  if (message == NULL)
    return;

  //Fill message
  message->pipeNum = pipeNum;
 8015fe2:	f842 5f14 	str.w	r5, [r2, #20]!

  //Send the message to communicator
  if (moduleSendCommand(module, CMD_UNMUTE, message) < 0)
 8015fe6:	4805      	ldr	r0, [pc, #20]	; (8015ffc <unMute+0x2c>)
 8015fe8:	f7f5 f9f2 	bl	800b3d0 <moduleSendCommand>
 8015fec:	2800      	cmp	r0, #0
 8015fee:	da04      	bge.n	8015ffa <unMute+0x2a>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 8015ff0:	4620      	mov	r0, r4
    }
}
 8015ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  //Send the message to communicator
  if (moduleSendCommand(module, CMD_UNMUTE, message) < 0)
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 8015ff6:	f7ff ba1b 	b.w	8015430 <bFree>
 8015ffa:	bd38      	pop	{r3, r4, r5, pc}
 8015ffc:	100024fc 	.word	0x100024fc

08016000 <unmuteMsg>:
    }
}

static void unmuteMsg(void *data)
{
 8016000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unmute_t *message = data;
  pipes[message->pipeNum].mute = 0;
 8016004:	4f0d      	ldr	r7, [pc, #52]	; (801603c <unmuteMsg+0x3c>)
 8016006:	6803      	ldr	r3, [r0, #0]
 8016008:	f04f 0850 	mov.w	r8, #80	; 0x50
 801600c:	fb08 7303 	mla	r3, r8, r3, r7
  pipes[message->pipeNum].unmuteIgnore = cfg.unmuteIgnore + xTaskGetTickCount();
 8016010:	4604      	mov	r4, r0
}

static void unmuteMsg(void *data)
{
  unmute_t *message = data;
  pipes[message->pipeNum].mute = 0;
 8016012:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8016016:	f36f 0200 	bfc	r2, #0, #1
 801601a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  pipes[message->pipeNum].unmuteIgnore = cfg.unmuteIgnore + xTaskGetTickCount();
 801601e:	4b08      	ldr	r3, [pc, #32]	; (8016040 <unmuteMsg+0x40>)
 8016020:	f854 5914 	ldr.w	r5, [r4], #-20
 8016024:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8016026:	f7f4 fc79 	bl	800a91c <xTaskGetTickCount>
 801602a:	fb08 7505 	mla	r5, r8, r5, r7
 801602e:	4430      	add	r0, r6
 8016030:	64e8      	str	r0, [r5, #76]	; 0x4c
  dFree(message);
 8016032:	4620      	mov	r0, r4
}
 8016034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
static void unmuteMsg(void *data)
{
  unmute_t *message = data;
  pipes[message->pipeNum].mute = 0;
  pipes[message->pipeNum].unmuteIgnore = cfg.unmuteIgnore + xTaskGetTickCount();
  dFree(message);
 8016038:	f7ff b9fa 	b.w	8015430 <bFree>
 801603c:	100024f4 	.word	0x100024f4
 8016040:	10001000 	.word	0x10001000

08016044 <formatChange>:
  input_format_e inputFormat;
  int freq;
} formatChange_t;

void formatChange(input_e input, input_format_e inputFormat, int freq)
{
 8016044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016046:	4607      	mov	r7, r0
  //Allocate resources for data transfer
  formatChange_t *message = dAlloc(sizeof(formatChange_t));
 8016048:	2008      	movs	r0, #8
  input_format_e inputFormat;
  int freq;
} formatChange_t;

void formatChange(input_e input, input_format_e inputFormat, int freq)
{
 801604a:	460e      	mov	r6, r1
 801604c:	4615      	mov	r5, r2
  //Allocate resources for data transfer
  formatChange_t *message = dAlloc(sizeof(formatChange_t));
 801604e:	f7fe ff95 	bl	8014f7c <bAlloc>
 8016052:	4604      	mov	r4, r0
 8016054:	b178      	cbz	r0, 8016076 <formatChange+0x32>

  if (message == NULL)
    return;

  //Fill message
  message->input = input;
 8016056:	7507      	strb	r7, [r0, #20]
  message->inputFormat = inputFormat;
 8016058:	7546      	strb	r6, [r0, #21]
  message->freq = freq;
 801605a:	6185      	str	r5, [r0, #24]

  //Send the message to communicator
  if (moduleSendCommand(module, CMD_FORMAT_CHANGE, message) < 0)
 801605c:	f100 0214 	add.w	r2, r0, #20
 8016060:	2102      	movs	r1, #2
 8016062:	4805      	ldr	r0, [pc, #20]	; (8016078 <formatChange+0x34>)
 8016064:	f7f5 f9b4 	bl	800b3d0 <moduleSendCommand>
 8016068:	2800      	cmp	r0, #0
 801606a:	da04      	bge.n	8016076 <formatChange+0x32>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 801606c:	4620      	mov	r0, r4
    }
}
 801606e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  //Send the message to communicator
  if (moduleSendCommand(module, CMD_FORMAT_CHANGE, message) < 0)
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 8016072:	f7ff b9dd 	b.w	8015430 <bFree>
 8016076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016078:	100024fc 	.word	0x100024fc

0801607c <formatChangeMsg>:
    }
}
static void formatChangeMsg(void *data)
{
 801607c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  formatChange_t *message = data;
  uint8_t inValidPrevious = cInValid[message->input];
 8016080:	4d3f      	ldr	r5, [pc, #252]	; (8016180 <formatChangeMsg+0x104>)
 8016082:	7803      	ldrb	r3, [r0, #0]
  if(message->freq != 0)
 8016084:	6842      	ldr	r2, [r0, #4]
    }
}
static void formatChangeMsg(void *data)
{
  formatChange_t *message = data;
  uint8_t inValidPrevious = cInValid[message->input];
 8016086:	18e9      	adds	r1, r5, r3
      //Free allocated resources
      dFree(message);
    }
}
static void formatChangeMsg(void *data)
{
 8016088:	4604      	mov	r4, r0
  formatChange_t *message = data;
  uint8_t inValidPrevious = cInValid[message->input];
 801608a:	f891 82a8 	ldrb.w	r8, [r1, #680]	; 0x2a8
  if(message->freq != 0)
 801608e:	b11a      	cbz	r2, 8016098 <formatChangeMsg+0x1c>
    cInValid[message->input] = 1;
 8016090:	2001      	movs	r0, #1
 8016092:	f881 02a8 	strb.w	r0, [r1, #680]	; 0x2a8
 8016096:	e001      	b.n	801609c <formatChangeMsg+0x20>
  else
    cInValid[message->input] = 0;
 8016098:	f881 22a8 	strb.w	r2, [r1, #680]	; 0x2a8
          for(spkNum = 0; spkNum < 4; spkNum++)
            if(pipes[i].spkSets[spkNum] == value) return i;
        }
        break;
        case PIPE_INPUT:
          if(pipes[i].input == value)         return i;
 801609c:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 80160a0:	428b      	cmp	r3, r1
 80160a2:	d008      	beq.n	80160b6 <formatChangeMsg+0x3a>
 80160a4:	4936      	ldr	r1, [pc, #216]	; (8016180 <formatChangeMsg+0x104>)
 80160a6:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
          break;
        }
    }
  return -1;
 80160aa:	42b3      	cmp	r3, r6
 80160ac:	bf0c      	ite	eq
 80160ae:	2601      	moveq	r6, #1
 80160b0:	f04f 36ff 	movne.w	r6, #4294967295
 80160b4:	e000      	b.n	80160b8 <formatChangeMsg+0x3c>
}

static int getPipe(uint8_t searchFilter, uint32_t value)
{
  int i;
  for(i = 0; i < sizeof(pipes)/sizeof(pipes[0]); i++)
 80160b6:	2600      	movs	r6, #0
    cInValid[message->input] = 1;
  else
    cInValid[message->input] = 0;

  int pipeNum = getPipe(PIPE_INPUT, message->input);
  dprintf(LL_INFO, "Input format %s@%d from %s \n", inFormat[message->inputFormat], message->freq, inQ[message->input]);
 80160b8:	4f32      	ldr	r7, [pc, #200]	; (8016184 <formatChangeMsg+0x108>)
 80160ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80160bc:	2901      	cmp	r1, #1
 80160be:	dd0d      	ble.n	80160dc <formatChangeMsg+0x60>
 80160c0:	4831      	ldr	r0, [pc, #196]	; (8016188 <formatChangeMsg+0x10c>)
 80160c2:	7861      	ldrb	r1, [r4, #1]
 80160c4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80160c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80160cc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80160d0:	f8d1 12c8 	ldr.w	r1, [r1, #712]	; 0x2c8
 80160d4:	f200 4042 	addw	r0, r0, #1090	; 0x442
 80160d8:	f7f2 fda6 	bl	8008c28 <xprintf>
  if(pipeNum < 0)
 80160dc:	1c73      	adds	r3, r6, #1
 80160de:	d120      	bne.n	8016122 <formatChangeMsg+0xa6>
    {
      //Input not selected.
      dprintf(LL_INFO, "Format change: Input %s not active.\n", inQ[message->input]);
 80160e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160e2:	2b01      	cmp	r3, #1
 80160e4:	dd09      	ble.n	80160fa <formatChangeMsg+0x7e>
 80160e6:	4828      	ldr	r0, [pc, #160]	; (8016188 <formatChangeMsg+0x10c>)
 80160e8:	7823      	ldrb	r3, [r4, #0]
 80160ea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80160ee:	f200 405f 	addw	r0, r0, #1119	; 0x45f
 80160f2:	f8d3 1270 	ldr.w	r1, [r3, #624]	; 0x270
 80160f6:	f7f2 fd97 	bl	8008c28 <xprintf>
      if(mapFreq(message->freq) != FREQ_NONE)
 80160fa:	6862      	ldr	r2, [r4, #4]
 80160fc:	4610      	mov	r0, r2
 80160fe:	f7ff fdd9 	bl	8015cb4 <mapFreq>
 8016102:	b140      	cbz	r0, 8016116 <formatChangeMsg+0x9a>
        {
          cInputFormat[message->input] = message->inputFormat;
 8016104:	7823      	ldrb	r3, [r4, #0]
 8016106:	7860      	ldrb	r0, [r4, #1]
 8016108:	18e9      	adds	r1, r5, r3
          cInFreq[message->input]      = message->freq;
 801610a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    {
      //Input not selected.
      dprintf(LL_INFO, "Format change: Input %s not active.\n", inQ[message->input]);
      if(mapFreq(message->freq) != FREQ_NONE)
        {
          cInputFormat[message->input] = message->inputFormat;
 801610e:	f881 02b0 	strb.w	r0, [r1, #688]	; 0x2b0
          cInFreq[message->input]      = message->freq;
 8016112:	f8c5 2288 	str.w	r2, [r5, #648]	; 0x288
        }
      dFree(message);
 8016116:	f1a4 0014 	sub.w	r0, r4, #20
        {
          streamDisable(pipeNum);
        }
    }
  dFree(message);
}
 801611a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      if(mapFreq(message->freq) != FREQ_NONE)
        {
          cInputFormat[message->input] = message->inputFormat;
          cInFreq[message->input]      = message->freq;
        }
      dFree(message);
 801611e:	f7ff b987 	b.w	8015430 <bFree>
      return;
    }
  pipe_t *pipe = &pipes[pipeNum];

  //Reconfigure pipe
  if(cInputFormat[message->input] != message->inputFormat ||
 8016122:	7823      	ldrb	r3, [r4, #0]
 8016124:	7862      	ldrb	r2, [r4, #1]
 8016126:	18e8      	adds	r0, r5, r3
 8016128:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
 801612c:	4291      	cmp	r1, r2
 801612e:	d10b      	bne.n	8016148 <formatChangeMsg+0xcc>
      cInFreq[message->input] != message->freq ||
 8016130:	4913      	ldr	r1, [pc, #76]	; (8016180 <formatChangeMsg+0x104>)
 8016132:	eb01 0183 	add.w	r1, r1, r3, lsl #2
      return;
    }
  pipe_t *pipe = &pipes[pipeNum];

  //Reconfigure pipe
  if(cInputFormat[message->input] != message->inputFormat ||
 8016136:	f8d1 7288 	ldr.w	r7, [r1, #648]	; 0x288
 801613a:	6861      	ldr	r1, [r4, #4]
 801613c:	428f      	cmp	r7, r1
 801613e:	d103      	bne.n	8016148 <formatChangeMsg+0xcc>
      cInFreq[message->input] != message->freq ||
 8016140:	f890 12a8 	ldrb.w	r1, [r0, #680]	; 0x2a8
 8016144:	4541      	cmp	r1, r8
 8016146:	d0e6      	beq.n	8016116 <formatChangeMsg+0x9a>
      inValidPrevious != cInValid[message->input] )
    {
      pipe->inputFormat = cInputFormat[message->input] = message->inputFormat;
 8016148:	442b      	add	r3, r5
 801614a:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 801614e:	2350      	movs	r3, #80	; 0x50
 8016150:	fb03 5506 	mla	r5, r3, r6, r5
 8016154:	f885 2051 	strb.w	r2, [r5, #81]	; 0x51
      if(mapFreq(message->freq) != FREQ_NONE)
 8016158:	6862      	ldr	r2, [r4, #4]
 801615a:	4610      	mov	r0, r2
 801615c:	f7ff fdaa 	bl	8015cb4 <mapFreq>
 8016160:	b150      	cbz	r0, 8016178 <formatChangeMsg+0xfc>
        {
          pipe->inFreq = cInFreq[message->input] = message->freq;
 8016162:	7821      	ldrb	r1, [r4, #0]
 8016164:	4b06      	ldr	r3, [pc, #24]	; (8016180 <formatChangeMsg+0x104>)
 8016166:	67ea      	str	r2, [r5, #124]	; 0x7c
 8016168:	eb03 0381 	add.w	r3, r3, r1, lsl #2

          pipeConfigure(pipeNum);
 801616c:	4630      	mov	r0, r6
      inValidPrevious != cInValid[message->input] )
    {
      pipe->inputFormat = cInputFormat[message->input] = message->inputFormat;
      if(mapFreq(message->freq) != FREQ_NONE)
        {
          pipe->inFreq = cInFreq[message->input] = message->freq;
 801616e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288

          pipeConfigure(pipeNum);
 8016172:	f000 f82f 	bl	80161d4 <pipeConfigure>
 8016176:	e7ce      	b.n	8016116 <formatChangeMsg+0x9a>
        }
      else
        {
          streamDisable(pipeNum);
 8016178:	4630      	mov	r0, r6
 801617a:	f7ff fe0d 	bl	8015d98 <streamDisable>
 801617e:	e7ca      	b.n	8016116 <formatChangeMsg+0x9a>
 8016180:	100024f4 	.word	0x100024f4
 8016184:	10001000 	.word	0x10001000
 8016188:	0803f04c 	.word	0x0803f04c

0801618c <pipeSync>:
typedef struct
{
  int     pipeNum;
} pipeSync_t;
void pipeSync(int pipeNum)
{
 801618c:	b538      	push	{r3, r4, r5, lr}
 801618e:	4605      	mov	r5, r0
  //Allocate resources for data transfer
  pipeSync_t *message = dAlloc(sizeof(pipeSync_t));
 8016190:	2004      	movs	r0, #4
 8016192:	f7fe fef3 	bl	8014f7c <bAlloc>
 8016196:	4604      	mov	r4, r0
 8016198:	b168      	cbz	r0, 80161b6 <pipeSync+0x2a>

  if (message == NULL)
    return;

  //Fill message
  message->pipeNum = pipeNum;
 801619a:	4602      	mov	r2, r0

  //Send the message to communicator
  if (moduleSendCommand(module, CMD_PIPE_SYNC, message) < 0)
 801619c:	2105      	movs	r1, #5

  if (message == NULL)
    return;

  //Fill message
  message->pipeNum = pipeNum;
 801619e:	f842 5f14 	str.w	r5, [r2, #20]!

  //Send the message to communicator
  if (moduleSendCommand(module, CMD_PIPE_SYNC, message) < 0)
 80161a2:	4805      	ldr	r0, [pc, #20]	; (80161b8 <pipeSync+0x2c>)
 80161a4:	f7f5 f914 	bl	800b3d0 <moduleSendCommand>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	da04      	bge.n	80161b6 <pipeSync+0x2a>
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 80161ac:	4620      	mov	r0, r4
    }
}
 80161ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  //Send the message to communicator
  if (moduleSendCommand(module, CMD_PIPE_SYNC, message) < 0)
    {
      //Sending failed
      //Free allocated resources
      dFree(message);
 80161b2:	f7ff b93d 	b.w	8015430 <bFree>
 80161b6:	bd38      	pop	{r3, r4, r5, pc}
 80161b8:	100024fc 	.word	0x100024fc

080161bc <pipeSyncMsg>:
    }
}

static void pipeSyncMsg(void *data)
{
 80161bc:	b510      	push	{r4, lr}
  pipeSync_t *message = data;
  pipeConfigure(message->pipeNum);
 80161be:	4604      	mov	r4, r0
 80161c0:	f854 0914 	ldr.w	r0, [r4], #-20
 80161c4:	f000 f806 	bl	80161d4 <pipeConfigure>
  dFree(message);
 80161c8:	4620      	mov	r0, r4
}
 80161ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static void pipeSyncMsg(void *data)
{
  pipeSync_t *message = data;
  pipeConfigure(message->pipeNum);
  dFree(message);
 80161ce:	f7ff b92f 	b.w	8015430 <bFree>
	...

080161d4 <pipeConfigure>:
#define PIPE_DISABLE_RETURN(arg_pipeNum){streamDisable(arg_pipeNum);return;}

void i2sResync(void);

static void pipeConfigure(int pipeNum)
{
 80161d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(pipeNum < 0) return;
 80161d8:	1e04      	subs	r4, r0, #0
#define PIPE_DISABLE_RETURN(arg_pipeNum){streamDisable(arg_pipeNum);return;}

void i2sResync(void);

static void pipeConfigure(int pipeNum)
{
 80161da:	b08b      	sub	sp, #44	; 0x2c
  if(pipeNum < 0) return;
 80161dc:	f2c0 825a 	blt.w	8016694 <pipeConfigure+0x4c0>
  pipe_t *pipe = &pipes[pipeNum];
  massert(pipe->inputFormat < IF_NUM);
 80161e0:	4dac      	ldr	r5, [pc, #688]	; (8016494 <pipeConfigure+0x2c0>)
 80161e2:	2350      	movs	r3, #80	; 0x50
 80161e4:	fb03 5304 	mla	r3, r3, r4, r5
 80161e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80161ec:	2b04      	cmp	r3, #4
 80161ee:	d807      	bhi.n	8016200 <pipeConfigure+0x2c>
  massert(pipe->outputMode < OM_NUM);
 80161f0:	2350      	movs	r3, #80	; 0x50
 80161f2:	fb03 5304 	mla	r3, r3, r4, r5
 80161f6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80161fa:	2b01      	cmp	r3, #1
 80161fc:	d80f      	bhi.n	801621e <pipeConfigure+0x4a>
 80161fe:	e01c      	b.n	801623a <pipeConfigure+0x66>

static void pipeConfigure(int pipeNum)
{
  if(pipeNum < 0) return;
  pipe_t *pipe = &pipes[pipeNum];
  massert(pipe->inputFormat < IF_NUM);
 8016200:	4ba5      	ldr	r3, [pc, #660]	; (8016498 <pipeConfigure+0x2c4>)
 8016202:	f240 4206 	movw	r2, #1030	; 0x406
 8016206:	f103 011b 	add.w	r1, r3, #27
 801620a:	f103 0029 	add.w	r0, r3, #41	; 0x29
 801620e:	f7f2 fd0b 	bl	8008c28 <xprintf>
 8016212:	2301      	movs	r3, #1
 8016214:	9307      	str	r3, [sp, #28]
 8016216:	9b07      	ldr	r3, [sp, #28]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d1fc      	bne.n	8016216 <pipeConfigure+0x42>
 801621c:	e7e8      	b.n	80161f0 <pipeConfigure+0x1c>
  massert(pipe->outputMode < OM_NUM);
 801621e:	4b9f      	ldr	r3, [pc, #636]	; (801649c <pipeConfigure+0x2c8>)
 8016220:	f240 4207 	movw	r2, #1031	; 0x407
 8016224:	f1a3 0124 	sub.w	r1, r3, #36	; 0x24
 8016228:	f1a3 0016 	sub.w	r0, r3, #22
 801622c:	f7f2 fcfc 	bl	8008c28 <xprintf>
 8016230:	2301      	movs	r3, #1
 8016232:	9308      	str	r3, [sp, #32]
 8016234:	9b08      	ldr	r3, [sp, #32]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d1fc      	bne.n	8016234 <pipeConfigure+0x60>
  massert(pipe->input < INPUT_NUM);
 801623a:	2350      	movs	r3, #80	; 0x50
 801623c:	fb03 5304 	mla	r3, r3, r4, r5
 8016240:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016244:	2b07      	cmp	r3, #7
 8016246:	d90d      	bls.n	8016264 <pipeConfigure+0x90>
 8016248:	4b95      	ldr	r3, [pc, #596]	; (80164a0 <pipeConfigure+0x2cc>)
 801624a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 801624e:	f1a3 013e 	sub.w	r1, r3, #62	; 0x3e
 8016252:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8016256:	f7f2 fce7 	bl	8008c28 <xprintf>
 801625a:	2301      	movs	r3, #1
 801625c:	9309      	str	r3, [sp, #36]	; 0x24
 801625e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016260:	2b00      	cmp	r3, #0
 8016262:	d1fc      	bne.n	801625e <pipeConfigure+0x8a>

  if(pipe->input == INPUT_SPDIF2)
 8016264:	2350      	movs	r3, #80	; 0x50
 8016266:	fb03 5304 	mla	r3, r3, r4, r5
 801626a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801626e:	2a06      	cmp	r2, #6
 8016270:	d108      	bne.n	8016284 <pipeConfigure+0xb0>
    {
      i2sSelectSource(0, pipe->subinput);
 8016272:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8016276:	2000      	movs	r0, #0
 8016278:	f3c1 0183 	ubfx	r1, r1, #2, #4
 801627c:	f7fe fb80 	bl	8014980 <i2sSelectSource>
      i2sResync();
 8016280:	f7fe fc6c 	bl	8014b5c <i2sResync>
    }
  if(pipe->input == INPUT_SPDIF1)
 8016284:	2350      	movs	r3, #80	; 0x50
 8016286:	fb03 5304 	mla	r3, r3, r4, r5
 801628a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801628e:	2a05      	cmp	r2, #5
 8016290:	d106      	bne.n	80162a0 <pipeConfigure+0xcc>
    {
      i2sSelectSource(1, pipe->subinput);
 8016292:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8016296:	2001      	movs	r0, #1
 8016298:	f3c1 0183 	ubfx	r1, r1, #2, #4
 801629c:	f7fe fb70 	bl	8014980 <i2sSelectSource>
    }

  if(pipeNum == 1)
 80162a0:	2c01      	cmp	r4, #1
 80162a2:	d103      	bne.n	80162ac <pipeConfigure+0xd8>
    {
      //Pipe 1 not available in cable mode
      if(pipe->outputMode == OM_CABLE)
 80162a4:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 80162a8:	2b01      	cmp	r3, #1
 80162aa:	d006      	beq.n	80162ba <pipeConfigure+0xe6>
          PIPE_DISABLE_RETURN(pipeNum);
        }

    }

  if(pipe->input == INPUT_NONE)
 80162ac:	2650      	movs	r6, #80	; 0x50
 80162ae:	fb06 5604 	mla	r6, r6, r4, r5
 80162b2:	4f78      	ldr	r7, [pc, #480]	; (8016494 <pipeConfigure+0x2c0>)
 80162b4:	f896 1050 	ldrb.w	r1, [r6, #80]	; 0x50
 80162b8:	b919      	cbnz	r1, 80162c2 <pipeConfigure+0xee>
    PIPE_DISABLE_RETURN(pipeNum);
 80162ba:	4620      	mov	r0, r4
 80162bc:	f7ff fd6c 	bl	8015d98 <streamDisable>
 80162c0:	e1e8      	b.n	8016694 <pipeConfigure+0x4c0>
  if(mapFreq(pipe->inFreq) == FREQ_NONE)
 80162c2:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
 80162c4:	4610      	mov	r0, r2
 80162c6:	f7ff fcf5 	bl	8015cb4 <mapFreq>
 80162ca:	2800      	cmp	r0, #0
 80162cc:	d0f5      	beq.n	80162ba <pipeConfigure+0xe6>
    PIPE_DISABLE_RETURN(pipeNum);
  if(!cInValid[pipe->input])
 80162ce:	187b      	adds	r3, r7, r1
 80162d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d0f0      	beq.n	80162ba <pipeConfigure+0xe6>
    PIPE_DISABLE_RETURN(pipeNum);
  if(rMode == RM_NONE)
 80162d8:	783b      	ldrb	r3, [r7, #0]
 80162da:	2b04      	cmp	r3, #4
 80162dc:	d0ed      	beq.n	80162ba <pipeConfigure+0xe6>
  return FREQ_NONE;
}

static freqClass_e mapFreqClass(int freq)
{
  switch (freq)
 80162de:	4871      	ldr	r0, [pc, #452]	; (80164a4 <pipeConfigure+0x2d0>)
  if(!cInValid[pipe->input])
    PIPE_DISABLE_RETURN(pipeNum);
  if(rMode == RM_NONE)
    PIPE_DISABLE_RETURN(pipeNum);
  massert(mapFreq(pipe->inFreq) != FREQ_NONE);
  output_format_e outputFormat = outputFormatMap[rMode][pipe->outputMode][pipe->inputFormat][mapFreqClass(pipe->inFreq)];
 80162e0:	f896 c066 	ldrb.w	ip, [r6, #102]	; 0x66
 80162e4:	f896 7051 	ldrb.w	r7, [r6, #81]	; 0x51
  return FREQ_NONE;
}

static freqClass_e mapFreqClass(int freq)
{
  switch (freq)
 80162e8:	4282      	cmp	r2, r0
 80162ea:	d00c      	beq.n	8016306 <pipeConfigure+0x132>
 80162ec:	dc03      	bgt.n	80162f6 <pipeConfigure+0x122>
 80162ee:	486e      	ldr	r0, [pc, #440]	; (80164a8 <pipeConfigure+0x2d4>)
 80162f0:	4282      	cmp	r2, r0
 80162f2:	d106      	bne.n	8016302 <pipeConfigure+0x12e>
 80162f4:	e007      	b.n	8016306 <pipeConfigure+0x132>
 80162f6:	486d      	ldr	r0, [pc, #436]	; (80164ac <pipeConfigure+0x2d8>)
 80162f8:	4282      	cmp	r2, r0
 80162fa:	d004      	beq.n	8016306 <pipeConfigure+0x132>
 80162fc:	486c      	ldr	r0, [pc, #432]	; (80164b0 <pipeConfigure+0x2dc>)
 80162fe:	4282      	cmp	r2, r0
 8016300:	d001      	beq.n	8016306 <pipeConfigure+0x132>
    {
    case 44100:
    case 48000:
      return FREQ_CLASS_NS;
 8016302:	2600      	movs	r6, #0
 8016304:	e000      	b.n	8016308 <pipeConfigure+0x134>
    case 88200:
    case 96000:
    case 176400:
    case 192000:
      return FREQ_CLASS_DS;
 8016306:	2601      	movs	r6, #1
  if(!cInValid[pipe->input])
    PIPE_DISABLE_RETURN(pipeNum);
  if(rMode == RM_NONE)
    PIPE_DISABLE_RETURN(pipeNum);
  massert(mapFreq(pipe->inFreq) != FREQ_NONE);
  output_format_e outputFormat = outputFormatMap[rMode][pipe->outputMode][pipe->inputFormat][mapFreqClass(pipe->inFreq)];
 8016308:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 801630c:	f04f 080a 	mov.w	r8, #10
 8016310:	44f4      	add	ip, lr
 8016312:	4868      	ldr	r0, [pc, #416]	; (80164b4 <pipeConfigure+0x2e0>)
 8016314:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80164bc <pipeConfigure+0x2e8>
 8016318:	fb08 c303 	mla	r3, r8, r3, ip
 801631c:	443b      	add	r3, r7
 801631e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016322:	4433      	add	r3, r6
 8016324:	4680      	mov	r8, r0
 8016326:	f893 6022 	ldrb.w	r6, [r3, #34]	; 0x22
  if(outputFormat == OF_NONE)
    {
      dprintf(LL_WARNING, "Output format not found for input format:%s outputMode:%s input:%s freq:%d \n", inFormat[pipe->inputFormat], outMode[pipe->outputMode], inQ[pipe->input] , pipe->inFreq);
 801632a:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
    PIPE_DISABLE_RETURN(pipeNum);
  if(rMode == RM_NONE)
    PIPE_DISABLE_RETURN(pipeNum);
  massert(mapFreq(pipe->inFreq) != FREQ_NONE);
  output_format_e outputFormat = outputFormatMap[rMode][pipe->outputMode][pipe->inputFormat][mapFreqClass(pipe->inFreq)];
  if(outputFormat == OF_NONE)
 801632e:	b996      	cbnz	r6, 8016356 <pipeConfigure+0x182>
    {
      dprintf(LL_WARNING, "Output format not found for input format:%s outputMode:%s input:%s freq:%d \n", inFormat[pipe->inputFormat], outMode[pipe->outputMode], inQ[pipe->input] , pipe->inFreq);
 8016330:	2b00      	cmp	r3, #0
 8016332:	ddc2      	ble.n	80162ba <pipeConfigure+0xe6>
 8016334:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016338:	4486      	add	lr, r0
 801633a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 801633e:	9200      	str	r2, [sp, #0]
 8016340:	f8d1 3270 	ldr.w	r3, [r1, #624]	; 0x270
 8016344:	f8de 22e8 	ldr.w	r2, [lr, #744]	; 0x2e8
 8016348:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 801634c:	f200 40f5 	addw	r0, r0, #1269	; 0x4f5
 8016350:	f7f2 fc6a 	bl	8008c28 <xprintf>
 8016354:	e7b1      	b.n	80162ba <pipeConfigure+0xe6>
      PIPE_DISABLE_RETURN(pipeNum);
    }

  dprintf(LL_WARNING, "searching for convertion routine %s %s \n", inFormat[pipe->inputFormat], outFormat[outputFormat]);
 8016356:	2b00      	cmp	r3, #0
 8016358:	dd0b      	ble.n	8016372 <pipeConfigure+0x19e>
 801635a:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 801635e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8016362:	f8d3 2394 	ldr.w	r2, [r3, #916]	; 0x394
 8016366:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 801636a:	f200 5042 	addw	r0, r0, #1346	; 0x542
 801636e:	f7f2 fc5b 	bl	8008c28 <xprintf>
  const convertFormat_t *convertFormat = &convertTable[pipe->inputFormat][outputFormat];
 8016372:	2350      	movs	r3, #80	; 0x50
 8016374:	fb03 5304 	mla	r3, r3, r4, r5
  if(!convertFormat->convert)
 8016378:	484e      	ldr	r0, [pc, #312]	; (80164b4 <pipeConfigure+0x2e0>)
      dprintf(LL_WARNING, "Output format not found for input format:%s outputMode:%s input:%s freq:%d \n", inFormat[pipe->inputFormat], outMode[pipe->outputMode], inQ[pipe->input] , pipe->inFreq);
      PIPE_DISABLE_RETURN(pipeNum);
    }

  dprintf(LL_WARNING, "searching for convertion routine %s %s \n", inFormat[pipe->inputFormat], outFormat[outputFormat]);
  const convertFormat_t *convertFormat = &convertTable[pipe->inputFormat][outputFormat];
 801637a:	f893 7051 	ldrb.w	r7, [r3, #81]	; 0x51
  if(!convertFormat->convert)
 801637e:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
 8016382:	eb0a 0307 	add.w	r3, sl, r7
 8016386:	4433      	add	r3, r6
 8016388:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801638c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801638e:	b983      	cbnz	r3, 80163b2 <pipeConfigure+0x1de>
    {
      dprintf(LL_WARNING, "Convertion routine not found for %s %s \n", inFormat[pipe->inputFormat], outFormat[outputFormat]);
 8016390:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8016394:	2b00      	cmp	r3, #0
 8016396:	dd90      	ble.n	80162ba <pipeConfigure+0xe6>
 8016398:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801639c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80163a0:	f8d6 2394 	ldr.w	r2, [r6, #916]	; 0x394
 80163a4:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 80163a8:	f200 506b 	addw	r0, r0, #1387	; 0x56b
 80163ac:	f7f2 fc3c 	bl	8008c28 <xprintf>
 80163b0:	e783      	b.n	80162ba <pipeConfigure+0xe6>
      PIPE_DISABLE_RETURN(pipeNum);
    }
  if(convertFormat->convert == conv_NULL)
 80163b2:	4a41      	ldr	r2, [pc, #260]	; (80164b8 <pipeConfigure+0x2e4>)
 80163b4:	4293      	cmp	r3, r2
 80163b6:	d10f      	bne.n	80163d8 <pipeConfigure+0x204>
    {
      dprintf(LL_WARNING, "NULL Convertion routine for %s %s \n", inFormat[pipe->inputFormat], outFormat[outputFormat]);
 80163b8:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 80163bc:	2b00      	cmp	r3, #0
 80163be:	dd0b      	ble.n	80163d8 <pipeConfigure+0x204>
 80163c0:	eb00 0286 	add.w	r2, r0, r6, lsl #2
 80163c4:	eb00 0387 	add.w	r3, r0, r7, lsl #2
 80163c8:	f8d2 2394 	ldr.w	r2, [r2, #916]	; 0x394
 80163cc:	f8d3 12c8 	ldr.w	r1, [r3, #712]	; 0x2c8
 80163d0:	f200 5094 	addw	r0, r0, #1428	; 0x594
 80163d4:	f7f2 fc28 	bl	8008c28 <xprintf>
    }

  //Check if outputs are free
  if(outQueuePipeAlloc(outQueues[pipe->primaryOutQueue]) >= 0 && pipe->outQueue1 != outQueues[pipe->primaryOutQueue])
 80163d8:	2150      	movs	r1, #80	; 0x50
 80163da:	fb01 5104 	mla	r1, r1, r4, r5
 80163de:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 80164b4 <pipeConfigure+0x2e0>
 80163e2:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
 80163e6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80163ea:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80163ee:	9304      	str	r3, [sp, #16]
 80163f0:	4618      	mov	r0, r3
 80163f2:	f7ff fc21 	bl	8015c38 <outQueuePipeAlloc>
 80163f6:	2800      	cmp	r0, #0
 80163f8:	db17      	blt.n	801642a <pipeConfigure+0x256>
 80163fa:	6f4a      	ldr	r2, [r1, #116]	; 0x74
 80163fc:	9b04      	ldr	r3, [sp, #16]
 80163fe:	4293      	cmp	r3, r2
 8016400:	d013      	beq.n	801642a <pipeConfigure+0x256>
    {
      dprintf(LL_WARNING, "Primary output queue is not available.\n\n", inFormat[pipe->inputFormat], outFormat[outputFormat]);
 8016402:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8016406:	2b00      	cmp	r3, #0
 8016408:	f77f af57 	ble.w	80162ba <pipeConfigure+0xe6>
 801640c:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
 8016410:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 8016414:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8016418:	f8d6 2394 	ldr.w	r2, [r6, #916]	; 0x394
 801641c:	f8d3 12c8 	ldr.w	r1, [r3, #712]	; 0x2c8
 8016420:	f50b 60b7 	add.w	r0, fp, #1464	; 0x5b8
 8016424:	f7f2 fc00 	bl	8008c28 <xprintf>
 8016428:	e747      	b.n	80162ba <pipeConfigure+0xe6>
      PIPE_DISABLE_RETURN(pipeNum);
    }
  if(convertFormat->twoOutputs)
 801642a:	eb0a 0307 	add.w	r3, sl, r7
 801642e:	4433      	add	r3, r6
 8016430:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8016434:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80164b4 <pipeConfigure+0x2e0>
 8016438:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801643c:	f013 0301 	ands.w	r3, r3, #1
 8016440:	9304      	str	r3, [sp, #16]
 8016442:	d03d      	beq.n	80164c0 <pipeConfigure+0x2ec>
    {
      if(outQueuePipeAlloc(outQueues[pipe->secondaryOutQueue]) >= 0 && pipe->outQueue2 != outQueues[pipe->secondaryOutQueue])
 8016444:	2150      	movs	r1, #80	; 0x50
 8016446:	fb01 5104 	mla	r1, r1, r4, r5
 801644a:	f891 3065 	ldrb.w	r3, [r1, #101]	; 0x65
 801644e:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8016452:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8016456:	9305      	str	r3, [sp, #20]
 8016458:	4618      	mov	r0, r3
 801645a:	f7ff fbed 	bl	8015c38 <outQueuePipeAlloc>
 801645e:	2800      	cmp	r0, #0
 8016460:	db2e      	blt.n	80164c0 <pipeConfigure+0x2ec>
 8016462:	6f8a      	ldr	r2, [r1, #120]	; 0x78
 8016464:	9b05      	ldr	r3, [sp, #20]
 8016466:	4293      	cmp	r3, r2
 8016468:	d02a      	beq.n	80164c0 <pipeConfigure+0x2ec>
        {
          dprintf(LL_INFO, "Secondary output queue is not available.\n\n", inFormat[pipe->inputFormat], outFormat[outputFormat]);
 801646a:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 801646e:	2b01      	cmp	r3, #1
 8016470:	f77f af23 	ble.w	80162ba <pipeConfigure+0xe6>
 8016474:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
 8016478:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 801647c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8016480:	f8d6 2394 	ldr.w	r2, [r6, #916]	; 0x394
 8016484:	f8d3 12c8 	ldr.w	r1, [r3, #712]	; 0x2c8
 8016488:	f20b 50e1 	addw	r0, fp, #1505	; 0x5e1
 801648c:	f7f2 fbcc 	bl	8008c28 <xprintf>
 8016490:	e713      	b.n	80162ba <pipeConfigure+0xe6>
 8016492:	bf00      	nop
 8016494:	100024f4 	.word	0x100024f4
 8016498:	0803f4d0 	.word	0x0803f4d0
 801649c:	0803f50f 	.word	0x0803f50f
 80164a0:	0803f529 	.word	0x0803f529
 80164a4:	00017700 	.word	0x00017700
 80164a8:	00015888 	.word	0x00015888
 80164ac:	0002b110 	.word	0x0002b110
 80164b0:	0002ee00 	.word	0x0002ee00
 80164b4:	0803f04c 	.word	0x0803f04c
 80164b8:	0801a625 	.word	0x0801a625
 80164bc:	10001000 	.word	0x10001000
        }

    }

  //Return if pipe not changed
  if(!memcmp((void*)&oldPipes[pipeNum], (void*)&pipes[pipeNum], offsetof(pipe_t, inBuffer)))
 80164c0:	4b76      	ldr	r3, [pc, #472]	; (801669c <pipeConfigure+0x4c8>)
 80164c2:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80164c6:	2350      	movs	r3, #80	; 0x50
 80164c8:	fb03 fb04 	mul.w	fp, r3, r4
 80164cc:	4b74      	ldr	r3, [pc, #464]	; (80166a0 <pipeConfigure+0x4cc>)
 80164ce:	1d18      	adds	r0, r3, #4
 80164d0:	2244      	movs	r2, #68	; 0x44
 80164d2:	4459      	add	r1, fp
 80164d4:	4458      	add	r0, fp
 80164d6:	f006 fd81 	bl	801cfdc <memcmp>
 80164da:	2800      	cmp	r0, #0
 80164dc:	f000 80da 	beq.w	8016694 <pipeConfigure+0x4c0>
      return;
    }

  pipeRelease(pipeNum);

  twoOutputs = convertFormat->twoOutputs;
 80164e0:	4457      	add	r7, sl
 80164e2:	4437      	add	r7, r6
 80164e4:	4620      	mov	r0, r4
 80164e6:	00ff      	lsls	r7, r7, #3
 80164e8:	f004 f8ba 	bl	801a660 <pipeRelease.part.0>
 80164ec:	eb08 0207 	add.w	r2, r8, r7
 80164f0:	4b6b      	ldr	r3, [pc, #428]	; (80166a0 <pipeConfigure+0x4cc>)
 80164f2:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 80164f6:	496b      	ldr	r1, [pc, #428]	; (80166a4 <pipeConfigure+0x4d0>)
 80164f8:	f002 0201 	and.w	r2, r2, #1
 80164fc:	601a      	str	r2, [r3, #0]
  int div = freqDiv[pipe->outputMode][mapFreq(pipe->inFreq)];
 80164fe:	4b67      	ldr	r3, [pc, #412]	; (801669c <pipeConfigure+0x4c8>)
 8016500:	449b      	add	fp, r3
 8016502:	f8db 207c 	ldr.w	r2, [fp, #124]	; 0x7c
 8016506:	f89b a066 	ldrb.w	sl, [fp, #102]	; 0x66
 801650a:	4610      	mov	r0, r2
 801650c:	f7ff fbd2 	bl	8015cb4 <mapFreq>
 8016510:	ebca 03ca 	rsb	r3, sl, sl, lsl #3
 8016514:	4418      	add	r0, r3
 8016516:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 801651a:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
  pipe->outFreq = pipe->inFreq/div;
 801651e:	fb92 fef3 	sdiv	lr, r2, r3
 8016522:	f8cb e080 	str.w	lr, [fp, #128]	; 0x80
  pipe->skipRatio = skipRatio[pipe->outputMode][mapFreq(pipe->inFreq)];
  if(pipe->input != INPUT_SPDIF1)
 8016526:	f89b e050 	ldrb.w	lr, [fp, #80]	; 0x50
  pipeRelease(pipeNum);

  twoOutputs = convertFormat->twoOutputs;
  int div = freqDiv[pipe->outputMode][mapFreq(pipe->inFreq)];
  pipe->outFreq = pipe->inFreq/div;
  pipe->skipRatio = skipRatio[pipe->outputMode][mapFreq(pipe->inFreq)];
 801652a:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
 801652e:	f8cb 0084 	str.w	r0, [fp, #132]	; 0x84
  if(pipe->input != INPUT_SPDIF1)
 8016532:	f1be 0f05 	cmp.w	lr, #5
 8016536:	d04d      	beq.n	80165d4 <pipeConfigure+0x400>
      dprintf(LL_WARNING, "Output format not found for input format:%s outputMode:%s input:%s freq:%d \n", inFormat[pipe->inputFormat], outMode[pipe->outputMode], inQ[pipe->input] , pipe->inFreq);
      PIPE_DISABLE_RETURN(pipeNum);
    }

  dprintf(LL_WARNING, "searching for convertion routine %s %s \n", inFormat[pipe->inputFormat], outFormat[outputFormat]);
  const convertFormat_t *convertFormat = &convertTable[pipe->inputFormat][outputFormat];
 8016538:	f101 0060 	add.w	r0, r1, #96	; 0x60
 801653c:	4407      	add	r7, r0
  int div = freqDiv[pipe->outputMode][mapFreq(pipe->inFreq)];
  pipe->outFreq = pipe->inFreq/div;
  pipe->skipRatio = skipRatio[pipe->outputMode][mapFreq(pipe->inFreq)];
  if(pipe->input != INPUT_SPDIF1)
    {
      pipe->convertFormat = convertFormat;
 801653e:	f8cb 706c 	str.w	r7, [fp, #108]	; 0x6c
      pipe->inQueue   = inQueues[pipe->input];
      pipe->outQueue1 = outQueues[pipe->primaryOutQueue];
 8016542:	f89b 7064 	ldrb.w	r7, [fp, #100]	; 0x64
  pipe->outFreq = pipe->inFreq/div;
  pipe->skipRatio = skipRatio[pipe->outputMode][mapFreq(pipe->inFreq)];
  if(pipe->input != INPUT_SPDIF1)
    {
      pipe->convertFormat = convertFormat;
      pipe->inQueue   = inQueues[pipe->input];
 8016546:	eb01 008e 	add.w	r0, r1, lr, lsl #2
      pipe->outQueue1 = outQueues[pipe->primaryOutQueue];
 801654a:	eb01 0187 	add.w	r1, r1, r7, lsl #2
  pipe->outFreq = pipe->inFreq/div;
  pipe->skipRatio = skipRatio[pipe->outputMode][mapFreq(pipe->inFreq)];
  if(pipe->input != INPUT_SPDIF1)
    {
      pipe->convertFormat = convertFormat;
      pipe->inQueue   = inQueues[pipe->input];
 801654e:	f8d0 03b8 	ldr.w	r0, [r0, #952]	; 0x3b8
 8016552:	f8cb 0070 	str.w	r0, [fp, #112]	; 0x70
      pipe->outQueue1 = outQueues[pipe->primaryOutQueue];
 8016556:	f8d1 03d8 	ldr.w	r0, [r1, #984]	; 0x3d8
      if(convertFormat->twoOutputs || pipe->outputMode == OM_CABLE)
 801655a:	9904      	ldr	r1, [sp, #16]
  pipe->skipRatio = skipRatio[pipe->outputMode][mapFreq(pipe->inFreq)];
  if(pipe->input != INPUT_SPDIF1)
    {
      pipe->convertFormat = convertFormat;
      pipe->inQueue   = inQueues[pipe->input];
      pipe->outQueue1 = outQueues[pipe->primaryOutQueue];
 801655c:	f8cb 0074 	str.w	r0, [fp, #116]	; 0x74
      if(convertFormat->twoOutputs || pipe->outputMode == OM_CABLE)
 8016560:	b911      	cbnz	r1, 8016568 <pipeConfigure+0x394>
 8016562:	f1ba 0f01 	cmp.w	sl, #1
 8016566:	d10c      	bne.n	8016582 <pipeConfigure+0x3ae>
        pipe->outQueue2 = outQueues[pipe->secondaryOutQueue];
 8016568:	f04f 0c50 	mov.w	ip, #80	; 0x50
 801656c:	fb0c 5c04 	mla	ip, ip, r4, r5
 8016570:	f89c 1065 	ldrb.w	r1, [ip, #101]	; 0x65
 8016574:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8016578:	f8d1 13d8 	ldr.w	r1, [r1, #984]	; 0x3d8
 801657c:	f8cc 1078 	str.w	r1, [ip, #120]	; 0x78
 8016580:	e002      	b.n	8016588 <pipeConfigure+0x3b4>
      else
        pipe->outQueue2 = NULL;
 8016582:	9904      	ldr	r1, [sp, #16]
 8016584:	f8cb 1078 	str.w	r1, [fp, #120]	; 0x78
 8016588:	2150      	movs	r1, #80	; 0x50

      pipe->clkSrc = pipe->primaryClkSrc;
      if(pipe->input == INPUT_SPDIF2)
        pipe->clkSrc = EXTERNAL;
 801658a:	fb01 5104 	mla	r1, r1, r4, r5
        pipe->outQueue2 = outQueues[pipe->secondaryOutQueue];
      else
        pipe->outQueue2 = NULL;

      pipe->clkSrc = pipe->primaryClkSrc;
      if(pipe->input == INPUT_SPDIF2)
 801658e:	f1be 0f06 	cmp.w	lr, #6
      if(convertFormat->twoOutputs || pipe->outputMode == OM_CABLE)
        pipe->outQueue2 = outQueues[pipe->secondaryOutQueue];
      else
        pipe->outQueue2 = NULL;

      pipe->clkSrc = pipe->primaryClkSrc;
 8016592:	bf14      	ite	ne
 8016594:	f891 e067 	ldrbne.w	lr, [r1, #103]	; 0x67
      if(pipe->input == INPUT_SPDIF2)
        pipe->clkSrc = EXTERNAL;
 8016598:	f04f 0e02 	moveq.w	lr, #2
 801659c:	f881 e088 	strb.w	lr, [r1, #136]	; 0x88

      //Reconfigure SAI
      int mask = 0;
      if(pipe->outQueue1) mask |= (1<<(pipe->primaryOutQueue == OUTPUT_SAI2));
 80165a0:	b118      	cbz	r0, 80165aa <pipeConfigure+0x3d6>
 80165a2:	2f02      	cmp	r7, #2
 80165a4:	bf0c      	ite	eq
 80165a6:	2002      	moveq	r0, #2
 80165a8:	2001      	movne	r0, #1
      if(pipe->outQueue2) mask |= (1<<(pipe->secondaryOutQueue == OUTPUT_SAI2));
 80165aa:	2750      	movs	r7, #80	; 0x50
 80165ac:	fb07 5704 	mla	r7, r7, r4, r5
 80165b0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80165b2:	b131      	cbz	r1, 80165c2 <pipeConfigure+0x3ee>
 80165b4:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
 80165b8:	2902      	cmp	r1, #2
 80165ba:	bf0c      	ite	eq
 80165bc:	2102      	moveq	r1, #2
 80165be:	2101      	movne	r1, #1
 80165c0:	4308      	orrs	r0, r1
      saiReconfigure(mask, pipe->clkSrc, pipe->inFreq, div);
 80165c2:	2150      	movs	r1, #80	; 0x50
 80165c4:	fb01 5104 	mla	r1, r1, r4, r5
 80165c8:	b2db      	uxtb	r3, r3
 80165ca:	f891 1088 	ldrb.w	r1, [r1, #136]	; 0x88
 80165ce:	f7fd ff97 	bl	8014500 <saiReconfigure>
 80165d2:	e005      	b.n	80165e0 <pipeConfigure+0x40c>
    }
  else
    {
      pipe->clkSrc = EXTERNAL;
 80165d4:	2302      	movs	r3, #2
 80165d6:	f88b 3088 	strb.w	r3, [fp, #136]	; 0x88
      selectorSet(SELECTOR_WM8805);
 80165da:	2000      	movs	r0, #0
 80165dc:	f7f7 ff82 	bl	800e4e4 <selectorSet>
    }

  pipe->outputFormat = outputFormat;
 80165e0:	2350      	movs	r3, #80	; 0x50
 80165e2:	fb03 5304 	mla	r3, r3, r4, r5
 80165e6:	2e08      	cmp	r6, #8
 80165e8:	f883 6068 	strb.w	r6, [r3, #104]	; 0x68
 80165ec:	d819      	bhi.n	8016622 <pipeConfigure+0x44e>
 80165ee:	2301      	movs	r3, #1
 80165f0:	fa03 f606 	lsl.w	r6, r3, r6
 80165f4:	f416 7fc7 	tst.w	r6, #398	; 0x18e
 80165f8:	d10b      	bne.n	8016612 <pipeConfigure+0x43e>
 80165fa:	f016 0f70 	tst.w	r6, #112	; 0x70
 80165fe:	d010      	beq.n	8016622 <pipeConfigure+0x44e>
      WM8804setResolution(WM8804_2, 16);
      break;
    case OF_24L24P16N:
    case OF_24L24P16N_24L24P16N:
    case OF_24L24L16N_24P24P16N:
      WM8804setResolution(WM8804_1, 24);
 8016600:	2118      	movs	r1, #24
 8016602:	2002      	movs	r0, #2
 8016604:	f7f9 ff32 	bl	801046c <WM8804setResolution>
      WM8804setResolution(WM8804_2, 24);
 8016608:	2118      	movs	r1, #24
 801660a:	2003      	movs	r0, #3
 801660c:	f7f9 ff2e 	bl	801046c <WM8804setResolution>
      break;
 8016610:	e007      	b.n	8016622 <pipeConfigure+0x44e>
    case OF_16L16P32N:
    case OF_16L16P32N_16L16P32N:
    case OF_16L16L32N_16P16P32N:
    case OF_16L16P8L8P16N_16L16P8L8P16N:
    case OF_16L16L8L8L16N_16P16P8P8P16N:
      WM8804setResolution(WM8804_1, 16);
 8016612:	2110      	movs	r1, #16
 8016614:	2002      	movs	r0, #2
 8016616:	f7f9 ff29 	bl	801046c <WM8804setResolution>
      WM8804setResolution(WM8804_2, 16);
 801661a:	2110      	movs	r1, #16
 801661c:	2003      	movs	r0, #3
 801661e:	f7f9 ff25 	bl	801046c <WM8804setResolution>
    case OF_NONE:
    case OF_NUM:
      break;
    }

  dprintf(LL_INFO, "P%d audio inQ %s.%d inFormat %s@%dHz outFormat %s@%dHz \n",
 8016622:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8016626:	2b01      	cmp	r3, #1
 8016628:	dd23      	ble.n	8016672 <pipeConfigure+0x49e>
 801662a:	2250      	movs	r2, #80	; 0x50
 801662c:	fb02 5204 	mla	r2, r2, r4, r5
 8016630:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 8016634:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8016638:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
 801663c:	9003      	str	r0, [sp, #12]
 801663e:	f892 0068 	ldrb.w	r0, [r2, #104]	; 0x68
 8016642:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8016646:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 801664a:	f8d0 0394 	ldr.w	r0, [r0, #916]	; 0x394
 801664e:	9002      	str	r0, [sp, #8]
 8016650:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 8016652:	9001      	str	r0, [sp, #4]
 8016654:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 8016658:	4813      	ldr	r0, [pc, #76]	; (80166a8 <pipeConfigure+0x4d4>)
 801665a:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 801665e:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8016662:	f8d8 22c8 	ldr.w	r2, [r8, #712]	; 0x2c8
 8016666:	9200      	str	r2, [sp, #0]
 8016668:	f8d1 2270 	ldr.w	r2, [r1, #624]	; 0x270
 801666c:	4621      	mov	r1, r4
 801666e:	f7f2 fadb 	bl	8008c28 <xprintf>
          pipeNum, inQ[pipe->input], pipe->subinput,
          inFormat[pipe->inputFormat], pipe->inFreq, outFormat[pipe->outputFormat], pipe->outFreq);

  sendStreamInfo(pipeNum);
 8016672:	4620      	mov	r0, r4
 8016674:	f7ff fb6e 	bl	8015d54 <sendStreamInfo>
  pipe->active = 1;
 8016678:	2250      	movs	r2, #80	; 0x50
 801667a:	4354      	muls	r4, r2
 801667c:	1929      	adds	r1, r5, r4
  oldPipes[pipeNum] = pipes[pipeNum];
 801667e:	480b      	ldr	r0, [pc, #44]	; (80166ac <pipeConfigure+0x4d8>)
  dprintf(LL_INFO, "P%d audio inQ %s.%d inFormat %s@%dHz outFormat %s@%dHz \n",
          pipeNum, inQ[pipe->input], pipe->subinput,
          inFormat[pipe->inputFormat], pipe->inFreq, outFormat[pipe->outputFormat], pipe->outFreq);

  sendStreamInfo(pipeNum);
  pipe->active = 1;
 8016680:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 8016684:	f043 0302 	orr.w	r3, r3, #2
 8016688:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
  oldPipes[pipeNum] = pipes[pipeNum];
 801668c:	4420      	add	r0, r4
 801668e:	3148      	adds	r1, #72	; 0x48
 8016690:	f006 fcd6 	bl	801d040 <memcpy>
}
 8016694:	b00b      	add	sp, #44	; 0x2c
 8016696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801669a:	bf00      	nop
 801669c:	100024f4 	.word	0x100024f4
 80166a0:	10002da0 	.word	0x10002da0
 80166a4:	0803f04c 	.word	0x0803f04c
 80166a8:	0803f658 	.word	0x0803f658
 80166ac:	10002da4 	.word	0x10002da4

080166b0 <printPipes>:
static void printDbgBuf(int pipeNum, int *bufSize, char *bufPtr);
#else
#define printDbgBuf(...)
#endif
void printPipes(int *bufSize, char *bufPtr)
{
 80166b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166b4:	b08b      	sub	sp, #44	; 0x2c
 80166b6:	4b9f      	ldr	r3, [pc, #636]	; (8016934 <printPipes+0x284>)
 80166b8:	4f9f      	ldr	r7, [pc, #636]	; (8016938 <printPipes+0x288>)
 80166ba:	9307      	str	r3, [sp, #28]
 80166bc:	4604      	mov	r4, r0
 80166be:	460d      	mov	r5, r1
  int i;
  for(i = 0; i < 2; i++)
 80166c0:	f04f 0900 	mov.w	r9, #0
    {
      DPRINTF("P%d(%s) |", i, (pipes[i].active)?((pipes[i].mute || pipes[i].unmuteIgnore > xTaskGetTickCount())?"M":"A"):"I");
 80166c4:	f241 2687 	movw	r6, #4743	; 0x1287
 80166c8:	6823      	ldr	r3, [r4, #0]
 80166ca:	42b3      	cmp	r3, r6
 80166cc:	dc23      	bgt.n	8016716 <printPipes+0x66>
 80166ce:	4a9b      	ldr	r2, [pc, #620]	; (801693c <printPipes+0x28c>)
 80166d0:	eb05 0803 	add.w	r8, r5, r3
 80166d4:	2350      	movs	r3, #80	; 0x50
 80166d6:	fb03 2309 	mla	r3, r3, r9, r2
 80166da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80166de:	079a      	lsls	r2, r3, #30
 80166e0:	d509      	bpl.n	80166f6 <printPipes+0x46>
 80166e2:	07db      	lsls	r3, r3, #31
 80166e4:	d405      	bmi.n	80166f2 <printPipes+0x42>
 80166e6:	f857 ac14 	ldr.w	sl, [r7, #-20]
 80166ea:	f7f4 f917 	bl	800a91c <xTaskGetTickCount>
 80166ee:	4582      	cmp	sl, r0
 80166f0:	d903      	bls.n	80166fa <printPipes+0x4a>
 80166f2:	4b93      	ldr	r3, [pc, #588]	; (8016940 <printPipes+0x290>)
 80166f4:	e002      	b.n	80166fc <printPipes+0x4c>
 80166f6:	4b93      	ldr	r3, [pc, #588]	; (8016944 <printPipes+0x294>)
 80166f8:	e000      	b.n	80166fc <printPipes+0x4c>
 80166fa:	4b93      	ldr	r3, [pc, #588]	; (8016948 <printPipes+0x298>)
 80166fc:	4993      	ldr	r1, [pc, #588]	; (801694c <printPipes+0x29c>)
 80166fe:	4640      	mov	r0, r8
 8016700:	464a      	mov	r2, r9
 8016702:	f7f2 faaf 	bl	8008c64 <xsprintf>
 8016706:	f8d4 8000 	ldr.w	r8, [r4]
 801670a:	eb05 0008 	add.w	r0, r5, r8
 801670e:	f006 fd97 	bl	801d240 <strlen>
 8016712:	4440      	add	r0, r8
 8016714:	6020      	str	r0, [r4, #0]
 8016716:	f1a7 0a10 	sub.w	sl, r7, #16
      int spkNum;
      for(spkNum = 0; spkNum < 4; spkNum++)
        if(pipes[i].spkSets[spkNum] >=0)
 801671a:	f85a 2f04 	ldr.w	r2, [sl, #4]!
 801671e:	6820      	ldr	r0, [r4, #0]
 8016720:	2a00      	cmp	r2, #0
 8016722:	db06      	blt.n	8016732 <printPipes+0x82>
          {
            DPRINTF("%02x|",pipes[i].spkSets[spkNum]);
 8016724:	42b0      	cmp	r0, r6
 8016726:	dc12      	bgt.n	801674e <printPipes+0x9e>
 8016728:	4989      	ldr	r1, [pc, #548]	; (8016950 <printPipes+0x2a0>)
 801672a:	4428      	add	r0, r5
 801672c:	f7f2 fa9a 	bl	8008c64 <xsprintf>
 8016730:	e005      	b.n	801673e <printPipes+0x8e>
          }
        else
          {
            DPRINTF("  |");
 8016732:	42b0      	cmp	r0, r6
 8016734:	dc0b      	bgt.n	801674e <printPipes+0x9e>
 8016736:	4987      	ldr	r1, [pc, #540]	; (8016954 <printPipes+0x2a4>)
 8016738:	4428      	add	r0, r5
 801673a:	f7f2 fa93 	bl	8008c64 <xsprintf>
 801673e:	f8d4 8000 	ldr.w	r8, [r4]
 8016742:	eb05 0008 	add.w	r0, r5, r8
 8016746:	f006 fd7b 	bl	801d240 <strlen>
 801674a:	4440      	add	r0, r8
 801674c:	6020      	str	r0, [r4, #0]
  int i;
  for(i = 0; i < 2; i++)
    {
      DPRINTF("P%d(%s) |", i, (pipes[i].active)?((pipes[i].mute || pipes[i].unmuteIgnore > xTaskGetTickCount())?"M":"A"):"I");
      int spkNum;
      for(spkNum = 0; spkNum < 4; spkNum++)
 801674e:	45ba      	cmp	sl, r7
 8016750:	d1e3      	bne.n	801671a <printPipes+0x6a>
          {
            DPRINTF("  |");
          }


      DPRINTF(" inQ:%s.%d if:%s@%dHz of:%s@%dHz mode:%s clkSrc:%s"CLEAR_LINE"\n",
 8016752:	6820      	ldr	r0, [r4, #0]
 8016754:	42b0      	cmp	r0, r6
 8016756:	dc41      	bgt.n	80167dc <printPipes+0x12c>
 8016758:	f817 3c10 	ldrb.w	r3, [r7, #-16]
 801675c:	497e      	ldr	r1, [pc, #504]	; (8016958 <printPipes+0x2a8>)
 801675e:	f817 ec0f 	ldrb.w	lr, [r7, #-15]
 8016762:	4a76      	ldr	r2, [pc, #472]	; (801693c <printPipes+0x28c>)
 8016764:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016768:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 801676c:	f8d3 a270 	ldr.w	sl, [r3, #624]	; 0x270
 8016770:	2350      	movs	r3, #80	; 0x50
 8016772:	fb03 2309 	mla	r3, r3, r9, r2
 8016776:	f8de 22c8 	ldr.w	r2, [lr, #712]	; 0x2c8
 801677a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801677e:	9200      	str	r2, [sp, #0]
 8016780:	f897 e008 	ldrb.w	lr, [r7, #8]
 8016784:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 8016788:	f501 7c37 	add.w	ip, r1, #732	; 0x2dc
 801678c:	f8de 2394 	ldr.w	r2, [lr, #916]	; 0x394
 8016790:	9202      	str	r2, [sp, #8]
 8016792:	f897 8006 	ldrb.w	r8, [r7, #6]
 8016796:	f201 2ee2 	addw	lr, r1, #738	; 0x2e2
 801679a:	f1b8 0f00 	cmp.w	r8, #0
 801679e:	bf08      	it	eq
 80167a0:	46e6      	moveq	lr, ip
 80167a2:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 80167a6:	f8cd e010 	str.w	lr, [sp, #16]
 80167aa:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80167ae:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80167b2:	f8dc 2244 	ldr.w	r2, [ip, #580]	; 0x244
 80167b6:	9205      	str	r2, [sp, #20]
 80167b8:	6a3a      	ldr	r2, [r7, #32]
 80167ba:	9203      	str	r2, [sp, #12]
 80167bc:	69fa      	ldr	r2, [r7, #28]
 80167be:	9201      	str	r2, [sp, #4]
 80167c0:	f201 615f 	addw	r1, r1, #1631	; 0x65f
 80167c4:	4652      	mov	r2, sl
 80167c6:	4428      	add	r0, r5
 80167c8:	f7f2 fa4c 	bl	8008c64 <xsprintf>
 80167cc:	f8d4 8000 	ldr.w	r8, [r4]
 80167d0:	eb05 0008 	add.w	r0, r5, r8
 80167d4:	f006 fd34 	bl	801d240 <strlen>
 80167d8:	4440      	add	r0, r8
 80167da:	6020      	str	r0, [r4, #0]
 80167dc:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80167e0:	9308      	str	r3, [sp, #32]
static uint8_t convertBuf[2][8+8+8+8];
static uint8_t inBufSize[2] = {0,0};
static int setDbgBuf[2] = {1};
static void printDbgBuf(int pipeNum, int *bufSize, char *bufPtr)
{
  if(setDbgBuf[pipeNum] == 1)
 80167e2:	4b5e      	ldr	r3, [pc, #376]	; (801695c <printPipes+0x2ac>)
 80167e4:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 80167e8:	2b01      	cmp	r3, #1
 80167ea:	f000 8116 	beq.w	8016a1a <printPipes+0x36a>
    return;
  int i;
  DPRINTF(" Input buffers:  ");
 80167ee:	6820      	ldr	r0, [r4, #0]
 80167f0:	42b0      	cmp	r0, r6
 80167f2:	dc0b      	bgt.n	801680c <printPipes+0x15c>
 80167f4:	495a      	ldr	r1, [pc, #360]	; (8016960 <printPipes+0x2b0>)
 80167f6:	4428      	add	r0, r5
 80167f8:	f7f2 fa34 	bl	8008c64 <xsprintf>
 80167fc:	f8d4 8000 	ldr.w	r8, [r4]
 8016800:	eb05 0008 	add.w	r0, r5, r8
 8016804:	f006 fd1c 	bl	801d240 <strlen>
 8016808:	4440      	add	r0, r8
 801680a:	6020      	str	r0, [r4, #0]
  for(i = 0; i<16; i++)
    {
      if((i%8)<inBufSize[pipeNum])
 801680c:	f8df b16c 	ldr.w	fp, [pc, #364]	; 801697c <printPipes+0x2cc>
          {
            DPRINTF("  |");
          }


      DPRINTF(" inQ:%s.%d if:%s@%dHz of:%s@%dHz mode:%s clkSrc:%s"CLEAR_LINE"\n",
 8016810:	f04f 0800 	mov.w	r8, #0
    return;
  int i;
  DPRINTF(" Input buffers:  ");
  for(i = 0; i<16; i++)
    {
      if((i%8)<inBufSize[pipeNum])
 8016814:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8016818:	6820      	ldr	r0, [r4, #0]
 801681a:	f008 0a07 	and.w	sl, r8, #7
 801681e:	459a      	cmp	sl, r3
 8016820:	da09      	bge.n	8016836 <printPipes+0x186>
        {
          DPRINTF("%02x", convertBuf[pipeNum][i]);
 8016822:	42b0      	cmp	r0, r6
 8016824:	dc27      	bgt.n	8016876 <printPipes+0x1c6>
 8016826:	9b07      	ldr	r3, [sp, #28]
 8016828:	494e      	ldr	r1, [pc, #312]	; (8016964 <printPipes+0x2b4>)
 801682a:	f813 2008 	ldrb.w	r2, [r3, r8]
 801682e:	4428      	add	r0, r5
 8016830:	f7f2 fa18 	bl	8008c64 <xsprintf>
 8016834:	e005      	b.n	8016842 <printPipes+0x192>
        }
      else
        {
          DPRINTF("  ");
 8016836:	42b0      	cmp	r0, r6
 8016838:	dc1d      	bgt.n	8016876 <printPipes+0x1c6>
 801683a:	494b      	ldr	r1, [pc, #300]	; (8016968 <printPipes+0x2b8>)
 801683c:	4428      	add	r0, r5
 801683e:	f7f2 fa11 	bl	8008c64 <xsprintf>
 8016842:	6823      	ldr	r3, [r4, #0]
 8016844:	9309      	str	r3, [sp, #36]	; 0x24
 8016846:	18e8      	adds	r0, r5, r3
 8016848:	f006 fcfa 	bl	801d240 <strlen>
 801684c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        }
      if((i%8) == 7) DPRINTF("     ");
 801684e:	f1ba 0f07 	cmp.w	sl, #7
        {
          DPRINTF("%02x", convertBuf[pipeNum][i]);
        }
      else
        {
          DPRINTF("  ");
 8016852:	4418      	add	r0, r3
 8016854:	6020      	str	r0, [r4, #0]
        }
      if((i%8) == 7) DPRINTF("     ");
 8016856:	d10e      	bne.n	8016876 <printPipes+0x1c6>
 8016858:	6820      	ldr	r0, [r4, #0]
 801685a:	42b0      	cmp	r0, r6
 801685c:	dc0b      	bgt.n	8016876 <printPipes+0x1c6>
 801685e:	4943      	ldr	r1, [pc, #268]	; (801696c <printPipes+0x2bc>)
 8016860:	4428      	add	r0, r5
 8016862:	f7f2 f9ff 	bl	8008c64 <xsprintf>
 8016866:	f8d4 a000 	ldr.w	sl, [r4]
 801686a:	eb05 000a 	add.w	r0, r5, sl
 801686e:	f006 fce7 	bl	801d240 <strlen>
 8016872:	4450      	add	r0, sl
 8016874:	6020      	str	r0, [r4, #0]
{
  if(setDbgBuf[pipeNum] == 1)
    return;
  int i;
  DPRINTF(" Input buffers:  ");
  for(i = 0; i<16; i++)
 8016876:	f108 0801 	add.w	r8, r8, #1
 801687a:	f1b8 0f10 	cmp.w	r8, #16
 801687e:	d1c9      	bne.n	8016814 <printPipes+0x164>
        {
          DPRINTF("  ");
        }
      if((i%8) == 7) DPRINTF("     ");
    }
  DPRINTF(CLEAR_LINE"\n Output buffers: ");
 8016880:	6820      	ldr	r0, [r4, #0]
 8016882:	42b0      	cmp	r0, r6
 8016884:	dc0b      	bgt.n	801689e <printPipes+0x1ee>
 8016886:	493a      	ldr	r1, [pc, #232]	; (8016970 <printPipes+0x2c0>)
 8016888:	4428      	add	r0, r5
 801688a:	f7f2 f9eb 	bl	8008c64 <xsprintf>
 801688e:	f8d4 a000 	ldr.w	sl, [r4]
 8016892:	eb05 000a 	add.w	r0, r5, sl
 8016896:	f006 fcd3 	bl	801d240 <strlen>
 801689a:	4450      	add	r0, sl
 801689c:	6020      	str	r0, [r4, #0]
          {
            DPRINTF("  |");
          }


      DPRINTF(" inQ:%s.%d if:%s@%dHz of:%s@%dHz mode:%s clkSrc:%s"CLEAR_LINE"\n",
 801689e:	f04f 0a10 	mov.w	sl, #16
      if((i%8) == 7) DPRINTF("     ");
    }
  DPRINTF(CLEAR_LINE"\n Output buffers: ");
  for(i = 16; i<32; i++)
    {
      DPRINTF("%02x", convertBuf[pipeNum][i]);
 80168a2:	6820      	ldr	r0, [r4, #0]
 80168a4:	42b0      	cmp	r0, r6
 80168a6:	dc0e      	bgt.n	80168c6 <printPipes+0x216>
 80168a8:	9b07      	ldr	r3, [sp, #28]
 80168aa:	492e      	ldr	r1, [pc, #184]	; (8016964 <printPipes+0x2b4>)
 80168ac:	f813 200a 	ldrb.w	r2, [r3, sl]
 80168b0:	4428      	add	r0, r5
 80168b2:	f7f2 f9d7 	bl	8008c64 <xsprintf>
 80168b6:	f8d4 b000 	ldr.w	fp, [r4]
 80168ba:	eb05 000b 	add.w	r0, r5, fp
 80168be:	f006 fcbf 	bl	801d240 <strlen>
 80168c2:	4458      	add	r0, fp
 80168c4:	6020      	str	r0, [r4, #0]
      if((i%8) == 7) DPRINTF("     ");
 80168c6:	f00a 0307 	and.w	r3, sl, #7
 80168ca:	2b07      	cmp	r3, #7
 80168cc:	d10e      	bne.n	80168ec <printPipes+0x23c>
 80168ce:	6820      	ldr	r0, [r4, #0]
 80168d0:	42b0      	cmp	r0, r6
 80168d2:	dc0b      	bgt.n	80168ec <printPipes+0x23c>
 80168d4:	4925      	ldr	r1, [pc, #148]	; (801696c <printPipes+0x2bc>)
 80168d6:	4428      	add	r0, r5
 80168d8:	f7f2 f9c4 	bl	8008c64 <xsprintf>
 80168dc:	f8d4 b000 	ldr.w	fp, [r4]
 80168e0:	eb05 000b 	add.w	r0, r5, fp
 80168e4:	f006 fcac 	bl	801d240 <strlen>
 80168e8:	4458      	add	r0, fp
 80168ea:	6020      	str	r0, [r4, #0]
          DPRINTF("  ");
        }
      if((i%8) == 7) DPRINTF("     ");
    }
  DPRINTF(CLEAR_LINE"\n Output buffers: ");
  for(i = 16; i<32; i++)
 80168ec:	f10a 0a01 	add.w	sl, sl, #1
 80168f0:	f1ba 0f20 	cmp.w	sl, #32
 80168f4:	d1d5      	bne.n	80168a2 <printPipes+0x1f2>
    {
      DPRINTF("%02x", convertBuf[pipeNum][i]);
      if((i%8) == 7) DPRINTF("     ");
    }
  DPRINTF(CLEAR_LINE"\n SAI interfaces: ");
 80168f6:	6820      	ldr	r0, [r4, #0]
 80168f8:	42b0      	cmp	r0, r6
 80168fa:	dc0b      	bgt.n	8016914 <printPipes+0x264>
 80168fc:	491d      	ldr	r1, [pc, #116]	; (8016974 <printPipes+0x2c4>)
 80168fe:	4428      	add	r0, r5
 8016900:	f7f2 f9b0 	bl	8008c64 <xsprintf>
 8016904:	f8d4 a000 	ldr.w	sl, [r4]
 8016908:	eb05 000a 	add.w	r0, r5, sl
 801690c:	f006 fc98 	bl	801d240 <strlen>
 8016910:	4450      	add	r0, sl
 8016912:	6020      	str	r0, [r4, #0]
  for(i = 16; i<32; i++)
    {
      DPRINTF("%02x", convertBuf[pipeNum][(i&1)?i&0xfe:i|1]);
 8016914:	4b18      	ldr	r3, [pc, #96]	; (8016978 <printPipes+0x2c8>)
 8016916:	eb03 1a49 	add.w	sl, r3, r9, lsl #5
 801691a:	6820      	ldr	r0, [r4, #0]
 801691c:	42b0      	cmp	r0, r6
 801691e:	f008 0b01 	and.w	fp, r8, #1
 8016922:	dc3d      	bgt.n	80169a0 <printPipes+0x2f0>
 8016924:	4428      	add	r0, r5
 8016926:	f1bb 0f00 	cmp.w	fp, #0
 801692a:	d029      	beq.n	8016980 <printPipes+0x2d0>
 801692c:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8016930:	e028      	b.n	8016984 <printPipes+0x2d4>
 8016932:	bf00      	nop
 8016934:	10002e48 	.word	0x10002e48
 8016938:	10002554 	.word	0x10002554
 801693c:	100024f4 	.word	0x100024f4
 8016940:	0803f695 	.word	0x0803f695
 8016944:	0803f693 	.word	0x0803f693
 8016948:	0803f691 	.word	0x0803f691
 801694c:	0803f697 	.word	0x0803f697
 8016950:	0803f6a1 	.word	0x0803f6a1
 8016954:	0803f6a7 	.word	0x0803f6a7
 8016958:	0803f04c 	.word	0x0803f04c
 801695c:	100027ac 	.word	0x100027ac
 8016960:	0803f6df 	.word	0x0803f6df
 8016964:	0803f6f1 	.word	0x0803f6f1
 8016968:	0803f6f6 	.word	0x0803f6f6
 801696c:	0803f6f9 	.word	0x0803f6f9
 8016970:	0803f6ff 	.word	0x0803f6ff
 8016974:	0803f712 	.word	0x0803f712
 8016978:	10002da0 	.word	0x10002da0
 801697c:	10002e88 	.word	0x10002e88
 8016980:	f048 0301 	orr.w	r3, r8, #1
 8016984:	4453      	add	r3, sl
 8016986:	492e      	ldr	r1, [pc, #184]	; (8016a40 <printPipes+0x390>)
 8016988:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 801698c:	f7f2 f96a 	bl	8008c64 <xsprintf>
 8016990:	6823      	ldr	r3, [r4, #0]
 8016992:	9309      	str	r3, [sp, #36]	; 0x24
 8016994:	18e8      	adds	r0, r5, r3
 8016996:	f006 fc53 	bl	801d240 <strlen>
 801699a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801699c:	4418      	add	r0, r3
 801699e:	6020      	str	r0, [r4, #0]
      if((i%2) == 1)
 80169a0:	f1bb 0f00 	cmp.w	fp, #0
 80169a4:	d00e      	beq.n	80169c4 <printPipes+0x314>
        {
          DPRINTF(" ");
 80169a6:	6820      	ldr	r0, [r4, #0]
 80169a8:	42b0      	cmp	r0, r6
 80169aa:	dc0b      	bgt.n	80169c4 <printPipes+0x314>
 80169ac:	4925      	ldr	r1, [pc, #148]	; (8016a44 <printPipes+0x394>)
 80169ae:	4428      	add	r0, r5
 80169b0:	f7f2 f958 	bl	8008c64 <xsprintf>
 80169b4:	f8d4 b000 	ldr.w	fp, [r4]
 80169b8:	eb05 000b 	add.w	r0, r5, fp
 80169bc:	f006 fc40 	bl	801d240 <strlen>
 80169c0:	4458      	add	r0, fp
 80169c2:	6020      	str	r0, [r4, #0]
        }
      if((i%8) == 7)
 80169c4:	f008 0307 	and.w	r3, r8, #7
 80169c8:	2b07      	cmp	r3, #7
 80169ca:	d10e      	bne.n	80169ea <printPipes+0x33a>
        {
          DPRINTF(" ");
 80169cc:	6820      	ldr	r0, [r4, #0]
 80169ce:	42b0      	cmp	r0, r6
 80169d0:	dc0b      	bgt.n	80169ea <printPipes+0x33a>
 80169d2:	491c      	ldr	r1, [pc, #112]	; (8016a44 <printPipes+0x394>)
 80169d4:	4428      	add	r0, r5
 80169d6:	f7f2 f945 	bl	8008c64 <xsprintf>
 80169da:	f8d4 b000 	ldr.w	fp, [r4]
 80169de:	eb05 000b 	add.w	r0, r5, fp
 80169e2:	f006 fc2d 	bl	801d240 <strlen>
 80169e6:	4458      	add	r0, fp
 80169e8:	6020      	str	r0, [r4, #0]
    {
      DPRINTF("%02x", convertBuf[pipeNum][i]);
      if((i%8) == 7) DPRINTF("     ");
    }
  DPRINTF(CLEAR_LINE"\n SAI interfaces: ");
  for(i = 16; i<32; i++)
 80169ea:	f108 0801 	add.w	r8, r8, #1
 80169ee:	f1b8 0f20 	cmp.w	r8, #32
 80169f2:	d192      	bne.n	801691a <printPipes+0x26a>
      if((i%8) == 7)
        {
          DPRINTF(" ");
        }
    }
  DPRINTF(CLEAR_LINE"\n");
 80169f4:	6820      	ldr	r0, [r4, #0]
 80169f6:	42b0      	cmp	r0, r6
 80169f8:	dc0b      	bgt.n	8016a12 <printPipes+0x362>
 80169fa:	4913      	ldr	r1, [pc, #76]	; (8016a48 <printPipes+0x398>)
 80169fc:	4428      	add	r0, r5
 80169fe:	f7f2 f931 	bl	8008c64 <xsprintf>
 8016a02:	f8d4 8000 	ldr.w	r8, [r4]
 8016a06:	eb05 0008 	add.w	r0, r5, r8
 8016a0a:	f006 fc19 	bl	801d240 <strlen>
 8016a0e:	4440      	add	r0, r8
 8016a10:	6020      	str	r0, [r4, #0]
  setDbgBuf[pipeNum] = 1;
 8016a12:	4a0e      	ldr	r2, [pc, #56]	; (8016a4c <printPipes+0x39c>)
 8016a14:	9908      	ldr	r1, [sp, #32]
 8016a16:	2301      	movs	r3, #1
 8016a18:	5053      	str	r3, [r2, r1]
 8016a1a:	9b07      	ldr	r3, [sp, #28]
#define printDbgBuf(...)
#endif
void printPipes(int *bufSize, char *bufPtr)
{
  int i;
  for(i = 0; i < 2; i++)
 8016a1c:	f109 0901 	add.w	r9, r9, #1
 8016a20:	3320      	adds	r3, #32
 8016a22:	f1b9 0f02 	cmp.w	r9, #2
 8016a26:	f107 0750 	add.w	r7, r7, #80	; 0x50
 8016a2a:	9307      	str	r3, [sp, #28]
 8016a2c:	f47f ae4c 	bne.w	80166c8 <printPipes+0x18>
              pipes[i].inFreq, outFormat[pipes[i].outputFormat], pipes[i].outFreq,
              (pipes[i].outputMode == OM_RADIO)?"Radio":"Cable",
              clkSrcStr[pipes[i].clkSrc]);
      printDbgBuf(i, bufSize, bufPtr);
    }
  printSAIBufs(bufSize, bufPtr);
 8016a30:	4629      	mov	r1, r5
 8016a32:	4620      	mov	r0, r4
}
 8016a34:	b00b      	add	sp, #44	; 0x2c
 8016a36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
              pipes[i].inFreq, outFormat[pipes[i].outputFormat], pipes[i].outFreq,
              (pipes[i].outputMode == OM_RADIO)?"Radio":"Cable",
              clkSrcStr[pipes[i].clkSrc]);
      printDbgBuf(i, bufSize, bufPtr);
    }
  printSAIBufs(bufSize, bufPtr);
 8016a3a:	f7fd bc2b 	b.w	8014294 <printSAIBufs>
 8016a3e:	bf00      	nop
 8016a40:	0803f6f1 	.word	0x0803f6f1
 8016a44:	0803f725 	.word	0x0803f725
 8016a48:	0803f727 	.word	0x0803f727
 8016a4c:	100027ac 	.word	0x100027ac

08016a50 <convertMsg>:
}

static void convertMsg(void *data)
{
  int pipeNum = (int)data;
  convert(pipeNum);
 8016a50:	f000 b87c 	b.w	8016b4c <convert>

08016a54 <aConvInit>:
}


void aConvInit(void)
{
 8016a54:	b573      	push	{r0, r1, r4, r5, r6, lr}
  bQueueInit(&inQueueUSB1, QUEUE_USB_LIMITS, USBTrimm);
 8016a56:	4c34      	ldr	r4, [pc, #208]	; (8016b28 <aConvInit+0xd4>)
 8016a58:	4e34      	ldr	r6, [pc, #208]	; (8016b2c <aConvInit+0xd8>)
 8016a5a:	9601      	str	r6, [sp, #4]
 8016a5c:	2500      	movs	r5, #0
 8016a5e:	9500      	str	r5, [sp, #0]
 8016a60:	2305      	movs	r3, #5
 8016a62:	2202      	movs	r2, #2
 8016a64:	210a      	movs	r1, #10
 8016a66:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8016a6a:	f7fe f9fb 	bl	8014e64 <bQueueInit>
  bQueueInit(&inQueueUSB2, QUEUE_USB_LIMITS, USBTrimm);
 8016a6e:	e88d 0060 	stmia.w	sp, {r5, r6}
 8016a72:	2305      	movs	r3, #5
 8016a74:	2202      	movs	r2, #2
 8016a76:	210a      	movs	r1, #10
 8016a78:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 8016a7c:	f7fe f9f2 	bl	8014e64 <bQueueInit>
  bQueueInit(&inQueueSPI1, QUEUE_SPI1_LIMITS, SPI1Trimm);
 8016a80:	4b2b      	ldr	r3, [pc, #172]	; (8016b30 <aConvInit+0xdc>)
 8016a82:	9301      	str	r3, [sp, #4]
 8016a84:	9500      	str	r5, [sp, #0]
 8016a86:	2303      	movs	r3, #3
 8016a88:	2202      	movs	r2, #2
 8016a8a:	210a      	movs	r1, #10
 8016a8c:	f504 70dc 	add.w	r0, r4, #440	; 0x1b8
 8016a90:	f7fe f9e8 	bl	8014e64 <bQueueInit>
  bQueueInit(&inQueueSPI2, QUEUE_SPI2_LIMITS, SPI2Trimm);
 8016a94:	4b27      	ldr	r3, [pc, #156]	; (8016b34 <aConvInit+0xe0>)
 8016a96:	9301      	str	r3, [sp, #4]
 8016a98:	9500      	str	r5, [sp, #0]
 8016a9a:	2303      	movs	r3, #3
 8016a9c:	2202      	movs	r2, #2
 8016a9e:	210a      	movs	r1, #10
 8016aa0:	f504 70f6 	add.w	r0, r4, #492	; 0x1ec
 8016aa4:	f7fe f9de 	bl	8014e64 <bQueueInit>
  bQueueInit(&inQueueI2S, QUEUE_I2S_LIMITS, I2STrimm);
 8016aa8:	4b23      	ldr	r3, [pc, #140]	; (8016b38 <aConvInit+0xe4>)
 8016aaa:	9301      	str	r3, [sp, #4]
 8016aac:	9500      	str	r5, [sp, #0]
 8016aae:	f04f 33ff 	mov.w	r3, #4294967295
 8016ab2:	2203      	movs	r2, #3
 8016ab4:	210a      	movs	r1, #10
 8016ab6:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8016aba:	f7fe f9d3 	bl	8014e64 <bQueueInit>
  bQueueInit(&inQueueTest, QUEUE_TEST_LIMITS, testTrimm);
 8016abe:	4b1f      	ldr	r3, [pc, #124]	; (8016b3c <aConvInit+0xe8>)
 8016ac0:	9301      	str	r3, [sp, #4]
 8016ac2:	9500      	str	r5, [sp, #0]
 8016ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ac8:	2203      	movs	r2, #3
 8016aca:	210a      	movs	r1, #10
 8016acc:	f504 7015 	add.w	r0, r4, #596	; 0x254
 8016ad0:	f7fe f9c8 	bl	8014e64 <bQueueInit>
  bQueueInit(&outQueueSAI1, QUEUE_SAI1_LIMITS, fillUpSAI1);
 8016ad4:	2504      	movs	r5, #4
 8016ad6:	4b1a      	ldr	r3, [pc, #104]	; (8016b40 <aConvInit+0xec>)
 8016ad8:	9301      	str	r3, [sp, #4]
 8016ada:	9500      	str	r5, [sp, #0]
 8016adc:	f04f 33ff 	mov.w	r3, #4294967295
 8016ae0:	2205      	movs	r2, #5
 8016ae2:	210f      	movs	r1, #15
 8016ae4:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8016ae8:	f7fe f9bc 	bl	8014e64 <bQueueInit>
  bQueueInit(&outQueueSAI2, QUEUE_SAI2_LIMITS, fillUpSAI2);
 8016aec:	4b15      	ldr	r3, [pc, #84]	; (8016b44 <aConvInit+0xf0>)
 8016aee:	9301      	str	r3, [sp, #4]
 8016af0:	9500      	str	r5, [sp, #0]
 8016af2:	f04f 33ff 	mov.w	r3, #4294967295
 8016af6:	2205      	movs	r2, #5
 8016af8:	210f      	movs	r1, #15
 8016afa:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8016afe:	f7fe f9b1 	bl	8014e64 <bQueueInit>
  pipes[0].outputMode = (cfg.proto & 0x08)?OM_CABLE:OM_RADIO;
 8016b02:	4a11      	ldr	r2, [pc, #68]	; (8016b48 <aConvInit+0xf4>)
 8016b04:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8016b06:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016b0a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
  pipes[1].outputMode = (cfg.proto & 0x08)?OM_CABLE:OM_RADIO;
 8016b0e:	6b53      	ldr	r3, [r2, #52]	; 0x34
  moduleInit(module);
 8016b10:	f104 0008 	add.w	r0, r4, #8
  bQueueInit(&inQueueI2S, QUEUE_I2S_LIMITS, I2STrimm);
  bQueueInit(&inQueueTest, QUEUE_TEST_LIMITS, testTrimm);
  bQueueInit(&outQueueSAI1, QUEUE_SAI1_LIMITS, fillUpSAI1);
  bQueueInit(&outQueueSAI2, QUEUE_SAI2_LIMITS, fillUpSAI2);
  pipes[0].outputMode = (cfg.proto & 0x08)?OM_CABLE:OM_RADIO;
  pipes[1].outputMode = (cfg.proto & 0x08)?OM_CABLE:OM_RADIO;
 8016b14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016b18:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
  moduleInit(module);
}
 8016b1c:	b002      	add	sp, #8
 8016b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  bQueueInit(&inQueueTest, QUEUE_TEST_LIMITS, testTrimm);
  bQueueInit(&outQueueSAI1, QUEUE_SAI1_LIMITS, fillUpSAI1);
  bQueueInit(&outQueueSAI2, QUEUE_SAI2_LIMITS, fillUpSAI2);
  pipes[0].outputMode = (cfg.proto & 0x08)?OM_CABLE:OM_RADIO;
  pipes[1].outputMode = (cfg.proto & 0x08)?OM_CABLE:OM_RADIO;
  moduleInit(module);
 8016b22:	f7f4 bca9 	b.w	800b478 <moduleInit>
 8016b26:	bf00      	nop
 8016b28:	100024f4 	.word	0x100024f4
 8016b2c:	00000000 	.word	0x00000000
 8016b30:	08014b0d 	.word	0x08014b0d
 8016b34:	08014b25 	.word	0x08014b25
 8016b38:	08014b71 	.word	0x08014b71
 8016b3c:	080081c9 	.word	0x080081c9
 8016b40:	08015c6d 	.word	0x08015c6d
 8016b44:	08015c91 	.word	0x08015c91
 8016b48:	10001000 	.word	0x10001000

08016b4c <convert>:
}



static void __attribute__((optimize(OPTIM))) convert(int pipeNum)
{
 8016b4c:	b590      	push	{r4, r7, lr}
 8016b4e:	b087      	sub	sp, #28
 8016b50:	af02      	add	r7, sp, #8
 8016b52:	6078      	str	r0, [r7, #4]
  pipe_t *pipe = &pipes[pipeNum];
 8016b54:	687a      	ldr	r2, [r7, #4]
 8016b56:	4613      	mov	r3, r2
 8016b58:	009b      	lsls	r3, r3, #2
 8016b5a:	4413      	add	r3, r2
 8016b5c:	011b      	lsls	r3, r3, #4
 8016b5e:	4a5e      	ldr	r2, [pc, #376]	; (8016cd8 <convert+0x18c>)
 8016b60:	4413      	add	r3, r2
 8016b62:	60bb      	str	r3, [r7, #8]
  if(!pipe->convertFormat || !pipe->convertFormat->convert)
 8016b64:	68bb      	ldr	r3, [r7, #8]
 8016b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	f000 80af 	beq.w	8016ccc <convert+0x180>
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	f000 80a9 	beq.w	8016ccc <convert+0x180>
    return;
  int full = 0;
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	60fb      	str	r3, [r7, #12]
  if (pipe->outBuffer1 == NULL)                 pipe->outBuffer1 = bAlloc(AUDIO_BUFFER_SAMPLES * sizeof(uint64_t));
 8016b7e:	68bb      	ldr	r3, [r7, #8]
 8016b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d106      	bne.n	8016b94 <convert+0x48>
 8016b86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8016b8a:	f7fe f9f7 	bl	8014f7c <bAlloc>
 8016b8e:	4602      	mov	r2, r0
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	649a      	str	r2, [r3, #72]	; 0x48
  if (pipe->outQueue2 != NULL && pipe->outBuffer2 == NULL)
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d00a      	beq.n	8016bb2 <convert+0x66>
 8016b9c:	68bb      	ldr	r3, [r7, #8]
 8016b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d106      	bne.n	8016bb2 <convert+0x66>
    pipe->outBuffer2 = bAlloc(AUDIO_BUFFER_SAMPLES * sizeof(uint64_t));
 8016ba4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8016ba8:	f7fe f9e8 	bl	8014f7c <bAlloc>
 8016bac:	4602      	mov	r2, r0
 8016bae:	68bb      	ldr	r3, [r7, #8]
 8016bb0:	64da      	str	r2, [r3, #76]	; 0x4c

  if (pipe->outBuffer1 && (!pipe->outQueue2 || pipe->outBuffer2))
 8016bb2:	68bb      	ldr	r3, [r7, #8]
 8016bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	f000 808b 	beq.w	8016cd2 <convert+0x186>
 8016bbc:	68bb      	ldr	r3, [r7, #8]
 8016bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d032      	beq.n	8016c2a <convert+0xde>
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	f000 8082 	beq.w	8016cd2 <convert+0x186>
    {
      while (!full)
 8016bce:	e02c      	b.n	8016c2a <convert+0xde>
        {
          if (pipe->inBuffer == NULL)
 8016bd0:	68bb      	ldr	r3, [r7, #8]
 8016bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d107      	bne.n	8016be8 <convert+0x9c>
            pipe->inBuffer =  bDequeue(pipe->inQueue);
 8016bd8:	68bb      	ldr	r3, [r7, #8]
 8016bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bdc:	4618      	mov	r0, r3
 8016bde:	f7fe f989 	bl	8014ef4 <bDequeue>
 8016be2:	4602      	mov	r2, r0
 8016be4:	68bb      	ldr	r3, [r7, #8]
 8016be6:	645a      	str	r2, [r3, #68]	; 0x44

          if (pipe->inBuffer != NULL)
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d06f      	beq.n	8016cd0 <convert+0x184>
            {
              full = pipe->convertFormat->convert(pipeNum, pipe->inBuffer, pipe->outBuffer1, pipe->outBuffer2, pipe->skipRatio);
 8016bf0:	68bb      	ldr	r3, [r7, #8]
 8016bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bf4:	681c      	ldr	r4, [r3, #0]
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8016bfa:	68bb      	ldr	r3, [r7, #8]
 8016bfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c06:	9300      	str	r3, [sp, #0]
 8016c08:	4603      	mov	r3, r0
 8016c0a:	6878      	ldr	r0, [r7, #4]
 8016c0c:	47a0      	blx	r4
 8016c0e:	60f8      	str	r0, [r7, #12]
              if ((pipe->inBuffer)->size == 0)
 8016c10:	68bb      	ldr	r3, [r7, #8]
 8016c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c14:	881b      	ldrh	r3, [r3, #0]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d107      	bne.n	8016c2a <convert+0xde>
                {
                  bFree(pipe->inBuffer);
 8016c1a:	68bb      	ldr	r3, [r7, #8]
 8016c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c1e:	4618      	mov	r0, r3
 8016c20:	f7fe fc06 	bl	8015430 <bFree>
                  pipe->inBuffer = NULL;
 8016c24:	68bb      	ldr	r3, [r7, #8]
 8016c26:	2200      	movs	r2, #0
 8016c28:	645a      	str	r2, [r3, #68]	; 0x44
  if (pipe->outQueue2 != NULL && pipe->outBuffer2 == NULL)
    pipe->outBuffer2 = bAlloc(AUDIO_BUFFER_SAMPLES * sizeof(uint64_t));

  if (pipe->outBuffer1 && (!pipe->outQueue2 || pipe->outBuffer2))
    {
      while (!full)
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d0cf      	beq.n	8016bd0 <convert+0x84>
            {
              //Buffer not full and input data depleted. Wait for next frame
              return;
            }
        }
      if(pipe->mute == 0 && pipes->unmuteIgnore < xTaskGetTickCount())
 8016c30:	68bb      	ldr	r3, [r7, #8]
 8016c32:	781b      	ldrb	r3, [r3, #0]
 8016c34:	f003 0301 	and.w	r3, r3, #1
 8016c38:	b2db      	uxtb	r3, r3
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d131      	bne.n	8016ca2 <convert+0x156>
 8016c3e:	4b26      	ldr	r3, [pc, #152]	; (8016cd8 <convert+0x18c>)
 8016c40:	685c      	ldr	r4, [r3, #4]
 8016c42:	f7f3 fe6b 	bl	800a91c <xTaskGetTickCount>
 8016c46:	4603      	mov	r3, r0
 8016c48:	429c      	cmp	r4, r3
 8016c4a:	d22a      	bcs.n	8016ca2 <convert+0x156>
        {
          //Buffers are full. Send to transmitters. Reuse if enqueue failed
          if (bEnqueue(pipe->outQueue1, pipe->outBuffer1))
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c50:	68bb      	ldr	r3, [r7, #8]
 8016c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016c54:	4619      	mov	r1, r3
 8016c56:	4610      	mov	r0, r2
 8016c58:	f7fe f91d 	bl	8014e96 <bEnqueue>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d004      	beq.n	8016c6c <convert+0x120>
            bFree(pipe->outBuffer1);
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7fe fbe2 	bl	8015430 <bFree>
          pipe->outBuffer1 = NULL;
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	2200      	movs	r2, #0
 8016c70:	649a      	str	r2, [r3, #72]	; 0x48
          if (pipe->outBuffer2)
 8016c72:	68bb      	ldr	r3, [r7, #8]
 8016c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d02b      	beq.n	8016cd2 <convert+0x186>
            {
              if (bEnqueue(pipe->outQueue2, pipe->outBuffer2))
 8016c7a:	68bb      	ldr	r3, [r7, #8]
 8016c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016c7e:	68bb      	ldr	r3, [r7, #8]
 8016c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016c82:	4619      	mov	r1, r3
 8016c84:	4610      	mov	r0, r2
 8016c86:	f7fe f906 	bl	8014e96 <bEnqueue>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d004      	beq.n	8016c9a <convert+0x14e>
                bFree(pipe->outBuffer2);
 8016c90:	68bb      	ldr	r3, [r7, #8]
 8016c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016c94:	4618      	mov	r0, r3
 8016c96:	f7fe fbcb 	bl	8015430 <bFree>
              pipe->outBuffer2 = NULL;
 8016c9a:	68bb      	ldr	r3, [r7, #8]
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	64da      	str	r2, [r3, #76]	; 0x4c
        {
          //Buffers are full. Send to transmitters. Reuse if enqueue failed
          if (bEnqueue(pipe->outQueue1, pipe->outBuffer1))
            bFree(pipe->outBuffer1);
          pipe->outBuffer1 = NULL;
          if (pipe->outBuffer2)
 8016ca0:	e017      	b.n	8016cd2 <convert+0x186>
            }
        }
      else
        {
          //Mute. Release buffers without sending to slave
          bFree(pipe->outBuffer1);
 8016ca2:	68bb      	ldr	r3, [r7, #8]
 8016ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7fe fbc2 	bl	8015430 <bFree>
          pipe->outBuffer1 = NULL;
 8016cac:	68bb      	ldr	r3, [r7, #8]
 8016cae:	2200      	movs	r2, #0
 8016cb0:	649a      	str	r2, [r3, #72]	; 0x48
          if (pipe->outBuffer2)
 8016cb2:	68bb      	ldr	r3, [r7, #8]
 8016cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d00b      	beq.n	8016cd2 <convert+0x186>
            {
              bFree(pipe->outBuffer2);
 8016cba:	68bb      	ldr	r3, [r7, #8]
 8016cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	f7fe fbb6 	bl	8015430 <bFree>
              pipe->outBuffer2 = NULL;
 8016cc4:	68bb      	ldr	r3, [r7, #8]
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	64da      	str	r2, [r3, #76]	; 0x4c
 8016cca:	e002      	b.n	8016cd2 <convert+0x186>

static void __attribute__((optimize(OPTIM))) convert(int pipeNum)
{
  pipe_t *pipe = &pipes[pipeNum];
  if(!pipe->convertFormat || !pipe->convertFormat->convert)
    return;
 8016ccc:	bf00      	nop
 8016cce:	e000      	b.n	8016cd2 <convert+0x186>
                }
            }
          else
            {
              //Buffer not full and input data depleted. Wait for next frame
              return;
 8016cd0:	bf00      	nop
              bFree(pipe->outBuffer2);
              pipe->outBuffer2 = NULL;
            }
        }
    }
}
 8016cd2:	3714      	adds	r7, #20
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd90      	pop	{r4, r7, pc}
 8016cd8:	1000253c 	.word	0x1000253c

08016cdc <conv_ns_16L16P_to_16L16P32N>:

#define SET_SLOT(arg_sai, arg_slot, arg0, arg1)\
  outPtr##arg_sai[numOut].byte[2*(arg_slot) + 0] = inPtr[numIn].byte[arg1]; \
  outPtr##arg_sai[numOut].byte[2*(arg_slot) + 1] = inPtr[numIn].byte[arg0]

CONVERT_ROUTINE1(conv_ns_16L16P_to_16L16P32N, t_16L16P, t_16L16P32N,
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b08a      	sub	sp, #40	; 0x28
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	60f8      	str	r0, [r7, #12]
 8016ce4:	60b9      	str	r1, [r7, #8]
 8016ce6:	607a      	str	r2, [r7, #4]
 8016ce8:	603b      	str	r3, [r7, #0]
 8016cea:	68bb      	ldr	r3, [r7, #8]
 8016cec:	889b      	ldrh	r3, [r3, #4]
 8016cee:	3310      	adds	r3, #16
 8016cf0:	68ba      	ldr	r2, [r7, #8]
 8016cf2:	4413      	add	r3, r2
 8016cf4:	3304      	adds	r3, #4
 8016cf6:	61fb      	str	r3, [r7, #28]
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	889b      	ldrh	r3, [r3, #4]
 8016cfc:	3310      	adds	r3, #16
 8016cfe:	687a      	ldr	r2, [r7, #4]
 8016d00:	4413      	add	r3, r2
 8016d02:	3304      	adds	r3, #4
 8016d04:	61bb      	str	r3, [r7, #24]
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	885b      	ldrh	r3, [r3, #2]
 8016d0a:	461a      	mov	r2, r3
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	881b      	ldrh	r3, [r3, #0]
 8016d10:	1ad3      	subs	r3, r2, r3
 8016d12:	08da      	lsrs	r2, r3, #3
 8016d14:	68bb      	ldr	r3, [r7, #8]
 8016d16:	881b      	ldrh	r3, [r3, #0]
 8016d18:	4619      	mov	r1, r3
 8016d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d1c:	fb91 f3f3 	sdiv	r3, r1, r3
 8016d20:	089b      	lsrs	r3, r3, #2
 8016d22:	4293      	cmp	r3, r2
 8016d24:	bf28      	it	cs
 8016d26:	4613      	movcs	r3, r2
 8016d28:	627b      	str	r3, [r7, #36]	; 0x24
 8016d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d2e:	fb02 f303 	mul.w	r3, r2, r3
 8016d32:	623b      	str	r3, [r7, #32]
 8016d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d10a      	bne.n	8016d50 <conv_ns_16L16P_to_16L16P32N+0x74>
 8016d3a:	68bb      	ldr	r3, [r7, #8]
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	801a      	strh	r2, [r3, #0]
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	2200      	movs	r2, #0
 8016d44:	801a      	strh	r2, [r3, #0]
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	2200      	movs	r2, #0
 8016d4a:	809a      	strh	r2, [r3, #4]
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	e0de      	b.n	8016f0e <conv_ns_16L16P_to_16L16P32N+0x232>
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	881a      	ldrh	r2, [r3, #0]
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	885b      	ldrh	r3, [r3, #2]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d90c      	bls.n	8016d76 <conv_ns_16L16P_to_16L16P32N+0x9a>
 8016d5c:	4b6e      	ldr	r3, [pc, #440]	; (8016f18 <conv_ns_16L16P_to_16L16P32N+0x23c>)
 8016d5e:	f240 52bb 	movw	r2, #1467	; 0x5bb
 8016d62:	496e      	ldr	r1, [pc, #440]	; (8016f1c <conv_ns_16L16P_to_16L16P32N+0x240>)
 8016d64:	486e      	ldr	r0, [pc, #440]	; (8016f20 <conv_ns_16L16P_to_16L16P32N+0x244>)
 8016d66:	f7f1 ff5f 	bl	8008c28 <xprintf>
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	617b      	str	r3, [r7, #20]
 8016d6e:	bf00      	nop
 8016d70:	697b      	ldr	r3, [r7, #20]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d1fc      	bne.n	8016d70 <conv_ns_16L16P_to_16L16P32N+0x94>
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	881a      	ldrh	r2, [r3, #0]
 8016d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d7c:	b29b      	uxth	r3, r3
 8016d7e:	00db      	lsls	r3, r3, #3
 8016d80:	b29b      	uxth	r3, r3
 8016d82:	4413      	add	r3, r2
 8016d84:	b29a      	uxth	r2, r3
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	801a      	strh	r2, [r3, #0]
 8016d8a:	68bb      	ldr	r3, [r7, #8]
 8016d8c:	881a      	ldrh	r2, [r3, #0]
 8016d8e:	6a3b      	ldr	r3, [r7, #32]
 8016d90:	b29b      	uxth	r3, r3
 8016d92:	009b      	lsls	r3, r3, #2
 8016d94:	b29b      	uxth	r3, r3
 8016d96:	1ad3      	subs	r3, r2, r3
 8016d98:	b29a      	uxth	r2, r3
 8016d9a:	68bb      	ldr	r3, [r7, #8]
 8016d9c:	801a      	strh	r2, [r3, #0]
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	889a      	ldrh	r2, [r3, #4]
 8016da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016da4:	b29b      	uxth	r3, r3
 8016da6:	00db      	lsls	r3, r3, #3
 8016da8:	b29b      	uxth	r3, r3
 8016daa:	4413      	add	r3, r2
 8016dac:	b29a      	uxth	r2, r3
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	809a      	strh	r2, [r3, #4]
 8016db2:	68bb      	ldr	r3, [r7, #8]
 8016db4:	889a      	ldrh	r2, [r3, #4]
 8016db6:	6a3b      	ldr	r3, [r7, #32]
 8016db8:	b29b      	uxth	r3, r3
 8016dba:	009b      	lsls	r3, r3, #2
 8016dbc:	b29b      	uxth	r3, r3
 8016dbe:	4413      	add	r3, r2
 8016dc0:	b29a      	uxth	r2, r3
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	809a      	strh	r2, [r3, #4]
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	881a      	ldrh	r2, [r3, #0]
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	885b      	ldrh	r3, [r3, #2]
 8016dce:	429a      	cmp	r2, r3
 8016dd0:	d93c      	bls.n	8016e4c <conv_ns_16L16P_to_16L16P32N+0x170>
 8016dd2:	4b51      	ldr	r3, [pc, #324]	; (8016f18 <conv_ns_16L16P_to_16L16P32N+0x23c>)
 8016dd4:	f240 52bb 	movw	r2, #1467	; 0x5bb
 8016dd8:	4950      	ldr	r1, [pc, #320]	; (8016f1c <conv_ns_16L16P_to_16L16P32N+0x240>)
 8016dda:	4851      	ldr	r0, [pc, #324]	; (8016f20 <conv_ns_16L16P_to_16L16P32N+0x244>)
 8016ddc:	f7f1 ff24 	bl	8008c28 <xprintf>
 8016de0:	2301      	movs	r3, #1
 8016de2:	613b      	str	r3, [r7, #16]
 8016de4:	bf00      	nop
 8016de6:	693b      	ldr	r3, [r7, #16]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d1fc      	bne.n	8016de6 <conv_ns_16L16P_to_16L16P32N+0x10a>
 8016dec:	e02e      	b.n	8016e4c <conv_ns_16L16P_to_16L16P32N+0x170>
 8016dee:	6a3a      	ldr	r2, [r7, #32]
 8016df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df2:	1ad3      	subs	r3, r2, r3
 8016df4:	623b      	str	r3, [r7, #32]
 8016df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df8:	3b01      	subs	r3, #1
 8016dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8016dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dfe:	00db      	lsls	r3, r3, #3
 8016e00:	69ba      	ldr	r2, [r7, #24]
 8016e02:	4413      	add	r3, r2
 8016e04:	6a3a      	ldr	r2, [r7, #32]
 8016e06:	0092      	lsls	r2, r2, #2
 8016e08:	69f9      	ldr	r1, [r7, #28]
 8016e0a:	440a      	add	r2, r1
 8016e0c:	7812      	ldrb	r2, [r2, #0]
 8016e0e:	701a      	strb	r2, [r3, #0]
 8016e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e12:	00db      	lsls	r3, r3, #3
 8016e14:	69ba      	ldr	r2, [r7, #24]
 8016e16:	4413      	add	r3, r2
 8016e18:	6a3a      	ldr	r2, [r7, #32]
 8016e1a:	0092      	lsls	r2, r2, #2
 8016e1c:	69f9      	ldr	r1, [r7, #28]
 8016e1e:	440a      	add	r2, r1
 8016e20:	7852      	ldrb	r2, [r2, #1]
 8016e22:	705a      	strb	r2, [r3, #1]
 8016e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e26:	00db      	lsls	r3, r3, #3
 8016e28:	69ba      	ldr	r2, [r7, #24]
 8016e2a:	4413      	add	r3, r2
 8016e2c:	6a3a      	ldr	r2, [r7, #32]
 8016e2e:	0092      	lsls	r2, r2, #2
 8016e30:	69f9      	ldr	r1, [r7, #28]
 8016e32:	440a      	add	r2, r1
 8016e34:	7892      	ldrb	r2, [r2, #2]
 8016e36:	709a      	strb	r2, [r3, #2]
 8016e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e3a:	00db      	lsls	r3, r3, #3
 8016e3c:	69ba      	ldr	r2, [r7, #24]
 8016e3e:	4413      	add	r3, r2
 8016e40:	6a3a      	ldr	r2, [r7, #32]
 8016e42:	0092      	lsls	r2, r2, #2
 8016e44:	69f9      	ldr	r1, [r7, #28]
 8016e46:	440a      	add	r2, r1
 8016e48:	78d2      	ldrb	r2, [r2, #3]
 8016e4a:	70da      	strb	r2, [r3, #3]
 8016e4c:	6a3b      	ldr	r3, [r7, #32]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d1cd      	bne.n	8016dee <conv_ns_16L16P_to_16L16P32N+0x112>
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d018      	beq.n	8016e8a <conv_ns_16L16P_to_16L16P32N+0x1ae>
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	881a      	ldrh	r2, [r3, #0]
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	885b      	ldrh	r3, [r3, #2]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	d112      	bne.n	8016e8a <conv_ns_16L16P_to_16L16P32N+0x1ae>
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	881a      	ldrh	r2, [r3, #0]
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	801a      	strh	r2, [r3, #0]
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	889a      	ldrh	r2, [r3, #4]
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	809a      	strh	r2, [r3, #4]
 8016e74:	683b      	ldr	r3, [r7, #0]
 8016e76:	f103 0014 	add.w	r0, r3, #20
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	f103 0114 	add.w	r1, r3, #20
 8016e80:	683b      	ldr	r3, [r7, #0]
 8016e82:	881b      	ldrh	r3, [r3, #0]
 8016e84:	461a      	mov	r2, r3
 8016e86:	f006 f8db 	bl	801d040 <memcpy>
 8016e8a:	4a26      	ldr	r2, [pc, #152]	; (8016f24 <conv_ns_16L16P_to_16L16P32N+0x248>)
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e92:	2b01      	cmp	r3, #1
 8016e94:	d132      	bne.n	8016efc <conv_ns_16L16P_to_16L16P32N+0x220>
 8016e96:	4a24      	ldr	r2, [pc, #144]	; (8016f28 <conv_ns_16L16P_to_16L16P32N+0x24c>)
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	4413      	add	r3, r2
 8016e9c:	2204      	movs	r2, #4
 8016e9e:	701a      	strb	r2, [r3, #0]
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	015b      	lsls	r3, r3, #5
 8016ea4:	4a21      	ldr	r2, [pc, #132]	; (8016f2c <conv_ns_16L16P_to_16L16P32N+0x250>)
 8016ea6:	4413      	add	r3, r2
 8016ea8:	2220      	movs	r2, #32
 8016eaa:	2100      	movs	r1, #0
 8016eac:	4618      	mov	r0, r3
 8016eae:	f006 f961 	bl	801d174 <memset>
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	015b      	lsls	r3, r3, #5
 8016eb6:	4a1d      	ldr	r2, [pc, #116]	; (8016f2c <conv_ns_16L16P_to_16L16P32N+0x250>)
 8016eb8:	4413      	add	r3, r2
 8016eba:	69f9      	ldr	r1, [r7, #28]
 8016ebc:	2204      	movs	r2, #4
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f006 f8be 	bl	801d040 <memcpy>
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	015b      	lsls	r3, r3, #5
 8016ec8:	3310      	adds	r3, #16
 8016eca:	4a18      	ldr	r2, [pc, #96]	; (8016f2c <conv_ns_16L16P_to_16L16P32N+0x250>)
 8016ecc:	4413      	add	r3, r2
 8016ece:	69b9      	ldr	r1, [r7, #24]
 8016ed0:	2208      	movs	r2, #8
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	f006 f8b4 	bl	801d040 <memcpy>
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d009      	beq.n	8016ef2 <conv_ns_16L16P_to_16L16P32N+0x216>
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	015b      	lsls	r3, r3, #5
 8016ee2:	3318      	adds	r3, #24
 8016ee4:	4a11      	ldr	r2, [pc, #68]	; (8016f2c <conv_ns_16L16P_to_16L16P32N+0x250>)
 8016ee6:	4413      	add	r3, r2
 8016ee8:	69b9      	ldr	r1, [r7, #24]
 8016eea:	2208      	movs	r2, #8
 8016eec:	4618      	mov	r0, r3
 8016eee:	f006 f8a7 	bl	801d040 <memcpy>
 8016ef2:	4a0c      	ldr	r2, [pc, #48]	; (8016f24 <conv_ns_16L16P_to_16L16P32N+0x248>)
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	2100      	movs	r1, #0
 8016ef8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	881a      	ldrh	r2, [r3, #0]
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	885b      	ldrh	r3, [r3, #2]
 8016f04:	429a      	cmp	r2, r3
 8016f06:	bf0c      	ite	eq
 8016f08:	2301      	moveq	r3, #1
 8016f0a:	2300      	movne	r3, #0
 8016f0c:	b2db      	uxtb	r3, r3
 8016f0e:	4618      	mov	r0, r3
 8016f10:	3728      	adds	r7, #40	; 0x28
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd80      	pop	{r7, pc}
 8016f16:	bf00      	nop
 8016f18:	0803ecd8 	.word	0x0803ecd8
 8016f1c:	0803ed06 	.word	0x0803ed06
 8016f20:	0803f4f9 	.word	0x0803f4f9
 8016f24:	100027ac 	.word	0x100027ac
 8016f28:	10002e88 	.word	0x10002e88
 8016f2c:	10002e48 	.word	0x10002e48

08016f30 <conv_ns_16L16N16P16N_to_16L16P32N>:
  //10 32
  SET_SLOT(1, 0, 1, 0);
  SET_SLOT(1, 1, 3, 2);
})

CONVERT_ROUTINE1(conv_ns_16L16N16P16N_to_16L16P32N, t_16L16N16P16N, t_16L16P32N,
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b08a      	sub	sp, #40	; 0x28
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	60f8      	str	r0, [r7, #12]
 8016f38:	60b9      	str	r1, [r7, #8]
 8016f3a:	607a      	str	r2, [r7, #4]
 8016f3c:	603b      	str	r3, [r7, #0]
 8016f3e:	68bb      	ldr	r3, [r7, #8]
 8016f40:	889b      	ldrh	r3, [r3, #4]
 8016f42:	3310      	adds	r3, #16
 8016f44:	68ba      	ldr	r2, [r7, #8]
 8016f46:	4413      	add	r3, r2
 8016f48:	3304      	adds	r3, #4
 8016f4a:	61fb      	str	r3, [r7, #28]
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	889b      	ldrh	r3, [r3, #4]
 8016f50:	3310      	adds	r3, #16
 8016f52:	687a      	ldr	r2, [r7, #4]
 8016f54:	4413      	add	r3, r2
 8016f56:	3304      	adds	r3, #4
 8016f58:	61bb      	str	r3, [r7, #24]
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	885b      	ldrh	r3, [r3, #2]
 8016f5e:	461a      	mov	r2, r3
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	881b      	ldrh	r3, [r3, #0]
 8016f64:	1ad3      	subs	r3, r2, r3
 8016f66:	08da      	lsrs	r2, r3, #3
 8016f68:	68bb      	ldr	r3, [r7, #8]
 8016f6a:	881b      	ldrh	r3, [r3, #0]
 8016f6c:	4619      	mov	r1, r3
 8016f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f70:	fb91 f3f3 	sdiv	r3, r1, r3
 8016f74:	08db      	lsrs	r3, r3, #3
 8016f76:	4293      	cmp	r3, r2
 8016f78:	bf28      	it	cs
 8016f7a:	4613      	movcs	r3, r2
 8016f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8016f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f82:	fb02 f303 	mul.w	r3, r2, r3
 8016f86:	623b      	str	r3, [r7, #32]
 8016f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d10a      	bne.n	8016fa4 <conv_ns_16L16N16P16N_to_16L16P32N+0x74>
 8016f8e:	68bb      	ldr	r3, [r7, #8]
 8016f90:	2200      	movs	r2, #0
 8016f92:	801a      	strh	r2, [r3, #0]
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	2200      	movs	r2, #0
 8016f98:	801a      	strh	r2, [r3, #0]
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	2200      	movs	r2, #0
 8016f9e:	809a      	strh	r2, [r3, #4]
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	e0de      	b.n	8017162 <conv_ns_16L16N16P16N_to_16L16P32N+0x232>
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	881a      	ldrh	r2, [r3, #0]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	885b      	ldrh	r3, [r3, #2]
 8016fac:	429a      	cmp	r2, r3
 8016fae:	d90c      	bls.n	8016fca <conv_ns_16L16N16P16N_to_16L16P32N+0x9a>
 8016fb0:	4b6e      	ldr	r3, [pc, #440]	; (801716c <conv_ns_16L16N16P16N_to_16L16P32N+0x23c>)
 8016fb2:	f240 52c2 	movw	r2, #1474	; 0x5c2
 8016fb6:	496e      	ldr	r1, [pc, #440]	; (8017170 <conv_ns_16L16N16P16N_to_16L16P32N+0x240>)
 8016fb8:	486e      	ldr	r0, [pc, #440]	; (8017174 <conv_ns_16L16N16P16N_to_16L16P32N+0x244>)
 8016fba:	f7f1 fe35 	bl	8008c28 <xprintf>
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	617b      	str	r3, [r7, #20]
 8016fc2:	bf00      	nop
 8016fc4:	697b      	ldr	r3, [r7, #20]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d1fc      	bne.n	8016fc4 <conv_ns_16L16N16P16N_to_16L16P32N+0x94>
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	881a      	ldrh	r2, [r3, #0]
 8016fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd0:	b29b      	uxth	r3, r3
 8016fd2:	00db      	lsls	r3, r3, #3
 8016fd4:	b29b      	uxth	r3, r3
 8016fd6:	4413      	add	r3, r2
 8016fd8:	b29a      	uxth	r2, r3
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	801a      	strh	r2, [r3, #0]
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	881a      	ldrh	r2, [r3, #0]
 8016fe2:	6a3b      	ldr	r3, [r7, #32]
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	00db      	lsls	r3, r3, #3
 8016fe8:	b29b      	uxth	r3, r3
 8016fea:	1ad3      	subs	r3, r2, r3
 8016fec:	b29a      	uxth	r2, r3
 8016fee:	68bb      	ldr	r3, [r7, #8]
 8016ff0:	801a      	strh	r2, [r3, #0]
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	889a      	ldrh	r2, [r3, #4]
 8016ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff8:	b29b      	uxth	r3, r3
 8016ffa:	00db      	lsls	r3, r3, #3
 8016ffc:	b29b      	uxth	r3, r3
 8016ffe:	4413      	add	r3, r2
 8017000:	b29a      	uxth	r2, r3
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	809a      	strh	r2, [r3, #4]
 8017006:	68bb      	ldr	r3, [r7, #8]
 8017008:	889a      	ldrh	r2, [r3, #4]
 801700a:	6a3b      	ldr	r3, [r7, #32]
 801700c:	b29b      	uxth	r3, r3
 801700e:	00db      	lsls	r3, r3, #3
 8017010:	b29b      	uxth	r3, r3
 8017012:	4413      	add	r3, r2
 8017014:	b29a      	uxth	r2, r3
 8017016:	68bb      	ldr	r3, [r7, #8]
 8017018:	809a      	strh	r2, [r3, #4]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	881a      	ldrh	r2, [r3, #0]
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	885b      	ldrh	r3, [r3, #2]
 8017022:	429a      	cmp	r2, r3
 8017024:	d93c      	bls.n	80170a0 <conv_ns_16L16N16P16N_to_16L16P32N+0x170>
 8017026:	4b51      	ldr	r3, [pc, #324]	; (801716c <conv_ns_16L16N16P16N_to_16L16P32N+0x23c>)
 8017028:	f240 52c2 	movw	r2, #1474	; 0x5c2
 801702c:	4950      	ldr	r1, [pc, #320]	; (8017170 <conv_ns_16L16N16P16N_to_16L16P32N+0x240>)
 801702e:	4851      	ldr	r0, [pc, #324]	; (8017174 <conv_ns_16L16N16P16N_to_16L16P32N+0x244>)
 8017030:	f7f1 fdfa 	bl	8008c28 <xprintf>
 8017034:	2301      	movs	r3, #1
 8017036:	613b      	str	r3, [r7, #16]
 8017038:	bf00      	nop
 801703a:	693b      	ldr	r3, [r7, #16]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d1fc      	bne.n	801703a <conv_ns_16L16N16P16N_to_16L16P32N+0x10a>
 8017040:	e02e      	b.n	80170a0 <conv_ns_16L16N16P16N_to_16L16P32N+0x170>
 8017042:	6a3a      	ldr	r2, [r7, #32]
 8017044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017046:	1ad3      	subs	r3, r2, r3
 8017048:	623b      	str	r3, [r7, #32]
 801704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801704c:	3b01      	subs	r3, #1
 801704e:	627b      	str	r3, [r7, #36]	; 0x24
 8017050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017052:	00db      	lsls	r3, r3, #3
 8017054:	69ba      	ldr	r2, [r7, #24]
 8017056:	4413      	add	r3, r2
 8017058:	6a3a      	ldr	r2, [r7, #32]
 801705a:	00d2      	lsls	r2, r2, #3
 801705c:	69f9      	ldr	r1, [r7, #28]
 801705e:	440a      	add	r2, r1
 8017060:	7812      	ldrb	r2, [r2, #0]
 8017062:	701a      	strb	r2, [r3, #0]
 8017064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017066:	00db      	lsls	r3, r3, #3
 8017068:	69ba      	ldr	r2, [r7, #24]
 801706a:	4413      	add	r3, r2
 801706c:	6a3a      	ldr	r2, [r7, #32]
 801706e:	00d2      	lsls	r2, r2, #3
 8017070:	69f9      	ldr	r1, [r7, #28]
 8017072:	440a      	add	r2, r1
 8017074:	7852      	ldrb	r2, [r2, #1]
 8017076:	705a      	strb	r2, [r3, #1]
 8017078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801707a:	00db      	lsls	r3, r3, #3
 801707c:	69ba      	ldr	r2, [r7, #24]
 801707e:	4413      	add	r3, r2
 8017080:	6a3a      	ldr	r2, [r7, #32]
 8017082:	00d2      	lsls	r2, r2, #3
 8017084:	69f9      	ldr	r1, [r7, #28]
 8017086:	440a      	add	r2, r1
 8017088:	7912      	ldrb	r2, [r2, #4]
 801708a:	709a      	strb	r2, [r3, #2]
 801708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801708e:	00db      	lsls	r3, r3, #3
 8017090:	69ba      	ldr	r2, [r7, #24]
 8017092:	4413      	add	r3, r2
 8017094:	6a3a      	ldr	r2, [r7, #32]
 8017096:	00d2      	lsls	r2, r2, #3
 8017098:	69f9      	ldr	r1, [r7, #28]
 801709a:	440a      	add	r2, r1
 801709c:	7952      	ldrb	r2, [r2, #5]
 801709e:	70da      	strb	r2, [r3, #3]
 80170a0:	6a3b      	ldr	r3, [r7, #32]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d1cd      	bne.n	8017042 <conv_ns_16L16N16P16N_to_16L16P32N+0x112>
 80170a6:	683b      	ldr	r3, [r7, #0]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d018      	beq.n	80170de <conv_ns_16L16N16P16N_to_16L16P32N+0x1ae>
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	881a      	ldrh	r2, [r3, #0]
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	885b      	ldrh	r3, [r3, #2]
 80170b4:	429a      	cmp	r2, r3
 80170b6:	d112      	bne.n	80170de <conv_ns_16L16N16P16N_to_16L16P32N+0x1ae>
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	881a      	ldrh	r2, [r3, #0]
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	801a      	strh	r2, [r3, #0]
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	889a      	ldrh	r2, [r3, #4]
 80170c4:	683b      	ldr	r3, [r7, #0]
 80170c6:	809a      	strh	r2, [r3, #4]
 80170c8:	683b      	ldr	r3, [r7, #0]
 80170ca:	f103 0014 	add.w	r0, r3, #20
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	f103 0114 	add.w	r1, r3, #20
 80170d4:	683b      	ldr	r3, [r7, #0]
 80170d6:	881b      	ldrh	r3, [r3, #0]
 80170d8:	461a      	mov	r2, r3
 80170da:	f005 ffb1 	bl	801d040 <memcpy>
 80170de:	4a26      	ldr	r2, [pc, #152]	; (8017178 <conv_ns_16L16N16P16N_to_16L16P32N+0x248>)
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80170e6:	2b01      	cmp	r3, #1
 80170e8:	d132      	bne.n	8017150 <conv_ns_16L16N16P16N_to_16L16P32N+0x220>
 80170ea:	4a24      	ldr	r2, [pc, #144]	; (801717c <conv_ns_16L16N16P16N_to_16L16P32N+0x24c>)
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	4413      	add	r3, r2
 80170f0:	2208      	movs	r2, #8
 80170f2:	701a      	strb	r2, [r3, #0]
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	015b      	lsls	r3, r3, #5
 80170f8:	4a21      	ldr	r2, [pc, #132]	; (8017180 <conv_ns_16L16N16P16N_to_16L16P32N+0x250>)
 80170fa:	4413      	add	r3, r2
 80170fc:	2220      	movs	r2, #32
 80170fe:	2100      	movs	r1, #0
 8017100:	4618      	mov	r0, r3
 8017102:	f006 f837 	bl	801d174 <memset>
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	015b      	lsls	r3, r3, #5
 801710a:	4a1d      	ldr	r2, [pc, #116]	; (8017180 <conv_ns_16L16N16P16N_to_16L16P32N+0x250>)
 801710c:	4413      	add	r3, r2
 801710e:	69f9      	ldr	r1, [r7, #28]
 8017110:	2208      	movs	r2, #8
 8017112:	4618      	mov	r0, r3
 8017114:	f005 ff94 	bl	801d040 <memcpy>
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	015b      	lsls	r3, r3, #5
 801711c:	3310      	adds	r3, #16
 801711e:	4a18      	ldr	r2, [pc, #96]	; (8017180 <conv_ns_16L16N16P16N_to_16L16P32N+0x250>)
 8017120:	4413      	add	r3, r2
 8017122:	69b9      	ldr	r1, [r7, #24]
 8017124:	2208      	movs	r2, #8
 8017126:	4618      	mov	r0, r3
 8017128:	f005 ff8a 	bl	801d040 <memcpy>
 801712c:	683b      	ldr	r3, [r7, #0]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d009      	beq.n	8017146 <conv_ns_16L16N16P16N_to_16L16P32N+0x216>
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	015b      	lsls	r3, r3, #5
 8017136:	3318      	adds	r3, #24
 8017138:	4a11      	ldr	r2, [pc, #68]	; (8017180 <conv_ns_16L16N16P16N_to_16L16P32N+0x250>)
 801713a:	4413      	add	r3, r2
 801713c:	69b9      	ldr	r1, [r7, #24]
 801713e:	2208      	movs	r2, #8
 8017140:	4618      	mov	r0, r3
 8017142:	f005 ff7d 	bl	801d040 <memcpy>
 8017146:	4a0c      	ldr	r2, [pc, #48]	; (8017178 <conv_ns_16L16N16P16N_to_16L16P32N+0x248>)
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	2100      	movs	r1, #0
 801714c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	881a      	ldrh	r2, [r3, #0]
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	885b      	ldrh	r3, [r3, #2]
 8017158:	429a      	cmp	r2, r3
 801715a:	bf0c      	ite	eq
 801715c:	2301      	moveq	r3, #1
 801715e:	2300      	movne	r3, #0
 8017160:	b2db      	uxtb	r3, r3
 8017162:	4618      	mov	r0, r3
 8017164:	3728      	adds	r7, #40	; 0x28
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}
 801716a:	bf00      	nop
 801716c:	0803ecd8 	.word	0x0803ecd8
 8017170:	0803ed22 	.word	0x0803ed22
 8017174:	0803f4f9 	.word	0x0803f4f9
 8017178:	100027ac 	.word	0x100027ac
 801717c:	10002e88 	.word	0x10002e88
 8017180:	10002e48 	.word	0x10002e48

08017184 <conv_ds_16L16P_to_16L16L32N_16P16P32N>:
  //10 54
  SET_SLOT(1, 0, 1, 0);
  SET_SLOT(1, 1, 5, 4);
})

CONVERT_ROUTINE2(conv_ds_16L16P_to_16L16L32N_16P16P32N, t_16L16P, t_16L16L32N,
 8017184:	b580      	push	{r7, lr}
 8017186:	b08c      	sub	sp, #48	; 0x30
 8017188:	af00      	add	r7, sp, #0
 801718a:	60f8      	str	r0, [r7, #12]
 801718c:	60b9      	str	r1, [r7, #8]
 801718e:	607a      	str	r2, [r7, #4]
 8017190:	603b      	str	r3, [r7, #0]
 8017192:	68bb      	ldr	r3, [r7, #8]
 8017194:	889b      	ldrh	r3, [r3, #4]
 8017196:	3310      	adds	r3, #16
 8017198:	68ba      	ldr	r2, [r7, #8]
 801719a:	4413      	add	r3, r2
 801719c:	3304      	adds	r3, #4
 801719e:	627b      	str	r3, [r7, #36]	; 0x24
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	889b      	ldrh	r3, [r3, #4]
 80171a4:	3310      	adds	r3, #16
 80171a6:	687a      	ldr	r2, [r7, #4]
 80171a8:	4413      	add	r3, r2
 80171aa:	3304      	adds	r3, #4
 80171ac:	623b      	str	r3, [r7, #32]
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	889b      	ldrh	r3, [r3, #4]
 80171b2:	3310      	adds	r3, #16
 80171b4:	683a      	ldr	r2, [r7, #0]
 80171b6:	4413      	add	r3, r2
 80171b8:	3304      	adds	r3, #4
 80171ba:	61fb      	str	r3, [r7, #28]
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	885b      	ldrh	r3, [r3, #2]
 80171c0:	461a      	mov	r2, r3
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	881b      	ldrh	r3, [r3, #0]
 80171c6:	1ad3      	subs	r3, r2, r3
 80171c8:	08da      	lsrs	r2, r3, #3
 80171ca:	68bb      	ldr	r3, [r7, #8]
 80171cc:	881b      	ldrh	r3, [r3, #0]
 80171ce:	4619      	mov	r1, r3
 80171d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d2:	005b      	lsls	r3, r3, #1
 80171d4:	fb91 f3f3 	sdiv	r3, r1, r3
 80171d8:	089b      	lsrs	r3, r3, #2
 80171da:	4293      	cmp	r3, r2
 80171dc:	bf28      	it	cs
 80171de:	4613      	movcs	r3, r2
 80171e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171e4:	005b      	lsls	r3, r3, #1
 80171e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80171e8:	fb02 f303 	mul.w	r3, r2, r3
 80171ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80171ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d110      	bne.n	8017216 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x92>
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	2200      	movs	r2, #0
 80171f8:	801a      	strh	r2, [r3, #0]
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	2200      	movs	r2, #0
 80171fe:	801a      	strh	r2, [r3, #0]
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2200      	movs	r2, #0
 8017204:	809a      	strh	r2, [r3, #4]
 8017206:	683b      	ldr	r3, [r7, #0]
 8017208:	2200      	movs	r2, #0
 801720a:	801a      	strh	r2, [r3, #0]
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	2200      	movs	r2, #0
 8017210:	809a      	strh	r2, [r3, #4]
 8017212:	2300      	movs	r3, #0
 8017214:	e104      	b.n	8017420 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x29c>
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	881a      	ldrh	r2, [r3, #0]
 801721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721c:	b29b      	uxth	r3, r3
 801721e:	00db      	lsls	r3, r3, #3
 8017220:	b29b      	uxth	r3, r3
 8017222:	4413      	add	r3, r2
 8017224:	b29a      	uxth	r2, r3
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	801a      	strh	r2, [r3, #0]
 801722a:	683b      	ldr	r3, [r7, #0]
 801722c:	881a      	ldrh	r2, [r3, #0]
 801722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017230:	b29b      	uxth	r3, r3
 8017232:	00db      	lsls	r3, r3, #3
 8017234:	b29b      	uxth	r3, r3
 8017236:	4413      	add	r3, r2
 8017238:	b29a      	uxth	r2, r3
 801723a:	683b      	ldr	r3, [r7, #0]
 801723c:	801a      	strh	r2, [r3, #0]
 801723e:	68bb      	ldr	r3, [r7, #8]
 8017240:	881a      	ldrh	r2, [r3, #0]
 8017242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017244:	b29b      	uxth	r3, r3
 8017246:	009b      	lsls	r3, r3, #2
 8017248:	b29b      	uxth	r3, r3
 801724a:	1ad3      	subs	r3, r2, r3
 801724c:	b29a      	uxth	r2, r3
 801724e:	68bb      	ldr	r3, [r7, #8]
 8017250:	801a      	strh	r2, [r3, #0]
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	889a      	ldrh	r2, [r3, #4]
 8017256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017258:	b29b      	uxth	r3, r3
 801725a:	00db      	lsls	r3, r3, #3
 801725c:	b29b      	uxth	r3, r3
 801725e:	4413      	add	r3, r2
 8017260:	b29a      	uxth	r2, r3
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	809a      	strh	r2, [r3, #4]
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	889a      	ldrh	r2, [r3, #4]
 801726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726c:	b29b      	uxth	r3, r3
 801726e:	00db      	lsls	r3, r3, #3
 8017270:	b29b      	uxth	r3, r3
 8017272:	4413      	add	r3, r2
 8017274:	b29a      	uxth	r2, r3
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	809a      	strh	r2, [r3, #4]
 801727a:	68bb      	ldr	r3, [r7, #8]
 801727c:	889a      	ldrh	r2, [r3, #4]
 801727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017280:	b29b      	uxth	r3, r3
 8017282:	009b      	lsls	r3, r3, #2
 8017284:	b29b      	uxth	r3, r3
 8017286:	4413      	add	r3, r2
 8017288:	b29a      	uxth	r2, r3
 801728a:	68bb      	ldr	r3, [r7, #8]
 801728c:	809a      	strh	r2, [r3, #4]
 801728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017290:	2b00      	cmp	r3, #0
 8017292:	d10c      	bne.n	80172ae <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x12a>
 8017294:	4b64      	ldr	r3, [pc, #400]	; (8017428 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2a4>)
 8017296:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801729a:	4964      	ldr	r1, [pc, #400]	; (801742c <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2a8>)
 801729c:	4864      	ldr	r0, [pc, #400]	; (8017430 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2ac>)
 801729e:	f7f1 fcc3 	bl	8008c28 <xprintf>
 80172a2:	2301      	movs	r3, #1
 80172a4:	61bb      	str	r3, [r7, #24]
 80172a6:	bf00      	nop
 80172a8:	69bb      	ldr	r3, [r7, #24]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d1fc      	bne.n	80172a8 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x124>
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	881a      	ldrh	r2, [r3, #0]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	885b      	ldrh	r3, [r3, #2]
 80172b6:	429a      	cmp	r2, r3
 80172b8:	d965      	bls.n	8017386 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x202>
 80172ba:	4b5e      	ldr	r3, [pc, #376]	; (8017434 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2b0>)
 80172bc:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80172c0:	495a      	ldr	r1, [pc, #360]	; (801742c <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2a8>)
 80172c2:	485b      	ldr	r0, [pc, #364]	; (8017430 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2ac>)
 80172c4:	f7f1 fcb0 	bl	8008c28 <xprintf>
 80172c8:	2301      	movs	r3, #1
 80172ca:	617b      	str	r3, [r7, #20]
 80172cc:	bf00      	nop
 80172ce:	697b      	ldr	r3, [r7, #20]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d1fc      	bne.n	80172ce <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x14a>
 80172d4:	e057      	b.n	8017386 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x202>
 80172d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172d8:	005b      	lsls	r3, r3, #1
 80172da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172dc:	1ad3      	subs	r3, r2, r3
 80172de:	62bb      	str	r3, [r7, #40]	; 0x28
 80172e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e2:	3b01      	subs	r3, #1
 80172e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e8:	00db      	lsls	r3, r3, #3
 80172ea:	6a3a      	ldr	r2, [r7, #32]
 80172ec:	4413      	add	r3, r2
 80172ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172f0:	0092      	lsls	r2, r2, #2
 80172f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80172f4:	440a      	add	r2, r1
 80172f6:	7812      	ldrb	r2, [r2, #0]
 80172f8:	701a      	strb	r2, [r3, #0]
 80172fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172fc:	00db      	lsls	r3, r3, #3
 80172fe:	6a3a      	ldr	r2, [r7, #32]
 8017300:	4413      	add	r3, r2
 8017302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017304:	0092      	lsls	r2, r2, #2
 8017306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017308:	440a      	add	r2, r1
 801730a:	7852      	ldrb	r2, [r2, #1]
 801730c:	705a      	strb	r2, [r3, #1]
 801730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017310:	00db      	lsls	r3, r3, #3
 8017312:	6a3a      	ldr	r2, [r7, #32]
 8017314:	4413      	add	r3, r2
 8017316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017318:	0092      	lsls	r2, r2, #2
 801731a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801731c:	440a      	add	r2, r1
 801731e:	7912      	ldrb	r2, [r2, #4]
 8017320:	709a      	strb	r2, [r3, #2]
 8017322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017324:	00db      	lsls	r3, r3, #3
 8017326:	6a3a      	ldr	r2, [r7, #32]
 8017328:	4413      	add	r3, r2
 801732a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801732c:	0092      	lsls	r2, r2, #2
 801732e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017330:	440a      	add	r2, r1
 8017332:	7952      	ldrb	r2, [r2, #5]
 8017334:	70da      	strb	r2, [r3, #3]
 8017336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017338:	00db      	lsls	r3, r3, #3
 801733a:	69fa      	ldr	r2, [r7, #28]
 801733c:	4413      	add	r3, r2
 801733e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017340:	0092      	lsls	r2, r2, #2
 8017342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017344:	440a      	add	r2, r1
 8017346:	7892      	ldrb	r2, [r2, #2]
 8017348:	701a      	strb	r2, [r3, #0]
 801734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801734c:	00db      	lsls	r3, r3, #3
 801734e:	69fa      	ldr	r2, [r7, #28]
 8017350:	4413      	add	r3, r2
 8017352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017354:	0092      	lsls	r2, r2, #2
 8017356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017358:	440a      	add	r2, r1
 801735a:	78d2      	ldrb	r2, [r2, #3]
 801735c:	705a      	strb	r2, [r3, #1]
 801735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017360:	00db      	lsls	r3, r3, #3
 8017362:	69fa      	ldr	r2, [r7, #28]
 8017364:	4413      	add	r3, r2
 8017366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017368:	0092      	lsls	r2, r2, #2
 801736a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801736c:	440a      	add	r2, r1
 801736e:	7992      	ldrb	r2, [r2, #6]
 8017370:	709a      	strb	r2, [r3, #2]
 8017372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017374:	00db      	lsls	r3, r3, #3
 8017376:	69fa      	ldr	r2, [r7, #28]
 8017378:	4413      	add	r3, r2
 801737a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801737c:	0092      	lsls	r2, r2, #2
 801737e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017380:	440a      	add	r2, r1
 8017382:	79d2      	ldrb	r2, [r2, #7]
 8017384:	70da      	strb	r2, [r3, #3]
 8017386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017388:	2b00      	cmp	r3, #0
 801738a:	d1a4      	bne.n	80172d6 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x152>
 801738c:	4a2a      	ldr	r2, [pc, #168]	; (8017438 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2b4>)
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017394:	2b01      	cmp	r3, #1
 8017396:	d13a      	bne.n	801740e <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x28a>
 8017398:	4a28      	ldr	r2, [pc, #160]	; (801743c <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2b8>)
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	4413      	add	r3, r2
 801739e:	2204      	movs	r2, #4
 80173a0:	701a      	strb	r2, [r3, #0]
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	015b      	lsls	r3, r3, #5
 80173a6:	4a26      	ldr	r2, [pc, #152]	; (8017440 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2bc>)
 80173a8:	4413      	add	r3, r2
 80173aa:	2220      	movs	r2, #32
 80173ac:	2100      	movs	r1, #0
 80173ae:	4618      	mov	r0, r3
 80173b0:	f005 fee0 	bl	801d174 <memset>
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	015b      	lsls	r3, r3, #5
 80173b8:	4a21      	ldr	r2, [pc, #132]	; (8017440 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2bc>)
 80173ba:	4413      	add	r3, r2
 80173bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80173be:	2204      	movs	r2, #4
 80173c0:	4618      	mov	r0, r3
 80173c2:	f005 fe3d 	bl	801d040 <memcpy>
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	015b      	lsls	r3, r3, #5
 80173ca:	3308      	adds	r3, #8
 80173cc:	4a1c      	ldr	r2, [pc, #112]	; (8017440 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2bc>)
 80173ce:	1898      	adds	r0, r3, r2
 80173d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d2:	3304      	adds	r3, #4
 80173d4:	2204      	movs	r2, #4
 80173d6:	4619      	mov	r1, r3
 80173d8:	f005 fe32 	bl	801d040 <memcpy>
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	015b      	lsls	r3, r3, #5
 80173e0:	3310      	adds	r3, #16
 80173e2:	4a17      	ldr	r2, [pc, #92]	; (8017440 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2bc>)
 80173e4:	4413      	add	r3, r2
 80173e6:	6a39      	ldr	r1, [r7, #32]
 80173e8:	2208      	movs	r2, #8
 80173ea:	4618      	mov	r0, r3
 80173ec:	f005 fe28 	bl	801d040 <memcpy>
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	015b      	lsls	r3, r3, #5
 80173f4:	3318      	adds	r3, #24
 80173f6:	4a12      	ldr	r2, [pc, #72]	; (8017440 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2bc>)
 80173f8:	4413      	add	r3, r2
 80173fa:	69f9      	ldr	r1, [r7, #28]
 80173fc:	2208      	movs	r2, #8
 80173fe:	4618      	mov	r0, r3
 8017400:	f005 fe1e 	bl	801d040 <memcpy>
 8017404:	4a0c      	ldr	r2, [pc, #48]	; (8017438 <conv_ds_16L16P_to_16L16L32N_16P16P32N+0x2b4>)
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	2100      	movs	r1, #0
 801740a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	881a      	ldrh	r2, [r3, #0]
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	885b      	ldrh	r3, [r3, #2]
 8017416:	429a      	cmp	r2, r3
 8017418:	bf0c      	ite	eq
 801741a:	2301      	moveq	r3, #1
 801741c:	2300      	movne	r3, #0
 801741e:	b2db      	uxtb	r3, r3
 8017420:	4618      	mov	r0, r3
 8017422:	3730      	adds	r7, #48	; 0x30
 8017424:	46bd      	mov	sp, r7
 8017426:	bd80      	pop	{r7, pc}
 8017428:	0803ed00 	.word	0x0803ed00
 801742c:	0803ed44 	.word	0x0803ed44
 8017430:	0803f4f9 	.word	0x0803f4f9
 8017434:	0803ecd8 	.word	0x0803ecd8
 8017438:	100027ac 	.word	0x100027ac
 801743c:	10002e88 	.word	0x10002e88
 8017440:	10002e48 	.word	0x10002e48

08017444 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N>:
  SET_SLOT(1, 0, 1, 0);
  SET_SLOT(1, 1, 5, 4);
  SET_SLOT(2, 0, 3, 2);
  SET_SLOT(2, 1, 7, 6);
})
CONVERT_ROUTINE2(conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N, t_16L16N16P16N, t_16L16L32N,
 8017444:	b580      	push	{r7, lr}
 8017446:	b08c      	sub	sp, #48	; 0x30
 8017448:	af00      	add	r7, sp, #0
 801744a:	60f8      	str	r0, [r7, #12]
 801744c:	60b9      	str	r1, [r7, #8]
 801744e:	607a      	str	r2, [r7, #4]
 8017450:	603b      	str	r3, [r7, #0]
 8017452:	68bb      	ldr	r3, [r7, #8]
 8017454:	889b      	ldrh	r3, [r3, #4]
 8017456:	3310      	adds	r3, #16
 8017458:	68ba      	ldr	r2, [r7, #8]
 801745a:	4413      	add	r3, r2
 801745c:	3304      	adds	r3, #4
 801745e:	627b      	str	r3, [r7, #36]	; 0x24
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	889b      	ldrh	r3, [r3, #4]
 8017464:	3310      	adds	r3, #16
 8017466:	687a      	ldr	r2, [r7, #4]
 8017468:	4413      	add	r3, r2
 801746a:	3304      	adds	r3, #4
 801746c:	623b      	str	r3, [r7, #32]
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	889b      	ldrh	r3, [r3, #4]
 8017472:	3310      	adds	r3, #16
 8017474:	683a      	ldr	r2, [r7, #0]
 8017476:	4413      	add	r3, r2
 8017478:	3304      	adds	r3, #4
 801747a:	61fb      	str	r3, [r7, #28]
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	885b      	ldrh	r3, [r3, #2]
 8017480:	461a      	mov	r2, r3
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	881b      	ldrh	r3, [r3, #0]
 8017486:	1ad3      	subs	r3, r2, r3
 8017488:	08da      	lsrs	r2, r3, #3
 801748a:	68bb      	ldr	r3, [r7, #8]
 801748c:	881b      	ldrh	r3, [r3, #0]
 801748e:	4619      	mov	r1, r3
 8017490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017492:	005b      	lsls	r3, r3, #1
 8017494:	fb91 f3f3 	sdiv	r3, r1, r3
 8017498:	08db      	lsrs	r3, r3, #3
 801749a:	4293      	cmp	r3, r2
 801749c:	bf28      	it	cs
 801749e:	4613      	movcs	r3, r2
 80174a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80174a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174a4:	005b      	lsls	r3, r3, #1
 80174a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174a8:	fb02 f303 	mul.w	r3, r2, r3
 80174ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80174ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d110      	bne.n	80174d6 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x92>
 80174b4:	68bb      	ldr	r3, [r7, #8]
 80174b6:	2200      	movs	r2, #0
 80174b8:	801a      	strh	r2, [r3, #0]
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	2200      	movs	r2, #0
 80174be:	801a      	strh	r2, [r3, #0]
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	2200      	movs	r2, #0
 80174c4:	809a      	strh	r2, [r3, #4]
 80174c6:	683b      	ldr	r3, [r7, #0]
 80174c8:	2200      	movs	r2, #0
 80174ca:	801a      	strh	r2, [r3, #0]
 80174cc:	683b      	ldr	r3, [r7, #0]
 80174ce:	2200      	movs	r2, #0
 80174d0:	809a      	strh	r2, [r3, #4]
 80174d2:	2300      	movs	r3, #0
 80174d4:	e104      	b.n	80176e0 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x29c>
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	881a      	ldrh	r2, [r3, #0]
 80174da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174dc:	b29b      	uxth	r3, r3
 80174de:	00db      	lsls	r3, r3, #3
 80174e0:	b29b      	uxth	r3, r3
 80174e2:	4413      	add	r3, r2
 80174e4:	b29a      	uxth	r2, r3
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	801a      	strh	r2, [r3, #0]
 80174ea:	683b      	ldr	r3, [r7, #0]
 80174ec:	881a      	ldrh	r2, [r3, #0]
 80174ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f0:	b29b      	uxth	r3, r3
 80174f2:	00db      	lsls	r3, r3, #3
 80174f4:	b29b      	uxth	r3, r3
 80174f6:	4413      	add	r3, r2
 80174f8:	b29a      	uxth	r2, r3
 80174fa:	683b      	ldr	r3, [r7, #0]
 80174fc:	801a      	strh	r2, [r3, #0]
 80174fe:	68bb      	ldr	r3, [r7, #8]
 8017500:	881a      	ldrh	r2, [r3, #0]
 8017502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017504:	b29b      	uxth	r3, r3
 8017506:	00db      	lsls	r3, r3, #3
 8017508:	b29b      	uxth	r3, r3
 801750a:	1ad3      	subs	r3, r2, r3
 801750c:	b29a      	uxth	r2, r3
 801750e:	68bb      	ldr	r3, [r7, #8]
 8017510:	801a      	strh	r2, [r3, #0]
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	889a      	ldrh	r2, [r3, #4]
 8017516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017518:	b29b      	uxth	r3, r3
 801751a:	00db      	lsls	r3, r3, #3
 801751c:	b29b      	uxth	r3, r3
 801751e:	4413      	add	r3, r2
 8017520:	b29a      	uxth	r2, r3
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	809a      	strh	r2, [r3, #4]
 8017526:	683b      	ldr	r3, [r7, #0]
 8017528:	889a      	ldrh	r2, [r3, #4]
 801752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752c:	b29b      	uxth	r3, r3
 801752e:	00db      	lsls	r3, r3, #3
 8017530:	b29b      	uxth	r3, r3
 8017532:	4413      	add	r3, r2
 8017534:	b29a      	uxth	r2, r3
 8017536:	683b      	ldr	r3, [r7, #0]
 8017538:	809a      	strh	r2, [r3, #4]
 801753a:	68bb      	ldr	r3, [r7, #8]
 801753c:	889a      	ldrh	r2, [r3, #4]
 801753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017540:	b29b      	uxth	r3, r3
 8017542:	00db      	lsls	r3, r3, #3
 8017544:	b29b      	uxth	r3, r3
 8017546:	4413      	add	r3, r2
 8017548:	b29a      	uxth	r2, r3
 801754a:	68bb      	ldr	r3, [r7, #8]
 801754c:	809a      	strh	r2, [r3, #4]
 801754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017550:	2b00      	cmp	r3, #0
 8017552:	d10c      	bne.n	801756e <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x12a>
 8017554:	4b64      	ldr	r3, [pc, #400]	; (80176e8 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2a4>)
 8017556:	f240 52d3 	movw	r2, #1491	; 0x5d3
 801755a:	4964      	ldr	r1, [pc, #400]	; (80176ec <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2a8>)
 801755c:	4864      	ldr	r0, [pc, #400]	; (80176f0 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2ac>)
 801755e:	f7f1 fb63 	bl	8008c28 <xprintf>
 8017562:	2301      	movs	r3, #1
 8017564:	61bb      	str	r3, [r7, #24]
 8017566:	bf00      	nop
 8017568:	69bb      	ldr	r3, [r7, #24]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d1fc      	bne.n	8017568 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x124>
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	881a      	ldrh	r2, [r3, #0]
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	885b      	ldrh	r3, [r3, #2]
 8017576:	429a      	cmp	r2, r3
 8017578:	d965      	bls.n	8017646 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x202>
 801757a:	4b5e      	ldr	r3, [pc, #376]	; (80176f4 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2b0>)
 801757c:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8017580:	495a      	ldr	r1, [pc, #360]	; (80176ec <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2a8>)
 8017582:	485b      	ldr	r0, [pc, #364]	; (80176f0 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2ac>)
 8017584:	f7f1 fb50 	bl	8008c28 <xprintf>
 8017588:	2301      	movs	r3, #1
 801758a:	617b      	str	r3, [r7, #20]
 801758c:	bf00      	nop
 801758e:	697b      	ldr	r3, [r7, #20]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d1fc      	bne.n	801758e <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x14a>
 8017594:	e057      	b.n	8017646 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x202>
 8017596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017598:	005b      	lsls	r3, r3, #1
 801759a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801759c:	1ad3      	subs	r3, r2, r3
 801759e:	62bb      	str	r3, [r7, #40]	; 0x28
 80175a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a2:	3b01      	subs	r3, #1
 80175a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a8:	00db      	lsls	r3, r3, #3
 80175aa:	6a3a      	ldr	r2, [r7, #32]
 80175ac:	4413      	add	r3, r2
 80175ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175b0:	00d2      	lsls	r2, r2, #3
 80175b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175b4:	440a      	add	r2, r1
 80175b6:	7812      	ldrb	r2, [r2, #0]
 80175b8:	701a      	strb	r2, [r3, #0]
 80175ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175bc:	00db      	lsls	r3, r3, #3
 80175be:	6a3a      	ldr	r2, [r7, #32]
 80175c0:	4413      	add	r3, r2
 80175c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175c4:	00d2      	lsls	r2, r2, #3
 80175c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175c8:	440a      	add	r2, r1
 80175ca:	7852      	ldrb	r2, [r2, #1]
 80175cc:	705a      	strb	r2, [r3, #1]
 80175ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d0:	00db      	lsls	r3, r3, #3
 80175d2:	6a3a      	ldr	r2, [r7, #32]
 80175d4:	4413      	add	r3, r2
 80175d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175d8:	00d2      	lsls	r2, r2, #3
 80175da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175dc:	440a      	add	r2, r1
 80175de:	7a12      	ldrb	r2, [r2, #8]
 80175e0:	709a      	strb	r2, [r3, #2]
 80175e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e4:	00db      	lsls	r3, r3, #3
 80175e6:	6a3a      	ldr	r2, [r7, #32]
 80175e8:	4413      	add	r3, r2
 80175ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175ec:	00d2      	lsls	r2, r2, #3
 80175ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175f0:	440a      	add	r2, r1
 80175f2:	7a52      	ldrb	r2, [r2, #9]
 80175f4:	70da      	strb	r2, [r3, #3]
 80175f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175f8:	00db      	lsls	r3, r3, #3
 80175fa:	69fa      	ldr	r2, [r7, #28]
 80175fc:	4413      	add	r3, r2
 80175fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017600:	00d2      	lsls	r2, r2, #3
 8017602:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017604:	440a      	add	r2, r1
 8017606:	7912      	ldrb	r2, [r2, #4]
 8017608:	701a      	strb	r2, [r3, #0]
 801760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801760c:	00db      	lsls	r3, r3, #3
 801760e:	69fa      	ldr	r2, [r7, #28]
 8017610:	4413      	add	r3, r2
 8017612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017614:	00d2      	lsls	r2, r2, #3
 8017616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017618:	440a      	add	r2, r1
 801761a:	7952      	ldrb	r2, [r2, #5]
 801761c:	705a      	strb	r2, [r3, #1]
 801761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017620:	00db      	lsls	r3, r3, #3
 8017622:	69fa      	ldr	r2, [r7, #28]
 8017624:	4413      	add	r3, r2
 8017626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017628:	00d2      	lsls	r2, r2, #3
 801762a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801762c:	440a      	add	r2, r1
 801762e:	7b12      	ldrb	r2, [r2, #12]
 8017630:	709a      	strb	r2, [r3, #2]
 8017632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017634:	00db      	lsls	r3, r3, #3
 8017636:	69fa      	ldr	r2, [r7, #28]
 8017638:	4413      	add	r3, r2
 801763a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801763c:	00d2      	lsls	r2, r2, #3
 801763e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017640:	440a      	add	r2, r1
 8017642:	7b52      	ldrb	r2, [r2, #13]
 8017644:	70da      	strb	r2, [r3, #3]
 8017646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017648:	2b00      	cmp	r3, #0
 801764a:	d1a4      	bne.n	8017596 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x152>
 801764c:	4a2a      	ldr	r2, [pc, #168]	; (80176f8 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2b4>)
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017654:	2b01      	cmp	r3, #1
 8017656:	d13a      	bne.n	80176ce <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x28a>
 8017658:	4a28      	ldr	r2, [pc, #160]	; (80176fc <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2b8>)
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	4413      	add	r3, r2
 801765e:	2208      	movs	r2, #8
 8017660:	701a      	strb	r2, [r3, #0]
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	015b      	lsls	r3, r3, #5
 8017666:	4a26      	ldr	r2, [pc, #152]	; (8017700 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2bc>)
 8017668:	4413      	add	r3, r2
 801766a:	2220      	movs	r2, #32
 801766c:	2100      	movs	r1, #0
 801766e:	4618      	mov	r0, r3
 8017670:	f005 fd80 	bl	801d174 <memset>
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	015b      	lsls	r3, r3, #5
 8017678:	4a21      	ldr	r2, [pc, #132]	; (8017700 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2bc>)
 801767a:	4413      	add	r3, r2
 801767c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801767e:	2208      	movs	r2, #8
 8017680:	4618      	mov	r0, r3
 8017682:	f005 fcdd 	bl	801d040 <memcpy>
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	015b      	lsls	r3, r3, #5
 801768a:	3308      	adds	r3, #8
 801768c:	4a1c      	ldr	r2, [pc, #112]	; (8017700 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2bc>)
 801768e:	1898      	adds	r0, r3, r2
 8017690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017692:	3308      	adds	r3, #8
 8017694:	2208      	movs	r2, #8
 8017696:	4619      	mov	r1, r3
 8017698:	f005 fcd2 	bl	801d040 <memcpy>
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	015b      	lsls	r3, r3, #5
 80176a0:	3310      	adds	r3, #16
 80176a2:	4a17      	ldr	r2, [pc, #92]	; (8017700 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2bc>)
 80176a4:	4413      	add	r3, r2
 80176a6:	6a39      	ldr	r1, [r7, #32]
 80176a8:	2208      	movs	r2, #8
 80176aa:	4618      	mov	r0, r3
 80176ac:	f005 fcc8 	bl	801d040 <memcpy>
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	015b      	lsls	r3, r3, #5
 80176b4:	3318      	adds	r3, #24
 80176b6:	4a12      	ldr	r2, [pc, #72]	; (8017700 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2bc>)
 80176b8:	4413      	add	r3, r2
 80176ba:	69f9      	ldr	r1, [r7, #28]
 80176bc:	2208      	movs	r2, #8
 80176be:	4618      	mov	r0, r3
 80176c0:	f005 fcbe 	bl	801d040 <memcpy>
 80176c4:	4a0c      	ldr	r2, [pc, #48]	; (80176f8 <conv_ds_16L16N16P16N_to_16L16L32N_16P16P32N+0x2b4>)
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	2100      	movs	r1, #0
 80176ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	881a      	ldrh	r2, [r3, #0]
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	885b      	ldrh	r3, [r3, #2]
 80176d6:	429a      	cmp	r2, r3
 80176d8:	bf0c      	ite	eq
 80176da:	2301      	moveq	r3, #1
 80176dc:	2300      	movne	r3, #0
 80176de:	b2db      	uxtb	r3, r3
 80176e0:	4618      	mov	r0, r3
 80176e2:	3730      	adds	r7, #48	; 0x30
 80176e4:	46bd      	mov	sp, r7
 80176e6:	bd80      	pop	{r7, pc}
 80176e8:	0803ed00 	.word	0x0803ed00
 80176ec:	0803ed6a 	.word	0x0803ed6a
 80176f0:	0803f4f9 	.word	0x0803f4f9
 80176f4:	0803ecd8 	.word	0x0803ecd8
 80176f8:	100027ac 	.word	0x100027ac
 80176fc:	10002e88 	.word	0x10002e88
 8017700:	10002e48 	.word	0x10002e48

08017704 <conv_ns_24L24P_to_16L16P32N>:
  SET_SLOT(2, 0, 5, 4);
  SET_SLOT(2, 1, 13, 12);
})

//Tryb multislave radiowy 24 bit
CONVERT_ROUTINE1(conv_ns_24L24P_to_16L16P32N, t_24L24P, t_16L16P32N,
 8017704:	b580      	push	{r7, lr}
 8017706:	b08a      	sub	sp, #40	; 0x28
 8017708:	af00      	add	r7, sp, #0
 801770a:	60f8      	str	r0, [r7, #12]
 801770c:	60b9      	str	r1, [r7, #8]
 801770e:	607a      	str	r2, [r7, #4]
 8017710:	603b      	str	r3, [r7, #0]
 8017712:	68bb      	ldr	r3, [r7, #8]
 8017714:	889b      	ldrh	r3, [r3, #4]
 8017716:	3310      	adds	r3, #16
 8017718:	68ba      	ldr	r2, [r7, #8]
 801771a:	4413      	add	r3, r2
 801771c:	3304      	adds	r3, #4
 801771e:	61fb      	str	r3, [r7, #28]
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	889b      	ldrh	r3, [r3, #4]
 8017724:	3310      	adds	r3, #16
 8017726:	687a      	ldr	r2, [r7, #4]
 8017728:	4413      	add	r3, r2
 801772a:	3304      	adds	r3, #4
 801772c:	61bb      	str	r3, [r7, #24]
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	885b      	ldrh	r3, [r3, #2]
 8017732:	461a      	mov	r2, r3
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	881b      	ldrh	r3, [r3, #0]
 8017738:	1ad3      	subs	r3, r2, r3
 801773a:	08da      	lsrs	r2, r3, #3
 801773c:	68bb      	ldr	r3, [r7, #8]
 801773e:	881b      	ldrh	r3, [r3, #0]
 8017740:	4619      	mov	r1, r3
 8017742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017744:	fb91 f3f3 	sdiv	r3, r1, r3
 8017748:	4619      	mov	r1, r3
 801774a:	4b8a      	ldr	r3, [pc, #552]	; (8017974 <conv_ns_24L24P_to_16L16P32N+0x270>)
 801774c:	fba3 1301 	umull	r1, r3, r3, r1
 8017750:	089b      	lsrs	r3, r3, #2
 8017752:	4293      	cmp	r3, r2
 8017754:	bf28      	it	cs
 8017756:	4613      	movcs	r3, r2
 8017758:	627b      	str	r3, [r7, #36]	; 0x24
 801775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801775c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801775e:	fb02 f303 	mul.w	r3, r2, r3
 8017762:	623b      	str	r3, [r7, #32]
 8017764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017766:	2b00      	cmp	r3, #0
 8017768:	d10a      	bne.n	8017780 <conv_ns_24L24P_to_16L16P32N+0x7c>
 801776a:	68bb      	ldr	r3, [r7, #8]
 801776c:	2200      	movs	r2, #0
 801776e:	801a      	strh	r2, [r3, #0]
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	2200      	movs	r2, #0
 8017774:	801a      	strh	r2, [r3, #0]
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	2200      	movs	r2, #0
 801777a:	809a      	strh	r2, [r3, #4]
 801777c:	2300      	movs	r3, #0
 801777e:	e0f4      	b.n	801796a <conv_ns_24L24P_to_16L16P32N+0x266>
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	881a      	ldrh	r2, [r3, #0]
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	885b      	ldrh	r3, [r3, #2]
 8017788:	429a      	cmp	r2, r3
 801778a:	d90c      	bls.n	80177a6 <conv_ns_24L24P_to_16L16P32N+0xa2>
 801778c:	4b7a      	ldr	r3, [pc, #488]	; (8017978 <conv_ns_24L24P_to_16L16P32N+0x274>)
 801778e:	f240 52db 	movw	r2, #1499	; 0x5db
 8017792:	497a      	ldr	r1, [pc, #488]	; (801797c <conv_ns_24L24P_to_16L16P32N+0x278>)
 8017794:	487a      	ldr	r0, [pc, #488]	; (8017980 <conv_ns_24L24P_to_16L16P32N+0x27c>)
 8017796:	f7f1 fa47 	bl	8008c28 <xprintf>
 801779a:	2301      	movs	r3, #1
 801779c:	617b      	str	r3, [r7, #20]
 801779e:	bf00      	nop
 80177a0:	697b      	ldr	r3, [r7, #20]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d1fc      	bne.n	80177a0 <conv_ns_24L24P_to_16L16P32N+0x9c>
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	881a      	ldrh	r2, [r3, #0]
 80177aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ac:	b29b      	uxth	r3, r3
 80177ae:	00db      	lsls	r3, r3, #3
 80177b0:	b29b      	uxth	r3, r3
 80177b2:	4413      	add	r3, r2
 80177b4:	b29a      	uxth	r2, r3
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	801a      	strh	r2, [r3, #0]
 80177ba:	68bb      	ldr	r3, [r7, #8]
 80177bc:	881a      	ldrh	r2, [r3, #0]
 80177be:	6a3b      	ldr	r3, [r7, #32]
 80177c0:	b29b      	uxth	r3, r3
 80177c2:	4619      	mov	r1, r3
 80177c4:	0049      	lsls	r1, r1, #1
 80177c6:	440b      	add	r3, r1
 80177c8:	005b      	lsls	r3, r3, #1
 80177ca:	b29b      	uxth	r3, r3
 80177cc:	1ad3      	subs	r3, r2, r3
 80177ce:	b29a      	uxth	r2, r3
 80177d0:	68bb      	ldr	r3, [r7, #8]
 80177d2:	801a      	strh	r2, [r3, #0]
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	889a      	ldrh	r2, [r3, #4]
 80177d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177da:	b29b      	uxth	r3, r3
 80177dc:	00db      	lsls	r3, r3, #3
 80177de:	b29b      	uxth	r3, r3
 80177e0:	4413      	add	r3, r2
 80177e2:	b29a      	uxth	r2, r3
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	809a      	strh	r2, [r3, #4]
 80177e8:	68bb      	ldr	r3, [r7, #8]
 80177ea:	889a      	ldrh	r2, [r3, #4]
 80177ec:	6a3b      	ldr	r3, [r7, #32]
 80177ee:	b29b      	uxth	r3, r3
 80177f0:	4619      	mov	r1, r3
 80177f2:	0049      	lsls	r1, r1, #1
 80177f4:	440b      	add	r3, r1
 80177f6:	005b      	lsls	r3, r3, #1
 80177f8:	b29b      	uxth	r3, r3
 80177fa:	4413      	add	r3, r2
 80177fc:	b29a      	uxth	r2, r3
 80177fe:	68bb      	ldr	r3, [r7, #8]
 8017800:	809a      	strh	r2, [r3, #4]
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	881a      	ldrh	r2, [r3, #0]
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	885b      	ldrh	r3, [r3, #2]
 801780a:	429a      	cmp	r2, r3
 801780c:	d94c      	bls.n	80178a8 <conv_ns_24L24P_to_16L16P32N+0x1a4>
 801780e:	4b5a      	ldr	r3, [pc, #360]	; (8017978 <conv_ns_24L24P_to_16L16P32N+0x274>)
 8017810:	f240 52db 	movw	r2, #1499	; 0x5db
 8017814:	4959      	ldr	r1, [pc, #356]	; (801797c <conv_ns_24L24P_to_16L16P32N+0x278>)
 8017816:	485a      	ldr	r0, [pc, #360]	; (8017980 <conv_ns_24L24P_to_16L16P32N+0x27c>)
 8017818:	f7f1 fa06 	bl	8008c28 <xprintf>
 801781c:	2301      	movs	r3, #1
 801781e:	613b      	str	r3, [r7, #16]
 8017820:	bf00      	nop
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d1fc      	bne.n	8017822 <conv_ns_24L24P_to_16L16P32N+0x11e>
 8017828:	e03e      	b.n	80178a8 <conv_ns_24L24P_to_16L16P32N+0x1a4>
 801782a:	6a3a      	ldr	r2, [r7, #32]
 801782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801782e:	1ad3      	subs	r3, r2, r3
 8017830:	623b      	str	r3, [r7, #32]
 8017832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017834:	3b01      	subs	r3, #1
 8017836:	627b      	str	r3, [r7, #36]	; 0x24
 8017838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801783a:	00db      	lsls	r3, r3, #3
 801783c:	69ba      	ldr	r2, [r7, #24]
 801783e:	18d1      	adds	r1, r2, r3
 8017840:	6a3a      	ldr	r2, [r7, #32]
 8017842:	4613      	mov	r3, r2
 8017844:	005b      	lsls	r3, r3, #1
 8017846:	4413      	add	r3, r2
 8017848:	005b      	lsls	r3, r3, #1
 801784a:	461a      	mov	r2, r3
 801784c:	69fb      	ldr	r3, [r7, #28]
 801784e:	4413      	add	r3, r2
 8017850:	785b      	ldrb	r3, [r3, #1]
 8017852:	700b      	strb	r3, [r1, #0]
 8017854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017856:	00db      	lsls	r3, r3, #3
 8017858:	69ba      	ldr	r2, [r7, #24]
 801785a:	18d1      	adds	r1, r2, r3
 801785c:	6a3a      	ldr	r2, [r7, #32]
 801785e:	4613      	mov	r3, r2
 8017860:	005b      	lsls	r3, r3, #1
 8017862:	4413      	add	r3, r2
 8017864:	005b      	lsls	r3, r3, #1
 8017866:	461a      	mov	r2, r3
 8017868:	69fb      	ldr	r3, [r7, #28]
 801786a:	4413      	add	r3, r2
 801786c:	789b      	ldrb	r3, [r3, #2]
 801786e:	704b      	strb	r3, [r1, #1]
 8017870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017872:	00db      	lsls	r3, r3, #3
 8017874:	69ba      	ldr	r2, [r7, #24]
 8017876:	18d1      	adds	r1, r2, r3
 8017878:	6a3a      	ldr	r2, [r7, #32]
 801787a:	4613      	mov	r3, r2
 801787c:	005b      	lsls	r3, r3, #1
 801787e:	4413      	add	r3, r2
 8017880:	005b      	lsls	r3, r3, #1
 8017882:	461a      	mov	r2, r3
 8017884:	69fb      	ldr	r3, [r7, #28]
 8017886:	4413      	add	r3, r2
 8017888:	791b      	ldrb	r3, [r3, #4]
 801788a:	708b      	strb	r3, [r1, #2]
 801788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801788e:	00db      	lsls	r3, r3, #3
 8017890:	69ba      	ldr	r2, [r7, #24]
 8017892:	18d1      	adds	r1, r2, r3
 8017894:	6a3a      	ldr	r2, [r7, #32]
 8017896:	4613      	mov	r3, r2
 8017898:	005b      	lsls	r3, r3, #1
 801789a:	4413      	add	r3, r2
 801789c:	005b      	lsls	r3, r3, #1
 801789e:	461a      	mov	r2, r3
 80178a0:	69fb      	ldr	r3, [r7, #28]
 80178a2:	4413      	add	r3, r2
 80178a4:	795b      	ldrb	r3, [r3, #5]
 80178a6:	70cb      	strb	r3, [r1, #3]
 80178a8:	6a3b      	ldr	r3, [r7, #32]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d1bd      	bne.n	801782a <conv_ns_24L24P_to_16L16P32N+0x126>
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d018      	beq.n	80178e6 <conv_ns_24L24P_to_16L16P32N+0x1e2>
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	881a      	ldrh	r2, [r3, #0]
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	885b      	ldrh	r3, [r3, #2]
 80178bc:	429a      	cmp	r2, r3
 80178be:	d112      	bne.n	80178e6 <conv_ns_24L24P_to_16L16P32N+0x1e2>
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	881a      	ldrh	r2, [r3, #0]
 80178c4:	683b      	ldr	r3, [r7, #0]
 80178c6:	801a      	strh	r2, [r3, #0]
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	889a      	ldrh	r2, [r3, #4]
 80178cc:	683b      	ldr	r3, [r7, #0]
 80178ce:	809a      	strh	r2, [r3, #4]
 80178d0:	683b      	ldr	r3, [r7, #0]
 80178d2:	f103 0014 	add.w	r0, r3, #20
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	f103 0114 	add.w	r1, r3, #20
 80178dc:	683b      	ldr	r3, [r7, #0]
 80178de:	881b      	ldrh	r3, [r3, #0]
 80178e0:	461a      	mov	r2, r3
 80178e2:	f005 fbad 	bl	801d040 <memcpy>
 80178e6:	4a27      	ldr	r2, [pc, #156]	; (8017984 <conv_ns_24L24P_to_16L16P32N+0x280>)
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178ee:	2b01      	cmp	r3, #1
 80178f0:	d132      	bne.n	8017958 <conv_ns_24L24P_to_16L16P32N+0x254>
 80178f2:	4a25      	ldr	r2, [pc, #148]	; (8017988 <conv_ns_24L24P_to_16L16P32N+0x284>)
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	4413      	add	r3, r2
 80178f8:	2206      	movs	r2, #6
 80178fa:	701a      	strb	r2, [r3, #0]
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	015b      	lsls	r3, r3, #5
 8017900:	4a22      	ldr	r2, [pc, #136]	; (801798c <conv_ns_24L24P_to_16L16P32N+0x288>)
 8017902:	4413      	add	r3, r2
 8017904:	2220      	movs	r2, #32
 8017906:	2100      	movs	r1, #0
 8017908:	4618      	mov	r0, r3
 801790a:	f005 fc33 	bl	801d174 <memset>
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	015b      	lsls	r3, r3, #5
 8017912:	4a1e      	ldr	r2, [pc, #120]	; (801798c <conv_ns_24L24P_to_16L16P32N+0x288>)
 8017914:	4413      	add	r3, r2
 8017916:	69f9      	ldr	r1, [r7, #28]
 8017918:	2206      	movs	r2, #6
 801791a:	4618      	mov	r0, r3
 801791c:	f005 fb90 	bl	801d040 <memcpy>
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	015b      	lsls	r3, r3, #5
 8017924:	3310      	adds	r3, #16
 8017926:	4a19      	ldr	r2, [pc, #100]	; (801798c <conv_ns_24L24P_to_16L16P32N+0x288>)
 8017928:	4413      	add	r3, r2
 801792a:	69b9      	ldr	r1, [r7, #24]
 801792c:	2208      	movs	r2, #8
 801792e:	4618      	mov	r0, r3
 8017930:	f005 fb86 	bl	801d040 <memcpy>
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d009      	beq.n	801794e <conv_ns_24L24P_to_16L16P32N+0x24a>
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	015b      	lsls	r3, r3, #5
 801793e:	3318      	adds	r3, #24
 8017940:	4a12      	ldr	r2, [pc, #72]	; (801798c <conv_ns_24L24P_to_16L16P32N+0x288>)
 8017942:	4413      	add	r3, r2
 8017944:	69b9      	ldr	r1, [r7, #24]
 8017946:	2208      	movs	r2, #8
 8017948:	4618      	mov	r0, r3
 801794a:	f005 fb79 	bl	801d040 <memcpy>
 801794e:	4a0d      	ldr	r2, [pc, #52]	; (8017984 <conv_ns_24L24P_to_16L16P32N+0x280>)
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	2100      	movs	r1, #0
 8017954:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	881a      	ldrh	r2, [r3, #0]
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	885b      	ldrh	r3, [r3, #2]
 8017960:	429a      	cmp	r2, r3
 8017962:	bf0c      	ite	eq
 8017964:	2301      	moveq	r3, #1
 8017966:	2300      	movne	r3, #0
 8017968:	b2db      	uxtb	r3, r3
 801796a:	4618      	mov	r0, r3
 801796c:	3728      	adds	r7, #40	; 0x28
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}
 8017972:	bf00      	nop
 8017974:	aaaaaaab 	.word	0xaaaaaaab
 8017978:	0803ecd8 	.word	0x0803ecd8
 801797c:	0803ed96 	.word	0x0803ed96
 8017980:	0803f4f9 	.word	0x0803f4f9
 8017984:	100027ac 	.word	0x100027ac
 8017988:	10002e88 	.word	0x10002e88
 801798c:	10002e48 	.word	0x10002e48

08017990 <conv_ns_24L8N24P8N_to_16L16P32N>:
{
  //210 543
  SET_SLOT(1, 0, 2, 1);
  SET_SLOT(1, 1, 5, 4);
})
CONVERT_ROUTINE1(conv_ns_24L8N24P8N_to_16L16P32N, t_24L8N24P8N, t_16L16P32N,
 8017990:	b580      	push	{r7, lr}
 8017992:	b08a      	sub	sp, #40	; 0x28
 8017994:	af00      	add	r7, sp, #0
 8017996:	60f8      	str	r0, [r7, #12]
 8017998:	60b9      	str	r1, [r7, #8]
 801799a:	607a      	str	r2, [r7, #4]
 801799c:	603b      	str	r3, [r7, #0]
 801799e:	68bb      	ldr	r3, [r7, #8]
 80179a0:	889b      	ldrh	r3, [r3, #4]
 80179a2:	3310      	adds	r3, #16
 80179a4:	68ba      	ldr	r2, [r7, #8]
 80179a6:	4413      	add	r3, r2
 80179a8:	3304      	adds	r3, #4
 80179aa:	61fb      	str	r3, [r7, #28]
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	889b      	ldrh	r3, [r3, #4]
 80179b0:	3310      	adds	r3, #16
 80179b2:	687a      	ldr	r2, [r7, #4]
 80179b4:	4413      	add	r3, r2
 80179b6:	3304      	adds	r3, #4
 80179b8:	61bb      	str	r3, [r7, #24]
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	885b      	ldrh	r3, [r3, #2]
 80179be:	461a      	mov	r2, r3
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	881b      	ldrh	r3, [r3, #0]
 80179c4:	1ad3      	subs	r3, r2, r3
 80179c6:	08da      	lsrs	r2, r3, #3
 80179c8:	68bb      	ldr	r3, [r7, #8]
 80179ca:	881b      	ldrh	r3, [r3, #0]
 80179cc:	4619      	mov	r1, r3
 80179ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179d0:	fb91 f3f3 	sdiv	r3, r1, r3
 80179d4:	08db      	lsrs	r3, r3, #3
 80179d6:	4293      	cmp	r3, r2
 80179d8:	bf28      	it	cs
 80179da:	4613      	movcs	r3, r2
 80179dc:	627b      	str	r3, [r7, #36]	; 0x24
 80179de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179e2:	fb02 f303 	mul.w	r3, r2, r3
 80179e6:	623b      	str	r3, [r7, #32]
 80179e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d10a      	bne.n	8017a04 <conv_ns_24L8N24P8N_to_16L16P32N+0x74>
 80179ee:	68bb      	ldr	r3, [r7, #8]
 80179f0:	2200      	movs	r2, #0
 80179f2:	801a      	strh	r2, [r3, #0]
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	2200      	movs	r2, #0
 80179f8:	801a      	strh	r2, [r3, #0]
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	2200      	movs	r2, #0
 80179fe:	809a      	strh	r2, [r3, #4]
 8017a00:	2300      	movs	r3, #0
 8017a02:	e0de      	b.n	8017bc2 <conv_ns_24L8N24P8N_to_16L16P32N+0x232>
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	881a      	ldrh	r2, [r3, #0]
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	885b      	ldrh	r3, [r3, #2]
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	d90c      	bls.n	8017a2a <conv_ns_24L8N24P8N_to_16L16P32N+0x9a>
 8017a10:	4b6e      	ldr	r3, [pc, #440]	; (8017bcc <conv_ns_24L8N24P8N_to_16L16P32N+0x23c>)
 8017a12:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8017a16:	496e      	ldr	r1, [pc, #440]	; (8017bd0 <conv_ns_24L8N24P8N_to_16L16P32N+0x240>)
 8017a18:	486e      	ldr	r0, [pc, #440]	; (8017bd4 <conv_ns_24L8N24P8N_to_16L16P32N+0x244>)
 8017a1a:	f7f1 f905 	bl	8008c28 <xprintf>
 8017a1e:	2301      	movs	r3, #1
 8017a20:	617b      	str	r3, [r7, #20]
 8017a22:	bf00      	nop
 8017a24:	697b      	ldr	r3, [r7, #20]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d1fc      	bne.n	8017a24 <conv_ns_24L8N24P8N_to_16L16P32N+0x94>
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	881a      	ldrh	r2, [r3, #0]
 8017a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a30:	b29b      	uxth	r3, r3
 8017a32:	00db      	lsls	r3, r3, #3
 8017a34:	b29b      	uxth	r3, r3
 8017a36:	4413      	add	r3, r2
 8017a38:	b29a      	uxth	r2, r3
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	801a      	strh	r2, [r3, #0]
 8017a3e:	68bb      	ldr	r3, [r7, #8]
 8017a40:	881a      	ldrh	r2, [r3, #0]
 8017a42:	6a3b      	ldr	r3, [r7, #32]
 8017a44:	b29b      	uxth	r3, r3
 8017a46:	00db      	lsls	r3, r3, #3
 8017a48:	b29b      	uxth	r3, r3
 8017a4a:	1ad3      	subs	r3, r2, r3
 8017a4c:	b29a      	uxth	r2, r3
 8017a4e:	68bb      	ldr	r3, [r7, #8]
 8017a50:	801a      	strh	r2, [r3, #0]
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	889a      	ldrh	r2, [r3, #4]
 8017a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a58:	b29b      	uxth	r3, r3
 8017a5a:	00db      	lsls	r3, r3, #3
 8017a5c:	b29b      	uxth	r3, r3
 8017a5e:	4413      	add	r3, r2
 8017a60:	b29a      	uxth	r2, r3
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	809a      	strh	r2, [r3, #4]
 8017a66:	68bb      	ldr	r3, [r7, #8]
 8017a68:	889a      	ldrh	r2, [r3, #4]
 8017a6a:	6a3b      	ldr	r3, [r7, #32]
 8017a6c:	b29b      	uxth	r3, r3
 8017a6e:	00db      	lsls	r3, r3, #3
 8017a70:	b29b      	uxth	r3, r3
 8017a72:	4413      	add	r3, r2
 8017a74:	b29a      	uxth	r2, r3
 8017a76:	68bb      	ldr	r3, [r7, #8]
 8017a78:	809a      	strh	r2, [r3, #4]
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	881a      	ldrh	r2, [r3, #0]
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	885b      	ldrh	r3, [r3, #2]
 8017a82:	429a      	cmp	r2, r3
 8017a84:	d93c      	bls.n	8017b00 <conv_ns_24L8N24P8N_to_16L16P32N+0x170>
 8017a86:	4b51      	ldr	r3, [pc, #324]	; (8017bcc <conv_ns_24L8N24P8N_to_16L16P32N+0x23c>)
 8017a88:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8017a8c:	4950      	ldr	r1, [pc, #320]	; (8017bd0 <conv_ns_24L8N24P8N_to_16L16P32N+0x240>)
 8017a8e:	4851      	ldr	r0, [pc, #324]	; (8017bd4 <conv_ns_24L8N24P8N_to_16L16P32N+0x244>)
 8017a90:	f7f1 f8ca 	bl	8008c28 <xprintf>
 8017a94:	2301      	movs	r3, #1
 8017a96:	613b      	str	r3, [r7, #16]
 8017a98:	bf00      	nop
 8017a9a:	693b      	ldr	r3, [r7, #16]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d1fc      	bne.n	8017a9a <conv_ns_24L8N24P8N_to_16L16P32N+0x10a>
 8017aa0:	e02e      	b.n	8017b00 <conv_ns_24L8N24P8N_to_16L16P32N+0x170>
 8017aa2:	6a3a      	ldr	r2, [r7, #32]
 8017aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aa6:	1ad3      	subs	r3, r2, r3
 8017aa8:	623b      	str	r3, [r7, #32]
 8017aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aac:	3b01      	subs	r3, #1
 8017aae:	627b      	str	r3, [r7, #36]	; 0x24
 8017ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab2:	00db      	lsls	r3, r3, #3
 8017ab4:	69ba      	ldr	r2, [r7, #24]
 8017ab6:	4413      	add	r3, r2
 8017ab8:	6a3a      	ldr	r2, [r7, #32]
 8017aba:	00d2      	lsls	r2, r2, #3
 8017abc:	69f9      	ldr	r1, [r7, #28]
 8017abe:	440a      	add	r2, r1
 8017ac0:	7892      	ldrb	r2, [r2, #2]
 8017ac2:	701a      	strb	r2, [r3, #0]
 8017ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac6:	00db      	lsls	r3, r3, #3
 8017ac8:	69ba      	ldr	r2, [r7, #24]
 8017aca:	4413      	add	r3, r2
 8017acc:	6a3a      	ldr	r2, [r7, #32]
 8017ace:	00d2      	lsls	r2, r2, #3
 8017ad0:	69f9      	ldr	r1, [r7, #28]
 8017ad2:	440a      	add	r2, r1
 8017ad4:	78d2      	ldrb	r2, [r2, #3]
 8017ad6:	705a      	strb	r2, [r3, #1]
 8017ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ada:	00db      	lsls	r3, r3, #3
 8017adc:	69ba      	ldr	r2, [r7, #24]
 8017ade:	4413      	add	r3, r2
 8017ae0:	6a3a      	ldr	r2, [r7, #32]
 8017ae2:	00d2      	lsls	r2, r2, #3
 8017ae4:	69f9      	ldr	r1, [r7, #28]
 8017ae6:	440a      	add	r2, r1
 8017ae8:	7992      	ldrb	r2, [r2, #6]
 8017aea:	709a      	strb	r2, [r3, #2]
 8017aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aee:	00db      	lsls	r3, r3, #3
 8017af0:	69ba      	ldr	r2, [r7, #24]
 8017af2:	4413      	add	r3, r2
 8017af4:	6a3a      	ldr	r2, [r7, #32]
 8017af6:	00d2      	lsls	r2, r2, #3
 8017af8:	69f9      	ldr	r1, [r7, #28]
 8017afa:	440a      	add	r2, r1
 8017afc:	79d2      	ldrb	r2, [r2, #7]
 8017afe:	70da      	strb	r2, [r3, #3]
 8017b00:	6a3b      	ldr	r3, [r7, #32]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d1cd      	bne.n	8017aa2 <conv_ns_24L8N24P8N_to_16L16P32N+0x112>
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d018      	beq.n	8017b3e <conv_ns_24L8N24P8N_to_16L16P32N+0x1ae>
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	881a      	ldrh	r2, [r3, #0]
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	885b      	ldrh	r3, [r3, #2]
 8017b14:	429a      	cmp	r2, r3
 8017b16:	d112      	bne.n	8017b3e <conv_ns_24L8N24P8N_to_16L16P32N+0x1ae>
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	881a      	ldrh	r2, [r3, #0]
 8017b1c:	683b      	ldr	r3, [r7, #0]
 8017b1e:	801a      	strh	r2, [r3, #0]
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	889a      	ldrh	r2, [r3, #4]
 8017b24:	683b      	ldr	r3, [r7, #0]
 8017b26:	809a      	strh	r2, [r3, #4]
 8017b28:	683b      	ldr	r3, [r7, #0]
 8017b2a:	f103 0014 	add.w	r0, r3, #20
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	f103 0114 	add.w	r1, r3, #20
 8017b34:	683b      	ldr	r3, [r7, #0]
 8017b36:	881b      	ldrh	r3, [r3, #0]
 8017b38:	461a      	mov	r2, r3
 8017b3a:	f005 fa81 	bl	801d040 <memcpy>
 8017b3e:	4a26      	ldr	r2, [pc, #152]	; (8017bd8 <conv_ns_24L8N24P8N_to_16L16P32N+0x248>)
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b46:	2b01      	cmp	r3, #1
 8017b48:	d132      	bne.n	8017bb0 <conv_ns_24L8N24P8N_to_16L16P32N+0x220>
 8017b4a:	4a24      	ldr	r2, [pc, #144]	; (8017bdc <conv_ns_24L8N24P8N_to_16L16P32N+0x24c>)
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	4413      	add	r3, r2
 8017b50:	2208      	movs	r2, #8
 8017b52:	701a      	strb	r2, [r3, #0]
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	015b      	lsls	r3, r3, #5
 8017b58:	4a21      	ldr	r2, [pc, #132]	; (8017be0 <conv_ns_24L8N24P8N_to_16L16P32N+0x250>)
 8017b5a:	4413      	add	r3, r2
 8017b5c:	2220      	movs	r2, #32
 8017b5e:	2100      	movs	r1, #0
 8017b60:	4618      	mov	r0, r3
 8017b62:	f005 fb07 	bl	801d174 <memset>
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	015b      	lsls	r3, r3, #5
 8017b6a:	4a1d      	ldr	r2, [pc, #116]	; (8017be0 <conv_ns_24L8N24P8N_to_16L16P32N+0x250>)
 8017b6c:	4413      	add	r3, r2
 8017b6e:	69f9      	ldr	r1, [r7, #28]
 8017b70:	2208      	movs	r2, #8
 8017b72:	4618      	mov	r0, r3
 8017b74:	f005 fa64 	bl	801d040 <memcpy>
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	015b      	lsls	r3, r3, #5
 8017b7c:	3310      	adds	r3, #16
 8017b7e:	4a18      	ldr	r2, [pc, #96]	; (8017be0 <conv_ns_24L8N24P8N_to_16L16P32N+0x250>)
 8017b80:	4413      	add	r3, r2
 8017b82:	69b9      	ldr	r1, [r7, #24]
 8017b84:	2208      	movs	r2, #8
 8017b86:	4618      	mov	r0, r3
 8017b88:	f005 fa5a 	bl	801d040 <memcpy>
 8017b8c:	683b      	ldr	r3, [r7, #0]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d009      	beq.n	8017ba6 <conv_ns_24L8N24P8N_to_16L16P32N+0x216>
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	015b      	lsls	r3, r3, #5
 8017b96:	3318      	adds	r3, #24
 8017b98:	4a11      	ldr	r2, [pc, #68]	; (8017be0 <conv_ns_24L8N24P8N_to_16L16P32N+0x250>)
 8017b9a:	4413      	add	r3, r2
 8017b9c:	69b9      	ldr	r1, [r7, #24]
 8017b9e:	2208      	movs	r2, #8
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f005 fa4d 	bl	801d040 <memcpy>
 8017ba6:	4a0c      	ldr	r2, [pc, #48]	; (8017bd8 <conv_ns_24L8N24P8N_to_16L16P32N+0x248>)
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	2100      	movs	r1, #0
 8017bac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	881a      	ldrh	r2, [r3, #0]
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	885b      	ldrh	r3, [r3, #2]
 8017bb8:	429a      	cmp	r2, r3
 8017bba:	bf0c      	ite	eq
 8017bbc:	2301      	moveq	r3, #1
 8017bbe:	2300      	movne	r3, #0
 8017bc0:	b2db      	uxtb	r3, r3
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	3728      	adds	r7, #40	; 0x28
 8017bc6:	46bd      	mov	sp, r7
 8017bc8:	bd80      	pop	{r7, pc}
 8017bca:	bf00      	nop
 8017bcc:	0803ecd8 	.word	0x0803ecd8
 8017bd0:	0803edb2 	.word	0x0803edb2
 8017bd4:	0803f4f9 	.word	0x0803f4f9
 8017bd8:	100027ac 	.word	0x100027ac
 8017bdc:	10002e88 	.word	0x10002e88
 8017be0:	10002e48 	.word	0x10002e48

08017be4 <conv_ds_24L24P_to_16L16L32N_16P16P32N>:
{
  //321 765
  SET_SLOT(1, 0, 3, 2);
  SET_SLOT(1, 1, 7, 6);
})
CONVERT_ROUTINE2(conv_ds_24L24P_to_16L16L32N_16P16P32N, t_24L24P, t_16L16L32N,
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b08c      	sub	sp, #48	; 0x30
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	60f8      	str	r0, [r7, #12]
 8017bec:	60b9      	str	r1, [r7, #8]
 8017bee:	607a      	str	r2, [r7, #4]
 8017bf0:	603b      	str	r3, [r7, #0]
 8017bf2:	68bb      	ldr	r3, [r7, #8]
 8017bf4:	889b      	ldrh	r3, [r3, #4]
 8017bf6:	3310      	adds	r3, #16
 8017bf8:	68ba      	ldr	r2, [r7, #8]
 8017bfa:	4413      	add	r3, r2
 8017bfc:	3304      	adds	r3, #4
 8017bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	889b      	ldrh	r3, [r3, #4]
 8017c04:	3310      	adds	r3, #16
 8017c06:	687a      	ldr	r2, [r7, #4]
 8017c08:	4413      	add	r3, r2
 8017c0a:	3304      	adds	r3, #4
 8017c0c:	623b      	str	r3, [r7, #32]
 8017c0e:	683b      	ldr	r3, [r7, #0]
 8017c10:	889b      	ldrh	r3, [r3, #4]
 8017c12:	3310      	adds	r3, #16
 8017c14:	683a      	ldr	r2, [r7, #0]
 8017c16:	4413      	add	r3, r2
 8017c18:	3304      	adds	r3, #4
 8017c1a:	61fb      	str	r3, [r7, #28]
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	885b      	ldrh	r3, [r3, #2]
 8017c20:	461a      	mov	r2, r3
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	881b      	ldrh	r3, [r3, #0]
 8017c26:	1ad3      	subs	r3, r2, r3
 8017c28:	08da      	lsrs	r2, r3, #3
 8017c2a:	68bb      	ldr	r3, [r7, #8]
 8017c2c:	881b      	ldrh	r3, [r3, #0]
 8017c2e:	4619      	mov	r1, r3
 8017c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c32:	005b      	lsls	r3, r3, #1
 8017c34:	fb91 f3f3 	sdiv	r3, r1, r3
 8017c38:	4619      	mov	r1, r3
 8017c3a:	4b8c      	ldr	r3, [pc, #560]	; (8017e6c <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x288>)
 8017c3c:	fba3 1301 	umull	r1, r3, r3, r1
 8017c40:	089b      	lsrs	r3, r3, #2
 8017c42:	4293      	cmp	r3, r2
 8017c44:	bf28      	it	cs
 8017c46:	4613      	movcs	r3, r2
 8017c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c4c:	005b      	lsls	r3, r3, #1
 8017c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c50:	fb02 f303 	mul.w	r3, r2, r3
 8017c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8017c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d110      	bne.n	8017c7e <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x9a>
 8017c5c:	68bb      	ldr	r3, [r7, #8]
 8017c5e:	2200      	movs	r2, #0
 8017c60:	801a      	strh	r2, [r3, #0]
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	2200      	movs	r2, #0
 8017c66:	801a      	strh	r2, [r3, #0]
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	809a      	strh	r2, [r3, #4]
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	2200      	movs	r2, #0
 8017c72:	801a      	strh	r2, [r3, #0]
 8017c74:	683b      	ldr	r3, [r7, #0]
 8017c76:	2200      	movs	r2, #0
 8017c78:	809a      	strh	r2, [r3, #4]
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	e0f2      	b.n	8017e64 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x280>
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	881a      	ldrh	r2, [r3, #0]
 8017c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c84:	b29b      	uxth	r3, r3
 8017c86:	00db      	lsls	r3, r3, #3
 8017c88:	b29b      	uxth	r3, r3
 8017c8a:	4413      	add	r3, r2
 8017c8c:	b29a      	uxth	r2, r3
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	801a      	strh	r2, [r3, #0]
 8017c92:	683b      	ldr	r3, [r7, #0]
 8017c94:	881a      	ldrh	r2, [r3, #0]
 8017c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c98:	b29b      	uxth	r3, r3
 8017c9a:	00db      	lsls	r3, r3, #3
 8017c9c:	b29b      	uxth	r3, r3
 8017c9e:	4413      	add	r3, r2
 8017ca0:	b29a      	uxth	r2, r3
 8017ca2:	683b      	ldr	r3, [r7, #0]
 8017ca4:	801a      	strh	r2, [r3, #0]
 8017ca6:	68bb      	ldr	r3, [r7, #8]
 8017ca8:	881a      	ldrh	r2, [r3, #0]
 8017caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cac:	b29b      	uxth	r3, r3
 8017cae:	4619      	mov	r1, r3
 8017cb0:	0049      	lsls	r1, r1, #1
 8017cb2:	440b      	add	r3, r1
 8017cb4:	005b      	lsls	r3, r3, #1
 8017cb6:	b29b      	uxth	r3, r3
 8017cb8:	1ad3      	subs	r3, r2, r3
 8017cba:	b29a      	uxth	r2, r3
 8017cbc:	68bb      	ldr	r3, [r7, #8]
 8017cbe:	801a      	strh	r2, [r3, #0]
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	889a      	ldrh	r2, [r3, #4]
 8017cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cc6:	b29b      	uxth	r3, r3
 8017cc8:	00db      	lsls	r3, r3, #3
 8017cca:	b29b      	uxth	r3, r3
 8017ccc:	4413      	add	r3, r2
 8017cce:	b29a      	uxth	r2, r3
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	809a      	strh	r2, [r3, #4]
 8017cd4:	683b      	ldr	r3, [r7, #0]
 8017cd6:	889a      	ldrh	r2, [r3, #4]
 8017cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cda:	b29b      	uxth	r3, r3
 8017cdc:	00db      	lsls	r3, r3, #3
 8017cde:	b29b      	uxth	r3, r3
 8017ce0:	4413      	add	r3, r2
 8017ce2:	b29a      	uxth	r2, r3
 8017ce4:	683b      	ldr	r3, [r7, #0]
 8017ce6:	809a      	strh	r2, [r3, #4]
 8017ce8:	68bb      	ldr	r3, [r7, #8]
 8017cea:	889a      	ldrh	r2, [r3, #4]
 8017cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cee:	b29b      	uxth	r3, r3
 8017cf0:	4619      	mov	r1, r3
 8017cf2:	0049      	lsls	r1, r1, #1
 8017cf4:	440b      	add	r3, r1
 8017cf6:	005b      	lsls	r3, r3, #1
 8017cf8:	b29b      	uxth	r3, r3
 8017cfa:	4413      	add	r3, r2
 8017cfc:	b29a      	uxth	r2, r3
 8017cfe:	68bb      	ldr	r3, [r7, #8]
 8017d00:	809a      	strh	r2, [r3, #4]
 8017d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d10c      	bne.n	8017d22 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x13e>
 8017d08:	4b59      	ldr	r3, [pc, #356]	; (8017e70 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x28c>)
 8017d0a:	f240 52e7 	movw	r2, #1511	; 0x5e7
 8017d0e:	4959      	ldr	r1, [pc, #356]	; (8017e74 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x290>)
 8017d10:	4859      	ldr	r0, [pc, #356]	; (8017e78 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x294>)
 8017d12:	f7f0 ff89 	bl	8008c28 <xprintf>
 8017d16:	2301      	movs	r3, #1
 8017d18:	61bb      	str	r3, [r7, #24]
 8017d1a:	bf00      	nop
 8017d1c:	69bb      	ldr	r3, [r7, #24]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d1fc      	bne.n	8017d1c <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x138>
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	881a      	ldrh	r2, [r3, #0]
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	885b      	ldrh	r3, [r3, #2]
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d94d      	bls.n	8017dca <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x1e6>
 8017d2e:	4b53      	ldr	r3, [pc, #332]	; (8017e7c <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x298>)
 8017d30:	f240 52e7 	movw	r2, #1511	; 0x5e7
 8017d34:	494f      	ldr	r1, [pc, #316]	; (8017e74 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x290>)
 8017d36:	4850      	ldr	r0, [pc, #320]	; (8017e78 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x294>)
 8017d38:	f7f0 ff76 	bl	8008c28 <xprintf>
 8017d3c:	2301      	movs	r3, #1
 8017d3e:	617b      	str	r3, [r7, #20]
 8017d40:	bf00      	nop
 8017d42:	697b      	ldr	r3, [r7, #20]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d1fc      	bne.n	8017d42 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x15e>
 8017d48:	e03f      	b.n	8017dca <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x1e6>
 8017d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d4c:	005b      	lsls	r3, r3, #1
 8017d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d50:	1ad3      	subs	r3, r2, r3
 8017d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d56:	3b01      	subs	r3, #1
 8017d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d5c:	00db      	lsls	r3, r3, #3
 8017d5e:	6a3a      	ldr	r2, [r7, #32]
 8017d60:	18d1      	adds	r1, r2, r3
 8017d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d64:	4613      	mov	r3, r2
 8017d66:	005b      	lsls	r3, r3, #1
 8017d68:	4413      	add	r3, r2
 8017d6a:	005b      	lsls	r3, r3, #1
 8017d6c:	461a      	mov	r2, r3
 8017d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d70:	4413      	add	r3, r2
 8017d72:	785b      	ldrb	r3, [r3, #1]
 8017d74:	700b      	strb	r3, [r1, #0]
 8017d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d78:	00db      	lsls	r3, r3, #3
 8017d7a:	6a3a      	ldr	r2, [r7, #32]
 8017d7c:	18d1      	adds	r1, r2, r3
 8017d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d80:	4613      	mov	r3, r2
 8017d82:	005b      	lsls	r3, r3, #1
 8017d84:	4413      	add	r3, r2
 8017d86:	005b      	lsls	r3, r3, #1
 8017d88:	461a      	mov	r2, r3
 8017d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d8c:	4413      	add	r3, r2
 8017d8e:	789b      	ldrb	r3, [r3, #2]
 8017d90:	704b      	strb	r3, [r1, #1]
 8017d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d94:	00db      	lsls	r3, r3, #3
 8017d96:	69fa      	ldr	r2, [r7, #28]
 8017d98:	18d1      	adds	r1, r2, r3
 8017d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d9c:	4613      	mov	r3, r2
 8017d9e:	005b      	lsls	r3, r3, #1
 8017da0:	4413      	add	r3, r2
 8017da2:	005b      	lsls	r3, r3, #1
 8017da4:	461a      	mov	r2, r3
 8017da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017da8:	4413      	add	r3, r2
 8017daa:	791b      	ldrb	r3, [r3, #4]
 8017dac:	700b      	strb	r3, [r1, #0]
 8017dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017db0:	00db      	lsls	r3, r3, #3
 8017db2:	69fa      	ldr	r2, [r7, #28]
 8017db4:	18d1      	adds	r1, r2, r3
 8017db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017db8:	4613      	mov	r3, r2
 8017dba:	005b      	lsls	r3, r3, #1
 8017dbc:	4413      	add	r3, r2
 8017dbe:	005b      	lsls	r3, r3, #1
 8017dc0:	461a      	mov	r2, r3
 8017dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc4:	4413      	add	r3, r2
 8017dc6:	795b      	ldrb	r3, [r3, #5]
 8017dc8:	704b      	strb	r3, [r1, #1]
 8017dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d1bc      	bne.n	8017d4a <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x166>
 8017dd0:	4a2b      	ldr	r2, [pc, #172]	; (8017e80 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x29c>)
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017dd8:	2b01      	cmp	r3, #1
 8017dda:	d13a      	bne.n	8017e52 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x26e>
 8017ddc:	4a29      	ldr	r2, [pc, #164]	; (8017e84 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x2a0>)
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	4413      	add	r3, r2
 8017de2:	2206      	movs	r2, #6
 8017de4:	701a      	strb	r2, [r3, #0]
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	015b      	lsls	r3, r3, #5
 8017dea:	4a27      	ldr	r2, [pc, #156]	; (8017e88 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x2a4>)
 8017dec:	4413      	add	r3, r2
 8017dee:	2220      	movs	r2, #32
 8017df0:	2100      	movs	r1, #0
 8017df2:	4618      	mov	r0, r3
 8017df4:	f005 f9be 	bl	801d174 <memset>
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	015b      	lsls	r3, r3, #5
 8017dfc:	4a22      	ldr	r2, [pc, #136]	; (8017e88 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x2a4>)
 8017dfe:	4413      	add	r3, r2
 8017e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e02:	2206      	movs	r2, #6
 8017e04:	4618      	mov	r0, r3
 8017e06:	f005 f91b 	bl	801d040 <memcpy>
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	015b      	lsls	r3, r3, #5
 8017e0e:	3308      	adds	r3, #8
 8017e10:	4a1d      	ldr	r2, [pc, #116]	; (8017e88 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x2a4>)
 8017e12:	1898      	adds	r0, r3, r2
 8017e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e16:	3306      	adds	r3, #6
 8017e18:	2206      	movs	r2, #6
 8017e1a:	4619      	mov	r1, r3
 8017e1c:	f005 f910 	bl	801d040 <memcpy>
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	015b      	lsls	r3, r3, #5
 8017e24:	3310      	adds	r3, #16
 8017e26:	4a18      	ldr	r2, [pc, #96]	; (8017e88 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x2a4>)
 8017e28:	4413      	add	r3, r2
 8017e2a:	6a39      	ldr	r1, [r7, #32]
 8017e2c:	2208      	movs	r2, #8
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f005 f906 	bl	801d040 <memcpy>
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	015b      	lsls	r3, r3, #5
 8017e38:	3318      	adds	r3, #24
 8017e3a:	4a13      	ldr	r2, [pc, #76]	; (8017e88 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x2a4>)
 8017e3c:	4413      	add	r3, r2
 8017e3e:	69f9      	ldr	r1, [r7, #28]
 8017e40:	2208      	movs	r2, #8
 8017e42:	4618      	mov	r0, r3
 8017e44:	f005 f8fc 	bl	801d040 <memcpy>
 8017e48:	4a0d      	ldr	r2, [pc, #52]	; (8017e80 <conv_ds_24L24P_to_16L16L32N_16P16P32N+0x29c>)
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	2100      	movs	r1, #0
 8017e4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	881a      	ldrh	r2, [r3, #0]
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	885b      	ldrh	r3, [r3, #2]
 8017e5a:	429a      	cmp	r2, r3
 8017e5c:	bf0c      	ite	eq
 8017e5e:	2301      	moveq	r3, #1
 8017e60:	2300      	movne	r3, #0
 8017e62:	b2db      	uxtb	r3, r3
 8017e64:	4618      	mov	r0, r3
 8017e66:	3730      	adds	r7, #48	; 0x30
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd80      	pop	{r7, pc}
 8017e6c:	aaaaaaab 	.word	0xaaaaaaab
 8017e70:	0803ed00 	.word	0x0803ed00
 8017e74:	0803edd2 	.word	0x0803edd2
 8017e78:	0803f4f9 	.word	0x0803f4f9
 8017e7c:	0803ecd8 	.word	0x0803ecd8
 8017e80:	100027ac 	.word	0x100027ac
 8017e84:	10002e88 	.word	0x10002e88
 8017e88:	10002e48 	.word	0x10002e48

08017e8c <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N>:
{
  //210 543
  SET_SLOT(1, 0, 2, 1);
  SET_SLOT(2, 0, 5, 4);
})
CONVERT_ROUTINE2(conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N, t_24L8N24P8N, t_16L16L32N,
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b08c      	sub	sp, #48	; 0x30
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	60f8      	str	r0, [r7, #12]
 8017e94:	60b9      	str	r1, [r7, #8]
 8017e96:	607a      	str	r2, [r7, #4]
 8017e98:	603b      	str	r3, [r7, #0]
 8017e9a:	68bb      	ldr	r3, [r7, #8]
 8017e9c:	889b      	ldrh	r3, [r3, #4]
 8017e9e:	3310      	adds	r3, #16
 8017ea0:	68ba      	ldr	r2, [r7, #8]
 8017ea2:	4413      	add	r3, r2
 8017ea4:	3304      	adds	r3, #4
 8017ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	889b      	ldrh	r3, [r3, #4]
 8017eac:	3310      	adds	r3, #16
 8017eae:	687a      	ldr	r2, [r7, #4]
 8017eb0:	4413      	add	r3, r2
 8017eb2:	3304      	adds	r3, #4
 8017eb4:	623b      	str	r3, [r7, #32]
 8017eb6:	683b      	ldr	r3, [r7, #0]
 8017eb8:	889b      	ldrh	r3, [r3, #4]
 8017eba:	3310      	adds	r3, #16
 8017ebc:	683a      	ldr	r2, [r7, #0]
 8017ebe:	4413      	add	r3, r2
 8017ec0:	3304      	adds	r3, #4
 8017ec2:	61fb      	str	r3, [r7, #28]
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	885b      	ldrh	r3, [r3, #2]
 8017ec8:	461a      	mov	r2, r3
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	881b      	ldrh	r3, [r3, #0]
 8017ece:	1ad3      	subs	r3, r2, r3
 8017ed0:	08da      	lsrs	r2, r3, #3
 8017ed2:	68bb      	ldr	r3, [r7, #8]
 8017ed4:	881b      	ldrh	r3, [r3, #0]
 8017ed6:	4619      	mov	r1, r3
 8017ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eda:	005b      	lsls	r3, r3, #1
 8017edc:	fb91 f3f3 	sdiv	r3, r1, r3
 8017ee0:	08db      	lsrs	r3, r3, #3
 8017ee2:	4293      	cmp	r3, r2
 8017ee4:	bf28      	it	cs
 8017ee6:	4613      	movcs	r3, r2
 8017ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eec:	005b      	lsls	r3, r3, #1
 8017eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ef0:	fb02 f303 	mul.w	r3, r2, r3
 8017ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d110      	bne.n	8017f1e <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x92>
 8017efc:	68bb      	ldr	r3, [r7, #8]
 8017efe:	2200      	movs	r2, #0
 8017f00:	801a      	strh	r2, [r3, #0]
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	2200      	movs	r2, #0
 8017f06:	801a      	strh	r2, [r3, #0]
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	809a      	strh	r2, [r3, #4]
 8017f0e:	683b      	ldr	r3, [r7, #0]
 8017f10:	2200      	movs	r2, #0
 8017f12:	801a      	strh	r2, [r3, #0]
 8017f14:	683b      	ldr	r3, [r7, #0]
 8017f16:	2200      	movs	r2, #0
 8017f18:	809a      	strh	r2, [r3, #4]
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	e0dc      	b.n	80180d8 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x24c>
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	881a      	ldrh	r2, [r3, #0]
 8017f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f24:	b29b      	uxth	r3, r3
 8017f26:	00db      	lsls	r3, r3, #3
 8017f28:	b29b      	uxth	r3, r3
 8017f2a:	4413      	add	r3, r2
 8017f2c:	b29a      	uxth	r2, r3
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	801a      	strh	r2, [r3, #0]
 8017f32:	683b      	ldr	r3, [r7, #0]
 8017f34:	881a      	ldrh	r2, [r3, #0]
 8017f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f38:	b29b      	uxth	r3, r3
 8017f3a:	00db      	lsls	r3, r3, #3
 8017f3c:	b29b      	uxth	r3, r3
 8017f3e:	4413      	add	r3, r2
 8017f40:	b29a      	uxth	r2, r3
 8017f42:	683b      	ldr	r3, [r7, #0]
 8017f44:	801a      	strh	r2, [r3, #0]
 8017f46:	68bb      	ldr	r3, [r7, #8]
 8017f48:	881a      	ldrh	r2, [r3, #0]
 8017f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	00db      	lsls	r3, r3, #3
 8017f50:	b29b      	uxth	r3, r3
 8017f52:	1ad3      	subs	r3, r2, r3
 8017f54:	b29a      	uxth	r2, r3
 8017f56:	68bb      	ldr	r3, [r7, #8]
 8017f58:	801a      	strh	r2, [r3, #0]
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	889a      	ldrh	r2, [r3, #4]
 8017f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f60:	b29b      	uxth	r3, r3
 8017f62:	00db      	lsls	r3, r3, #3
 8017f64:	b29b      	uxth	r3, r3
 8017f66:	4413      	add	r3, r2
 8017f68:	b29a      	uxth	r2, r3
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	809a      	strh	r2, [r3, #4]
 8017f6e:	683b      	ldr	r3, [r7, #0]
 8017f70:	889a      	ldrh	r2, [r3, #4]
 8017f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f74:	b29b      	uxth	r3, r3
 8017f76:	00db      	lsls	r3, r3, #3
 8017f78:	b29b      	uxth	r3, r3
 8017f7a:	4413      	add	r3, r2
 8017f7c:	b29a      	uxth	r2, r3
 8017f7e:	683b      	ldr	r3, [r7, #0]
 8017f80:	809a      	strh	r2, [r3, #4]
 8017f82:	68bb      	ldr	r3, [r7, #8]
 8017f84:	889a      	ldrh	r2, [r3, #4]
 8017f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f88:	b29b      	uxth	r3, r3
 8017f8a:	00db      	lsls	r3, r3, #3
 8017f8c:	b29b      	uxth	r3, r3
 8017f8e:	4413      	add	r3, r2
 8017f90:	b29a      	uxth	r2, r3
 8017f92:	68bb      	ldr	r3, [r7, #8]
 8017f94:	809a      	strh	r2, [r3, #4]
 8017f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d10c      	bne.n	8017fb6 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x12a>
 8017f9c:	4b50      	ldr	r3, [pc, #320]	; (80180e0 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x254>)
 8017f9e:	f240 52ed 	movw	r2, #1517	; 0x5ed
 8017fa2:	4950      	ldr	r1, [pc, #320]	; (80180e4 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x258>)
 8017fa4:	4850      	ldr	r0, [pc, #320]	; (80180e8 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x25c>)
 8017fa6:	f7f0 fe3f 	bl	8008c28 <xprintf>
 8017faa:	2301      	movs	r3, #1
 8017fac:	61bb      	str	r3, [r7, #24]
 8017fae:	bf00      	nop
 8017fb0:	69bb      	ldr	r3, [r7, #24]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d1fc      	bne.n	8017fb0 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x124>
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	881a      	ldrh	r2, [r3, #0]
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	885b      	ldrh	r3, [r3, #2]
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d93d      	bls.n	801803e <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x1b2>
 8017fc2:	4b4a      	ldr	r3, [pc, #296]	; (80180ec <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x260>)
 8017fc4:	f240 52ed 	movw	r2, #1517	; 0x5ed
 8017fc8:	4946      	ldr	r1, [pc, #280]	; (80180e4 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x258>)
 8017fca:	4847      	ldr	r0, [pc, #284]	; (80180e8 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x25c>)
 8017fcc:	f7f0 fe2c 	bl	8008c28 <xprintf>
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	617b      	str	r3, [r7, #20]
 8017fd4:	bf00      	nop
 8017fd6:	697b      	ldr	r3, [r7, #20]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d1fc      	bne.n	8017fd6 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x14a>
 8017fdc:	e02f      	b.n	801803e <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x1b2>
 8017fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fe0:	005b      	lsls	r3, r3, #1
 8017fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017fe4:	1ad3      	subs	r3, r2, r3
 8017fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fea:	3b01      	subs	r3, #1
 8017fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ff0:	00db      	lsls	r3, r3, #3
 8017ff2:	6a3a      	ldr	r2, [r7, #32]
 8017ff4:	4413      	add	r3, r2
 8017ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ff8:	00d2      	lsls	r2, r2, #3
 8017ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017ffc:	440a      	add	r2, r1
 8017ffe:	7892      	ldrb	r2, [r2, #2]
 8018000:	701a      	strb	r2, [r3, #0]
 8018002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018004:	00db      	lsls	r3, r3, #3
 8018006:	6a3a      	ldr	r2, [r7, #32]
 8018008:	4413      	add	r3, r2
 801800a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801800c:	00d2      	lsls	r2, r2, #3
 801800e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018010:	440a      	add	r2, r1
 8018012:	78d2      	ldrb	r2, [r2, #3]
 8018014:	705a      	strb	r2, [r3, #1]
 8018016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018018:	00db      	lsls	r3, r3, #3
 801801a:	69fa      	ldr	r2, [r7, #28]
 801801c:	4413      	add	r3, r2
 801801e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018020:	00d2      	lsls	r2, r2, #3
 8018022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018024:	440a      	add	r2, r1
 8018026:	7992      	ldrb	r2, [r2, #6]
 8018028:	701a      	strb	r2, [r3, #0]
 801802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801802c:	00db      	lsls	r3, r3, #3
 801802e:	69fa      	ldr	r2, [r7, #28]
 8018030:	4413      	add	r3, r2
 8018032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018034:	00d2      	lsls	r2, r2, #3
 8018036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018038:	440a      	add	r2, r1
 801803a:	79d2      	ldrb	r2, [r2, #7]
 801803c:	705a      	strb	r2, [r3, #1]
 801803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018040:	2b00      	cmp	r3, #0
 8018042:	d1cc      	bne.n	8017fde <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x152>
 8018044:	4a2a      	ldr	r2, [pc, #168]	; (80180f0 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x264>)
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801804c:	2b01      	cmp	r3, #1
 801804e:	d13a      	bne.n	80180c6 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x23a>
 8018050:	4a28      	ldr	r2, [pc, #160]	; (80180f4 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x268>)
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	4413      	add	r3, r2
 8018056:	2208      	movs	r2, #8
 8018058:	701a      	strb	r2, [r3, #0]
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	015b      	lsls	r3, r3, #5
 801805e:	4a26      	ldr	r2, [pc, #152]	; (80180f8 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x26c>)
 8018060:	4413      	add	r3, r2
 8018062:	2220      	movs	r2, #32
 8018064:	2100      	movs	r1, #0
 8018066:	4618      	mov	r0, r3
 8018068:	f005 f884 	bl	801d174 <memset>
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	015b      	lsls	r3, r3, #5
 8018070:	4a21      	ldr	r2, [pc, #132]	; (80180f8 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x26c>)
 8018072:	4413      	add	r3, r2
 8018074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018076:	2208      	movs	r2, #8
 8018078:	4618      	mov	r0, r3
 801807a:	f004 ffe1 	bl	801d040 <memcpy>
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	015b      	lsls	r3, r3, #5
 8018082:	3308      	adds	r3, #8
 8018084:	4a1c      	ldr	r2, [pc, #112]	; (80180f8 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x26c>)
 8018086:	1898      	adds	r0, r3, r2
 8018088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801808a:	3308      	adds	r3, #8
 801808c:	2208      	movs	r2, #8
 801808e:	4619      	mov	r1, r3
 8018090:	f004 ffd6 	bl	801d040 <memcpy>
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	015b      	lsls	r3, r3, #5
 8018098:	3310      	adds	r3, #16
 801809a:	4a17      	ldr	r2, [pc, #92]	; (80180f8 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x26c>)
 801809c:	4413      	add	r3, r2
 801809e:	6a39      	ldr	r1, [r7, #32]
 80180a0:	2208      	movs	r2, #8
 80180a2:	4618      	mov	r0, r3
 80180a4:	f004 ffcc 	bl	801d040 <memcpy>
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	015b      	lsls	r3, r3, #5
 80180ac:	3318      	adds	r3, #24
 80180ae:	4a12      	ldr	r2, [pc, #72]	; (80180f8 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x26c>)
 80180b0:	4413      	add	r3, r2
 80180b2:	69f9      	ldr	r1, [r7, #28]
 80180b4:	2208      	movs	r2, #8
 80180b6:	4618      	mov	r0, r3
 80180b8:	f004 ffc2 	bl	801d040 <memcpy>
 80180bc:	4a0c      	ldr	r2, [pc, #48]	; (80180f0 <conv_ds_24L8N24P8N_to_16L16L32N_16P16P32N+0x264>)
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	2100      	movs	r1, #0
 80180c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	881a      	ldrh	r2, [r3, #0]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	885b      	ldrh	r3, [r3, #2]
 80180ce:	429a      	cmp	r2, r3
 80180d0:	bf0c      	ite	eq
 80180d2:	2301      	moveq	r3, #1
 80180d4:	2300      	movne	r3, #0
 80180d6:	b2db      	uxtb	r3, r3
 80180d8:	4618      	mov	r0, r3
 80180da:	3730      	adds	r7, #48	; 0x30
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}
 80180e0:	0803ed00 	.word	0x0803ed00
 80180e4:	0803edf8 	.word	0x0803edf8
 80180e8:	0803f4f9 	.word	0x0803f4f9
 80180ec:	0803ecd8 	.word	0x0803ecd8
 80180f0:	100027ac 	.word	0x100027ac
 80180f4:	10002e88 	.word	0x10002e88
 80180f8:	10002e48 	.word	0x10002e48

080180fc <conv_ns_16L8L8N16P8P8N_to_16L16P32N>:
{
  //321 765
  SET_SLOT(1, 0, 3, 2);
  SET_SLOT(2, 0, 7, 6);
})
CONVERT_ROUTINE1(conv_ns_16L8L8N16P8P8N_to_16L16P32N, t_16L8L8N16P8P8N, t_16L16P32N,
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b08a      	sub	sp, #40	; 0x28
 8018100:	af00      	add	r7, sp, #0
 8018102:	60f8      	str	r0, [r7, #12]
 8018104:	60b9      	str	r1, [r7, #8]
 8018106:	607a      	str	r2, [r7, #4]
 8018108:	603b      	str	r3, [r7, #0]
 801810a:	68bb      	ldr	r3, [r7, #8]
 801810c:	889b      	ldrh	r3, [r3, #4]
 801810e:	3310      	adds	r3, #16
 8018110:	68ba      	ldr	r2, [r7, #8]
 8018112:	4413      	add	r3, r2
 8018114:	3304      	adds	r3, #4
 8018116:	61fb      	str	r3, [r7, #28]
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	889b      	ldrh	r3, [r3, #4]
 801811c:	3310      	adds	r3, #16
 801811e:	687a      	ldr	r2, [r7, #4]
 8018120:	4413      	add	r3, r2
 8018122:	3304      	adds	r3, #4
 8018124:	61bb      	str	r3, [r7, #24]
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	885b      	ldrh	r3, [r3, #2]
 801812a:	461a      	mov	r2, r3
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	881b      	ldrh	r3, [r3, #0]
 8018130:	1ad3      	subs	r3, r2, r3
 8018132:	08da      	lsrs	r2, r3, #3
 8018134:	68bb      	ldr	r3, [r7, #8]
 8018136:	881b      	ldrh	r3, [r3, #0]
 8018138:	4619      	mov	r1, r3
 801813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801813c:	fb91 f3f3 	sdiv	r3, r1, r3
 8018140:	08db      	lsrs	r3, r3, #3
 8018142:	4293      	cmp	r3, r2
 8018144:	bf28      	it	cs
 8018146:	4613      	movcs	r3, r2
 8018148:	627b      	str	r3, [r7, #36]	; 0x24
 801814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801814c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801814e:	fb02 f303 	mul.w	r3, r2, r3
 8018152:	623b      	str	r3, [r7, #32]
 8018154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018156:	2b00      	cmp	r3, #0
 8018158:	d10a      	bne.n	8018170 <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x74>
 801815a:	68bb      	ldr	r3, [r7, #8]
 801815c:	2200      	movs	r2, #0
 801815e:	801a      	strh	r2, [r3, #0]
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	2200      	movs	r2, #0
 8018164:	801a      	strh	r2, [r3, #0]
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	2200      	movs	r2, #0
 801816a:	809a      	strh	r2, [r3, #4]
 801816c:	2300      	movs	r3, #0
 801816e:	e0de      	b.n	801832e <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x232>
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	881a      	ldrh	r2, [r3, #0]
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	885b      	ldrh	r3, [r3, #2]
 8018178:	429a      	cmp	r2, r3
 801817a:	d90c      	bls.n	8018196 <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x9a>
 801817c:	4b6e      	ldr	r3, [pc, #440]	; (8018338 <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x23c>)
 801817e:	f240 52f3 	movw	r2, #1523	; 0x5f3
 8018182:	496e      	ldr	r1, [pc, #440]	; (801833c <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x240>)
 8018184:	486e      	ldr	r0, [pc, #440]	; (8018340 <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x244>)
 8018186:	f7f0 fd4f 	bl	8008c28 <xprintf>
 801818a:	2301      	movs	r3, #1
 801818c:	617b      	str	r3, [r7, #20]
 801818e:	bf00      	nop
 8018190:	697b      	ldr	r3, [r7, #20]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d1fc      	bne.n	8018190 <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x94>
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	881a      	ldrh	r2, [r3, #0]
 801819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801819c:	b29b      	uxth	r3, r3
 801819e:	00db      	lsls	r3, r3, #3
 80181a0:	b29b      	uxth	r3, r3
 80181a2:	4413      	add	r3, r2
 80181a4:	b29a      	uxth	r2, r3
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	801a      	strh	r2, [r3, #0]
 80181aa:	68bb      	ldr	r3, [r7, #8]
 80181ac:	881a      	ldrh	r2, [r3, #0]
 80181ae:	6a3b      	ldr	r3, [r7, #32]
 80181b0:	b29b      	uxth	r3, r3
 80181b2:	00db      	lsls	r3, r3, #3
 80181b4:	b29b      	uxth	r3, r3
 80181b6:	1ad3      	subs	r3, r2, r3
 80181b8:	b29a      	uxth	r2, r3
 80181ba:	68bb      	ldr	r3, [r7, #8]
 80181bc:	801a      	strh	r2, [r3, #0]
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	889a      	ldrh	r2, [r3, #4]
 80181c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c4:	b29b      	uxth	r3, r3
 80181c6:	00db      	lsls	r3, r3, #3
 80181c8:	b29b      	uxth	r3, r3
 80181ca:	4413      	add	r3, r2
 80181cc:	b29a      	uxth	r2, r3
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	809a      	strh	r2, [r3, #4]
 80181d2:	68bb      	ldr	r3, [r7, #8]
 80181d4:	889a      	ldrh	r2, [r3, #4]
 80181d6:	6a3b      	ldr	r3, [r7, #32]
 80181d8:	b29b      	uxth	r3, r3
 80181da:	00db      	lsls	r3, r3, #3
 80181dc:	b29b      	uxth	r3, r3
 80181de:	4413      	add	r3, r2
 80181e0:	b29a      	uxth	r2, r3
 80181e2:	68bb      	ldr	r3, [r7, #8]
 80181e4:	809a      	strh	r2, [r3, #4]
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	881a      	ldrh	r2, [r3, #0]
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	885b      	ldrh	r3, [r3, #2]
 80181ee:	429a      	cmp	r2, r3
 80181f0:	d93c      	bls.n	801826c <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x170>
 80181f2:	4b51      	ldr	r3, [pc, #324]	; (8018338 <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x23c>)
 80181f4:	f240 52f3 	movw	r2, #1523	; 0x5f3
 80181f8:	4950      	ldr	r1, [pc, #320]	; (801833c <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x240>)
 80181fa:	4851      	ldr	r0, [pc, #324]	; (8018340 <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x244>)
 80181fc:	f7f0 fd14 	bl	8008c28 <xprintf>
 8018200:	2301      	movs	r3, #1
 8018202:	613b      	str	r3, [r7, #16]
 8018204:	bf00      	nop
 8018206:	693b      	ldr	r3, [r7, #16]
 8018208:	2b00      	cmp	r3, #0
 801820a:	d1fc      	bne.n	8018206 <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x10a>
 801820c:	e02e      	b.n	801826c <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x170>
 801820e:	6a3a      	ldr	r2, [r7, #32]
 8018210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018212:	1ad3      	subs	r3, r2, r3
 8018214:	623b      	str	r3, [r7, #32]
 8018216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018218:	3b01      	subs	r3, #1
 801821a:	627b      	str	r3, [r7, #36]	; 0x24
 801821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801821e:	00db      	lsls	r3, r3, #3
 8018220:	69ba      	ldr	r2, [r7, #24]
 8018222:	4413      	add	r3, r2
 8018224:	6a3a      	ldr	r2, [r7, #32]
 8018226:	00d2      	lsls	r2, r2, #3
 8018228:	69f9      	ldr	r1, [r7, #28]
 801822a:	440a      	add	r2, r1
 801822c:	7812      	ldrb	r2, [r2, #0]
 801822e:	701a      	strb	r2, [r3, #0]
 8018230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018232:	00db      	lsls	r3, r3, #3
 8018234:	69ba      	ldr	r2, [r7, #24]
 8018236:	4413      	add	r3, r2
 8018238:	6a3a      	ldr	r2, [r7, #32]
 801823a:	00d2      	lsls	r2, r2, #3
 801823c:	69f9      	ldr	r1, [r7, #28]
 801823e:	440a      	add	r2, r1
 8018240:	7852      	ldrb	r2, [r2, #1]
 8018242:	705a      	strb	r2, [r3, #1]
 8018244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018246:	00db      	lsls	r3, r3, #3
 8018248:	69ba      	ldr	r2, [r7, #24]
 801824a:	4413      	add	r3, r2
 801824c:	6a3a      	ldr	r2, [r7, #32]
 801824e:	00d2      	lsls	r2, r2, #3
 8018250:	69f9      	ldr	r1, [r7, #28]
 8018252:	440a      	add	r2, r1
 8018254:	7912      	ldrb	r2, [r2, #4]
 8018256:	709a      	strb	r2, [r3, #2]
 8018258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801825a:	00db      	lsls	r3, r3, #3
 801825c:	69ba      	ldr	r2, [r7, #24]
 801825e:	4413      	add	r3, r2
 8018260:	6a3a      	ldr	r2, [r7, #32]
 8018262:	00d2      	lsls	r2, r2, #3
 8018264:	69f9      	ldr	r1, [r7, #28]
 8018266:	440a      	add	r2, r1
 8018268:	7952      	ldrb	r2, [r2, #5]
 801826a:	70da      	strb	r2, [r3, #3]
 801826c:	6a3b      	ldr	r3, [r7, #32]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d1cd      	bne.n	801820e <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x112>
 8018272:	683b      	ldr	r3, [r7, #0]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d018      	beq.n	80182aa <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x1ae>
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	881a      	ldrh	r2, [r3, #0]
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	885b      	ldrh	r3, [r3, #2]
 8018280:	429a      	cmp	r2, r3
 8018282:	d112      	bne.n	80182aa <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x1ae>
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	881a      	ldrh	r2, [r3, #0]
 8018288:	683b      	ldr	r3, [r7, #0]
 801828a:	801a      	strh	r2, [r3, #0]
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	889a      	ldrh	r2, [r3, #4]
 8018290:	683b      	ldr	r3, [r7, #0]
 8018292:	809a      	strh	r2, [r3, #4]
 8018294:	683b      	ldr	r3, [r7, #0]
 8018296:	f103 0014 	add.w	r0, r3, #20
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	f103 0114 	add.w	r1, r3, #20
 80182a0:	683b      	ldr	r3, [r7, #0]
 80182a2:	881b      	ldrh	r3, [r3, #0]
 80182a4:	461a      	mov	r2, r3
 80182a6:	f004 fecb 	bl	801d040 <memcpy>
 80182aa:	4a26      	ldr	r2, [pc, #152]	; (8018344 <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x248>)
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80182b2:	2b01      	cmp	r3, #1
 80182b4:	d132      	bne.n	801831c <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x220>
 80182b6:	4a24      	ldr	r2, [pc, #144]	; (8018348 <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x24c>)
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	4413      	add	r3, r2
 80182bc:	2208      	movs	r2, #8
 80182be:	701a      	strb	r2, [r3, #0]
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	015b      	lsls	r3, r3, #5
 80182c4:	4a21      	ldr	r2, [pc, #132]	; (801834c <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x250>)
 80182c6:	4413      	add	r3, r2
 80182c8:	2220      	movs	r2, #32
 80182ca:	2100      	movs	r1, #0
 80182cc:	4618      	mov	r0, r3
 80182ce:	f004 ff51 	bl	801d174 <memset>
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	015b      	lsls	r3, r3, #5
 80182d6:	4a1d      	ldr	r2, [pc, #116]	; (801834c <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x250>)
 80182d8:	4413      	add	r3, r2
 80182da:	69f9      	ldr	r1, [r7, #28]
 80182dc:	2208      	movs	r2, #8
 80182de:	4618      	mov	r0, r3
 80182e0:	f004 feae 	bl	801d040 <memcpy>
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	015b      	lsls	r3, r3, #5
 80182e8:	3310      	adds	r3, #16
 80182ea:	4a18      	ldr	r2, [pc, #96]	; (801834c <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x250>)
 80182ec:	4413      	add	r3, r2
 80182ee:	69b9      	ldr	r1, [r7, #24]
 80182f0:	2208      	movs	r2, #8
 80182f2:	4618      	mov	r0, r3
 80182f4:	f004 fea4 	bl	801d040 <memcpy>
 80182f8:	683b      	ldr	r3, [r7, #0]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d009      	beq.n	8018312 <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x216>
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	015b      	lsls	r3, r3, #5
 8018302:	3318      	adds	r3, #24
 8018304:	4a11      	ldr	r2, [pc, #68]	; (801834c <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x250>)
 8018306:	4413      	add	r3, r2
 8018308:	69b9      	ldr	r1, [r7, #24]
 801830a:	2208      	movs	r2, #8
 801830c:	4618      	mov	r0, r3
 801830e:	f004 fe97 	bl	801d040 <memcpy>
 8018312:	4a0c      	ldr	r2, [pc, #48]	; (8018344 <conv_ns_16L8L8N16P8P8N_to_16L16P32N+0x248>)
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	2100      	movs	r1, #0
 8018318:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	881a      	ldrh	r2, [r3, #0]
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	885b      	ldrh	r3, [r3, #2]
 8018324:	429a      	cmp	r2, r3
 8018326:	bf0c      	ite	eq
 8018328:	2301      	moveq	r3, #1
 801832a:	2300      	movne	r3, #0
 801832c:	b2db      	uxtb	r3, r3
 801832e:	4618      	mov	r0, r3
 8018330:	3728      	adds	r7, #40	; 0x28
 8018332:	46bd      	mov	sp, r7
 8018334:	bd80      	pop	{r7, pc}
 8018336:	bf00      	nop
 8018338:	0803ecd8 	.word	0x0803ecd8
 801833c:	0803ee22 	.word	0x0803ee22
 8018340:	0803f4f9 	.word	0x0803f4f9
 8018344:	100027ac 	.word	0x100027ac
 8018348:	10002e88 	.word	0x10002e88
 801834c:	10002e48 	.word	0x10002e48

08018350 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N>:
{
  //103 547
  SET_SLOT(1, 0, 1, 0);
  SET_SLOT(1, 1, 5, 4);
})
CONVERT_ROUTINE2(conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N, t_16L8L8N16P8P8N, t_16L16L32N,
 8018350:	b580      	push	{r7, lr}
 8018352:	b08c      	sub	sp, #48	; 0x30
 8018354:	af00      	add	r7, sp, #0
 8018356:	60f8      	str	r0, [r7, #12]
 8018358:	60b9      	str	r1, [r7, #8]
 801835a:	607a      	str	r2, [r7, #4]
 801835c:	603b      	str	r3, [r7, #0]
 801835e:	68bb      	ldr	r3, [r7, #8]
 8018360:	889b      	ldrh	r3, [r3, #4]
 8018362:	3310      	adds	r3, #16
 8018364:	68ba      	ldr	r2, [r7, #8]
 8018366:	4413      	add	r3, r2
 8018368:	3304      	adds	r3, #4
 801836a:	627b      	str	r3, [r7, #36]	; 0x24
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	889b      	ldrh	r3, [r3, #4]
 8018370:	3310      	adds	r3, #16
 8018372:	687a      	ldr	r2, [r7, #4]
 8018374:	4413      	add	r3, r2
 8018376:	3304      	adds	r3, #4
 8018378:	623b      	str	r3, [r7, #32]
 801837a:	683b      	ldr	r3, [r7, #0]
 801837c:	889b      	ldrh	r3, [r3, #4]
 801837e:	3310      	adds	r3, #16
 8018380:	683a      	ldr	r2, [r7, #0]
 8018382:	4413      	add	r3, r2
 8018384:	3304      	adds	r3, #4
 8018386:	61fb      	str	r3, [r7, #28]
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	885b      	ldrh	r3, [r3, #2]
 801838c:	461a      	mov	r2, r3
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	881b      	ldrh	r3, [r3, #0]
 8018392:	1ad3      	subs	r3, r2, r3
 8018394:	08da      	lsrs	r2, r3, #3
 8018396:	68bb      	ldr	r3, [r7, #8]
 8018398:	881b      	ldrh	r3, [r3, #0]
 801839a:	4619      	mov	r1, r3
 801839c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801839e:	005b      	lsls	r3, r3, #1
 80183a0:	fb91 f3f3 	sdiv	r3, r1, r3
 80183a4:	08db      	lsrs	r3, r3, #3
 80183a6:	4293      	cmp	r3, r2
 80183a8:	bf28      	it	cs
 80183aa:	4613      	movcs	r3, r2
 80183ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80183ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183b0:	005b      	lsls	r3, r3, #1
 80183b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183b4:	fb02 f303 	mul.w	r3, r2, r3
 80183b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80183ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d110      	bne.n	80183e2 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x92>
 80183c0:	68bb      	ldr	r3, [r7, #8]
 80183c2:	2200      	movs	r2, #0
 80183c4:	801a      	strh	r2, [r3, #0]
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	2200      	movs	r2, #0
 80183ca:	801a      	strh	r2, [r3, #0]
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	2200      	movs	r2, #0
 80183d0:	809a      	strh	r2, [r3, #4]
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	2200      	movs	r2, #0
 80183d6:	801a      	strh	r2, [r3, #0]
 80183d8:	683b      	ldr	r3, [r7, #0]
 80183da:	2200      	movs	r2, #0
 80183dc:	809a      	strh	r2, [r3, #4]
 80183de:	2300      	movs	r3, #0
 80183e0:	e0dc      	b.n	801859c <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x24c>
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	881a      	ldrh	r2, [r3, #0]
 80183e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183e8:	b29b      	uxth	r3, r3
 80183ea:	00db      	lsls	r3, r3, #3
 80183ec:	b29b      	uxth	r3, r3
 80183ee:	4413      	add	r3, r2
 80183f0:	b29a      	uxth	r2, r3
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	801a      	strh	r2, [r3, #0]
 80183f6:	683b      	ldr	r3, [r7, #0]
 80183f8:	881a      	ldrh	r2, [r3, #0]
 80183fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183fc:	b29b      	uxth	r3, r3
 80183fe:	00db      	lsls	r3, r3, #3
 8018400:	b29b      	uxth	r3, r3
 8018402:	4413      	add	r3, r2
 8018404:	b29a      	uxth	r2, r3
 8018406:	683b      	ldr	r3, [r7, #0]
 8018408:	801a      	strh	r2, [r3, #0]
 801840a:	68bb      	ldr	r3, [r7, #8]
 801840c:	881a      	ldrh	r2, [r3, #0]
 801840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018410:	b29b      	uxth	r3, r3
 8018412:	00db      	lsls	r3, r3, #3
 8018414:	b29b      	uxth	r3, r3
 8018416:	1ad3      	subs	r3, r2, r3
 8018418:	b29a      	uxth	r2, r3
 801841a:	68bb      	ldr	r3, [r7, #8]
 801841c:	801a      	strh	r2, [r3, #0]
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	889a      	ldrh	r2, [r3, #4]
 8018422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018424:	b29b      	uxth	r3, r3
 8018426:	00db      	lsls	r3, r3, #3
 8018428:	b29b      	uxth	r3, r3
 801842a:	4413      	add	r3, r2
 801842c:	b29a      	uxth	r2, r3
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	809a      	strh	r2, [r3, #4]
 8018432:	683b      	ldr	r3, [r7, #0]
 8018434:	889a      	ldrh	r2, [r3, #4]
 8018436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018438:	b29b      	uxth	r3, r3
 801843a:	00db      	lsls	r3, r3, #3
 801843c:	b29b      	uxth	r3, r3
 801843e:	4413      	add	r3, r2
 8018440:	b29a      	uxth	r2, r3
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	809a      	strh	r2, [r3, #4]
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	889a      	ldrh	r2, [r3, #4]
 801844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801844c:	b29b      	uxth	r3, r3
 801844e:	00db      	lsls	r3, r3, #3
 8018450:	b29b      	uxth	r3, r3
 8018452:	4413      	add	r3, r2
 8018454:	b29a      	uxth	r2, r3
 8018456:	68bb      	ldr	r3, [r7, #8]
 8018458:	809a      	strh	r2, [r3, #4]
 801845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801845c:	2b00      	cmp	r3, #0
 801845e:	d10c      	bne.n	801847a <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x12a>
 8018460:	4b50      	ldr	r3, [pc, #320]	; (80185a4 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x254>)
 8018462:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8018466:	4950      	ldr	r1, [pc, #320]	; (80185a8 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x258>)
 8018468:	4850      	ldr	r0, [pc, #320]	; (80185ac <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x25c>)
 801846a:	f7f0 fbdd 	bl	8008c28 <xprintf>
 801846e:	2301      	movs	r3, #1
 8018470:	61bb      	str	r3, [r7, #24]
 8018472:	bf00      	nop
 8018474:	69bb      	ldr	r3, [r7, #24]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d1fc      	bne.n	8018474 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x124>
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	881a      	ldrh	r2, [r3, #0]
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	885b      	ldrh	r3, [r3, #2]
 8018482:	429a      	cmp	r2, r3
 8018484:	d93d      	bls.n	8018502 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x1b2>
 8018486:	4b4a      	ldr	r3, [pc, #296]	; (80185b0 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x260>)
 8018488:	f240 52f9 	movw	r2, #1529	; 0x5f9
 801848c:	4946      	ldr	r1, [pc, #280]	; (80185a8 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x258>)
 801848e:	4847      	ldr	r0, [pc, #284]	; (80185ac <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x25c>)
 8018490:	f7f0 fbca 	bl	8008c28 <xprintf>
 8018494:	2301      	movs	r3, #1
 8018496:	617b      	str	r3, [r7, #20]
 8018498:	bf00      	nop
 801849a:	697b      	ldr	r3, [r7, #20]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d1fc      	bne.n	801849a <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x14a>
 80184a0:	e02f      	b.n	8018502 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x1b2>
 80184a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184a4:	005b      	lsls	r3, r3, #1
 80184a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184a8:	1ad3      	subs	r3, r2, r3
 80184aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80184ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184ae:	3b01      	subs	r3, #1
 80184b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80184b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184b4:	00db      	lsls	r3, r3, #3
 80184b6:	6a3a      	ldr	r2, [r7, #32]
 80184b8:	4413      	add	r3, r2
 80184ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184bc:	00d2      	lsls	r2, r2, #3
 80184be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80184c0:	440a      	add	r2, r1
 80184c2:	7812      	ldrb	r2, [r2, #0]
 80184c4:	701a      	strb	r2, [r3, #0]
 80184c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184c8:	00db      	lsls	r3, r3, #3
 80184ca:	6a3a      	ldr	r2, [r7, #32]
 80184cc:	4413      	add	r3, r2
 80184ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184d0:	00d2      	lsls	r2, r2, #3
 80184d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80184d4:	440a      	add	r2, r1
 80184d6:	7852      	ldrb	r2, [r2, #1]
 80184d8:	705a      	strb	r2, [r3, #1]
 80184da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184dc:	00db      	lsls	r3, r3, #3
 80184de:	69fa      	ldr	r2, [r7, #28]
 80184e0:	4413      	add	r3, r2
 80184e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184e4:	00d2      	lsls	r2, r2, #3
 80184e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80184e8:	440a      	add	r2, r1
 80184ea:	7912      	ldrb	r2, [r2, #4]
 80184ec:	701a      	strb	r2, [r3, #0]
 80184ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184f0:	00db      	lsls	r3, r3, #3
 80184f2:	69fa      	ldr	r2, [r7, #28]
 80184f4:	4413      	add	r3, r2
 80184f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184f8:	00d2      	lsls	r2, r2, #3
 80184fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80184fc:	440a      	add	r2, r1
 80184fe:	7952      	ldrb	r2, [r2, #5]
 8018500:	705a      	strb	r2, [r3, #1]
 8018502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018504:	2b00      	cmp	r3, #0
 8018506:	d1cc      	bne.n	80184a2 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x152>
 8018508:	4a2a      	ldr	r2, [pc, #168]	; (80185b4 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x264>)
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018510:	2b01      	cmp	r3, #1
 8018512:	d13a      	bne.n	801858a <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x23a>
 8018514:	4a28      	ldr	r2, [pc, #160]	; (80185b8 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x268>)
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	4413      	add	r3, r2
 801851a:	2208      	movs	r2, #8
 801851c:	701a      	strb	r2, [r3, #0]
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	015b      	lsls	r3, r3, #5
 8018522:	4a26      	ldr	r2, [pc, #152]	; (80185bc <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x26c>)
 8018524:	4413      	add	r3, r2
 8018526:	2220      	movs	r2, #32
 8018528:	2100      	movs	r1, #0
 801852a:	4618      	mov	r0, r3
 801852c:	f004 fe22 	bl	801d174 <memset>
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	015b      	lsls	r3, r3, #5
 8018534:	4a21      	ldr	r2, [pc, #132]	; (80185bc <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x26c>)
 8018536:	4413      	add	r3, r2
 8018538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801853a:	2208      	movs	r2, #8
 801853c:	4618      	mov	r0, r3
 801853e:	f004 fd7f 	bl	801d040 <memcpy>
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	015b      	lsls	r3, r3, #5
 8018546:	3308      	adds	r3, #8
 8018548:	4a1c      	ldr	r2, [pc, #112]	; (80185bc <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x26c>)
 801854a:	1898      	adds	r0, r3, r2
 801854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801854e:	3308      	adds	r3, #8
 8018550:	2208      	movs	r2, #8
 8018552:	4619      	mov	r1, r3
 8018554:	f004 fd74 	bl	801d040 <memcpy>
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	015b      	lsls	r3, r3, #5
 801855c:	3310      	adds	r3, #16
 801855e:	4a17      	ldr	r2, [pc, #92]	; (80185bc <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x26c>)
 8018560:	4413      	add	r3, r2
 8018562:	6a39      	ldr	r1, [r7, #32]
 8018564:	2208      	movs	r2, #8
 8018566:	4618      	mov	r0, r3
 8018568:	f004 fd6a 	bl	801d040 <memcpy>
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	015b      	lsls	r3, r3, #5
 8018570:	3318      	adds	r3, #24
 8018572:	4a12      	ldr	r2, [pc, #72]	; (80185bc <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x26c>)
 8018574:	4413      	add	r3, r2
 8018576:	69f9      	ldr	r1, [r7, #28]
 8018578:	2208      	movs	r2, #8
 801857a:	4618      	mov	r0, r3
 801857c:	f004 fd60 	bl	801d040 <memcpy>
 8018580:	4a0c      	ldr	r2, [pc, #48]	; (80185b4 <conv_ds_16L8L8N16P8P8N_to_16L16L32N_16P16P32N+0x264>)
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	2100      	movs	r1, #0
 8018586:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	881a      	ldrh	r2, [r3, #0]
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	885b      	ldrh	r3, [r3, #2]
 8018592:	429a      	cmp	r2, r3
 8018594:	bf0c      	ite	eq
 8018596:	2301      	moveq	r3, #1
 8018598:	2300      	movne	r3, #0
 801859a:	b2db      	uxtb	r3, r3
 801859c:	4618      	mov	r0, r3
 801859e:	3730      	adds	r7, #48	; 0x30
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bd80      	pop	{r7, pc}
 80185a4:	0803ed00 	.word	0x0803ed00
 80185a8:	0803ee46 	.word	0x0803ee46
 80185ac:	0803f4f9 	.word	0x0803f4f9
 80185b0:	0803ecd8 	.word	0x0803ecd8
 80185b4:	100027ac 	.word	0x100027ac
 80185b8:	10002e88 	.word	0x10002e88
 80185bc:	10002e48 	.word	0x10002e48

080185c0 <conv_ns_24L24P_to_24L24P16N>:
  SET_SLOT(1, 0, 1, 0);
  SET_SLOT(2, 0, 5, 4);
})

//Tryb kablowy lub FullHD 24bit
CONVERT_ROUTINE1(conv_ns_24L24P_to_24L24P16N, t_24L24P, t_24L24P16N,
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b08a      	sub	sp, #40	; 0x28
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	60f8      	str	r0, [r7, #12]
 80185c8:	60b9      	str	r1, [r7, #8]
 80185ca:	607a      	str	r2, [r7, #4]
 80185cc:	603b      	str	r3, [r7, #0]
 80185ce:	68bb      	ldr	r3, [r7, #8]
 80185d0:	889b      	ldrh	r3, [r3, #4]
 80185d2:	3310      	adds	r3, #16
 80185d4:	68ba      	ldr	r2, [r7, #8]
 80185d6:	4413      	add	r3, r2
 80185d8:	3304      	adds	r3, #4
 80185da:	61fb      	str	r3, [r7, #28]
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	889b      	ldrh	r3, [r3, #4]
 80185e0:	3310      	adds	r3, #16
 80185e2:	687a      	ldr	r2, [r7, #4]
 80185e4:	4413      	add	r3, r2
 80185e6:	3304      	adds	r3, #4
 80185e8:	61bb      	str	r3, [r7, #24]
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	885b      	ldrh	r3, [r3, #2]
 80185ee:	461a      	mov	r2, r3
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	881b      	ldrh	r3, [r3, #0]
 80185f4:	1ad3      	subs	r3, r2, r3
 80185f6:	08da      	lsrs	r2, r3, #3
 80185f8:	68bb      	ldr	r3, [r7, #8]
 80185fa:	881b      	ldrh	r3, [r3, #0]
 80185fc:	4619      	mov	r1, r3
 80185fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018600:	fb91 f3f3 	sdiv	r3, r1, r3
 8018604:	4619      	mov	r1, r3
 8018606:	4b98      	ldr	r3, [pc, #608]	; (8018868 <conv_ns_24L24P_to_24L24P16N+0x2a8>)
 8018608:	fba3 1301 	umull	r1, r3, r3, r1
 801860c:	089b      	lsrs	r3, r3, #2
 801860e:	4293      	cmp	r3, r2
 8018610:	bf28      	it	cs
 8018612:	4613      	movcs	r3, r2
 8018614:	627b      	str	r3, [r7, #36]	; 0x24
 8018616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801861a:	fb02 f303 	mul.w	r3, r2, r3
 801861e:	623b      	str	r3, [r7, #32]
 8018620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018622:	2b00      	cmp	r3, #0
 8018624:	d10a      	bne.n	801863c <conv_ns_24L24P_to_24L24P16N+0x7c>
 8018626:	68bb      	ldr	r3, [r7, #8]
 8018628:	2200      	movs	r2, #0
 801862a:	801a      	strh	r2, [r3, #0]
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	2200      	movs	r2, #0
 8018630:	801a      	strh	r2, [r3, #0]
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	2200      	movs	r2, #0
 8018636:	809a      	strh	r2, [r3, #4]
 8018638:	2300      	movs	r3, #0
 801863a:	e110      	b.n	801885e <conv_ns_24L24P_to_24L24P16N+0x29e>
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	881a      	ldrh	r2, [r3, #0]
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	885b      	ldrh	r3, [r3, #2]
 8018644:	429a      	cmp	r2, r3
 8018646:	d90c      	bls.n	8018662 <conv_ns_24L24P_to_24L24P16N+0xa2>
 8018648:	4b88      	ldr	r3, [pc, #544]	; (801886c <conv_ns_24L24P_to_24L24P16N+0x2ac>)
 801864a:	f240 6202 	movw	r2, #1538	; 0x602
 801864e:	4988      	ldr	r1, [pc, #544]	; (8018870 <conv_ns_24L24P_to_24L24P16N+0x2b0>)
 8018650:	4888      	ldr	r0, [pc, #544]	; (8018874 <conv_ns_24L24P_to_24L24P16N+0x2b4>)
 8018652:	f7f0 fae9 	bl	8008c28 <xprintf>
 8018656:	2301      	movs	r3, #1
 8018658:	617b      	str	r3, [r7, #20]
 801865a:	bf00      	nop
 801865c:	697b      	ldr	r3, [r7, #20]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d1fc      	bne.n	801865c <conv_ns_24L24P_to_24L24P16N+0x9c>
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	881a      	ldrh	r2, [r3, #0]
 8018666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018668:	b29b      	uxth	r3, r3
 801866a:	00db      	lsls	r3, r3, #3
 801866c:	b29b      	uxth	r3, r3
 801866e:	4413      	add	r3, r2
 8018670:	b29a      	uxth	r2, r3
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	801a      	strh	r2, [r3, #0]
 8018676:	68bb      	ldr	r3, [r7, #8]
 8018678:	881a      	ldrh	r2, [r3, #0]
 801867a:	6a3b      	ldr	r3, [r7, #32]
 801867c:	b29b      	uxth	r3, r3
 801867e:	4619      	mov	r1, r3
 8018680:	0049      	lsls	r1, r1, #1
 8018682:	440b      	add	r3, r1
 8018684:	005b      	lsls	r3, r3, #1
 8018686:	b29b      	uxth	r3, r3
 8018688:	1ad3      	subs	r3, r2, r3
 801868a:	b29a      	uxth	r2, r3
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	801a      	strh	r2, [r3, #0]
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	889a      	ldrh	r2, [r3, #4]
 8018694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018696:	b29b      	uxth	r3, r3
 8018698:	00db      	lsls	r3, r3, #3
 801869a:	b29b      	uxth	r3, r3
 801869c:	4413      	add	r3, r2
 801869e:	b29a      	uxth	r2, r3
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	809a      	strh	r2, [r3, #4]
 80186a4:	68bb      	ldr	r3, [r7, #8]
 80186a6:	889a      	ldrh	r2, [r3, #4]
 80186a8:	6a3b      	ldr	r3, [r7, #32]
 80186aa:	b29b      	uxth	r3, r3
 80186ac:	4619      	mov	r1, r3
 80186ae:	0049      	lsls	r1, r1, #1
 80186b0:	440b      	add	r3, r1
 80186b2:	005b      	lsls	r3, r3, #1
 80186b4:	b29b      	uxth	r3, r3
 80186b6:	4413      	add	r3, r2
 80186b8:	b29a      	uxth	r2, r3
 80186ba:	68bb      	ldr	r3, [r7, #8]
 80186bc:	809a      	strh	r2, [r3, #4]
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	881a      	ldrh	r2, [r3, #0]
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	885b      	ldrh	r3, [r3, #2]
 80186c6:	429a      	cmp	r2, r3
 80186c8:	d968      	bls.n	801879c <conv_ns_24L24P_to_24L24P16N+0x1dc>
 80186ca:	4b68      	ldr	r3, [pc, #416]	; (801886c <conv_ns_24L24P_to_24L24P16N+0x2ac>)
 80186cc:	f240 6202 	movw	r2, #1538	; 0x602
 80186d0:	4967      	ldr	r1, [pc, #412]	; (8018870 <conv_ns_24L24P_to_24L24P16N+0x2b0>)
 80186d2:	4868      	ldr	r0, [pc, #416]	; (8018874 <conv_ns_24L24P_to_24L24P16N+0x2b4>)
 80186d4:	f7f0 faa8 	bl	8008c28 <xprintf>
 80186d8:	2301      	movs	r3, #1
 80186da:	613b      	str	r3, [r7, #16]
 80186dc:	bf00      	nop
 80186de:	693b      	ldr	r3, [r7, #16]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d1fc      	bne.n	80186de <conv_ns_24L24P_to_24L24P16N+0x11e>
 80186e4:	e05a      	b.n	801879c <conv_ns_24L24P_to_24L24P16N+0x1dc>
 80186e6:	6a3a      	ldr	r2, [r7, #32]
 80186e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ea:	1ad3      	subs	r3, r2, r3
 80186ec:	623b      	str	r3, [r7, #32]
 80186ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186f0:	3b01      	subs	r3, #1
 80186f2:	627b      	str	r3, [r7, #36]	; 0x24
 80186f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186f6:	00db      	lsls	r3, r3, #3
 80186f8:	69ba      	ldr	r2, [r7, #24]
 80186fa:	18d1      	adds	r1, r2, r3
 80186fc:	6a3a      	ldr	r2, [r7, #32]
 80186fe:	4613      	mov	r3, r2
 8018700:	005b      	lsls	r3, r3, #1
 8018702:	4413      	add	r3, r2
 8018704:	005b      	lsls	r3, r3, #1
 8018706:	461a      	mov	r2, r3
 8018708:	69fb      	ldr	r3, [r7, #28]
 801870a:	4413      	add	r3, r2
 801870c:	785b      	ldrb	r3, [r3, #1]
 801870e:	700b      	strb	r3, [r1, #0]
 8018710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018712:	00db      	lsls	r3, r3, #3
 8018714:	69ba      	ldr	r2, [r7, #24]
 8018716:	18d1      	adds	r1, r2, r3
 8018718:	6a3a      	ldr	r2, [r7, #32]
 801871a:	4613      	mov	r3, r2
 801871c:	005b      	lsls	r3, r3, #1
 801871e:	4413      	add	r3, r2
 8018720:	005b      	lsls	r3, r3, #1
 8018722:	461a      	mov	r2, r3
 8018724:	69fb      	ldr	r3, [r7, #28]
 8018726:	4413      	add	r3, r2
 8018728:	789b      	ldrb	r3, [r3, #2]
 801872a:	704b      	strb	r3, [r1, #1]
 801872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801872e:	00db      	lsls	r3, r3, #3
 8018730:	69ba      	ldr	r2, [r7, #24]
 8018732:	18d1      	adds	r1, r2, r3
 8018734:	6a3a      	ldr	r2, [r7, #32]
 8018736:	4613      	mov	r3, r2
 8018738:	005b      	lsls	r3, r3, #1
 801873a:	4413      	add	r3, r2
 801873c:	005b      	lsls	r3, r3, #1
 801873e:	461a      	mov	r2, r3
 8018740:	69fb      	ldr	r3, [r7, #28]
 8018742:	4413      	add	r3, r2
 8018744:	795b      	ldrb	r3, [r3, #5]
 8018746:	708b      	strb	r3, [r1, #2]
 8018748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801874a:	00db      	lsls	r3, r3, #3
 801874c:	69ba      	ldr	r2, [r7, #24]
 801874e:	18d1      	adds	r1, r2, r3
 8018750:	6a3a      	ldr	r2, [r7, #32]
 8018752:	4613      	mov	r3, r2
 8018754:	005b      	lsls	r3, r3, #1
 8018756:	4413      	add	r3, r2
 8018758:	005b      	lsls	r3, r3, #1
 801875a:	461a      	mov	r2, r3
 801875c:	69fb      	ldr	r3, [r7, #28]
 801875e:	4413      	add	r3, r2
 8018760:	781b      	ldrb	r3, [r3, #0]
 8018762:	70cb      	strb	r3, [r1, #3]
 8018764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018766:	00db      	lsls	r3, r3, #3
 8018768:	69ba      	ldr	r2, [r7, #24]
 801876a:	18d1      	adds	r1, r2, r3
 801876c:	6a3a      	ldr	r2, [r7, #32]
 801876e:	4613      	mov	r3, r2
 8018770:	005b      	lsls	r3, r3, #1
 8018772:	4413      	add	r3, r2
 8018774:	005b      	lsls	r3, r3, #1
 8018776:	461a      	mov	r2, r3
 8018778:	69fb      	ldr	r3, [r7, #28]
 801877a:	4413      	add	r3, r2
 801877c:	78db      	ldrb	r3, [r3, #3]
 801877e:	710b      	strb	r3, [r1, #4]
 8018780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018782:	00db      	lsls	r3, r3, #3
 8018784:	69ba      	ldr	r2, [r7, #24]
 8018786:	18d1      	adds	r1, r2, r3
 8018788:	6a3a      	ldr	r2, [r7, #32]
 801878a:	4613      	mov	r3, r2
 801878c:	005b      	lsls	r3, r3, #1
 801878e:	4413      	add	r3, r2
 8018790:	005b      	lsls	r3, r3, #1
 8018792:	461a      	mov	r2, r3
 8018794:	69fb      	ldr	r3, [r7, #28]
 8018796:	4413      	add	r3, r2
 8018798:	791b      	ldrb	r3, [r3, #4]
 801879a:	714b      	strb	r3, [r1, #5]
 801879c:	6a3b      	ldr	r3, [r7, #32]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d1a1      	bne.n	80186e6 <conv_ns_24L24P_to_24L24P16N+0x126>
 80187a2:	683b      	ldr	r3, [r7, #0]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d018      	beq.n	80187da <conv_ns_24L24P_to_24L24P16N+0x21a>
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	881a      	ldrh	r2, [r3, #0]
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	885b      	ldrh	r3, [r3, #2]
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d112      	bne.n	80187da <conv_ns_24L24P_to_24L24P16N+0x21a>
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	881a      	ldrh	r2, [r3, #0]
 80187b8:	683b      	ldr	r3, [r7, #0]
 80187ba:	801a      	strh	r2, [r3, #0]
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	889a      	ldrh	r2, [r3, #4]
 80187c0:	683b      	ldr	r3, [r7, #0]
 80187c2:	809a      	strh	r2, [r3, #4]
 80187c4:	683b      	ldr	r3, [r7, #0]
 80187c6:	f103 0014 	add.w	r0, r3, #20
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	f103 0114 	add.w	r1, r3, #20
 80187d0:	683b      	ldr	r3, [r7, #0]
 80187d2:	881b      	ldrh	r3, [r3, #0]
 80187d4:	461a      	mov	r2, r3
 80187d6:	f004 fc33 	bl	801d040 <memcpy>
 80187da:	4a27      	ldr	r2, [pc, #156]	; (8018878 <conv_ns_24L24P_to_24L24P16N+0x2b8>)
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80187e2:	2b01      	cmp	r3, #1
 80187e4:	d132      	bne.n	801884c <conv_ns_24L24P_to_24L24P16N+0x28c>
 80187e6:	4a25      	ldr	r2, [pc, #148]	; (801887c <conv_ns_24L24P_to_24L24P16N+0x2bc>)
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	4413      	add	r3, r2
 80187ec:	2206      	movs	r2, #6
 80187ee:	701a      	strb	r2, [r3, #0]
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	015b      	lsls	r3, r3, #5
 80187f4:	4a22      	ldr	r2, [pc, #136]	; (8018880 <conv_ns_24L24P_to_24L24P16N+0x2c0>)
 80187f6:	4413      	add	r3, r2
 80187f8:	2220      	movs	r2, #32
 80187fa:	2100      	movs	r1, #0
 80187fc:	4618      	mov	r0, r3
 80187fe:	f004 fcb9 	bl	801d174 <memset>
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	015b      	lsls	r3, r3, #5
 8018806:	4a1e      	ldr	r2, [pc, #120]	; (8018880 <conv_ns_24L24P_to_24L24P16N+0x2c0>)
 8018808:	4413      	add	r3, r2
 801880a:	69f9      	ldr	r1, [r7, #28]
 801880c:	2206      	movs	r2, #6
 801880e:	4618      	mov	r0, r3
 8018810:	f004 fc16 	bl	801d040 <memcpy>
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	015b      	lsls	r3, r3, #5
 8018818:	3310      	adds	r3, #16
 801881a:	4a19      	ldr	r2, [pc, #100]	; (8018880 <conv_ns_24L24P_to_24L24P16N+0x2c0>)
 801881c:	4413      	add	r3, r2
 801881e:	69b9      	ldr	r1, [r7, #24]
 8018820:	2208      	movs	r2, #8
 8018822:	4618      	mov	r0, r3
 8018824:	f004 fc0c 	bl	801d040 <memcpy>
 8018828:	683b      	ldr	r3, [r7, #0]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d009      	beq.n	8018842 <conv_ns_24L24P_to_24L24P16N+0x282>
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	015b      	lsls	r3, r3, #5
 8018832:	3318      	adds	r3, #24
 8018834:	4a12      	ldr	r2, [pc, #72]	; (8018880 <conv_ns_24L24P_to_24L24P16N+0x2c0>)
 8018836:	4413      	add	r3, r2
 8018838:	69b9      	ldr	r1, [r7, #24]
 801883a:	2208      	movs	r2, #8
 801883c:	4618      	mov	r0, r3
 801883e:	f004 fbff 	bl	801d040 <memcpy>
 8018842:	4a0d      	ldr	r2, [pc, #52]	; (8018878 <conv_ns_24L24P_to_24L24P16N+0x2b8>)
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	2100      	movs	r1, #0
 8018848:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	881a      	ldrh	r2, [r3, #0]
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	885b      	ldrh	r3, [r3, #2]
 8018854:	429a      	cmp	r2, r3
 8018856:	bf0c      	ite	eq
 8018858:	2301      	moveq	r3, #1
 801885a:	2300      	movne	r3, #0
 801885c:	b2db      	uxtb	r3, r3
 801885e:	4618      	mov	r0, r3
 8018860:	3728      	adds	r7, #40	; 0x28
 8018862:	46bd      	mov	sp, r7
 8018864:	bd80      	pop	{r7, pc}
 8018866:	bf00      	nop
 8018868:	aaaaaaab 	.word	0xaaaaaaab
 801886c:	0803ecd8 	.word	0x0803ecd8
 8018870:	0803ee74 	.word	0x0803ee74
 8018874:	0803f4f9 	.word	0x0803f4f9
 8018878:	100027ac 	.word	0x100027ac
 801887c:	10002e88 	.word	0x10002e88
 8018880:	10002e48 	.word	0x10002e48

08018884 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N>:
  //210 543
  SET_SLOT(1, 0, 2, 1);
  SET_SLOT(1, 1, 0, 5);
  SET_SLOT(1, 2, 4, 3);
})
CONVERT_ROUTINE1(conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N, t_24L24P, t_16L16P8L8P16N,
 8018884:	b580      	push	{r7, lr}
 8018886:	b08a      	sub	sp, #40	; 0x28
 8018888:	af00      	add	r7, sp, #0
 801888a:	60f8      	str	r0, [r7, #12]
 801888c:	60b9      	str	r1, [r7, #8]
 801888e:	607a      	str	r2, [r7, #4]
 8018890:	603b      	str	r3, [r7, #0]
 8018892:	68bb      	ldr	r3, [r7, #8]
 8018894:	889b      	ldrh	r3, [r3, #4]
 8018896:	3310      	adds	r3, #16
 8018898:	68ba      	ldr	r2, [r7, #8]
 801889a:	4413      	add	r3, r2
 801889c:	3304      	adds	r3, #4
 801889e:	61fb      	str	r3, [r7, #28]
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	889b      	ldrh	r3, [r3, #4]
 80188a4:	3310      	adds	r3, #16
 80188a6:	687a      	ldr	r2, [r7, #4]
 80188a8:	4413      	add	r3, r2
 80188aa:	3304      	adds	r3, #4
 80188ac:	61bb      	str	r3, [r7, #24]
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	885b      	ldrh	r3, [r3, #2]
 80188b2:	461a      	mov	r2, r3
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	881b      	ldrh	r3, [r3, #0]
 80188b8:	1ad3      	subs	r3, r2, r3
 80188ba:	08da      	lsrs	r2, r3, #3
 80188bc:	68bb      	ldr	r3, [r7, #8]
 80188be:	881b      	ldrh	r3, [r3, #0]
 80188c0:	4619      	mov	r1, r3
 80188c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188c4:	fb91 f3f3 	sdiv	r3, r1, r3
 80188c8:	4619      	mov	r1, r3
 80188ca:	4b98      	ldr	r3, [pc, #608]	; (8018b2c <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2a8>)
 80188cc:	fba3 1301 	umull	r1, r3, r3, r1
 80188d0:	089b      	lsrs	r3, r3, #2
 80188d2:	4293      	cmp	r3, r2
 80188d4:	bf28      	it	cs
 80188d6:	4613      	movcs	r3, r2
 80188d8:	627b      	str	r3, [r7, #36]	; 0x24
 80188da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188de:	fb02 f303 	mul.w	r3, r2, r3
 80188e2:	623b      	str	r3, [r7, #32]
 80188e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d10a      	bne.n	8018900 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x7c>
 80188ea:	68bb      	ldr	r3, [r7, #8]
 80188ec:	2200      	movs	r2, #0
 80188ee:	801a      	strh	r2, [r3, #0]
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	2200      	movs	r2, #0
 80188f4:	801a      	strh	r2, [r3, #0]
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	2200      	movs	r2, #0
 80188fa:	809a      	strh	r2, [r3, #4]
 80188fc:	2300      	movs	r3, #0
 80188fe:	e110      	b.n	8018b22 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x29e>
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	881a      	ldrh	r2, [r3, #0]
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	885b      	ldrh	r3, [r3, #2]
 8018908:	429a      	cmp	r2, r3
 801890a:	d90c      	bls.n	8018926 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0xa2>
 801890c:	4b88      	ldr	r3, [pc, #544]	; (8018b30 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2ac>)
 801890e:	f240 6209 	movw	r2, #1545	; 0x609
 8018912:	4988      	ldr	r1, [pc, #544]	; (8018b34 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2b0>)
 8018914:	4888      	ldr	r0, [pc, #544]	; (8018b38 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2b4>)
 8018916:	f7f0 f987 	bl	8008c28 <xprintf>
 801891a:	2301      	movs	r3, #1
 801891c:	617b      	str	r3, [r7, #20]
 801891e:	bf00      	nop
 8018920:	697b      	ldr	r3, [r7, #20]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d1fc      	bne.n	8018920 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x9c>
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	881a      	ldrh	r2, [r3, #0]
 801892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801892c:	b29b      	uxth	r3, r3
 801892e:	00db      	lsls	r3, r3, #3
 8018930:	b29b      	uxth	r3, r3
 8018932:	4413      	add	r3, r2
 8018934:	b29a      	uxth	r2, r3
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	801a      	strh	r2, [r3, #0]
 801893a:	68bb      	ldr	r3, [r7, #8]
 801893c:	881a      	ldrh	r2, [r3, #0]
 801893e:	6a3b      	ldr	r3, [r7, #32]
 8018940:	b29b      	uxth	r3, r3
 8018942:	4619      	mov	r1, r3
 8018944:	0049      	lsls	r1, r1, #1
 8018946:	440b      	add	r3, r1
 8018948:	005b      	lsls	r3, r3, #1
 801894a:	b29b      	uxth	r3, r3
 801894c:	1ad3      	subs	r3, r2, r3
 801894e:	b29a      	uxth	r2, r3
 8018950:	68bb      	ldr	r3, [r7, #8]
 8018952:	801a      	strh	r2, [r3, #0]
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	889a      	ldrh	r2, [r3, #4]
 8018958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801895a:	b29b      	uxth	r3, r3
 801895c:	00db      	lsls	r3, r3, #3
 801895e:	b29b      	uxth	r3, r3
 8018960:	4413      	add	r3, r2
 8018962:	b29a      	uxth	r2, r3
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	809a      	strh	r2, [r3, #4]
 8018968:	68bb      	ldr	r3, [r7, #8]
 801896a:	889a      	ldrh	r2, [r3, #4]
 801896c:	6a3b      	ldr	r3, [r7, #32]
 801896e:	b29b      	uxth	r3, r3
 8018970:	4619      	mov	r1, r3
 8018972:	0049      	lsls	r1, r1, #1
 8018974:	440b      	add	r3, r1
 8018976:	005b      	lsls	r3, r3, #1
 8018978:	b29b      	uxth	r3, r3
 801897a:	4413      	add	r3, r2
 801897c:	b29a      	uxth	r2, r3
 801897e:	68bb      	ldr	r3, [r7, #8]
 8018980:	809a      	strh	r2, [r3, #4]
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	881a      	ldrh	r2, [r3, #0]
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	885b      	ldrh	r3, [r3, #2]
 801898a:	429a      	cmp	r2, r3
 801898c:	d968      	bls.n	8018a60 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x1dc>
 801898e:	4b68      	ldr	r3, [pc, #416]	; (8018b30 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2ac>)
 8018990:	f240 6209 	movw	r2, #1545	; 0x609
 8018994:	4967      	ldr	r1, [pc, #412]	; (8018b34 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2b0>)
 8018996:	4868      	ldr	r0, [pc, #416]	; (8018b38 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2b4>)
 8018998:	f7f0 f946 	bl	8008c28 <xprintf>
 801899c:	2301      	movs	r3, #1
 801899e:	613b      	str	r3, [r7, #16]
 80189a0:	bf00      	nop
 80189a2:	693b      	ldr	r3, [r7, #16]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d1fc      	bne.n	80189a2 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x11e>
 80189a8:	e05a      	b.n	8018a60 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x1dc>
 80189aa:	6a3a      	ldr	r2, [r7, #32]
 80189ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189ae:	1ad3      	subs	r3, r2, r3
 80189b0:	623b      	str	r3, [r7, #32]
 80189b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189b4:	3b01      	subs	r3, #1
 80189b6:	627b      	str	r3, [r7, #36]	; 0x24
 80189b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ba:	00db      	lsls	r3, r3, #3
 80189bc:	69ba      	ldr	r2, [r7, #24]
 80189be:	18d1      	adds	r1, r2, r3
 80189c0:	6a3a      	ldr	r2, [r7, #32]
 80189c2:	4613      	mov	r3, r2
 80189c4:	005b      	lsls	r3, r3, #1
 80189c6:	4413      	add	r3, r2
 80189c8:	005b      	lsls	r3, r3, #1
 80189ca:	461a      	mov	r2, r3
 80189cc:	69fb      	ldr	r3, [r7, #28]
 80189ce:	4413      	add	r3, r2
 80189d0:	785b      	ldrb	r3, [r3, #1]
 80189d2:	700b      	strb	r3, [r1, #0]
 80189d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189d6:	00db      	lsls	r3, r3, #3
 80189d8:	69ba      	ldr	r2, [r7, #24]
 80189da:	18d1      	adds	r1, r2, r3
 80189dc:	6a3a      	ldr	r2, [r7, #32]
 80189de:	4613      	mov	r3, r2
 80189e0:	005b      	lsls	r3, r3, #1
 80189e2:	4413      	add	r3, r2
 80189e4:	005b      	lsls	r3, r3, #1
 80189e6:	461a      	mov	r2, r3
 80189e8:	69fb      	ldr	r3, [r7, #28]
 80189ea:	4413      	add	r3, r2
 80189ec:	789b      	ldrb	r3, [r3, #2]
 80189ee:	704b      	strb	r3, [r1, #1]
 80189f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189f2:	00db      	lsls	r3, r3, #3
 80189f4:	69ba      	ldr	r2, [r7, #24]
 80189f6:	18d1      	adds	r1, r2, r3
 80189f8:	6a3a      	ldr	r2, [r7, #32]
 80189fa:	4613      	mov	r3, r2
 80189fc:	005b      	lsls	r3, r3, #1
 80189fe:	4413      	add	r3, r2
 8018a00:	005b      	lsls	r3, r3, #1
 8018a02:	461a      	mov	r2, r3
 8018a04:	69fb      	ldr	r3, [r7, #28]
 8018a06:	4413      	add	r3, r2
 8018a08:	791b      	ldrb	r3, [r3, #4]
 8018a0a:	708b      	strb	r3, [r1, #2]
 8018a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a0e:	00db      	lsls	r3, r3, #3
 8018a10:	69ba      	ldr	r2, [r7, #24]
 8018a12:	18d1      	adds	r1, r2, r3
 8018a14:	6a3a      	ldr	r2, [r7, #32]
 8018a16:	4613      	mov	r3, r2
 8018a18:	005b      	lsls	r3, r3, #1
 8018a1a:	4413      	add	r3, r2
 8018a1c:	005b      	lsls	r3, r3, #1
 8018a1e:	461a      	mov	r2, r3
 8018a20:	69fb      	ldr	r3, [r7, #28]
 8018a22:	4413      	add	r3, r2
 8018a24:	795b      	ldrb	r3, [r3, #5]
 8018a26:	70cb      	strb	r3, [r1, #3]
 8018a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a2a:	00db      	lsls	r3, r3, #3
 8018a2c:	69ba      	ldr	r2, [r7, #24]
 8018a2e:	18d1      	adds	r1, r2, r3
 8018a30:	6a3a      	ldr	r2, [r7, #32]
 8018a32:	4613      	mov	r3, r2
 8018a34:	005b      	lsls	r3, r3, #1
 8018a36:	4413      	add	r3, r2
 8018a38:	005b      	lsls	r3, r3, #1
 8018a3a:	461a      	mov	r2, r3
 8018a3c:	69fb      	ldr	r3, [r7, #28]
 8018a3e:	4413      	add	r3, r2
 8018a40:	78db      	ldrb	r3, [r3, #3]
 8018a42:	710b      	strb	r3, [r1, #4]
 8018a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a46:	00db      	lsls	r3, r3, #3
 8018a48:	69ba      	ldr	r2, [r7, #24]
 8018a4a:	18d1      	adds	r1, r2, r3
 8018a4c:	6a3a      	ldr	r2, [r7, #32]
 8018a4e:	4613      	mov	r3, r2
 8018a50:	005b      	lsls	r3, r3, #1
 8018a52:	4413      	add	r3, r2
 8018a54:	005b      	lsls	r3, r3, #1
 8018a56:	461a      	mov	r2, r3
 8018a58:	69fb      	ldr	r3, [r7, #28]
 8018a5a:	4413      	add	r3, r2
 8018a5c:	781b      	ldrb	r3, [r3, #0]
 8018a5e:	714b      	strb	r3, [r1, #5]
 8018a60:	6a3b      	ldr	r3, [r7, #32]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d1a1      	bne.n	80189aa <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x126>
 8018a66:	683b      	ldr	r3, [r7, #0]
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d018      	beq.n	8018a9e <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x21a>
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	881a      	ldrh	r2, [r3, #0]
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	885b      	ldrh	r3, [r3, #2]
 8018a74:	429a      	cmp	r2, r3
 8018a76:	d112      	bne.n	8018a9e <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x21a>
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	881a      	ldrh	r2, [r3, #0]
 8018a7c:	683b      	ldr	r3, [r7, #0]
 8018a7e:	801a      	strh	r2, [r3, #0]
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	889a      	ldrh	r2, [r3, #4]
 8018a84:	683b      	ldr	r3, [r7, #0]
 8018a86:	809a      	strh	r2, [r3, #4]
 8018a88:	683b      	ldr	r3, [r7, #0]
 8018a8a:	f103 0014 	add.w	r0, r3, #20
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	f103 0114 	add.w	r1, r3, #20
 8018a94:	683b      	ldr	r3, [r7, #0]
 8018a96:	881b      	ldrh	r3, [r3, #0]
 8018a98:	461a      	mov	r2, r3
 8018a9a:	f004 fad1 	bl	801d040 <memcpy>
 8018a9e:	4a27      	ldr	r2, [pc, #156]	; (8018b3c <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2b8>)
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018aa6:	2b01      	cmp	r3, #1
 8018aa8:	d132      	bne.n	8018b10 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x28c>
 8018aaa:	4a25      	ldr	r2, [pc, #148]	; (8018b40 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2bc>)
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	4413      	add	r3, r2
 8018ab0:	2206      	movs	r2, #6
 8018ab2:	701a      	strb	r2, [r3, #0]
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	015b      	lsls	r3, r3, #5
 8018ab8:	4a22      	ldr	r2, [pc, #136]	; (8018b44 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2c0>)
 8018aba:	4413      	add	r3, r2
 8018abc:	2220      	movs	r2, #32
 8018abe:	2100      	movs	r1, #0
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f004 fb57 	bl	801d174 <memset>
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	015b      	lsls	r3, r3, #5
 8018aca:	4a1e      	ldr	r2, [pc, #120]	; (8018b44 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2c0>)
 8018acc:	4413      	add	r3, r2
 8018ace:	69f9      	ldr	r1, [r7, #28]
 8018ad0:	2206      	movs	r2, #6
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	f004 fab4 	bl	801d040 <memcpy>
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	015b      	lsls	r3, r3, #5
 8018adc:	3310      	adds	r3, #16
 8018ade:	4a19      	ldr	r2, [pc, #100]	; (8018b44 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2c0>)
 8018ae0:	4413      	add	r3, r2
 8018ae2:	69b9      	ldr	r1, [r7, #24]
 8018ae4:	2208      	movs	r2, #8
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f004 faaa 	bl	801d040 <memcpy>
 8018aec:	683b      	ldr	r3, [r7, #0]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d009      	beq.n	8018b06 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x282>
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	015b      	lsls	r3, r3, #5
 8018af6:	3318      	adds	r3, #24
 8018af8:	4a12      	ldr	r2, [pc, #72]	; (8018b44 <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2c0>)
 8018afa:	4413      	add	r3, r2
 8018afc:	69b9      	ldr	r1, [r7, #24]
 8018afe:	2208      	movs	r2, #8
 8018b00:	4618      	mov	r0, r3
 8018b02:	f004 fa9d 	bl	801d040 <memcpy>
 8018b06:	4a0d      	ldr	r2, [pc, #52]	; (8018b3c <conv_ns_24L24P_to_16L16P8L8P16N_16L16P8L8P16N+0x2b8>)
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	2100      	movs	r1, #0
 8018b0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	881a      	ldrh	r2, [r3, #0]
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	885b      	ldrh	r3, [r3, #2]
 8018b18:	429a      	cmp	r2, r3
 8018b1a:	bf0c      	ite	eq
 8018b1c:	2301      	moveq	r3, #1
 8018b1e:	2300      	movne	r3, #0
 8018b20:	b2db      	uxtb	r3, r3
 8018b22:	4618      	mov	r0, r3
 8018b24:	3728      	adds	r7, #40	; 0x28
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bd80      	pop	{r7, pc}
 8018b2a:	bf00      	nop
 8018b2c:	aaaaaaab 	.word	0xaaaaaaab
 8018b30:	0803ecd8 	.word	0x0803ecd8
 8018b34:	0803ee90 	.word	0x0803ee90
 8018b38:	0803f4f9 	.word	0x0803f4f9
 8018b3c:	100027ac 	.word	0x100027ac
 8018b40:	10002e88 	.word	0x10002e88
 8018b44:	10002e48 	.word	0x10002e48

08018b48 <conv_ns_24L8N24P8N_to_24L24P16N>:
  //210 543
  SET_SLOT(1, 0, 2, 1);
  SET_SLOT(1, 1, 5, 4);
  SET_SLOT(1, 2, 0, 3);
})
CONVERT_ROUTINE1(conv_ns_24L8N24P8N_to_24L24P16N, t_24L8N24P8N, t_24L24P16N,
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b08a      	sub	sp, #40	; 0x28
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	60f8      	str	r0, [r7, #12]
 8018b50:	60b9      	str	r1, [r7, #8]
 8018b52:	607a      	str	r2, [r7, #4]
 8018b54:	603b      	str	r3, [r7, #0]
 8018b56:	68bb      	ldr	r3, [r7, #8]
 8018b58:	889b      	ldrh	r3, [r3, #4]
 8018b5a:	3310      	adds	r3, #16
 8018b5c:	68ba      	ldr	r2, [r7, #8]
 8018b5e:	4413      	add	r3, r2
 8018b60:	3304      	adds	r3, #4
 8018b62:	61fb      	str	r3, [r7, #28]
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	889b      	ldrh	r3, [r3, #4]
 8018b68:	3310      	adds	r3, #16
 8018b6a:	687a      	ldr	r2, [r7, #4]
 8018b6c:	4413      	add	r3, r2
 8018b6e:	3304      	adds	r3, #4
 8018b70:	61bb      	str	r3, [r7, #24]
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	885b      	ldrh	r3, [r3, #2]
 8018b76:	461a      	mov	r2, r3
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	881b      	ldrh	r3, [r3, #0]
 8018b7c:	1ad3      	subs	r3, r2, r3
 8018b7e:	08da      	lsrs	r2, r3, #3
 8018b80:	68bb      	ldr	r3, [r7, #8]
 8018b82:	881b      	ldrh	r3, [r3, #0]
 8018b84:	4619      	mov	r1, r3
 8018b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b88:	fb91 f3f3 	sdiv	r3, r1, r3
 8018b8c:	08db      	lsrs	r3, r3, #3
 8018b8e:	4293      	cmp	r3, r2
 8018b90:	bf28      	it	cs
 8018b92:	4613      	movcs	r3, r2
 8018b94:	627b      	str	r3, [r7, #36]	; 0x24
 8018b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b9a:	fb02 f303 	mul.w	r3, r2, r3
 8018b9e:	623b      	str	r3, [r7, #32]
 8018ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d10a      	bne.n	8018bbc <conv_ns_24L8N24P8N_to_24L24P16N+0x74>
 8018ba6:	68bb      	ldr	r3, [r7, #8]
 8018ba8:	2200      	movs	r2, #0
 8018baa:	801a      	strh	r2, [r3, #0]
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	2200      	movs	r2, #0
 8018bb0:	801a      	strh	r2, [r3, #0]
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	2200      	movs	r2, #0
 8018bb6:	809a      	strh	r2, [r3, #4]
 8018bb8:	2300      	movs	r3, #0
 8018bba:	e0f2      	b.n	8018da2 <conv_ns_24L8N24P8N_to_24L24P16N+0x25a>
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	881a      	ldrh	r2, [r3, #0]
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	885b      	ldrh	r3, [r3, #2]
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	d90c      	bls.n	8018be2 <conv_ns_24L8N24P8N_to_24L24P16N+0x9a>
 8018bc8:	4b78      	ldr	r3, [pc, #480]	; (8018dac <conv_ns_24L8N24P8N_to_24L24P16N+0x264>)
 8018bca:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8018bce:	4978      	ldr	r1, [pc, #480]	; (8018db0 <conv_ns_24L8N24P8N_to_24L24P16N+0x268>)
 8018bd0:	4878      	ldr	r0, [pc, #480]	; (8018db4 <conv_ns_24L8N24P8N_to_24L24P16N+0x26c>)
 8018bd2:	f7f0 f829 	bl	8008c28 <xprintf>
 8018bd6:	2301      	movs	r3, #1
 8018bd8:	617b      	str	r3, [r7, #20]
 8018bda:	bf00      	nop
 8018bdc:	697b      	ldr	r3, [r7, #20]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d1fc      	bne.n	8018bdc <conv_ns_24L8N24P8N_to_24L24P16N+0x94>
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	881a      	ldrh	r2, [r3, #0]
 8018be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018be8:	b29b      	uxth	r3, r3
 8018bea:	00db      	lsls	r3, r3, #3
 8018bec:	b29b      	uxth	r3, r3
 8018bee:	4413      	add	r3, r2
 8018bf0:	b29a      	uxth	r2, r3
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	801a      	strh	r2, [r3, #0]
 8018bf6:	68bb      	ldr	r3, [r7, #8]
 8018bf8:	881a      	ldrh	r2, [r3, #0]
 8018bfa:	6a3b      	ldr	r3, [r7, #32]
 8018bfc:	b29b      	uxth	r3, r3
 8018bfe:	00db      	lsls	r3, r3, #3
 8018c00:	b29b      	uxth	r3, r3
 8018c02:	1ad3      	subs	r3, r2, r3
 8018c04:	b29a      	uxth	r2, r3
 8018c06:	68bb      	ldr	r3, [r7, #8]
 8018c08:	801a      	strh	r2, [r3, #0]
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	889a      	ldrh	r2, [r3, #4]
 8018c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c10:	b29b      	uxth	r3, r3
 8018c12:	00db      	lsls	r3, r3, #3
 8018c14:	b29b      	uxth	r3, r3
 8018c16:	4413      	add	r3, r2
 8018c18:	b29a      	uxth	r2, r3
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	809a      	strh	r2, [r3, #4]
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	889a      	ldrh	r2, [r3, #4]
 8018c22:	6a3b      	ldr	r3, [r7, #32]
 8018c24:	b29b      	uxth	r3, r3
 8018c26:	00db      	lsls	r3, r3, #3
 8018c28:	b29b      	uxth	r3, r3
 8018c2a:	4413      	add	r3, r2
 8018c2c:	b29a      	uxth	r2, r3
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	809a      	strh	r2, [r3, #4]
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	881a      	ldrh	r2, [r3, #0]
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	885b      	ldrh	r3, [r3, #2]
 8018c3a:	429a      	cmp	r2, r3
 8018c3c:	d950      	bls.n	8018ce0 <conv_ns_24L8N24P8N_to_24L24P16N+0x198>
 8018c3e:	4b5b      	ldr	r3, [pc, #364]	; (8018dac <conv_ns_24L8N24P8N_to_24L24P16N+0x264>)
 8018c40:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8018c44:	495a      	ldr	r1, [pc, #360]	; (8018db0 <conv_ns_24L8N24P8N_to_24L24P16N+0x268>)
 8018c46:	485b      	ldr	r0, [pc, #364]	; (8018db4 <conv_ns_24L8N24P8N_to_24L24P16N+0x26c>)
 8018c48:	f7ef ffee 	bl	8008c28 <xprintf>
 8018c4c:	2301      	movs	r3, #1
 8018c4e:	613b      	str	r3, [r7, #16]
 8018c50:	bf00      	nop
 8018c52:	693b      	ldr	r3, [r7, #16]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d1fc      	bne.n	8018c52 <conv_ns_24L8N24P8N_to_24L24P16N+0x10a>
 8018c58:	e042      	b.n	8018ce0 <conv_ns_24L8N24P8N_to_24L24P16N+0x198>
 8018c5a:	6a3a      	ldr	r2, [r7, #32]
 8018c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c5e:	1ad3      	subs	r3, r2, r3
 8018c60:	623b      	str	r3, [r7, #32]
 8018c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c64:	3b01      	subs	r3, #1
 8018c66:	627b      	str	r3, [r7, #36]	; 0x24
 8018c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c6a:	00db      	lsls	r3, r3, #3
 8018c6c:	69ba      	ldr	r2, [r7, #24]
 8018c6e:	4413      	add	r3, r2
 8018c70:	6a3a      	ldr	r2, [r7, #32]
 8018c72:	00d2      	lsls	r2, r2, #3
 8018c74:	69f9      	ldr	r1, [r7, #28]
 8018c76:	440a      	add	r2, r1
 8018c78:	7892      	ldrb	r2, [r2, #2]
 8018c7a:	701a      	strb	r2, [r3, #0]
 8018c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c7e:	00db      	lsls	r3, r3, #3
 8018c80:	69ba      	ldr	r2, [r7, #24]
 8018c82:	4413      	add	r3, r2
 8018c84:	6a3a      	ldr	r2, [r7, #32]
 8018c86:	00d2      	lsls	r2, r2, #3
 8018c88:	69f9      	ldr	r1, [r7, #28]
 8018c8a:	440a      	add	r2, r1
 8018c8c:	78d2      	ldrb	r2, [r2, #3]
 8018c8e:	705a      	strb	r2, [r3, #1]
 8018c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c92:	00db      	lsls	r3, r3, #3
 8018c94:	69ba      	ldr	r2, [r7, #24]
 8018c96:	4413      	add	r3, r2
 8018c98:	6a3a      	ldr	r2, [r7, #32]
 8018c9a:	00d2      	lsls	r2, r2, #3
 8018c9c:	69f9      	ldr	r1, [r7, #28]
 8018c9e:	440a      	add	r2, r1
 8018ca0:	79d2      	ldrb	r2, [r2, #7]
 8018ca2:	709a      	strb	r2, [r3, #2]
 8018ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ca6:	00db      	lsls	r3, r3, #3
 8018ca8:	69ba      	ldr	r2, [r7, #24]
 8018caa:	4413      	add	r3, r2
 8018cac:	6a3a      	ldr	r2, [r7, #32]
 8018cae:	00d2      	lsls	r2, r2, #3
 8018cb0:	69f9      	ldr	r1, [r7, #28]
 8018cb2:	440a      	add	r2, r1
 8018cb4:	7852      	ldrb	r2, [r2, #1]
 8018cb6:	70da      	strb	r2, [r3, #3]
 8018cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cba:	00db      	lsls	r3, r3, #3
 8018cbc:	69ba      	ldr	r2, [r7, #24]
 8018cbe:	4413      	add	r3, r2
 8018cc0:	6a3a      	ldr	r2, [r7, #32]
 8018cc2:	00d2      	lsls	r2, r2, #3
 8018cc4:	69f9      	ldr	r1, [r7, #28]
 8018cc6:	440a      	add	r2, r1
 8018cc8:	7952      	ldrb	r2, [r2, #5]
 8018cca:	711a      	strb	r2, [r3, #4]
 8018ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cce:	00db      	lsls	r3, r3, #3
 8018cd0:	69ba      	ldr	r2, [r7, #24]
 8018cd2:	4413      	add	r3, r2
 8018cd4:	6a3a      	ldr	r2, [r7, #32]
 8018cd6:	00d2      	lsls	r2, r2, #3
 8018cd8:	69f9      	ldr	r1, [r7, #28]
 8018cda:	440a      	add	r2, r1
 8018cdc:	7992      	ldrb	r2, [r2, #6]
 8018cde:	715a      	strb	r2, [r3, #5]
 8018ce0:	6a3b      	ldr	r3, [r7, #32]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d1b9      	bne.n	8018c5a <conv_ns_24L8N24P8N_to_24L24P16N+0x112>
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d018      	beq.n	8018d1e <conv_ns_24L8N24P8N_to_24L24P16N+0x1d6>
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	881a      	ldrh	r2, [r3, #0]
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	885b      	ldrh	r3, [r3, #2]
 8018cf4:	429a      	cmp	r2, r3
 8018cf6:	d112      	bne.n	8018d1e <conv_ns_24L8N24P8N_to_24L24P16N+0x1d6>
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	881a      	ldrh	r2, [r3, #0]
 8018cfc:	683b      	ldr	r3, [r7, #0]
 8018cfe:	801a      	strh	r2, [r3, #0]
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	889a      	ldrh	r2, [r3, #4]
 8018d04:	683b      	ldr	r3, [r7, #0]
 8018d06:	809a      	strh	r2, [r3, #4]
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	f103 0014 	add.w	r0, r3, #20
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	f103 0114 	add.w	r1, r3, #20
 8018d14:	683b      	ldr	r3, [r7, #0]
 8018d16:	881b      	ldrh	r3, [r3, #0]
 8018d18:	461a      	mov	r2, r3
 8018d1a:	f004 f991 	bl	801d040 <memcpy>
 8018d1e:	4a26      	ldr	r2, [pc, #152]	; (8018db8 <conv_ns_24L8N24P8N_to_24L24P16N+0x270>)
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018d26:	2b01      	cmp	r3, #1
 8018d28:	d132      	bne.n	8018d90 <conv_ns_24L8N24P8N_to_24L24P16N+0x248>
 8018d2a:	4a24      	ldr	r2, [pc, #144]	; (8018dbc <conv_ns_24L8N24P8N_to_24L24P16N+0x274>)
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	4413      	add	r3, r2
 8018d30:	2208      	movs	r2, #8
 8018d32:	701a      	strb	r2, [r3, #0]
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	015b      	lsls	r3, r3, #5
 8018d38:	4a21      	ldr	r2, [pc, #132]	; (8018dc0 <conv_ns_24L8N24P8N_to_24L24P16N+0x278>)
 8018d3a:	4413      	add	r3, r2
 8018d3c:	2220      	movs	r2, #32
 8018d3e:	2100      	movs	r1, #0
 8018d40:	4618      	mov	r0, r3
 8018d42:	f004 fa17 	bl	801d174 <memset>
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	015b      	lsls	r3, r3, #5
 8018d4a:	4a1d      	ldr	r2, [pc, #116]	; (8018dc0 <conv_ns_24L8N24P8N_to_24L24P16N+0x278>)
 8018d4c:	4413      	add	r3, r2
 8018d4e:	69f9      	ldr	r1, [r7, #28]
 8018d50:	2208      	movs	r2, #8
 8018d52:	4618      	mov	r0, r3
 8018d54:	f004 f974 	bl	801d040 <memcpy>
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	015b      	lsls	r3, r3, #5
 8018d5c:	3310      	adds	r3, #16
 8018d5e:	4a18      	ldr	r2, [pc, #96]	; (8018dc0 <conv_ns_24L8N24P8N_to_24L24P16N+0x278>)
 8018d60:	4413      	add	r3, r2
 8018d62:	69b9      	ldr	r1, [r7, #24]
 8018d64:	2208      	movs	r2, #8
 8018d66:	4618      	mov	r0, r3
 8018d68:	f004 f96a 	bl	801d040 <memcpy>
 8018d6c:	683b      	ldr	r3, [r7, #0]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d009      	beq.n	8018d86 <conv_ns_24L8N24P8N_to_24L24P16N+0x23e>
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	015b      	lsls	r3, r3, #5
 8018d76:	3318      	adds	r3, #24
 8018d78:	4a11      	ldr	r2, [pc, #68]	; (8018dc0 <conv_ns_24L8N24P8N_to_24L24P16N+0x278>)
 8018d7a:	4413      	add	r3, r2
 8018d7c:	69b9      	ldr	r1, [r7, #24]
 8018d7e:	2208      	movs	r2, #8
 8018d80:	4618      	mov	r0, r3
 8018d82:	f004 f95d 	bl	801d040 <memcpy>
 8018d86:	4a0c      	ldr	r2, [pc, #48]	; (8018db8 <conv_ns_24L8N24P8N_to_24L24P16N+0x270>)
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	2100      	movs	r1, #0
 8018d8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	881a      	ldrh	r2, [r3, #0]
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	885b      	ldrh	r3, [r3, #2]
 8018d98:	429a      	cmp	r2, r3
 8018d9a:	bf0c      	ite	eq
 8018d9c:	2301      	moveq	r3, #1
 8018d9e:	2300      	movne	r3, #0
 8018da0:	b2db      	uxtb	r3, r3
 8018da2:	4618      	mov	r0, r3
 8018da4:	3728      	adds	r7, #40	; 0x28
 8018da6:	46bd      	mov	sp, r7
 8018da8:	bd80      	pop	{r7, pc}
 8018daa:	bf00      	nop
 8018dac:	0803ecd8 	.word	0x0803ecd8
 8018db0:	0803eebe 	.word	0x0803eebe
 8018db4:	0803f4f9 	.word	0x0803f4f9
 8018db8:	100027ac 	.word	0x100027ac
 8018dbc:	10002e88 	.word	0x10002e88
 8018dc0:	10002e48 	.word	0x10002e48

08018dc4 <conv_ns_16L8L8N16P8P8N_to_24L24P16N>:
  //321 765
  SET_SLOT(1, 0, 3, 2);
  SET_SLOT(1, 1, 1, 7);
  SET_SLOT(1, 2, 6, 5);
})
CONVERT_ROUTINE1(conv_ns_16L8L8N16P8P8N_to_24L24P16N, t_16L8L8N16P8P8N, t_24L24P16N,
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b08a      	sub	sp, #40	; 0x28
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	60f8      	str	r0, [r7, #12]
 8018dcc:	60b9      	str	r1, [r7, #8]
 8018dce:	607a      	str	r2, [r7, #4]
 8018dd0:	603b      	str	r3, [r7, #0]
 8018dd2:	68bb      	ldr	r3, [r7, #8]
 8018dd4:	889b      	ldrh	r3, [r3, #4]
 8018dd6:	3310      	adds	r3, #16
 8018dd8:	68ba      	ldr	r2, [r7, #8]
 8018dda:	4413      	add	r3, r2
 8018ddc:	3304      	adds	r3, #4
 8018dde:	61fb      	str	r3, [r7, #28]
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	889b      	ldrh	r3, [r3, #4]
 8018de4:	3310      	adds	r3, #16
 8018de6:	687a      	ldr	r2, [r7, #4]
 8018de8:	4413      	add	r3, r2
 8018dea:	3304      	adds	r3, #4
 8018dec:	61bb      	str	r3, [r7, #24]
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	885b      	ldrh	r3, [r3, #2]
 8018df2:	461a      	mov	r2, r3
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	881b      	ldrh	r3, [r3, #0]
 8018df8:	1ad3      	subs	r3, r2, r3
 8018dfa:	08da      	lsrs	r2, r3, #3
 8018dfc:	68bb      	ldr	r3, [r7, #8]
 8018dfe:	881b      	ldrh	r3, [r3, #0]
 8018e00:	4619      	mov	r1, r3
 8018e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e04:	fb91 f3f3 	sdiv	r3, r1, r3
 8018e08:	08db      	lsrs	r3, r3, #3
 8018e0a:	4293      	cmp	r3, r2
 8018e0c:	bf28      	it	cs
 8018e0e:	4613      	movcs	r3, r2
 8018e10:	627b      	str	r3, [r7, #36]	; 0x24
 8018e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018e16:	fb02 f303 	mul.w	r3, r2, r3
 8018e1a:	623b      	str	r3, [r7, #32]
 8018e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d10a      	bne.n	8018e38 <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x74>
 8018e22:	68bb      	ldr	r3, [r7, #8]
 8018e24:	2200      	movs	r2, #0
 8018e26:	801a      	strh	r2, [r3, #0]
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	801a      	strh	r2, [r3, #0]
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	2200      	movs	r2, #0
 8018e32:	809a      	strh	r2, [r3, #4]
 8018e34:	2300      	movs	r3, #0
 8018e36:	e0f2      	b.n	801901e <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x25a>
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	881a      	ldrh	r2, [r3, #0]
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	885b      	ldrh	r3, [r3, #2]
 8018e40:	429a      	cmp	r2, r3
 8018e42:	d90c      	bls.n	8018e5e <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x9a>
 8018e44:	4b78      	ldr	r3, [pc, #480]	; (8019028 <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x264>)
 8018e46:	f240 6217 	movw	r2, #1559	; 0x617
 8018e4a:	4978      	ldr	r1, [pc, #480]	; (801902c <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x268>)
 8018e4c:	4878      	ldr	r0, [pc, #480]	; (8019030 <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x26c>)
 8018e4e:	f7ef feeb 	bl	8008c28 <xprintf>
 8018e52:	2301      	movs	r3, #1
 8018e54:	617b      	str	r3, [r7, #20]
 8018e56:	bf00      	nop
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d1fc      	bne.n	8018e58 <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x94>
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	881a      	ldrh	r2, [r3, #0]
 8018e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e64:	b29b      	uxth	r3, r3
 8018e66:	00db      	lsls	r3, r3, #3
 8018e68:	b29b      	uxth	r3, r3
 8018e6a:	4413      	add	r3, r2
 8018e6c:	b29a      	uxth	r2, r3
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	801a      	strh	r2, [r3, #0]
 8018e72:	68bb      	ldr	r3, [r7, #8]
 8018e74:	881a      	ldrh	r2, [r3, #0]
 8018e76:	6a3b      	ldr	r3, [r7, #32]
 8018e78:	b29b      	uxth	r3, r3
 8018e7a:	00db      	lsls	r3, r3, #3
 8018e7c:	b29b      	uxth	r3, r3
 8018e7e:	1ad3      	subs	r3, r2, r3
 8018e80:	b29a      	uxth	r2, r3
 8018e82:	68bb      	ldr	r3, [r7, #8]
 8018e84:	801a      	strh	r2, [r3, #0]
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	889a      	ldrh	r2, [r3, #4]
 8018e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e8c:	b29b      	uxth	r3, r3
 8018e8e:	00db      	lsls	r3, r3, #3
 8018e90:	b29b      	uxth	r3, r3
 8018e92:	4413      	add	r3, r2
 8018e94:	b29a      	uxth	r2, r3
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	809a      	strh	r2, [r3, #4]
 8018e9a:	68bb      	ldr	r3, [r7, #8]
 8018e9c:	889a      	ldrh	r2, [r3, #4]
 8018e9e:	6a3b      	ldr	r3, [r7, #32]
 8018ea0:	b29b      	uxth	r3, r3
 8018ea2:	00db      	lsls	r3, r3, #3
 8018ea4:	b29b      	uxth	r3, r3
 8018ea6:	4413      	add	r3, r2
 8018ea8:	b29a      	uxth	r2, r3
 8018eaa:	68bb      	ldr	r3, [r7, #8]
 8018eac:	809a      	strh	r2, [r3, #4]
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	881a      	ldrh	r2, [r3, #0]
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	885b      	ldrh	r3, [r3, #2]
 8018eb6:	429a      	cmp	r2, r3
 8018eb8:	d950      	bls.n	8018f5c <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x198>
 8018eba:	4b5b      	ldr	r3, [pc, #364]	; (8019028 <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x264>)
 8018ebc:	f240 6217 	movw	r2, #1559	; 0x617
 8018ec0:	495a      	ldr	r1, [pc, #360]	; (801902c <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x268>)
 8018ec2:	485b      	ldr	r0, [pc, #364]	; (8019030 <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x26c>)
 8018ec4:	f7ef feb0 	bl	8008c28 <xprintf>
 8018ec8:	2301      	movs	r3, #1
 8018eca:	613b      	str	r3, [r7, #16]
 8018ecc:	bf00      	nop
 8018ece:	693b      	ldr	r3, [r7, #16]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d1fc      	bne.n	8018ece <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x10a>
 8018ed4:	e042      	b.n	8018f5c <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x198>
 8018ed6:	6a3a      	ldr	r2, [r7, #32]
 8018ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eda:	1ad3      	subs	r3, r2, r3
 8018edc:	623b      	str	r3, [r7, #32]
 8018ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ee0:	3b01      	subs	r3, #1
 8018ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8018ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ee6:	00db      	lsls	r3, r3, #3
 8018ee8:	69ba      	ldr	r2, [r7, #24]
 8018eea:	4413      	add	r3, r2
 8018eec:	6a3a      	ldr	r2, [r7, #32]
 8018eee:	00d2      	lsls	r2, r2, #3
 8018ef0:	69f9      	ldr	r1, [r7, #28]
 8018ef2:	440a      	add	r2, r1
 8018ef4:	7812      	ldrb	r2, [r2, #0]
 8018ef6:	701a      	strb	r2, [r3, #0]
 8018ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018efa:	00db      	lsls	r3, r3, #3
 8018efc:	69ba      	ldr	r2, [r7, #24]
 8018efe:	4413      	add	r3, r2
 8018f00:	6a3a      	ldr	r2, [r7, #32]
 8018f02:	00d2      	lsls	r2, r2, #3
 8018f04:	69f9      	ldr	r1, [r7, #28]
 8018f06:	440a      	add	r2, r1
 8018f08:	7852      	ldrb	r2, [r2, #1]
 8018f0a:	705a      	strb	r2, [r3, #1]
 8018f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f0e:	00db      	lsls	r3, r3, #3
 8018f10:	69ba      	ldr	r2, [r7, #24]
 8018f12:	4413      	add	r3, r2
 8018f14:	6a3a      	ldr	r2, [r7, #32]
 8018f16:	00d2      	lsls	r2, r2, #3
 8018f18:	69f9      	ldr	r1, [r7, #28]
 8018f1a:	440a      	add	r2, r1
 8018f1c:	7952      	ldrb	r2, [r2, #5]
 8018f1e:	709a      	strb	r2, [r3, #2]
 8018f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f22:	00db      	lsls	r3, r3, #3
 8018f24:	69ba      	ldr	r2, [r7, #24]
 8018f26:	4413      	add	r3, r2
 8018f28:	6a3a      	ldr	r2, [r7, #32]
 8018f2a:	00d2      	lsls	r2, r2, #3
 8018f2c:	69f9      	ldr	r1, [r7, #28]
 8018f2e:	440a      	add	r2, r1
 8018f30:	78d2      	ldrb	r2, [r2, #3]
 8018f32:	70da      	strb	r2, [r3, #3]
 8018f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f36:	00db      	lsls	r3, r3, #3
 8018f38:	69ba      	ldr	r2, [r7, #24]
 8018f3a:	4413      	add	r3, r2
 8018f3c:	6a3a      	ldr	r2, [r7, #32]
 8018f3e:	00d2      	lsls	r2, r2, #3
 8018f40:	69f9      	ldr	r1, [r7, #28]
 8018f42:	440a      	add	r2, r1
 8018f44:	79d2      	ldrb	r2, [r2, #7]
 8018f46:	711a      	strb	r2, [r3, #4]
 8018f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f4a:	00db      	lsls	r3, r3, #3
 8018f4c:	69ba      	ldr	r2, [r7, #24]
 8018f4e:	4413      	add	r3, r2
 8018f50:	6a3a      	ldr	r2, [r7, #32]
 8018f52:	00d2      	lsls	r2, r2, #3
 8018f54:	69f9      	ldr	r1, [r7, #28]
 8018f56:	440a      	add	r2, r1
 8018f58:	7912      	ldrb	r2, [r2, #4]
 8018f5a:	715a      	strb	r2, [r3, #5]
 8018f5c:	6a3b      	ldr	r3, [r7, #32]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d1b9      	bne.n	8018ed6 <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x112>
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d018      	beq.n	8018f9a <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x1d6>
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	881a      	ldrh	r2, [r3, #0]
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	885b      	ldrh	r3, [r3, #2]
 8018f70:	429a      	cmp	r2, r3
 8018f72:	d112      	bne.n	8018f9a <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x1d6>
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	881a      	ldrh	r2, [r3, #0]
 8018f78:	683b      	ldr	r3, [r7, #0]
 8018f7a:	801a      	strh	r2, [r3, #0]
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	889a      	ldrh	r2, [r3, #4]
 8018f80:	683b      	ldr	r3, [r7, #0]
 8018f82:	809a      	strh	r2, [r3, #4]
 8018f84:	683b      	ldr	r3, [r7, #0]
 8018f86:	f103 0014 	add.w	r0, r3, #20
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	f103 0114 	add.w	r1, r3, #20
 8018f90:	683b      	ldr	r3, [r7, #0]
 8018f92:	881b      	ldrh	r3, [r3, #0]
 8018f94:	461a      	mov	r2, r3
 8018f96:	f004 f853 	bl	801d040 <memcpy>
 8018f9a:	4a26      	ldr	r2, [pc, #152]	; (8019034 <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x270>)
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018fa2:	2b01      	cmp	r3, #1
 8018fa4:	d132      	bne.n	801900c <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x248>
 8018fa6:	4a24      	ldr	r2, [pc, #144]	; (8019038 <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x274>)
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	4413      	add	r3, r2
 8018fac:	2208      	movs	r2, #8
 8018fae:	701a      	strb	r2, [r3, #0]
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	015b      	lsls	r3, r3, #5
 8018fb4:	4a21      	ldr	r2, [pc, #132]	; (801903c <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x278>)
 8018fb6:	4413      	add	r3, r2
 8018fb8:	2220      	movs	r2, #32
 8018fba:	2100      	movs	r1, #0
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f004 f8d9 	bl	801d174 <memset>
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	015b      	lsls	r3, r3, #5
 8018fc6:	4a1d      	ldr	r2, [pc, #116]	; (801903c <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x278>)
 8018fc8:	4413      	add	r3, r2
 8018fca:	69f9      	ldr	r1, [r7, #28]
 8018fcc:	2208      	movs	r2, #8
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f004 f836 	bl	801d040 <memcpy>
 8018fd4:	68fb      	ldr	r3, [r7, #12]
 8018fd6:	015b      	lsls	r3, r3, #5
 8018fd8:	3310      	adds	r3, #16
 8018fda:	4a18      	ldr	r2, [pc, #96]	; (801903c <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x278>)
 8018fdc:	4413      	add	r3, r2
 8018fde:	69b9      	ldr	r1, [r7, #24]
 8018fe0:	2208      	movs	r2, #8
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	f004 f82c 	bl	801d040 <memcpy>
 8018fe8:	683b      	ldr	r3, [r7, #0]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d009      	beq.n	8019002 <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x23e>
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	015b      	lsls	r3, r3, #5
 8018ff2:	3318      	adds	r3, #24
 8018ff4:	4a11      	ldr	r2, [pc, #68]	; (801903c <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x278>)
 8018ff6:	4413      	add	r3, r2
 8018ff8:	69b9      	ldr	r1, [r7, #24]
 8018ffa:	2208      	movs	r2, #8
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	f004 f81f 	bl	801d040 <memcpy>
 8019002:	4a0c      	ldr	r2, [pc, #48]	; (8019034 <conv_ns_16L8L8N16P8P8N_to_24L24P16N+0x270>)
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	2100      	movs	r1, #0
 8019008:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	881a      	ldrh	r2, [r3, #0]
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	885b      	ldrh	r3, [r3, #2]
 8019014:	429a      	cmp	r2, r3
 8019016:	bf0c      	ite	eq
 8019018:	2301      	moveq	r3, #1
 801901a:	2300      	movne	r3, #0
 801901c:	b2db      	uxtb	r3, r3
 801901e:	4618      	mov	r0, r3
 8019020:	3728      	adds	r7, #40	; 0x28
 8019022:	46bd      	mov	sp, r7
 8019024:	bd80      	pop	{r7, pc}
 8019026:	bf00      	nop
 8019028:	0803ecd8 	.word	0x0803ecd8
 801902c:	0803eede 	.word	0x0803eede
 8019030:	0803f4f9 	.word	0x0803f4f9
 8019034:	100027ac 	.word	0x100027ac
 8019038:	10002e88 	.word	0x10002e88
 801903c:	10002e48 	.word	0x10002e48

08019040 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N>:
  //103 547
  SET_SLOT(1, 0, 1, 0);
  SET_SLOT(1, 1, 3, 5);
  SET_SLOT(1, 2, 4, 7);
})
CONVERT_ROUTINE1(conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N, t_16L8L8N16P8P8N, t_16L16P8L8P16N,
 8019040:	b580      	push	{r7, lr}
 8019042:	b08a      	sub	sp, #40	; 0x28
 8019044:	af00      	add	r7, sp, #0
 8019046:	60f8      	str	r0, [r7, #12]
 8019048:	60b9      	str	r1, [r7, #8]
 801904a:	607a      	str	r2, [r7, #4]
 801904c:	603b      	str	r3, [r7, #0]
 801904e:	68bb      	ldr	r3, [r7, #8]
 8019050:	889b      	ldrh	r3, [r3, #4]
 8019052:	3310      	adds	r3, #16
 8019054:	68ba      	ldr	r2, [r7, #8]
 8019056:	4413      	add	r3, r2
 8019058:	3304      	adds	r3, #4
 801905a:	61fb      	str	r3, [r7, #28]
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	889b      	ldrh	r3, [r3, #4]
 8019060:	3310      	adds	r3, #16
 8019062:	687a      	ldr	r2, [r7, #4]
 8019064:	4413      	add	r3, r2
 8019066:	3304      	adds	r3, #4
 8019068:	61bb      	str	r3, [r7, #24]
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	885b      	ldrh	r3, [r3, #2]
 801906e:	461a      	mov	r2, r3
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	881b      	ldrh	r3, [r3, #0]
 8019074:	1ad3      	subs	r3, r2, r3
 8019076:	08da      	lsrs	r2, r3, #3
 8019078:	68bb      	ldr	r3, [r7, #8]
 801907a:	881b      	ldrh	r3, [r3, #0]
 801907c:	4619      	mov	r1, r3
 801907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019080:	fb91 f3f3 	sdiv	r3, r1, r3
 8019084:	08db      	lsrs	r3, r3, #3
 8019086:	4293      	cmp	r3, r2
 8019088:	bf28      	it	cs
 801908a:	4613      	movcs	r3, r2
 801908c:	627b      	str	r3, [r7, #36]	; 0x24
 801908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019092:	fb02 f303 	mul.w	r3, r2, r3
 8019096:	623b      	str	r3, [r7, #32]
 8019098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801909a:	2b00      	cmp	r3, #0
 801909c:	d10a      	bne.n	80190b4 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x74>
 801909e:	68bb      	ldr	r3, [r7, #8]
 80190a0:	2200      	movs	r2, #0
 80190a2:	801a      	strh	r2, [r3, #0]
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	2200      	movs	r2, #0
 80190a8:	801a      	strh	r2, [r3, #0]
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	2200      	movs	r2, #0
 80190ae:	809a      	strh	r2, [r3, #4]
 80190b0:	2300      	movs	r3, #0
 80190b2:	e0f2      	b.n	801929a <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x25a>
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	881a      	ldrh	r2, [r3, #0]
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	885b      	ldrh	r3, [r3, #2]
 80190bc:	429a      	cmp	r2, r3
 80190be:	d90c      	bls.n	80190da <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x9a>
 80190c0:	4b78      	ldr	r3, [pc, #480]	; (80192a4 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x264>)
 80190c2:	f240 621e 	movw	r2, #1566	; 0x61e
 80190c6:	4978      	ldr	r1, [pc, #480]	; (80192a8 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x268>)
 80190c8:	4878      	ldr	r0, [pc, #480]	; (80192ac <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x26c>)
 80190ca:	f7ef fdad 	bl	8008c28 <xprintf>
 80190ce:	2301      	movs	r3, #1
 80190d0:	617b      	str	r3, [r7, #20]
 80190d2:	bf00      	nop
 80190d4:	697b      	ldr	r3, [r7, #20]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d1fc      	bne.n	80190d4 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x94>
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	881a      	ldrh	r2, [r3, #0]
 80190de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190e0:	b29b      	uxth	r3, r3
 80190e2:	00db      	lsls	r3, r3, #3
 80190e4:	b29b      	uxth	r3, r3
 80190e6:	4413      	add	r3, r2
 80190e8:	b29a      	uxth	r2, r3
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	801a      	strh	r2, [r3, #0]
 80190ee:	68bb      	ldr	r3, [r7, #8]
 80190f0:	881a      	ldrh	r2, [r3, #0]
 80190f2:	6a3b      	ldr	r3, [r7, #32]
 80190f4:	b29b      	uxth	r3, r3
 80190f6:	00db      	lsls	r3, r3, #3
 80190f8:	b29b      	uxth	r3, r3
 80190fa:	1ad3      	subs	r3, r2, r3
 80190fc:	b29a      	uxth	r2, r3
 80190fe:	68bb      	ldr	r3, [r7, #8]
 8019100:	801a      	strh	r2, [r3, #0]
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	889a      	ldrh	r2, [r3, #4]
 8019106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019108:	b29b      	uxth	r3, r3
 801910a:	00db      	lsls	r3, r3, #3
 801910c:	b29b      	uxth	r3, r3
 801910e:	4413      	add	r3, r2
 8019110:	b29a      	uxth	r2, r3
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	809a      	strh	r2, [r3, #4]
 8019116:	68bb      	ldr	r3, [r7, #8]
 8019118:	889a      	ldrh	r2, [r3, #4]
 801911a:	6a3b      	ldr	r3, [r7, #32]
 801911c:	b29b      	uxth	r3, r3
 801911e:	00db      	lsls	r3, r3, #3
 8019120:	b29b      	uxth	r3, r3
 8019122:	4413      	add	r3, r2
 8019124:	b29a      	uxth	r2, r3
 8019126:	68bb      	ldr	r3, [r7, #8]
 8019128:	809a      	strh	r2, [r3, #4]
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	881a      	ldrh	r2, [r3, #0]
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	885b      	ldrh	r3, [r3, #2]
 8019132:	429a      	cmp	r2, r3
 8019134:	d950      	bls.n	80191d8 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x198>
 8019136:	4b5b      	ldr	r3, [pc, #364]	; (80192a4 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x264>)
 8019138:	f240 621e 	movw	r2, #1566	; 0x61e
 801913c:	495a      	ldr	r1, [pc, #360]	; (80192a8 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x268>)
 801913e:	485b      	ldr	r0, [pc, #364]	; (80192ac <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x26c>)
 8019140:	f7ef fd72 	bl	8008c28 <xprintf>
 8019144:	2301      	movs	r3, #1
 8019146:	613b      	str	r3, [r7, #16]
 8019148:	bf00      	nop
 801914a:	693b      	ldr	r3, [r7, #16]
 801914c:	2b00      	cmp	r3, #0
 801914e:	d1fc      	bne.n	801914a <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x10a>
 8019150:	e042      	b.n	80191d8 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x198>
 8019152:	6a3a      	ldr	r2, [r7, #32]
 8019154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019156:	1ad3      	subs	r3, r2, r3
 8019158:	623b      	str	r3, [r7, #32]
 801915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801915c:	3b01      	subs	r3, #1
 801915e:	627b      	str	r3, [r7, #36]	; 0x24
 8019160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019162:	00db      	lsls	r3, r3, #3
 8019164:	69ba      	ldr	r2, [r7, #24]
 8019166:	4413      	add	r3, r2
 8019168:	6a3a      	ldr	r2, [r7, #32]
 801916a:	00d2      	lsls	r2, r2, #3
 801916c:	69f9      	ldr	r1, [r7, #28]
 801916e:	440a      	add	r2, r1
 8019170:	7812      	ldrb	r2, [r2, #0]
 8019172:	701a      	strb	r2, [r3, #0]
 8019174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019176:	00db      	lsls	r3, r3, #3
 8019178:	69ba      	ldr	r2, [r7, #24]
 801917a:	4413      	add	r3, r2
 801917c:	6a3a      	ldr	r2, [r7, #32]
 801917e:	00d2      	lsls	r2, r2, #3
 8019180:	69f9      	ldr	r1, [r7, #28]
 8019182:	440a      	add	r2, r1
 8019184:	7852      	ldrb	r2, [r2, #1]
 8019186:	705a      	strb	r2, [r3, #1]
 8019188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801918a:	00db      	lsls	r3, r3, #3
 801918c:	69ba      	ldr	r2, [r7, #24]
 801918e:	4413      	add	r3, r2
 8019190:	6a3a      	ldr	r2, [r7, #32]
 8019192:	00d2      	lsls	r2, r2, #3
 8019194:	69f9      	ldr	r1, [r7, #28]
 8019196:	440a      	add	r2, r1
 8019198:	7912      	ldrb	r2, [r2, #4]
 801919a:	709a      	strb	r2, [r3, #2]
 801919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801919e:	00db      	lsls	r3, r3, #3
 80191a0:	69ba      	ldr	r2, [r7, #24]
 80191a2:	4413      	add	r3, r2
 80191a4:	6a3a      	ldr	r2, [r7, #32]
 80191a6:	00d2      	lsls	r2, r2, #3
 80191a8:	69f9      	ldr	r1, [r7, #28]
 80191aa:	440a      	add	r2, r1
 80191ac:	7952      	ldrb	r2, [r2, #5]
 80191ae:	70da      	strb	r2, [r3, #3]
 80191b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191b2:	00db      	lsls	r3, r3, #3
 80191b4:	69ba      	ldr	r2, [r7, #24]
 80191b6:	4413      	add	r3, r2
 80191b8:	6a3a      	ldr	r2, [r7, #32]
 80191ba:	00d2      	lsls	r2, r2, #3
 80191bc:	69f9      	ldr	r1, [r7, #28]
 80191be:	440a      	add	r2, r1
 80191c0:	79d2      	ldrb	r2, [r2, #7]
 80191c2:	711a      	strb	r2, [r3, #4]
 80191c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191c6:	00db      	lsls	r3, r3, #3
 80191c8:	69ba      	ldr	r2, [r7, #24]
 80191ca:	4413      	add	r3, r2
 80191cc:	6a3a      	ldr	r2, [r7, #32]
 80191ce:	00d2      	lsls	r2, r2, #3
 80191d0:	69f9      	ldr	r1, [r7, #28]
 80191d2:	440a      	add	r2, r1
 80191d4:	78d2      	ldrb	r2, [r2, #3]
 80191d6:	715a      	strb	r2, [r3, #5]
 80191d8:	6a3b      	ldr	r3, [r7, #32]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d1b9      	bne.n	8019152 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x112>
 80191de:	683b      	ldr	r3, [r7, #0]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d018      	beq.n	8019216 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x1d6>
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	881a      	ldrh	r2, [r3, #0]
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	885b      	ldrh	r3, [r3, #2]
 80191ec:	429a      	cmp	r2, r3
 80191ee:	d112      	bne.n	8019216 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x1d6>
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	881a      	ldrh	r2, [r3, #0]
 80191f4:	683b      	ldr	r3, [r7, #0]
 80191f6:	801a      	strh	r2, [r3, #0]
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	889a      	ldrh	r2, [r3, #4]
 80191fc:	683b      	ldr	r3, [r7, #0]
 80191fe:	809a      	strh	r2, [r3, #4]
 8019200:	683b      	ldr	r3, [r7, #0]
 8019202:	f103 0014 	add.w	r0, r3, #20
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	f103 0114 	add.w	r1, r3, #20
 801920c:	683b      	ldr	r3, [r7, #0]
 801920e:	881b      	ldrh	r3, [r3, #0]
 8019210:	461a      	mov	r2, r3
 8019212:	f003 ff15 	bl	801d040 <memcpy>
 8019216:	4a26      	ldr	r2, [pc, #152]	; (80192b0 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x270>)
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801921e:	2b01      	cmp	r3, #1
 8019220:	d132      	bne.n	8019288 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x248>
 8019222:	4a24      	ldr	r2, [pc, #144]	; (80192b4 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x274>)
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	4413      	add	r3, r2
 8019228:	2208      	movs	r2, #8
 801922a:	701a      	strb	r2, [r3, #0]
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	015b      	lsls	r3, r3, #5
 8019230:	4a21      	ldr	r2, [pc, #132]	; (80192b8 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x278>)
 8019232:	4413      	add	r3, r2
 8019234:	2220      	movs	r2, #32
 8019236:	2100      	movs	r1, #0
 8019238:	4618      	mov	r0, r3
 801923a:	f003 ff9b 	bl	801d174 <memset>
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	015b      	lsls	r3, r3, #5
 8019242:	4a1d      	ldr	r2, [pc, #116]	; (80192b8 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x278>)
 8019244:	4413      	add	r3, r2
 8019246:	69f9      	ldr	r1, [r7, #28]
 8019248:	2208      	movs	r2, #8
 801924a:	4618      	mov	r0, r3
 801924c:	f003 fef8 	bl	801d040 <memcpy>
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	015b      	lsls	r3, r3, #5
 8019254:	3310      	adds	r3, #16
 8019256:	4a18      	ldr	r2, [pc, #96]	; (80192b8 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x278>)
 8019258:	4413      	add	r3, r2
 801925a:	69b9      	ldr	r1, [r7, #24]
 801925c:	2208      	movs	r2, #8
 801925e:	4618      	mov	r0, r3
 8019260:	f003 feee 	bl	801d040 <memcpy>
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d009      	beq.n	801927e <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x23e>
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	015b      	lsls	r3, r3, #5
 801926e:	3318      	adds	r3, #24
 8019270:	4a11      	ldr	r2, [pc, #68]	; (80192b8 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x278>)
 8019272:	4413      	add	r3, r2
 8019274:	69b9      	ldr	r1, [r7, #24]
 8019276:	2208      	movs	r2, #8
 8019278:	4618      	mov	r0, r3
 801927a:	f003 fee1 	bl	801d040 <memcpy>
 801927e:	4a0c      	ldr	r2, [pc, #48]	; (80192b0 <conv_ns_16L8L8N16P8P8N_to_16L16P8L8P16N_16L16P8L8P16N+0x270>)
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	2100      	movs	r1, #0
 8019284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	881a      	ldrh	r2, [r3, #0]
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	885b      	ldrh	r3, [r3, #2]
 8019290:	429a      	cmp	r2, r3
 8019292:	bf0c      	ite	eq
 8019294:	2301      	moveq	r3, #1
 8019296:	2300      	movne	r3, #0
 8019298:	b2db      	uxtb	r3, r3
 801929a:	4618      	mov	r0, r3
 801929c:	3728      	adds	r7, #40	; 0x28
 801929e:	46bd      	mov	sp, r7
 80192a0:	bd80      	pop	{r7, pc}
 80192a2:	bf00      	nop
 80192a4:	0803ecd8 	.word	0x0803ecd8
 80192a8:	0803ef02 	.word	0x0803ef02
 80192ac:	0803f4f9 	.word	0x0803f4f9
 80192b0:	100027ac 	.word	0x100027ac
 80192b4:	10002e88 	.word	0x10002e88
 80192b8:	10002e48 	.word	0x10002e48

080192bc <conv_ds_24L24P_to_24L24L16N_24P24P16N>:
  //103 547
  SET_SLOT(1, 0, 1, 0);
  SET_SLOT(1, 1, 5, 4);
  SET_SLOT(1, 2, 3, 7);
})
CONVERT_ROUTINE2(conv_ds_24L24P_to_24L24L16N_24P24P16N, t_24L24P, t_24L24L16N,
 80192bc:	b580      	push	{r7, lr}
 80192be:	b08c      	sub	sp, #48	; 0x30
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	60f8      	str	r0, [r7, #12]
 80192c4:	60b9      	str	r1, [r7, #8]
 80192c6:	607a      	str	r2, [r7, #4]
 80192c8:	603b      	str	r3, [r7, #0]
 80192ca:	68bb      	ldr	r3, [r7, #8]
 80192cc:	889b      	ldrh	r3, [r3, #4]
 80192ce:	3310      	adds	r3, #16
 80192d0:	68ba      	ldr	r2, [r7, #8]
 80192d2:	4413      	add	r3, r2
 80192d4:	3304      	adds	r3, #4
 80192d6:	627b      	str	r3, [r7, #36]	; 0x24
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	889b      	ldrh	r3, [r3, #4]
 80192dc:	3310      	adds	r3, #16
 80192de:	687a      	ldr	r2, [r7, #4]
 80192e0:	4413      	add	r3, r2
 80192e2:	3304      	adds	r3, #4
 80192e4:	623b      	str	r3, [r7, #32]
 80192e6:	683b      	ldr	r3, [r7, #0]
 80192e8:	889b      	ldrh	r3, [r3, #4]
 80192ea:	3310      	adds	r3, #16
 80192ec:	683a      	ldr	r2, [r7, #0]
 80192ee:	4413      	add	r3, r2
 80192f0:	3304      	adds	r3, #4
 80192f2:	61fb      	str	r3, [r7, #28]
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	885b      	ldrh	r3, [r3, #2]
 80192f8:	461a      	mov	r2, r3
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	881b      	ldrh	r3, [r3, #0]
 80192fe:	1ad3      	subs	r3, r2, r3
 8019300:	08da      	lsrs	r2, r3, #3
 8019302:	68bb      	ldr	r3, [r7, #8]
 8019304:	881b      	ldrh	r3, [r3, #0]
 8019306:	4619      	mov	r1, r3
 8019308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801930a:	005b      	lsls	r3, r3, #1
 801930c:	fb91 f3f3 	sdiv	r3, r1, r3
 8019310:	4619      	mov	r1, r3
 8019312:	4b44      	ldr	r3, [pc, #272]	; (8019424 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x168>)
 8019314:	fba3 1301 	umull	r1, r3, r3, r1
 8019318:	089b      	lsrs	r3, r3, #2
 801931a:	4293      	cmp	r3, r2
 801931c:	bf28      	it	cs
 801931e:	4613      	movcs	r3, r2
 8019320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019324:	005b      	lsls	r3, r3, #1
 8019326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019328:	fb02 f303 	mul.w	r3, r2, r3
 801932c:	62bb      	str	r3, [r7, #40]	; 0x28
 801932e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019330:	2b00      	cmp	r3, #0
 8019332:	d110      	bne.n	8019356 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x9a>
 8019334:	68bb      	ldr	r3, [r7, #8]
 8019336:	2200      	movs	r2, #0
 8019338:	801a      	strh	r2, [r3, #0]
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	2200      	movs	r2, #0
 801933e:	801a      	strh	r2, [r3, #0]
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	2200      	movs	r2, #0
 8019344:	809a      	strh	r2, [r3, #4]
 8019346:	683b      	ldr	r3, [r7, #0]
 8019348:	2200      	movs	r2, #0
 801934a:	801a      	strh	r2, [r3, #0]
 801934c:	683b      	ldr	r3, [r7, #0]
 801934e:	2200      	movs	r2, #0
 8019350:	809a      	strh	r2, [r3, #4]
 8019352:	2300      	movs	r3, #0
 8019354:	e16e      	b.n	8019634 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x378>
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	881a      	ldrh	r2, [r3, #0]
 801935a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801935c:	b29b      	uxth	r3, r3
 801935e:	00db      	lsls	r3, r3, #3
 8019360:	b29b      	uxth	r3, r3
 8019362:	4413      	add	r3, r2
 8019364:	b29a      	uxth	r2, r3
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	801a      	strh	r2, [r3, #0]
 801936a:	683b      	ldr	r3, [r7, #0]
 801936c:	881a      	ldrh	r2, [r3, #0]
 801936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019370:	b29b      	uxth	r3, r3
 8019372:	00db      	lsls	r3, r3, #3
 8019374:	b29b      	uxth	r3, r3
 8019376:	4413      	add	r3, r2
 8019378:	b29a      	uxth	r2, r3
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	801a      	strh	r2, [r3, #0]
 801937e:	68bb      	ldr	r3, [r7, #8]
 8019380:	881a      	ldrh	r2, [r3, #0]
 8019382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019384:	b29b      	uxth	r3, r3
 8019386:	4619      	mov	r1, r3
 8019388:	0049      	lsls	r1, r1, #1
 801938a:	440b      	add	r3, r1
 801938c:	005b      	lsls	r3, r3, #1
 801938e:	b29b      	uxth	r3, r3
 8019390:	1ad3      	subs	r3, r2, r3
 8019392:	b29a      	uxth	r2, r3
 8019394:	68bb      	ldr	r3, [r7, #8]
 8019396:	801a      	strh	r2, [r3, #0]
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	889a      	ldrh	r2, [r3, #4]
 801939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801939e:	b29b      	uxth	r3, r3
 80193a0:	00db      	lsls	r3, r3, #3
 80193a2:	b29b      	uxth	r3, r3
 80193a4:	4413      	add	r3, r2
 80193a6:	b29a      	uxth	r2, r3
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	809a      	strh	r2, [r3, #4]
 80193ac:	683b      	ldr	r3, [r7, #0]
 80193ae:	889a      	ldrh	r2, [r3, #4]
 80193b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193b2:	b29b      	uxth	r3, r3
 80193b4:	00db      	lsls	r3, r3, #3
 80193b6:	b29b      	uxth	r3, r3
 80193b8:	4413      	add	r3, r2
 80193ba:	b29a      	uxth	r2, r3
 80193bc:	683b      	ldr	r3, [r7, #0]
 80193be:	809a      	strh	r2, [r3, #4]
 80193c0:	68bb      	ldr	r3, [r7, #8]
 80193c2:	889a      	ldrh	r2, [r3, #4]
 80193c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c6:	b29b      	uxth	r3, r3
 80193c8:	4619      	mov	r1, r3
 80193ca:	0049      	lsls	r1, r1, #1
 80193cc:	440b      	add	r3, r1
 80193ce:	005b      	lsls	r3, r3, #1
 80193d0:	b29b      	uxth	r3, r3
 80193d2:	4413      	add	r3, r2
 80193d4:	b29a      	uxth	r2, r3
 80193d6:	68bb      	ldr	r3, [r7, #8]
 80193d8:	809a      	strh	r2, [r3, #4]
 80193da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d10c      	bne.n	80193fa <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x13e>
 80193e0:	4b11      	ldr	r3, [pc, #68]	; (8019428 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x16c>)
 80193e2:	f240 6229 	movw	r2, #1577	; 0x629
 80193e6:	4911      	ldr	r1, [pc, #68]	; (801942c <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x170>)
 80193e8:	4811      	ldr	r0, [pc, #68]	; (8019430 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x174>)
 80193ea:	f7ef fc1d 	bl	8008c28 <xprintf>
 80193ee:	2301      	movs	r3, #1
 80193f0:	61bb      	str	r3, [r7, #24]
 80193f2:	bf00      	nop
 80193f4:	69bb      	ldr	r3, [r7, #24]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d1fc      	bne.n	80193f4 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x138>
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	881a      	ldrh	r2, [r3, #0]
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	885b      	ldrh	r3, [r3, #2]
 8019402:	429a      	cmp	r2, r3
 8019404:	f240 80c8 	bls.w	8019598 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x2dc>
 8019408:	4b0a      	ldr	r3, [pc, #40]	; (8019434 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x178>)
 801940a:	f240 6229 	movw	r2, #1577	; 0x629
 801940e:	4907      	ldr	r1, [pc, #28]	; (801942c <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x170>)
 8019410:	4807      	ldr	r0, [pc, #28]	; (8019430 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x174>)
 8019412:	f7ef fc09 	bl	8008c28 <xprintf>
 8019416:	2301      	movs	r3, #1
 8019418:	617b      	str	r3, [r7, #20]
 801941a:	bf00      	nop
 801941c:	697b      	ldr	r3, [r7, #20]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d1fc      	bne.n	801941c <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x160>
 8019422:	e0b9      	b.n	8019598 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x2dc>
 8019424:	aaaaaaab 	.word	0xaaaaaaab
 8019428:	0803ed00 	.word	0x0803ed00
 801942c:	0803ef38 	.word	0x0803ef38
 8019430:	0803f4f9 	.word	0x0803f4f9
 8019434:	0803ecd8 	.word	0x0803ecd8
 8019438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801943a:	005b      	lsls	r3, r3, #1
 801943c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801943e:	1ad3      	subs	r3, r2, r3
 8019440:	62bb      	str	r3, [r7, #40]	; 0x28
 8019442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019444:	3b01      	subs	r3, #1
 8019446:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801944a:	00db      	lsls	r3, r3, #3
 801944c:	6a3a      	ldr	r2, [r7, #32]
 801944e:	18d1      	adds	r1, r2, r3
 8019450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019452:	4613      	mov	r3, r2
 8019454:	005b      	lsls	r3, r3, #1
 8019456:	4413      	add	r3, r2
 8019458:	005b      	lsls	r3, r3, #1
 801945a:	461a      	mov	r2, r3
 801945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801945e:	4413      	add	r3, r2
 8019460:	785b      	ldrb	r3, [r3, #1]
 8019462:	700b      	strb	r3, [r1, #0]
 8019464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019466:	00db      	lsls	r3, r3, #3
 8019468:	6a3a      	ldr	r2, [r7, #32]
 801946a:	18d1      	adds	r1, r2, r3
 801946c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801946e:	4613      	mov	r3, r2
 8019470:	005b      	lsls	r3, r3, #1
 8019472:	4413      	add	r3, r2
 8019474:	005b      	lsls	r3, r3, #1
 8019476:	461a      	mov	r2, r3
 8019478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801947a:	4413      	add	r3, r2
 801947c:	789b      	ldrb	r3, [r3, #2]
 801947e:	704b      	strb	r3, [r1, #1]
 8019480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019482:	00db      	lsls	r3, r3, #3
 8019484:	6a3a      	ldr	r2, [r7, #32]
 8019486:	18d1      	adds	r1, r2, r3
 8019488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801948a:	4613      	mov	r3, r2
 801948c:	005b      	lsls	r3, r3, #1
 801948e:	4413      	add	r3, r2
 8019490:	005b      	lsls	r3, r3, #1
 8019492:	461a      	mov	r2, r3
 8019494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019496:	4413      	add	r3, r2
 8019498:	7a1b      	ldrb	r3, [r3, #8]
 801949a:	708b      	strb	r3, [r1, #2]
 801949c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801949e:	00db      	lsls	r3, r3, #3
 80194a0:	6a3a      	ldr	r2, [r7, #32]
 80194a2:	18d1      	adds	r1, r2, r3
 80194a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80194a6:	4613      	mov	r3, r2
 80194a8:	005b      	lsls	r3, r3, #1
 80194aa:	4413      	add	r3, r2
 80194ac:	005b      	lsls	r3, r3, #1
 80194ae:	461a      	mov	r2, r3
 80194b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194b2:	4413      	add	r3, r2
 80194b4:	781b      	ldrb	r3, [r3, #0]
 80194b6:	70cb      	strb	r3, [r1, #3]
 80194b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194ba:	00db      	lsls	r3, r3, #3
 80194bc:	6a3a      	ldr	r2, [r7, #32]
 80194be:	18d1      	adds	r1, r2, r3
 80194c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80194c2:	4613      	mov	r3, r2
 80194c4:	005b      	lsls	r3, r3, #1
 80194c6:	4413      	add	r3, r2
 80194c8:	005b      	lsls	r3, r3, #1
 80194ca:	461a      	mov	r2, r3
 80194cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194ce:	4413      	add	r3, r2
 80194d0:	799b      	ldrb	r3, [r3, #6]
 80194d2:	710b      	strb	r3, [r1, #4]
 80194d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194d6:	00db      	lsls	r3, r3, #3
 80194d8:	6a3a      	ldr	r2, [r7, #32]
 80194da:	18d1      	adds	r1, r2, r3
 80194dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80194de:	4613      	mov	r3, r2
 80194e0:	005b      	lsls	r3, r3, #1
 80194e2:	4413      	add	r3, r2
 80194e4:	005b      	lsls	r3, r3, #1
 80194e6:	461a      	mov	r2, r3
 80194e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194ea:	4413      	add	r3, r2
 80194ec:	79db      	ldrb	r3, [r3, #7]
 80194ee:	714b      	strb	r3, [r1, #5]
 80194f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194f2:	00db      	lsls	r3, r3, #3
 80194f4:	69fa      	ldr	r2, [r7, #28]
 80194f6:	18d1      	adds	r1, r2, r3
 80194f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80194fa:	4613      	mov	r3, r2
 80194fc:	005b      	lsls	r3, r3, #1
 80194fe:	4413      	add	r3, r2
 8019500:	005b      	lsls	r3, r3, #1
 8019502:	461a      	mov	r2, r3
 8019504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019506:	4413      	add	r3, r2
 8019508:	791b      	ldrb	r3, [r3, #4]
 801950a:	700b      	strb	r3, [r1, #0]
 801950c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801950e:	00db      	lsls	r3, r3, #3
 8019510:	69fa      	ldr	r2, [r7, #28]
 8019512:	18d1      	adds	r1, r2, r3
 8019514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019516:	4613      	mov	r3, r2
 8019518:	005b      	lsls	r3, r3, #1
 801951a:	4413      	add	r3, r2
 801951c:	005b      	lsls	r3, r3, #1
 801951e:	461a      	mov	r2, r3
 8019520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019522:	4413      	add	r3, r2
 8019524:	795b      	ldrb	r3, [r3, #5]
 8019526:	704b      	strb	r3, [r1, #1]
 8019528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801952a:	00db      	lsls	r3, r3, #3
 801952c:	69fa      	ldr	r2, [r7, #28]
 801952e:	18d1      	adds	r1, r2, r3
 8019530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019532:	4613      	mov	r3, r2
 8019534:	005b      	lsls	r3, r3, #1
 8019536:	4413      	add	r3, r2
 8019538:	005b      	lsls	r3, r3, #1
 801953a:	461a      	mov	r2, r3
 801953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801953e:	4413      	add	r3, r2
 8019540:	7adb      	ldrb	r3, [r3, #11]
 8019542:	708b      	strb	r3, [r1, #2]
 8019544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019546:	00db      	lsls	r3, r3, #3
 8019548:	69fa      	ldr	r2, [r7, #28]
 801954a:	18d1      	adds	r1, r2, r3
 801954c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801954e:	4613      	mov	r3, r2
 8019550:	005b      	lsls	r3, r3, #1
 8019552:	4413      	add	r3, r2
 8019554:	005b      	lsls	r3, r3, #1
 8019556:	461a      	mov	r2, r3
 8019558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801955a:	4413      	add	r3, r2
 801955c:	78db      	ldrb	r3, [r3, #3]
 801955e:	70cb      	strb	r3, [r1, #3]
 8019560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019562:	00db      	lsls	r3, r3, #3
 8019564:	69fa      	ldr	r2, [r7, #28]
 8019566:	18d1      	adds	r1, r2, r3
 8019568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801956a:	4613      	mov	r3, r2
 801956c:	005b      	lsls	r3, r3, #1
 801956e:	4413      	add	r3, r2
 8019570:	005b      	lsls	r3, r3, #1
 8019572:	461a      	mov	r2, r3
 8019574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019576:	4413      	add	r3, r2
 8019578:	7a5b      	ldrb	r3, [r3, #9]
 801957a:	710b      	strb	r3, [r1, #4]
 801957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801957e:	00db      	lsls	r3, r3, #3
 8019580:	69fa      	ldr	r2, [r7, #28]
 8019582:	18d1      	adds	r1, r2, r3
 8019584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019586:	4613      	mov	r3, r2
 8019588:	005b      	lsls	r3, r3, #1
 801958a:	4413      	add	r3, r2
 801958c:	005b      	lsls	r3, r3, #1
 801958e:	461a      	mov	r2, r3
 8019590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019592:	4413      	add	r3, r2
 8019594:	7a9b      	ldrb	r3, [r3, #10]
 8019596:	714b      	strb	r3, [r1, #5]
 8019598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801959a:	2b00      	cmp	r3, #0
 801959c:	f47f af4c 	bne.w	8019438 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x17c>
 80195a0:	4a26      	ldr	r2, [pc, #152]	; (801963c <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x380>)
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80195a8:	2b01      	cmp	r3, #1
 80195aa:	d13a      	bne.n	8019622 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x366>
 80195ac:	4a24      	ldr	r2, [pc, #144]	; (8019640 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x384>)
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	4413      	add	r3, r2
 80195b2:	2206      	movs	r2, #6
 80195b4:	701a      	strb	r2, [r3, #0]
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	015b      	lsls	r3, r3, #5
 80195ba:	4a22      	ldr	r2, [pc, #136]	; (8019644 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x388>)
 80195bc:	4413      	add	r3, r2
 80195be:	2220      	movs	r2, #32
 80195c0:	2100      	movs	r1, #0
 80195c2:	4618      	mov	r0, r3
 80195c4:	f003 fdd6 	bl	801d174 <memset>
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	015b      	lsls	r3, r3, #5
 80195cc:	4a1d      	ldr	r2, [pc, #116]	; (8019644 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x388>)
 80195ce:	4413      	add	r3, r2
 80195d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80195d2:	2206      	movs	r2, #6
 80195d4:	4618      	mov	r0, r3
 80195d6:	f003 fd33 	bl	801d040 <memcpy>
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	015b      	lsls	r3, r3, #5
 80195de:	3308      	adds	r3, #8
 80195e0:	4a18      	ldr	r2, [pc, #96]	; (8019644 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x388>)
 80195e2:	1898      	adds	r0, r3, r2
 80195e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195e6:	3306      	adds	r3, #6
 80195e8:	2206      	movs	r2, #6
 80195ea:	4619      	mov	r1, r3
 80195ec:	f003 fd28 	bl	801d040 <memcpy>
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	015b      	lsls	r3, r3, #5
 80195f4:	3310      	adds	r3, #16
 80195f6:	4a13      	ldr	r2, [pc, #76]	; (8019644 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x388>)
 80195f8:	4413      	add	r3, r2
 80195fa:	6a39      	ldr	r1, [r7, #32]
 80195fc:	2208      	movs	r2, #8
 80195fe:	4618      	mov	r0, r3
 8019600:	f003 fd1e 	bl	801d040 <memcpy>
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	015b      	lsls	r3, r3, #5
 8019608:	3318      	adds	r3, #24
 801960a:	4a0e      	ldr	r2, [pc, #56]	; (8019644 <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x388>)
 801960c:	4413      	add	r3, r2
 801960e:	69f9      	ldr	r1, [r7, #28]
 8019610:	2208      	movs	r2, #8
 8019612:	4618      	mov	r0, r3
 8019614:	f003 fd14 	bl	801d040 <memcpy>
 8019618:	4a08      	ldr	r2, [pc, #32]	; (801963c <conv_ds_24L24P_to_24L24L16N_24P24P16N+0x380>)
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	2100      	movs	r1, #0
 801961e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	881a      	ldrh	r2, [r3, #0]
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	885b      	ldrh	r3, [r3, #2]
 801962a:	429a      	cmp	r2, r3
 801962c:	bf0c      	ite	eq
 801962e:	2301      	moveq	r3, #1
 8019630:	2300      	movne	r3, #0
 8019632:	b2db      	uxtb	r3, r3
 8019634:	4618      	mov	r0, r3
 8019636:	3730      	adds	r7, #48	; 0x30
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}
 801963c:	100027ac 	.word	0x100027ac
 8019640:	10002e88 	.word	0x10002e88
 8019644:	10002e48 	.word	0x10002e48

08019648 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N>:

  SET_SLOT(2, 0, 5, 4);
  SET_SLOT(2, 1, 3, 11);
  SET_SLOT(2, 2, 10, 9);
})
CONVERT_ROUTINE2(conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N, t_24L24P, t_16L16L8L8L16N,
 8019648:	b580      	push	{r7, lr}
 801964a:	b08c      	sub	sp, #48	; 0x30
 801964c:	af00      	add	r7, sp, #0
 801964e:	60f8      	str	r0, [r7, #12]
 8019650:	60b9      	str	r1, [r7, #8]
 8019652:	607a      	str	r2, [r7, #4]
 8019654:	603b      	str	r3, [r7, #0]
 8019656:	68bb      	ldr	r3, [r7, #8]
 8019658:	889b      	ldrh	r3, [r3, #4]
 801965a:	3310      	adds	r3, #16
 801965c:	68ba      	ldr	r2, [r7, #8]
 801965e:	4413      	add	r3, r2
 8019660:	3304      	adds	r3, #4
 8019662:	627b      	str	r3, [r7, #36]	; 0x24
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	889b      	ldrh	r3, [r3, #4]
 8019668:	3310      	adds	r3, #16
 801966a:	687a      	ldr	r2, [r7, #4]
 801966c:	4413      	add	r3, r2
 801966e:	3304      	adds	r3, #4
 8019670:	623b      	str	r3, [r7, #32]
 8019672:	683b      	ldr	r3, [r7, #0]
 8019674:	889b      	ldrh	r3, [r3, #4]
 8019676:	3310      	adds	r3, #16
 8019678:	683a      	ldr	r2, [r7, #0]
 801967a:	4413      	add	r3, r2
 801967c:	3304      	adds	r3, #4
 801967e:	61fb      	str	r3, [r7, #28]
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	885b      	ldrh	r3, [r3, #2]
 8019684:	461a      	mov	r2, r3
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	881b      	ldrh	r3, [r3, #0]
 801968a:	1ad3      	subs	r3, r2, r3
 801968c:	08da      	lsrs	r2, r3, #3
 801968e:	68bb      	ldr	r3, [r7, #8]
 8019690:	881b      	ldrh	r3, [r3, #0]
 8019692:	4619      	mov	r1, r3
 8019694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019696:	005b      	lsls	r3, r3, #1
 8019698:	fb91 f3f3 	sdiv	r3, r1, r3
 801969c:	4619      	mov	r1, r3
 801969e:	4b44      	ldr	r3, [pc, #272]	; (80197b0 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x168>)
 80196a0:	fba3 1301 	umull	r1, r3, r3, r1
 80196a4:	089b      	lsrs	r3, r3, #2
 80196a6:	4293      	cmp	r3, r2
 80196a8:	bf28      	it	cs
 80196aa:	4613      	movcs	r3, r2
 80196ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80196ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196b0:	005b      	lsls	r3, r3, #1
 80196b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196b4:	fb02 f303 	mul.w	r3, r2, r3
 80196b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80196ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d110      	bne.n	80196e2 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x9a>
 80196c0:	68bb      	ldr	r3, [r7, #8]
 80196c2:	2200      	movs	r2, #0
 80196c4:	801a      	strh	r2, [r3, #0]
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	2200      	movs	r2, #0
 80196ca:	801a      	strh	r2, [r3, #0]
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	2200      	movs	r2, #0
 80196d0:	809a      	strh	r2, [r3, #4]
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	2200      	movs	r2, #0
 80196d6:	801a      	strh	r2, [r3, #0]
 80196d8:	683b      	ldr	r3, [r7, #0]
 80196da:	2200      	movs	r2, #0
 80196dc:	809a      	strh	r2, [r3, #4]
 80196de:	2300      	movs	r3, #0
 80196e0:	e16e      	b.n	80199c0 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x378>
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	881a      	ldrh	r2, [r3, #0]
 80196e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196e8:	b29b      	uxth	r3, r3
 80196ea:	00db      	lsls	r3, r3, #3
 80196ec:	b29b      	uxth	r3, r3
 80196ee:	4413      	add	r3, r2
 80196f0:	b29a      	uxth	r2, r3
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	801a      	strh	r2, [r3, #0]
 80196f6:	683b      	ldr	r3, [r7, #0]
 80196f8:	881a      	ldrh	r2, [r3, #0]
 80196fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196fc:	b29b      	uxth	r3, r3
 80196fe:	00db      	lsls	r3, r3, #3
 8019700:	b29b      	uxth	r3, r3
 8019702:	4413      	add	r3, r2
 8019704:	b29a      	uxth	r2, r3
 8019706:	683b      	ldr	r3, [r7, #0]
 8019708:	801a      	strh	r2, [r3, #0]
 801970a:	68bb      	ldr	r3, [r7, #8]
 801970c:	881a      	ldrh	r2, [r3, #0]
 801970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019710:	b29b      	uxth	r3, r3
 8019712:	4619      	mov	r1, r3
 8019714:	0049      	lsls	r1, r1, #1
 8019716:	440b      	add	r3, r1
 8019718:	005b      	lsls	r3, r3, #1
 801971a:	b29b      	uxth	r3, r3
 801971c:	1ad3      	subs	r3, r2, r3
 801971e:	b29a      	uxth	r2, r3
 8019720:	68bb      	ldr	r3, [r7, #8]
 8019722:	801a      	strh	r2, [r3, #0]
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	889a      	ldrh	r2, [r3, #4]
 8019728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801972a:	b29b      	uxth	r3, r3
 801972c:	00db      	lsls	r3, r3, #3
 801972e:	b29b      	uxth	r3, r3
 8019730:	4413      	add	r3, r2
 8019732:	b29a      	uxth	r2, r3
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	809a      	strh	r2, [r3, #4]
 8019738:	683b      	ldr	r3, [r7, #0]
 801973a:	889a      	ldrh	r2, [r3, #4]
 801973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801973e:	b29b      	uxth	r3, r3
 8019740:	00db      	lsls	r3, r3, #3
 8019742:	b29b      	uxth	r3, r3
 8019744:	4413      	add	r3, r2
 8019746:	b29a      	uxth	r2, r3
 8019748:	683b      	ldr	r3, [r7, #0]
 801974a:	809a      	strh	r2, [r3, #4]
 801974c:	68bb      	ldr	r3, [r7, #8]
 801974e:	889a      	ldrh	r2, [r3, #4]
 8019750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019752:	b29b      	uxth	r3, r3
 8019754:	4619      	mov	r1, r3
 8019756:	0049      	lsls	r1, r1, #1
 8019758:	440b      	add	r3, r1
 801975a:	005b      	lsls	r3, r3, #1
 801975c:	b29b      	uxth	r3, r3
 801975e:	4413      	add	r3, r2
 8019760:	b29a      	uxth	r2, r3
 8019762:	68bb      	ldr	r3, [r7, #8]
 8019764:	809a      	strh	r2, [r3, #4]
 8019766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019768:	2b00      	cmp	r3, #0
 801976a:	d10c      	bne.n	8019786 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x13e>
 801976c:	4b11      	ldr	r3, [pc, #68]	; (80197b4 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x16c>)
 801976e:	f240 6234 	movw	r2, #1588	; 0x634
 8019772:	4911      	ldr	r1, [pc, #68]	; (80197b8 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x170>)
 8019774:	4811      	ldr	r0, [pc, #68]	; (80197bc <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x174>)
 8019776:	f7ef fa57 	bl	8008c28 <xprintf>
 801977a:	2301      	movs	r3, #1
 801977c:	61bb      	str	r3, [r7, #24]
 801977e:	bf00      	nop
 8019780:	69bb      	ldr	r3, [r7, #24]
 8019782:	2b00      	cmp	r3, #0
 8019784:	d1fc      	bne.n	8019780 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x138>
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	881a      	ldrh	r2, [r3, #0]
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	885b      	ldrh	r3, [r3, #2]
 801978e:	429a      	cmp	r2, r3
 8019790:	f240 80c8 	bls.w	8019924 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x2dc>
 8019794:	4b0a      	ldr	r3, [pc, #40]	; (80197c0 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x178>)
 8019796:	f240 6234 	movw	r2, #1588	; 0x634
 801979a:	4907      	ldr	r1, [pc, #28]	; (80197b8 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x170>)
 801979c:	4807      	ldr	r0, [pc, #28]	; (80197bc <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x174>)
 801979e:	f7ef fa43 	bl	8008c28 <xprintf>
 80197a2:	2301      	movs	r3, #1
 80197a4:	617b      	str	r3, [r7, #20]
 80197a6:	bf00      	nop
 80197a8:	697b      	ldr	r3, [r7, #20]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d1fc      	bne.n	80197a8 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x160>
 80197ae:	e0b9      	b.n	8019924 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x2dc>
 80197b0:	aaaaaaab 	.word	0xaaaaaaab
 80197b4:	0803ed00 	.word	0x0803ed00
 80197b8:	0803ef5e 	.word	0x0803ef5e
 80197bc:	0803f4f9 	.word	0x0803f4f9
 80197c0:	0803ecd8 	.word	0x0803ecd8
 80197c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197c6:	005b      	lsls	r3, r3, #1
 80197c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80197ca:	1ad3      	subs	r3, r2, r3
 80197cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80197ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197d0:	3b01      	subs	r3, #1
 80197d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80197d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197d6:	00db      	lsls	r3, r3, #3
 80197d8:	6a3a      	ldr	r2, [r7, #32]
 80197da:	18d1      	adds	r1, r2, r3
 80197dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80197de:	4613      	mov	r3, r2
 80197e0:	005b      	lsls	r3, r3, #1
 80197e2:	4413      	add	r3, r2
 80197e4:	005b      	lsls	r3, r3, #1
 80197e6:	461a      	mov	r2, r3
 80197e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ea:	4413      	add	r3, r2
 80197ec:	785b      	ldrb	r3, [r3, #1]
 80197ee:	700b      	strb	r3, [r1, #0]
 80197f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197f2:	00db      	lsls	r3, r3, #3
 80197f4:	6a3a      	ldr	r2, [r7, #32]
 80197f6:	18d1      	adds	r1, r2, r3
 80197f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80197fa:	4613      	mov	r3, r2
 80197fc:	005b      	lsls	r3, r3, #1
 80197fe:	4413      	add	r3, r2
 8019800:	005b      	lsls	r3, r3, #1
 8019802:	461a      	mov	r2, r3
 8019804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019806:	4413      	add	r3, r2
 8019808:	789b      	ldrb	r3, [r3, #2]
 801980a:	704b      	strb	r3, [r1, #1]
 801980c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801980e:	00db      	lsls	r3, r3, #3
 8019810:	6a3a      	ldr	r2, [r7, #32]
 8019812:	18d1      	adds	r1, r2, r3
 8019814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019816:	4613      	mov	r3, r2
 8019818:	005b      	lsls	r3, r3, #1
 801981a:	4413      	add	r3, r2
 801981c:	005b      	lsls	r3, r3, #1
 801981e:	461a      	mov	r2, r3
 8019820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019822:	4413      	add	r3, r2
 8019824:	79db      	ldrb	r3, [r3, #7]
 8019826:	708b      	strb	r3, [r1, #2]
 8019828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801982a:	00db      	lsls	r3, r3, #3
 801982c:	6a3a      	ldr	r2, [r7, #32]
 801982e:	18d1      	adds	r1, r2, r3
 8019830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019832:	4613      	mov	r3, r2
 8019834:	005b      	lsls	r3, r3, #1
 8019836:	4413      	add	r3, r2
 8019838:	005b      	lsls	r3, r3, #1
 801983a:	461a      	mov	r2, r3
 801983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801983e:	4413      	add	r3, r2
 8019840:	7a1b      	ldrb	r3, [r3, #8]
 8019842:	70cb      	strb	r3, [r1, #3]
 8019844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019846:	00db      	lsls	r3, r3, #3
 8019848:	6a3a      	ldr	r2, [r7, #32]
 801984a:	18d1      	adds	r1, r2, r3
 801984c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801984e:	4613      	mov	r3, r2
 8019850:	005b      	lsls	r3, r3, #1
 8019852:	4413      	add	r3, r2
 8019854:	005b      	lsls	r3, r3, #1
 8019856:	461a      	mov	r2, r3
 8019858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801985a:	4413      	add	r3, r2
 801985c:	799b      	ldrb	r3, [r3, #6]
 801985e:	710b      	strb	r3, [r1, #4]
 8019860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019862:	00db      	lsls	r3, r3, #3
 8019864:	6a3a      	ldr	r2, [r7, #32]
 8019866:	18d1      	adds	r1, r2, r3
 8019868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801986a:	4613      	mov	r3, r2
 801986c:	005b      	lsls	r3, r3, #1
 801986e:	4413      	add	r3, r2
 8019870:	005b      	lsls	r3, r3, #1
 8019872:	461a      	mov	r2, r3
 8019874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019876:	4413      	add	r3, r2
 8019878:	781b      	ldrb	r3, [r3, #0]
 801987a:	714b      	strb	r3, [r1, #5]
 801987c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801987e:	00db      	lsls	r3, r3, #3
 8019880:	69fa      	ldr	r2, [r7, #28]
 8019882:	18d1      	adds	r1, r2, r3
 8019884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019886:	4613      	mov	r3, r2
 8019888:	005b      	lsls	r3, r3, #1
 801988a:	4413      	add	r3, r2
 801988c:	005b      	lsls	r3, r3, #1
 801988e:	461a      	mov	r2, r3
 8019890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019892:	4413      	add	r3, r2
 8019894:	791b      	ldrb	r3, [r3, #4]
 8019896:	700b      	strb	r3, [r1, #0]
 8019898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801989a:	00db      	lsls	r3, r3, #3
 801989c:	69fa      	ldr	r2, [r7, #28]
 801989e:	18d1      	adds	r1, r2, r3
 80198a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198a2:	4613      	mov	r3, r2
 80198a4:	005b      	lsls	r3, r3, #1
 80198a6:	4413      	add	r3, r2
 80198a8:	005b      	lsls	r3, r3, #1
 80198aa:	461a      	mov	r2, r3
 80198ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ae:	4413      	add	r3, r2
 80198b0:	795b      	ldrb	r3, [r3, #5]
 80198b2:	704b      	strb	r3, [r1, #1]
 80198b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198b6:	00db      	lsls	r3, r3, #3
 80198b8:	69fa      	ldr	r2, [r7, #28]
 80198ba:	18d1      	adds	r1, r2, r3
 80198bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198be:	4613      	mov	r3, r2
 80198c0:	005b      	lsls	r3, r3, #1
 80198c2:	4413      	add	r3, r2
 80198c4:	005b      	lsls	r3, r3, #1
 80198c6:	461a      	mov	r2, r3
 80198c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ca:	4413      	add	r3, r2
 80198cc:	7a9b      	ldrb	r3, [r3, #10]
 80198ce:	708b      	strb	r3, [r1, #2]
 80198d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198d2:	00db      	lsls	r3, r3, #3
 80198d4:	69fa      	ldr	r2, [r7, #28]
 80198d6:	18d1      	adds	r1, r2, r3
 80198d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198da:	4613      	mov	r3, r2
 80198dc:	005b      	lsls	r3, r3, #1
 80198de:	4413      	add	r3, r2
 80198e0:	005b      	lsls	r3, r3, #1
 80198e2:	461a      	mov	r2, r3
 80198e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198e6:	4413      	add	r3, r2
 80198e8:	7adb      	ldrb	r3, [r3, #11]
 80198ea:	70cb      	strb	r3, [r1, #3]
 80198ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198ee:	00db      	lsls	r3, r3, #3
 80198f0:	69fa      	ldr	r2, [r7, #28]
 80198f2:	18d1      	adds	r1, r2, r3
 80198f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198f6:	4613      	mov	r3, r2
 80198f8:	005b      	lsls	r3, r3, #1
 80198fa:	4413      	add	r3, r2
 80198fc:	005b      	lsls	r3, r3, #1
 80198fe:	461a      	mov	r2, r3
 8019900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019902:	4413      	add	r3, r2
 8019904:	7a5b      	ldrb	r3, [r3, #9]
 8019906:	710b      	strb	r3, [r1, #4]
 8019908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801990a:	00db      	lsls	r3, r3, #3
 801990c:	69fa      	ldr	r2, [r7, #28]
 801990e:	18d1      	adds	r1, r2, r3
 8019910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019912:	4613      	mov	r3, r2
 8019914:	005b      	lsls	r3, r3, #1
 8019916:	4413      	add	r3, r2
 8019918:	005b      	lsls	r3, r3, #1
 801991a:	461a      	mov	r2, r3
 801991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801991e:	4413      	add	r3, r2
 8019920:	78db      	ldrb	r3, [r3, #3]
 8019922:	714b      	strb	r3, [r1, #5]
 8019924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019926:	2b00      	cmp	r3, #0
 8019928:	f47f af4c 	bne.w	80197c4 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x17c>
 801992c:	4a26      	ldr	r2, [pc, #152]	; (80199c8 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x380>)
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019934:	2b01      	cmp	r3, #1
 8019936:	d13a      	bne.n	80199ae <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x366>
 8019938:	4a24      	ldr	r2, [pc, #144]	; (80199cc <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x384>)
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	4413      	add	r3, r2
 801993e:	2206      	movs	r2, #6
 8019940:	701a      	strb	r2, [r3, #0]
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	015b      	lsls	r3, r3, #5
 8019946:	4a22      	ldr	r2, [pc, #136]	; (80199d0 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x388>)
 8019948:	4413      	add	r3, r2
 801994a:	2220      	movs	r2, #32
 801994c:	2100      	movs	r1, #0
 801994e:	4618      	mov	r0, r3
 8019950:	f003 fc10 	bl	801d174 <memset>
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	015b      	lsls	r3, r3, #5
 8019958:	4a1d      	ldr	r2, [pc, #116]	; (80199d0 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x388>)
 801995a:	4413      	add	r3, r2
 801995c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801995e:	2206      	movs	r2, #6
 8019960:	4618      	mov	r0, r3
 8019962:	f003 fb6d 	bl	801d040 <memcpy>
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	015b      	lsls	r3, r3, #5
 801996a:	3308      	adds	r3, #8
 801996c:	4a18      	ldr	r2, [pc, #96]	; (80199d0 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x388>)
 801996e:	1898      	adds	r0, r3, r2
 8019970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019972:	3306      	adds	r3, #6
 8019974:	2206      	movs	r2, #6
 8019976:	4619      	mov	r1, r3
 8019978:	f003 fb62 	bl	801d040 <memcpy>
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	015b      	lsls	r3, r3, #5
 8019980:	3310      	adds	r3, #16
 8019982:	4a13      	ldr	r2, [pc, #76]	; (80199d0 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x388>)
 8019984:	4413      	add	r3, r2
 8019986:	6a39      	ldr	r1, [r7, #32]
 8019988:	2208      	movs	r2, #8
 801998a:	4618      	mov	r0, r3
 801998c:	f003 fb58 	bl	801d040 <memcpy>
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	015b      	lsls	r3, r3, #5
 8019994:	3318      	adds	r3, #24
 8019996:	4a0e      	ldr	r2, [pc, #56]	; (80199d0 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x388>)
 8019998:	4413      	add	r3, r2
 801999a:	69f9      	ldr	r1, [r7, #28]
 801999c:	2208      	movs	r2, #8
 801999e:	4618      	mov	r0, r3
 80199a0:	f003 fb4e 	bl	801d040 <memcpy>
 80199a4:	4a08      	ldr	r2, [pc, #32]	; (80199c8 <conv_ds_24L24P_to_16L16L8L8L16N_16P16P8P8P16N+0x380>)
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	2100      	movs	r1, #0
 80199aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	881a      	ldrh	r2, [r3, #0]
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	885b      	ldrh	r3, [r3, #2]
 80199b6:	429a      	cmp	r2, r3
 80199b8:	bf0c      	ite	eq
 80199ba:	2301      	moveq	r3, #1
 80199bc:	2300      	movne	r3, #0
 80199be:	b2db      	uxtb	r3, r3
 80199c0:	4618      	mov	r0, r3
 80199c2:	3730      	adds	r7, #48	; 0x30
 80199c4:	46bd      	mov	sp, r7
 80199c6:	bd80      	pop	{r7, pc}
 80199c8:	100027ac 	.word	0x100027ac
 80199cc:	10002e88 	.word	0x10002e88
 80199d0:	10002e48 	.word	0x10002e48

080199d4 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N>:

  SET_SLOT(2, 0, 5, 4);
  SET_SLOT(2, 1, 11, 10);
  SET_SLOT(2, 2, 3, 9);
})
CONVERT_ROUTINE2(conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N, t_24L8N24P8N, t_24L24L16N,
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b08c      	sub	sp, #48	; 0x30
 80199d8:	af00      	add	r7, sp, #0
 80199da:	60f8      	str	r0, [r7, #12]
 80199dc:	60b9      	str	r1, [r7, #8]
 80199de:	607a      	str	r2, [r7, #4]
 80199e0:	603b      	str	r3, [r7, #0]
 80199e2:	68bb      	ldr	r3, [r7, #8]
 80199e4:	889b      	ldrh	r3, [r3, #4]
 80199e6:	3310      	adds	r3, #16
 80199e8:	68ba      	ldr	r2, [r7, #8]
 80199ea:	4413      	add	r3, r2
 80199ec:	3304      	adds	r3, #4
 80199ee:	627b      	str	r3, [r7, #36]	; 0x24
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	889b      	ldrh	r3, [r3, #4]
 80199f4:	3310      	adds	r3, #16
 80199f6:	687a      	ldr	r2, [r7, #4]
 80199f8:	4413      	add	r3, r2
 80199fa:	3304      	adds	r3, #4
 80199fc:	623b      	str	r3, [r7, #32]
 80199fe:	683b      	ldr	r3, [r7, #0]
 8019a00:	889b      	ldrh	r3, [r3, #4]
 8019a02:	3310      	adds	r3, #16
 8019a04:	683a      	ldr	r2, [r7, #0]
 8019a06:	4413      	add	r3, r2
 8019a08:	3304      	adds	r3, #4
 8019a0a:	61fb      	str	r3, [r7, #28]
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	885b      	ldrh	r3, [r3, #2]
 8019a10:	461a      	mov	r2, r3
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	881b      	ldrh	r3, [r3, #0]
 8019a16:	1ad3      	subs	r3, r2, r3
 8019a18:	08da      	lsrs	r2, r3, #3
 8019a1a:	68bb      	ldr	r3, [r7, #8]
 8019a1c:	881b      	ldrh	r3, [r3, #0]
 8019a1e:	4619      	mov	r1, r3
 8019a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a22:	005b      	lsls	r3, r3, #1
 8019a24:	fb91 f3f3 	sdiv	r3, r1, r3
 8019a28:	08db      	lsrs	r3, r3, #3
 8019a2a:	4293      	cmp	r3, r2
 8019a2c:	bf28      	it	cs
 8019a2e:	4613      	movcs	r3, r2
 8019a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a34:	005b      	lsls	r3, r3, #1
 8019a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019a38:	fb02 f303 	mul.w	r3, r2, r3
 8019a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8019a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d110      	bne.n	8019a66 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x92>
 8019a44:	68bb      	ldr	r3, [r7, #8]
 8019a46:	2200      	movs	r2, #0
 8019a48:	801a      	strh	r2, [r3, #0]
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	2200      	movs	r2, #0
 8019a4e:	801a      	strh	r2, [r3, #0]
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	2200      	movs	r2, #0
 8019a54:	809a      	strh	r2, [r3, #4]
 8019a56:	683b      	ldr	r3, [r7, #0]
 8019a58:	2200      	movs	r2, #0
 8019a5a:	801a      	strh	r2, [r3, #0]
 8019a5c:	683b      	ldr	r3, [r7, #0]
 8019a5e:	2200      	movs	r2, #0
 8019a60:	809a      	strh	r2, [r3, #4]
 8019a62:	2300      	movs	r3, #0
 8019a64:	e12e      	b.n	8019cc4 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x2f0>
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	881a      	ldrh	r2, [r3, #0]
 8019a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a6c:	b29b      	uxth	r3, r3
 8019a6e:	00db      	lsls	r3, r3, #3
 8019a70:	b29b      	uxth	r3, r3
 8019a72:	4413      	add	r3, r2
 8019a74:	b29a      	uxth	r2, r3
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	801a      	strh	r2, [r3, #0]
 8019a7a:	683b      	ldr	r3, [r7, #0]
 8019a7c:	881a      	ldrh	r2, [r3, #0]
 8019a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a80:	b29b      	uxth	r3, r3
 8019a82:	00db      	lsls	r3, r3, #3
 8019a84:	b29b      	uxth	r3, r3
 8019a86:	4413      	add	r3, r2
 8019a88:	b29a      	uxth	r2, r3
 8019a8a:	683b      	ldr	r3, [r7, #0]
 8019a8c:	801a      	strh	r2, [r3, #0]
 8019a8e:	68bb      	ldr	r3, [r7, #8]
 8019a90:	881a      	ldrh	r2, [r3, #0]
 8019a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a94:	b29b      	uxth	r3, r3
 8019a96:	00db      	lsls	r3, r3, #3
 8019a98:	b29b      	uxth	r3, r3
 8019a9a:	1ad3      	subs	r3, r2, r3
 8019a9c:	b29a      	uxth	r2, r3
 8019a9e:	68bb      	ldr	r3, [r7, #8]
 8019aa0:	801a      	strh	r2, [r3, #0]
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	889a      	ldrh	r2, [r3, #4]
 8019aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019aa8:	b29b      	uxth	r3, r3
 8019aaa:	00db      	lsls	r3, r3, #3
 8019aac:	b29b      	uxth	r3, r3
 8019aae:	4413      	add	r3, r2
 8019ab0:	b29a      	uxth	r2, r3
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	809a      	strh	r2, [r3, #4]
 8019ab6:	683b      	ldr	r3, [r7, #0]
 8019ab8:	889a      	ldrh	r2, [r3, #4]
 8019aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019abc:	b29b      	uxth	r3, r3
 8019abe:	00db      	lsls	r3, r3, #3
 8019ac0:	b29b      	uxth	r3, r3
 8019ac2:	4413      	add	r3, r2
 8019ac4:	b29a      	uxth	r2, r3
 8019ac6:	683b      	ldr	r3, [r7, #0]
 8019ac8:	809a      	strh	r2, [r3, #4]
 8019aca:	68bb      	ldr	r3, [r7, #8]
 8019acc:	889a      	ldrh	r2, [r3, #4]
 8019ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ad0:	b29b      	uxth	r3, r3
 8019ad2:	00db      	lsls	r3, r3, #3
 8019ad4:	b29b      	uxth	r3, r3
 8019ad6:	4413      	add	r3, r2
 8019ad8:	b29a      	uxth	r2, r3
 8019ada:	68bb      	ldr	r3, [r7, #8]
 8019adc:	809a      	strh	r2, [r3, #4]
 8019ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d10c      	bne.n	8019afe <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x12a>
 8019ae4:	4b79      	ldr	r3, [pc, #484]	; (8019ccc <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x2f8>)
 8019ae6:	f240 623f 	movw	r2, #1599	; 0x63f
 8019aea:	4979      	ldr	r1, [pc, #484]	; (8019cd0 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x2fc>)
 8019aec:	4879      	ldr	r0, [pc, #484]	; (8019cd4 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x300>)
 8019aee:	f7ef f89b 	bl	8008c28 <xprintf>
 8019af2:	2301      	movs	r3, #1
 8019af4:	61bb      	str	r3, [r7, #24]
 8019af6:	bf00      	nop
 8019af8:	69bb      	ldr	r3, [r7, #24]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d1fc      	bne.n	8019af8 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x124>
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	881a      	ldrh	r2, [r3, #0]
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	885b      	ldrh	r3, [r3, #2]
 8019b06:	429a      	cmp	r2, r3
 8019b08:	f240 808e 	bls.w	8019c28 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x254>
 8019b0c:	4b72      	ldr	r3, [pc, #456]	; (8019cd8 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x304>)
 8019b0e:	f240 623f 	movw	r2, #1599	; 0x63f
 8019b12:	496f      	ldr	r1, [pc, #444]	; (8019cd0 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x2fc>)
 8019b14:	486f      	ldr	r0, [pc, #444]	; (8019cd4 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x300>)
 8019b16:	f7ef f887 	bl	8008c28 <xprintf>
 8019b1a:	2301      	movs	r3, #1
 8019b1c:	617b      	str	r3, [r7, #20]
 8019b1e:	bf00      	nop
 8019b20:	697b      	ldr	r3, [r7, #20]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d1fc      	bne.n	8019b20 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x14c>
 8019b26:	e07f      	b.n	8019c28 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x254>
 8019b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b2a:	005b      	lsls	r3, r3, #1
 8019b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b2e:	1ad3      	subs	r3, r2, r3
 8019b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8019b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b34:	3b01      	subs	r3, #1
 8019b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b3a:	00db      	lsls	r3, r3, #3
 8019b3c:	6a3a      	ldr	r2, [r7, #32]
 8019b3e:	4413      	add	r3, r2
 8019b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b42:	00d2      	lsls	r2, r2, #3
 8019b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b46:	440a      	add	r2, r1
 8019b48:	7892      	ldrb	r2, [r2, #2]
 8019b4a:	701a      	strb	r2, [r3, #0]
 8019b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b4e:	00db      	lsls	r3, r3, #3
 8019b50:	6a3a      	ldr	r2, [r7, #32]
 8019b52:	4413      	add	r3, r2
 8019b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b56:	00d2      	lsls	r2, r2, #3
 8019b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b5a:	440a      	add	r2, r1
 8019b5c:	78d2      	ldrb	r2, [r2, #3]
 8019b5e:	705a      	strb	r2, [r3, #1]
 8019b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b62:	00db      	lsls	r3, r3, #3
 8019b64:	6a3a      	ldr	r2, [r7, #32]
 8019b66:	4413      	add	r3, r2
 8019b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b6a:	00d2      	lsls	r2, r2, #3
 8019b6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b6e:	440a      	add	r2, r1
 8019b70:	7ad2      	ldrb	r2, [r2, #11]
 8019b72:	709a      	strb	r2, [r3, #2]
 8019b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b76:	00db      	lsls	r3, r3, #3
 8019b78:	6a3a      	ldr	r2, [r7, #32]
 8019b7a:	4413      	add	r3, r2
 8019b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b7e:	00d2      	lsls	r2, r2, #3
 8019b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b82:	440a      	add	r2, r1
 8019b84:	7852      	ldrb	r2, [r2, #1]
 8019b86:	70da      	strb	r2, [r3, #3]
 8019b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b8a:	00db      	lsls	r3, r3, #3
 8019b8c:	6a3a      	ldr	r2, [r7, #32]
 8019b8e:	4413      	add	r3, r2
 8019b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b92:	00d2      	lsls	r2, r2, #3
 8019b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b96:	440a      	add	r2, r1
 8019b98:	7a52      	ldrb	r2, [r2, #9]
 8019b9a:	711a      	strb	r2, [r3, #4]
 8019b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b9e:	00db      	lsls	r3, r3, #3
 8019ba0:	6a3a      	ldr	r2, [r7, #32]
 8019ba2:	4413      	add	r3, r2
 8019ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ba6:	00d2      	lsls	r2, r2, #3
 8019ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019baa:	440a      	add	r2, r1
 8019bac:	7a92      	ldrb	r2, [r2, #10]
 8019bae:	715a      	strb	r2, [r3, #5]
 8019bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bb2:	00db      	lsls	r3, r3, #3
 8019bb4:	69fa      	ldr	r2, [r7, #28]
 8019bb6:	4413      	add	r3, r2
 8019bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bba:	00d2      	lsls	r2, r2, #3
 8019bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019bbe:	440a      	add	r2, r1
 8019bc0:	7992      	ldrb	r2, [r2, #6]
 8019bc2:	701a      	strb	r2, [r3, #0]
 8019bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bc6:	00db      	lsls	r3, r3, #3
 8019bc8:	69fa      	ldr	r2, [r7, #28]
 8019bca:	4413      	add	r3, r2
 8019bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bce:	00d2      	lsls	r2, r2, #3
 8019bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019bd2:	440a      	add	r2, r1
 8019bd4:	79d2      	ldrb	r2, [r2, #7]
 8019bd6:	705a      	strb	r2, [r3, #1]
 8019bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bda:	00db      	lsls	r3, r3, #3
 8019bdc:	69fa      	ldr	r2, [r7, #28]
 8019bde:	4413      	add	r3, r2
 8019be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019be2:	00d2      	lsls	r2, r2, #3
 8019be4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019be6:	440a      	add	r2, r1
 8019be8:	7bd2      	ldrb	r2, [r2, #15]
 8019bea:	709a      	strb	r2, [r3, #2]
 8019bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bee:	00db      	lsls	r3, r3, #3
 8019bf0:	69fa      	ldr	r2, [r7, #28]
 8019bf2:	4413      	add	r3, r2
 8019bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bf6:	00d2      	lsls	r2, r2, #3
 8019bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019bfa:	440a      	add	r2, r1
 8019bfc:	7952      	ldrb	r2, [r2, #5]
 8019bfe:	70da      	strb	r2, [r3, #3]
 8019c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c02:	00db      	lsls	r3, r3, #3
 8019c04:	69fa      	ldr	r2, [r7, #28]
 8019c06:	4413      	add	r3, r2
 8019c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c0a:	00d2      	lsls	r2, r2, #3
 8019c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019c0e:	440a      	add	r2, r1
 8019c10:	7b52      	ldrb	r2, [r2, #13]
 8019c12:	711a      	strb	r2, [r3, #4]
 8019c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c16:	00db      	lsls	r3, r3, #3
 8019c18:	69fa      	ldr	r2, [r7, #28]
 8019c1a:	4413      	add	r3, r2
 8019c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c1e:	00d2      	lsls	r2, r2, #3
 8019c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019c22:	440a      	add	r2, r1
 8019c24:	7b92      	ldrb	r2, [r2, #14]
 8019c26:	715a      	strb	r2, [r3, #5]
 8019c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	f47f af7c 	bne.w	8019b28 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x154>
 8019c30:	4a2a      	ldr	r2, [pc, #168]	; (8019cdc <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x308>)
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019c38:	2b01      	cmp	r3, #1
 8019c3a:	d13a      	bne.n	8019cb2 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x2de>
 8019c3c:	4a28      	ldr	r2, [pc, #160]	; (8019ce0 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x30c>)
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	4413      	add	r3, r2
 8019c42:	2208      	movs	r2, #8
 8019c44:	701a      	strb	r2, [r3, #0]
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	015b      	lsls	r3, r3, #5
 8019c4a:	4a26      	ldr	r2, [pc, #152]	; (8019ce4 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x310>)
 8019c4c:	4413      	add	r3, r2
 8019c4e:	2220      	movs	r2, #32
 8019c50:	2100      	movs	r1, #0
 8019c52:	4618      	mov	r0, r3
 8019c54:	f003 fa8e 	bl	801d174 <memset>
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	015b      	lsls	r3, r3, #5
 8019c5c:	4a21      	ldr	r2, [pc, #132]	; (8019ce4 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x310>)
 8019c5e:	4413      	add	r3, r2
 8019c60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019c62:	2208      	movs	r2, #8
 8019c64:	4618      	mov	r0, r3
 8019c66:	f003 f9eb 	bl	801d040 <memcpy>
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	015b      	lsls	r3, r3, #5
 8019c6e:	3308      	adds	r3, #8
 8019c70:	4a1c      	ldr	r2, [pc, #112]	; (8019ce4 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x310>)
 8019c72:	1898      	adds	r0, r3, r2
 8019c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c76:	3308      	adds	r3, #8
 8019c78:	2208      	movs	r2, #8
 8019c7a:	4619      	mov	r1, r3
 8019c7c:	f003 f9e0 	bl	801d040 <memcpy>
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	015b      	lsls	r3, r3, #5
 8019c84:	3310      	adds	r3, #16
 8019c86:	4a17      	ldr	r2, [pc, #92]	; (8019ce4 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x310>)
 8019c88:	4413      	add	r3, r2
 8019c8a:	6a39      	ldr	r1, [r7, #32]
 8019c8c:	2208      	movs	r2, #8
 8019c8e:	4618      	mov	r0, r3
 8019c90:	f003 f9d6 	bl	801d040 <memcpy>
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	015b      	lsls	r3, r3, #5
 8019c98:	3318      	adds	r3, #24
 8019c9a:	4a12      	ldr	r2, [pc, #72]	; (8019ce4 <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x310>)
 8019c9c:	4413      	add	r3, r2
 8019c9e:	69f9      	ldr	r1, [r7, #28]
 8019ca0:	2208      	movs	r2, #8
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	f003 f9cc 	bl	801d040 <memcpy>
 8019ca8:	4a0c      	ldr	r2, [pc, #48]	; (8019cdc <conv_ds_24L8N24P8N_to_24L24L16N_24P24P16N+0x308>)
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	2100      	movs	r1, #0
 8019cae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	881a      	ldrh	r2, [r3, #0]
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	885b      	ldrh	r3, [r3, #2]
 8019cba:	429a      	cmp	r2, r3
 8019cbc:	bf0c      	ite	eq
 8019cbe:	2301      	moveq	r3, #1
 8019cc0:	2300      	movne	r3, #0
 8019cc2:	b2db      	uxtb	r3, r3
 8019cc4:	4618      	mov	r0, r3
 8019cc6:	3730      	adds	r7, #48	; 0x30
 8019cc8:	46bd      	mov	sp, r7
 8019cca:	bd80      	pop	{r7, pc}
 8019ccc:	0803ed00 	.word	0x0803ed00
 8019cd0:	0803ef8c 	.word	0x0803ef8c
 8019cd4:	0803f4f9 	.word	0x0803f4f9
 8019cd8:	0803ecd8 	.word	0x0803ecd8
 8019cdc:	100027ac 	.word	0x100027ac
 8019ce0:	10002e88 	.word	0x10002e88
 8019ce4:	10002e48 	.word	0x10002e48

08019ce8 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N>:

  SET_SLOT(2, 0, 7, 6);
  SET_SLOT(2, 1, 5, 15);
  SET_SLOT(2, 2, 14, 13);
})
CONVERT_ROUTINE2(conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N, t_24L8N24P8N, t_16L16L8L8L16N,
 8019ce8:	b580      	push	{r7, lr}
 8019cea:	b08c      	sub	sp, #48	; 0x30
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	60f8      	str	r0, [r7, #12]
 8019cf0:	60b9      	str	r1, [r7, #8]
 8019cf2:	607a      	str	r2, [r7, #4]
 8019cf4:	603b      	str	r3, [r7, #0]
 8019cf6:	68bb      	ldr	r3, [r7, #8]
 8019cf8:	889b      	ldrh	r3, [r3, #4]
 8019cfa:	3310      	adds	r3, #16
 8019cfc:	68ba      	ldr	r2, [r7, #8]
 8019cfe:	4413      	add	r3, r2
 8019d00:	3304      	adds	r3, #4
 8019d02:	627b      	str	r3, [r7, #36]	; 0x24
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	889b      	ldrh	r3, [r3, #4]
 8019d08:	3310      	adds	r3, #16
 8019d0a:	687a      	ldr	r2, [r7, #4]
 8019d0c:	4413      	add	r3, r2
 8019d0e:	3304      	adds	r3, #4
 8019d10:	623b      	str	r3, [r7, #32]
 8019d12:	683b      	ldr	r3, [r7, #0]
 8019d14:	889b      	ldrh	r3, [r3, #4]
 8019d16:	3310      	adds	r3, #16
 8019d18:	683a      	ldr	r2, [r7, #0]
 8019d1a:	4413      	add	r3, r2
 8019d1c:	3304      	adds	r3, #4
 8019d1e:	61fb      	str	r3, [r7, #28]
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	885b      	ldrh	r3, [r3, #2]
 8019d24:	461a      	mov	r2, r3
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	881b      	ldrh	r3, [r3, #0]
 8019d2a:	1ad3      	subs	r3, r2, r3
 8019d2c:	08da      	lsrs	r2, r3, #3
 8019d2e:	68bb      	ldr	r3, [r7, #8]
 8019d30:	881b      	ldrh	r3, [r3, #0]
 8019d32:	4619      	mov	r1, r3
 8019d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d36:	005b      	lsls	r3, r3, #1
 8019d38:	fb91 f3f3 	sdiv	r3, r1, r3
 8019d3c:	08db      	lsrs	r3, r3, #3
 8019d3e:	4293      	cmp	r3, r2
 8019d40:	bf28      	it	cs
 8019d42:	4613      	movcs	r3, r2
 8019d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d48:	005b      	lsls	r3, r3, #1
 8019d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d4c:	fb02 f303 	mul.w	r3, r2, r3
 8019d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8019d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d110      	bne.n	8019d7a <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x92>
 8019d58:	68bb      	ldr	r3, [r7, #8]
 8019d5a:	2200      	movs	r2, #0
 8019d5c:	801a      	strh	r2, [r3, #0]
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	2200      	movs	r2, #0
 8019d62:	801a      	strh	r2, [r3, #0]
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	2200      	movs	r2, #0
 8019d68:	809a      	strh	r2, [r3, #4]
 8019d6a:	683b      	ldr	r3, [r7, #0]
 8019d6c:	2200      	movs	r2, #0
 8019d6e:	801a      	strh	r2, [r3, #0]
 8019d70:	683b      	ldr	r3, [r7, #0]
 8019d72:	2200      	movs	r2, #0
 8019d74:	809a      	strh	r2, [r3, #4]
 8019d76:	2300      	movs	r3, #0
 8019d78:	e12e      	b.n	8019fd8 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x2f0>
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	881a      	ldrh	r2, [r3, #0]
 8019d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d80:	b29b      	uxth	r3, r3
 8019d82:	00db      	lsls	r3, r3, #3
 8019d84:	b29b      	uxth	r3, r3
 8019d86:	4413      	add	r3, r2
 8019d88:	b29a      	uxth	r2, r3
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	801a      	strh	r2, [r3, #0]
 8019d8e:	683b      	ldr	r3, [r7, #0]
 8019d90:	881a      	ldrh	r2, [r3, #0]
 8019d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d94:	b29b      	uxth	r3, r3
 8019d96:	00db      	lsls	r3, r3, #3
 8019d98:	b29b      	uxth	r3, r3
 8019d9a:	4413      	add	r3, r2
 8019d9c:	b29a      	uxth	r2, r3
 8019d9e:	683b      	ldr	r3, [r7, #0]
 8019da0:	801a      	strh	r2, [r3, #0]
 8019da2:	68bb      	ldr	r3, [r7, #8]
 8019da4:	881a      	ldrh	r2, [r3, #0]
 8019da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019da8:	b29b      	uxth	r3, r3
 8019daa:	00db      	lsls	r3, r3, #3
 8019dac:	b29b      	uxth	r3, r3
 8019dae:	1ad3      	subs	r3, r2, r3
 8019db0:	b29a      	uxth	r2, r3
 8019db2:	68bb      	ldr	r3, [r7, #8]
 8019db4:	801a      	strh	r2, [r3, #0]
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	889a      	ldrh	r2, [r3, #4]
 8019dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dbc:	b29b      	uxth	r3, r3
 8019dbe:	00db      	lsls	r3, r3, #3
 8019dc0:	b29b      	uxth	r3, r3
 8019dc2:	4413      	add	r3, r2
 8019dc4:	b29a      	uxth	r2, r3
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	809a      	strh	r2, [r3, #4]
 8019dca:	683b      	ldr	r3, [r7, #0]
 8019dcc:	889a      	ldrh	r2, [r3, #4]
 8019dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd0:	b29b      	uxth	r3, r3
 8019dd2:	00db      	lsls	r3, r3, #3
 8019dd4:	b29b      	uxth	r3, r3
 8019dd6:	4413      	add	r3, r2
 8019dd8:	b29a      	uxth	r2, r3
 8019dda:	683b      	ldr	r3, [r7, #0]
 8019ddc:	809a      	strh	r2, [r3, #4]
 8019dde:	68bb      	ldr	r3, [r7, #8]
 8019de0:	889a      	ldrh	r2, [r3, #4]
 8019de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019de4:	b29b      	uxth	r3, r3
 8019de6:	00db      	lsls	r3, r3, #3
 8019de8:	b29b      	uxth	r3, r3
 8019dea:	4413      	add	r3, r2
 8019dec:	b29a      	uxth	r2, r3
 8019dee:	68bb      	ldr	r3, [r7, #8]
 8019df0:	809a      	strh	r2, [r3, #4]
 8019df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d10c      	bne.n	8019e12 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x12a>
 8019df8:	4b79      	ldr	r3, [pc, #484]	; (8019fe0 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x2f8>)
 8019dfa:	f240 624a 	movw	r2, #1610	; 0x64a
 8019dfe:	4979      	ldr	r1, [pc, #484]	; (8019fe4 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x2fc>)
 8019e00:	4879      	ldr	r0, [pc, #484]	; (8019fe8 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x300>)
 8019e02:	f7ee ff11 	bl	8008c28 <xprintf>
 8019e06:	2301      	movs	r3, #1
 8019e08:	61bb      	str	r3, [r7, #24]
 8019e0a:	bf00      	nop
 8019e0c:	69bb      	ldr	r3, [r7, #24]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d1fc      	bne.n	8019e0c <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x124>
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	881a      	ldrh	r2, [r3, #0]
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	885b      	ldrh	r3, [r3, #2]
 8019e1a:	429a      	cmp	r2, r3
 8019e1c:	f240 808e 	bls.w	8019f3c <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x254>
 8019e20:	4b72      	ldr	r3, [pc, #456]	; (8019fec <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x304>)
 8019e22:	f240 624a 	movw	r2, #1610	; 0x64a
 8019e26:	496f      	ldr	r1, [pc, #444]	; (8019fe4 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x2fc>)
 8019e28:	486f      	ldr	r0, [pc, #444]	; (8019fe8 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x300>)
 8019e2a:	f7ee fefd 	bl	8008c28 <xprintf>
 8019e2e:	2301      	movs	r3, #1
 8019e30:	617b      	str	r3, [r7, #20]
 8019e32:	bf00      	nop
 8019e34:	697b      	ldr	r3, [r7, #20]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d1fc      	bne.n	8019e34 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x14c>
 8019e3a:	e07f      	b.n	8019f3c <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x254>
 8019e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e3e:	005b      	lsls	r3, r3, #1
 8019e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e42:	1ad3      	subs	r3, r2, r3
 8019e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8019e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e48:	3b01      	subs	r3, #1
 8019e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e4e:	00db      	lsls	r3, r3, #3
 8019e50:	6a3a      	ldr	r2, [r7, #32]
 8019e52:	4413      	add	r3, r2
 8019e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e56:	00d2      	lsls	r2, r2, #3
 8019e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019e5a:	440a      	add	r2, r1
 8019e5c:	7892      	ldrb	r2, [r2, #2]
 8019e5e:	701a      	strb	r2, [r3, #0]
 8019e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e62:	00db      	lsls	r3, r3, #3
 8019e64:	6a3a      	ldr	r2, [r7, #32]
 8019e66:	4413      	add	r3, r2
 8019e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e6a:	00d2      	lsls	r2, r2, #3
 8019e6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019e6e:	440a      	add	r2, r1
 8019e70:	78d2      	ldrb	r2, [r2, #3]
 8019e72:	705a      	strb	r2, [r3, #1]
 8019e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e76:	00db      	lsls	r3, r3, #3
 8019e78:	6a3a      	ldr	r2, [r7, #32]
 8019e7a:	4413      	add	r3, r2
 8019e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e7e:	00d2      	lsls	r2, r2, #3
 8019e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019e82:	440a      	add	r2, r1
 8019e84:	7a92      	ldrb	r2, [r2, #10]
 8019e86:	709a      	strb	r2, [r3, #2]
 8019e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8a:	00db      	lsls	r3, r3, #3
 8019e8c:	6a3a      	ldr	r2, [r7, #32]
 8019e8e:	4413      	add	r3, r2
 8019e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e92:	00d2      	lsls	r2, r2, #3
 8019e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019e96:	440a      	add	r2, r1
 8019e98:	7ad2      	ldrb	r2, [r2, #11]
 8019e9a:	70da      	strb	r2, [r3, #3]
 8019e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e9e:	00db      	lsls	r3, r3, #3
 8019ea0:	6a3a      	ldr	r2, [r7, #32]
 8019ea2:	4413      	add	r3, r2
 8019ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ea6:	00d2      	lsls	r2, r2, #3
 8019ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019eaa:	440a      	add	r2, r1
 8019eac:	7a52      	ldrb	r2, [r2, #9]
 8019eae:	711a      	strb	r2, [r3, #4]
 8019eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eb2:	00db      	lsls	r3, r3, #3
 8019eb4:	6a3a      	ldr	r2, [r7, #32]
 8019eb6:	4413      	add	r3, r2
 8019eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019eba:	00d2      	lsls	r2, r2, #3
 8019ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019ebe:	440a      	add	r2, r1
 8019ec0:	7852      	ldrb	r2, [r2, #1]
 8019ec2:	715a      	strb	r2, [r3, #5]
 8019ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec6:	00db      	lsls	r3, r3, #3
 8019ec8:	69fa      	ldr	r2, [r7, #28]
 8019eca:	4413      	add	r3, r2
 8019ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ece:	00d2      	lsls	r2, r2, #3
 8019ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019ed2:	440a      	add	r2, r1
 8019ed4:	7992      	ldrb	r2, [r2, #6]
 8019ed6:	701a      	strb	r2, [r3, #0]
 8019ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eda:	00db      	lsls	r3, r3, #3
 8019edc:	69fa      	ldr	r2, [r7, #28]
 8019ede:	4413      	add	r3, r2
 8019ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ee2:	00d2      	lsls	r2, r2, #3
 8019ee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019ee6:	440a      	add	r2, r1
 8019ee8:	79d2      	ldrb	r2, [r2, #7]
 8019eea:	705a      	strb	r2, [r3, #1]
 8019eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eee:	00db      	lsls	r3, r3, #3
 8019ef0:	69fa      	ldr	r2, [r7, #28]
 8019ef2:	4413      	add	r3, r2
 8019ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ef6:	00d2      	lsls	r2, r2, #3
 8019ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019efa:	440a      	add	r2, r1
 8019efc:	7b92      	ldrb	r2, [r2, #14]
 8019efe:	709a      	strb	r2, [r3, #2]
 8019f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f02:	00db      	lsls	r3, r3, #3
 8019f04:	69fa      	ldr	r2, [r7, #28]
 8019f06:	4413      	add	r3, r2
 8019f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f0a:	00d2      	lsls	r2, r2, #3
 8019f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019f0e:	440a      	add	r2, r1
 8019f10:	7bd2      	ldrb	r2, [r2, #15]
 8019f12:	70da      	strb	r2, [r3, #3]
 8019f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f16:	00db      	lsls	r3, r3, #3
 8019f18:	69fa      	ldr	r2, [r7, #28]
 8019f1a:	4413      	add	r3, r2
 8019f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f1e:	00d2      	lsls	r2, r2, #3
 8019f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019f22:	440a      	add	r2, r1
 8019f24:	7b52      	ldrb	r2, [r2, #13]
 8019f26:	711a      	strb	r2, [r3, #4]
 8019f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f2a:	00db      	lsls	r3, r3, #3
 8019f2c:	69fa      	ldr	r2, [r7, #28]
 8019f2e:	4413      	add	r3, r2
 8019f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f32:	00d2      	lsls	r2, r2, #3
 8019f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019f36:	440a      	add	r2, r1
 8019f38:	7952      	ldrb	r2, [r2, #5]
 8019f3a:	715a      	strb	r2, [r3, #5]
 8019f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	f47f af7c 	bne.w	8019e3c <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x154>
 8019f44:	4a2a      	ldr	r2, [pc, #168]	; (8019ff0 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x308>)
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019f4c:	2b01      	cmp	r3, #1
 8019f4e:	d13a      	bne.n	8019fc6 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x2de>
 8019f50:	4a28      	ldr	r2, [pc, #160]	; (8019ff4 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x30c>)
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	4413      	add	r3, r2
 8019f56:	2208      	movs	r2, #8
 8019f58:	701a      	strb	r2, [r3, #0]
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	015b      	lsls	r3, r3, #5
 8019f5e:	4a26      	ldr	r2, [pc, #152]	; (8019ff8 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x310>)
 8019f60:	4413      	add	r3, r2
 8019f62:	2220      	movs	r2, #32
 8019f64:	2100      	movs	r1, #0
 8019f66:	4618      	mov	r0, r3
 8019f68:	f003 f904 	bl	801d174 <memset>
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	015b      	lsls	r3, r3, #5
 8019f70:	4a21      	ldr	r2, [pc, #132]	; (8019ff8 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x310>)
 8019f72:	4413      	add	r3, r2
 8019f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019f76:	2208      	movs	r2, #8
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f003 f861 	bl	801d040 <memcpy>
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	015b      	lsls	r3, r3, #5
 8019f82:	3308      	adds	r3, #8
 8019f84:	4a1c      	ldr	r2, [pc, #112]	; (8019ff8 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x310>)
 8019f86:	1898      	adds	r0, r3, r2
 8019f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f8a:	3308      	adds	r3, #8
 8019f8c:	2208      	movs	r2, #8
 8019f8e:	4619      	mov	r1, r3
 8019f90:	f003 f856 	bl	801d040 <memcpy>
 8019f94:	68fb      	ldr	r3, [r7, #12]
 8019f96:	015b      	lsls	r3, r3, #5
 8019f98:	3310      	adds	r3, #16
 8019f9a:	4a17      	ldr	r2, [pc, #92]	; (8019ff8 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x310>)
 8019f9c:	4413      	add	r3, r2
 8019f9e:	6a39      	ldr	r1, [r7, #32]
 8019fa0:	2208      	movs	r2, #8
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	f003 f84c 	bl	801d040 <memcpy>
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	015b      	lsls	r3, r3, #5
 8019fac:	3318      	adds	r3, #24
 8019fae:	4a12      	ldr	r2, [pc, #72]	; (8019ff8 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x310>)
 8019fb0:	4413      	add	r3, r2
 8019fb2:	69f9      	ldr	r1, [r7, #28]
 8019fb4:	2208      	movs	r2, #8
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	f003 f842 	bl	801d040 <memcpy>
 8019fbc:	4a0c      	ldr	r2, [pc, #48]	; (8019ff0 <conv_ds_24L8N24P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x308>)
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	2100      	movs	r1, #0
 8019fc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	881a      	ldrh	r2, [r3, #0]
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	885b      	ldrh	r3, [r3, #2]
 8019fce:	429a      	cmp	r2, r3
 8019fd0:	bf0c      	ite	eq
 8019fd2:	2301      	moveq	r3, #1
 8019fd4:	2300      	movne	r3, #0
 8019fd6:	b2db      	uxtb	r3, r3
 8019fd8:	4618      	mov	r0, r3
 8019fda:	3730      	adds	r7, #48	; 0x30
 8019fdc:	46bd      	mov	sp, r7
 8019fde:	bd80      	pop	{r7, pc}
 8019fe0:	0803ed00 	.word	0x0803ed00
 8019fe4:	0803efb6 	.word	0x0803efb6
 8019fe8:	0803f4f9 	.word	0x0803f4f9
 8019fec:	0803ecd8 	.word	0x0803ecd8
 8019ff0:	100027ac 	.word	0x100027ac
 8019ff4:	10002e88 	.word	0x10002e88
 8019ff8:	10002e48 	.word	0x10002e48

08019ffc <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N>:

  SET_SLOT(2, 0, 7, 6);
  SET_SLOT(2, 1, 15, 14);
  SET_SLOT(2, 2, 5, 13);
})
CONVERT_ROUTINE2(conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N, t_16L8L8N16P8P8N, t_24L24L16N,
 8019ffc:	b580      	push	{r7, lr}
 8019ffe:	b08c      	sub	sp, #48	; 0x30
 801a000:	af00      	add	r7, sp, #0
 801a002:	60f8      	str	r0, [r7, #12]
 801a004:	60b9      	str	r1, [r7, #8]
 801a006:	607a      	str	r2, [r7, #4]
 801a008:	603b      	str	r3, [r7, #0]
 801a00a:	68bb      	ldr	r3, [r7, #8]
 801a00c:	889b      	ldrh	r3, [r3, #4]
 801a00e:	3310      	adds	r3, #16
 801a010:	68ba      	ldr	r2, [r7, #8]
 801a012:	4413      	add	r3, r2
 801a014:	3304      	adds	r3, #4
 801a016:	627b      	str	r3, [r7, #36]	; 0x24
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	889b      	ldrh	r3, [r3, #4]
 801a01c:	3310      	adds	r3, #16
 801a01e:	687a      	ldr	r2, [r7, #4]
 801a020:	4413      	add	r3, r2
 801a022:	3304      	adds	r3, #4
 801a024:	623b      	str	r3, [r7, #32]
 801a026:	683b      	ldr	r3, [r7, #0]
 801a028:	889b      	ldrh	r3, [r3, #4]
 801a02a:	3310      	adds	r3, #16
 801a02c:	683a      	ldr	r2, [r7, #0]
 801a02e:	4413      	add	r3, r2
 801a030:	3304      	adds	r3, #4
 801a032:	61fb      	str	r3, [r7, #28]
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	885b      	ldrh	r3, [r3, #2]
 801a038:	461a      	mov	r2, r3
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	881b      	ldrh	r3, [r3, #0]
 801a03e:	1ad3      	subs	r3, r2, r3
 801a040:	08da      	lsrs	r2, r3, #3
 801a042:	68bb      	ldr	r3, [r7, #8]
 801a044:	881b      	ldrh	r3, [r3, #0]
 801a046:	4619      	mov	r1, r3
 801a048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a04a:	005b      	lsls	r3, r3, #1
 801a04c:	fb91 f3f3 	sdiv	r3, r1, r3
 801a050:	08db      	lsrs	r3, r3, #3
 801a052:	4293      	cmp	r3, r2
 801a054:	bf28      	it	cs
 801a056:	4613      	movcs	r3, r2
 801a058:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a05c:	005b      	lsls	r3, r3, #1
 801a05e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a060:	fb02 f303 	mul.w	r3, r2, r3
 801a064:	62bb      	str	r3, [r7, #40]	; 0x28
 801a066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d110      	bne.n	801a08e <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x92>
 801a06c:	68bb      	ldr	r3, [r7, #8]
 801a06e:	2200      	movs	r2, #0
 801a070:	801a      	strh	r2, [r3, #0]
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	2200      	movs	r2, #0
 801a076:	801a      	strh	r2, [r3, #0]
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	2200      	movs	r2, #0
 801a07c:	809a      	strh	r2, [r3, #4]
 801a07e:	683b      	ldr	r3, [r7, #0]
 801a080:	2200      	movs	r2, #0
 801a082:	801a      	strh	r2, [r3, #0]
 801a084:	683b      	ldr	r3, [r7, #0]
 801a086:	2200      	movs	r2, #0
 801a088:	809a      	strh	r2, [r3, #4]
 801a08a:	2300      	movs	r3, #0
 801a08c:	e12e      	b.n	801a2ec <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x2f0>
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	881a      	ldrh	r2, [r3, #0]
 801a092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a094:	b29b      	uxth	r3, r3
 801a096:	00db      	lsls	r3, r3, #3
 801a098:	b29b      	uxth	r3, r3
 801a09a:	4413      	add	r3, r2
 801a09c:	b29a      	uxth	r2, r3
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	801a      	strh	r2, [r3, #0]
 801a0a2:	683b      	ldr	r3, [r7, #0]
 801a0a4:	881a      	ldrh	r2, [r3, #0]
 801a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0a8:	b29b      	uxth	r3, r3
 801a0aa:	00db      	lsls	r3, r3, #3
 801a0ac:	b29b      	uxth	r3, r3
 801a0ae:	4413      	add	r3, r2
 801a0b0:	b29a      	uxth	r2, r3
 801a0b2:	683b      	ldr	r3, [r7, #0]
 801a0b4:	801a      	strh	r2, [r3, #0]
 801a0b6:	68bb      	ldr	r3, [r7, #8]
 801a0b8:	881a      	ldrh	r2, [r3, #0]
 801a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0bc:	b29b      	uxth	r3, r3
 801a0be:	00db      	lsls	r3, r3, #3
 801a0c0:	b29b      	uxth	r3, r3
 801a0c2:	1ad3      	subs	r3, r2, r3
 801a0c4:	b29a      	uxth	r2, r3
 801a0c6:	68bb      	ldr	r3, [r7, #8]
 801a0c8:	801a      	strh	r2, [r3, #0]
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	889a      	ldrh	r2, [r3, #4]
 801a0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0d0:	b29b      	uxth	r3, r3
 801a0d2:	00db      	lsls	r3, r3, #3
 801a0d4:	b29b      	uxth	r3, r3
 801a0d6:	4413      	add	r3, r2
 801a0d8:	b29a      	uxth	r2, r3
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	809a      	strh	r2, [r3, #4]
 801a0de:	683b      	ldr	r3, [r7, #0]
 801a0e0:	889a      	ldrh	r2, [r3, #4]
 801a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e4:	b29b      	uxth	r3, r3
 801a0e6:	00db      	lsls	r3, r3, #3
 801a0e8:	b29b      	uxth	r3, r3
 801a0ea:	4413      	add	r3, r2
 801a0ec:	b29a      	uxth	r2, r3
 801a0ee:	683b      	ldr	r3, [r7, #0]
 801a0f0:	809a      	strh	r2, [r3, #4]
 801a0f2:	68bb      	ldr	r3, [r7, #8]
 801a0f4:	889a      	ldrh	r2, [r3, #4]
 801a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0f8:	b29b      	uxth	r3, r3
 801a0fa:	00db      	lsls	r3, r3, #3
 801a0fc:	b29b      	uxth	r3, r3
 801a0fe:	4413      	add	r3, r2
 801a100:	b29a      	uxth	r2, r3
 801a102:	68bb      	ldr	r3, [r7, #8]
 801a104:	809a      	strh	r2, [r3, #4]
 801a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d10c      	bne.n	801a126 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x12a>
 801a10c:	4b79      	ldr	r3, [pc, #484]	; (801a2f4 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x2f8>)
 801a10e:	f240 6255 	movw	r2, #1621	; 0x655
 801a112:	4979      	ldr	r1, [pc, #484]	; (801a2f8 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x2fc>)
 801a114:	4879      	ldr	r0, [pc, #484]	; (801a2fc <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x300>)
 801a116:	f7ee fd87 	bl	8008c28 <xprintf>
 801a11a:	2301      	movs	r3, #1
 801a11c:	61bb      	str	r3, [r7, #24]
 801a11e:	bf00      	nop
 801a120:	69bb      	ldr	r3, [r7, #24]
 801a122:	2b00      	cmp	r3, #0
 801a124:	d1fc      	bne.n	801a120 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x124>
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	881a      	ldrh	r2, [r3, #0]
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	885b      	ldrh	r3, [r3, #2]
 801a12e:	429a      	cmp	r2, r3
 801a130:	f240 808e 	bls.w	801a250 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x254>
 801a134:	4b72      	ldr	r3, [pc, #456]	; (801a300 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x304>)
 801a136:	f240 6255 	movw	r2, #1621	; 0x655
 801a13a:	496f      	ldr	r1, [pc, #444]	; (801a2f8 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x2fc>)
 801a13c:	486f      	ldr	r0, [pc, #444]	; (801a2fc <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x300>)
 801a13e:	f7ee fd73 	bl	8008c28 <xprintf>
 801a142:	2301      	movs	r3, #1
 801a144:	617b      	str	r3, [r7, #20]
 801a146:	bf00      	nop
 801a148:	697b      	ldr	r3, [r7, #20]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d1fc      	bne.n	801a148 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x14c>
 801a14e:	e07f      	b.n	801a250 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x254>
 801a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a152:	005b      	lsls	r3, r3, #1
 801a154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a156:	1ad3      	subs	r3, r2, r3
 801a158:	62bb      	str	r3, [r7, #40]	; 0x28
 801a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a15c:	3b01      	subs	r3, #1
 801a15e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a162:	00db      	lsls	r3, r3, #3
 801a164:	6a3a      	ldr	r2, [r7, #32]
 801a166:	4413      	add	r3, r2
 801a168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a16a:	00d2      	lsls	r2, r2, #3
 801a16c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a16e:	440a      	add	r2, r1
 801a170:	7812      	ldrb	r2, [r2, #0]
 801a172:	701a      	strb	r2, [r3, #0]
 801a174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a176:	00db      	lsls	r3, r3, #3
 801a178:	6a3a      	ldr	r2, [r7, #32]
 801a17a:	4413      	add	r3, r2
 801a17c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a17e:	00d2      	lsls	r2, r2, #3
 801a180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a182:	440a      	add	r2, r1
 801a184:	7852      	ldrb	r2, [r2, #1]
 801a186:	705a      	strb	r2, [r3, #1]
 801a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a18a:	00db      	lsls	r3, r3, #3
 801a18c:	6a3a      	ldr	r2, [r7, #32]
 801a18e:	4413      	add	r3, r2
 801a190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a192:	00d2      	lsls	r2, r2, #3
 801a194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a196:	440a      	add	r2, r1
 801a198:	7a52      	ldrb	r2, [r2, #9]
 801a19a:	709a      	strb	r2, [r3, #2]
 801a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a19e:	00db      	lsls	r3, r3, #3
 801a1a0:	6a3a      	ldr	r2, [r7, #32]
 801a1a2:	4413      	add	r3, r2
 801a1a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1a6:	00d2      	lsls	r2, r2, #3
 801a1a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a1aa:	440a      	add	r2, r1
 801a1ac:	78d2      	ldrb	r2, [r2, #3]
 801a1ae:	70da      	strb	r2, [r3, #3]
 801a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1b2:	00db      	lsls	r3, r3, #3
 801a1b4:	6a3a      	ldr	r2, [r7, #32]
 801a1b6:	4413      	add	r3, r2
 801a1b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1ba:	00d2      	lsls	r2, r2, #3
 801a1bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a1be:	440a      	add	r2, r1
 801a1c0:	7ad2      	ldrb	r2, [r2, #11]
 801a1c2:	711a      	strb	r2, [r3, #4]
 801a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1c6:	00db      	lsls	r3, r3, #3
 801a1c8:	6a3a      	ldr	r2, [r7, #32]
 801a1ca:	4413      	add	r3, r2
 801a1cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1ce:	00d2      	lsls	r2, r2, #3
 801a1d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a1d2:	440a      	add	r2, r1
 801a1d4:	7a12      	ldrb	r2, [r2, #8]
 801a1d6:	715a      	strb	r2, [r3, #5]
 801a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1da:	00db      	lsls	r3, r3, #3
 801a1dc:	69fa      	ldr	r2, [r7, #28]
 801a1de:	4413      	add	r3, r2
 801a1e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1e2:	00d2      	lsls	r2, r2, #3
 801a1e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a1e6:	440a      	add	r2, r1
 801a1e8:	7912      	ldrb	r2, [r2, #4]
 801a1ea:	701a      	strb	r2, [r3, #0]
 801a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ee:	00db      	lsls	r3, r3, #3
 801a1f0:	69fa      	ldr	r2, [r7, #28]
 801a1f2:	4413      	add	r3, r2
 801a1f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1f6:	00d2      	lsls	r2, r2, #3
 801a1f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a1fa:	440a      	add	r2, r1
 801a1fc:	7952      	ldrb	r2, [r2, #5]
 801a1fe:	705a      	strb	r2, [r3, #1]
 801a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a202:	00db      	lsls	r3, r3, #3
 801a204:	69fa      	ldr	r2, [r7, #28]
 801a206:	4413      	add	r3, r2
 801a208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a20a:	00d2      	lsls	r2, r2, #3
 801a20c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a20e:	440a      	add	r2, r1
 801a210:	7b52      	ldrb	r2, [r2, #13]
 801a212:	709a      	strb	r2, [r3, #2]
 801a214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a216:	00db      	lsls	r3, r3, #3
 801a218:	69fa      	ldr	r2, [r7, #28]
 801a21a:	4413      	add	r3, r2
 801a21c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a21e:	00d2      	lsls	r2, r2, #3
 801a220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a222:	440a      	add	r2, r1
 801a224:	79d2      	ldrb	r2, [r2, #7]
 801a226:	70da      	strb	r2, [r3, #3]
 801a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a22a:	00db      	lsls	r3, r3, #3
 801a22c:	69fa      	ldr	r2, [r7, #28]
 801a22e:	4413      	add	r3, r2
 801a230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a232:	00d2      	lsls	r2, r2, #3
 801a234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a236:	440a      	add	r2, r1
 801a238:	7bd2      	ldrb	r2, [r2, #15]
 801a23a:	711a      	strb	r2, [r3, #4]
 801a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a23e:	00db      	lsls	r3, r3, #3
 801a240:	69fa      	ldr	r2, [r7, #28]
 801a242:	4413      	add	r3, r2
 801a244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a246:	00d2      	lsls	r2, r2, #3
 801a248:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a24a:	440a      	add	r2, r1
 801a24c:	7b12      	ldrb	r2, [r2, #12]
 801a24e:	715a      	strb	r2, [r3, #5]
 801a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a252:	2b00      	cmp	r3, #0
 801a254:	f47f af7c 	bne.w	801a150 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x154>
 801a258:	4a2a      	ldr	r2, [pc, #168]	; (801a304 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x308>)
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a260:	2b01      	cmp	r3, #1
 801a262:	d13a      	bne.n	801a2da <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x2de>
 801a264:	4a28      	ldr	r2, [pc, #160]	; (801a308 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x30c>)
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	4413      	add	r3, r2
 801a26a:	2208      	movs	r2, #8
 801a26c:	701a      	strb	r2, [r3, #0]
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	015b      	lsls	r3, r3, #5
 801a272:	4a26      	ldr	r2, [pc, #152]	; (801a30c <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x310>)
 801a274:	4413      	add	r3, r2
 801a276:	2220      	movs	r2, #32
 801a278:	2100      	movs	r1, #0
 801a27a:	4618      	mov	r0, r3
 801a27c:	f002 ff7a 	bl	801d174 <memset>
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	015b      	lsls	r3, r3, #5
 801a284:	4a21      	ldr	r2, [pc, #132]	; (801a30c <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x310>)
 801a286:	4413      	add	r3, r2
 801a288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a28a:	2208      	movs	r2, #8
 801a28c:	4618      	mov	r0, r3
 801a28e:	f002 fed7 	bl	801d040 <memcpy>
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	015b      	lsls	r3, r3, #5
 801a296:	3308      	adds	r3, #8
 801a298:	4a1c      	ldr	r2, [pc, #112]	; (801a30c <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x310>)
 801a29a:	1898      	adds	r0, r3, r2
 801a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a29e:	3308      	adds	r3, #8
 801a2a0:	2208      	movs	r2, #8
 801a2a2:	4619      	mov	r1, r3
 801a2a4:	f002 fecc 	bl	801d040 <memcpy>
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	015b      	lsls	r3, r3, #5
 801a2ac:	3310      	adds	r3, #16
 801a2ae:	4a17      	ldr	r2, [pc, #92]	; (801a30c <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x310>)
 801a2b0:	4413      	add	r3, r2
 801a2b2:	6a39      	ldr	r1, [r7, #32]
 801a2b4:	2208      	movs	r2, #8
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f002 fec2 	bl	801d040 <memcpy>
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	015b      	lsls	r3, r3, #5
 801a2c0:	3318      	adds	r3, #24
 801a2c2:	4a12      	ldr	r2, [pc, #72]	; (801a30c <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x310>)
 801a2c4:	4413      	add	r3, r2
 801a2c6:	69f9      	ldr	r1, [r7, #28]
 801a2c8:	2208      	movs	r2, #8
 801a2ca:	4618      	mov	r0, r3
 801a2cc:	f002 feb8 	bl	801d040 <memcpy>
 801a2d0:	4a0c      	ldr	r2, [pc, #48]	; (801a304 <conv_ds_16L8L8N16P8P8N_to_24L24L16N_24P24P16N+0x308>)
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	2100      	movs	r1, #0
 801a2d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	881a      	ldrh	r2, [r3, #0]
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	885b      	ldrh	r3, [r3, #2]
 801a2e2:	429a      	cmp	r2, r3
 801a2e4:	bf0c      	ite	eq
 801a2e6:	2301      	moveq	r3, #1
 801a2e8:	2300      	movne	r3, #0
 801a2ea:	b2db      	uxtb	r3, r3
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	3730      	adds	r7, #48	; 0x30
 801a2f0:	46bd      	mov	sp, r7
 801a2f2:	bd80      	pop	{r7, pc}
 801a2f4:	0803ed00 	.word	0x0803ed00
 801a2f8:	0803efe8 	.word	0x0803efe8
 801a2fc:	0803f4f9 	.word	0x0803f4f9
 801a300:	0803ecd8 	.word	0x0803ecd8
 801a304:	100027ac 	.word	0x100027ac
 801a308:	10002e88 	.word	0x10002e88
 801a30c:	10002e48 	.word	0x10002e48

0801a310 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N>:

  SET_SLOT(2, 0, 5, 4);
  SET_SLOT(2, 1, 7, 13);
  SET_SLOT(2, 2, 12, 15);
})
CONVERT_ROUTINE2(conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N, t_16L8L8N16P8P8N, t_16L16L8L8L16N,
 801a310:	b580      	push	{r7, lr}
 801a312:	b08c      	sub	sp, #48	; 0x30
 801a314:	af00      	add	r7, sp, #0
 801a316:	60f8      	str	r0, [r7, #12]
 801a318:	60b9      	str	r1, [r7, #8]
 801a31a:	607a      	str	r2, [r7, #4]
 801a31c:	603b      	str	r3, [r7, #0]
 801a31e:	68bb      	ldr	r3, [r7, #8]
 801a320:	889b      	ldrh	r3, [r3, #4]
 801a322:	3310      	adds	r3, #16
 801a324:	68ba      	ldr	r2, [r7, #8]
 801a326:	4413      	add	r3, r2
 801a328:	3304      	adds	r3, #4
 801a32a:	627b      	str	r3, [r7, #36]	; 0x24
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	889b      	ldrh	r3, [r3, #4]
 801a330:	3310      	adds	r3, #16
 801a332:	687a      	ldr	r2, [r7, #4]
 801a334:	4413      	add	r3, r2
 801a336:	3304      	adds	r3, #4
 801a338:	623b      	str	r3, [r7, #32]
 801a33a:	683b      	ldr	r3, [r7, #0]
 801a33c:	889b      	ldrh	r3, [r3, #4]
 801a33e:	3310      	adds	r3, #16
 801a340:	683a      	ldr	r2, [r7, #0]
 801a342:	4413      	add	r3, r2
 801a344:	3304      	adds	r3, #4
 801a346:	61fb      	str	r3, [r7, #28]
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	885b      	ldrh	r3, [r3, #2]
 801a34c:	461a      	mov	r2, r3
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	881b      	ldrh	r3, [r3, #0]
 801a352:	1ad3      	subs	r3, r2, r3
 801a354:	08da      	lsrs	r2, r3, #3
 801a356:	68bb      	ldr	r3, [r7, #8]
 801a358:	881b      	ldrh	r3, [r3, #0]
 801a35a:	4619      	mov	r1, r3
 801a35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a35e:	005b      	lsls	r3, r3, #1
 801a360:	fb91 f3f3 	sdiv	r3, r1, r3
 801a364:	08db      	lsrs	r3, r3, #3
 801a366:	4293      	cmp	r3, r2
 801a368:	bf28      	it	cs
 801a36a:	4613      	movcs	r3, r2
 801a36c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a370:	005b      	lsls	r3, r3, #1
 801a372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a374:	fb02 f303 	mul.w	r3, r2, r3
 801a378:	62bb      	str	r3, [r7, #40]	; 0x28
 801a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d110      	bne.n	801a3a2 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x92>
 801a380:	68bb      	ldr	r3, [r7, #8]
 801a382:	2200      	movs	r2, #0
 801a384:	801a      	strh	r2, [r3, #0]
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	2200      	movs	r2, #0
 801a38a:	801a      	strh	r2, [r3, #0]
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	2200      	movs	r2, #0
 801a390:	809a      	strh	r2, [r3, #4]
 801a392:	683b      	ldr	r3, [r7, #0]
 801a394:	2200      	movs	r2, #0
 801a396:	801a      	strh	r2, [r3, #0]
 801a398:	683b      	ldr	r3, [r7, #0]
 801a39a:	2200      	movs	r2, #0
 801a39c:	809a      	strh	r2, [r3, #4]
 801a39e:	2300      	movs	r3, #0
 801a3a0:	e12e      	b.n	801a600 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x2f0>
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	881a      	ldrh	r2, [r3, #0]
 801a3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3a8:	b29b      	uxth	r3, r3
 801a3aa:	00db      	lsls	r3, r3, #3
 801a3ac:	b29b      	uxth	r3, r3
 801a3ae:	4413      	add	r3, r2
 801a3b0:	b29a      	uxth	r2, r3
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	801a      	strh	r2, [r3, #0]
 801a3b6:	683b      	ldr	r3, [r7, #0]
 801a3b8:	881a      	ldrh	r2, [r3, #0]
 801a3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3bc:	b29b      	uxth	r3, r3
 801a3be:	00db      	lsls	r3, r3, #3
 801a3c0:	b29b      	uxth	r3, r3
 801a3c2:	4413      	add	r3, r2
 801a3c4:	b29a      	uxth	r2, r3
 801a3c6:	683b      	ldr	r3, [r7, #0]
 801a3c8:	801a      	strh	r2, [r3, #0]
 801a3ca:	68bb      	ldr	r3, [r7, #8]
 801a3cc:	881a      	ldrh	r2, [r3, #0]
 801a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3d0:	b29b      	uxth	r3, r3
 801a3d2:	00db      	lsls	r3, r3, #3
 801a3d4:	b29b      	uxth	r3, r3
 801a3d6:	1ad3      	subs	r3, r2, r3
 801a3d8:	b29a      	uxth	r2, r3
 801a3da:	68bb      	ldr	r3, [r7, #8]
 801a3dc:	801a      	strh	r2, [r3, #0]
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	889a      	ldrh	r2, [r3, #4]
 801a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e4:	b29b      	uxth	r3, r3
 801a3e6:	00db      	lsls	r3, r3, #3
 801a3e8:	b29b      	uxth	r3, r3
 801a3ea:	4413      	add	r3, r2
 801a3ec:	b29a      	uxth	r2, r3
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	809a      	strh	r2, [r3, #4]
 801a3f2:	683b      	ldr	r3, [r7, #0]
 801a3f4:	889a      	ldrh	r2, [r3, #4]
 801a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3f8:	b29b      	uxth	r3, r3
 801a3fa:	00db      	lsls	r3, r3, #3
 801a3fc:	b29b      	uxth	r3, r3
 801a3fe:	4413      	add	r3, r2
 801a400:	b29a      	uxth	r2, r3
 801a402:	683b      	ldr	r3, [r7, #0]
 801a404:	809a      	strh	r2, [r3, #4]
 801a406:	68bb      	ldr	r3, [r7, #8]
 801a408:	889a      	ldrh	r2, [r3, #4]
 801a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a40c:	b29b      	uxth	r3, r3
 801a40e:	00db      	lsls	r3, r3, #3
 801a410:	b29b      	uxth	r3, r3
 801a412:	4413      	add	r3, r2
 801a414:	b29a      	uxth	r2, r3
 801a416:	68bb      	ldr	r3, [r7, #8]
 801a418:	809a      	strh	r2, [r3, #4]
 801a41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d10c      	bne.n	801a43a <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x12a>
 801a420:	4b79      	ldr	r3, [pc, #484]	; (801a608 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x2f8>)
 801a422:	f44f 62cc 	mov.w	r2, #1632	; 0x660
 801a426:	4979      	ldr	r1, [pc, #484]	; (801a60c <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x2fc>)
 801a428:	4879      	ldr	r0, [pc, #484]	; (801a610 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x300>)
 801a42a:	f7ee fbfd 	bl	8008c28 <xprintf>
 801a42e:	2301      	movs	r3, #1
 801a430:	61bb      	str	r3, [r7, #24]
 801a432:	bf00      	nop
 801a434:	69bb      	ldr	r3, [r7, #24]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d1fc      	bne.n	801a434 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x124>
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	881a      	ldrh	r2, [r3, #0]
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	885b      	ldrh	r3, [r3, #2]
 801a442:	429a      	cmp	r2, r3
 801a444:	f240 808e 	bls.w	801a564 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x254>
 801a448:	4b72      	ldr	r3, [pc, #456]	; (801a614 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x304>)
 801a44a:	f44f 62cc 	mov.w	r2, #1632	; 0x660
 801a44e:	496f      	ldr	r1, [pc, #444]	; (801a60c <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x2fc>)
 801a450:	486f      	ldr	r0, [pc, #444]	; (801a610 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x300>)
 801a452:	f7ee fbe9 	bl	8008c28 <xprintf>
 801a456:	2301      	movs	r3, #1
 801a458:	617b      	str	r3, [r7, #20]
 801a45a:	bf00      	nop
 801a45c:	697b      	ldr	r3, [r7, #20]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d1fc      	bne.n	801a45c <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x14c>
 801a462:	e07f      	b.n	801a564 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x254>
 801a464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a466:	005b      	lsls	r3, r3, #1
 801a468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a46a:	1ad3      	subs	r3, r2, r3
 801a46c:	62bb      	str	r3, [r7, #40]	; 0x28
 801a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a470:	3b01      	subs	r3, #1
 801a472:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a476:	00db      	lsls	r3, r3, #3
 801a478:	6a3a      	ldr	r2, [r7, #32]
 801a47a:	4413      	add	r3, r2
 801a47c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a47e:	00d2      	lsls	r2, r2, #3
 801a480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a482:	440a      	add	r2, r1
 801a484:	7812      	ldrb	r2, [r2, #0]
 801a486:	701a      	strb	r2, [r3, #0]
 801a488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a48a:	00db      	lsls	r3, r3, #3
 801a48c:	6a3a      	ldr	r2, [r7, #32]
 801a48e:	4413      	add	r3, r2
 801a490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a492:	00d2      	lsls	r2, r2, #3
 801a494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a496:	440a      	add	r2, r1
 801a498:	7852      	ldrb	r2, [r2, #1]
 801a49a:	705a      	strb	r2, [r3, #1]
 801a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a49e:	00db      	lsls	r3, r3, #3
 801a4a0:	6a3a      	ldr	r2, [r7, #32]
 801a4a2:	4413      	add	r3, r2
 801a4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a4a6:	00d2      	lsls	r2, r2, #3
 801a4a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a4aa:	440a      	add	r2, r1
 801a4ac:	7a12      	ldrb	r2, [r2, #8]
 801a4ae:	709a      	strb	r2, [r3, #2]
 801a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4b2:	00db      	lsls	r3, r3, #3
 801a4b4:	6a3a      	ldr	r2, [r7, #32]
 801a4b6:	4413      	add	r3, r2
 801a4b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a4ba:	00d2      	lsls	r2, r2, #3
 801a4bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a4be:	440a      	add	r2, r1
 801a4c0:	7a52      	ldrb	r2, [r2, #9]
 801a4c2:	70da      	strb	r2, [r3, #3]
 801a4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4c6:	00db      	lsls	r3, r3, #3
 801a4c8:	6a3a      	ldr	r2, [r7, #32]
 801a4ca:	4413      	add	r3, r2
 801a4cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a4ce:	00d2      	lsls	r2, r2, #3
 801a4d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a4d2:	440a      	add	r2, r1
 801a4d4:	7ad2      	ldrb	r2, [r2, #11]
 801a4d6:	711a      	strb	r2, [r3, #4]
 801a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4da:	00db      	lsls	r3, r3, #3
 801a4dc:	6a3a      	ldr	r2, [r7, #32]
 801a4de:	4413      	add	r3, r2
 801a4e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a4e2:	00d2      	lsls	r2, r2, #3
 801a4e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a4e6:	440a      	add	r2, r1
 801a4e8:	78d2      	ldrb	r2, [r2, #3]
 801a4ea:	715a      	strb	r2, [r3, #5]
 801a4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4ee:	00db      	lsls	r3, r3, #3
 801a4f0:	69fa      	ldr	r2, [r7, #28]
 801a4f2:	4413      	add	r3, r2
 801a4f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a4f6:	00d2      	lsls	r2, r2, #3
 801a4f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a4fa:	440a      	add	r2, r1
 801a4fc:	7912      	ldrb	r2, [r2, #4]
 801a4fe:	701a      	strb	r2, [r3, #0]
 801a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a502:	00db      	lsls	r3, r3, #3
 801a504:	69fa      	ldr	r2, [r7, #28]
 801a506:	4413      	add	r3, r2
 801a508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a50a:	00d2      	lsls	r2, r2, #3
 801a50c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a50e:	440a      	add	r2, r1
 801a510:	7952      	ldrb	r2, [r2, #5]
 801a512:	705a      	strb	r2, [r3, #1]
 801a514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a516:	00db      	lsls	r3, r3, #3
 801a518:	69fa      	ldr	r2, [r7, #28]
 801a51a:	4413      	add	r3, r2
 801a51c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a51e:	00d2      	lsls	r2, r2, #3
 801a520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a522:	440a      	add	r2, r1
 801a524:	7b12      	ldrb	r2, [r2, #12]
 801a526:	709a      	strb	r2, [r3, #2]
 801a528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a52a:	00db      	lsls	r3, r3, #3
 801a52c:	69fa      	ldr	r2, [r7, #28]
 801a52e:	4413      	add	r3, r2
 801a530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a532:	00d2      	lsls	r2, r2, #3
 801a534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a536:	440a      	add	r2, r1
 801a538:	7b52      	ldrb	r2, [r2, #13]
 801a53a:	70da      	strb	r2, [r3, #3]
 801a53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a53e:	00db      	lsls	r3, r3, #3
 801a540:	69fa      	ldr	r2, [r7, #28]
 801a542:	4413      	add	r3, r2
 801a544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a546:	00d2      	lsls	r2, r2, #3
 801a548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a54a:	440a      	add	r2, r1
 801a54c:	7bd2      	ldrb	r2, [r2, #15]
 801a54e:	711a      	strb	r2, [r3, #4]
 801a550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a552:	00db      	lsls	r3, r3, #3
 801a554:	69fa      	ldr	r2, [r7, #28]
 801a556:	4413      	add	r3, r2
 801a558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a55a:	00d2      	lsls	r2, r2, #3
 801a55c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a55e:	440a      	add	r2, r1
 801a560:	79d2      	ldrb	r2, [r2, #7]
 801a562:	715a      	strb	r2, [r3, #5]
 801a564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a566:	2b00      	cmp	r3, #0
 801a568:	f47f af7c 	bne.w	801a464 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x154>
 801a56c:	4a2a      	ldr	r2, [pc, #168]	; (801a618 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x308>)
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a574:	2b01      	cmp	r3, #1
 801a576:	d13a      	bne.n	801a5ee <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x2de>
 801a578:	4a28      	ldr	r2, [pc, #160]	; (801a61c <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x30c>)
 801a57a:	68fb      	ldr	r3, [r7, #12]
 801a57c:	4413      	add	r3, r2
 801a57e:	2208      	movs	r2, #8
 801a580:	701a      	strb	r2, [r3, #0]
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	015b      	lsls	r3, r3, #5
 801a586:	4a26      	ldr	r2, [pc, #152]	; (801a620 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x310>)
 801a588:	4413      	add	r3, r2
 801a58a:	2220      	movs	r2, #32
 801a58c:	2100      	movs	r1, #0
 801a58e:	4618      	mov	r0, r3
 801a590:	f002 fdf0 	bl	801d174 <memset>
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	015b      	lsls	r3, r3, #5
 801a598:	4a21      	ldr	r2, [pc, #132]	; (801a620 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x310>)
 801a59a:	4413      	add	r3, r2
 801a59c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a59e:	2208      	movs	r2, #8
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	f002 fd4d 	bl	801d040 <memcpy>
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	015b      	lsls	r3, r3, #5
 801a5aa:	3308      	adds	r3, #8
 801a5ac:	4a1c      	ldr	r2, [pc, #112]	; (801a620 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x310>)
 801a5ae:	1898      	adds	r0, r3, r2
 801a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5b2:	3308      	adds	r3, #8
 801a5b4:	2208      	movs	r2, #8
 801a5b6:	4619      	mov	r1, r3
 801a5b8:	f002 fd42 	bl	801d040 <memcpy>
 801a5bc:	68fb      	ldr	r3, [r7, #12]
 801a5be:	015b      	lsls	r3, r3, #5
 801a5c0:	3310      	adds	r3, #16
 801a5c2:	4a17      	ldr	r2, [pc, #92]	; (801a620 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x310>)
 801a5c4:	4413      	add	r3, r2
 801a5c6:	6a39      	ldr	r1, [r7, #32]
 801a5c8:	2208      	movs	r2, #8
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	f002 fd38 	bl	801d040 <memcpy>
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	015b      	lsls	r3, r3, #5
 801a5d4:	3318      	adds	r3, #24
 801a5d6:	4a12      	ldr	r2, [pc, #72]	; (801a620 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x310>)
 801a5d8:	4413      	add	r3, r2
 801a5da:	69f9      	ldr	r1, [r7, #28]
 801a5dc:	2208      	movs	r2, #8
 801a5de:	4618      	mov	r0, r3
 801a5e0:	f002 fd2e 	bl	801d040 <memcpy>
 801a5e4:	4a0c      	ldr	r2, [pc, #48]	; (801a618 <conv_ds_16L8L8N16P8P8N_to_16L16L8L8L16N_16P16P8P8P16N+0x308>)
 801a5e6:	68fb      	ldr	r3, [r7, #12]
 801a5e8:	2100      	movs	r1, #0
 801a5ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	881a      	ldrh	r2, [r3, #0]
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	885b      	ldrh	r3, [r3, #2]
 801a5f6:	429a      	cmp	r2, r3
 801a5f8:	bf0c      	ite	eq
 801a5fa:	2301      	moveq	r3, #1
 801a5fc:	2300      	movne	r3, #0
 801a5fe:	b2db      	uxtb	r3, r3
 801a600:	4618      	mov	r0, r3
 801a602:	3730      	adds	r7, #48	; 0x30
 801a604:	46bd      	mov	sp, r7
 801a606:	bd80      	pop	{r7, pc}
 801a608:	0803ed00 	.word	0x0803ed00
 801a60c:	0803f016 	.word	0x0803f016
 801a610:	0803f4f9 	.word	0x0803f4f9
 801a614:	0803ecd8 	.word	0x0803ecd8
 801a618:	100027ac 	.word	0x100027ac
 801a61c:	10002e88 	.word	0x10002e88
 801a620:	10002e48 	.word	0x10002e48

0801a624 <conv_NULL>:
  SET_SLOT(2, 1, 13, 12);
  SET_SLOT(2, 2, 7, 15);
})

static CONV_RET __attribute__((optimize(OPTIM))) conv_NULL(CONV_PARAMS)
{
 801a624:	b480      	push	{r7}
 801a626:	b085      	sub	sp, #20
 801a628:	af00      	add	r7, sp, #0
 801a62a:	60f8      	str	r0, [r7, #12]
 801a62c:	60b9      	str	r1, [r7, #8]
 801a62e:	607a      	str	r2, [r7, #4]
 801a630:	603b      	str	r3, [r7, #0]
  if(outBuffer1) outBuffer1->size = outBuffer1->maxSize;
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	2b00      	cmp	r3, #0
 801a636:	d003      	beq.n	801a640 <conv_NULL+0x1c>
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	885a      	ldrh	r2, [r3, #2]
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	801a      	strh	r2, [r3, #0]
  if(outBuffer2) outBuffer2->size = outBuffer2->maxSize;
 801a640:	683b      	ldr	r3, [r7, #0]
 801a642:	2b00      	cmp	r3, #0
 801a644:	d003      	beq.n	801a64e <conv_NULL+0x2a>
 801a646:	683b      	ldr	r3, [r7, #0]
 801a648:	885a      	ldrh	r2, [r3, #2]
 801a64a:	683b      	ldr	r3, [r7, #0]
 801a64c:	801a      	strh	r2, [r3, #0]
  inBuffer->size                  = 0;
 801a64e:	68bb      	ldr	r3, [r7, #8]
 801a650:	2200      	movs	r2, #0
 801a652:	801a      	strh	r2, [r3, #0]
  return 1;
 801a654:	2301      	movs	r3, #1
}
 801a656:	4618      	mov	r0, r3
 801a658:	3714      	adds	r7, #20
 801a65a:	46bd      	mov	sp, r7
 801a65c:	bc80      	pop	{r7}
 801a65e:	4770      	bx	lr

0801a660 <pipeRelease.part.0>:

static int pipeRelease(int pipeNum)
{
  if(pipeNum < 0) return 44100;

  if(pipeNum == 1)
 801a660:	2801      	cmp	r0, #1
  pipeSync_t *message = data;
  pipeConfigure(message->pipeNum);
  dFree(message);
}

static int pipeRelease(int pipeNum)
 801a662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a666:	4605      	mov	r5, r0
{
  if(pipeNum < 0) return 44100;

  if(pipeNum == 1)
 801a668:	d101      	bne.n	801a66e <pipeRelease.part.0+0xe>
    selectorSet(SELECTOR_SAI);
 801a66a:	f7f3 ff3b 	bl	800e4e4 <selectorSet>

  pipe_t *pipe = &pipes[pipeNum];
#ifdef USE_MUTE
  pipe->mute = 1;
 801a66e:	4e35      	ldr	r6, [pc, #212]	; (801a744 <pipeRelease.part.0+0xe4>)
 801a670:	2350      	movs	r3, #80	; 0x50
 801a672:	fb03 6305 	mla	r3, r3, r5, r6
 801a676:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801a67a:	f042 0201 	orr.w	r2, r2, #1
 801a67e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
#endif
  int mutefreq = 44100;
  switch (pipe->inFreq)
 801a682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a684:	4a30      	ldr	r2, [pc, #192]	; (801a748 <pipeRelease.part.0+0xe8>)
 801a686:	4293      	cmp	r3, r2
 801a688:	d006      	beq.n	801a698 <pipeRelease.part.0+0x38>
 801a68a:	4a30      	ldr	r2, [pc, #192]	; (801a74c <pipeRelease.part.0+0xec>)
 801a68c:	4293      	cmp	r3, r2
 801a68e:	d003      	beq.n	801a698 <pipeRelease.part.0+0x38>
 801a690:	f64b 3280 	movw	r2, #48000	; 0xbb80
 801a694:	4293      	cmp	r3, r2
 801a696:	d102      	bne.n	801a69e <pipeRelease.part.0+0x3e>
    {
    case 48000:
    case 96000:
    case 192000:
      mutefreq = 48000;
 801a698:	f64b 3780 	movw	r7, #48000	; 0xbb80
 801a69c:	e001      	b.n	801a6a2 <pipeRelease.part.0+0x42>

  pipe_t *pipe = &pipes[pipeNum];
#ifdef USE_MUTE
  pipe->mute = 1;
#endif
  int mutefreq = 44100;
 801a69e:	f64a 4744 	movw	r7, #44100	; 0xac44
    case 192000:
      mutefreq = 48000;
      break;
    }
  int mask = 0;
  if(pipe->outQueue1) mask |= (1<<(pipe->primaryOutQueue == OUTPUT_SAI2));
 801a6a2:	2350      	movs	r3, #80	; 0x50
 801a6a4:	fb03 6305 	mla	r3, r3, r5, r6
 801a6a8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 801a6aa:	b128      	cbz	r0, 801a6b8 <pipeRelease.part.0+0x58>
 801a6ac:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801a6b0:	2b02      	cmp	r3, #2
 801a6b2:	bf0c      	ite	eq
 801a6b4:	2002      	moveq	r0, #2
 801a6b6:	2001      	movne	r0, #1
  if(pipe->outQueue2) mask |= (1<<(pipe->secondaryOutQueue == OUTPUT_SAI2));
 801a6b8:	2350      	movs	r3, #80	; 0x50
 801a6ba:	fb03 6305 	mla	r3, r3, r5, r6
 801a6be:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801a6c0:	b132      	cbz	r2, 801a6d0 <pipeRelease.part.0+0x70>
 801a6c2:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801a6c6:	2b02      	cmp	r3, #2
 801a6c8:	bf0c      	ite	eq
 801a6ca:	2302      	moveq	r3, #2
 801a6cc:	2301      	movne	r3, #1
 801a6ce:	4318      	orrs	r0, r3
  saiReconfigure(mask, pipe->primaryClkSrc, mutefreq, 1);
 801a6d0:	2450      	movs	r4, #80	; 0x50
 801a6d2:	fb04 6405 	mla	r4, r4, r5, r6
 801a6d6:	2301      	movs	r3, #1
 801a6d8:	463a      	mov	r2, r7
 801a6da:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
 801a6de:	f7f9 ff0f 	bl	8014500 <saiReconfigure>
  pipe->active = 0;
 801a6e2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  pipe->inQueue = NULL;
  pipe->outQueue1 = NULL;
  pipe->outQueue2 = NULL;

  //Release old resources
  if (pipe->inBuffer)
 801a6e6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  int mask = 0;
  if(pipe->outQueue1) mask |= (1<<(pipe->primaryOutQueue == OUTPUT_SAI2));
  if(pipe->outQueue2) mask |= (1<<(pipe->secondaryOutQueue == OUTPUT_SAI2));
  saiReconfigure(mask, pipe->primaryClkSrc, mutefreq, 1);
  pipe->active = 0;
  pipe->convertFormat = NULL;
 801a6ea:	f04f 0800 	mov.w	r8, #0
    }
  int mask = 0;
  if(pipe->outQueue1) mask |= (1<<(pipe->primaryOutQueue == OUTPUT_SAI2));
  if(pipe->outQueue2) mask |= (1<<(pipe->secondaryOutQueue == OUTPUT_SAI2));
  saiReconfigure(mask, pipe->primaryClkSrc, mutefreq, 1);
  pipe->active = 0;
 801a6ee:	f36f 0341 	bfc	r3, #1, #1
 801a6f2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  pipe->convertFormat = NULL;
 801a6f6:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
  pipe->inQueue = NULL;
 801a6fa:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
  pipe->outQueue1 = NULL;
 801a6fe:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
  pipe->outQueue2 = NULL;
 801a702:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78

  //Release old resources
  if (pipe->inBuffer)
 801a706:	b118      	cbz	r0, 801a710 <pipeRelease.part.0+0xb0>
    {
      bFree(pipe->inBuffer);
 801a708:	f7fa fe92 	bl	8015430 <bFree>
      pipe->inBuffer = NULL;
 801a70c:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    }
  if (pipe->outBuffer1)
 801a710:	2450      	movs	r4, #80	; 0x50
 801a712:	fb04 6405 	mla	r4, r4, r5, r6
 801a716:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801a71a:	b120      	cbz	r0, 801a726 <pipeRelease.part.0+0xc6>
    {
      bFree(pipe->outBuffer1);
 801a71c:	f7fa fe88 	bl	8015430 <bFree>
      pipe->outBuffer1 = NULL;
 801a720:	2300      	movs	r3, #0
 801a722:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    }
  if (pipe->outBuffer2)
 801a726:	2350      	movs	r3, #80	; 0x50
 801a728:	fb03 6505 	mla	r5, r3, r5, r6
 801a72c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 801a730:	b120      	cbz	r0, 801a73c <pipeRelease.part.0+0xdc>
    {
      bFree(pipe->outBuffer2);
 801a732:	f7fa fe7d 	bl	8015430 <bFree>
      pipe->outBuffer2 = NULL;
 801a736:	2300      	movs	r3, #0
 801a738:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
    }
  return mutefreq;
}
 801a73c:	4638      	mov	r0, r7
 801a73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a742:	bf00      	nop
 801a744:	100024f4 	.word	0x100024f4
 801a748:	00017700 	.word	0x00017700
 801a74c:	0002ee00 	.word	0x0002ee00

0801a750 <streamDisable.part.1>:
        if(pipe->spkSets[spkNum] == spkSet)
          sendStreamInfoSpkPipe(pipeNum, spkSet);
    }
}

static void streamDisable(int pipeNum)
 801a750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  dFree(message);
}

static int pipeRelease(int pipeNum)
{
  if(pipeNum < 0) return 44100;
 801a754:	1e05      	subs	r5, r0, #0
 801a756:	db03      	blt.n	801a760 <streamDisable.part.1+0x10>
 801a758:	f7ff ff82 	bl	801a660 <pipeRelease.part.0>
 801a75c:	4607      	mov	r7, r0
 801a75e:	e001      	b.n	801a764 <streamDisable.part.1+0x14>
 801a760:	f64a 4744 	movw	r7, #44100	; 0xac44
static void streamDisable(int pipeNum)
{
  if(pipeNum < 0) return;
  int muteFreq = pipeRelease(pipeNum);
  pipe_t *pipe = &pipes[pipeNum];
  pipe->clkSrc = pipe->primaryClkSrc;
 801a764:	4c20      	ldr	r4, [pc, #128]	; (801a7e8 <streamDisable.part.1+0x98>)
 801a766:	2250      	movs	r2, #80	; 0x50
 801a768:	fb02 f305 	mul.w	r3, r2, r5
 801a76c:	18e2      	adds	r2, r4, r3
 801a76e:	f103 0808 	add.w	r8, r3, #8
 801a772:	f892 1067 	ldrb.w	r1, [r2, #103]	; 0x67
 801a776:	f882 1088 	strb.w	r1, [r2, #136]	; 0x88
  pipe->active = 0;
 801a77a:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 801a77e:	3448      	adds	r4, #72	; 0x48
 801a780:	f36f 0141 	bfc	r1, #1, #1
 801a784:	3318      	adds	r3, #24
 801a786:	44a0      	add	r8, r4
 801a788:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
 801a78c:	441c      	add	r4, r3
        memset(data, 0, MSG_LEN);
        data->kod = 0x92;
        data->kondPom = pipe->spkSets[spkNum];
        //Send any format with a proper mute frequency (the same as transmitted thtough radio)
        data->signalType = audioOutputType[mapFreq(muteFreq)][OF_16L16P32N];
        data->outputType = (pipe->outputMode == OM_RADIO)?1:2;
 801a78e:	4616      	mov	r6, r2
  pipe_t *pipe = &pipes[pipeNum];
  pipe->clkSrc = pipe->primaryClkSrc;
  pipe->active = 0;
  int spkNum;
  for(spkNum = 0; spkNum < 4; spkNum++)
    if(pipe->spkSets[spkNum] >= 0)
 801a790:	f858 3f04 	ldr.w	r3, [r8, #4]!
 801a794:	2b00      	cmp	r3, #0
 801a796:	db23      	blt.n	801a7e0 <streamDisable.part.1+0x90>
      {
        //Send freq change to SMOK
        bBuffer_t *msg = bAlloc(MSG_LEN);
 801a798:	2020      	movs	r0, #32
 801a79a:	f7fa fbef 	bl	8014f7c <bAlloc>
        msg->size = sizeof(msg_92_t);
 801a79e:	230a      	movs	r3, #10
  int spkNum;
  for(spkNum = 0; spkNum < 4; spkNum++)
    if(pipe->spkSets[spkNum] >= 0)
      {
        //Send freq change to SMOK
        bBuffer_t *msg = bAlloc(MSG_LEN);
 801a7a0:	4605      	mov	r5, r0
        msg->size = sizeof(msg_92_t);
        msg_92_t *data = (void *)msg->data;
        memset(data, 0, MSG_LEN);
 801a7a2:	2220      	movs	r2, #32
  for(spkNum = 0; spkNum < 4; spkNum++)
    if(pipe->spkSets[spkNum] >= 0)
      {
        //Send freq change to SMOK
        bBuffer_t *msg = bAlloc(MSG_LEN);
        msg->size = sizeof(msg_92_t);
 801a7a4:	f820 3b14 	strh.w	r3, [r0], #20
        msg_92_t *data = (void *)msg->data;
        memset(data, 0, MSG_LEN);
 801a7a8:	2100      	movs	r1, #0
 801a7aa:	f002 fce3 	bl	801d174 <memset>
        data->kod = 0x92;
 801a7ae:	2392      	movs	r3, #146	; 0x92
 801a7b0:	752b      	strb	r3, [r5, #20]
        data->kondPom = pipe->spkSets[spkNum];
 801a7b2:	f8d8 3000 	ldr.w	r3, [r8]
 801a7b6:	756b      	strb	r3, [r5, #21]
        //Send any format with a proper mute frequency (the same as transmitted thtough radio)
        data->signalType = audioOutputType[mapFreq(muteFreq)][OF_16L16P32N];
 801a7b8:	4638      	mov	r0, r7
 801a7ba:	f7fb fa7b 	bl	8015cb4 <mapFreq>
 801a7be:	4b0b      	ldr	r3, [pc, #44]	; (801a7ec <streamDisable.part.1+0x9c>)
 801a7c0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 801a7c4:	4418      	add	r0, r3
 801a7c6:	f890 33e5 	ldrb.w	r3, [r0, #997]	; 0x3e5
 801a7ca:	75ab      	strb	r3, [r5, #22]
        data->outputType = (pipe->outputMode == OM_RADIO)?1:2;
 801a7cc:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	bf0c      	ite	eq
 801a7d4:	2301      	moveq	r3, #1
 801a7d6:	2302      	movne	r3, #2
 801a7d8:	75eb      	strb	r3, [r5, #23]
        msgGenSend(msg);
 801a7da:	4628      	mov	r0, r5
 801a7dc:	f7ee fbce 	bl	8008f7c <msgGenSend>
  int muteFreq = pipeRelease(pipeNum);
  pipe_t *pipe = &pipes[pipeNum];
  pipe->clkSrc = pipe->primaryClkSrc;
  pipe->active = 0;
  int spkNum;
  for(spkNum = 0; spkNum < 4; spkNum++)
 801a7e0:	45a0      	cmp	r8, r4
 801a7e2:	d1d5      	bne.n	801a790 <streamDisable.part.1+0x40>
        //Send any format with a proper mute frequency (the same as transmitted thtough radio)
        data->signalType = audioOutputType[mapFreq(muteFreq)][OF_16L16P32N];
        data->outputType = (pipe->outputMode == OM_RADIO)?1:2;
        msgGenSend(msg);
      }
}
 801a7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7e8:	100024f4 	.word	0x100024f4
 801a7ec:	0803f04c 	.word	0x0803f04c

0801a7f0 <sendStreamInfoSpkPipe.part.2>:
  if(pipe)
    return (pipe->outputMode == OM_RADIO)?1:2;
  return 0;
}

static void sendStreamInfoSpkPipe(int pipeNum, int spkSet)
 801a7f0:	b570      	push	{r4, r5, r6, lr}
 801a7f2:	4605      	mov	r5, r0
  freq_e fr = mapFreq(pipe->inFreq);

  if (fr != FREQ_NONE)
    {
      //Send freq change to SMOK
      bBuffer_t *msg = bAlloc(MSG_LEN);
 801a7f4:	2020      	movs	r0, #32
  if(pipe)
    return (pipe->outputMode == OM_RADIO)?1:2;
  return 0;
}

static void sendStreamInfoSpkPipe(int pipeNum, int spkSet)
 801a7f6:	460e      	mov	r6, r1
  freq_e fr = mapFreq(pipe->inFreq);

  if (fr != FREQ_NONE)
    {
      //Send freq change to SMOK
      bBuffer_t *msg = bAlloc(MSG_LEN);
 801a7f8:	f7fa fbc0 	bl	8014f7c <bAlloc>
      msg->size = sizeof(msg_92_t);
 801a7fc:	230a      	movs	r3, #10
  freq_e fr = mapFreq(pipe->inFreq);

  if (fr != FREQ_NONE)
    {
      //Send freq change to SMOK
      bBuffer_t *msg = bAlloc(MSG_LEN);
 801a7fe:	4604      	mov	r4, r0
      msg->size = sizeof(msg_92_t);
      msg_92_t *data = (void *)msg->data;
      memset(data, 0, MSG_LEN);
 801a800:	2100      	movs	r1, #0

  if (fr != FREQ_NONE)
    {
      //Send freq change to SMOK
      bBuffer_t *msg = bAlloc(MSG_LEN);
      msg->size = sizeof(msg_92_t);
 801a802:	f820 3b14 	strh.w	r3, [r0], #20
      msg_92_t *data = (void *)msg->data;
      memset(data, 0, MSG_LEN);
 801a806:	2220      	movs	r2, #32
 801a808:	f002 fcb4 	bl	801d174 <memset>
      data->kod = 0x92;
 801a80c:	2392      	movs	r3, #146	; 0x92
 801a80e:	7523      	strb	r3, [r4, #20]
      data->kondPom = spkSet;
      data->signalType = audioOutputType[mapFreq(pipe->inFreq)][pipe->outputFormat];
 801a810:	4b0e      	ldr	r3, [pc, #56]	; (801a84c <sendStreamInfoSpkPipe.part.2+0x5c>)
      bBuffer_t *msg = bAlloc(MSG_LEN);
      msg->size = sizeof(msg_92_t);
      msg_92_t *data = (void *)msg->data;
      memset(data, 0, MSG_LEN);
      data->kod = 0x92;
      data->kondPom = spkSet;
 801a812:	7566      	strb	r6, [r4, #21]
      data->signalType = audioOutputType[mapFreq(pipe->inFreq)][pipe->outputFormat];
 801a814:	2250      	movs	r2, #80	; 0x50
 801a816:	fb02 3205 	mla	r2, r2, r5, r3
 801a81a:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 801a81c:	f7fb fa4a 	bl	8015cb4 <mapFreq>
 801a820:	490b      	ldr	r1, [pc, #44]	; (801a850 <sendStreamInfoSpkPipe.part.2+0x60>)
 801a822:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 801a826:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 801a82a:	4408      	add	r0, r1
 801a82c:	4403      	add	r3, r0
      data->outputType = (pipe->outputMode == OM_RADIO)?1:2;
      msgGenSend(msg);
 801a82e:	4620      	mov	r0, r4
      msg->size = sizeof(msg_92_t);
      msg_92_t *data = (void *)msg->data;
      memset(data, 0, MSG_LEN);
      data->kod = 0x92;
      data->kondPom = spkSet;
      data->signalType = audioOutputType[mapFreq(pipe->inFreq)][pipe->outputFormat];
 801a830:	f893 33e4 	ldrb.w	r3, [r3, #996]	; 0x3e4
 801a834:	75a3      	strb	r3, [r4, #22]
      data->outputType = (pipe->outputMode == OM_RADIO)?1:2;
 801a836:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	bf0c      	ite	eq
 801a83e:	2301      	moveq	r3, #1
 801a840:	2302      	movne	r3, #2
 801a842:	75e3      	strb	r3, [r4, #23]
      msgGenSend(msg);
    }
}
 801a844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      memset(data, 0, MSG_LEN);
      data->kod = 0x92;
      data->kondPom = spkSet;
      data->signalType = audioOutputType[mapFreq(pipe->inFreq)][pipe->outputFormat];
      data->outputType = (pipe->outputMode == OM_RADIO)?1:2;
      msgGenSend(msg);
 801a848:	f7ee bb98 	b.w	8008f7c <msgGenSend>
 801a84c:	100024f4 	.word	0x100024f4
 801a850:	0803f04c 	.word	0x0803f04c

0801a854 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 801a854:	4801      	ldr	r0, [pc, #4]	; (801a85c <OTG_HS_IRQHandler+0x8>)
 801a856:	f000 b8bb 	b.w	801a9d0 <HAL_PCD_IRQHandler>
 801a85a:	bf00      	nop
 801a85c:	100036e4 	.word	0x100036e4

0801a860 <libUSBStartup>:

/* USER CODE END 0 */
int externalPhy = 0;
int libUSBStartup(int ulpi);
int libUSBStartup(int ulpi)
{
 801a860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  externalPhy = ulpi;
 801a862:	4b19      	ldr	r3, [pc, #100]	; (801a8c8 <libUSBStartup+0x68>)
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801a864:	2200      	movs	r2, #0
/* USER CODE END 0 */
int externalPhy = 0;
int libUSBStartup(int ulpi);
int libUSBStartup(int ulpi)
{
  externalPhy = ulpi;
 801a866:	6018      	str	r0, [r3, #0]
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801a868:	4b18      	ldr	r3, [pc, #96]	; (801a8cc <libUSBStartup+0x6c>)
 801a86a:	9200      	str	r2, [sp, #0]
 801a86c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801a86e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 801a872:	6319      	str	r1, [r3, #48]	; 0x30
 801a874:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801a876:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801a87a:	9100      	str	r1, [sp, #0]
 801a87c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801a87e:	9201      	str	r2, [sp, #4]
 801a880:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801a882:	f041 0104 	orr.w	r1, r1, #4
 801a886:	6319      	str	r1, [r3, #48]	; 0x30
 801a888:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801a88a:	f001 0104 	and.w	r1, r1, #4
 801a88e:	9101      	str	r1, [sp, #4]
 801a890:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801a892:	9202      	str	r2, [sp, #8]
 801a894:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801a896:	f041 0101 	orr.w	r1, r1, #1
 801a89a:	6319      	str	r1, [r3, #48]	; 0x30
 801a89c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801a89e:	f001 0101 	and.w	r1, r1, #1
 801a8a2:	9102      	str	r1, [sp, #8]
 801a8a4:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801a8a6:	9203      	str	r2, [sp, #12]
 801a8a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a8aa:	f042 0202 	orr.w	r2, r2, #2
 801a8ae:	631a      	str	r2, [r3, #48]	; 0x30
 801a8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8b2:	f003 0302 	and.w	r3, r3, #2
 801a8b6:	9303      	str	r3, [sp, #12]
 801a8b8:	9b03      	ldr	r3, [sp, #12]
  /* Configure the system clock */
  //  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USB_DEVICE_Init();
 801a8ba:	f001 fb91 	bl	801bfe0 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE END 3 */
  return 1;
}
 801a8be:	2001      	movs	r0, #1
 801a8c0:	b005      	add	sp, #20
 801a8c2:	f85d fb04 	ldr.w	pc, [sp], #4
 801a8c6:	bf00      	nop
 801a8c8:	10002e8c 	.word	0x10002e8c
 801a8cc:	40023800 	.word	0x40023800

0801a8d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 801a8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 801a8d2:	4606      	mov	r6, r0
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 801a8d4:	b08b      	sub	sp, #44	; 0x2c
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 801a8d6:	2800      	cmp	r0, #0
 801a8d8:	d062      	beq.n	801a9a0 <HAL_PCD_Init+0xd0>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 801a8da:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 801a8dc:	4634      	mov	r4, r6
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 801a8de:	f880 3381 	strb.w	r3, [r0, #897]	; 0x381
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 801a8e2:	f001 fb93 	bl	801c00c <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 801a8e6:	f854 0b10 	ldr.w	r0, [r4], #16
 801a8ea:	f000 fc7d 	bl	801b1e8 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 801a8ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a8f0:	466d      	mov	r5, sp
 801a8f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a8f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a8f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a8f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a8fc:	e885 0003 	stmia.w	r5, {r0, r1}
 801a900:	1d37      	adds	r7, r6, #4
 801a902:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 801a906:	6830      	ldr	r0, [r6, #0]
 801a908:	f000 fc32 	bl	801b170 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 801a90c:	2100      	movs	r1, #0
 801a90e:	6830      	ldr	r0, [r6, #0]
 801a910:	f000 fc70 	bl	801b1f4 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 801a914:	2100      	movs	r1, #0
 801a916:	4633      	mov	r3, r6
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 801a918:	4632      	mov	r2, r6
 801a91a:	f106 0410 	add.w	r4, r6, #16
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 801a91e:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801a920:	4608      	mov	r0, r1
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
   hpcd->IN_ep[i].num = i;
 801a922:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 801a926:	87d1      	strh	r1, [r2, #62]	; 0x3e
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 801a928:	3101      	adds	r1, #1
 801a92a:	290f      	cmp	r1, #15
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 801a92c:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801a930:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 801a934:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 801a936:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 801a938:	64d0      	str	r0, [r2, #76]	; 0x4c
 801a93a:	f102 021c 	add.w	r2, r2, #28
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 801a93e:	d1f0      	bne.n	801a922 <HAL_PCD_Init+0x52>
 801a940:	2200      	movs	r2, #0
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 801a942:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].num = i;
 801a944:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
   hpcd->IN_ep[i].tx_fifo_num = i;
 801a948:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 801a94a:	f883 11dd 	strb.w	r1, [r3, #477]	; 0x1dd
   hpcd->OUT_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801a94e:	f883 11df 	strb.w	r1, [r3, #479]	; 0x1df
   hpcd->OUT_ep[i].maxpacket = 0U;
 801a952:	f8c3 11e4 	str.w	r1, [r3, #484]	; 0x1e4
   hpcd->OUT_ep[i].xfer_buff = 0U;
 801a956:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0U;
 801a95a:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 801a95e:	6830      	ldr	r0, [r6, #0]
 801a960:	f102 0540 	add.w	r5, r2, #64	; 0x40
 801a964:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 801a968:	3201      	adds	r2, #1
 801a96a:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 801a96c:	6041      	str	r1, [r0, #4]
 801a96e:	f103 031c 	add.w	r3, r3, #28
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 801a972:	d1e7      	bne.n	801a944 <HAL_PCD_Init+0x74>
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 801a974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a976:	466d      	mov	r5, sp
 801a978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a97a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a97c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a97e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a982:	e885 0003 	stmia.w	r5, {r0, r1}
 801a986:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 801a98a:	6830      	ldr	r0, [r6, #0]
 801a98c:	f000 fc48 	bl	801b220 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 801a990:	2301      	movs	r3, #1
 801a992:	f886 3381 	strb.w	r3, [r6, #897]	; 0x381
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 801a996:	6830      	ldr	r0, [r6, #0]
 801a998:	f000 ffeb 	bl	801b972 <USB_DevDisconnect>
 return HAL_OK;
 801a99c:	2000      	movs	r0, #0
 801a99e:	e000      	b.n	801a9a2 <HAL_PCD_Init+0xd2>
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 801a9a0:	2001      	movs	r0, #1
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 return HAL_OK;
}
 801a9a2:	b00b      	add	sp, #44	; 0x2c
 801a9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a9a6 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 801a9a6:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 801a9a8:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 801a9ac:	2b01      	cmp	r3, #1
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 801a9ae:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 801a9b0:	d00c      	beq.n	801a9cc <HAL_PCD_Start+0x26>
 801a9b2:	2301      	movs	r3, #1
 801a9b4:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  USB_DevConnect (hpcd->Instance);  
 801a9b8:	6800      	ldr	r0, [r0, #0]
 801a9ba:	f000 ffce 	bl	801b95a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 801a9be:	6820      	ldr	r0, [r4, #0]
 801a9c0:	f000 fc0c 	bl	801b1dc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 801a9c4:	2000      	movs	r0, #0
 801a9c6:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 801a9ca:	bd10      	pop	{r4, pc}
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 801a9cc:	2002      	movs	r0, #2
  USB_DevConnect (hpcd->Instance);  
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd); 
  return HAL_OK;
}
 801a9ce:	bd10      	pop	{r4, pc}

0801a9d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801a9d4:	f8d0 a000 	ldr.w	sl, [r0]
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801a9d8:	b087      	sub	sp, #28
 801a9da:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801a9dc:	4650      	mov	r0, sl
 801a9de:	f001 f802 	bl	801b9e6 <USB_GetMode>
 801a9e2:	2800      	cmp	r0, #0
 801a9e4:	f040 8277 	bne.w	801aed6 <HAL_PCD_IRQHandler+0x506>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 801a9e8:	6820      	ldr	r0, [r4, #0]
 801a9ea:	f000 ffce 	bl	801b98a <USB_ReadInterrupts>
 801a9ee:	2800      	cmp	r0, #0
 801a9f0:	f000 8271 	beq.w	801aed6 <HAL_PCD_IRQHandler+0x506>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 801a9f4:	6820      	ldr	r0, [r4, #0]
 801a9f6:	f000 ffc8 	bl	801b98a <USB_ReadInterrupts>
 801a9fa:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801a9fc:	bf41      	itttt	mi
 801a9fe:	6822      	ldrmi	r2, [r4, #0]
 801aa00:	6953      	ldrmi	r3, [r2, #20]
 801aa02:	f003 0302 	andmi.w	r3, r3, #2
 801aa06:	6153      	strmi	r3, [r2, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801aa08:	6820      	ldr	r0, [r4, #0]
 801aa0a:	f000 ffbe 	bl	801b98a <USB_ReadInterrupts>
 801aa0e:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 801aa12:	d04a      	beq.n	801aaaa <HAL_PCD_IRQHandler+0xda>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801aa14:	6820      	ldr	r0, [r4, #0]
 801aa16:	f000 ffbc 	bl	801b992 <USB_ReadDevAllOutEpInterrupt>
 801aa1a:	f50a 6630 	add.w	r6, sl, #2816	; 0xb00
 801aa1e:	4607      	mov	r7, r0
 801aa20:	46a1      	mov	r9, r4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;
 801aa22:	2500      	movs	r5, #0
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
      
      while ( ep_intr )
 801aa24:	2f00      	cmp	r7, #0
 801aa26:	d041      	beq.n	801aaac <HAL_PCD_IRQHandler+0xdc>
      {
        if (ep_intr & 0x1U)
 801aa28:	07f8      	lsls	r0, r7, #31
 801aa2a:	d538      	bpl.n	801aa9e <HAL_PCD_IRQHandler+0xce>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 801aa2c:	fa5f fb85 	uxtb.w	fp, r5
 801aa30:	4659      	mov	r1, fp
 801aa32:	6820      	ldr	r0, [r4, #0]
 801aa34:	f000 ffbd 	bl	801b9b2 <USB_ReadDevOutEPInterrupt>
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801aa38:	f010 0f01 	tst.w	r0, #1
      
      while ( ep_intr )
      {
        if (ep_intr & 0x1U)
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 801aa3c:	4680      	mov	r8, r0
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801aa3e:	d021      	beq.n	801aa84 <HAL_PCD_IRQHandler+0xb4>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801aa40:	2301      	movs	r3, #1
 801aa42:	60b3      	str	r3, [r6, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 801aa44:	6921      	ldr	r1, [r4, #16]
 801aa46:	4299      	cmp	r1, r3
 801aa48:	d10c      	bne.n	801aa64 <HAL_PCD_IRQHandler+0x94>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 801aa4a:	6931      	ldr	r1, [r6, #16]
 801aa4c:	f8d9 01e4 	ldr.w	r0, [r9, #484]	; 0x1e4
 801aa50:	f3c1 0112 	ubfx	r1, r1, #0, #19
 801aa54:	1a41      	subs	r1, r0, r1
 801aa56:	f8c9 11f4 	str.w	r1, [r9, #500]	; 0x1f4
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 801aa5a:	f8d9 11e8 	ldr.w	r1, [r9, #488]	; 0x1e8
 801aa5e:	4408      	add	r0, r1
 801aa60:	f8c9 01e8 	str.w	r0, [r9, #488]	; 0x1e8
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 801aa64:	4659      	mov	r1, fp
 801aa66:	4620      	mov	r0, r4
 801aa68:	f001 fb40 	bl	801c0ec <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 801aa6c:	6921      	ldr	r1, [r4, #16]
 801aa6e:	2901      	cmp	r1, #1
 801aa70:	d108      	bne.n	801aa84 <HAL_PCD_IRQHandler+0xb4>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801aa72:	b93d      	cbnz	r5, 801aa84 <HAL_PCD_IRQHandler+0xb4>
 801aa74:	f8d4 21f0 	ldr.w	r2, [r4, #496]	; 0x1f0
 801aa78:	b922      	cbnz	r2, 801aa84 <HAL_PCD_IRQHandler+0xb4>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801aa7a:	f504 7261 	add.w	r2, r4, #900	; 0x384
 801aa7e:	6820      	ldr	r0, [r4, #0]
 801aa80:	f000 ffd0 	bl	801ba24 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801aa84:	f018 0f08 	tst.w	r8, #8
 801aa88:	d004      	beq.n	801aa94 <HAL_PCD_IRQHandler+0xc4>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 801aa8a:	4620      	mov	r0, r4
 801aa8c:	f001 fb28 	bl	801c0e0 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801aa90:	2308      	movs	r3, #8
 801aa92:	60b3      	str	r3, [r6, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801aa94:	f018 0f10 	tst.w	r8, #16
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801aa98:	bf1c      	itt	ne
 801aa9a:	2310      	movne	r3, #16
 801aa9c:	60b3      	strne	r3, [r6, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 801aa9e:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 801aaa0:	087f      	lsrs	r7, r7, #1
 801aaa2:	3620      	adds	r6, #32
 801aaa4:	f109 091c 	add.w	r9, r9, #28
 801aaa8:	e7bc      	b.n	801aa24 <HAL_PCD_IRQHandler+0x54>
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 801aaaa:	4605      	mov	r5, r0
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801aaac:	6820      	ldr	r0, [r4, #0]
 801aaae:	f000 ff6c 	bl	801b98a <USB_ReadInterrupts>
 801aab2:	0341      	lsls	r1, r0, #13
 801aab4:	f140 809b 	bpl.w	801abee <HAL_PCD_IRQHandler+0x21e>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801aab8:	6820      	ldr	r0, [r4, #0]
 801aaba:	f000 ff72 	bl	801b9a2 <USB_ReadDevAllInEpInterrupt>
 801aabe:	4626      	mov	r6, r4
 801aac0:	9003      	str	r0, [sp, #12]
 801aac2:	f50a 6810 	add.w	r8, sl, #2304	; 0x900
      
      epnum = 0U;
 801aac6:	2500      	movs	r5, #0
      
      while ( ep_intr )
 801aac8:	9b03      	ldr	r3, [sp, #12]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	f000 808f 	beq.w	801abee <HAL_PCD_IRQHandler+0x21e>
      {
        if (ep_intr & 0x1U) /* In ITR */
 801aad0:	9b03      	ldr	r3, [sp, #12]
 801aad2:	07da      	lsls	r2, r3, #31
 801aad4:	f140 8083 	bpl.w	801abde <HAL_PCD_IRQHandler+0x20e>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 801aad8:	fa5f f985 	uxtb.w	r9, r5
 801aadc:	4649      	mov	r1, r9
 801aade:	6820      	ldr	r0, [r4, #0]
 801aae0:	f000 ff71 	bl	801b9c6 <USB_ReadDevInEPInterrupt>

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801aae4:	07c3      	lsls	r3, r0, #31
      
      while ( ep_intr )
      {
        if (ep_intr & 0x1U) /* In ITR */
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 801aae6:	4607      	mov	r7, r0

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801aae8:	d520      	bpl.n	801ab2c <HAL_PCD_IRQHandler+0x15c>
          {
            fifoemptymsk = 0x1U << epnum;
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801aaea:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
 801aaee:	2101      	movs	r1, #1
 801aaf0:	40a9      	lsls	r1, r5
 801aaf2:	ea23 0301 	bic.w	r3, r3, r1
 801aaf6:	f8ca 3834 	str.w	r3, [sl, #2100]	; 0x834
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801aafa:	2301      	movs	r3, #1
 801aafc:	f8c8 3008 	str.w	r3, [r8, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 801ab00:	6923      	ldr	r3, [r4, #16]
 801ab02:	2b01      	cmp	r3, #1
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 801ab04:	bf01      	itttt	eq
 801ab06:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 801ab08:	6c33      	ldreq	r3, [r6, #64]	; 0x40
 801ab0a:	189b      	addeq	r3, r3, r2
 801ab0c:	6473      	streq	r3, [r6, #68]	; 0x44
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 801ab0e:	4649      	mov	r1, r9
 801ab10:	4620      	mov	r0, r4
 801ab12:	f001 faf4 	bl	801c0fe <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 801ab16:	6921      	ldr	r1, [r4, #16]
 801ab18:	2901      	cmp	r1, #1
 801ab1a:	d107      	bne.n	801ab2c <HAL_PCD_IRQHandler+0x15c>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801ab1c:	b935      	cbnz	r5, 801ab2c <HAL_PCD_IRQHandler+0x15c>
 801ab1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801ab20:	b923      	cbnz	r3, 801ab2c <HAL_PCD_IRQHandler+0x15c>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801ab22:	f504 7261 	add.w	r2, r4, #900	; 0x384
 801ab26:	6820      	ldr	r0, [r4, #0]
 801ab28:	f000 ff7c 	bl	801ba24 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801ab2c:	0738      	lsls	r0, r7, #28
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801ab2e:	bf44      	itt	mi
 801ab30:	2308      	movmi	r3, #8
 801ab32:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801ab36:	06f9      	lsls	r1, r7, #27
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801ab38:	bf44      	itt	mi
 801ab3a:	2310      	movmi	r3, #16
 801ab3c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801ab40:	067a      	lsls	r2, r7, #25
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801ab42:	bf44      	itt	mi
 801ab44:	2340      	movmi	r3, #64	; 0x40
 801ab46:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801ab4a:	07bb      	lsls	r3, r7, #30
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801ab4c:	bf44      	itt	mi
 801ab4e:	2302      	movmi	r3, #2
 801ab50:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801ab54:	063f      	lsls	r7, r7, #24
 801ab56:	d542      	bpl.n	801abde <HAL_PCD_IRQHandler+0x20e>
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 801ab58:	6823      	ldr	r3, [r4, #0]
 801ab5a:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 801ab5c:	6d37      	ldr	r7, [r6, #80]	; 0x50
 801ab5e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 801ab60:	1bdb      	subs	r3, r3, r7
  
  if (len > ep->maxpacket)
 801ab62:	6c37      	ldr	r7, [r6, #64]	; 0x40
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 801ab64:	429f      	cmp	r7, r3
 801ab66:	bf28      	it	cs
 801ab68:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 801ab6a:	9b04      	ldr	r3, [sp, #16]
 801ab6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3U) / 4U;
 801ab70:	f107 0b03 	add.w	fp, r7, #3
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 801ab74:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3U) / 4U;
 801ab78:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 801ab7c:	9305      	str	r3, [sp, #20]
 801ab7e:	9b05      	ldr	r3, [sp, #20]
 801ab80:	699b      	ldr	r3, [r3, #24]
 801ab82:	b29b      	uxth	r3, r3
 801ab84:	455b      	cmp	r3, fp
 801ab86:	d80c      	bhi.n	801aba2 <HAL_PCD_IRQHandler+0x1d2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 801ab88:	bb4f      	cbnz	r7, 801abde <HAL_PCD_IRQHandler+0x20e>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801ab8a:	9b04      	ldr	r3, [sp, #16]
 801ab8c:	2201      	movs	r2, #1
 801ab8e:	f503 6900 	add.w	r9, r3, #2048	; 0x800
 801ab92:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 801ab96:	40aa      	lsls	r2, r5
 801ab98:	ea23 0302 	bic.w	r3, r3, r2
 801ab9c:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 801aba0:	e01d      	b.n	801abde <HAL_PCD_IRQHandler+0x20e>
  
  
  len32b = (len + 3U) / 4U;
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
          ep->xfer_count < ep->xfer_len &&
 801aba2:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801aba4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 801aba6:	4293      	cmp	r3, r2
 801aba8:	d9ee      	bls.n	801ab88 <HAL_PCD_IRQHandler+0x1b8>
          ep->xfer_count < ep->xfer_len &&
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d0ec      	beq.n	801ab88 <HAL_PCD_IRQHandler+0x1b8>
            ep->xfer_len != 0U)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
    
    if (len > ep->maxpacket)
 801abae:	6c37      	ldr	r7, [r6, #64]	; 0x40
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 801abb0:	9804      	ldr	r0, [sp, #16]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0U)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801abb2:	1a9b      	subs	r3, r3, r2
 801abb4:	429f      	cmp	r7, r3
 801abb6:	bf28      	it	cs
 801abb8:	461f      	movcs	r7, r3
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 801abba:	7c23      	ldrb	r3, [r4, #16]
 801abbc:	9300      	str	r3, [sp, #0]
 801abbe:	464a      	mov	r2, r9
 801abc0:	b2bb      	uxth	r3, r7
 801abc2:	6c71      	ldr	r1, [r6, #68]	; 0x44
 801abc4:	f000 fe48 	bl	801b858 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 801abc8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801abca:	443b      	add	r3, r7
 801abcc:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 801abce:	6d33      	ldr	r3, [r6, #80]	; 0x50
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 801abd0:	f107 0b03 	add.w	fp, r7, #3
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
 801abd4:	443b      	add	r3, r7
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 801abd6:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
 801abda:	6533      	str	r3, [r6, #80]	; 0x50
 801abdc:	e7cf      	b.n	801ab7e <HAL_PCD_IRQHandler+0x1ae>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
          }
        }
        epnum++;
        ep_intr >>= 1U;
 801abde:	9b03      	ldr	r3, [sp, #12]
 801abe0:	085b      	lsrs	r3, r3, #1
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
          }
        }
        epnum++;
 801abe2:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 801abe4:	9303      	str	r3, [sp, #12]
 801abe6:	361c      	adds	r6, #28
 801abe8:	f108 0820 	add.w	r8, r8, #32
 801abec:	e76c      	b.n	801aac8 <HAL_PCD_IRQHandler+0xf8>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801abee:	6820      	ldr	r0, [r4, #0]
 801abf0:	f000 fecb 	bl	801b98a <USB_ReadInterrupts>
 801abf4:	2800      	cmp	r0, #0
 801abf6:	da0d      	bge.n	801ac14 <HAL_PCD_IRQHandler+0x244>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801abf8:	f8da 3804 	ldr.w	r3, [sl, #2052]	; 0x804
 801abfc:	f023 0301 	bic.w	r3, r3, #1
 801ac00:	f8ca 3804 	str.w	r3, [sl, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 801ac04:	4620      	mov	r0, r4
 801ac06:	f001 faaf 	bl	801c168 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801ac0a:	6822      	ldr	r2, [r4, #0]
 801ac0c:	6953      	ldr	r3, [r2, #20]
 801ac0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ac12:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801ac14:	6820      	ldr	r0, [r4, #0]
 801ac16:	f000 feb8 	bl	801b98a <USB_ReadInterrupts>
 801ac1a:	0506      	lsls	r6, r0, #20
 801ac1c:	d50b      	bpl.n	801ac36 <HAL_PCD_IRQHandler+0x266>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801ac1e:	f8da 3808 	ldr.w	r3, [sl, #2056]	; 0x808
 801ac22:	07d8      	lsls	r0, r3, #31
 801ac24:	d502      	bpl.n	801ac2c <HAL_PCD_IRQHandler+0x25c>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 801ac26:	4620      	mov	r0, r4
 801ac28:	f001 fa86 	bl	801c138 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801ac2c:	6822      	ldr	r2, [r4, #0]
 801ac2e:	6953      	ldr	r3, [r2, #20]
 801ac30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ac34:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801ac36:	6820      	ldr	r0, [r4, #0]
 801ac38:	f000 fea7 	bl	801b98a <USB_ReadInterrupts>
 801ac3c:	04c1      	lsls	r1, r0, #19
 801ac3e:	d543      	bpl.n	801acc8 <HAL_PCD_IRQHandler+0x2f8>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 801ac40:	f50a 6600 	add.w	r6, sl, #2048	; 0x800
 801ac44:	6873      	ldr	r3, [r6, #4]
 801ac46:	f023 0301 	bic.w	r3, r3, #1
 801ac4a:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0U);
 801ac4c:	2100      	movs	r1, #0
 801ac4e:	6820      	ldr	r0, [r4, #0]
 801ac50:	f000 fb80 	bl	801b354 <USB_FlushTxFifo>
 801ac54:	f50a 6310 	add.w	r3, sl, #2304	; 0x900
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801ac58:	2200      	movs	r2, #0
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 801ac5a:	21ff      	movs	r1, #255	; 0xff
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801ac5c:	6860      	ldr	r0, [r4, #4]
 801ac5e:	4282      	cmp	r2, r0
 801ac60:	d205      	bcs.n	801ac6e <HAL_PCD_IRQHandler+0x29e>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 801ac62:	6099      	str	r1, [r3, #8]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801ac64:	3201      	adds	r2, #1
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 801ac66:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
 801ac6a:	3320      	adds	r3, #32
 801ac6c:	e7f6      	b.n	801ac5c <HAL_PCD_IRQHandler+0x28c>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 801ac6e:	f04f 33ff 	mov.w	r3, #4294967295
 801ac72:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801ac74:	69f3      	ldr	r3, [r6, #28]
 801ac76:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801ac7a:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 801ac7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ac7e:	b153      	cbz	r3, 801ac96 <HAL_PCD_IRQHandler+0x2c6>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 801ac80:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 801ac84:	f043 030b 	orr.w	r3, r3, #11
 801ac88:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 801ac8c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801ac8e:	f043 030b 	orr.w	r3, r3, #11
 801ac92:	6473      	str	r3, [r6, #68]	; 0x44
 801ac94:	e007      	b.n	801aca6 <HAL_PCD_IRQHandler+0x2d6>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 801ac96:	6973      	ldr	r3, [r6, #20]
 801ac98:	f043 030b 	orr.w	r3, r3, #11
 801ac9c:	6173      	str	r3, [r6, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 801ac9e:	6933      	ldr	r3, [r6, #16]
 801aca0:	f043 030b 	orr.w	r3, r3, #11
 801aca4:	6133      	str	r3, [r6, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801aca6:	f8da 3800 	ldr.w	r3, [sl, #2048]	; 0x800
 801acaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801acae:	f8ca 3800 	str.w	r3, [sl, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801acb2:	f504 7261 	add.w	r2, r4, #900	; 0x384
 801acb6:	7c21      	ldrb	r1, [r4, #16]
 801acb8:	6820      	ldr	r0, [r4, #0]
 801acba:	f000 feb3 	bl	801ba24 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801acbe:	6822      	ldr	r2, [r4, #0]
 801acc0:	6953      	ldr	r3, [r2, #20]
 801acc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801acc6:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801acc8:	6820      	ldr	r0, [r4, #0]
 801acca:	f000 fe5e 	bl	801b98a <USB_ReadInterrupts>
 801acce:	0482      	lsls	r2, r0, #18
 801acd0:	d57d      	bpl.n	801adce <HAL_PCD_IRQHandler+0x3fe>
    {
      USB_ActivateSetup(hpcd->Instance);
 801acd2:	6820      	ldr	r0, [r4, #0]
 801acd4:	f000 fe8b 	bl	801b9ee <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801acd8:	6822      	ldr	r2, [r4, #0]
 801acda:	68d3      	ldr	r3, [r2, #12]
 801acdc:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 801ace0:	60d3      	str	r3, [r2, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 801ace2:	6820      	ldr	r0, [r4, #0]
 801ace4:	f000 fb5f 	bl	801b3a6 <USB_GetDevSpeed>
 801ace8:	b948      	cbnz	r0, 801acfe <HAL_PCD_IRQHandler+0x32e>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 801acea:	f44f 7300 	mov.w	r3, #512	; 0x200
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 801acee:	6822      	ldr	r2, [r4, #0]
      USB_ActivateSetup(hpcd->Instance);
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 801acf0:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 801acf2:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 801acf4:	68d3      	ldr	r3, [r2, #12]
 801acf6:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 801acfa:	60d3      	str	r3, [r2, #12]
 801acfc:	e05f      	b.n	801adbe <HAL_PCD_IRQHandler+0x3ee>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 801acfe:	2303      	movs	r3, #3
 801ad00:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 801ad02:	2340      	movs	r3, #64	; 0x40
 801ad04:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 801ad06:	f000 fec9 	bl	801ba9c <HAL_RCC_GetHCLKFreq>
		
        if((hclk >= 14200000)&&(hclk < 15000000))
 801ad0a:	4b74      	ldr	r3, [pc, #464]	; (801aedc <HAL_PCD_IRQHandler+0x50c>)
 801ad0c:	4a74      	ldr	r2, [pc, #464]	; (801aee0 <HAL_PCD_IRQHandler+0x510>)
 801ad0e:	4403      	add	r3, r0
 801ad10:	4293      	cmp	r3, r2
 801ad12:	6823      	ldr	r3, [r4, #0]
 801ad14:	d803      	bhi.n	801ad1e <HAL_PCD_IRQHandler+0x34e>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 801ad16:	68da      	ldr	r2, [r3, #12]
 801ad18:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 801ad1c:	e04e      	b.n	801adbc <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 15000000)&&(hclk < 16000000))
 801ad1e:	4a71      	ldr	r2, [pc, #452]	; (801aee4 <HAL_PCD_IRQHandler+0x514>)
 801ad20:	4971      	ldr	r1, [pc, #452]	; (801aee8 <HAL_PCD_IRQHandler+0x518>)
 801ad22:	4402      	add	r2, r0
 801ad24:	428a      	cmp	r2, r1
 801ad26:	d803      	bhi.n	801ad30 <HAL_PCD_IRQHandler+0x360>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 801ad28:	68da      	ldr	r2, [r3, #12]
 801ad2a:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 801ad2e:	e045      	b.n	801adbc <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 16000000)&&(hclk < 17200000))
 801ad30:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 801ad34:	496d      	ldr	r1, [pc, #436]	; (801aeec <HAL_PCD_IRQHandler+0x51c>)
 801ad36:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 801ad3a:	428a      	cmp	r2, r1
 801ad3c:	d803      	bhi.n	801ad46 <HAL_PCD_IRQHandler+0x376>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 801ad3e:	68da      	ldr	r2, [r3, #12]
 801ad40:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 801ad44:	e03a      	b.n	801adbc <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 17200000)&&(hclk < 18500000))
 801ad46:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 801ad4a:	4969      	ldr	r1, [pc, #420]	; (801aef0 <HAL_PCD_IRQHandler+0x520>)
 801ad4c:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 801ad50:	428a      	cmp	r2, r1
 801ad52:	d803      	bhi.n	801ad5c <HAL_PCD_IRQHandler+0x38c>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 801ad54:	68da      	ldr	r2, [r3, #12]
 801ad56:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 801ad5a:	e02f      	b.n	801adbc <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 18500000)&&(hclk < 20000000))
 801ad5c:	4a65      	ldr	r2, [pc, #404]	; (801aef4 <HAL_PCD_IRQHandler+0x524>)
 801ad5e:	4966      	ldr	r1, [pc, #408]	; (801aef8 <HAL_PCD_IRQHandler+0x528>)
 801ad60:	4402      	add	r2, r0
 801ad62:	428a      	cmp	r2, r1
 801ad64:	d803      	bhi.n	801ad6e <HAL_PCD_IRQHandler+0x39e>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 801ad66:	68da      	ldr	r2, [r3, #12]
 801ad68:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 801ad6c:	e026      	b.n	801adbc <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 20000000)&&(hclk < 21800000))
 801ad6e:	4a63      	ldr	r2, [pc, #396]	; (801aefc <HAL_PCD_IRQHandler+0x52c>)
 801ad70:	4963      	ldr	r1, [pc, #396]	; (801af00 <HAL_PCD_IRQHandler+0x530>)
 801ad72:	4402      	add	r2, r0
 801ad74:	428a      	cmp	r2, r1
 801ad76:	d803      	bhi.n	801ad80 <HAL_PCD_IRQHandler+0x3b0>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 801ad78:	68da      	ldr	r2, [r3, #12]
 801ad7a:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 801ad7e:	e01d      	b.n	801adbc <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 21800000)&&(hclk < 24000000))
 801ad80:	4a60      	ldr	r2, [pc, #384]	; (801af04 <HAL_PCD_IRQHandler+0x534>)
 801ad82:	4961      	ldr	r1, [pc, #388]	; (801af08 <HAL_PCD_IRQHandler+0x538>)
 801ad84:	4402      	add	r2, r0
 801ad86:	428a      	cmp	r2, r1
 801ad88:	d803      	bhi.n	801ad92 <HAL_PCD_IRQHandler+0x3c2>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 801ad8a:	68da      	ldr	r2, [r3, #12]
 801ad8c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 801ad90:	e014      	b.n	801adbc <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 24000000)&&(hclk < 27700000))
 801ad92:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 801ad96:	495d      	ldr	r1, [pc, #372]	; (801af0c <HAL_PCD_IRQHandler+0x53c>)
 801ad98:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 801ad9c:	428a      	cmp	r2, r1
 801ad9e:	d803      	bhi.n	801ada8 <HAL_PCD_IRQHandler+0x3d8>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 801ada0:	68da      	ldr	r2, [r3, #12]
 801ada2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ada6:	e009      	b.n	801adbc <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 27700000)&&(hclk < 32000000))
 801ada8:	4a59      	ldr	r2, [pc, #356]	; (801af10 <HAL_PCD_IRQHandler+0x540>)
 801adaa:	495a      	ldr	r1, [pc, #360]	; (801af14 <HAL_PCD_IRQHandler+0x544>)
 801adac:	4402      	add	r2, r0
 801adae:	428a      	cmp	r2, r1
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 801adb0:	68da      	ldr	r2, [r3, #12]
 801adb2:	bf94      	ite	ls
 801adb4:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 801adb8:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 801adbc:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 801adbe:	4620      	mov	r0, r4
 801adc0:	f001 f9a9 	bl	801c116 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801adc4:	6822      	ldr	r2, [r4, #0]
 801adc6:	6953      	ldr	r3, [r2, #20]
 801adc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801adcc:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801adce:	6820      	ldr	r0, [r4, #0]
 801add0:	f000 fddb 	bl	801b98a <USB_ReadInterrupts>
 801add4:	06c3      	lsls	r3, r0, #27
 801add6:	d538      	bpl.n	801ae4a <HAL_PCD_IRQHandler+0x47a>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801add8:	6822      	ldr	r2, [r4, #0]
 801adda:	6993      	ldr	r3, [r2, #24]
 801addc:	f023 0310 	bic.w	r3, r3, #16
 801ade0:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 801ade2:	f8da 6020 	ldr.w	r6, [sl, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 801ade6:	f3c6 4343 	ubfx	r3, r6, #17, #4
 801adea:	2b02      	cmp	r3, #2
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
      
      temp = USBx->GRXSTSP;
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 801adec:	f006 070f 	and.w	r7, r6, #15
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 801adf0:	d114      	bne.n	801ae1c <HAL_PCD_IRQHandler+0x44c>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 801adf2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 801adf6:	4033      	ands	r3, r6
 801adf8:	b313      	cbz	r3, 801ae40 <HAL_PCD_IRQHandler+0x470>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 801adfa:	231c      	movs	r3, #28
 801adfc:	fb03 4707 	mla	r7, r3, r7, r4
 801ae00:	f3c6 160a 	ubfx	r6, r6, #4, #11
 801ae04:	4632      	mov	r2, r6
 801ae06:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 801ae0a:	4650      	mov	r0, sl
 801ae0c:	f000 fd38 	bl	801b880 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 801ae10:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801ae14:	4433      	add	r3, r6
 801ae16:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 801ae1a:	e00c      	b.n	801ae36 <HAL_PCD_IRQHandler+0x466>
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 801ae1c:	2b06      	cmp	r3, #6
 801ae1e:	d10f      	bne.n	801ae40 <HAL_PCD_IRQHandler+0x470>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801ae20:	2208      	movs	r2, #8
 801ae22:	f504 7161 	add.w	r1, r4, #900	; 0x384
 801ae26:	4650      	mov	r0, sl
 801ae28:	f000 fd2a 	bl	801b880 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 801ae2c:	231c      	movs	r3, #28
 801ae2e:	fb03 4707 	mla	r7, r3, r7, r4
 801ae32:	f3c6 160a 	ubfx	r6, r6, #4, #11
 801ae36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801ae3a:	441e      	add	r6, r3
 801ae3c:	f8c7 61f4 	str.w	r6, [r7, #500]	; 0x1f4
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801ae40:	6822      	ldr	r2, [r4, #0]
 801ae42:	6993      	ldr	r3, [r2, #24]
 801ae44:	f043 0310 	orr.w	r3, r3, #16
 801ae48:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801ae4a:	6820      	ldr	r0, [r4, #0]
 801ae4c:	f000 fd9d 	bl	801b98a <USB_ReadInterrupts>
 801ae50:	0707      	lsls	r7, r0, #28
 801ae52:	d507      	bpl.n	801ae64 <HAL_PCD_IRQHandler+0x494>
    {
      HAL_PCD_SOFCallback(hpcd);
 801ae54:	4620      	mov	r0, r4
 801ae56:	f001 f95a 	bl	801c10e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801ae5a:	6822      	ldr	r2, [r4, #0]
 801ae5c:	6953      	ldr	r3, [r2, #20]
 801ae5e:	f003 0308 	and.w	r3, r3, #8
 801ae62:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801ae64:	6820      	ldr	r0, [r4, #0]
 801ae66:	f000 fd90 	bl	801b98a <USB_ReadInterrupts>
 801ae6a:	02c6      	lsls	r6, r0, #11
 801ae6c:	d508      	bpl.n	801ae80 <HAL_PCD_IRQHandler+0x4b0>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 801ae6e:	b2e9      	uxtb	r1, r5
 801ae70:	4620      	mov	r0, r4
 801ae72:	f001 f981 	bl	801c178 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801ae76:	6822      	ldr	r2, [r4, #0]
 801ae78:	6953      	ldr	r3, [r2, #20]
 801ae7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ae7e:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801ae80:	6820      	ldr	r0, [r4, #0]
 801ae82:	f000 fd82 	bl	801b98a <USB_ReadInterrupts>
 801ae86:	0280      	lsls	r0, r0, #10
 801ae88:	d508      	bpl.n	801ae9c <HAL_PCD_IRQHandler+0x4cc>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 801ae8a:	b2e9      	uxtb	r1, r5
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	f001 f96f 	bl	801c170 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801ae92:	6822      	ldr	r2, [r4, #0]
 801ae94:	6953      	ldr	r3, [r2, #20]
 801ae96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ae9a:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801ae9c:	6820      	ldr	r0, [r4, #0]
 801ae9e:	f000 fd74 	bl	801b98a <USB_ReadInterrupts>
 801aea2:	0041      	lsls	r1, r0, #1
 801aea4:	d507      	bpl.n	801aeb6 <HAL_PCD_IRQHandler+0x4e6>
    {
      HAL_PCD_ConnectCallback(hpcd);
 801aea6:	4620      	mov	r0, r4
 801aea8:	f001 f96a 	bl	801c180 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801aeac:	6822      	ldr	r2, [r4, #0]
 801aeae:	6953      	ldr	r3, [r2, #20]
 801aeb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801aeb4:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801aeb6:	6820      	ldr	r0, [r4, #0]
 801aeb8:	f000 fd67 	bl	801b98a <USB_ReadInterrupts>
 801aebc:	0742      	lsls	r2, r0, #29
 801aebe:	d50a      	bpl.n	801aed6 <HAL_PCD_IRQHandler+0x506>
    {
      temp = hpcd->Instance->GOTGINT;
 801aec0:	6823      	ldr	r3, [r4, #0]
 801aec2:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801aec4:	076b      	lsls	r3, r5, #29
 801aec6:	d502      	bpl.n	801aece <HAL_PCD_IRQHandler+0x4fe>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 801aec8:	4620      	mov	r0, r4
 801aeca:	f001 f95d 	bl	801c188 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 801aece:	6822      	ldr	r2, [r4, #0]
 801aed0:	6853      	ldr	r3, [r2, #4]
 801aed2:	432b      	orrs	r3, r5
 801aed4:	6053      	str	r3, [r2, #4]
    }
  }
}
 801aed6:	b007      	add	sp, #28
 801aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aedc:	ff275340 	.word	0xff275340
 801aee0:	000c34ff 	.word	0x000c34ff
 801aee4:	ff1b1e40 	.word	0xff1b1e40
 801aee8:	000f423f 	.word	0x000f423f
 801aeec:	00124f7f 	.word	0x00124f7f
 801aef0:	0013d61f 	.word	0x0013d61f
 801aef4:	fee5b660 	.word	0xfee5b660
 801aef8:	0016e35f 	.word	0x0016e35f
 801aefc:	feced300 	.word	0xfeced300
 801af00:	001b773f 	.word	0x001b773f
 801af04:	feb35bc0 	.word	0xfeb35bc0
 801af08:	002191bf 	.word	0x002191bf
 801af0c:	0038751f 	.word	0x0038751f
 801af10:	fe5954e0 	.word	0xfe5954e0
 801af14:	00419cdf 	.word	0x00419cdf

0801af18 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801af18:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 801af1a:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 801af1e:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801af20:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 801af22:	d009      	beq.n	801af38 <HAL_PCD_SetAddress+0x20>
 801af24:	2301      	movs	r3, #1
 801af26:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  USB_SetDevAddress(hpcd->Instance, address);
 801af2a:	6800      	ldr	r0, [r0, #0]
 801af2c:	f000 fd05 	bl	801b93a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 801af30:	2000      	movs	r0, #0
 801af32:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 801af36:	bd10      	pop	{r4, pc}
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd); 
 801af38:	2002      	movs	r0, #2
  USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 801af3a:	bd10      	pop	{r4, pc}

0801af3c <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 801af3c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 801af3e:	b24e      	sxtb	r6, r1
 801af40:	2e00      	cmp	r6, #0
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 801af42:	4604      	mov	r4, r0
 801af44:	f04f 051c 	mov.w	r5, #28
 801af48:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 801af4c:	bfb5      	itete	lt
 801af4e:	fb05 4100 	mlalt	r1, r5, r0, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 801af52:	fb05 4101 	mlage	r1, r5, r1, r4
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 801af56:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 801af58:	f501 71ee 	addge.w	r1, r1, #476	; 0x1dc
  }
  ep->num   = ep_addr & 0x7FU;
 801af5c:	b2c0      	uxtb	r0, r0
  
  ep->is_in = (0x80U & ep_addr) != 0U;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  if (ep->is_in)
 801af5e:	2e00      	cmp	r6, #0
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801af60:	bfb8      	it	lt
 801af62:	80c8      	strhlt	r0, [r1, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 801af64:	2b02      	cmp	r3, #2
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 801af66:	70cb      	strb	r3, [r1, #3]
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 801af68:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->tx_fifo_num = ep->num;
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
 801af6c:	bf04      	itt	eq
 801af6e:	2300      	moveq	r3, #0
 801af70:	710b      	strbeq	r3, [r1, #4]
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  }
  ep->num   = ep_addr & 0x7FU;
 801af72:	7008      	strb	r0, [r1, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 801af74:	704d      	strb	r5, [r1, #1]
  ep->maxpacket = ep_mps;
 801af76:	608a      	str	r2, [r1, #8]
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 801af78:	f894 3380 	ldrb.w	r3, [r4, #896]	; 0x380
 801af7c:	2b01      	cmp	r3, #1
 801af7e:	d009      	beq.n	801af94 <HAL_PCD_EP_Open+0x58>
 801af80:	2301      	movs	r3, #1
 801af82:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
  USB_ActivateEndpoint(hpcd->Instance , ep);
 801af86:	6820      	ldr	r0, [r4, #0]
 801af88:	f000 fa28 	bl	801b3dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 801af8c:	2000      	movs	r0, #0
 801af8e:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return ret;
 801af92:	bd70      	pop	{r4, r5, r6, pc}
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 801af94:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 801af96:	bd70      	pop	{r4, r5, r6, pc}

0801af98 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 801af98:	b24b      	sxtb	r3, r1
 801af9a:	2b00      	cmp	r3, #0
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 801af9c:	b510      	push	{r4, lr}
 801af9e:	f04f 021c 	mov.w	r2, #28
 801afa2:	4604      	mov	r4, r0
 801afa4:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 801afa8:	bfb5      	itete	lt
 801afaa:	fb02 4100 	mlalt	r1, r2, r0, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 801afae:	fb02 4101 	mlage	r1, r2, r1, r4
{  
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 801afb2:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 801afb4:	f501 71ee 	addge.w	r1, r1, #476	; 0x1dc
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 801afb8:	0fdb      	lsrs	r3, r3, #31
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  }
  ep->num   = ep_addr & 0x7FU;
 801afba:	7008      	strb	r0, [r1, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 801afbc:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 801afbe:	f894 3380 	ldrb.w	r3, [r4, #896]	; 0x380
 801afc2:	2b01      	cmp	r3, #1
 801afc4:	d009      	beq.n	801afda <HAL_PCD_EP_Close+0x42>
 801afc6:	2301      	movs	r3, #1
 801afc8:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 801afcc:	6820      	ldr	r0, [r4, #0]
 801afce:	f000 fa47 	bl	801b460 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 801afd2:	2000      	movs	r0, #0
 801afd4:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  return HAL_OK;
 801afd8:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
  
  __HAL_LOCK(hpcd); 
 801afda:	2002      	movs	r0, #2
  USB_DeactivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 801afdc:	bd10      	pop	{r4, pc}

0801afde <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801afde:	b538      	push	{r3, r4, r5, lr}
 801afe0:	4604      	mov	r4, r0
 801afe2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 801afe6:	201c      	movs	r0, #28
 801afe8:	fb00 4005 	mla	r0, r0, r5, r4
  ep->xfer_len = len;
 801afec:	f8c0 31f0 	str.w	r3, [r0, #496]	; 0x1f0
  ep->xfer_count = 0U;
 801aff0:	2300      	movs	r3, #0
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 801aff2:	f8c0 21e8 	str.w	r2, [r0, #488]	; 0x1e8
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 801aff6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  ep->is_in = 0U;
 801affa:	f880 31dd 	strb.w	r3, [r0, #477]	; 0x1dd
  ep->num = ep_addr & 0x7FU;
 801affe:	f880 51dc 	strb.w	r5, [r0, #476]	; 0x1dc
  
  if (hpcd->Init.dma_enable == 1U)
 801b002:	6923      	ldr	r3, [r4, #16]
 801b004:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;  
 801b006:	bf08      	it	eq
 801b008:	f8c0 21ec 	streq.w	r2, [r0, #492]	; 0x1ec
  }
  
  __HAL_LOCK(hpcd); 
 801b00c:	f894 2380 	ldrb.w	r2, [r4, #896]	; 0x380
 801b010:	2a01      	cmp	r2, #1
 801b012:	d013      	beq.n	801b03c <HAL_PCD_EP_Receive+0x5e>
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 801b014:	211c      	movs	r1, #28
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
 801b016:	2201      	movs	r2, #1
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 801b018:	fb01 4105 	mla	r1, r1, r5, r4
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
 801b01c:	f884 2380 	strb.w	r2, [r4, #896]	; 0x380
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 801b020:	f501 71ee 	add.w	r1, r1, #476	; 0x1dc
 801b024:	b2da      	uxtb	r2, r3
  
  __HAL_LOCK(hpcd); 
  
  if ((ep_addr & 0x7FU) == 0U)
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 801b026:	6820      	ldr	r0, [r4, #0]
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
  
  if ((ep_addr & 0x7FU) == 0U)
 801b028:	b915      	cbnz	r5, 801b030 <HAL_PCD_EP_Receive+0x52>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 801b02a:	f000 fb6b 	bl	801b704 <USB_EP0StartXfer>
 801b02e:	e001      	b.n	801b034 <HAL_PCD_EP_Receive+0x56>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 801b030:	f000 fa4e 	bl	801b4d0 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd); 
 801b034:	2000      	movs	r0, #0
 801b036:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  
  return HAL_OK;
 801b03a:	bd38      	pop	{r3, r4, r5, pc}
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
 801b03c:	2002      	movs	r0, #2
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 801b03e:	bd38      	pop	{r3, r4, r5, pc}

0801b040 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801b040:	b538      	push	{r3, r4, r5, lr}
 801b042:	4604      	mov	r4, r0
 801b044:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 801b048:	201c      	movs	r0, #28
 801b04a:	fb00 4005 	mla	r0, r0, r5, r4
  ep->xfer_len = len;
 801b04e:	64c3      	str	r3, [r0, #76]	; 0x4c
  ep->xfer_count = 0U;
 801b050:	2300      	movs	r3, #0
 801b052:	6503      	str	r3, [r0, #80]	; 0x50
  ep->is_in = 1U;
 801b054:	2301      	movs	r3, #1
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 801b056:	6442      	str	r2, [r0, #68]	; 0x44
  ep->xfer_len = len;
  ep->xfer_count = 0U;
  ep->is_in = 1U;
 801b058:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  ep->num = ep_addr & 0x7FU;
 801b05c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  
  if (hpcd->Init.dma_enable == 1U)
 801b060:	6923      	ldr	r3, [r4, #16]
 801b062:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;  
 801b064:	bf08      	it	eq
 801b066:	6482      	streq	r2, [r0, #72]	; 0x48
  }
  
  __HAL_LOCK(hpcd); 
 801b068:	f894 2380 	ldrb.w	r2, [r4, #896]	; 0x380
 801b06c:	2a01      	cmp	r2, #1
 801b06e:	d012      	beq.n	801b096 <HAL_PCD_EP_Transmit+0x56>
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 801b070:	211c      	movs	r1, #28
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
 801b072:	2201      	movs	r2, #1
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 801b074:	fb01 4105 	mla	r1, r1, r5, r4
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
 801b078:	f884 2380 	strb.w	r2, [r4, #896]	; 0x380
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 801b07c:	3138      	adds	r1, #56	; 0x38
 801b07e:	b2da      	uxtb	r2, r3
  
  __HAL_LOCK(hpcd); 
  
  if ((ep_addr & 0x7FU) == 0U)
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 801b080:	6820      	ldr	r0, [r4, #0]
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
  
  if ((ep_addr & 0x7FU) == 0U)
 801b082:	b915      	cbnz	r5, 801b08a <HAL_PCD_EP_Transmit+0x4a>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 801b084:	f000 fb3e 	bl	801b704 <USB_EP0StartXfer>
 801b088:	e001      	b.n	801b08e <HAL_PCD_EP_Transmit+0x4e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 801b08a:	f000 fa21 	bl	801b4d0 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 801b08e:	2000      	movs	r0, #0
 801b090:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
     
  return HAL_OK;
 801b094:	bd38      	pop	{r3, r4, r5, pc}
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  __HAL_LOCK(hpcd); 
 801b096:	2002      	movs	r0, #2
  }
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 801b098:	bd38      	pop	{r3, r4, r5, pc}

0801b09a <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801b09a:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 801b09c:	b24b      	sxtb	r3, r1
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 801b0a4:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 801b0a8:	bfb5      	itete	lt
 801b0aa:	fb02 0105 	mlalt	r1, r2, r5, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801b0ae:	fb02 0101 	mlage	r1, r2, r1, r0
{
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 801b0b2:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801b0b4:	f501 71ee 	addge.w	r1, r1, #476	; 0x1dc
  }
  
  ep->is_stall = 1U;
 801b0b8:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 801b0ba:	0fdb      	lsrs	r3, r3, #31
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7FU;
 801b0bc:	b2ed      	uxtb	r5, r5
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1U;
 801b0be:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 801b0c0:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 801b0c2:	704b      	strb	r3, [r1, #1]
  
  
  __HAL_LOCK(hpcd); 
 801b0c4:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 801b0c8:	4293      	cmp	r3, r2
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801b0ca:	4604      	mov	r4, r0
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
  
  
  __HAL_LOCK(hpcd); 
 801b0cc:	d00f      	beq.n	801b0ee <HAL_PCD_EP_SetStall+0x54>
 801b0ce:	f880 2380 	strb.w	r2, [r0, #896]	; 0x380
  USB_EPSetStall(hpcd->Instance , ep);
 801b0d2:	6800      	ldr	r0, [r0, #0]
 801b0d4:	f000 fbe2 	bl	801b89c <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 801b0d8:	b92d      	cbnz	r5, 801b0e6 <HAL_PCD_EP_SetStall+0x4c>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801b0da:	f504 7261 	add.w	r2, r4, #900	; 0x384
 801b0de:	7c21      	ldrb	r1, [r4, #16]
 801b0e0:	6820      	ldr	r0, [r4, #0]
 801b0e2:	f000 fc9f 	bl	801ba24 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 801b0e6:	2000      	movs	r0, #0
 801b0e8:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
  
  return HAL_OK;
 801b0ec:	bd38      	pop	{r3, r4, r5, pc}
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
  
  
  __HAL_LOCK(hpcd); 
 801b0ee:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 801b0f0:	bd38      	pop	{r3, r4, r5, pc}

0801b0f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801b0f2:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 801b0f4:	b24b      	sxtb	r3, r1
 801b0f6:	2b00      	cmp	r3, #0
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801b0f8:	4605      	mov	r5, r0
 801b0fa:	f04f 021c 	mov.w	r2, #28
 801b0fe:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 801b102:	bfb5      	itete	lt
 801b104:	fb02 5100 	mlalt	r1, r2, r0, r5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801b108:	fb02 5101 	mlage	r1, r2, r1, r5
{
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 801b10c:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801b10e:	f501 71ee 	addge.w	r1, r1, #476	; 0x1dc
  }
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 801b112:	0fdb      	lsrs	r3, r3, #31
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0U;
 801b114:	2400      	movs	r4, #0
 801b116:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 801b118:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 801b11a:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 801b11c:	f895 3380 	ldrb.w	r3, [r5, #896]	; 0x380
 801b120:	2b01      	cmp	r3, #1
 801b122:	d009      	beq.n	801b138 <HAL_PCD_EP_ClrStall+0x46>
 801b124:	2301      	movs	r3, #1
 801b126:	f885 3380 	strb.w	r3, [r5, #896]	; 0x380
  USB_EPClearStall(hpcd->Instance , ep);
 801b12a:	6828      	ldr	r0, [r5, #0]
 801b12c:	f000 fbe8 	bl	801b900 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 801b130:	f885 4380 	strb.w	r4, [r5, #896]	; 0x380
    
  return HAL_OK;
 801b134:	4620      	mov	r0, r4
 801b136:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
  
  __HAL_LOCK(hpcd); 
 801b138:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 801b13a:	bd38      	pop	{r3, r4, r5, pc}

0801b13c <HAL_PCD_EP_Flush>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801b13c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 801b13e:	f890 3380 	ldrb.w	r3, [r0, #896]	; 0x380
 801b142:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801b144:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 801b146:	d011      	beq.n	801b16c <HAL_PCD_EP_Flush+0x30>
 801b148:	2301      	movs	r3, #1
 801b14a:	f880 3380 	strb.w	r3, [r0, #896]	; 0x380
  
  if ((ep_addr & 0x80U) == 0x80U)
 801b14e:	060b      	lsls	r3, r1, #24
 801b150:	d505      	bpl.n	801b15e <HAL_PCD_EP_Flush+0x22>
  {
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
 801b152:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801b156:	6800      	ldr	r0, [r0, #0]
 801b158:	f000 f8fc 	bl	801b354 <USB_FlushTxFifo>
 801b15c:	e002      	b.n	801b164 <HAL_PCD_EP_Flush+0x28>
  }
  else
  {
    USB_FlushRxFifo(hpcd->Instance);
 801b15e:	6800      	ldr	r0, [r0, #0]
 801b160:	f000 f90a 	bl	801b378 <USB_FlushRxFifo>
  }
  
  __HAL_UNLOCK(hpcd); 
 801b164:	2000      	movs	r0, #0
 801b166:	f884 0380 	strb.w	r0, [r4, #896]	; 0x380
    
  return HAL_OK;
 801b16a:	bd10      	pop	{r4, pc}
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  __HAL_LOCK(hpcd); 
 801b16c:	2002      	movs	r0, #2
  }
  
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 801b16e:	bd10      	pop	{r4, pc}

0801b170 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801b170:	b084      	sub	sp, #16
 801b172:	b538      	push	{r3, r4, r5, lr}
 801b174:	ad05      	add	r5, sp, #20
 801b176:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801b17a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b17c:	2b01      	cmp	r3, #1
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801b17e:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801b180:	d117      	bne.n	801b1b2 <USB_CoreInit+0x42>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801b182:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801b184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b188:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801b18a:	68c3      	ldr	r3, [r0, #12]
 801b18c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801b190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b194:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801b196:	68c3      	ldr	r3, [r0, #12]
 801b198:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801b19c:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 801b19e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b1a0:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801b1a2:	bf02      	ittt	eq
 801b1a4:	68c3      	ldreq	r3, [r0, #12]
 801b1a6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 801b1aa:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 801b1ac:	f000 fc5e 	bl	801ba6c <USB_CoreReset>
 801b1b0:	e008      	b.n	801b1c4 <USB_CoreInit+0x54>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801b1b2:	68c3      	ldr	r3, [r0, #12]
 801b1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b1b8:	60c3      	str	r3, [r0, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 801b1ba:	f000 fc57 	bl	801ba6c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 801b1be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801b1c2:	63a3      	str	r3, [r4, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 801b1c4:	9b08      	ldr	r3, [sp, #32]
 801b1c6:	2b01      	cmp	r3, #1
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801b1c8:	bf02      	ittt	eq
 801b1ca:	68a3      	ldreq	r3, [r4, #8]
 801b1cc:	f043 0320 	orreq.w	r3, r3, #32
 801b1d0:	60a3      	streq	r3, [r4, #8]
  }  

  return HAL_OK;
}
 801b1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b1d6:	2000      	movs	r0, #0
 801b1d8:	b004      	add	sp, #16
 801b1da:	4770      	bx	lr

0801b1dc <USB_EnableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801b1dc:	6883      	ldr	r3, [r0, #8]
 801b1de:	f043 0301 	orr.w	r3, r3, #1
 801b1e2:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 801b1e4:	2000      	movs	r0, #0
 801b1e6:	4770      	bx	lr

0801b1e8 <USB_DisableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801b1e8:	6883      	ldr	r3, [r0, #8]
 801b1ea:	f023 0301 	bic.w	r3, r3, #1
 801b1ee:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 801b1f0:	2000      	movs	r0, #0
 801b1f2:	4770      	bx	lr

0801b1f4 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 801b1f4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 801b1f6:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 801b1f8:	2901      	cmp	r1, #1
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 801b1fa:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801b1fe:	60c3      	str	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 801b200:	d104      	bne.n	801b20c <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 801b202:	68c3      	ldr	r3, [r0, #12]
 801b204:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b208:	60c3      	str	r3, [r0, #12]
 801b20a:	e004      	b.n	801b216 <USB_SetCurrentMode+0x22>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 801b20c:	b919      	cbnz	r1, 801b216 <USB_SetCurrentMode+0x22>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 801b20e:	68c3      	ldr	r3, [r0, #12]
 801b210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b214:	60c3      	str	r3, [r0, #12]
  }
  HAL_Delay(50U);
 801b216:	2032      	movs	r0, #50	; 0x32
 801b218:	f001 f8e4 	bl	801c3e4 <HAL_Delay>
  
  return HAL_OK;
}
 801b21c:	2000      	movs	r0, #0
 801b21e:	bd08      	pop	{r3, pc}

0801b220 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801b220:	b084      	sub	sp, #16
 801b222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b226:	4604      	mov	r4, r0
 801b228:	a807      	add	r0, sp, #28
 801b22a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801b22e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b230:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b232:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b238:	4688      	mov	r8, r1
 801b23a:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0U)
 801b23c:	b91e      	cbnz	r6, 801b246 <USB_DevInit+0x26>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801b23e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801b244:	63a3      	str	r3, [r4, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801b246:	2300      	movs	r3, #0
 801b248:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801b24c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 801b250:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 801b254:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b256:	2b01      	cmp	r3, #1

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801b258:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 801b25c:	d106      	bne.n	801b26c <USB_DevInit+0x4c>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 801b25e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b260:	b129      	cbz	r1, 801b26e <USB_DevInit+0x4e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 801b262:	4619      	mov	r1, r3
 801b264:	4620      	mov	r0, r4
 801b266:	f000 f897 	bl	801b398 <USB_SetDevSpeed>
 801b26a:	e003      	b.n	801b274 <USB_DevInit+0x54>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 801b26c:	2103      	movs	r1, #3
 801b26e:	4620      	mov	r0, r4
 801b270:	f000 f892 	bl	801b398 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 801b274:	2110      	movs	r1, #16
 801b276:	4620      	mov	r0, r4
 801b278:	f000 f86c 	bl	801b354 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 801b27c:	4620      	mov	r0, r4
 801b27e:	f000 f87b 	bl	801b378 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801b282:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 801b284:	f04f 32ff 	mov.w	r2, #4294967295
  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801b288:	612b      	str	r3, [r5, #16]
 801b28a:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 801b28c:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 801b28e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USB_FlushRxFifo(USBx);
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 801b292:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 801b294:	f04f 0eff 	mov.w	lr, #255	; 0xff
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
 801b298:	61eb      	str	r3, [r5, #28]
 801b29a:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b29e:	4543      	cmp	r3, r8
 801b2a0:	d00c      	beq.n	801b2bc <USB_DevInit+0x9c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801b2a2:	f8d2 c000 	ldr.w	ip, [r2]
 801b2a6:	f1bc 0f00 	cmp.w	ip, #0
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 801b2aa:	bfb4      	ite	lt
 801b2ac:	6010      	strlt	r0, [r2, #0]
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801b2ae:	6011      	strge	r1, [r2, #0]
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b2b0:	3301      	adds	r3, #1
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 801b2b2:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 801b2b4:	f8c2 e008 	str.w	lr, [r2, #8]
 801b2b8:	3220      	adds	r2, #32
 801b2ba:	e7f0      	b.n	801b29e <USB_DevInit+0x7e>
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b2bc:	2200      	movs	r2, #0
 801b2be:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 801b2c2:	4611      	mov	r1, r2
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 801b2c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 801b2c8:	f04f 0eff 	mov.w	lr, #255	; 0xff
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b2cc:	4542      	cmp	r2, r8
 801b2ce:	d00c      	beq.n	801b2ea <USB_DevInit+0xca>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801b2d0:	f8d3 c000 	ldr.w	ip, [r3]
 801b2d4:	f1bc 0f00 	cmp.w	ip, #0
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 801b2d8:	bfb4      	ite	lt
 801b2da:	6018      	strlt	r0, [r3, #0]
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801b2dc:	6019      	strge	r1, [r3, #0]
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b2de:	3201      	adds	r2, #1
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801b2e0:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 801b2e2:	f8c3 e008 	str.w	lr, [r3, #8]
 801b2e6:	3320      	adds	r3, #32
 801b2e8:	e7f0      	b.n	801b2cc <USB_DevInit+0xac>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801b2ea:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 801b2ec:	2f01      	cmp	r7, #1
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801b2ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b2f2:	612b      	str	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 801b2f4:	d108      	bne.n	801b308 <USB_DevInit+0xe8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 801b2f6:	4b15      	ldr	r3, [pc, #84]	; (801b34c <USB_DevInit+0x12c>)
 801b2f8:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 801b2fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b2fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b300:	f043 0303 	orr.w	r3, r3, #3
 801b304:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 801b306:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801b308:	2300      	movs	r3, #0
 801b30a:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801b30c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 801b310:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 801b312:	b91f      	cbnz	r7, 801b31c <USB_DevInit+0xfc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 801b314:	69a3      	ldr	r3, [r4, #24]
 801b316:	f043 0310 	orr.w	r3, r3, #16
 801b31a:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 801b31c:	69a2      	ldr	r2, [r4, #24]
 801b31e:	4b0c      	ldr	r3, [pc, #48]	; (801b350 <USB_DevInit+0x130>)
 801b320:	4313      	orrs	r3, r2
 801b322:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 801b324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b326:	b11b      	cbz	r3, 801b330 <USB_DevInit+0x110>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801b328:	69a3      	ldr	r3, [r4, #24]
 801b32a:	f043 0308 	orr.w	r3, r3, #8
 801b32e:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 801b330:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 801b332:	bf01      	itttt	eq
 801b334:	69a3      	ldreq	r3, [r4, #24]
 801b336:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 801b33a:	f043 0304 	orreq.w	r3, r3, #4
 801b33e:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 801b340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b344:	2000      	movs	r0, #0
 801b346:	b004      	add	sp, #16
 801b348:	4770      	bx	lr
 801b34a:	bf00      	nop
 801b34c:	00800100 	.word	0x00800100
 801b350:	803c3800 	.word	0x803c3800

0801b354 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0U;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 801b354:	0189      	lsls	r1, r1, #6
 801b356:	f041 0120 	orr.w	r1, r1, #32
 801b35a:	4a06      	ldr	r2, [pc, #24]	; (801b374 <USB_FlushTxFifo+0x20>)
 801b35c:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000U)
 801b35e:	3a01      	subs	r2, #1
 801b360:	d005      	beq.n	801b36e <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801b362:	6903      	ldr	r3, [r0, #16]
 801b364:	f013 0320 	ands.w	r3, r3, #32
 801b368:	d1f9      	bne.n	801b35e <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 801b36a:	4618      	mov	r0, r3
 801b36c:	4770      	bx	lr
 
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 801b36e:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
  
  return HAL_OK;
}
 801b370:	4770      	bx	lr
 801b372:	bf00      	nop
 801b374:	00030d41 	.word	0x00030d41

0801b378 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801b378:	2310      	movs	r3, #16
 801b37a:	4a06      	ldr	r2, [pc, #24]	; (801b394 <USB_FlushRxFifo+0x1c>)
 801b37c:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000U)
 801b37e:	3a01      	subs	r2, #1
 801b380:	d005      	beq.n	801b38e <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801b382:	6903      	ldr	r3, [r0, #16]
 801b384:	f013 0310 	ands.w	r3, r3, #16
 801b388:	d1f9      	bne.n	801b37e <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 801b38a:	4618      	mov	r0, r3
 801b38c:	4770      	bx	lr
  
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 801b38e:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
  
  return HAL_OK;
}
 801b390:	4770      	bx	lr
 801b392:	bf00      	nop
 801b394:	00030d41 	.word	0x00030d41

0801b398 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 801b398:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 801b39c:	4319      	orrs	r1, r3
 801b39e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 801b3a2:	2000      	movs	r0, #0
 801b3a4:	4770      	bx	lr

0801b3a6 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801b3a6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 801b3aa:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 801b3ae:	f013 0006 	ands.w	r0, r3, #6
 801b3b2:	d012      	beq.n	801b3da <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 801b3b4:	6893      	ldr	r3, [r2, #8]
 801b3b6:	f003 0306 	and.w	r3, r3, #6
 801b3ba:	2b02      	cmp	r3, #2
 801b3bc:	d00c      	beq.n	801b3d8 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 801b3be:	6893      	ldr	r3, [r2, #8]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 801b3c0:	f003 0306 	and.w	r3, r3, #6
 801b3c4:	2b06      	cmp	r3, #6
 801b3c6:	d007      	beq.n	801b3d8 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 801b3c8:	6893      	ldr	r3, [r2, #8]
 801b3ca:	f003 0306 	and.w	r3, r3, #6
 801b3ce:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 801b3d0:	bf14      	ite	ne
 801b3d2:	2000      	movne	r0, #0
 801b3d4:	2002      	moveq	r0, #2
 801b3d6:	4770      	bx	lr
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 801b3d8:	2003      	movs	r0, #3
  {
    speed = USB_OTG_SPEED_LOW;
  }
  
  return speed;
}
 801b3da:	4770      	bx	lr

0801b3dc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b3dc:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 801b3de:	784b      	ldrb	r3, [r1, #1]
 801b3e0:	780e      	ldrb	r6, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 801b3e2:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 801b3e6:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 801b3ea:	2b01      	cmp	r3, #1
 801b3ec:	d11b      	bne.n	801b426 <USB_ActivateEndpoint+0x4a>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 801b3ee:	40b3      	lsls	r3, r6
 801b3f0:	b29b      	uxth	r3, r3
 801b3f2:	4323      	orrs	r3, r4
 801b3f4:	61d3      	str	r3, [r2, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801b3f6:	780e      	ldrb	r6, [r1, #0]
 801b3f8:	f44f 6510 	mov.w	r5, #2304	; 0x900
 801b3fc:	eb05 1546 	add.w	r5, r5, r6, lsl #5
 801b400:	582b      	ldr	r3, [r5, r0]
 801b402:	041a      	lsls	r2, r3, #16
 801b404:	d42a      	bmi.n	801b45c <USB_ActivateEndpoint+0x80>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 801b406:	582c      	ldr	r4, [r5, r0]
 801b408:	688a      	ldr	r2, [r1, #8]
 801b40a:	f044 5380 	orr.w	r3, r4, #268435456	; 0x10000000
 801b40e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b412:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b416:	431a      	orrs	r2, r3
 801b418:	78cb      	ldrb	r3, [r1, #3]
 801b41a:	ea42 4383 	orr.w	r3, r2, r3, lsl #18
 801b41e:	ea43 5386 	orr.w	r3, r3, r6, lsl #22
 801b422:	502b      	str	r3, [r5, r0]
 801b424:	e01a      	b.n	801b45c <USB_ActivateEndpoint+0x80>
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 801b426:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 801b42a:	fa05 f306 	lsl.w	r3, r5, r6
 801b42e:	4323      	orrs	r3, r4
 801b430:	61d3      	str	r3, [r2, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801b432:	780c      	ldrb	r4, [r1, #0]
 801b434:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 801b438:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 801b43c:	5823      	ldr	r3, [r4, r0]
 801b43e:	041b      	lsls	r3, r3, #16
 801b440:	d40c      	bmi.n	801b45c <USB_ActivateEndpoint+0x80>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 801b442:	5822      	ldr	r2, [r4, r0]
 801b444:	688b      	ldr	r3, [r1, #8]
 801b446:	f3c3 050a 	ubfx	r5, r3, #0, #11
 801b44a:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 801b44e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b452:	78ca      	ldrb	r2, [r1, #3]
 801b454:	432b      	orrs	r3, r5
 801b456:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 801b45a:	5023      	str	r3, [r4, r0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 801b45c:	2000      	movs	r0, #0
 801b45e:	bd70      	pop	{r4, r5, r6, pc}

0801b460 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b460:	b530      	push	{r4, r5, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801b462:	784c      	ldrb	r4, [r1, #1]
 801b464:	780a      	ldrb	r2, [r1, #0]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 801b466:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 801b46a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801b46e:	2c01      	cmp	r4, #1
 801b470:	d116      	bne.n	801b4a0 <USB_DeactivateEndpoint+0x40>
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 801b472:	fa04 f202 	lsl.w	r2, r4, r2
 801b476:	b292      	uxth	r2, r2
 801b478:	ea25 0202 	bic.w	r2, r5, r2
 801b47c:	63da      	str	r2, [r3, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 801b47e:	780d      	ldrb	r5, [r1, #0]
 801b480:	69da      	ldr	r2, [r3, #28]
 801b482:	40ac      	lsls	r4, r5
 801b484:	b2a4      	uxth	r4, r4
 801b486:	ea22 0404 	bic.w	r4, r2, r4
 801b48a:	61dc      	str	r4, [r3, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 801b48c:	780a      	ldrb	r2, [r1, #0]
 801b48e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 801b492:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b496:	581a      	ldr	r2, [r3, r0]
 801b498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801b49c:	501a      	str	r2, [r3, r0]
 801b49e:	e014      	b.n	801b4ca <USB_DeactivateEndpoint+0x6a>
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
 801b4a0:	2401      	movs	r4, #1
 801b4a2:	fa04 f202 	lsl.w	r2, r4, r2
 801b4a6:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 801b4aa:	63da      	str	r2, [r3, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));     
 801b4ac:	780d      	ldrb	r5, [r1, #0]
 801b4ae:	69da      	ldr	r2, [r3, #28]
 801b4b0:	40ac      	lsls	r4, r5
 801b4b2:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 801b4b6:	61dc      	str	r4, [r3, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 801b4b8:	780a      	ldrb	r2, [r1, #0]
 801b4ba:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 801b4be:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b4c2:	581a      	ldr	r2, [r3, r0]
 801b4c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801b4c8:	501a      	str	r2, [r3, r0]
  }
  return HAL_OK;
}
 801b4ca:	2000      	movs	r0, #0
 801b4cc:	bd30      	pop	{r4, r5, pc}
	...

0801b4d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 801b4d2:	784b      	ldrb	r3, [r1, #1]
 801b4d4:	2b01      	cmp	r3, #1
 801b4d6:	780b      	ldrb	r3, [r1, #0]
 801b4d8:	f040 809e 	bne.w	801b618 <USB_EPStartXfer+0x148>
 801b4dc:	2420      	movs	r4, #32
 801b4de:	f44f 6510 	mov.w	r5, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b4e2:	694e      	ldr	r6, [r1, #20]
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 801b4e4:	fb14 5303 	smlabb	r3, r4, r3, r5
 801b4e8:	4403      	add	r3, r0
  
  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b4ea:	b9b6      	cbnz	r6, 801b51a <USB_EPStartXfer+0x4a>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 801b4ec:	691e      	ldr	r6, [r3, #16]
 801b4ee:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 801b4f2:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 801b4f6:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 801b4f8:	780b      	ldrb	r3, [r1, #0]
 801b4fa:	fb14 5303 	smlabb	r3, r4, r3, r5
 801b4fe:	4403      	add	r3, r0
 801b500:	691e      	ldr	r6, [r3, #16]
 801b502:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 801b506:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 801b508:	780b      	ldrb	r3, [r1, #0]
 801b50a:	fb14 5403 	smlabb	r4, r4, r3, r5
 801b50e:	4404      	add	r4, r0
 801b510:	6923      	ldr	r3, [r4, #16]
 801b512:	0cdb      	lsrs	r3, r3, #19
 801b514:	04db      	lsls	r3, r3, #19
 801b516:	6123      	str	r3, [r4, #16]
 801b518:	e03f      	b.n	801b59a <USB_EPStartXfer+0xca>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b51a:	691e      	ldr	r6, [r3, #16]
 801b51c:	0cf6      	lsrs	r6, r6, #19
 801b51e:	04f6      	lsls	r6, r6, #19
 801b520:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 801b522:	780b      	ldrb	r3, [r1, #0]
 801b524:	fb14 5303 	smlabb	r3, r4, r3, r5
 801b528:	4403      	add	r3, r0
 801b52a:	691e      	ldr	r6, [r3, #16]
 801b52c:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 801b530:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 801b534:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 801b536:	780e      	ldrb	r6, [r1, #0]
 801b538:	f8d1 e008 	ldr.w	lr, [r1, #8]
 801b53c:	694b      	ldr	r3, [r1, #20]
 801b53e:	fb14 5606 	smlabb	r6, r4, r6, r5
 801b542:	4406      	add	r6, r0
 801b544:	4473      	add	r3, lr
 801b546:	3b01      	subs	r3, #1
 801b548:	fbb3 f3fe 	udiv	r3, r3, lr
 801b54c:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 801b700 <USB_EPStartXfer+0x230>
 801b550:	6937      	ldr	r7, [r6, #16]
 801b552:	04db      	lsls	r3, r3, #19
 801b554:	ea03 0e0e 	and.w	lr, r3, lr
 801b558:	ea4e 0307 	orr.w	r3, lr, r7
 801b55c:	6133      	str	r3, [r6, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 801b55e:	780b      	ldrb	r3, [r1, #0]
 801b560:	694e      	ldr	r6, [r1, #20]
 801b562:	fb14 5303 	smlabb	r3, r4, r3, r5
 801b566:	4403      	add	r3, r0
 801b568:	f3c6 0612 	ubfx	r6, r6, #0, #19
 801b56c:	691f      	ldr	r7, [r3, #16]
 801b56e:	433e      	orrs	r6, r7
 801b570:	611e      	str	r6, [r3, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 801b572:	78cb      	ldrb	r3, [r1, #3]
 801b574:	2b01      	cmp	r3, #1
 801b576:	f040 80bc 	bne.w	801b6f2 <USB_EPStartXfer+0x222>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 801b57a:	780b      	ldrb	r3, [r1, #0]
 801b57c:	fb14 5303 	smlabb	r3, r4, r3, r5
 801b580:	4403      	add	r3, r0
 801b582:	691e      	ldr	r6, [r3, #16]
 801b584:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 801b588:	611e      	str	r6, [r3, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 801b58a:	780b      	ldrb	r3, [r1, #0]
 801b58c:	fb14 5403 	smlabb	r4, r4, r3, r5
 801b590:	4404      	add	r4, r0
 801b592:	6923      	ldr	r3, [r4, #16]
 801b594:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b598:	6123      	str	r3, [r4, #16]
      }       
    }

    if (dma == 1U)
 801b59a:	2a01      	cmp	r2, #1
 801b59c:	d106      	bne.n	801b5ac <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801b59e:	780b      	ldrb	r3, [r1, #0]
 801b5a0:	690c      	ldr	r4, [r1, #16]
 801b5a2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 801b5a6:	f8c3 4914 	str.w	r4, [r3, #2324]	; 0x914
 801b5aa:	e00c      	b.n	801b5c6 <USB_EPStartXfer+0xf6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 801b5ac:	78cb      	ldrb	r3, [r1, #3]
 801b5ae:	2b01      	cmp	r3, #1
 801b5b0:	d00c      	beq.n	801b5cc <USB_EPStartXfer+0xfc>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801b5b2:	694b      	ldr	r3, [r1, #20]
 801b5b4:	b13b      	cbz	r3, 801b5c6 <USB_EPStartXfer+0xf6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 801b5b6:	780e      	ldrb	r6, [r1, #0]
 801b5b8:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 801b5bc:	2301      	movs	r3, #1
 801b5be:	40b3      	lsls	r3, r6
 801b5c0:	4323      	orrs	r3, r4
 801b5c2:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801b5c6:	78cb      	ldrb	r3, [r1, #3]
 801b5c8:	2b01      	cmp	r3, #1
 801b5ca:	d111      	bne.n	801b5f0 <USB_EPStartXfer+0x120>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 801b5cc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 801b5d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 801b5d4:	780b      	ldrb	r3, [r1, #0]
 801b5d6:	f04f 0420 	mov.w	r4, #32
 801b5da:	f44f 6510 	mov.w	r5, #2304	; 0x900
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801b5de:	fb14 5303 	smlabb	r3, r4, r3, r5
 801b5e2:	581c      	ldr	r4, [r3, r0]
 801b5e4:	bf0c      	ite	eq
 801b5e6:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801b5ea:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 801b5ee:	501c      	str	r4, [r3, r0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b5f0:	780c      	ldrb	r4, [r1, #0]
 801b5f2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 801b5f6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801b5fa:	58c4      	ldr	r4, [r0, r3]
 801b5fc:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 801b600:	50c4      	str	r4, [r0, r3]
    
    if (ep->type == EP_TYPE_ISOC)
 801b602:	78cb      	ldrb	r3, [r1, #3]
 801b604:	2b01      	cmp	r3, #1
 801b606:	d178      	bne.n	801b6fa <USB_EPStartXfer+0x22a>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 801b608:	780c      	ldrb	r4, [r1, #0]
 801b60a:	8a8b      	ldrh	r3, [r1, #20]
 801b60c:	9200      	str	r2, [sp, #0]
 801b60e:	68c9      	ldr	r1, [r1, #12]
 801b610:	4622      	mov	r2, r4
 801b612:	f000 f921 	bl	801b858 <USB_WritePacket>
 801b616:	e070      	b.n	801b6fa <USB_EPStartXfer+0x22a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 801b618:	2420      	movs	r4, #32
 801b61a:	f44f 6630 	mov.w	r6, #2816	; 0xb00
 801b61e:	fb14 6303 	smlabb	r3, r4, r3, r6
 801b622:	4403      	add	r3, r0
 801b624:	691d      	ldr	r5, [r3, #16]
 801b626:	0ced      	lsrs	r5, r5, #19
 801b628:	04ed      	lsls	r5, r5, #19
 801b62a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 801b62c:	780b      	ldrb	r3, [r1, #0]
 801b62e:	fb14 6303 	smlabb	r3, r4, r3, r6
 801b632:	4403      	add	r3, r0
 801b634:	691d      	ldr	r5, [r3, #16]
 801b636:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 801b63a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 801b63e:	611d      	str	r5, [r3, #16]

    if (ep->xfer_len == 0U)
 801b640:	694f      	ldr	r7, [r1, #20]
 801b642:	780b      	ldrb	r3, [r1, #0]
 801b644:	688d      	ldr	r5, [r1, #8]
 801b646:	b987      	cbnz	r7, 801b66a <USB_EPStartXfer+0x19a>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801b648:	fb14 6303 	smlabb	r3, r4, r3, r6
 801b64c:	4403      	add	r3, r0
 801b64e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 801b652:	691f      	ldr	r7, [r3, #16]
 801b654:	433d      	orrs	r5, r7
 801b656:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 801b658:	780b      	ldrb	r3, [r1, #0]
 801b65a:	fb14 6403 	smlabb	r4, r4, r3, r6
 801b65e:	4404      	add	r4, r0
 801b660:	6923      	ldr	r3, [r4, #16]
 801b662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b666:	6123      	str	r3, [r4, #16]
 801b668:	e01c      	b.n	801b6a4 <USB_EPStartXfer+0x1d4>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 801b66a:	fb14 6303 	smlabb	r3, r4, r3, r6
 801b66e:	4403      	add	r3, r0
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 801b670:	442f      	add	r7, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 801b672:	f8df e08c 	ldr.w	lr, [pc, #140]	; 801b700 <USB_EPStartXfer+0x230>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 801b676:	3f01      	subs	r7, #1
 801b678:	fbb7 f5f5 	udiv	r5, r7, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 801b67c:	691f      	ldr	r7, [r3, #16]
 801b67e:	ea4f 4cc5 	mov.w	ip, r5, lsl #19
 801b682:	ea0c 0e0e 	and.w	lr, ip, lr
 801b686:	ea4e 0707 	orr.w	r7, lr, r7
 801b68a:	611f      	str	r7, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 801b68c:	780b      	ldrb	r3, [r1, #0]
 801b68e:	fb14 6403 	smlabb	r4, r4, r3, r6
 801b692:	4404      	add	r4, r0
 801b694:	688b      	ldr	r3, [r1, #8]
 801b696:	6926      	ldr	r6, [r4, #16]
 801b698:	b2ad      	uxth	r5, r5
 801b69a:	436b      	muls	r3, r5
 801b69c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b6a0:	4333      	orrs	r3, r6
 801b6a2:	6123      	str	r3, [r4, #16]
    }

    if (dma == 1U)
 801b6a4:	2a01      	cmp	r2, #1
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 801b6a6:	bf01      	itttt	eq
 801b6a8:	780b      	ldrbeq	r3, [r1, #0]
 801b6aa:	68ca      	ldreq	r2, [r1, #12]
 801b6ac:	eb00 1343 	addeq.w	r3, r0, r3, lsl #5
 801b6b0:	f8c3 2b14 	streq.w	r2, [r3, #2836]	; 0xb14
    }
    
    if (ep->type == EP_TYPE_ISOC)
 801b6b4:	78cb      	ldrb	r3, [r1, #3]
 801b6b6:	2b01      	cmp	r3, #1
 801b6b8:	d111      	bne.n	801b6de <USB_EPStartXfer+0x20e>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 801b6ba:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 801b6be:	f413 7f80 	tst.w	r3, #256	; 0x100
 801b6c2:	780b      	ldrb	r3, [r1, #0]
 801b6c4:	f04f 0220 	mov.w	r2, #32
 801b6c8:	f44f 6430 	mov.w	r4, #2816	; 0xb00
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801b6cc:	fb12 4303 	smlabb	r3, r2, r3, r4
 801b6d0:	58c2      	ldr	r2, [r0, r3]
 801b6d2:	bf0c      	ite	eq
 801b6d4:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801b6d8:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 801b6dc:	50c2      	str	r2, [r0, r3]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801b6de:	780a      	ldrb	r2, [r1, #0]
 801b6e0:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 801b6e4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b6e8:	58c2      	ldr	r2, [r0, r3]
 801b6ea:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 801b6ee:	50c2      	str	r2, [r0, r3]
  }
  return HAL_OK;
 801b6f0:	e003      	b.n	801b6fa <USB_EPStartXfer+0x22a>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 801b6f2:	2a01      	cmp	r2, #1
 801b6f4:	f47f af5d 	bne.w	801b5b2 <USB_EPStartXfer+0xe2>
 801b6f8:	e751      	b.n	801b59e <USB_EPStartXfer+0xce>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 801b6fa:	2000      	movs	r0, #0
 801b6fc:	b003      	add	sp, #12
 801b6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b700:	1ff80000 	.word	0x1ff80000

0801b704 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 801b704:	784b      	ldrb	r3, [r1, #1]
 801b706:	2b01      	cmp	r3, #1
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b708:	b570      	push	{r4, r5, r6, lr}
 801b70a:	780b      	ldrb	r3, [r1, #0]
  /* IN endpoint */
  if (ep->is_in == 1U)
 801b70c:	d163      	bne.n	801b7d6 <USB_EP0StartXfer+0xd2>
 801b70e:	2420      	movs	r4, #32
 801b710:	f44f 6510 	mov.w	r5, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b714:	694e      	ldr	r6, [r1, #20]
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 801b716:	fb14 5303 	smlabb	r3, r4, r3, r5
 801b71a:	4403      	add	r3, r0
{
  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b71c:	b9b6      	cbnz	r6, 801b74c <USB_EP0StartXfer+0x48>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 801b71e:	691e      	ldr	r6, [r3, #16]
 801b720:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 801b724:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 801b728:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 801b72a:	780b      	ldrb	r3, [r1, #0]
 801b72c:	fb14 5303 	smlabb	r3, r4, r3, r5
 801b730:	4403      	add	r3, r0
 801b732:	691e      	ldr	r6, [r3, #16]
 801b734:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 801b738:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 801b73a:	780b      	ldrb	r3, [r1, #0]
 801b73c:	fb14 5403 	smlabb	r4, r4, r3, r5
 801b740:	4404      	add	r4, r0
 801b742:	6923      	ldr	r3, [r4, #16]
 801b744:	0cdb      	lsrs	r3, r3, #19
 801b746:	04db      	lsls	r3, r3, #19
 801b748:	6123      	str	r3, [r4, #16]
 801b74a:	e027      	b.n	801b79c <USB_EP0StartXfer+0x98>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b74c:	691e      	ldr	r6, [r3, #16]
 801b74e:	0cf6      	lsrs	r6, r6, #19
 801b750:	04f6      	lsls	r6, r6, #19
 801b752:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 801b754:	780b      	ldrb	r3, [r1, #0]
 801b756:	fb14 5403 	smlabb	r4, r4, r3, r5
 801b75a:	4404      	add	r4, r0
 801b75c:	6923      	ldr	r3, [r4, #16]
 801b75e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801b762:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801b766:	6123      	str	r3, [r4, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 801b768:	688b      	ldr	r3, [r1, #8]
 801b76a:	694c      	ldr	r4, [r1, #20]
      {
        ep->xfer_len = ep->maxpacket;
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 801b76c:	780d      	ldrb	r5, [r1, #0]
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
      
      if(ep->xfer_len > ep->maxpacket)
 801b76e:	429c      	cmp	r4, r3
      {
        ep->xfer_len = ep->maxpacket;
 801b770:	bf88      	it	hi
 801b772:	614b      	strhi	r3, [r1, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 801b774:	2420      	movs	r4, #32
 801b776:	f44f 6310 	mov.w	r3, #2304	; 0x900
 801b77a:	fb14 3505 	smlabb	r5, r4, r5, r3
 801b77e:	4405      	add	r5, r0
 801b780:	692e      	ldr	r6, [r5, #16]
 801b782:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 801b786:	612e      	str	r6, [r5, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 801b788:	780d      	ldrb	r5, [r1, #0]
 801b78a:	fb14 3305 	smlabb	r3, r4, r5, r3
 801b78e:	4403      	add	r3, r0
 801b790:	694c      	ldr	r4, [r1, #20]
 801b792:	691d      	ldr	r5, [r3, #16]
 801b794:	f3c4 0412 	ubfx	r4, r4, #0, #19
 801b798:	432c      	orrs	r4, r5
 801b79a:	611c      	str	r4, [r3, #16]
    
    }
    
    if (dma == 1)
 801b79c:	2a01      	cmp	r2, #1
 801b79e:	780b      	ldrb	r3, [r1, #0]
 801b7a0:	d105      	bne.n	801b7ae <USB_EP0StartXfer+0xaa>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801b7a2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 801b7a6:	690a      	ldr	r2, [r1, #16]
 801b7a8:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
 801b7ac:	e009      	b.n	801b7c2 <USB_EP0StartXfer+0xbe>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801b7ae:	694a      	ldr	r2, [r1, #20]
 801b7b0:	b13a      	cbz	r2, 801b7c2 <USB_EP0StartXfer+0xbe>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 801b7b2:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 801b7b6:	2401      	movs	r4, #1
 801b7b8:	fa04 f303 	lsl.w	r3, r4, r3
 801b7bc:	4313      	orrs	r3, r2
 801b7be:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
      }
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 801b7c2:	780a      	ldrb	r2, [r1, #0]
 801b7c4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 801b7c8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b7cc:	58c2      	ldr	r2, [r0, r3]
 801b7ce:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 801b7d2:	50c2      	str	r2, [r0, r3]
 801b7d4:	e03e      	b.n	801b854 <USB_EP0StartXfer+0x150>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 801b7d6:	2420      	movs	r4, #32
 801b7d8:	f44f 6630 	mov.w	r6, #2816	; 0xb00
 801b7dc:	fb14 6303 	smlabb	r3, r4, r3, r6
 801b7e0:	4403      	add	r3, r0
 801b7e2:	691d      	ldr	r5, [r3, #16]
 801b7e4:	0ced      	lsrs	r5, r5, #19
 801b7e6:	04ed      	lsls	r5, r5, #19
 801b7e8:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 801b7ea:	780b      	ldrb	r3, [r1, #0]
 801b7ec:	fb14 6303 	smlabb	r3, r4, r3, r6
 801b7f0:	4403      	add	r3, r0
 801b7f2:	691d      	ldr	r5, [r3, #16]
 801b7f4:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 801b7f8:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 801b7fc:	611d      	str	r5, [r3, #16]
      
    if (ep->xfer_len > 0U)
 801b7fe:	694b      	ldr	r3, [r1, #20]
 801b800:	b10b      	cbz	r3, 801b806 <USB_EP0StartXfer+0x102>
    {
      ep->xfer_len = ep->maxpacket;
 801b802:	688b      	ldr	r3, [r1, #8]
 801b804:	614b      	str	r3, [r1, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 801b806:	780b      	ldrb	r3, [r1, #0]
 801b808:	f44f 6530 	mov.w	r5, #2816	; 0xb00
 801b80c:	fb14 5303 	smlabb	r3, r4, r3, r5
 801b810:	4403      	add	r3, r0
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
    

    if (dma == 1U)
 801b812:	2a01      	cmp	r2, #1
    if (ep->xfer_len > 0U)
    {
      ep->xfer_len = ep->maxpacket;
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 801b814:	691e      	ldr	r6, [r3, #16]
 801b816:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 801b81a:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 801b81c:	780b      	ldrb	r3, [r1, #0]
 801b81e:	fb14 5403 	smlabb	r4, r4, r3, r5
 801b822:	4404      	add	r4, r0
 801b824:	688b      	ldr	r3, [r1, #8]
 801b826:	6926      	ldr	r6, [r4, #16]
 801b828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b82c:	ea43 0306 	orr.w	r3, r3, r6
 801b830:	6123      	str	r3, [r4, #16]
    

    if (dma == 1U)
 801b832:	d106      	bne.n	801b842 <USB_EP0StartXfer+0x13e>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801b834:	780b      	ldrb	r3, [r1, #0]
 801b836:	2220      	movs	r2, #32
 801b838:	fb12 5303 	smlabb	r3, r2, r3, r5
 801b83c:	4403      	add	r3, r0
 801b83e:	68ca      	ldr	r2, [r1, #12]
 801b840:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 801b842:	780a      	ldrb	r2, [r1, #0]
 801b844:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 801b848:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b84c:	58c2      	ldr	r2, [r0, r3]
 801b84e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 801b852:	50c2      	str	r2, [r0, r3]
  }
  return HAL_OK;
}
 801b854:	2000      	movs	r0, #0
 801b856:	bd70      	pop	{r4, r5, r6, pc}

0801b858 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801b858:	b510      	push	{r4, lr}
 801b85a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 801b85e:	b96c      	cbnz	r4, 801b87c <USB_WritePacket+0x24>
 801b860:	3303      	adds	r3, #3
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 801b862:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801b866:	f023 0303 	bic.w	r3, r3, #3
 801b86a:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 801b86e:	440b      	add	r3, r1
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
 801b870:	4299      	cmp	r1, r3
 801b872:	d003      	beq.n	801b87c <USB_WritePacket+0x24>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 801b874:	f851 0b04 	ldr.w	r0, [r1], #4
 801b878:	6010      	str	r0, [r2, #0]
 801b87a:	e7f9      	b.n	801b870 <USB_WritePacket+0x18>
    }
  }
  return HAL_OK;
}
 801b87c:	2000      	movs	r0, #0
 801b87e:	bd10      	pop	{r4, pc}

0801b880 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801b880:	3203      	adds	r2, #3
 801b882:	f022 0203 	bic.w	r2, r2, #3
 801b886:	440a      	add	r2, r1
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 801b888:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 801b88c:	4291      	cmp	r1, r2
 801b88e:	d003      	beq.n	801b898 <USB_ReadPacket+0x18>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 801b890:	6803      	ldr	r3, [r0, #0]
 801b892:	f841 3b04 	str.w	r3, [r1], #4
 801b896:	e7f9      	b.n	801b88c <USB_ReadPacket+0xc>
    
  }
  return ((void *)dest);
}
 801b898:	4608      	mov	r0, r1
 801b89a:	4770      	bx	lr

0801b89c <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 801b89c:	784b      	ldrb	r3, [r1, #1]
 801b89e:	2b01      	cmp	r3, #1
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 801b8a0:	b510      	push	{r4, lr}
 801b8a2:	f04f 0220 	mov.w	r2, #32
 801b8a6:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 801b8a8:	d114      	bne.n	801b8d4 <USB_EPSetStall+0x38>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 801b8aa:	f44f 6310 	mov.w	r3, #2304	; 0x900
 801b8ae:	fb12 3304 	smlabb	r3, r2, r4, r3
 801b8b2:	58c2      	ldr	r2, [r0, r3]
 801b8b4:	2a00      	cmp	r2, #0
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 801b8b6:	bfa2      	ittt	ge
 801b8b8:	58c2      	ldrge	r2, [r0, r3]
 801b8ba:	f022 4280 	bicge.w	r2, r2, #1073741824	; 0x40000000
 801b8be:	50c2      	strge	r2, [r0, r3]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801b8c0:	780a      	ldrb	r2, [r1, #0]
 801b8c2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 801b8c6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b8ca:	58c2      	ldr	r2, [r0, r3]
 801b8cc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 801b8d0:	50c2      	str	r2, [r0, r3]
 801b8d2:	e013      	b.n	801b8fc <USB_EPSetStall+0x60>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 801b8d4:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 801b8d8:	fb12 3304 	smlabb	r3, r2, r4, r3
 801b8dc:	58c2      	ldr	r2, [r0, r3]
 801b8de:	2a00      	cmp	r2, #0
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 801b8e0:	bfa2      	ittt	ge
 801b8e2:	58c2      	ldrge	r2, [r0, r3]
 801b8e4:	f022 4280 	bicge.w	r2, r2, #1073741824	; 0x40000000
 801b8e8:	50c2      	strge	r2, [r0, r3]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801b8ea:	780a      	ldrb	r2, [r1, #0]
 801b8ec:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 801b8f0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b8f4:	58c2      	ldr	r2, [r0, r3]
 801b8f6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 801b8fa:	50c2      	str	r2, [r0, r3]
  }
  return HAL_OK;
}
 801b8fc:	2000      	movs	r0, #0
 801b8fe:	bd10      	pop	{r4, pc}

0801b900 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 801b900:	784b      	ldrb	r3, [r1, #1]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b902:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 801b904:	2b01      	cmp	r3, #1
 801b906:	780b      	ldrb	r3, [r1, #0]
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801b908:	bf0c      	ite	eq
 801b90a:	f44f 6510 	moveq.w	r5, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801b90e:	f44f 6530 	movne.w	r5, #2816	; 0xb00
 801b912:	2220      	movs	r2, #32
 801b914:	fb12 5303 	smlabb	r3, r2, r3, r5
 801b918:	581c      	ldr	r4, [r3, r0]
 801b91a:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
 801b91e:	501c      	str	r4, [r3, r0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 801b920:	78cb      	ldrb	r3, [r1, #3]
 801b922:	3b02      	subs	r3, #2
 801b924:	2b01      	cmp	r3, #1
 801b926:	d806      	bhi.n	801b936 <USB_EPClearStall+0x36>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801b928:	780b      	ldrb	r3, [r1, #0]
 801b92a:	fb12 5203 	smlabb	r2, r2, r3, r5
 801b92e:	5813      	ldr	r3, [r2, r0]
 801b930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b934:	5013      	str	r3, [r2, r0]
    }    
  }
  return HAL_OK;
}
 801b936:	2000      	movs	r0, #0
 801b938:	bd30      	pop	{r4, r5, pc}

0801b93a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 801b93a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 801b93e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801b942:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 801b946:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 801b94a:	0109      	lsls	r1, r1, #4
 801b94c:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 801b950:	430b      	orrs	r3, r1
 801b952:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 801b956:	2000      	movs	r0, #0
 801b958:	4770      	bx	lr

0801b95a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 801b95a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 801b95c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 801b960:	f023 0302 	bic.w	r3, r3, #2
 801b964:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 801b968:	2003      	movs	r0, #3
 801b96a:	f000 fd3b 	bl	801c3e4 <HAL_Delay>
  
  return HAL_OK;  
}
 801b96e:	2000      	movs	r0, #0
 801b970:	bd08      	pop	{r3, pc}

0801b972 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 801b972:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 801b974:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 801b978:	f043 0302 	orr.w	r3, r3, #2
 801b97c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 801b980:	2003      	movs	r0, #3
 801b982:	f000 fd2f 	bl	801c3e4 <HAL_Delay>
  
  return HAL_OK;  
}
 801b986:	2000      	movs	r0, #0
 801b988:	bd08      	pop	{r3, pc}

0801b98a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 801b98a:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 801b98c:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 801b98e:	4010      	ands	r0, r2
 801b990:	4770      	bx	lr

0801b992 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 801b992:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 801b996:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  v &= USBx_DEVICE->DAINTMSK;
 801b99a:	69db      	ldr	r3, [r3, #28]
  return ((v & 0xffff0000U) >> 16U);
 801b99c:	4018      	ands	r0, r3
}
 801b99e:	0c00      	lsrs	r0, r0, #16
 801b9a0:	4770      	bx	lr

0801b9a2 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 801b9a2:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 801b9a6:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  v &= USBx_DEVICE->DAINTMSK;
 801b9aa:	69db      	ldr	r3, [r3, #28]
  return ((v & 0xFFFFU));
 801b9ac:	4018      	ands	r0, r3
}
 801b9ae:	b280      	uxth	r0, r0
 801b9b0:	4770      	bx	lr

0801b9b2 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 801b9b2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 801b9b6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 801b9ba:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 801b9be:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 801b9c0:	6940      	ldr	r0, [r0, #20]
  return v;
}
 801b9c2:	4010      	ands	r0, r2
 801b9c4:	4770      	bx	lr

0801b9c6 <USB_ReadDevInEPInterrupt>:
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 801b9c6:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 801b9ca:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 801b9ce:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 801b9d2:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  return v;
 801b9d6:	fa23 f101 	lsr.w	r1, r3, r1
 801b9da:	01c9      	lsls	r1, r1, #7
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 801b9dc:	6880      	ldr	r0, [r0, #8]
  return v;
 801b9de:	b2c9      	uxtb	r1, r1
 801b9e0:	4311      	orrs	r1, r2
}
 801b9e2:	4008      	ands	r0, r1
 801b9e4:	4770      	bx	lr

0801b9e6 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 801b9e6:	6940      	ldr	r0, [r0, #20]
}
 801b9e8:	f000 0001 	and.w	r0, r0, #1
 801b9ec:	4770      	bx	lr

0801b9ee <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801b9ee:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801b9f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801b9f6:	f023 0307 	bic.w	r3, r3, #7
 801b9fa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 801b9fe:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 801ba02:	689a      	ldr	r2, [r3, #8]
 801ba04:	f002 0206 	and.w	r2, r2, #6
 801ba08:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 801ba0a:	bf02      	ittt	eq
 801ba0c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 801ba10:	f042 0203 	orreq.w	r2, r2, #3
 801ba14:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801ba18:	685a      	ldr	r2, [r3, #4]
 801ba1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ba1e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 801ba20:	2000      	movs	r0, #0
 801ba22:	4770      	bx	lr

0801ba24 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801ba24:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801ba26:	2400      	movs	r4, #0
 801ba28:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 801ba2c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 801ba30:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 801ba34:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801ba38:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 801ba3c:	f044 0418 	orr.w	r4, r4, #24
 801ba40:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 801ba44:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 801ba48:	2901      	cmp	r1, #1
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801ba4a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 801ba4e:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  
  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 801ba52:	bf08      	it	eq
 801ba54:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 801ba58:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801ba5c:	bf04      	itt	eq
 801ba5e:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 801ba62:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 801ba66:	2000      	movs	r0, #0
 801ba68:	bd10      	pop	{r4, pc}
	...

0801ba6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801ba6c:	4b0a      	ldr	r3, [pc, #40]	; (801ba98 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801ba6e:	3b01      	subs	r3, #1
 801ba70:	d101      	bne.n	801ba76 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 801ba72:	2003      	movs	r0, #3
 801ba74:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801ba76:	6902      	ldr	r2, [r0, #16]
 801ba78:	2a00      	cmp	r2, #0
 801ba7a:	daf8      	bge.n	801ba6e <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801ba7c:	6903      	ldr	r3, [r0, #16]
 801ba7e:	4a06      	ldr	r2, [pc, #24]	; (801ba98 <USB_CoreReset+0x2c>)
 801ba80:	f043 0301 	orr.w	r3, r3, #1
 801ba84:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 801ba86:	3a01      	subs	r2, #1
 801ba88:	d0f3      	beq.n	801ba72 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801ba8a:	6903      	ldr	r3, [r0, #16]
 801ba8c:	f013 0301 	ands.w	r3, r3, #1
 801ba90:	d1f9      	bne.n	801ba86 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 801ba92:	4618      	mov	r0, r3
}
 801ba94:	4770      	bx	lr
 801ba96:	bf00      	nop
 801ba98:	00030d41 	.word	0x00030d41

0801ba9c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 801ba9c:	4b01      	ldr	r3, [pc, #4]	; (801baa4 <HAL_RCC_GetHCLKFreq+0x8>)
 801ba9e:	6818      	ldr	r0, [r3, #0]
 801baa0:	4770      	bx	lr
 801baa2:	bf00      	nop
 801baa4:	1000237c 	.word	0x1000237c

0801baa8 <USBD_AUDIO_GetCfgDesc>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_AUDIO_CfgDesc);
 801baa8:	f240 23db 	movw	r3, #731	; 0x2db
 801baac:	8003      	strh	r3, [r0, #0]
  return USBD_AUDIO_CfgDesc;
}
 801baae:	4801      	ldr	r0, [pc, #4]	; (801bab4 <USBD_AUDIO_GetCfgDesc+0xc>)
 801bab0:	4770      	bx	lr
 801bab2:	bf00      	nop
 801bab4:	100027b4 	.word	0x100027b4

0801bab8 <USBD_AUDIO_DataIn>:
 */
static uint8_t  USBD_AUDIO_DataIn (USBD_HandleTypeDef *pdev,
                                   uint8_t epnum)
{
  flag = 0;
  usb_stats[0]++;
 801bab8:	4a03      	ldr	r2, [pc, #12]	; (801bac8 <USBD_AUDIO_DataIn+0x10>)
 * @retval status
 */
static uint8_t  USBD_AUDIO_DataIn (USBD_HandleTypeDef *pdev,
                                   uint8_t epnum)
{
  flag = 0;
 801baba:	4b04      	ldr	r3, [pc, #16]	; (801bacc <USBD_AUDIO_DataIn+0x14>)
 801babc:	2000      	movs	r0, #0
 801babe:	7018      	strb	r0, [r3, #0]
  usb_stats[0]++;
 801bac0:	6813      	ldr	r3, [r2, #0]
 801bac2:	3301      	adds	r3, #1
 801bac4:	6013      	str	r3, [r2, #0]
  /* Only OUT data are processed */
  return USBD_OK;
}
 801bac6:	4770      	bx	lr
 801bac8:	10003498 	.word	0x10003498
 801bacc:	10002e90 	.word	0x10002e90

0801bad0 <USBD_AUDIO_EP0_RxReady>:
 * @retval status
 */
static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 801bad0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 801bad4:	781a      	ldrb	r2, [r3, #0]
 801bad6:	2a81      	cmp	r2, #129	; 0x81
 801bad8:	d107      	bne.n	801baea <USBD_AUDIO_EP0_RxReady+0x1a>
    {
      /* In this driver, to simplify code, only SET_CUR request is managed */

      if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 801bada:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 801bade:	2a02      	cmp	r2, #2
        {
          haudio->control.cmd = 0;
 801bae0:	bf02      	ittt	eq
 801bae2:	2200      	moveq	r2, #0
 801bae4:	701a      	strbeq	r2, [r3, #0]
          haudio->control.len = 0;
 801bae6:	f883 2041 	strbeq.w	r2, [r3, #65]	; 0x41
        }
    }

  return USBD_OK;
}
 801baea:	2000      	movs	r0, #0
 801baec:	4770      	bx	lr

0801baee <USBD_AUDIO_EP0_TxReady>:
 */
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
  /* Only OUT control data are processed */
  return USBD_OK;
}
 801baee:	2000      	movs	r0, #0
 801baf0:	4770      	bx	lr
	...

0801baf4 <USBD_AUDIO_IsoOutIncomplete>:
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  usb_stats[3]++;
 801baf4:	4a02      	ldr	r2, [pc, #8]	; (801bb00 <USBD_AUDIO_IsoOutIncomplete+0xc>)
 801baf6:	68d3      	ldr	r3, [r2, #12]
 801baf8:	3301      	adds	r3, #1
 801bafa:	60d3      	str	r3, [r2, #12]
  return USBD_OK;
}
 801bafc:	2000      	movs	r0, #0
 801bafe:	4770      	bx	lr
 801bb00:	10003498 	.word	0x10003498

0801bb04 <USBD_AUDIO_GetDeviceQualifierDesc>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 801bb04:	230a      	movs	r3, #10
 801bb06:	8003      	strh	r3, [r0, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
}
 801bb08:	4800      	ldr	r0, [pc, #0]	; (801bb0c <USBD_AUDIO_GetDeviceQualifierDesc+0x8>)
 801bb0a:	4770      	bx	lr
 801bb0c:	10002a90 	.word	0x10002a90

0801bb10 <USBD_AUDIO_SOF>:
 *         handle SOF event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{
 801bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;

  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  usb_stats[4]++;
 801bb12:	4a26      	ldr	r2, [pc, #152]	; (801bbac <USBD_AUDIO_SOF+0x9c>)
 */
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;

  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801bb14:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 801bb18:	681d      	ldr	r5, [r3, #0]

  usb_stats[4]++;
 801bb1a:	6913      	ldr	r3, [r2, #16]
 801bb1c:	3301      	adds	r3, #1
 801bb1e:	6113      	str	r3, [r2, #16]

  if (usbd_audio_AltSet !=0)
 801bb20:	4b23      	ldr	r3, [pc, #140]	; (801bbb0 <USBD_AUDIO_SOF+0xa0>)
 801bb22:	6859      	ldr	r1, [r3, #4]
 801bb24:	4616      	mov	r6, r2
 801bb26:	2900      	cmp	r1, #0
 801bb28:	d03e      	beq.n	801bba8 <USBD_AUDIO_SOF+0x98>
    {
      int fdbkNum = (inQueueUSB1.count < 5 || inQueueUSB2.count < 5)?1:0;
 801bb2a:	4a22      	ldr	r2, [pc, #136]	; (801bbb4 <USBD_AUDIO_SOF+0xa4>)
 801bb2c:	6892      	ldr	r2, [r2, #8]
 801bb2e:	2a04      	cmp	r2, #4
 801bb30:	d906      	bls.n	801bb40 <USBD_AUDIO_SOF+0x30>
 801bb32:	4a21      	ldr	r2, [pc, #132]	; (801bbb8 <USBD_AUDIO_SOF+0xa8>)
 801bb34:	6892      	ldr	r2, [r2, #8]
 801bb36:	2a04      	cmp	r2, #4
 801bb38:	bf8c      	ite	hi
 801bb3a:	2200      	movhi	r2, #0
 801bb3c:	2201      	movls	r2, #1
 801bb3e:	e000      	b.n	801bb42 <USBD_AUDIO_SOF+0x32>
 801bb40:	2201      	movs	r2, #1
      feedback_data = usbFmt[usbd_audio_AltSet].feedback[fdbkNum];
 801bb42:	685c      	ldr	r4, [r3, #4]
 801bb44:	4f1d      	ldr	r7, [pc, #116]	; (801bbbc <USBD_AUDIO_SOF+0xac>)
 801bb46:	491a      	ldr	r1, [pc, #104]	; (801bbb0 <USBD_AUDIO_SOF+0xa0>)
 801bb48:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 801bb4c:	4422      	add	r2, r4
 801bb4e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 801bb52:	6952      	ldr	r2, [r2, #20]
 801bb54:	609a      	str	r2, [r3, #8]
      usb_stats[5] = feedback_data;
 801bb56:	689a      	ldr	r2, [r3, #8]
 801bb58:	6172      	str	r2, [r6, #20]
      usb_stats[7] = usbd_audio_AltSet;
 801bb5a:	685a      	ldr	r2, [r3, #4]
 801bb5c:	61f2      	str	r2, [r6, #28]

      static int cnt = 0;
      cnt++;
 801bb5e:	68da      	ldr	r2, [r3, #12]
 801bb60:	3201      	adds	r2, #1
      if(cnt == 1000)
 801bb62:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
      feedback_data = usbFmt[usbd_audio_AltSet].feedback[fdbkNum];
      usb_stats[5] = feedback_data;
      usb_stats[7] = usbd_audio_AltSet;

      static int cnt = 0;
      cnt++;
 801bb66:	60da      	str	r2, [r3, #12]
      if(cnt == 1000)
 801bb68:	d10c      	bne.n	801bb84 <USBD_AUDIO_SOF+0x74>
	{
	  usb_stats[6] = total/usbFmt[usbd_audio_AltSet].bytesPerSample;
 801bb6a:	684a      	ldr	r2, [r1, #4]
 801bb6c:	241c      	movs	r4, #28
 801bb6e:	fb04 7402 	mla	r4, r4, r2, r7
 801bb72:	690a      	ldr	r2, [r1, #16]
 801bb74:	6924      	ldr	r4, [r4, #16]
 801bb76:	fbb2 f2f4 	udiv	r2, r2, r4
 801bb7a:	4c0c      	ldr	r4, [pc, #48]	; (801bbac <USBD_AUDIO_SOF+0x9c>)
 801bb7c:	61a2      	str	r2, [r4, #24]
	  total = 0;
 801bb7e:	2200      	movs	r2, #0
 801bb80:	610a      	str	r2, [r1, #16]
	  cnt=0;
 801bb82:	60ca      	str	r2, [r1, #12]
	}
      
      if (flag == 0)
 801bb84:	781b      	ldrb	r3, [r3, #0]
 801bb86:	4c0a      	ldr	r4, [pc, #40]	; (801bbb0 <USBD_AUDIO_SOF+0xa0>)
 801bb88:	b973      	cbnz	r3, 801bba8 <USBD_AUDIO_SOF+0x98>
        {
          if ((USBx_DEVICE->DSTS & (USB_OTG_DSTS_FNSOF) & (1 << 8))== frame_number)
 801bb8a:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 801bb8e:	6962      	ldr	r2, [r4, #20]
 801bb90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bb94:	4293      	cmp	r3, r2
 801bb96:	d107      	bne.n	801bba8 <USBD_AUDIO_SOF+0x98>
            {

              USBD_LL_Transmit(pdev, AUDIO_IN_EP, (uint8_t *) &feedback_data, 3);
 801bb98:	2303      	movs	r3, #3
 801bb9a:	f104 0208 	add.w	r2, r4, #8
 801bb9e:	2181      	movs	r1, #129	; 0x81
 801bba0:	f000 fb79 	bl	801c296 <USBD_LL_Transmit>
              flag = 1;
 801bba4:	2301      	movs	r3, #1
 801bba6:	7023      	strb	r3, [r4, #0]
            }
        };
    }
  return USBD_OK;
}
 801bba8:	2000      	movs	r0, #0
 801bbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbac:	10003498 	.word	0x10003498
 801bbb0:	10002e90 	.word	0x10002e90
 801bbb4:	10002644 	.word	0x10002644
 801bbb8:	10002678 	.word	0x10002678
 801bbbc:	0803f72c 	.word	0x0803f72c

0801bbc0 <USBD_AUDIO_DeInit>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_AUDIO_DeInit (USBD_HandleTypeDef *pdev,
                                   uint8_t cfgidx)
{
 801bbc0:	b510      	push	{r4, lr}

  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 801bbc2:	2181      	movs	r1, #129	; 0x81
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_AUDIO_DeInit (USBD_HandleTypeDef *pdev,
                                   uint8_t cfgidx)
{
 801bbc4:	4604      	mov	r4, r0

  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 801bbc6:	f000 fb37 	bl	801c238 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, AUDIO_OUT_EP);
 801bbca:	2101      	movs	r1, #1
 801bbcc:	4620      	mov	r0, r4
 801bbce:	f000 fb33 	bl	801c238 <USBD_LL_FlushEP>

  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 801bbd2:	2181      	movs	r1, #129	; 0x81
 801bbd4:	4620      	mov	r0, r4
 801bbd6:	f000 fb28 	bl	801c22a <USBD_LL_CloseEP>
                  AUDIO_IN_EP);
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 801bbda:	2101      	movs	r1, #1
 801bbdc:	4620      	mov	r0, r4
 801bbde:	f000 fb24 	bl	801c22a <USBD_LL_CloseEP>
                  AUDIO_OUT_EP);

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 801bbe2:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 801bbe6:	b128      	cbz	r0, 801bbf4 <USBD_AUDIO_DeInit+0x34>
    {
      USBD_free(pdev->pClassData);
 801bbe8:	3814      	subs	r0, #20
 801bbea:	f7f9 fc21 	bl	8015430 <bFree>
      pdev->pClassData = NULL;
 801bbee:	2300      	movs	r3, #0
 801bbf0:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
    }

  return USBD_OK;
}
 801bbf4:	2000      	movs	r0, #0
 801bbf6:	bd10      	pop	{r4, pc}

0801bbf8 <USBD_AUDIO_Init>:
                                 uint8_t cfgidx)
{
  (void)checkDesc;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 801bbf8:	2201      	movs	r2, #1
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_AUDIO_Init (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 801bbfa:	b538      	push	{r3, r4, r5, lr}
  (void)checkDesc;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 801bbfc:	4611      	mov	r1, r2
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_AUDIO_Init (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 801bbfe:	4604      	mov	r4, r0
  (void)checkDesc;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 801bc00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bc04:	f000 fb07 	bl	801c216 <USBD_LL_OpenEP>
                 AUDIO_OUT_EP,
                 USBD_EP_TYPE_ISOC,
                 AUDIO_OUT_PACKET);

  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 801bc08:	2303      	movs	r3, #3
 801bc0a:	2201      	movs	r2, #1
 801bc0c:	2181      	movs	r1, #129	; 0x81
 801bc0e:	4620      	mov	r0, r4
 801bc10:	f000 fb01 	bl	801c216 <USBD_LL_OpenEP>
                 AUDIO_IN_EP,
                 USBD_EP_TYPE_ISOC,
                 0x03);

  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 801bc14:	2181      	movs	r1, #129	; 0x81
 801bc16:	4620      	mov	r0, r4
 801bc18:	f000 fb0e 	bl	801c238 <USBD_LL_FlushEP>

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof (USBD_AUDIO_HandleTypeDef));
 801bc1c:	2043      	movs	r0, #67	; 0x43
 801bc1e:	f7f9 f9ad 	bl	8014f7c <bAlloc>
 801bc22:	b100      	cbz	r0, 801bc26 <USBD_AUDIO_Init+0x2e>
 801bc24:	3014      	adds	r0, #20
 801bc26:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218

  if(pdev->pClassData == NULL)
 801bc2a:	b180      	cbz	r0, 801bc4e <USBD_AUDIO_Init+0x56>
    }
  else
    {

      /* Prepare Out endpoint to receive 1st packet */
      if(!currentBuffer)
 801bc2c:	4d09      	ldr	r5, [pc, #36]	; (801bc54 <USBD_AUDIO_Init+0x5c>)
 801bc2e:	69ab      	ldr	r3, [r5, #24]
 801bc30:	b923      	cbnz	r3, 801bc3c <USBD_AUDIO_Init+0x44>
        {
          currentBuffer = bAlloc(USB_BUF_SIZE);
 801bc32:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801bc36:	f7f9 f9a1 	bl	8014f7c <bAlloc>
 801bc3a:	61a8      	str	r0, [r5, #24]
        }

      USBD_LL_PrepareReceive(pdev,
 801bc3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bc40:	4a05      	ldr	r2, [pc, #20]	; (801bc58 <USBD_AUDIO_Init+0x60>)
 801bc42:	2101      	movs	r1, #1
 801bc44:	4620      	mov	r0, r4
 801bc46:	f000 fb2d 	bl	801c2a4 <USBD_LL_PrepareReceive>
                             AUDIO_OUT_EP,
                             xferBuffer,
                             AUDIO_OUT_PACKET);
    }
  return USBD_OK;
 801bc4a:	2000      	movs	r0, #0
 801bc4c:	bd38      	pop	{r3, r4, r5, pc}
  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof (USBD_AUDIO_HandleTypeDef));

  if(pdev->pClassData == NULL)
    {
      return USBD_FAIL;
 801bc4e:	2002      	movs	r0, #2
                             AUDIO_OUT_EP,
                             xferBuffer,
                             AUDIO_OUT_PACKET);
    }
  return USBD_OK;
}
 801bc50:	bd38      	pop	{r3, r4, r5, pc}
 801bc52:	bf00      	nop
 801bc54:	10002e90 	.word	0x10002e90
 801bc58:	10002eac 	.word	0x10002eac

0801bc5c <USBD_AUDIO_IsoINIncomplete>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t  USBD_AUDIO_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801bc5c:	b508      	push	{r3, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;

  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801bc5e:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220

  frame_number = ( USBx_DEVICE->DSTS & (USB_OTG_DSTS_FNSOF) & (1 << 8));
 801bc62:	681b      	ldr	r3, [r3, #0]
 801bc64:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 801bc68:	4b08      	ldr	r3, [pc, #32]	; (801bc8c <USBD_AUDIO_IsoINIncomplete+0x30>)
 801bc6a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801bc6e:	615a      	str	r2, [r3, #20]

  if (flag)
 801bc70:	781a      	ldrb	r2, [r3, #0]
 801bc72:	b142      	cbz	r2, 801bc86 <USBD_AUDIO_IsoINIncomplete+0x2a>
    {
	  usb_stats[2]++;
 801bc74:	4906      	ldr	r1, [pc, #24]	; (801bc90 <USBD_AUDIO_IsoINIncomplete+0x34>)
 801bc76:	688a      	ldr	r2, [r1, #8]
 801bc78:	3201      	adds	r2, #1
 801bc7a:	608a      	str	r2, [r1, #8]
      flag = 0;
 801bc7c:	2200      	movs	r2, #0
      USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 801bc7e:	2181      	movs	r1, #129	; 0x81
  frame_number = ( USBx_DEVICE->DSTS & (USB_OTG_DSTS_FNSOF) & (1 << 8));

  if (flag)
    {
	  usb_stats[2]++;
      flag = 0;
 801bc80:	701a      	strb	r2, [r3, #0]
      USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 801bc82:	f000 fad9 	bl	801c238 <USBD_LL_FlushEP>
    };

  return USBD_OK;

}
 801bc86:	2000      	movs	r0, #0
 801bc88:	bd08      	pop	{r3, pc}
 801bc8a:	bf00      	nop
 801bc8c:	10002e90 	.word	0x10002e90
 801bc90:	10003498 	.word	0x10003498

0801bc94 <USBD_AUDIO_DataOut>:
 * @retval status
 */
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev,
                                    uint8_t epnum)
{
  if (epnum == AUDIO_OUT_EP)
 801bc94:	2901      	cmp	r1, #1
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev,
                                    uint8_t epnum)
{
 801bc96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc9a:	4607      	mov	r7, r0
  if (epnum == AUDIO_OUT_EP)
 801bc9c:	d17c      	bne.n	801bd98 <USBD_AUDIO_DataOut+0x104>
    {

      usb_stats[1]++;
 801bc9e:	4a40      	ldr	r2, [pc, #256]	; (801bda0 <USBD_AUDIO_DataOut+0x10c>)
      PCD_HandleTypeDef *hpcd = pdev->pData;
      USB_OTG_EPTypeDef *ep = &hpcd->OUT_ep[epnum & 0x7FU];
      int copySize = ep->xfer_count;
      //Alloc a new buffer
      if(!currentBuffer)
 801bca0:	4d40      	ldr	r5, [pc, #256]	; (801bda4 <USBD_AUDIO_DataOut+0x110>)
                                    uint8_t epnum)
{
  if (epnum == AUDIO_OUT_EP)
    {

      usb_stats[1]++;
 801bca2:	6853      	ldr	r3, [r2, #4]
      PCD_HandleTypeDef *hpcd = pdev->pData;
 801bca4:	f8d0 6220 	ldr.w	r6, [r0, #544]	; 0x220
                                    uint8_t epnum)
{
  if (epnum == AUDIO_OUT_EP)
    {

      usb_stats[1]++;
 801bca8:	3301      	adds	r3, #1
 801bcaa:	6053      	str	r3, [r2, #4]
      PCD_HandleTypeDef *hpcd = pdev->pData;
      USB_OTG_EPTypeDef *ep = &hpcd->OUT_ep[epnum & 0x7FU];
      int copySize = ep->xfer_count;
      //Alloc a new buffer
      if(!currentBuffer)
 801bcac:	69ab      	ldr	r3, [r5, #24]
    {

      usb_stats[1]++;
      PCD_HandleTypeDef *hpcd = pdev->pData;
      USB_OTG_EPTypeDef *ep = &hpcd->OUT_ep[epnum & 0x7FU];
      int copySize = ep->xfer_count;
 801bcae:	f8d6 4210 	ldr.w	r4, [r6, #528]	; 0x210
      //Alloc a new buffer
      if(!currentBuffer)
 801bcb2:	b923      	cbnz	r3, 801bcbe <USBD_AUDIO_DataOut+0x2a>
	currentBuffer = bAlloc(USB_BUF_SIZE);
 801bcb4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801bcb8:	f7f9 f960 	bl	8014f7c <bAlloc>
 801bcbc:	61a8      	str	r0, [r5, #24]

      if(currentBuffer)
 801bcbe:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801bcc2:	4a38      	ldr	r2, [pc, #224]	; (801bda4 <USBD_AUDIO_DataOut+0x110>)
 801bcc4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801bdb4 <USBD_AUDIO_DataOut+0x120>
 801bcc8:	f1b9 0f00 	cmp.w	r9, #0
 801bccc:	d042      	beq.n	801bd54 <USBD_AUDIO_DataOut+0xc0>
	{
	  if(alignReset)
 801bcce:	f892 341c 	ldrb.w	r3, [r2, #1052]	; 0x41c
 801bcd2:	b123      	cbz	r3, 801bcde <USBD_AUDIO_DataOut+0x4a>
	    {
	      alignReset = 0;
 801bcd4:	2300      	movs	r3, #0
 801bcd6:	f882 341c 	strb.w	r3, [r2, #1052]	; 0x41c
	      currentBuffer->size = 0;
 801bcda:	f8a9 3000 	strh.w	r3, [r9]
	    }

	  //Get copy length as min of remaning space in buffer and available data
	  copySize  = GET_MIN(USB_BUF_SIZE-currentBuffer->size, ep->xfer_count);
 801bcde:	f8b9 0000 	ldrh.w	r0, [r9]
	  //Make sure that dst buffer is a multiple of alignment by removing alignment rest
	  copySize -= GET_ALIGN_REST(copySize + currentBuffer->size);
 801bce2:	686a      	ldr	r2, [r5, #4]
	      alignReset = 0;
	      currentBuffer->size = 0;
	    }

	  //Get copy length as min of remaning space in buffer and available data
	  copySize  = GET_MIN(USB_BUF_SIZE-currentBuffer->size, ep->xfer_count);
 801bce4:	f8d6 3210 	ldr.w	r3, [r6, #528]	; 0x210
	  //Make sure that dst buffer is a multiple of alignment by removing alignment rest
	  copySize -= GET_ALIGN_REST(copySize + currentBuffer->size);
 801bce8:	211c      	movs	r1, #28
	      alignReset = 0;
	      currentBuffer->size = 0;
	    }

	  //Get copy length as min of remaning space in buffer and available data
	  copySize  = GET_MIN(USB_BUF_SIZE-currentBuffer->size, ep->xfer_count);
 801bcea:	f5c0 6480 	rsb	r4, r0, #1024	; 0x400
	  //Make sure that dst buffer is a multiple of alignment by removing alignment rest
	  copySize -= GET_ALIGN_REST(copySize + currentBuffer->size);
 801bcee:	fb01 8202 	mla	r2, r1, r2, r8
	      alignReset = 0;
	      currentBuffer->size = 0;
	    }

	  //Get copy length as min of remaning space in buffer and available data
	  copySize  = GET_MIN(USB_BUF_SIZE-currentBuffer->size, ep->xfer_count);
 801bcf2:	42a3      	cmp	r3, r4
 801bcf4:	bf28      	it	cs
 801bcf6:	4623      	movcs	r3, r4
	  //Make sure that dst buffer is a multiple of alignment by removing alignment rest
	  copySize -= GET_ALIGN_REST(copySize + currentBuffer->size);
 801bcf8:	68d1      	ldr	r1, [r2, #12]
 801bcfa:	18c4      	adds	r4, r0, r3
 801bcfc:	fb94 f2f1 	sdiv	r2, r4, r1
 801bd00:	fb01 4412 	mls	r4, r1, r2, r4
 801bd04:	1b1c      	subs	r4, r3, r4
	  //Copy data to buffer
	  memcpy(&currentBuffer->data[currentBuffer->size], xferBuffer, copySize);
 801bd06:	4448      	add	r0, r9
 801bd08:	4927      	ldr	r1, [pc, #156]	; (801bda8 <USBD_AUDIO_DataOut+0x114>)
 801bd0a:	4622      	mov	r2, r4
 801bd0c:	3014      	adds	r0, #20
 801bd0e:	f001 f997 	bl	801d040 <memcpy>
	  //Update size
	  currentBuffer->size += copySize;
 801bd12:	f8b9 3000 	ldrh.w	r3, [r9]
 	  total+=currentBuffer->size;
 801bd16:	692a      	ldr	r2, [r5, #16]
	  //Make sure that dst buffer is a multiple of alignment by removing alignment rest
	  copySize -= GET_ALIGN_REST(copySize + currentBuffer->size);
	  //Copy data to buffer
	  memcpy(&currentBuffer->data[currentBuffer->size], xferBuffer, copySize);
	  //Update size
	  currentBuffer->size += copySize;
 801bd18:	4423      	add	r3, r4
 801bd1a:	b29b      	uxth	r3, r3
 801bd1c:	f8a9 3000 	strh.w	r3, [r9]
 	  total+=currentBuffer->size;
	  //Send for processing. If failed reuse the buffer
	  bBuffer_t *b1 = bCopy(currentBuffer);
 801bd20:	4648      	mov	r0, r9
	  copySize -= GET_ALIGN_REST(copySize + currentBuffer->size);
	  //Copy data to buffer
	  memcpy(&currentBuffer->data[currentBuffer->size], xferBuffer, copySize);
	  //Update size
	  currentBuffer->size += copySize;
 	  total+=currentBuffer->size;
 801bd22:	4413      	add	r3, r2
 801bd24:	612b      	str	r3, [r5, #16]
	  //Send for processing. If failed reuse the buffer
	  bBuffer_t *b1 = bCopy(currentBuffer);
 801bd26:	f7f9 fccd 	bl	80156c4 <bCopy>
 801bd2a:	4682      	mov	sl, r0
	  bBuffer_t *b2 = bCopy(currentBuffer);
 801bd2c:	69a8      	ldr	r0, [r5, #24]
 801bd2e:	f7f9 fcc9 	bl	80156c4 <bCopy>
	  if(bEnqueue(&inQueueUSB1, b1) != 0) bFree(b1);
 801bd32:	4651      	mov	r1, sl
	  //Update size
	  currentBuffer->size += copySize;
 	  total+=currentBuffer->size;
	  //Send for processing. If failed reuse the buffer
	  bBuffer_t *b1 = bCopy(currentBuffer);
	  bBuffer_t *b2 = bCopy(currentBuffer);
 801bd34:	4681      	mov	r9, r0
	  if(bEnqueue(&inQueueUSB1, b1) != 0) bFree(b1);
 801bd36:	481d      	ldr	r0, [pc, #116]	; (801bdac <USBD_AUDIO_DataOut+0x118>)
 801bd38:	f7f9 f8ad 	bl	8014e96 <bEnqueue>
 801bd3c:	b110      	cbz	r0, 801bd44 <USBD_AUDIO_DataOut+0xb0>
 801bd3e:	4650      	mov	r0, sl
 801bd40:	f7f9 fb76 	bl	8015430 <bFree>
	  if(bEnqueue(&inQueueUSB2, b2) != 0) bFree(b2);
 801bd44:	4649      	mov	r1, r9
 801bd46:	481a      	ldr	r0, [pc, #104]	; (801bdb0 <USBD_AUDIO_DataOut+0x11c>)
 801bd48:	f7f9 f8a5 	bl	8014e96 <bEnqueue>
 801bd4c:	b110      	cbz	r0, 801bd54 <USBD_AUDIO_DataOut+0xc0>
 801bd4e:	4648      	mov	r0, r9
 801bd50:	f7f9 fb6e 	bl	8015430 <bFree>
	  
	}

      //Alloc a new buffer if necessary
      if(!currentBuffer)
 801bd54:	69ab      	ldr	r3, [r5, #24]
 801bd56:	b92b      	cbnz	r3, 801bd64 <USBD_AUDIO_DataOut+0xd0>
	currentBuffer = bAlloc(USB_BUF_SIZE);
 801bd58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801bd5c:	f7f9 f90e 	bl	8014f7c <bAlloc>
 801bd60:	4b10      	ldr	r3, [pc, #64]	; (801bda4 <USBD_AUDIO_DataOut+0x110>)
 801bd62:	6198      	str	r0, [r3, #24]

      currentBuffer->size = 0;
 801bd64:	69a8      	ldr	r0, [r5, #24]
 801bd66:	2300      	movs	r3, #0
 801bd68:	8003      	strh	r3, [r0, #0]
      if(currentBuffer && ep->xfer_count > copySize)
 801bd6a:	f8d6 2210 	ldr.w	r2, [r6, #528]	; 0x210
 801bd6e:	42a2      	cmp	r2, r4
 801bd70:	d907      	bls.n	801bd82 <USBD_AUDIO_DataOut+0xee>
	{
	  //move rest of data to a new buffer
	  currentBuffer->size = ep->xfer_count - copySize;
 801bd72:	1b12      	subs	r2, r2, r4
	  memcpy(currentBuffer->data, &xferBuffer[copySize], currentBuffer->size);
 801bd74:	490c      	ldr	r1, [pc, #48]	; (801bda8 <USBD_AUDIO_DataOut+0x114>)

      currentBuffer->size = 0;
      if(currentBuffer && ep->xfer_count > copySize)
	{
	  //move rest of data to a new buffer
	  currentBuffer->size = ep->xfer_count - copySize;
 801bd76:	b292      	uxth	r2, r2
 801bd78:	f820 2b14 	strh.w	r2, [r0], #20
	  memcpy(currentBuffer->data, &xferBuffer[copySize], currentBuffer->size);
 801bd7c:	4421      	add	r1, r4
 801bd7e:	f001 f95f 	bl	801d040 <memcpy>
	}
	
      USBD_LL_PrepareReceive(pdev,
			     AUDIO_OUT_EP,
			     xferBuffer,
			     usbFmt[usbd_audio_AltSet].rxSize);
 801bd82:	686b      	ldr	r3, [r5, #4]
 801bd84:	221c      	movs	r2, #28
 801bd86:	fb02 8803 	mla	r8, r2, r3, r8
	  //move rest of data to a new buffer
	  currentBuffer->size = ep->xfer_count - copySize;
	  memcpy(currentBuffer->data, &xferBuffer[copySize], currentBuffer->size);
	}
	
      USBD_LL_PrepareReceive(pdev,
 801bd8a:	2101      	movs	r1, #1
 801bd8c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801bd90:	4a05      	ldr	r2, [pc, #20]	; (801bda8 <USBD_AUDIO_DataOut+0x114>)
 801bd92:	4638      	mov	r0, r7
 801bd94:	f000 fa86 	bl	801c2a4 <USBD_LL_PrepareReceive>
			     usbFmt[usbd_audio_AltSet].rxSize);

    }

  return USBD_OK;
}
 801bd98:	2000      	movs	r0, #0
 801bd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd9e:	bf00      	nop
 801bda0:	10003498 	.word	0x10003498
 801bda4:	10002e90 	.word	0x10002e90
 801bda8:	10002eac 	.word	0x10002eac
 801bdac:	10002644 	.word	0x10002644
 801bdb0:	10002678 	.word	0x10002678
 801bdb4:	0803f72c 	.word	0x0803f72c

0801bdb8 <USBD_AUDIO_Setup>:
 * @param  req: usb requests
 * @retval status
 */
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef *req)
{
 801bdb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t len;
  uint8_t *pbuf;
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bdba:	780b      	ldrb	r3, [r1, #0]
 801bdbc:	f013 0460 	ands.w	r4, r3, #96	; 0x60
 * @param  req: usb requests
 * @retval status
 */
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef *req)
{
 801bdc0:	4606      	mov	r6, r0
 801bdc2:	460d      	mov	r5, r1
  uint16_t len;
  uint8_t *pbuf;
  uint8_t ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bdc4:	f000 80be 	beq.w	801bf44 <USBD_AUDIO_Setup+0x18c>
 801bdc8:	2c20      	cmp	r4, #32
 801bdca:	f040 80f9 	bne.w	801bfc0 <USBD_AUDIO_Setup+0x208>
    {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 801bdce:	784a      	ldrb	r2, [r1, #1]
 801bdd0:	2a01      	cmp	r2, #1
 801bdd2:	d002      	beq.n	801bdda <USBD_AUDIO_Setup+0x22>
 801bdd4:	2a02      	cmp	r2, #2
 801bdd6:	d05f      	beq.n	801be98 <USBD_AUDIO_Setup+0xe0>
 801bdd8:	e0ee      	b.n	801bfb8 <USBD_AUDIO_Setup+0x200>
        {
        case AUDIO_REQ_CUR:
          
          if(req->bmRequest & 0x80)
 801bdda:	0619      	lsls	r1, r3, #24
 801bddc:	d551      	bpl.n	801be82 <USBD_AUDIO_Setup+0xca>
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
  uint8_t buff[5];
  if(req->wValue == USB_CS_CLOCK_VALID_CONTROL)
 801bdde:	886b      	ldrh	r3, [r5, #2]
 801bde0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bde4:	d103      	bne.n	801bdee <USBD_AUDIO_Setup+0x36>
  {
    buff[0] = 1;
 801bde6:	a902      	add	r1, sp, #8
 801bde8:	f801 2d08 	strb.w	r2, [r1, #-8]!
 801bdec:	e039      	b.n	801be62 <USBD_AUDIO_Setup+0xaa>
    USBD_CtlSendData (pdev,
                    buff,
                    req->wLength);
  }
  else if(req->wValue == USB_CS_SAM_FREQ_CONTROL)
 801bdee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bdf2:	d138      	bne.n	801be66 <USBD_AUDIO_Setup+0xae>
  {

    freq[0] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 0);
 801bdf4:	4c74      	ldr	r4, [pc, #464]	; (801bfc8 <USBD_AUDIO_Setup+0x210>)
 801bdf6:	4b75      	ldr	r3, [pc, #468]	; (801bfcc <USBD_AUDIO_Setup+0x214>)
 801bdf8:	6866      	ldr	r6, [r4, #4]
 801bdfa:	4975      	ldr	r1, [pc, #468]	; (801bfd0 <USBD_AUDIO_Setup+0x218>)
 801bdfc:	221c      	movs	r2, #28
 801bdfe:	fb02 3606 	mla	r6, r2, r6, r3
 801be02:	6876      	ldr	r6, [r6, #4]
 801be04:	700e      	strb	r6, [r1, #0]
    freq[1] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 8);
 801be06:	6866      	ldr	r6, [r4, #4]
 801be08:	fb02 3606 	mla	r6, r2, r6, r3
 801be0c:	6876      	ldr	r6, [r6, #4]
 801be0e:	1236      	asrs	r6, r6, #8
 801be10:	704e      	strb	r6, [r1, #1]
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 16);
 801be12:	6866      	ldr	r6, [r4, #4]
 801be14:	fb02 3606 	mla	r6, r2, r6, r3
 801be18:	f9b6 6006 	ldrsh.w	r6, [r6, #6]
 801be1c:	708e      	strb	r6, [r1, #2]
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 24);
 801be1e:	6866      	ldr	r6, [r4, #4]
 801be20:	fb02 3606 	mla	r6, r2, r6, r3
 801be24:	f996 6007 	ldrsb.w	r6, [r6, #7]
 801be28:	70ce      	strb	r6, [r1, #3]
    freq[4] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 0);
 801be2a:	6866      	ldr	r6, [r4, #4]
 801be2c:	fb02 3606 	mla	r6, r2, r6, r3
 801be30:	6876      	ldr	r6, [r6, #4]
 801be32:	710e      	strb	r6, [r1, #4]
    freq[5] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 8);
 801be34:	6866      	ldr	r6, [r4, #4]
 801be36:	fb02 3606 	mla	r6, r2, r6, r3
 801be3a:	6876      	ldr	r6, [r6, #4]
 801be3c:	1236      	asrs	r6, r6, #8
 801be3e:	714e      	strb	r6, [r1, #5]
    freq[6] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 16);
 801be40:	6866      	ldr	r6, [r4, #4]
    freq[7] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 24);
 801be42:	6864      	ldr	r4, [r4, #4]
    freq[1] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 8);
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 16);
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 24);
    freq[4] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 0);
    freq[5] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 8);
    freq[6] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 16);
 801be44:	fb02 3606 	mla	r6, r2, r6, r3
    freq[7] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 24);
 801be48:	fb02 3304 	mla	r3, r2, r4, r3
    freq[1] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 8);
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 16);
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 24);
    freq[4] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 0);
    freq[5] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 8);
    freq[6] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 16);
 801be4c:	f9b6 6006 	ldrsh.w	r6, [r6, #6]
    freq[7] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 24);
 801be50:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801be54:	71cb      	strb	r3, [r1, #7]
    freq[8] = 0x00;
 801be56:	2300      	movs	r3, #0
    freq[1] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 8);
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 16);
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 24);
    freq[4] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 0);
    freq[5] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 8);
    freq[6] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 16);
 801be58:	718e      	strb	r6, [r1, #6]
    freq[7] = (uint8_t)(usbFmt[usbd_audio_AltSet].rate >> 24);
    freq[8] = 0x00;
 801be5a:	720b      	strb	r3, [r1, #8]
    freq[9] = 0x00;
 801be5c:	724b      	strb	r3, [r1, #9]
    freq[10] = 0x00;
 801be5e:	728b      	strb	r3, [r1, #10]
    freq[11] = 0x00;
 801be60:	72cb      	strb	r3, [r1, #11]
    
    USBD_CtlSendData (pdev,
 801be62:	88ea      	ldrh	r2, [r5, #6]
 801be64:	e00a      	b.n	801be7c <USBD_AUDIO_Setup+0xc4>
                    freq,
                    req->wLength);
  }
  else
  {
    memset(haudio->control.data, 0, 64);
 801be66:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
 801be6a:	3401      	adds	r4, #1
 801be6c:	2240      	movs	r2, #64	; 0x40
 801be6e:	2100      	movs	r1, #0
 801be70:	4620      	mov	r0, r4
 801be72:	f001 f97f 	bl	801d174 <memset>
    /* Send the current mute state */
    USBD_CtlSendData (pdev,
 801be76:	88ea      	ldrh	r2, [r5, #6]
 801be78:	4621      	mov	r1, r4
 801be7a:	4630      	mov	r0, r6
 801be7c:	f000 fed3 	bl	801cc26 <USBD_CtlSendData>
 801be80:	e09e      	b.n	801bfc0 <USBD_AUDIO_Setup+0x208>
 801be82:	88ea      	ldrh	r2, [r5, #6]
 * @retval status
 */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{

  if (req->wLength)
 801be84:	2a00      	cmp	r2, #0
 801be86:	f000 809b 	beq.w	801bfc0 <USBD_AUDIO_Setup+0x208>
    {
      if(req->wValue == USB_CS_SAM_FREQ_CONTROL)
 801be8a:	886b      	ldrh	r3, [r5, #2]
 801be8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801be90:	f040 8096 	bne.w	801bfc0 <USBD_AUDIO_Setup+0x208>
      {
        /* Prepare the reception of the buffer over EP0 */
        USBD_CtlPrepareRx (pdev,
 801be94:	494f      	ldr	r1, [pc, #316]	; (801bfd4 <USBD_AUDIO_Setup+0x21c>)
 801be96:	e052      	b.n	801bf3e <USBD_AUDIO_Setup+0x186>
          
          break;
          
        case AUDIO_REQ_RANGE:
          
          if(req->bmRequest & 0x80)
 801be98:	061b      	lsls	r3, r3, #24
 801be9a:	d548      	bpl.n	801bf2e <USBD_AUDIO_Setup+0x176>
 */
static void AUDIO_REQ_GetRange(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  int i = 0;

  if(req->wValue == USB_CS_SAM_FREQ_CONTROL)
 801be9c:	884b      	ldrh	r3, [r1, #2]
 801be9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bea2:	f040 808d 	bne.w	801bfc0 <USBD_AUDIO_Setup+0x208>
  {
    freq[0] = 0x01;
    freq[1] = 0x00;
    
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
 801bea6:	4e48      	ldr	r6, [pc, #288]	; (801bfc8 <USBD_AUDIO_Setup+0x210>)
{
  int i = 0;

  if(req->wValue == USB_CS_SAM_FREQ_CONTROL)
  {
    freq[0] = 0x01;
 801bea8:	4949      	ldr	r1, [pc, #292]	; (801bfd0 <USBD_AUDIO_Setup+0x218>)
    freq[1] = 0x00;
    
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
 801beaa:	6877      	ldr	r7, [r6, #4]
 801beac:	4a47      	ldr	r2, [pc, #284]	; (801bfcc <USBD_AUDIO_Setup+0x214>)
{
  int i = 0;

  if(req->wValue == USB_CS_SAM_FREQ_CONTROL)
  {
    freq[0] = 0x01;
 801beae:	2301      	movs	r3, #1
 801beb0:	700b      	strb	r3, [r1, #0]
    freq[1] = 0x00;
    
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
 801beb2:	231c      	movs	r3, #28
 801beb4:	fb07 3703 	mla	r7, r7, r3, r3
 801beb8:	4417      	add	r7, r2
  int i = 0;

  if(req->wValue == USB_CS_SAM_FREQ_CONTROL)
  {
    freq[0] = 0x01;
    freq[1] = 0x00;
 801beba:	2400      	movs	r4, #0
    
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
 801bebc:	687f      	ldr	r7, [r7, #4]
 801bebe:	708f      	strb	r7, [r1, #2]
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
 801bec0:	6877      	ldr	r7, [r6, #4]
  int i = 0;

  if(req->wValue == USB_CS_SAM_FREQ_CONTROL)
  {
    freq[0] = 0x01;
    freq[1] = 0x00;
 801bec2:	704c      	strb	r4, [r1, #1]
    
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
 801bec4:	fb07 3703 	mla	r7, r7, r3, r3
 801bec8:	4417      	add	r7, r2
    freq[5] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
    freq[6] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
    freq[7] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[8] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
    freq[9] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
    freq[10] = 0x00;
 801beca:	728c      	strb	r4, [r1, #10]
  {
    freq[0] = 0x01;
    freq[1] = 0x00;
    
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
 801becc:	687f      	ldr	r7, [r7, #4]
    freq[6] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
    freq[7] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[8] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
    freq[9] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
    freq[10] = 0x00;
    freq[11] = 0x00;
 801bece:	72cc      	strb	r4, [r1, #11]
  {
    freq[0] = 0x01;
    freq[1] = 0x00;
    
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
 801bed0:	123f      	asrs	r7, r7, #8
 801bed2:	70cf      	strb	r7, [r1, #3]
    freq[4] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
 801bed4:	6877      	ldr	r7, [r6, #4]
    freq[7] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[8] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
    freq[9] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
    freq[10] = 0x00;
    freq[11] = 0x00;
    freq[12] = 0x00;
 801bed6:	730c      	strb	r4, [r1, #12]
    freq[0] = 0x01;
    freq[1] = 0x00;
    
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[4] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
 801bed8:	fb07 3703 	mla	r7, r7, r3, r3
 801bedc:	4417      	add	r7, r2
    freq[8] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
    freq[9] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
    freq[10] = 0x00;
    freq[11] = 0x00;
    freq[12] = 0x00;
    freq[13] = 0x00;
 801bede:	734c      	strb	r4, [r1, #13]
    freq[0] = 0x01;
    freq[1] = 0x00;
    
    freq[2] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[4] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
 801bee0:	f9b7 7006 	ldrsh.w	r7, [r7, #6]
 801bee4:	710f      	strb	r7, [r1, #4]
    freq[5] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
 801bee6:	6877      	ldr	r7, [r6, #4]
 801bee8:	fb07 3703 	mla	r7, r7, r3, r3
 801beec:	4417      	add	r7, r2
 801beee:	f997 7007 	ldrsb.w	r7, [r7, #7]
 801bef2:	714f      	strb	r7, [r1, #5]
    freq[6] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
 801bef4:	6877      	ldr	r7, [r6, #4]
 801bef6:	fb07 3703 	mla	r7, r7, r3, r3
 801befa:	4417      	add	r7, r2
 801befc:	687f      	ldr	r7, [r7, #4]
 801befe:	718f      	strb	r7, [r1, #6]
    freq[7] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
 801bf00:	6877      	ldr	r7, [r6, #4]
 801bf02:	fb07 3703 	mla	r7, r7, r3, r3
 801bf06:	4417      	add	r7, r2
 801bf08:	687f      	ldr	r7, [r7, #4]
 801bf0a:	123f      	asrs	r7, r7, #8
 801bf0c:	71cf      	strb	r7, [r1, #7]
    freq[8] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
 801bf0e:	6877      	ldr	r7, [r6, #4]
    freq[9] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
 801bf10:	6876      	ldr	r6, [r6, #4]
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[4] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
    freq[5] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
    freq[6] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
    freq[7] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[8] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
 801bf12:	fb07 3703 	mla	r7, r7, r3, r3
    freq[9] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
 801bf16:	fb06 3303 	mla	r3, r6, r3, r3
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[4] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
    freq[5] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
    freq[6] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
    freq[7] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[8] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
 801bf1a:	4417      	add	r7, r2
    freq[9] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
 801bf1c:	4413      	add	r3, r2
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[4] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
    freq[5] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
    freq[6] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
    freq[7] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[8] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
 801bf1e:	f9b7 7006 	ldrsh.w	r7, [r7, #6]
    freq[9] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
 801bf22:	f993 3007 	ldrsb.w	r3, [r3, #7]
    freq[3] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[4] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
    freq[5] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
    freq[6] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 0);
    freq[7] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 8);
    freq[8] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 16);
 801bf26:	720f      	strb	r7, [r1, #8]
    freq[9] = (uint8_t)(usbFmt[usbd_audio_AltSet+1].rate >> 24);
 801bf28:	724b      	strb	r3, [r1, #9]
    freq[11] = 0x00;
    freq[12] = 0x00;
    freq[13] = 0x00;
    
    /* Send the current mute state */
    USBD_CtlSendData (pdev,
 801bf2a:	88ea      	ldrh	r2, [r5, #6]
 801bf2c:	e01d      	b.n	801bf6a <USBD_AUDIO_Setup+0x1b2>
 801bf2e:	88ca      	ldrh	r2, [r1, #6]
 * @retval status
 */
static void AUDIO_REQ_SetRange(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{

  if (req->wLength)
 801bf30:	2a00      	cmp	r2, #0
 801bf32:	d045      	beq.n	801bfc0 <USBD_AUDIO_Setup+0x208>
    {
      if(req->wValue == USB_CS_SAM_FREQ_CONTROL)
 801bf34:	884b      	ldrh	r3, [r1, #2]
 801bf36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bf3a:	d141      	bne.n	801bfc0 <USBD_AUDIO_Setup+0x208>
      {
        /* Prepare the reception of the buffer over EP0 */
        USBD_CtlPrepareRx (pdev,
 801bf3c:	4924      	ldr	r1, [pc, #144]	; (801bfd0 <USBD_AUDIO_Setup+0x218>)
 801bf3e:	f000 fe87 	bl	801cc50 <USBD_CtlPrepareRx>
 801bf42:	e03d      	b.n	801bfc0 <USBD_AUDIO_Setup+0x208>
          ret = USBD_FAIL;
        }
      break;

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801bf44:	784b      	ldrb	r3, [r1, #1]
 801bf46:	2b0a      	cmp	r3, #10
 801bf48:	d00d      	beq.n	801bf66 <USBD_AUDIO_Setup+0x1ae>
 801bf4a:	2b0b      	cmp	r3, #11
 801bf4c:	d010      	beq.n	801bf70 <USBD_AUDIO_Setup+0x1b8>
 801bf4e:	2b06      	cmp	r3, #6
 801bf50:	d132      	bne.n	801bfb8 <USBD_AUDIO_Setup+0x200>
        {
        case USB_REQ_GET_DESCRIPTOR:
          if( (req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 801bf52:	884b      	ldrh	r3, [r1, #2]
 801bf54:	0a1b      	lsrs	r3, r3, #8
 801bf56:	2b21      	cmp	r3, #33	; 0x21
 801bf58:	d132      	bne.n	801bfc0 <USBD_AUDIO_Setup+0x208>
            {
              pbuf = USBD_AUDIO_CfgDesc + 18;
              len = MIN(USB_AUDIO_DESC_SIZ , req->wLength);


              USBD_CtlSendData (pdev,
 801bf5a:	88ca      	ldrh	r2, [r1, #6]
 801bf5c:	491e      	ldr	r1, [pc, #120]	; (801bfd8 <USBD_AUDIO_Setup+0x220>)
 801bf5e:	2a09      	cmp	r2, #9
 801bf60:	bf28      	it	cs
 801bf62:	2209      	movcs	r2, #9
 801bf64:	e001      	b.n	801bf6a <USBD_AUDIO_Setup+0x1b2>
                                len);
            }
          break;

        case USB_REQ_GET_INTERFACE :
          USBD_CtlSendData (pdev,
 801bf66:	491d      	ldr	r1, [pc, #116]	; (801bfdc <USBD_AUDIO_Setup+0x224>)
 801bf68:	2201      	movs	r2, #1
 801bf6a:	f000 fe5c 	bl	801cc26 <USBD_CtlSendData>
 801bf6e:	e021      	b.n	801bfb4 <USBD_AUDIO_Setup+0x1fc>
                            (uint8_t *)&(usbd_audio_AltSet),
                            1);
          break;

        case USB_REQ_SET_INTERFACE :
          if ((uint8_t)(req->wValue) < ALTERNATE_SETTINGS)
 801bf70:	788b      	ldrb	r3, [r1, #2]
 801bf72:	2b0c      	cmp	r3, #12
 801bf74:	d81c      	bhi.n	801bfb0 <USBD_AUDIO_Setup+0x1f8>
            {
              usbd_audio_AltSet   = (uint8_t)(req->wValue);
 801bf76:	4d14      	ldr	r5, [pc, #80]	; (801bfc8 <USBD_AUDIO_Setup+0x210>)
 801bf78:	606b      	str	r3, [r5, #4]
              alignReset = 1;
              if(usbd_audio_AltSet > 0)
 801bf7a:	686b      	ldr	r3, [r5, #4]

        case USB_REQ_SET_INTERFACE :
          if ((uint8_t)(req->wValue) < ALTERNATE_SETTINGS)
            {
              usbd_audio_AltSet   = (uint8_t)(req->wValue);
              alignReset = 1;
 801bf7c:	2001      	movs	r0, #1
 801bf7e:	f885 041c 	strb.w	r0, [r5, #1052]	; 0x41c
              if(usbd_audio_AltSet > 0)
 801bf82:	b1eb      	cbz	r3, 801bfc0 <USBD_AUDIO_Setup+0x208>
                {
                  formatChange(INPUT_USB1, usbFmt[usbd_audio_AltSet].format, usbFmt[usbd_audio_AltSet].rate);
 801bf84:	4f11      	ldr	r7, [pc, #68]	; (801bfcc <USBD_AUDIO_Setup+0x214>)
 801bf86:	686b      	ldr	r3, [r5, #4]
 801bf88:	686a      	ldr	r2, [r5, #4]
 801bf8a:	261c      	movs	r6, #28
 801bf8c:	4373      	muls	r3, r6
 801bf8e:	fb06 7202 	mla	r2, r6, r2, r7
 801bf92:	5cf9      	ldrb	r1, [r7, r3]
 801bf94:	6852      	ldr	r2, [r2, #4]
 801bf96:	f7fa f855 	bl	8016044 <formatChange>
                  formatChange(INPUT_USB2, usbFmt[usbd_audio_AltSet].format, usbFmt[usbd_audio_AltSet].rate);
 801bf9a:	686a      	ldr	r2, [r5, #4]
 801bf9c:	686b      	ldr	r3, [r5, #4]
 801bf9e:	fb06 7303 	mla	r3, r6, r3, r7
 801bfa2:	4356      	muls	r6, r2
 801bfa4:	2002      	movs	r0, #2
 801bfa6:	685a      	ldr	r2, [r3, #4]
 801bfa8:	5db9      	ldrb	r1, [r7, r6]
 801bfaa:	f7fa f84b 	bl	8016044 <formatChange>
 801bfae:	e001      	b.n	801bfb4 <USBD_AUDIO_Setup+0x1fc>
                }
            }
          else
            {
              /* Call the error management function (command will be nacked */
              USBD_CtlError (pdev, req);
 801bfb0:	f000 fc8d 	bl	801c8ce <USBD_CtlError>
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef *req)
{
  uint16_t len;
  uint8_t *pbuf;
  uint8_t ret = USBD_OK;
 801bfb4:	4620      	mov	r0, r4
 801bfb6:	e004      	b.n	801bfc2 <USBD_AUDIO_Setup+0x20a>
              USBD_CtlError (pdev, req);
            }
          break;

        default:
          USBD_CtlError (pdev, req);
 801bfb8:	f000 fc89 	bl	801c8ce <USBD_CtlError>
          ret = USBD_FAIL;
 801bfbc:	2002      	movs	r0, #2
 801bfbe:	e000      	b.n	801bfc2 <USBD_AUDIO_Setup+0x20a>
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef *req)
{
  uint16_t len;
  uint8_t *pbuf;
  uint8_t ret = USBD_OK;
 801bfc0:	2000      	movs	r0, #0
          USBD_CtlError (pdev, req);
          ret = USBD_FAIL;
        }
    }
  return ret;
}
 801bfc2:	b003      	add	sp, #12
 801bfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bfc6:	bf00      	nop
 801bfc8:	10002e90 	.word	0x10002e90
 801bfcc:	0803f72c 	.word	0x0803f72c
 801bfd0:	100033c0 	.word	0x100033c0
 801bfd4:	10003488 	.word	0x10003488
 801bfd8:	100027c6 	.word	0x100027c6
 801bfdc:	10002e94 	.word	0x10002e94

0801bfe0 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceHS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 801bfe0:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS);
 801bfe2:	4c07      	ldr	r4, [pc, #28]	; (801c000 <MX_USB_DEVICE_Init+0x20>)
 801bfe4:	4907      	ldr	r1, [pc, #28]	; (801c004 <MX_USB_DEVICE_Init+0x24>)
 801bfe6:	2201      	movs	r2, #1
 801bfe8:	4620      	mov	r0, r4
 801bfea:	f000 fb25 	bl	801c638 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceHS, &USBD_AUDIO);
 801bfee:	4620      	mov	r0, r4
 801bff0:	4905      	ldr	r1, [pc, #20]	; (801c008 <MX_USB_DEVICE_Init+0x28>)
 801bff2:	f000 fb36 	bl	801c662 <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceHS);
 801bff6:	4620      	mov	r0, r4

}
 801bff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS);

  USBD_RegisterClass(&hUsbDeviceHS, &USBD_AUDIO);

  USBD_Start(&hUsbDeviceHS);
 801bffc:	f000 bb38 	b.w	801c670 <USBD_Start>
 801c000:	100034c0 	.word	0x100034c0
 801c004:	10002aec 	.word	0x10002aec
 801c008:	10002a9c 	.word	0x10002a9c

0801c00c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c00c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 801c00e:	4b2e      	ldr	r3, [pc, #184]	; (801c0c8 <HAL_PCD_MspInit+0xbc>)
 801c010:	6802      	ldr	r2, [r0, #0]
 801c012:	429a      	cmp	r2, r3
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c014:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 801c016:	d155      	bne.n	801c0c4 <HAL_PCD_MspInit+0xb8>
    {
      /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

      /* USER CODE END USB_OTG_HS_MspInit 0 */
      
      if(externalPhy)
 801c018:	4b2c      	ldr	r3, [pc, #176]	; (801c0cc <HAL_PCD_MspInit+0xc0>)
 801c01a:	681c      	ldr	r4, [r3, #0]
 801c01c:	2502      	movs	r5, #2
 801c01e:	2c00      	cmp	r4, #0
 801c020:	d037      	beq.n	801c092 <HAL_PCD_MspInit+0x86>
	     PB13     ------> USB_OTG_HS_ULPI_D6
	     PB5     ------> USB_OTG_HS_ULPI_D7 
	  */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c022:	2400      	movs	r4, #0
	     PB11     ------> USB_OTG_HS_ULPI_D4
	     PB12     ------> USB_OTG_HS_ULPI_D5
	     PB13     ------> USB_OTG_HS_ULPI_D6
	     PB5     ------> USB_OTG_HS_ULPI_D7 
	  */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 801c024:	230d      	movs	r3, #13
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c026:	2703      	movs	r7, #3
	  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801c028:	260a      	movs	r6, #10
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801c02a:	a903      	add	r1, sp, #12
 801c02c:	4828      	ldr	r0, [pc, #160]	; (801c0d0 <HAL_PCD_MspInit+0xc4>)
	     PB11     ------> USB_OTG_HS_ULPI_D4
	     PB12     ------> USB_OTG_HS_ULPI_D5
	     PB13     ------> USB_OTG_HS_ULPI_D6
	     PB5     ------> USB_OTG_HS_ULPI_D7 
	  */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 801c02e:	9303      	str	r3, [sp, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c030:	9504      	str	r5, [sp, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c032:	9405      	str	r4, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c034:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801c036:	9607      	str	r6, [sp, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801c038:	f000 fa06 	bl	801c448 <HAL_GPIO_Init>
	  
	  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 801c03c:	2328      	movs	r3, #40	; 0x28
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c03e:	a903      	add	r1, sp, #12
 801c040:	4824      	ldr	r0, [pc, #144]	; (801c0d4 <HAL_PCD_MspInit+0xc8>)
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	  
	  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 801c042:	9303      	str	r3, [sp, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c044:	9504      	str	r5, [sp, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c046:	9405      	str	r4, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c048:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801c04a:	9607      	str	r6, [sp, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c04c:	f000 f9fc 	bl	801c448 <HAL_GPIO_Init>
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	  */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 801c050:	f643 4323 	movw	r3, #15395	; 0x3c23
      |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c054:	a903      	add	r1, sp, #12
 801c056:	4820      	ldr	r0, [pc, #128]	; (801c0d8 <HAL_PCD_MspInit+0xcc>)
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	  */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 801c058:	9303      	str	r3, [sp, #12]
      |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c05a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c05c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c05e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801c060:	9607      	str	r6, [sp, #28]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c062:	f000 f9f1 	bl	801c448 <HAL_GPIO_Init>

      /* Peripheral clock enable */
      __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801c066:	4b1d      	ldr	r3, [pc, #116]	; (801c0dc <HAL_PCD_MspInit+0xd0>)
 801c068:	9400      	str	r4, [sp, #0]
 801c06a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c06c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 801c070:	631a      	str	r2, [r3, #48]	; 0x30
 801c072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c074:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 801c078:	9200      	str	r2, [sp, #0]
 801c07a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 801c07c:	9401      	str	r4, [sp, #4]
 801c07e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c080:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801c084:	631a      	str	r2, [r3, #48]	; 0x30
 801c086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c088:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801c08c:	9301      	str	r3, [sp, #4]
 801c08e:	9b01      	ldr	r3, [sp, #4]
 801c090:	e018      	b.n	801c0c4 <HAL_PCD_MspInit+0xb8>

      /**USB_OTG_HS GPIO Configuration
      PB14     ------> USB_OTG_HS_DM
      PB15     ------> USB_OTG_HS_DP
      */
      GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801c092:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801c096:	9303      	str	r3, [sp, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c098:	2303      	movs	r3, #3
 801c09a:	9306      	str	r3, [sp, #24]
      GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801c09c:	230c      	movs	r3, #12
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c09e:	eb0d 0103 	add.w	r1, sp, r3
 801c0a2:	480d      	ldr	r0, [pc, #52]	; (801c0d8 <HAL_PCD_MspInit+0xcc>)
      */
      GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801c0a4:	9307      	str	r3, [sp, #28]
      /**USB_OTG_HS GPIO Configuration
      PB14     ------> USB_OTG_HS_DM
      PB15     ------> USB_OTG_HS_DP
      */
      GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c0a6:	9504      	str	r5, [sp, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c0a8:	9405      	str	r4, [sp, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
      GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c0aa:	f000 f9cd 	bl	801c448 <HAL_GPIO_Init>

      /* Peripheral clock enable */
      __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801c0ae:	4b0b      	ldr	r3, [pc, #44]	; (801c0dc <HAL_PCD_MspInit+0xd0>)
 801c0b0:	9402      	str	r4, [sp, #8]
 801c0b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c0b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 801c0b8:	631a      	str	r2, [r3, #48]	; 0x30
 801c0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801c0c0:	9302      	str	r3, [sp, #8]
 801c0c2:	9b02      	ldr	r3, [sp, #8]
      //HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
      /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

      /* USER CODE END USB_OTG_HS_MspInit 1 */
    }
}
 801c0c4:	b009      	add	sp, #36	; 0x24
 801c0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c0c8:	40040000 	.word	0x40040000
 801c0cc:	10002e8c 	.word	0x10002e8c
 801c0d0:	40020800 	.word	0x40020800
 801c0d4:	40020000 	.word	0x40020000
 801c0d8:	40020400 	.word	0x40020400
 801c0dc:	40023800 	.word	0x40023800

0801c0e0 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 801c0e0:	f500 7161 	add.w	r1, r0, #900	; 0x384
 801c0e4:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 801c0e8:	f000 bad9 	b.w	801c69e <USBD_LL_SetupStage>

0801c0ec <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c0ec:	231c      	movs	r3, #28
 801c0ee:	fb03 0301 	mla	r3, r3, r1, r0
 801c0f2:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 801c0f6:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 801c0fa:	f000 bafd 	b.w	801c6f8 <USBD_LL_DataOutStage>

0801c0fe <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c0fe:	231c      	movs	r3, #28
 801c100:	fb03 0301 	mla	r3, r3, r1, r0
 801c104:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 801c108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c10a:	f000 bb26 	b.w	801c75a <USBD_LL_DataInStage>

0801c10e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 801c10e:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 801c112:	f000 bba1 	b.w	801c858 <USBD_LL_SOF>

0801c116 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 801c116:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 801c118:	68c1      	ldr	r1, [r0, #12]
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 801c11a:	4604      	mov	r4, r0

    default:
      speed = USBD_SPEED_FULL;
      break;
    }
  USBD_LL_SetSpeed(hpcd->pData, speed);
 801c11c:	3100      	adds	r1, #0
 801c11e:	bf18      	it	ne
 801c120:	2101      	movne	r1, #1
 801c122:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 801c126:	f000 fb85 	bl	801c834 <USBD_LL_SetSpeed>

  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 801c12a:	f8d4 03b4 	ldr.w	r0, [r4, #948]	; 0x3b4
}
 801c12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      break;
    }
  USBD_LL_SetSpeed(hpcd->pData, speed);

  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 801c132:	f000 bb60 	b.w	801c7f6 <USBD_LL_Reset>
	...

0801c138 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 801c138:	b510      	push	{r4, lr}
 801c13a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend(hpcd->pData);
 801c13c:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 801c140:	f000 fb7b 	bl	801c83a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801c144:	6822      	ldr	r2, [r4, #0]
 801c146:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801c14a:	f043 0301 	orr.w	r3, r3, #1
 801c14e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c152:	6a23      	ldr	r3, [r4, #32]
 801c154:	b123      	cbz	r3, 801c160 <HAL_PCD_SuspendCallback+0x28>
    {
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c156:	4a03      	ldr	r2, [pc, #12]	; (801c164 <HAL_PCD_SuspendCallback+0x2c>)
 801c158:	6913      	ldr	r3, [r2, #16]
 801c15a:	f043 0306 	orr.w	r3, r3, #6
 801c15e:	6113      	str	r3, [r2, #16]
 801c160:	bd10      	pop	{r4, pc}
 801c162:	bf00      	nop
 801c164:	e000ed00 	.word	0xe000ed00

0801c168 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume(hpcd->pData);
 801c168:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 801c16c:	f000 bb6e 	b.w	801c84c <USBD_LL_Resume>

0801c170 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 801c170:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 801c174:	f000 bb83 	b.w	801c87e <USBD_LL_IsoOUTIncomplete>

0801c178 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 801c178:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 801c17c:	f000 bb78 	b.w	801c870 <USBD_LL_IsoINIncomplete>

0801c180 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 801c180:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 801c184:	f000 bb82 	b.w	801c88c <USBD_LL_DevConnected>

0801c188 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 801c188:	f8d0 03b4 	ldr.w	r0, [r0, #948]	; 0x3b4
 801c18c:	f000 bb80 	b.w	801c890 <USBD_LL_DevDisconnected>

0801c190 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{
 801c190:	b570      	push	{r4, r5, r6, lr}
  /* Init USB_IP */
  if (pdev->id == DEVICE_HS) {
 801c192:	7806      	ldrb	r6, [r0, #0]
 801c194:	2e01      	cmp	r6, #1
 801c196:	d12f      	bne.n	801c1f8 <USBD_LL_Init+0x68>
      /* Link The driver to the stack */
      hpcd_USB_OTG_HS.pData = pdev;
 801c198:	4c18      	ldr	r4, [pc, #96]	; (801c1fc <USBD_LL_Init+0x6c>)
      pdev->pData = &hpcd_USB_OTG_HS;

      hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
      hpcd_USB_OTG_HS.Init.dev_endpoints = 11;
 801c19a:	4a19      	ldr	r2, [pc, #100]	; (801c200 <USBD_LL_Init+0x70>)
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{
  /* Init USB_IP */
  if (pdev->id == DEVICE_HS) {
      /* Link The driver to the stack */
      hpcd_USB_OTG_HS.pData = pdev;
 801c19c:	f8c4 03b4 	str.w	r0, [r4, #948]	; 0x3b4
      pdev->pData = &hpcd_USB_OTG_HS;

      hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
      hpcd_USB_OTG_HS.Init.dev_endpoints = 11;
 801c1a0:	230b      	movs	r3, #11
 801c1a2:	e884 000c 	stmia.w	r4, {r2, r3}
      hpcd_USB_OTG_HS.Init.speed = externalPhy?PCD_SPEED_HIGH:PCD_SPEED_FULL;
 801c1a6:	4b17      	ldr	r3, [pc, #92]	; (801c204 <USBD_LL_Init+0x74>)
{
  /* Init USB_IP */
  if (pdev->id == DEVICE_HS) {
      /* Link The driver to the stack */
      hpcd_USB_OTG_HS.pData = pdev;
      pdev->pData = &hpcd_USB_OTG_HS;
 801c1a8:	f8c0 4220 	str.w	r4, [r0, #544]	; 0x220

      hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
      hpcd_USB_OTG_HS.Init.dev_endpoints = 11;
      hpcd_USB_OTG_HS.Init.speed = externalPhy?PCD_SPEED_HIGH:PCD_SPEED_FULL;
 801c1ac:	681b      	ldr	r3, [r3, #0]
      hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
      hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
      hpcd_USB_OTG_HS.Init.phy_itface = externalPhy?USB_OTG_ULPI_PHY:USB_OTG_EMBEDDED_PHY;
      hpcd_USB_OTG_HS.Init.Sof_enable = ENABLE;
 801c1ae:	61e6      	str	r6, [r4, #28]
 801c1b0:	2500      	movs	r5, #0
      hpcd_USB_OTG_HS.pData = pdev;
      pdev->pData = &hpcd_USB_OTG_HS;

      hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
      hpcd_USB_OTG_HS.Init.dev_endpoints = 11;
      hpcd_USB_OTG_HS.Init.speed = externalPhy?PCD_SPEED_HIGH:PCD_SPEED_FULL;
 801c1b2:	42ab      	cmp	r3, r5
 801c1b4:	bf14      	ite	ne
 801c1b6:	462b      	movne	r3, r5
 801c1b8:	2302      	moveq	r3, #2
 801c1ba:	60e3      	str	r3, [r4, #12]
      hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
      hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
      hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
      hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
      hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
      HAL_PCD_Init(&hpcd_USB_OTG_HS);
 801c1bc:	4620      	mov	r0, r4
      hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
      hpcd_USB_OTG_HS.Init.dev_endpoints = 11;
      hpcd_USB_OTG_HS.Init.speed = externalPhy?PCD_SPEED_HIGH:PCD_SPEED_FULL;
      hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
      hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
      hpcd_USB_OTG_HS.Init.phy_itface = externalPhy?USB_OTG_ULPI_PHY:USB_OTG_EMBEDDED_PHY;
 801c1be:	bf14      	ite	ne
 801c1c0:	2301      	movne	r3, #1
 801c1c2:	2302      	moveq	r3, #2
 801c1c4:	61a3      	str	r3, [r4, #24]
      pdev->pData = &hpcd_USB_OTG_HS;

      hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
      hpcd_USB_OTG_HS.Init.dev_endpoints = 11;
      hpcd_USB_OTG_HS.Init.speed = externalPhy?PCD_SPEED_HIGH:PCD_SPEED_FULL;
      hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801c1c6:	6125      	str	r5, [r4, #16]
      hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 801c1c8:	6165      	str	r5, [r4, #20]
      hpcd_USB_OTG_HS.Init.phy_itface = externalPhy?USB_OTG_ULPI_PHY:USB_OTG_EMBEDDED_PHY;
      hpcd_USB_OTG_HS.Init.Sof_enable = ENABLE;
      hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801c1ca:	6225      	str	r5, [r4, #32]
      hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801c1cc:	6265      	str	r5, [r4, #36]	; 0x24
      hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801c1ce:	62e5      	str	r5, [r4, #44]	; 0x2c
      hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801c1d0:	6325      	str	r5, [r4, #48]	; 0x30
      hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801c1d2:	6365      	str	r5, [r4, #52]	; 0x34
      HAL_PCD_Init(&hpcd_USB_OTG_HS);
 801c1d4:	f7fe fb7c 	bl	801a8d0 <HAL_PCD_Init>

      HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801c1d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c1dc:	4620      	mov	r0, r4
 801c1de:	f000 f92f 	bl	801c440 <HAL_PCDEx_SetRxFiFo>
      HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801c1e2:	2280      	movs	r2, #128	; 0x80
 801c1e4:	4629      	mov	r1, r5
 801c1e6:	4620      	mov	r0, r4
 801c1e8:	f000 f909 	bl	801c3fe <HAL_PCDEx_SetTxFiFo>
      HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801c1ec:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801c1f0:	4631      	mov	r1, r6
 801c1f2:	4620      	mov	r0, r4
 801c1f4:	f000 f903 	bl	801c3fe <HAL_PCDEx_SetTxFiFo>
    }
  return USBD_OK;
}
 801c1f8:	2000      	movs	r0, #0
 801c1fa:	bd70      	pop	{r4, r5, r6, pc}
 801c1fc:	100036e4 	.word	0x100036e4
 801c200:	40040000 	.word	0x40040000
 801c204:	10002e8c 	.word	0x10002e8c

0801c208 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c208:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 801c20a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 801c20e:	f7fe fbca 	bl	801a9a6 <HAL_PCD_Start>
  return USBD_OK;
}
 801c212:	2000      	movs	r0, #0
 801c214:	bd08      	pop	{r3, pc}

0801c216 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev,
                                     uint8_t  ep_addr,
                                     uint8_t  ep_type,
                                     uint16_t ep_mps)
{
 801c216:	b510      	push	{r4, lr}
 801c218:	461c      	mov	r4, r3

  HAL_PCD_EP_Open(pdev->pData,
 801c21a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 801c21e:	4613      	mov	r3, r2
 801c220:	4622      	mov	r2, r4
 801c222:	f7fe fe8b 	bl	801af3c <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);

  return USBD_OK;
}
 801c226:	2000      	movs	r0, #0
 801c228:	bd10      	pop	{r4, pc}

0801c22a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c22a:	b508      	push	{r3, lr}

  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c22c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 801c230:	f7fe feb2 	bl	801af98 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 801c234:	2000      	movs	r0, #0
 801c236:	bd08      	pop	{r3, pc}

0801c238 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c238:	b508      	push	{r3, lr}

  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801c23a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 801c23e:	f7fe ff7d 	bl	801b13c <HAL_PCD_EP_Flush>
  return USBD_OK;
}
 801c242:	2000      	movs	r0, #0
 801c244:	bd08      	pop	{r3, pc}

0801c246 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c246:	b508      	push	{r3, lr}

  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c248:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 801c24c:	f7fe ff25 	bl	801b09a <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 801c250:	2000      	movs	r0, #0
 801c252:	bd08      	pop	{r3, pc}

0801c254 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c254:	b508      	push	{r3, lr}

  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c256:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 801c25a:	f7fe ff4a 	bl	801b0f2 <HAL_PCD_EP_ClrStall>
  return USBD_OK;
}
 801c25e:	2000      	movs	r0, #0
 801c260:	bd08      	pop	{r3, pc}

0801c262 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 801c262:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801c266:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220

  if((ep_addr & 0x80) == 0x80)
    {
      return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c26a:	bf18      	it	ne
 801c26c:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 801c270:	f04f 001c 	mov.w	r0, #28
 801c274:	bf15      	itete	ne
 801c276:	fb00 2103 	mlane	r1, r0, r3, r2
    }
  else
    {
      return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c27a:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = pdev->pData;

  if((ep_addr & 0x80) == 0x80)
    {
      return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c27e:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    }
  else
    {
      return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c282:	f891 01de 	ldrbeq.w	r0, [r1, #478]	; 0x1de
    }
}
 801c286:	4770      	bx	lr

0801c288 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c288:	b508      	push	{r3, lr}

  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c28a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 801c28e:	f7fe fe43 	bl	801af18 <HAL_PCD_SetAddress>
  return USBD_OK;
}
 801c292:	2000      	movs	r0, #0
 801c294:	bd08      	pop	{r3, pc}

0801c296 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev,
                                      uint8_t  ep_addr,
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 801c296:	b508      	push	{r3, lr}

  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c298:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 801c29c:	f7fe fed0 	bl	801b040 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 801c2a0:	2000      	movs	r0, #0
 801c2a2:	bd08      	pop	{r3, pc}

0801c2a4 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
    uint8_t  ep_addr,
    uint8_t  *pbuf,
    uint16_t  size)
{
 801c2a4:	b508      	push	{r3, lr}

  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c2a6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 801c2aa:	f7fe fe98 	bl	801afde <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 801c2ae:	2000      	movs	r0, #0
 801c2b0:	bd08      	pop	{r3, pc}
	...

0801c2b4 <USBD_HS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_HS_DeviceDesc);
 801c2b4:	2312      	movs	r3, #18
 801c2b6:	800b      	strh	r3, [r1, #0]
  return USBD_HS_DeviceDesc;
}
 801c2b8:	4800      	ldr	r0, [pc, #0]	; (801c2bc <USBD_HS_DeviceDescriptor+0x8>)
 801c2ba:	4770      	bx	lr
 801c2bc:	10002ad4 	.word	0x10002ad4

0801c2c0 <USBD_HS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 801c2c0:	2304      	movs	r3, #4
 801c2c2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 801c2c4:	4800      	ldr	r0, [pc, #0]	; (801c2c8 <USBD_HS_LangIDStrDescriptor+0x8>)
 801c2c6:	4770      	bx	lr
 801c2c8:	10002ae8 	.word	0x10002ae8

0801c2cc <USBD_HS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 801c2cc:	b510      	push	{r4, lr}
  USBD_GetString ((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c2ce:	4c04      	ldr	r4, [pc, #16]	; (801c2e0 <USBD_HS_ManufacturerStrDescriptor+0x14>)
 801c2d0:	4804      	ldr	r0, [pc, #16]	; (801c2e4 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 801c2d2:	460a      	mov	r2, r1
 801c2d4:	4621      	mov	r1, r4
 801c2d6:	f000 fc8a 	bl	801cbee <USBD_GetString>
  return USBD_StrDesc;
}
 801c2da:	4620      	mov	r0, r4
 801c2dc:	bd10      	pop	{r4, pc}
 801c2de:	bf00      	nop
 801c2e0:	10003a9c 	.word	0x10003a9c
 801c2e4:	0803de8b 	.word	0x0803de8b

0801c2e8 <USBD_HS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 801c2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  volatile uint64_t *puid = (void*)0x1FFF7A10;
  uint64_t uid = *puid;
 801c2ec:	4b24      	ldr	r3, [pc, #144]	; (801c380 <USBD_HS_SerialStrDescriptor+0x98>)
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 801c2ee:	b08e      	sub	sp, #56	; 0x38
  volatile uint64_t *puid = (void*)0x1FFF7A10;
  uint64_t uid = *puid;
 801c2f0:	e9d3 4500 	ldrd	r4, r5, [r3]
  const char dtostr[]="0123456789ABCDEF";
 801c2f4:	4b23      	ldr	r3, [pc, #140]	; (801c384 <USBD_HS_SerialStrDescriptor+0x9c>)
 801c2f6:	aa01      	add	r2, sp, #4
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 801c2f8:	460e      	mov	r6, r1
  volatile uint64_t *puid = (void*)0x1FFF7A10;
  uint64_t uid = *puid;
  const char dtostr[]="0123456789ABCDEF";
 801c2fa:	f103 0c10 	add.w	ip, r3, #16
 801c2fe:	4617      	mov	r7, r2
 801c300:	6818      	ldr	r0, [r3, #0]
 801c302:	6859      	ldr	r1, [r3, #4]
 801c304:	4696      	mov	lr, r2
 801c306:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c30a:	3308      	adds	r3, #8
 801c30c:	4563      	cmp	r3, ip
 801c30e:	4672      	mov	r2, lr
 801c310:	d1f6      	bne.n	801c300 <USBD_HS_SerialStrDescriptor+0x18>
 801c312:	781b      	ldrb	r3, [r3, #0]
 801c314:	f88e 3000 	strb.w	r3, [lr]
  char str[32] = "                 ";
 801c318:	4b1b      	ldr	r3, [pc, #108]	; (801c388 <USBD_HS_SerialStrDescriptor+0xa0>)
 801c31a:	aa06      	add	r2, sp, #24
 801c31c:	f103 0c10 	add.w	ip, r3, #16
 801c320:	4691      	mov	r9, r2
 801c322:	6818      	ldr	r0, [r3, #0]
 801c324:	6859      	ldr	r1, [r3, #4]
 801c326:	4696      	mov	lr, r2
 801c328:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c32c:	3308      	adds	r3, #8
 801c32e:	4563      	cmp	r3, ip
 801c330:	4672      	mov	r2, lr
 801c332:	d1f6      	bne.n	801c322 <USBD_HS_SerialStrDescriptor+0x3a>
 801c334:	881b      	ldrh	r3, [r3, #0]
 801c336:	f8ae 3000 	strh.w	r3, [lr]
 801c33a:	220e      	movs	r2, #14
 801c33c:	2100      	movs	r1, #0
 801c33e:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 801c342:	f000 ff17 	bl	801d174 <memset>
 801c346:	f10d 0a17 	add.w	sl, sp, #23
 801c34a:	f04f 083c 	mov.w	r8, #60	; 0x3c
  int i;
  for(i=0; i<16; i++) str[i] = dtostr[((uid)>>(4*(15-i)))&0xf];
 801c34e:	4642      	mov	r2, r8
 801c350:	4620      	mov	r0, r4
 801c352:	4629      	mov	r1, r5
 801c354:	f000 fcaa 	bl	801ccac <__aeabi_llsr>
 801c358:	f000 000f 	and.w	r0, r0, #15
 801c35c:	4438      	add	r0, r7
 801c35e:	f1a8 0804 	sub.w	r8, r8, #4
 801c362:	7803      	ldrb	r3, [r0, #0]
 801c364:	f80a 3f01 	strb.w	r3, [sl, #1]!
 801c368:	f118 0f04 	cmn.w	r8, #4
 801c36c:	d1ef      	bne.n	801c34e <USBD_HS_SerialStrDescriptor+0x66>
  USBD_GetString ((uint8_t *)str, USBD_StrDesc, length);
 801c36e:	4648      	mov	r0, r9
 801c370:	4632      	mov	r2, r6
 801c372:	4906      	ldr	r1, [pc, #24]	; (801c38c <USBD_HS_SerialStrDescriptor+0xa4>)
 801c374:	f000 fc3b 	bl	801cbee <USBD_GetString>
  return USBD_StrDesc;
}
 801c378:	4804      	ldr	r0, [pc, #16]	; (801c38c <USBD_HS_SerialStrDescriptor+0xa4>)
 801c37a:	b00e      	add	sp, #56	; 0x38
 801c37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c380:	1fff7a10 	.word	0x1fff7a10
 801c384:	0803f8b8 	.word	0x0803f8b8
 801c388:	0803f898 	.word	0x0803f898
 801c38c:	10003a9c 	.word	0x10003a9c

0801c390 <USBD_HS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 801c390:	b510      	push	{r4, lr}
  if(speed == 0)
  {   
    USBD_GetString ((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801c392:	4c04      	ldr	r4, [pc, #16]	; (801c3a4 <USBD_HS_ProductStrDescriptor+0x14>)
 801c394:	4804      	ldr	r0, [pc, #16]	; (801c3a8 <USBD_HS_ProductStrDescriptor+0x18>)
 801c396:	460a      	mov	r2, r1
 801c398:	4621      	mov	r1, r4
 801c39a:	f000 fc28 	bl	801cbee <USBD_GetString>
  else
  {
    USBD_GetString ((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 801c39e:	4620      	mov	r0, r4
 801c3a0:	bd10      	pop	{r4, pc}
 801c3a2:	bf00      	nop
 801c3a4:	10003a9c 	.word	0x10003a9c
 801c3a8:	0803f8c9 	.word	0x0803f8c9

0801c3ac <USBD_HS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 801c3ac:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString ((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801c3ae:	4c04      	ldr	r4, [pc, #16]	; (801c3c0 <USBD_HS_ConfigStrDescriptor+0x14>)
 801c3b0:	4804      	ldr	r0, [pc, #16]	; (801c3c4 <USBD_HS_ConfigStrDescriptor+0x18>)
 801c3b2:	460a      	mov	r2, r1
 801c3b4:	4621      	mov	r1, r4
 801c3b6:	f000 fc1a 	bl	801cbee <USBD_GetString>
  else
  {
    USBD_GetString ((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 801c3ba:	4620      	mov	r0, r4
 801c3bc:	bd10      	pop	{r4, pc}
 801c3be:	bf00      	nop
 801c3c0:	10003a9c 	.word	0x10003a9c
 801c3c4:	0803f8db 	.word	0x0803f8db

0801c3c8 <USBD_HS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 801c3c8:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString ((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801c3ca:	4c04      	ldr	r4, [pc, #16]	; (801c3dc <USBD_HS_InterfaceStrDescriptor+0x14>)
 801c3cc:	4804      	ldr	r0, [pc, #16]	; (801c3e0 <USBD_HS_InterfaceStrDescriptor+0x18>)
 801c3ce:	460a      	mov	r2, r1
 801c3d0:	4621      	mov	r1, r4
 801c3d2:	f000 fc0c 	bl	801cbee <USBD_GetString>
  else
  {
    USBD_GetString ((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 801c3d6:	4620      	mov	r0, r4
 801c3d8:	bd10      	pop	{r4, pc}
 801c3da:	bf00      	nop
 801c3dc:	10003a9c 	.word	0x10003a9c
 801c3e0:	0803f8e8 	.word	0x0803f8e8

0801c3e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 801c3e4:	b513      	push	{r0, r1, r4, lr}
 801c3e6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 801c3e8:	f7f3 fd84 	bl	800fef4 <HAL_GetTick>
 801c3ec:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 801c3ee:	f7f3 fd81 	bl	800fef4 <HAL_GetTick>
 801c3f2:	9b01      	ldr	r3, [sp, #4]
 801c3f4:	1b00      	subs	r0, r0, r4
 801c3f6:	4298      	cmp	r0, r3
 801c3f8:	d3f9      	bcc.n	801c3ee <HAL_Delay+0xa>
  {
  }
}
 801c3fa:	b002      	add	sp, #8
 801c3fc:	bd10      	pop	{r4, pc}

0801c3fe <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801c3fe:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801c400:	6804      	ldr	r4, [r0, #0]
 801c402:	6a60      	ldr	r0, [r4, #36]	; 0x24
  
  if(fifo == 0U)
 801c404:	b919      	cbnz	r1, 801c40e <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 801c406:	ea40 4302 	orr.w	r3, r0, r2, lsl #16
 801c40a:	62a3      	str	r3, [r4, #40]	; 0x28
 801c40c:	e016      	b.n	801c43c <HAL_PCDEx_SetTxFiFo+0x3e>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 801c40e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 801c410:	2500      	movs	r5, #0
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 801c412:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 801c416:	1e4e      	subs	r6, r1, #1
 801c418:	b2e8      	uxtb	r0, r5
 801c41a:	4286      	cmp	r6, r0
 801c41c:	f105 0501 	add.w	r5, r5, #1
 801c420:	d906      	bls.n	801c430 <HAL_PCDEx_SetTxFiFo+0x32>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 801c422:	3040      	adds	r0, #64	; 0x40
 801c424:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801c428:	6840      	ldr	r0, [r0, #4]
 801c42a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801c42e:	e7f3      	b.n	801c418 <HAL_PCDEx_SetTxFiFo+0x1a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 801c430:	313f      	adds	r1, #63	; 0x3f
 801c432:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c43a:	6063      	str	r3, [r4, #4]
  }
  
  return HAL_OK;
}
 801c43c:	2000      	movs	r0, #0
 801c43e:	bd70      	pop	{r4, r5, r6, pc}

0801c440 <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 801c440:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 801c442:	2000      	movs	r0, #0
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 801c444:	6259      	str	r1, [r3, #36]	; 0x24
  
  return HAL_OK;
}
 801c446:	4770      	bx	lr

0801c448 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801c44c:	4c76      	ldr	r4, [pc, #472]	; (801c628 <HAL_GPIO_Init+0x1e0>)
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801c44e:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 801c630 <HAL_GPIO_Init+0x1e8>
 801c452:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 801c634 <HAL_GPIO_Init+0x1ec>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801c456:	2300      	movs	r3, #0
 801c458:	4626      	mov	r6, r4
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 801c45a:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 801c45c:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 801c45e:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 801c460:	ea32 0505 	bics.w	r5, r2, r5
 801c464:	f040 80d8 	bne.w	801c618 <HAL_GPIO_Init+0x1d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801c468:	684d      	ldr	r5, [r1, #4]
 801c46a:	f025 0510 	bic.w	r5, r5, #16
 801c46e:	2d02      	cmp	r5, #2
 801c470:	d116      	bne.n	801c4a0 <HAL_GPIO_Init+0x58>
 801c472:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 801c476:	eb00 0888 	add.w	r8, r0, r8, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 801c47a:	f003 0a07 	and.w	sl, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801c47e:	f8d8 b020 	ldr.w	fp, [r8, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 801c482:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801c486:	f04f 0c0f 	mov.w	ip, #15
 801c48a:	fa0c f50a 	lsl.w	r5, ip, sl
 801c48e:	ea2b 0c05 	bic.w	ip, fp, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 801c492:	690d      	ldr	r5, [r1, #16]
 801c494:	fa05 f50a 	lsl.w	r5, r5, sl
 801c498:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 801c49c:	f8c8 5020 	str.w	r5, [r8, #32]
 801c4a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801c4a4:	f04f 0803 	mov.w	r8, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c4a8:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801c4aa:	fa08 f80c 	lsl.w	r8, r8, ip
 801c4ae:	ea6f 0808 	mvn.w	r8, r8
 801c4b2:	ea05 0a08 	and.w	sl, r5, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801c4b6:	684d      	ldr	r5, [r1, #4]
 801c4b8:	f005 0503 	and.w	r5, r5, #3
 801c4bc:	fa05 f50c 	lsl.w	r5, r5, ip
 801c4c0:	ea45 050a 	orr.w	r5, r5, sl
      GPIOx->MODER = temp;
 801c4c4:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801c4c6:	684d      	ldr	r5, [r1, #4]
 801c4c8:	f025 0510 	bic.w	r5, r5, #16
 801c4cc:	3d01      	subs	r5, #1
 801c4ce:	2d01      	cmp	r5, #1
 801c4d0:	d812      	bhi.n	801c4f8 <HAL_GPIO_Init+0xb0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801c4d2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c4d4:	68cf      	ldr	r7, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801c4d6:	ea08 0505 	and.w	r5, r8, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c4da:	fa07 fa0c 	lsl.w	sl, r7, ip
 801c4de:	ea4a 0505 	orr.w	r5, sl, r5
        GPIOx->OSPEEDR = temp;
 801c4e2:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c4e4:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801c4e6:	ea25 0a02 	bic.w	sl, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801c4ea:	684d      	ldr	r5, [r1, #4]
 801c4ec:	f3c5 1500 	ubfx	r5, r5, #4, #1
 801c4f0:	409d      	lsls	r5, r3
 801c4f2:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 801c4f6:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801c4f8:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801c4fa:	ea08 0805 	and.w	r8, r8, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c4fe:	688d      	ldr	r5, [r1, #8]
 801c500:	fa05 f50c 	lsl.w	r5, r5, ip
 801c504:	ea45 0508 	orr.w	r5, r5, r8
      GPIOx->PUPDR = temp;
 801c508:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801c50a:	684d      	ldr	r5, [r1, #4]
 801c50c:	00ed      	lsls	r5, r5, #3
 801c50e:	f140 8083 	bpl.w	801c618 <HAL_GPIO_Init+0x1d0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c512:	4f46      	ldr	r7, [pc, #280]	; (801c62c <HAL_GPIO_Init+0x1e4>)
 801c514:	2500      	movs	r5, #0
 801c516:	9501      	str	r5, [sp, #4]
 801c518:	f8d7 c044 	ldr.w	ip, [r7, #68]	; 0x44
 801c51c:	f44c 4c80 	orr.w	ip, ip, #16384	; 0x4000
 801c520:	f8c7 c044 	str.w	ip, [r7, #68]	; 0x44
 801c524:	f8d7 c044 	ldr.w	ip, [r7, #68]	; 0x44
 801c528:	f023 0803 	bic.w	r8, r3, #3
 801c52c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 801c530:	f40c 4c80 	and.w	ip, ip, #16384	; 0x4000
 801c534:	f508 389c 	add.w	r8, r8, #79872	; 0x13800
 801c538:	f8cd c004 	str.w	ip, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 801c53c:	f003 0a03 	and.w	sl, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c540:	f8dd c004 	ldr.w	ip, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 801c544:	f8d8 b008 	ldr.w	fp, [r8, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 801c548:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801c54c:	f04f 0c0f 	mov.w	ip, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801c550:	f5a7 5760 	sub.w	r7, r7, #14336	; 0x3800
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 801c554:	fa0c fc0a 	lsl.w	ip, ip, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801c558:	42b8      	cmp	r0, r7
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 801c55a:	ea2b 0c0c 	bic.w	ip, fp, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801c55e:	d033      	beq.n	801c5c8 <HAL_GPIO_Init+0x180>
 801c560:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 801c564:	f505 3501 	add.w	r5, r5, #132096	; 0x20400
 801c568:	42a8      	cmp	r0, r5
 801c56a:	d01e      	beq.n	801c5aa <HAL_GPIO_Init+0x162>
 801c56c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801c570:	42a8      	cmp	r0, r5
 801c572:	d01c      	beq.n	801c5ae <HAL_GPIO_Init+0x166>
 801c574:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801c578:	42a8      	cmp	r0, r5
 801c57a:	d01a      	beq.n	801c5b2 <HAL_GPIO_Init+0x16a>
 801c57c:	4548      	cmp	r0, r9
 801c57e:	d01a      	beq.n	801c5b6 <HAL_GPIO_Init+0x16e>
 801c580:	4570      	cmp	r0, lr
 801c582:	d01a      	beq.n	801c5ba <HAL_GPIO_Init+0x172>
 801c584:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 801c588:	42a8      	cmp	r0, r5
 801c58a:	d018      	beq.n	801c5be <HAL_GPIO_Init+0x176>
 801c58c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801c590:	42a8      	cmp	r0, r5
 801c592:	d016      	beq.n	801c5c2 <HAL_GPIO_Init+0x17a>
 801c594:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801c598:	42a8      	cmp	r0, r5
 801c59a:	d014      	beq.n	801c5c6 <HAL_GPIO_Init+0x17e>
 801c59c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801c5a0:	42a8      	cmp	r0, r5
 801c5a2:	bf0c      	ite	eq
 801c5a4:	2509      	moveq	r5, #9
 801c5a6:	250a      	movne	r5, #10
 801c5a8:	e00e      	b.n	801c5c8 <HAL_GPIO_Init+0x180>
 801c5aa:	2501      	movs	r5, #1
 801c5ac:	e00c      	b.n	801c5c8 <HAL_GPIO_Init+0x180>
 801c5ae:	2502      	movs	r5, #2
 801c5b0:	e00a      	b.n	801c5c8 <HAL_GPIO_Init+0x180>
 801c5b2:	2503      	movs	r5, #3
 801c5b4:	e008      	b.n	801c5c8 <HAL_GPIO_Init+0x180>
 801c5b6:	2504      	movs	r5, #4
 801c5b8:	e006      	b.n	801c5c8 <HAL_GPIO_Init+0x180>
 801c5ba:	2505      	movs	r5, #5
 801c5bc:	e004      	b.n	801c5c8 <HAL_GPIO_Init+0x180>
 801c5be:	2506      	movs	r5, #6
 801c5c0:	e002      	b.n	801c5c8 <HAL_GPIO_Init+0x180>
 801c5c2:	2507      	movs	r5, #7
 801c5c4:	e000      	b.n	801c5c8 <HAL_GPIO_Init+0x180>
 801c5c6:	2508      	movs	r5, #8
 801c5c8:	fa05 f50a 	lsl.w	r5, r5, sl
 801c5cc:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c5d0:	f8c8 5008 	str.w	r5, [r8, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801c5d4:	684f      	ldr	r7, [r1, #4]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801c5d6:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 801c5d8:	ea6f 0c02 	mvn.w	ip, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801c5dc:	03ff      	lsls	r7, r7, #15
        {
          temp |= iocurrent;
 801c5de:	bf4c      	ite	mi
 801c5e0:	4315      	orrmi	r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 801c5e2:	ea05 050c 	andpl.w	r5, r5, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 801c5e6:	6035      	str	r5, [r6, #0]

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801c5e8:	684f      	ldr	r7, [r1, #4]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
 801c5ea:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801c5ec:	03bf      	lsls	r7, r7, #14
        {
          temp |= iocurrent;
 801c5ee:	bf4c      	ite	mi
 801c5f0:	4315      	orrmi	r5, r2
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 801c5f2:	ea0c 0505 	andpl.w	r5, ip, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 801c5f6:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801c5f8:	684f      	ldr	r7, [r1, #4]
          temp |= iocurrent;
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801c5fa:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801c5fc:	02ff      	lsls	r7, r7, #11
        {
          temp |= iocurrent;
 801c5fe:	bf4c      	ite	mi
 801c600:	4315      	orrmi	r5, r2
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 801c602:	ea0c 0505 	andpl.w	r5, ip, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 801c606:	60b5      	str	r5, [r6, #8]

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801c608:	684f      	ldr	r7, [r1, #4]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
 801c60a:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801c60c:	02bf      	lsls	r7, r7, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 801c60e:	bf54      	ite	pl
 801c610:	ea0c 0205 	andpl.w	r2, ip, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 801c614:	432a      	orrmi	r2, r5
        }
        EXTI->FTSR = temp;
 801c616:	60e2      	str	r2, [r4, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801c618:	3301      	adds	r3, #1
 801c61a:	2b10      	cmp	r3, #16
 801c61c:	f47f af1d 	bne.w	801c45a <HAL_GPIO_Init+0x12>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 801c620:	b003      	add	sp, #12
 801c622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c626:	bf00      	nop
 801c628:	40013c00 	.word	0x40013c00
 801c62c:	40023800 	.word	0x40023800
 801c630:	40021000 	.word	0x40021000
 801c634:	40021400 	.word	0x40021400

0801c638 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801c638:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 801c63a:	b180      	cbz	r0, 801c65e <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 801c63c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801c640:	b113      	cbz	r3, 801c648 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 801c642:	2300      	movs	r3, #0
 801c644:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 801c648:	b109      	cbz	r1, 801c64e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 801c64a:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 801c64e:	2301      	movs	r3, #1
 801c650:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 801c654:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801c656:	f7ff fd9b 	bl	801c190 <USBD_LL_Init>
  
  return USBD_OK; 
 801c65a:	2000      	movs	r0, #0
 801c65c:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 801c65e:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 801c660:	bd08      	pop	{r3, pc}

0801c662 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 801c662:	b119      	cbz	r1, 801c66c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801c664:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 801c668:	2000      	movs	r0, #0
 801c66a:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 801c66c:	2002      	movs	r0, #2
  }
  
  return status;
}
 801c66e:	4770      	bx	lr

0801c670 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 801c670:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 801c672:	f7ff fdc9 	bl	801c208 <USBD_LL_Start>
  
  return USBD_OK;  
}
 801c676:	2000      	movs	r0, #0
 801c678:	bd08      	pop	{r3, pc}

0801c67a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c67a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 801c67c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801c680:	b90b      	cbnz	r3, 801c686 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 801c682:	2002      	movs	r0, #2
 801c684:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	4798      	blx	r3
 801c68a:	2800      	cmp	r0, #0
 801c68c:	d1f9      	bne.n	801c682 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 801c68e:	bd08      	pop	{r3, pc}

0801c690 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c690:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 801c692:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801c696:	685b      	ldr	r3, [r3, #4]
 801c698:	4798      	blx	r3
  return USBD_OK;
}
 801c69a:	2000      	movs	r0, #0
 801c69c:	bd08      	pop	{r3, pc}

0801c69e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801c69e:	b538      	push	{r3, r4, r5, lr}
 801c6a0:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801c6a2:	f500 7502 	add.w	r5, r0, #520	; 0x208
 801c6a6:	4628      	mov	r0, r5
 801c6a8:	f000 f8fd 	bl	801c8a6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 801c6ac:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 801c6ae:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 801c6b2:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 801c6b6:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 801c6ba:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 801c6be:	f001 031f 	and.w	r3, r1, #31
 801c6c2:	2b01      	cmp	r3, #1
 801c6c4:	d00c      	beq.n	801c6e0 <USBD_LL_SetupStage+0x42>
 801c6c6:	d306      	bcc.n	801c6d6 <USBD_LL_SetupStage+0x38>
 801c6c8:	2b02      	cmp	r3, #2
 801c6ca:	d10e      	bne.n	801c6ea <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 801c6cc:	4629      	mov	r1, r5
 801c6ce:	4620      	mov	r0, r4
 801c6d0:	f000 fa2a 	bl	801cb28 <USBD_StdEPReq>
    break;
 801c6d4:	e00e      	b.n	801c6f4 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 801c6d6:	4629      	mov	r1, r5
 801c6d8:	4620      	mov	r0, r4
 801c6da:	f000 f903 	bl	801c8e4 <USBD_StdDevReq>
    break;
 801c6de:	e009      	b.n	801c6f4 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 801c6e0:	4629      	mov	r1, r5
 801c6e2:	4620      	mov	r0, r4
 801c6e4:	f000 fa08 	bl	801caf8 <USBD_StdItfReq>
    break;
 801c6e8:	e004      	b.n	801c6f4 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 801c6ea:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	f7ff fda9 	bl	801c246 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 801c6f4:	2000      	movs	r0, #0
 801c6f6:	bd38      	pop	{r3, r4, r5, pc}

0801c6f8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 801c6f8:	b538      	push	{r3, r4, r5, lr}
 801c6fa:	4604      	mov	r4, r0
 801c6fc:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 801c6fe:	bb09      	cbnz	r1, 801c744 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 801c700:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 801c704:	2b03      	cmp	r3, #3
 801c706:	d126      	bne.n	801c756 <USBD_LL_DataOutStage+0x5e>
    {
      if(pep->rem_length > pep->maxpacket)
 801c708:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 801c70c:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 801c710:	4291      	cmp	r1, r2
 801c712:	d90a      	bls.n	801c72a <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 801c714:	1a8b      	subs	r3, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 801c716:	429a      	cmp	r2, r3
 801c718:	bf28      	it	cs
 801c71a:	461a      	movcs	r2, r3
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 801c71c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 801c720:	b292      	uxth	r2, r2
 801c722:	4629      	mov	r1, r5
 801c724:	f000 faa3 	bl	801cc6e <USBD_CtlContinueRx>
 801c728:	e015      	b.n	801c756 <USBD_LL_DataOutStage+0x5e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 801c72a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801c72e:	691b      	ldr	r3, [r3, #16]
 801c730:	b123      	cbz	r3, 801c73c <USBD_LL_DataOutStage+0x44>
 801c732:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 801c736:	2a03      	cmp	r2, #3
 801c738:	d100      	bne.n	801c73c <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 801c73a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801c73c:	4620      	mov	r0, r4
 801c73e:	f000 fa9e 	bl	801cc7e <USBD_CtlSendStatus>
 801c742:	e008      	b.n	801c756 <USBD_LL_DataOutStage+0x5e>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 801c744:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801c748:	699b      	ldr	r3, [r3, #24]
 801c74a:	b123      	cbz	r3, 801c756 <USBD_LL_DataOutStage+0x5e>
 801c74c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 801c750:	2a03      	cmp	r2, #3
 801c752:	d100      	bne.n	801c756 <USBD_LL_DataOutStage+0x5e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 801c754:	4798      	blx	r3
  }  
  return USBD_OK;
}
 801c756:	2000      	movs	r0, #0
 801c758:	bd38      	pop	{r3, r4, r5, pc}

0801c75a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 801c75a:	b570      	push	{r4, r5, r6, lr}
 801c75c:	4613      	mov	r3, r2
 801c75e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 801c760:	460e      	mov	r6, r1
 801c762:	2900      	cmp	r1, #0
 801c764:	d13c      	bne.n	801c7e0 <USBD_LL_DataInStage+0x86>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 801c766:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 801c76a:	2a02      	cmp	r2, #2
 801c76c:	d130      	bne.n	801c7d0 <USBD_LL_DataInStage+0x76>
    {
      if(pep->rem_length > pep->maxpacket)
 801c76e:	69c5      	ldr	r5, [r0, #28]
 801c770:	6a02      	ldr	r2, [r0, #32]
 801c772:	4295      	cmp	r5, r2
 801c774:	d907      	bls.n	801c786 <USBD_LL_DataInStage+0x2c>
      {
        pep->rem_length -=  pep->maxpacket;
 801c776:	1aaa      	subs	r2, r5, r2
 801c778:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 801c77a:	4619      	mov	r1, r3
 801c77c:	b292      	uxth	r2, r2
 801c77e:	f000 fa5f 	bl	801cc40 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 801c782:	4633      	mov	r3, r6
 801c784:	e011      	b.n	801c7aa <USBD_LL_DataInStage+0x50>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 801c786:	6983      	ldr	r3, [r0, #24]
 801c788:	fbb3 f5f2 	udiv	r5, r3, r2
 801c78c:	fb02 3515 	mls	r5, r2, r5, r3
 801c790:	b98d      	cbnz	r5, 801c7b6 <USBD_LL_DataInStage+0x5c>
 801c792:	429a      	cmp	r2, r3
 801c794:	d80f      	bhi.n	801c7b6 <USBD_LL_DataInStage+0x5c>
           (pep->total_length >= pep->maxpacket) &&
 801c796:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 801c79a:	4293      	cmp	r3, r2
 801c79c:	d20b      	bcs.n	801c7b6 <USBD_LL_DataInStage+0x5c>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 801c79e:	462a      	mov	r2, r5
 801c7a0:	f000 fa4e 	bl	801cc40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 801c7a4:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 801c7a8:	462b      	mov	r3, r5
 801c7aa:	461a      	mov	r2, r3
 801c7ac:	4619      	mov	r1, r3
 801c7ae:	4620      	mov	r0, r4
 801c7b0:	f7ff fd78 	bl	801c2a4 <USBD_LL_PrepareReceive>
 801c7b4:	e00c      	b.n	801c7d0 <USBD_LL_DataInStage+0x76>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 801c7b6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 801c7ba:	68db      	ldr	r3, [r3, #12]
 801c7bc:	b12b      	cbz	r3, 801c7ca <USBD_LL_DataInStage+0x70>
 801c7be:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 801c7c2:	2a03      	cmp	r2, #3
 801c7c4:	d101      	bne.n	801c7ca <USBD_LL_DataInStage+0x70>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 801c7c6:	4620      	mov	r0, r4
 801c7c8:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 801c7ca:	4620      	mov	r0, r4
 801c7cc:	f000 fa62 	bl	801cc94 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 801c7d0:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801c7d4:	2b01      	cmp	r3, #1
 801c7d6:	d10c      	bne.n	801c7f2 <USBD_LL_DataInStage+0x98>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 801c7d8:	2300      	movs	r3, #0
 801c7da:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 801c7de:	e008      	b.n	801c7f2 <USBD_LL_DataInStage+0x98>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 801c7e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801c7e4:	695b      	ldr	r3, [r3, #20]
 801c7e6:	b123      	cbz	r3, 801c7f2 <USBD_LL_DataInStage+0x98>
 801c7e8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 801c7ec:	2a03      	cmp	r2, #3
 801c7ee:	d100      	bne.n	801c7f2 <USBD_LL_DataInStage+0x98>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 801c7f0:	4798      	blx	r3
  }  
  return USBD_OK;
}
 801c7f2:	2000      	movs	r0, #0
 801c7f4:	bd70      	pop	{r4, r5, r6, pc}

0801c7f6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 801c7f6:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 801c7f8:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 801c7fa:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 801c7fc:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801c7fe:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 801c800:	2340      	movs	r3, #64	; 0x40
 801c802:	f7ff fd08 	bl	801c216 <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 801c806:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801c808:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 801c80c:	2200      	movs	r2, #0
 801c80e:	2180      	movs	r1, #128	; 0x80
 801c810:	4620      	mov	r0, r4
 801c812:	f7ff fd00 	bl	801c216 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c816:	2301      	movs	r3, #1
 801c818:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 801c81c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801c820:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 801c822:	b12b      	cbz	r3, 801c830 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 801c824:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 801c828:	7921      	ldrb	r1, [r4, #4]
 801c82a:	685b      	ldr	r3, [r3, #4]
 801c82c:	4620      	mov	r0, r4
 801c82e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 801c830:	2000      	movs	r0, #0
 801c832:	bd38      	pop	{r3, r4, r5, pc}

0801c834 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 801c834:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 801c836:	2000      	movs	r0, #0
 801c838:	4770      	bx	lr

0801c83a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 801c83a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 801c83e:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801c842:	2304      	movs	r3, #4
 801c844:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 801c848:	2000      	movs	r0, #0
 801c84a:	4770      	bx	lr

0801c84c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 801c84c:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 801c850:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 801c854:	2000      	movs	r0, #0
 801c856:	4770      	bx	lr

0801c858 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 801c858:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 801c85a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 801c85e:	2a03      	cmp	r2, #3
 801c860:	d104      	bne.n	801c86c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 801c862:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801c866:	69db      	ldr	r3, [r3, #28]
 801c868:	b103      	cbz	r3, 801c86c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 801c86a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 801c86c:	2000      	movs	r0, #0
 801c86e:	bd08      	pop	{r3, pc}

0801c870 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 801c870:	b508      	push	{r3, lr}
  pdev->pClass->IsoINIncomplete(pdev,epnum);
 801c872:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801c876:	6a1b      	ldr	r3, [r3, #32]
 801c878:	4798      	blx	r3
  return USBD_OK;
}
 801c87a:	2000      	movs	r0, #0
 801c87c:	bd08      	pop	{r3, pc}

0801c87e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 801c87e:	b508      	push	{r3, lr}
  pdev->pClass->IsoOUTIncomplete(pdev,epnum);
 801c880:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801c884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c886:	4798      	blx	r3
  return USBD_OK;
}
 801c888:	2000      	movs	r0, #0
 801c88a:	bd08      	pop	{r3, pc}

0801c88c <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 801c88c:	2000      	movs	r0, #0
 801c88e:	4770      	bx	lr

0801c890 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 801c890:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c892:	2201      	movs	r2, #1
 801c894:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 801c898:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 801c89c:	7901      	ldrb	r1, [r0, #4]
 801c89e:	6852      	ldr	r2, [r2, #4]
 801c8a0:	4790      	blx	r2
   
  return USBD_OK;
}
 801c8a2:	2000      	movs	r0, #0
 801c8a4:	bd08      	pop	{r3, pc}

0801c8a6 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 801c8a6:	780b      	ldrb	r3, [r1, #0]
 801c8a8:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 801c8aa:	784b      	ldrb	r3, [r1, #1]
 801c8ac:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 801c8ae:	78ca      	ldrb	r2, [r1, #3]
 801c8b0:	788b      	ldrb	r3, [r1, #2]
 801c8b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801c8b6:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 801c8b8:	794a      	ldrb	r2, [r1, #5]
 801c8ba:	790b      	ldrb	r3, [r1, #4]
 801c8bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801c8c0:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 801c8c2:	79ca      	ldrb	r2, [r1, #7]
 801c8c4:	798b      	ldrb	r3, [r1, #6]
 801c8c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801c8ca:	80c3      	strh	r3, [r0, #6]
 801c8cc:	4770      	bx	lr

0801c8ce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801c8ce:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 801c8d0:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801c8d2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 801c8d4:	f7ff fcb7 	bl	801c246 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 801c8d8:	4620      	mov	r0, r4
 801c8da:	2100      	movs	r1, #0
}
 801c8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 801c8e0:	f7ff bcb1 	b.w	801c246 <USBD_LL_StallEP>

0801c8e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801c8e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 801c8e6:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801c8e8:	4604      	mov	r4, r0
 801c8ea:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 801c8ec:	2b09      	cmp	r3, #9
 801c8ee:	f200 80f9 	bhi.w	801cae4 <USBD_StdDevReq+0x200>
 801c8f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 801c8f6:	00cb      	.short	0x00cb
 801c8f8:	00f700e2 	.word	0x00f700e2
 801c8fc:	00f700de 	.word	0x00f700de
 801c900:	000a0075 	.word	0x000a0075
 801c904:	00bb00f7 	.word	0x00bb00f7
 801c908:	0091      	.short	0x0091
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 801c90a:	884b      	ldrh	r3, [r1, #2]
 801c90c:	0a1a      	lsrs	r2, r3, #8
 801c90e:	3a01      	subs	r2, #1
 801c910:	2a06      	cmp	r2, #6
 801c912:	f200 80e7 	bhi.w	801cae4 <USBD_StdDevReq+0x200>
 801c916:	e8df f012 	tbh	[pc, r2, lsl #1]
 801c91a:	0007      	.short	0x0007
 801c91c:	0017000b 	.word	0x0017000b
 801c920:	00e500e5 	.word	0x00e500e5
 801c924:	0047003c 	.word	0x0047003c
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c928:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 801c92c:	681b      	ldr	r3, [r3, #0]
 801c92e:	e017      	b.n	801c960 <USBD_StdDevReq+0x7c>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 801c930:	7c02      	ldrb	r2, [r0, #16]
 801c932:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801c936:	b90a      	cbnz	r2, 801c93c <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 801c938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c93a:	e000      	b.n	801c93e <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 801c93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c93e:	f10d 0006 	add.w	r0, sp, #6
 801c942:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c944:	2302      	movs	r3, #2
 801c946:	e03a      	b.n	801c9be <USBD_StdDevReq+0xda>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 801c948:	b2db      	uxtb	r3, r3
 801c94a:	2b05      	cmp	r3, #5
 801c94c:	f200 80ca 	bhi.w	801cae4 <USBD_StdDevReq+0x200>
 801c950:	e8df f003 	tbb	[pc, r3]
 801c954:	130f0b03 	.word	0x130f0b03
 801c958:	1b17      	.short	0x1b17
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 801c95a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 801c95e:	685b      	ldr	r3, [r3, #4]
 801c960:	7c20      	ldrb	r0, [r4, #16]
 801c962:	f10d 0106 	add.w	r1, sp, #6
 801c966:	4798      	blx	r3
 801c968:	e02a      	b.n	801c9c0 <USBD_StdDevReq+0xdc>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c96a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 801c96e:	689b      	ldr	r3, [r3, #8]
 801c970:	e7f6      	b.n	801c960 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c972:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 801c976:	68db      	ldr	r3, [r3, #12]
 801c978:	e7f2      	b.n	801c960 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c97a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 801c97e:	691b      	ldr	r3, [r3, #16]
 801c980:	e7ee      	b.n	801c960 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c982:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 801c986:	695b      	ldr	r3, [r3, #20]
 801c988:	e7ea      	b.n	801c960 <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c98a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 801c98e:	699b      	ldr	r3, [r3, #24]
 801c990:	e7e6      	b.n	801c960 <USBD_StdDevReq+0x7c>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 801c992:	7c03      	ldrb	r3, [r0, #16]
 801c994:	2b00      	cmp	r3, #0
 801c996:	f040 80a5 	bne.w	801cae4 <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801c99a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801c99e:	f10d 0006 	add.w	r0, sp, #6
 801c9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c9a4:	4798      	blx	r3
 801c9a6:	e00b      	b.n	801c9c0 <USBD_StdDevReq+0xdc>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 801c9a8:	7c03      	ldrb	r3, [r0, #16]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	f040 809a 	bne.w	801cae4 <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801c9b0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801c9b4:	f10d 0006 	add.w	r0, sp, #6
 801c9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c9ba:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c9bc:	2307      	movs	r3, #7
 801c9be:	7043      	strb	r3, [r0, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 801c9c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801c9c4:	2a00      	cmp	r2, #0
 801c9c6:	f000 8091 	beq.w	801caec <USBD_StdDevReq+0x208>
 801c9ca:	88eb      	ldrh	r3, [r5, #6]
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	f000 808d 	beq.w	801caec <USBD_StdDevReq+0x208>
  {
    
    len = MIN(len , req->wLength);
 801c9d2:	429a      	cmp	r2, r3
 801c9d4:	bf28      	it	cs
 801c9d6:	461a      	movcs	r2, r3
 801c9d8:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 801c9dc:	4601      	mov	r1, r0
 801c9de:	e064      	b.n	801caaa <USBD_StdDevReq+0x1c6>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 801c9e0:	888b      	ldrh	r3, [r1, #4]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d17e      	bne.n	801cae4 <USBD_StdDevReq+0x200>
 801c9e6:	88cb      	ldrh	r3, [r1, #6]
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d17b      	bne.n	801cae4 <USBD_StdDevReq+0x200>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 801c9ec:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 801c9f0:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 801c9f2:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 801c9f4:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 801c9f8:	d074      	beq.n	801cae4 <USBD_StdDevReq+0x200>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 801c9fa:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 801c9fe:	4631      	mov	r1, r6
 801ca00:	f7ff fc42 	bl	801c288 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 801ca04:	4620      	mov	r0, r4
 801ca06:	f000 f93a 	bl	801cc7e <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 801ca0a:	b10e      	cbz	r6, 801ca10 <USBD_StdDevReq+0x12c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 801ca0c:	2302      	movs	r3, #2
 801ca0e:	e000      	b.n	801ca12 <USBD_StdDevReq+0x12e>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 801ca10:	2301      	movs	r3, #1
 801ca12:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 801ca16:	e069      	b.n	801caec <USBD_StdDevReq+0x208>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 801ca18:	7889      	ldrb	r1, [r1, #2]
 801ca1a:	4e36      	ldr	r6, [pc, #216]	; (801caf4 <USBD_StdDevReq+0x210>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 801ca1c:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 801ca1e:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 801ca20:	d860      	bhi.n	801cae4 <USBD_StdDevReq+0x200>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 801ca22:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 801ca26:	2b02      	cmp	r3, #2
 801ca28:	d002      	beq.n	801ca30 <USBD_StdDevReq+0x14c>
 801ca2a:	2b03      	cmp	r3, #3
 801ca2c:	d008      	beq.n	801ca40 <USBD_StdDevReq+0x15c>
 801ca2e:	e059      	b.n	801cae4 <USBD_StdDevReq+0x200>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 801ca30:	2900      	cmp	r1, #0
 801ca32:	d053      	beq.n	801cadc <USBD_StdDevReq+0x1f8>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 801ca34:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801ca36:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 801ca38:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801ca3a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 801ca3e:	e00f      	b.n	801ca60 <USBD_StdDevReq+0x17c>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 801ca40:	b931      	cbnz	r1, 801ca50 <USBD_StdDevReq+0x16c>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ca42:	2302      	movs	r3, #2
 801ca44:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 801ca48:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 801ca4a:	f7ff fe21 	bl	801c690 <USBD_ClrClassConfig>
 801ca4e:	e045      	b.n	801cadc <USBD_StdDevReq+0x1f8>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 801ca50:	6841      	ldr	r1, [r0, #4]
 801ca52:	2901      	cmp	r1, #1
 801ca54:	d042      	beq.n	801cadc <USBD_StdDevReq+0x1f8>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 801ca56:	b2c9      	uxtb	r1, r1
 801ca58:	f7ff fe1a 	bl	801c690 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 801ca5c:	7831      	ldrb	r1, [r6, #0]
 801ca5e:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 801ca60:	4620      	mov	r0, r4
 801ca62:	f7ff fe0a 	bl	801c67a <USBD_SetClassConfig>
 801ca66:	2802      	cmp	r0, #2
 801ca68:	d138      	bne.n	801cadc <USBD_StdDevReq+0x1f8>
 801ca6a:	e03b      	b.n	801cae4 <USBD_StdDevReq+0x200>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 801ca6c:	88ca      	ldrh	r2, [r1, #6]
 801ca6e:	2a01      	cmp	r2, #1
 801ca70:	d138      	bne.n	801cae4 <USBD_StdDevReq+0x200>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 801ca72:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 801ca76:	2b02      	cmp	r3, #2
 801ca78:	d003      	beq.n	801ca82 <USBD_StdDevReq+0x19e>
 801ca7a:	2b03      	cmp	r3, #3
 801ca7c:	d132      	bne.n	801cae4 <USBD_StdDevReq+0x200>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 801ca7e:	1d01      	adds	r1, r0, #4
 801ca80:	e013      	b.n	801caaa <USBD_StdDevReq+0x1c6>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 801ca82:	4601      	mov	r1, r0
 801ca84:	2300      	movs	r3, #0
 801ca86:	f841 3f08 	str.w	r3, [r1, #8]!
 801ca8a:	e00e      	b.n	801caaa <USBD_StdDevReq+0x1c6>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 801ca8c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 801ca90:	3b02      	subs	r3, #2
 801ca92:	2b01      	cmp	r3, #1
 801ca94:	d826      	bhi.n	801cae4 <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 801ca96:	2301      	movs	r3, #1
 801ca98:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 801ca9a:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 801ca9e:	b10b      	cbz	r3, 801caa4 <USBD_StdDevReq+0x1c0>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 801caa0:	2303      	movs	r3, #3
 801caa2:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 801caa4:	2202      	movs	r2, #2
 801caa6:	f104 010c 	add.w	r1, r4, #12
 801caaa:	4620      	mov	r0, r4
 801caac:	f000 f8bb 	bl	801cc26 <USBD_CtlSendData>
 801cab0:	e01c      	b.n	801caec <USBD_StdDevReq+0x208>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801cab2:	884b      	ldrh	r3, [r1, #2]
 801cab4:	2b01      	cmp	r3, #1
 801cab6:	d119      	bne.n	801caec <USBD_StdDevReq+0x208>
 801cab8:	e008      	b.n	801cacc <USBD_StdDevReq+0x1e8>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 801caba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 801cabe:	3b02      	subs	r3, #2
 801cac0:	2b01      	cmp	r3, #1
 801cac2:	d80f      	bhi.n	801cae4 <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 801cac4:	884b      	ldrh	r3, [r1, #2]
 801cac6:	2b01      	cmp	r3, #1
 801cac8:	d110      	bne.n	801caec <USBD_StdDevReq+0x208>
    {
      pdev->dev_remote_wakeup = 0; 
 801caca:	2300      	movs	r3, #0
 801cacc:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 801cad0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 801cad4:	4629      	mov	r1, r5
 801cad6:	689b      	ldr	r3, [r3, #8]
 801cad8:	4620      	mov	r0, r4
 801cada:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 801cadc:	4620      	mov	r0, r4
 801cade:	f000 f8ce 	bl	801cc7e <USBD_CtlSendStatus>
 801cae2:	e003      	b.n	801caec <USBD_StdDevReq+0x208>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 801cae4:	4629      	mov	r1, r5
 801cae6:	4620      	mov	r0, r4
 801cae8:	f7ff fef1 	bl	801c8ce <USBD_CtlError>
    break;
  }
  
  return ret;
}
 801caec:	2000      	movs	r0, #0
 801caee:	b002      	add	sp, #8
 801caf0:	bd70      	pop	{r4, r5, r6, pc}
 801caf2:	bf00      	nop
 801caf4:	100032ad 	.word	0x100032ad

0801caf8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801caf8:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 801cafa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 801cafe:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801cb00:	4604      	mov	r4, r0
 801cb02:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 801cb04:	d10c      	bne.n	801cb20 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 801cb06:	790b      	ldrb	r3, [r1, #4]
 801cb08:	2b01      	cmp	r3, #1
 801cb0a:	d809      	bhi.n	801cb20 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 801cb0c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801cb10:	689b      	ldr	r3, [r3, #8]
 801cb12:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 801cb14:	88eb      	ldrh	r3, [r5, #6]
 801cb16:	b92b      	cbnz	r3, 801cb24 <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 801cb18:	4620      	mov	r0, r4
 801cb1a:	f000 f8b0 	bl	801cc7e <USBD_CtlSendStatus>
 801cb1e:	e001      	b.n	801cb24 <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 801cb20:	f7ff fed5 	bl	801c8ce <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 801cb24:	2000      	movs	r0, #0
 801cb26:	bd38      	pop	{r3, r4, r5, pc}

0801cb28 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801cb28:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 801cb2a:	780a      	ldrb	r2, [r1, #0]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 801cb2c:	888e      	ldrh	r6, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 801cb2e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801cb32:	2a20      	cmp	r2, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801cb34:	4604      	mov	r4, r0
 801cb36:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 801cb38:	b2f3      	uxtb	r3, r6
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 801cb3a:	d104      	bne.n	801cb46 <USBD_StdEPReq+0x1e>
  {
    pdev->pClass->Setup (pdev, req);
 801cb3c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 801cb40:	689b      	ldr	r3, [r3, #8]
 801cb42:	4798      	blx	r3
    
    return USBD_OK;
 801cb44:	e051      	b.n	801cbea <USBD_StdEPReq+0xc2>
  }
  
  switch (req->bRequest) 
 801cb46:	784a      	ldrb	r2, [r1, #1]
 801cb48:	2a01      	cmp	r2, #1
 801cb4a:	d010      	beq.n	801cb6e <USBD_StdEPReq+0x46>
 801cb4c:	d326      	bcc.n	801cb9c <USBD_StdEPReq+0x74>
 801cb4e:	2a03      	cmp	r2, #3
 801cb50:	d14b      	bne.n	801cbea <USBD_StdEPReq+0xc2>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 801cb52:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 801cb56:	2a02      	cmp	r2, #2
 801cb58:	d027      	beq.n	801cbaa <USBD_StdEPReq+0x82>
 801cb5a:	2a03      	cmp	r2, #3
 801cb5c:	d143      	bne.n	801cbe6 <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 801cb5e:	884a      	ldrh	r2, [r1, #2]
 801cb60:	b992      	cbnz	r2, 801cb88 <USBD_StdEPReq+0x60>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 801cb62:	065e      	lsls	r6, r3, #25
 801cb64:	d010      	beq.n	801cb88 <USBD_StdEPReq+0x60>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 801cb66:	4619      	mov	r1, r3
 801cb68:	f7ff fb6d 	bl	801c246 <USBD_LL_StallEP>
 801cb6c:	e00c      	b.n	801cb88 <USBD_StdEPReq+0x60>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 801cb6e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 801cb72:	2a02      	cmp	r2, #2
 801cb74:	d019      	beq.n	801cbaa <USBD_StdEPReq+0x82>
 801cb76:	2a03      	cmp	r2, #3
 801cb78:	d135      	bne.n	801cbe6 <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 801cb7a:	884a      	ldrh	r2, [r1, #2]
 801cb7c:	bbaa      	cbnz	r2, 801cbea <USBD_StdEPReq+0xc2>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 801cb7e:	0659      	lsls	r1, r3, #25
 801cb80:	d008      	beq.n	801cb94 <USBD_StdEPReq+0x6c>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 801cb82:	4619      	mov	r1, r3
 801cb84:	f7ff fb66 	bl	801c254 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 801cb88:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 801cb8c:	4629      	mov	r1, r5
 801cb8e:	689b      	ldr	r3, [r3, #8]
 801cb90:	4620      	mov	r0, r4
 801cb92:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801cb94:	4620      	mov	r0, r4
 801cb96:	f000 f872 	bl	801cc7e <USBD_CtlSendStatus>
 801cb9a:	e026      	b.n	801cbea <USBD_StdEPReq+0xc2>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 801cb9c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 801cba0:	2a02      	cmp	r2, #2
 801cba2:	d002      	beq.n	801cbaa <USBD_StdEPReq+0x82>
 801cba4:	2a03      	cmp	r2, #3
 801cba6:	d006      	beq.n	801cbb6 <USBD_StdEPReq+0x8e>
 801cba8:	e01d      	b.n	801cbe6 <USBD_StdEPReq+0xbe>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 801cbaa:	065a      	lsls	r2, r3, #25
 801cbac:	d01d      	beq.n	801cbea <USBD_StdEPReq+0xc2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 801cbae:	4619      	mov	r1, r3
 801cbb0:	f7ff fb49 	bl	801c246 <USBD_LL_StallEP>
 801cbb4:	e019      	b.n	801cbea <USBD_StdEPReq+0xc2>
 801cbb6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 801cbba:	f016 0f80 	tst.w	r6, #128	; 0x80
 801cbbe:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 801cbc2:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 801cbc4:	bf14      	ite	ne
 801cbc6:	3514      	addne	r5, #20
 801cbc8:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 801cbcc:	f7ff fb49 	bl	801c262 <USBD_LL_IsStallEP>
 801cbd0:	b110      	cbz	r0, 801cbd8 <USBD_StdEPReq+0xb0>
      {
        pep->status = 0x0001;     
 801cbd2:	2301      	movs	r3, #1
 801cbd4:	602b      	str	r3, [r5, #0]
 801cbd6:	e000      	b.n	801cbda <USBD_StdEPReq+0xb2>
      }
      else
      {
        pep->status = 0x0000;  
 801cbd8:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 801cbda:	2202      	movs	r2, #2
 801cbdc:	4629      	mov	r1, r5
 801cbde:	4620      	mov	r0, r4
 801cbe0:	f000 f821 	bl	801cc26 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 801cbe4:	e001      	b.n	801cbea <USBD_StdEPReq+0xc2>
      
    default:                         
      USBD_CtlError(pdev , req);
 801cbe6:	f7ff fe72 	bl	801c8ce <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 801cbea:	2000      	movs	r0, #0
 801cbec:	bd70      	pop	{r4, r5, r6, pc}

0801cbee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801cbee:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 801cbf0:	b1c0      	cbz	r0, 801cc24 <USBD_GetString+0x36>
 801cbf2:	4605      	mov	r5, r0
 801cbf4:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 801cbf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cbfa:	b2db      	uxtb	r3, r3
 801cbfc:	2c00      	cmp	r4, #0
 801cbfe:	d1f9      	bne.n	801cbf4 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 801cc00:	005b      	lsls	r3, r3, #1
 801cc02:	3302      	adds	r3, #2
 801cc04:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 801cc06:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 801cc08:	2303      	movs	r3, #3
 801cc0a:	704b      	strb	r3, [r1, #1]
 801cc0c:	3801      	subs	r0, #1
 801cc0e:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 801cc10:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801cc14:	b135      	cbz	r5, 801cc24 <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 801cc16:	1c5a      	adds	r2, r3, #1
 801cc18:	b2d2      	uxtb	r2, r2
 801cc1a:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 801cc1c:	3302      	adds	r3, #2
 801cc1e:	b2db      	uxtb	r3, r3
 801cc20:	548c      	strb	r4, [r1, r2]
 801cc22:	e7f5      	b.n	801cc10 <USBD_GetString+0x22>
 801cc24:	bd30      	pop	{r4, r5, pc}

0801cc26 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 801cc26:	b510      	push	{r4, lr}
 801cc28:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 801cc2a:	2202      	movs	r2, #2
 801cc2c:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 801cc30:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 801cc32:	460a      	mov	r2, r1
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 801cc34:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 801cc36:	2100      	movs	r1, #0
 801cc38:	f7ff fb2d 	bl	801c296 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 801cc3c:	2000      	movs	r0, #0
 801cc3e:	bd10      	pop	{r4, pc}

0801cc40 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 801cc40:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 801cc42:	4613      	mov	r3, r2
 801cc44:	460a      	mov	r2, r1
 801cc46:	2100      	movs	r1, #0
 801cc48:	f7ff fb25 	bl	801c296 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 801cc4c:	2000      	movs	r0, #0
 801cc4e:	bd08      	pop	{r3, pc}

0801cc50 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 801cc50:	b510      	push	{r4, lr}
 801cc52:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 801cc54:	2203      	movs	r2, #3
 801cc56:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 801cc5a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 801cc5e:	460a      	mov	r2, r1
                                  uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 801cc60:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 801cc64:	2100      	movs	r1, #0
 801cc66:	f7ff fb1d 	bl	801c2a4 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 801cc6a:	2000      	movs	r0, #0
 801cc6c:	bd10      	pop	{r4, pc}

0801cc6e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 801cc6e:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 801cc70:	4613      	mov	r3, r2
 801cc72:	460a      	mov	r2, r1
 801cc74:	2100      	movs	r1, #0
 801cc76:	f7ff fb15 	bl	801c2a4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 801cc7a:	2000      	movs	r0, #0
 801cc7c:	bd08      	pop	{r3, pc}

0801cc7e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 801cc7e:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801cc80:	2304      	movs	r3, #4
 801cc82:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 801cc86:	2300      	movs	r3, #0
 801cc88:	461a      	mov	r2, r3
 801cc8a:	4619      	mov	r1, r3
 801cc8c:	f7ff fb03 	bl	801c296 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 801cc90:	2000      	movs	r0, #0
 801cc92:	bd08      	pop	{r3, pc}

0801cc94 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 801cc94:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 801cc96:	2305      	movs	r3, #5
 801cc98:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 801cc9c:	2300      	movs	r3, #0
 801cc9e:	461a      	mov	r2, r3
 801cca0:	4619      	mov	r1, r3
 801cca2:	f7ff faff 	bl	801c2a4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 801cca6:	2000      	movs	r0, #0
 801cca8:	bd08      	pop	{r3, pc}
	...

0801ccac <__aeabi_llsr>:
 801ccac:	40d0      	lsrs	r0, r2
 801ccae:	1c0b      	adds	r3, r1, #0
 801ccb0:	40d1      	lsrs	r1, r2
 801ccb2:	469c      	mov	ip, r3
 801ccb4:	3a20      	subs	r2, #32
 801ccb6:	40d3      	lsrs	r3, r2
 801ccb8:	4318      	orrs	r0, r3
 801ccba:	4252      	negs	r2, r2
 801ccbc:	4663      	mov	r3, ip
 801ccbe:	4093      	lsls	r3, r2
 801ccc0:	4318      	orrs	r0, r3
 801ccc2:	4770      	bx	lr

0801ccc4 <__aeabi_uldivmod>:
 801ccc4:	b953      	cbnz	r3, 801ccdc <__aeabi_uldivmod+0x18>
 801ccc6:	b94a      	cbnz	r2, 801ccdc <__aeabi_uldivmod+0x18>
 801ccc8:	2900      	cmp	r1, #0
 801ccca:	bf08      	it	eq
 801cccc:	2800      	cmpeq	r0, #0
 801ccce:	bf1c      	itt	ne
 801ccd0:	f04f 31ff 	movne.w	r1, #4294967295
 801ccd4:	f04f 30ff 	movne.w	r0, #4294967295
 801ccd8:	f000 b97e 	b.w	801cfd8 <__aeabi_idiv0>
 801ccdc:	f1ad 0c08 	sub.w	ip, sp, #8
 801cce0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 801cce4:	f000 f806 	bl	801ccf4 <__udivmoddi4>
 801cce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 801ccec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ccf0:	b004      	add	sp, #16
 801ccf2:	4770      	bx	lr

0801ccf4 <__udivmoddi4>:
 801ccf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccf8:	468c      	mov	ip, r1
 801ccfa:	460e      	mov	r6, r1
 801ccfc:	4604      	mov	r4, r0
 801ccfe:	9d08      	ldr	r5, [sp, #32]
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d150      	bne.n	801cda6 <__udivmoddi4+0xb2>
 801cd04:	428a      	cmp	r2, r1
 801cd06:	4617      	mov	r7, r2
 801cd08:	d96c      	bls.n	801cde4 <__udivmoddi4+0xf0>
 801cd0a:	fab2 fe82 	clz	lr, r2
 801cd0e:	f1be 0f00 	cmp.w	lr, #0
 801cd12:	d00b      	beq.n	801cd2c <__udivmoddi4+0x38>
 801cd14:	f1ce 0420 	rsb	r4, lr, #32
 801cd18:	fa20 f404 	lsr.w	r4, r0, r4
 801cd1c:	fa01 f60e 	lsl.w	r6, r1, lr
 801cd20:	ea44 0c06 	orr.w	ip, r4, r6
 801cd24:	fa02 f70e 	lsl.w	r7, r2, lr
 801cd28:	fa00 f40e 	lsl.w	r4, r0, lr
 801cd2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 801cd30:	0c22      	lsrs	r2, r4, #16
 801cd32:	fbbc f0f9 	udiv	r0, ip, r9
 801cd36:	fa1f f887 	uxth.w	r8, r7
 801cd3a:	fb09 c610 	mls	r6, r9, r0, ip
 801cd3e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 801cd42:	fb00 f308 	mul.w	r3, r0, r8
 801cd46:	42b3      	cmp	r3, r6
 801cd48:	d909      	bls.n	801cd5e <__udivmoddi4+0x6a>
 801cd4a:	19f6      	adds	r6, r6, r7
 801cd4c:	f100 32ff 	add.w	r2, r0, #4294967295
 801cd50:	f080 8122 	bcs.w	801cf98 <__udivmoddi4+0x2a4>
 801cd54:	42b3      	cmp	r3, r6
 801cd56:	f240 811f 	bls.w	801cf98 <__udivmoddi4+0x2a4>
 801cd5a:	3802      	subs	r0, #2
 801cd5c:	443e      	add	r6, r7
 801cd5e:	1af6      	subs	r6, r6, r3
 801cd60:	b2a2      	uxth	r2, r4
 801cd62:	fbb6 f3f9 	udiv	r3, r6, r9
 801cd66:	fb09 6613 	mls	r6, r9, r3, r6
 801cd6a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 801cd6e:	fb03 f808 	mul.w	r8, r3, r8
 801cd72:	45a0      	cmp	r8, r4
 801cd74:	d909      	bls.n	801cd8a <__udivmoddi4+0x96>
 801cd76:	19e4      	adds	r4, r4, r7
 801cd78:	f103 32ff 	add.w	r2, r3, #4294967295
 801cd7c:	f080 810a 	bcs.w	801cf94 <__udivmoddi4+0x2a0>
 801cd80:	45a0      	cmp	r8, r4
 801cd82:	f240 8107 	bls.w	801cf94 <__udivmoddi4+0x2a0>
 801cd86:	3b02      	subs	r3, #2
 801cd88:	443c      	add	r4, r7
 801cd8a:	ebc8 0404 	rsb	r4, r8, r4
 801cd8e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801cd92:	2100      	movs	r1, #0
 801cd94:	2d00      	cmp	r5, #0
 801cd96:	d062      	beq.n	801ce5e <__udivmoddi4+0x16a>
 801cd98:	fa24 f40e 	lsr.w	r4, r4, lr
 801cd9c:	2300      	movs	r3, #0
 801cd9e:	602c      	str	r4, [r5, #0]
 801cda0:	606b      	str	r3, [r5, #4]
 801cda2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cda6:	428b      	cmp	r3, r1
 801cda8:	d907      	bls.n	801cdba <__udivmoddi4+0xc6>
 801cdaa:	2d00      	cmp	r5, #0
 801cdac:	d055      	beq.n	801ce5a <__udivmoddi4+0x166>
 801cdae:	2100      	movs	r1, #0
 801cdb0:	e885 0041 	stmia.w	r5, {r0, r6}
 801cdb4:	4608      	mov	r0, r1
 801cdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdba:	fab3 f183 	clz	r1, r3
 801cdbe:	2900      	cmp	r1, #0
 801cdc0:	f040 8090 	bne.w	801cee4 <__udivmoddi4+0x1f0>
 801cdc4:	42b3      	cmp	r3, r6
 801cdc6:	d302      	bcc.n	801cdce <__udivmoddi4+0xda>
 801cdc8:	4282      	cmp	r2, r0
 801cdca:	f200 80f8 	bhi.w	801cfbe <__udivmoddi4+0x2ca>
 801cdce:	1a84      	subs	r4, r0, r2
 801cdd0:	eb66 0603 	sbc.w	r6, r6, r3
 801cdd4:	2001      	movs	r0, #1
 801cdd6:	46b4      	mov	ip, r6
 801cdd8:	2d00      	cmp	r5, #0
 801cdda:	d040      	beq.n	801ce5e <__udivmoddi4+0x16a>
 801cddc:	e885 1010 	stmia.w	r5, {r4, ip}
 801cde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cde4:	b912      	cbnz	r2, 801cdec <__udivmoddi4+0xf8>
 801cde6:	2701      	movs	r7, #1
 801cde8:	fbb7 f7f2 	udiv	r7, r7, r2
 801cdec:	fab7 fe87 	clz	lr, r7
 801cdf0:	f1be 0f00 	cmp.w	lr, #0
 801cdf4:	d135      	bne.n	801ce62 <__udivmoddi4+0x16e>
 801cdf6:	1bf3      	subs	r3, r6, r7
 801cdf8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 801cdfc:	fa1f fc87 	uxth.w	ip, r7
 801ce00:	2101      	movs	r1, #1
 801ce02:	fbb3 f0f8 	udiv	r0, r3, r8
 801ce06:	0c22      	lsrs	r2, r4, #16
 801ce08:	fb08 3610 	mls	r6, r8, r0, r3
 801ce0c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 801ce10:	fb0c f300 	mul.w	r3, ip, r0
 801ce14:	42b3      	cmp	r3, r6
 801ce16:	d907      	bls.n	801ce28 <__udivmoddi4+0x134>
 801ce18:	19f6      	adds	r6, r6, r7
 801ce1a:	f100 32ff 	add.w	r2, r0, #4294967295
 801ce1e:	d202      	bcs.n	801ce26 <__udivmoddi4+0x132>
 801ce20:	42b3      	cmp	r3, r6
 801ce22:	f200 80ce 	bhi.w	801cfc2 <__udivmoddi4+0x2ce>
 801ce26:	4610      	mov	r0, r2
 801ce28:	1af6      	subs	r6, r6, r3
 801ce2a:	b2a2      	uxth	r2, r4
 801ce2c:	fbb6 f3f8 	udiv	r3, r6, r8
 801ce30:	fb08 6613 	mls	r6, r8, r3, r6
 801ce34:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 801ce38:	fb0c fc03 	mul.w	ip, ip, r3
 801ce3c:	45a4      	cmp	ip, r4
 801ce3e:	d907      	bls.n	801ce50 <__udivmoddi4+0x15c>
 801ce40:	19e4      	adds	r4, r4, r7
 801ce42:	f103 32ff 	add.w	r2, r3, #4294967295
 801ce46:	d202      	bcs.n	801ce4e <__udivmoddi4+0x15a>
 801ce48:	45a4      	cmp	ip, r4
 801ce4a:	f200 80b5 	bhi.w	801cfb8 <__udivmoddi4+0x2c4>
 801ce4e:	4613      	mov	r3, r2
 801ce50:	ebcc 0404 	rsb	r4, ip, r4
 801ce54:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801ce58:	e79c      	b.n	801cd94 <__udivmoddi4+0xa0>
 801ce5a:	4629      	mov	r1, r5
 801ce5c:	4628      	mov	r0, r5
 801ce5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce62:	f1ce 0120 	rsb	r1, lr, #32
 801ce66:	fa06 f30e 	lsl.w	r3, r6, lr
 801ce6a:	fa07 f70e 	lsl.w	r7, r7, lr
 801ce6e:	fa20 f901 	lsr.w	r9, r0, r1
 801ce72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 801ce76:	40ce      	lsrs	r6, r1
 801ce78:	ea49 0903 	orr.w	r9, r9, r3
 801ce7c:	fbb6 faf8 	udiv	sl, r6, r8
 801ce80:	ea4f 4419 	mov.w	r4, r9, lsr #16
 801ce84:	fb08 661a 	mls	r6, r8, sl, r6
 801ce88:	fa1f fc87 	uxth.w	ip, r7
 801ce8c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 801ce90:	fb0a f20c 	mul.w	r2, sl, ip
 801ce94:	429a      	cmp	r2, r3
 801ce96:	fa00 f40e 	lsl.w	r4, r0, lr
 801ce9a:	d90a      	bls.n	801ceb2 <__udivmoddi4+0x1be>
 801ce9c:	19db      	adds	r3, r3, r7
 801ce9e:	f10a 31ff 	add.w	r1, sl, #4294967295
 801cea2:	f080 8087 	bcs.w	801cfb4 <__udivmoddi4+0x2c0>
 801cea6:	429a      	cmp	r2, r3
 801cea8:	f240 8084 	bls.w	801cfb4 <__udivmoddi4+0x2c0>
 801ceac:	f1aa 0a02 	sub.w	sl, sl, #2
 801ceb0:	443b      	add	r3, r7
 801ceb2:	1a9b      	subs	r3, r3, r2
 801ceb4:	fa1f f989 	uxth.w	r9, r9
 801ceb8:	fbb3 f1f8 	udiv	r1, r3, r8
 801cebc:	fb08 3311 	mls	r3, r8, r1, r3
 801cec0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 801cec4:	fb01 f60c 	mul.w	r6, r1, ip
 801cec8:	429e      	cmp	r6, r3
 801ceca:	d907      	bls.n	801cedc <__udivmoddi4+0x1e8>
 801cecc:	19db      	adds	r3, r3, r7
 801cece:	f101 32ff 	add.w	r2, r1, #4294967295
 801ced2:	d26b      	bcs.n	801cfac <__udivmoddi4+0x2b8>
 801ced4:	429e      	cmp	r6, r3
 801ced6:	d969      	bls.n	801cfac <__udivmoddi4+0x2b8>
 801ced8:	3902      	subs	r1, #2
 801ceda:	443b      	add	r3, r7
 801cedc:	1b9b      	subs	r3, r3, r6
 801cede:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cee2:	e78e      	b.n	801ce02 <__udivmoddi4+0x10e>
 801cee4:	f1c1 0e20 	rsb	lr, r1, #32
 801cee8:	fa22 f40e 	lsr.w	r4, r2, lr
 801ceec:	408b      	lsls	r3, r1
 801ceee:	4323      	orrs	r3, r4
 801cef0:	fa20 f70e 	lsr.w	r7, r0, lr
 801cef4:	fa06 f401 	lsl.w	r4, r6, r1
 801cef8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 801cefc:	fa26 f60e 	lsr.w	r6, r6, lr
 801cf00:	433c      	orrs	r4, r7
 801cf02:	fbb6 f9fc 	udiv	r9, r6, ip
 801cf06:	0c27      	lsrs	r7, r4, #16
 801cf08:	fb0c 6619 	mls	r6, ip, r9, r6
 801cf0c:	fa1f f883 	uxth.w	r8, r3
 801cf10:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 801cf14:	fb09 f708 	mul.w	r7, r9, r8
 801cf18:	42b7      	cmp	r7, r6
 801cf1a:	fa02 f201 	lsl.w	r2, r2, r1
 801cf1e:	fa00 fa01 	lsl.w	sl, r0, r1
 801cf22:	d908      	bls.n	801cf36 <__udivmoddi4+0x242>
 801cf24:	18f6      	adds	r6, r6, r3
 801cf26:	f109 30ff 	add.w	r0, r9, #4294967295
 801cf2a:	d241      	bcs.n	801cfb0 <__udivmoddi4+0x2bc>
 801cf2c:	42b7      	cmp	r7, r6
 801cf2e:	d93f      	bls.n	801cfb0 <__udivmoddi4+0x2bc>
 801cf30:	f1a9 0902 	sub.w	r9, r9, #2
 801cf34:	441e      	add	r6, r3
 801cf36:	1bf6      	subs	r6, r6, r7
 801cf38:	b2a0      	uxth	r0, r4
 801cf3a:	fbb6 f4fc 	udiv	r4, r6, ip
 801cf3e:	fb0c 6614 	mls	r6, ip, r4, r6
 801cf42:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 801cf46:	fb04 f808 	mul.w	r8, r4, r8
 801cf4a:	45b8      	cmp	r8, r7
 801cf4c:	d907      	bls.n	801cf5e <__udivmoddi4+0x26a>
 801cf4e:	18ff      	adds	r7, r7, r3
 801cf50:	f104 30ff 	add.w	r0, r4, #4294967295
 801cf54:	d228      	bcs.n	801cfa8 <__udivmoddi4+0x2b4>
 801cf56:	45b8      	cmp	r8, r7
 801cf58:	d926      	bls.n	801cfa8 <__udivmoddi4+0x2b4>
 801cf5a:	3c02      	subs	r4, #2
 801cf5c:	441f      	add	r7, r3
 801cf5e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 801cf62:	ebc8 0707 	rsb	r7, r8, r7
 801cf66:	fba0 8902 	umull	r8, r9, r0, r2
 801cf6a:	454f      	cmp	r7, r9
 801cf6c:	4644      	mov	r4, r8
 801cf6e:	464e      	mov	r6, r9
 801cf70:	d314      	bcc.n	801cf9c <__udivmoddi4+0x2a8>
 801cf72:	d029      	beq.n	801cfc8 <__udivmoddi4+0x2d4>
 801cf74:	b365      	cbz	r5, 801cfd0 <__udivmoddi4+0x2dc>
 801cf76:	ebba 0304 	subs.w	r3, sl, r4
 801cf7a:	eb67 0706 	sbc.w	r7, r7, r6
 801cf7e:	fa07 fe0e 	lsl.w	lr, r7, lr
 801cf82:	40cb      	lsrs	r3, r1
 801cf84:	40cf      	lsrs	r7, r1
 801cf86:	ea4e 0303 	orr.w	r3, lr, r3
 801cf8a:	e885 0088 	stmia.w	r5, {r3, r7}
 801cf8e:	2100      	movs	r1, #0
 801cf90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf94:	4613      	mov	r3, r2
 801cf96:	e6f8      	b.n	801cd8a <__udivmoddi4+0x96>
 801cf98:	4610      	mov	r0, r2
 801cf9a:	e6e0      	b.n	801cd5e <__udivmoddi4+0x6a>
 801cf9c:	ebb8 0402 	subs.w	r4, r8, r2
 801cfa0:	eb69 0603 	sbc.w	r6, r9, r3
 801cfa4:	3801      	subs	r0, #1
 801cfa6:	e7e5      	b.n	801cf74 <__udivmoddi4+0x280>
 801cfa8:	4604      	mov	r4, r0
 801cfaa:	e7d8      	b.n	801cf5e <__udivmoddi4+0x26a>
 801cfac:	4611      	mov	r1, r2
 801cfae:	e795      	b.n	801cedc <__udivmoddi4+0x1e8>
 801cfb0:	4681      	mov	r9, r0
 801cfb2:	e7c0      	b.n	801cf36 <__udivmoddi4+0x242>
 801cfb4:	468a      	mov	sl, r1
 801cfb6:	e77c      	b.n	801ceb2 <__udivmoddi4+0x1be>
 801cfb8:	3b02      	subs	r3, #2
 801cfba:	443c      	add	r4, r7
 801cfbc:	e748      	b.n	801ce50 <__udivmoddi4+0x15c>
 801cfbe:	4608      	mov	r0, r1
 801cfc0:	e70a      	b.n	801cdd8 <__udivmoddi4+0xe4>
 801cfc2:	3802      	subs	r0, #2
 801cfc4:	443e      	add	r6, r7
 801cfc6:	e72f      	b.n	801ce28 <__udivmoddi4+0x134>
 801cfc8:	45c2      	cmp	sl, r8
 801cfca:	d3e7      	bcc.n	801cf9c <__udivmoddi4+0x2a8>
 801cfcc:	463e      	mov	r6, r7
 801cfce:	e7d1      	b.n	801cf74 <__udivmoddi4+0x280>
 801cfd0:	4629      	mov	r1, r5
 801cfd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfd6:	bf00      	nop

0801cfd8 <__aeabi_idiv0>:
 801cfd8:	4770      	bx	lr
 801cfda:	bf00      	nop

0801cfdc <memcmp>:
 801cfdc:	2a03      	cmp	r2, #3
 801cfde:	b470      	push	{r4, r5, r6}
 801cfe0:	d926      	bls.n	801d030 <memcmp+0x54>
 801cfe2:	ea40 0301 	orr.w	r3, r0, r1
 801cfe6:	079b      	lsls	r3, r3, #30
 801cfe8:	d011      	beq.n	801d00e <memcmp+0x32>
 801cfea:	7804      	ldrb	r4, [r0, #0]
 801cfec:	780d      	ldrb	r5, [r1, #0]
 801cfee:	42ac      	cmp	r4, r5
 801cff0:	d122      	bne.n	801d038 <memcmp+0x5c>
 801cff2:	4402      	add	r2, r0
 801cff4:	1c43      	adds	r3, r0, #1
 801cff6:	e005      	b.n	801d004 <memcmp+0x28>
 801cff8:	f813 4b01 	ldrb.w	r4, [r3], #1
 801cffc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801d000:	42ac      	cmp	r4, r5
 801d002:	d119      	bne.n	801d038 <memcmp+0x5c>
 801d004:	4293      	cmp	r3, r2
 801d006:	d1f7      	bne.n	801cff8 <memcmp+0x1c>
 801d008:	2000      	movs	r0, #0
 801d00a:	bc70      	pop	{r4, r5, r6}
 801d00c:	4770      	bx	lr
 801d00e:	460c      	mov	r4, r1
 801d010:	4603      	mov	r3, r0
 801d012:	681e      	ldr	r6, [r3, #0]
 801d014:	6825      	ldr	r5, [r4, #0]
 801d016:	42ae      	cmp	r6, r5
 801d018:	4618      	mov	r0, r3
 801d01a:	4621      	mov	r1, r4
 801d01c:	f103 0304 	add.w	r3, r3, #4
 801d020:	f104 0404 	add.w	r4, r4, #4
 801d024:	d1e1      	bne.n	801cfea <memcmp+0xe>
 801d026:	3a04      	subs	r2, #4
 801d028:	2a03      	cmp	r2, #3
 801d02a:	4618      	mov	r0, r3
 801d02c:	4621      	mov	r1, r4
 801d02e:	d8f0      	bhi.n	801d012 <memcmp+0x36>
 801d030:	2a00      	cmp	r2, #0
 801d032:	d1da      	bne.n	801cfea <memcmp+0xe>
 801d034:	4610      	mov	r0, r2
 801d036:	e7e8      	b.n	801d00a <memcmp+0x2e>
 801d038:	1b60      	subs	r0, r4, r5
 801d03a:	bc70      	pop	{r4, r5, r6}
 801d03c:	4770      	bx	lr
 801d03e:	bf00      	nop

0801d040 <memcpy>:
 801d040:	4684      	mov	ip, r0
 801d042:	ea41 0300 	orr.w	r3, r1, r0
 801d046:	f013 0303 	ands.w	r3, r3, #3
 801d04a:	d16d      	bne.n	801d128 <memcpy+0xe8>
 801d04c:	3a40      	subs	r2, #64	; 0x40
 801d04e:	d341      	bcc.n	801d0d4 <memcpy+0x94>
 801d050:	f851 3b04 	ldr.w	r3, [r1], #4
 801d054:	f840 3b04 	str.w	r3, [r0], #4
 801d058:	f851 3b04 	ldr.w	r3, [r1], #4
 801d05c:	f840 3b04 	str.w	r3, [r0], #4
 801d060:	f851 3b04 	ldr.w	r3, [r1], #4
 801d064:	f840 3b04 	str.w	r3, [r0], #4
 801d068:	f851 3b04 	ldr.w	r3, [r1], #4
 801d06c:	f840 3b04 	str.w	r3, [r0], #4
 801d070:	f851 3b04 	ldr.w	r3, [r1], #4
 801d074:	f840 3b04 	str.w	r3, [r0], #4
 801d078:	f851 3b04 	ldr.w	r3, [r1], #4
 801d07c:	f840 3b04 	str.w	r3, [r0], #4
 801d080:	f851 3b04 	ldr.w	r3, [r1], #4
 801d084:	f840 3b04 	str.w	r3, [r0], #4
 801d088:	f851 3b04 	ldr.w	r3, [r1], #4
 801d08c:	f840 3b04 	str.w	r3, [r0], #4
 801d090:	f851 3b04 	ldr.w	r3, [r1], #4
 801d094:	f840 3b04 	str.w	r3, [r0], #4
 801d098:	f851 3b04 	ldr.w	r3, [r1], #4
 801d09c:	f840 3b04 	str.w	r3, [r0], #4
 801d0a0:	f851 3b04 	ldr.w	r3, [r1], #4
 801d0a4:	f840 3b04 	str.w	r3, [r0], #4
 801d0a8:	f851 3b04 	ldr.w	r3, [r1], #4
 801d0ac:	f840 3b04 	str.w	r3, [r0], #4
 801d0b0:	f851 3b04 	ldr.w	r3, [r1], #4
 801d0b4:	f840 3b04 	str.w	r3, [r0], #4
 801d0b8:	f851 3b04 	ldr.w	r3, [r1], #4
 801d0bc:	f840 3b04 	str.w	r3, [r0], #4
 801d0c0:	f851 3b04 	ldr.w	r3, [r1], #4
 801d0c4:	f840 3b04 	str.w	r3, [r0], #4
 801d0c8:	f851 3b04 	ldr.w	r3, [r1], #4
 801d0cc:	f840 3b04 	str.w	r3, [r0], #4
 801d0d0:	3a40      	subs	r2, #64	; 0x40
 801d0d2:	d2bd      	bcs.n	801d050 <memcpy+0x10>
 801d0d4:	3230      	adds	r2, #48	; 0x30
 801d0d6:	d311      	bcc.n	801d0fc <memcpy+0xbc>
 801d0d8:	f851 3b04 	ldr.w	r3, [r1], #4
 801d0dc:	f840 3b04 	str.w	r3, [r0], #4
 801d0e0:	f851 3b04 	ldr.w	r3, [r1], #4
 801d0e4:	f840 3b04 	str.w	r3, [r0], #4
 801d0e8:	f851 3b04 	ldr.w	r3, [r1], #4
 801d0ec:	f840 3b04 	str.w	r3, [r0], #4
 801d0f0:	f851 3b04 	ldr.w	r3, [r1], #4
 801d0f4:	f840 3b04 	str.w	r3, [r0], #4
 801d0f8:	3a10      	subs	r2, #16
 801d0fa:	d2ed      	bcs.n	801d0d8 <memcpy+0x98>
 801d0fc:	320c      	adds	r2, #12
 801d0fe:	d305      	bcc.n	801d10c <memcpy+0xcc>
 801d100:	f851 3b04 	ldr.w	r3, [r1], #4
 801d104:	f840 3b04 	str.w	r3, [r0], #4
 801d108:	3a04      	subs	r2, #4
 801d10a:	d2f9      	bcs.n	801d100 <memcpy+0xc0>
 801d10c:	3204      	adds	r2, #4
 801d10e:	d008      	beq.n	801d122 <memcpy+0xe2>
 801d110:	07d2      	lsls	r2, r2, #31
 801d112:	bf1c      	itt	ne
 801d114:	f811 3b01 	ldrbne.w	r3, [r1], #1
 801d118:	f800 3b01 	strbne.w	r3, [r0], #1
 801d11c:	d301      	bcc.n	801d122 <memcpy+0xe2>
 801d11e:	880b      	ldrh	r3, [r1, #0]
 801d120:	8003      	strh	r3, [r0, #0]
 801d122:	4660      	mov	r0, ip
 801d124:	4770      	bx	lr
 801d126:	bf00      	nop
 801d128:	2a08      	cmp	r2, #8
 801d12a:	d313      	bcc.n	801d154 <memcpy+0x114>
 801d12c:	078b      	lsls	r3, r1, #30
 801d12e:	d08d      	beq.n	801d04c <memcpy+0xc>
 801d130:	f010 0303 	ands.w	r3, r0, #3
 801d134:	d08a      	beq.n	801d04c <memcpy+0xc>
 801d136:	f1c3 0304 	rsb	r3, r3, #4
 801d13a:	1ad2      	subs	r2, r2, r3
 801d13c:	07db      	lsls	r3, r3, #31
 801d13e:	bf1c      	itt	ne
 801d140:	f811 3b01 	ldrbne.w	r3, [r1], #1
 801d144:	f800 3b01 	strbne.w	r3, [r0], #1
 801d148:	d380      	bcc.n	801d04c <memcpy+0xc>
 801d14a:	f831 3b02 	ldrh.w	r3, [r1], #2
 801d14e:	f820 3b02 	strh.w	r3, [r0], #2
 801d152:	e77b      	b.n	801d04c <memcpy+0xc>
 801d154:	3a04      	subs	r2, #4
 801d156:	d3d9      	bcc.n	801d10c <memcpy+0xcc>
 801d158:	3a01      	subs	r2, #1
 801d15a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d15e:	f800 3b01 	strb.w	r3, [r0], #1
 801d162:	d2f9      	bcs.n	801d158 <memcpy+0x118>
 801d164:	780b      	ldrb	r3, [r1, #0]
 801d166:	7003      	strb	r3, [r0, #0]
 801d168:	784b      	ldrb	r3, [r1, #1]
 801d16a:	7043      	strb	r3, [r0, #1]
 801d16c:	788b      	ldrb	r3, [r1, #2]
 801d16e:	7083      	strb	r3, [r0, #2]
 801d170:	4660      	mov	r0, ip
 801d172:	4770      	bx	lr

0801d174 <memset>:
 801d174:	b470      	push	{r4, r5, r6}
 801d176:	0784      	lsls	r4, r0, #30
 801d178:	d046      	beq.n	801d208 <memset+0x94>
 801d17a:	1e54      	subs	r4, r2, #1
 801d17c:	2a00      	cmp	r2, #0
 801d17e:	d041      	beq.n	801d204 <memset+0x90>
 801d180:	b2cd      	uxtb	r5, r1
 801d182:	4603      	mov	r3, r0
 801d184:	e002      	b.n	801d18c <memset+0x18>
 801d186:	1e62      	subs	r2, r4, #1
 801d188:	b3e4      	cbz	r4, 801d204 <memset+0x90>
 801d18a:	4614      	mov	r4, r2
 801d18c:	f803 5b01 	strb.w	r5, [r3], #1
 801d190:	079a      	lsls	r2, r3, #30
 801d192:	d1f8      	bne.n	801d186 <memset+0x12>
 801d194:	2c03      	cmp	r4, #3
 801d196:	d92e      	bls.n	801d1f6 <memset+0x82>
 801d198:	b2cd      	uxtb	r5, r1
 801d19a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 801d19e:	2c0f      	cmp	r4, #15
 801d1a0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 801d1a4:	d919      	bls.n	801d1da <memset+0x66>
 801d1a6:	f103 0210 	add.w	r2, r3, #16
 801d1aa:	4626      	mov	r6, r4
 801d1ac:	3e10      	subs	r6, #16
 801d1ae:	2e0f      	cmp	r6, #15
 801d1b0:	f842 5c10 	str.w	r5, [r2, #-16]
 801d1b4:	f842 5c0c 	str.w	r5, [r2, #-12]
 801d1b8:	f842 5c08 	str.w	r5, [r2, #-8]
 801d1bc:	f842 5c04 	str.w	r5, [r2, #-4]
 801d1c0:	f102 0210 	add.w	r2, r2, #16
 801d1c4:	d8f2      	bhi.n	801d1ac <memset+0x38>
 801d1c6:	f1a4 0210 	sub.w	r2, r4, #16
 801d1ca:	f022 020f 	bic.w	r2, r2, #15
 801d1ce:	f004 040f 	and.w	r4, r4, #15
 801d1d2:	3210      	adds	r2, #16
 801d1d4:	2c03      	cmp	r4, #3
 801d1d6:	4413      	add	r3, r2
 801d1d8:	d90d      	bls.n	801d1f6 <memset+0x82>
 801d1da:	461e      	mov	r6, r3
 801d1dc:	4622      	mov	r2, r4
 801d1de:	3a04      	subs	r2, #4
 801d1e0:	2a03      	cmp	r2, #3
 801d1e2:	f846 5b04 	str.w	r5, [r6], #4
 801d1e6:	d8fa      	bhi.n	801d1de <memset+0x6a>
 801d1e8:	1f22      	subs	r2, r4, #4
 801d1ea:	f022 0203 	bic.w	r2, r2, #3
 801d1ee:	3204      	adds	r2, #4
 801d1f0:	4413      	add	r3, r2
 801d1f2:	f004 0403 	and.w	r4, r4, #3
 801d1f6:	b12c      	cbz	r4, 801d204 <memset+0x90>
 801d1f8:	b2c9      	uxtb	r1, r1
 801d1fa:	441c      	add	r4, r3
 801d1fc:	f803 1b01 	strb.w	r1, [r3], #1
 801d200:	42a3      	cmp	r3, r4
 801d202:	d1fb      	bne.n	801d1fc <memset+0x88>
 801d204:	bc70      	pop	{r4, r5, r6}
 801d206:	4770      	bx	lr
 801d208:	4614      	mov	r4, r2
 801d20a:	4603      	mov	r3, r0
 801d20c:	e7c2      	b.n	801d194 <memset+0x20>
 801d20e:	bf00      	nop
	...

0801d240 <strlen>:
 801d240:	f890 f000 	pld	[r0]
 801d244:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 801d248:	f020 0107 	bic.w	r1, r0, #7
 801d24c:	f06f 0c00 	mvn.w	ip, #0
 801d250:	f010 0407 	ands.w	r4, r0, #7
 801d254:	f891 f020 	pld	[r1, #32]
 801d258:	f040 8049 	bne.w	801d2ee <strlen+0xae>
 801d25c:	f04f 0400 	mov.w	r4, #0
 801d260:	f06f 0007 	mvn.w	r0, #7
 801d264:	e9d1 2300 	ldrd	r2, r3, [r1]
 801d268:	f891 f040 	pld	[r1, #64]	; 0x40
 801d26c:	f100 0008 	add.w	r0, r0, #8
 801d270:	fa82 f24c 	uadd8	r2, r2, ip
 801d274:	faa4 f28c 	sel	r2, r4, ip
 801d278:	fa83 f34c 	uadd8	r3, r3, ip
 801d27c:	faa2 f38c 	sel	r3, r2, ip
 801d280:	bb4b      	cbnz	r3, 801d2d6 <strlen+0x96>
 801d282:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801d286:	fa82 f24c 	uadd8	r2, r2, ip
 801d28a:	f100 0008 	add.w	r0, r0, #8
 801d28e:	faa4 f28c 	sel	r2, r4, ip
 801d292:	fa83 f34c 	uadd8	r3, r3, ip
 801d296:	faa2 f38c 	sel	r3, r2, ip
 801d29a:	b9e3      	cbnz	r3, 801d2d6 <strlen+0x96>
 801d29c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 801d2a0:	fa82 f24c 	uadd8	r2, r2, ip
 801d2a4:	f100 0008 	add.w	r0, r0, #8
 801d2a8:	faa4 f28c 	sel	r2, r4, ip
 801d2ac:	fa83 f34c 	uadd8	r3, r3, ip
 801d2b0:	faa2 f38c 	sel	r3, r2, ip
 801d2b4:	b97b      	cbnz	r3, 801d2d6 <strlen+0x96>
 801d2b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 801d2ba:	f101 0120 	add.w	r1, r1, #32
 801d2be:	fa82 f24c 	uadd8	r2, r2, ip
 801d2c2:	f100 0008 	add.w	r0, r0, #8
 801d2c6:	faa4 f28c 	sel	r2, r4, ip
 801d2ca:	fa83 f34c 	uadd8	r3, r3, ip
 801d2ce:	faa2 f38c 	sel	r3, r2, ip
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d0c6      	beq.n	801d264 <strlen+0x24>
 801d2d6:	2a00      	cmp	r2, #0
 801d2d8:	bf04      	itt	eq
 801d2da:	3004      	addeq	r0, #4
 801d2dc:	461a      	moveq	r2, r3
 801d2de:	ba12      	rev	r2, r2
 801d2e0:	fab2 f282 	clz	r2, r2
 801d2e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 801d2e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 801d2ec:	4770      	bx	lr
 801d2ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 801d2f2:	f004 0503 	and.w	r5, r4, #3
 801d2f6:	f1c4 0000 	rsb	r0, r4, #0
 801d2fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801d2fe:	f014 0f04 	tst.w	r4, #4
 801d302:	f891 f040 	pld	[r1, #64]	; 0x40
 801d306:	fa0c f505 	lsl.w	r5, ip, r5
 801d30a:	ea62 0205 	orn	r2, r2, r5
 801d30e:	bf1c      	itt	ne
 801d310:	ea63 0305 	ornne	r3, r3, r5
 801d314:	4662      	movne	r2, ip
 801d316:	f04f 0400 	mov.w	r4, #0
 801d31a:	e7a9      	b.n	801d270 <strlen+0x30>

0801d31c <testRate>:
 801d31c:	ac44 0000 bb80 0000 5888 0001 7700 0001     D........X...w..
 801d32c:	b110 0002 ee00 0002 5249 2051 6168 646e     ........IRQ hand
 801d33c:	656c 7372 7020 6f6f 206c 6564 6c70 7465     lers pool deplet
 801d34c:	6465 002e 5249 2051 6168 646e 656c 2072     ed..IRQ handler 
 801d35c:	6e69 6564 2078 6e69 6176 696c 2e64 0000     index invalid...
 801d36c:	4148 4452 4146 4c55 2154 0a21 0000 0000     HARDFAULT!!.....
 801d37c:	3072 2020 2520 3830 2078 3172 2020 3025     r0   %08x r1  %0
 801d38c:	7838 7220 2032 2520 3830 2078 3372 2020     8x r2  %08x r3  
 801d39c:	3025 7838 0a20 0000 3172 2032 2520 3830     %08x ...r12  %08
 801d3ac:	2078 726c 2020 3025 7838 7020 2063 2520     x lr  %08x pc  %
 801d3bc:	3830 2078 7370 2072 3025 7838 0a20 0000     08x psr %08x ...
 801d3cc:	7073 2020 2520 3830 0a78 4800 6165 2070     sp   %08x..Heap 
 801d3dc:	6564 6c70 7465 6465 000a 250a 3031 2070     depleted...%10p 
 801d3ec:	2528 3230 2958 255b 3230 5d58 203a 2500     (%02X)[%02X]: .%
 801d3fc:	3230 2058 6700 6e65 7200 7663 0064 6e55     02X .gen.rcvd.Un
 801d40c:	6e6b 776f 206e 656d 7373 6761 2065 7825     known message %x
 801d41c:	7220 6365 6965 6576 2064 6e6f 7020 726f      received on por
 801d42c:	2074 6425 000a 6e49 6f63 706d 656c 6574     t %d..Incomplete
 801d43c:	6d20 7365 6173 6567 2520 2078 6572 6563      message %x rece
 801d44c:	7669 6465 6f20 206e 6f70 7472 2520 0a64     ived on port %d.
 801d45c:	2800 3025 3031 2964 734d 2067 7825 2520     .(%010d)Msg %x %
 801d46c:	2073 7266 6d6f 2520 2873 6973 657a 2520     s from %s(size %
 801d47c:	2964 203a 2500 3230 2078 0000                    d): .%02x .

0801d487 <radioModeMap>:
 801d487:	0000 0100 7302                                   .....

0801d48c <__FUNCTION__.8705>:
 801d48c:	6573 646e 414b 5600 7265 6669 6979 676e     sendKA.Verifying
 801d49c:	6620 616c 6873 6920 616d 6567 000a 6c46      flash image..Fl
 801d4ac:	7361 2068 6d69 6761 2065 4f4e 2054 6b4f     ash image NOT Ok
 801d4bc:	000a 6c46 7361 2068 6d69 6761 2065 6b4f     ..Flash image Ok
 801d4cc:	000a 6544 6572 6967 7473 7265 6465 4720     ..Deregistered G
 801d4dc:	4955 542f 2050 6425 000a 6163 7470 7275     UI/TP %d..captur
 801d4ec:	2065 7562 6666 7265 6e20 746f 6120 6c6c     e buffer not all
 801d4fc:	636f 7461 6465 2121 2121 000a 534d 3947     ocated!!!!..MSG9
 801d50c:	3a36 7020 7069 2065 756e 626d 7265 6620     6: pipe number f
 801d51c:	726f 6b20 6e6f 6f50 206d 3025 7832 6e20     or konPom %02x n
 801d52c:	746f 6620 756f 646e 000a 6552 6967 7473     ot found..Regist
 801d53c:	7265 6465 4720 4955 542f 2050 6425 000a     ered GUI/TP %d..
 801d54c:	6c41 6572 6461 2079 6572 6967 7473 7265     Already register
 801d55c:	6465 4720 4955 542f 2050 6425 000a 6425     ed GUI/TP %d..%d
 801d56c:	2029 7369 6e4f 253a 2f64 6425 252f 2064     ) isOn:%d/%d/%d 
 801d57c:	6572 4f71 3a6e 6425 6320 6853 7261 3a63     reqOn:%d cSharc:
 801d58c:	7825 252f 2f78 7825 6320 5750 3a4d 7825     %x/%x/%x cPWM:%x
 801d59c:	252f 2f78 7825 7320 6769 616e 546c 7079     /%x/%x signalTyp
 801d5ac:	2065 7825 252f 2078 756f 7074 7475 7954     e %x/%x outputTy
 801d5bc:	6570 2520 2f78 7825 7620 6c6f 6d75 2065     pe %x/%x volume 
 801d5cc:	6425 252f 3a64 6425 252f 0a64 6200 6675     %d/%d:%d/%d..buf
 801d5dc:	6100 7373 7265 2074 6e69 2520 2873 6425     .assert in %s(%d
 801d5ec:	3a29 2520 0a73 a500                              ): %s..

0801d5f3 <ucExpectedStackBytes.5459>:
 801d5f3:	a5a5 a5a5 a5a5 a5a5 a5a5 a5a5 a5a5 a5a5     ................
 801d603:	a5a5 a5a5 4449 454c 6d00                         ....IDLE.

0801d60c <__FUNCTION__.5503>:
 801d60c:	6f6d 7564 656c 6154 6b73 6d00                    moduleTask.

0801d617 <__FUNCTION__.5490>:
 801d617:	6f6d 7564 656c 6553 646e 6f43 6d6d 6e61     moduleSendComman
 801d627:	0064                                        d.

0801d629 <__FUNCTION__.5512>:
 801d629:	6f6d 7564 656c 6e49 7469 6d00 7365 6173     moduleInit.messa
 801d639:	6567 632e 6d6f 616d 646e 3e20 303d 2620     ge.command >=0 &
 801d649:	2026 656d 7373 6761 2e65 6f63 6d6d 6e61     & message.comman
 801d659:	2064 203c 6f6d 7564 656c 6154 6b73 6144     d < moduleTaskDa
 801d669:	6174 3e2d 6f63 6d6d 6e61 7364 754e 006d     ta->commandsNum.
 801d679:	6f63 6d6d 6e61 2064 3d3e 2030 2626 6320     command >=0 && c
 801d689:	6d6f 616d 646e 3c20 6d20 646f 6c75 5465     ommand < moduleT
 801d699:	7361 446b 7461 2d61 633e 6d6f 616d 646e     askData->command
 801d6a9:	4e73 6d75 2800 6f6d 7564 656c 6154 6b73     sNum.(moduleTask
 801d6b9:	6144 6174 3e2d 7571 7565 4865 6e61 6c64     Data->queueHandl
 801d6c9:	2065 203d 5178 6575 6575 7243 6165 6574     e = xQueueCreate
 801d6d9:	6d28 646f 6c75 5465 7361 446b 7461 2d61     (moduleTaskData-
 801d6e9:	713e 6575 6575 654c 676e 6874 202c 6973     >queueLength, si
 801d6f9:	657a 666f 7128 6575 6575 654d 7373 6761     zeof(queueMessag
 801d709:	5f65 2974 2929 7800 6154 6b73 6547 656e     e_t))).xTaskGene
 801d719:	6972 4363 6572 7461 2865 6f6d 7564 656c     ricCreate(module
 801d729:	6154 6b73 202c 7328 6769 656e 2064 6863     Task, (signed ch
 801d739:	7261 2a20 6d29 646f 6c75 5465 7361 446b     ar *)moduleTaskD
 801d749:	7461 2d61 6e3e 6d61 2c65 6d20 646f 6c75     ata->name, modul
 801d759:	5465 7361 446b 7461 2d61 733e 6174 6b63     eTaskData->stack
 801d769:	6953 657a 342f 202c 7628 696f 2064 292a     Size/4, (void *)
 801d779:	6f6d 7564 656c 6154 6b73 6144 6174 202c     moduleTaskData, 
 801d789:	6f6d 7564 656c 6154 6b73 6144 6174 3e2d     moduleTaskData->
 801d799:	7270 6f69 6972 7974 202c 554e 4c4c 202c     priority, NULL, 
 801d7a9:	6f6d 7564 656c 6154 6b73 6144 6174 3e2d     moduleTaskData->
 801d7b9:	7473 6361 2c6b 4e20 4c55 294c 3d20 203d     stack, NULL) == 
 801d7c9:	6470 4150 5353 2d00                              pdPASS.

0801d7d0 <commands>:
 801d7d0:	b52d 0800 b513 0800 b60f 0800 b50d 0800     -...............

0801d7e0 <__FUNCTION__.8135>:
 801d7e0:	6c61 456c 6576 746e 0073                    allEvents.

0801d7ea <__FUNCTION__.8178>:
 801d7ea:	7773 7469 6863 6f50 7472 7000                    switchPort.

0801d7f5 <__FUNCTION__.8109>:
 801d7f5:	6f70 7472 7852 7000                              portRx.

0801d7fc <__FUNCTION__.8093>:
 801d7fc:	6f70 7472 7854 6300                              portTx.

0801d803 <__FUNCTION__.8047>:
 801d803:	6f63 6d6d 7854 6d00                              commTx.

0801d80a <__FUNCTION__.8037>:
 801d80a:	656d 7373 6761 5465 0078                    messageTx.

0801d814 <__FUNCTION__.8082>:
 801d814:	6f70 7472 6144 6174 7854 7852 6f43 706d     portDataTxRxComp
 801d824:	656c 6574 7300                                   lete.

0801d829 <__FUNCTION__.8164>:
 801d829:	7773 7469 6863 6f50 7472 6548 706c 7265     switchPortHelper
 801d839:	0000 8100                                        ...

0801d83c <commands>:
 801d83c:	bb81 0800 b9fd 0800 b83d 0800 b725 0800     ........=...%...
 801d84c:	4f50 5452 425f 4655 4546 2e52 7872 7542     PORT_BUFFER.rxBu
 801d85c:	6666 7265 6953 657a 3e20 3020 5000 524f     fferSize > 0.POR
 801d86c:	5f54 5542 4646 5245 722e 4278 6675 6566     T_BUFFER.rxBuffe
 801d87c:	0072 6f70 7472 754e 206d 203c 4f50 5452     r.portNum < PORT
 801d88c:	5f53 554e 004d 2528 3130 6430 4d29 6773     S_NUM.(%010d)Msg
 801d89c:	2520 2078 6573 746e 7420 206f 7325 003a      %x sent to %s:.
 801d8ac:	5854 425f 4655 4546 5f52 464f 5346 5445     TX_BUFFER_OFFSET
 801d8bc:	3d20 203d 0030 6f70 7472 6f43 6d6d 6e75      == 0.portCommun
 801d8cc:	6369 7461 726f 0000                         icator..

0801d8d4 <__FUNCTION__.8534>:
 801d8d4:	5053 7249 6365 6965 6576 6144 6174 7300          SPIreceiveData.

0801d8e3 <__FUNCTION__.8548>:
 801d8e3:	7073 4869 6c65 6570 4972 696e 0074          spiHelperInit.

0801d8f1 <__FUNCTION__.8557>:
 801d8f1:	6865 6669 7453 7261 0074                    ehifStart.

0801d8fb <__FUNCTION__.8504>:
 801d8fb:	6863 6365 446b 7461 5261 6165 7964 7200          checkDataReady.

0801d90a <__FUNCTION__.8627>:
 801d90a:	6172 6964 536f 6e65 0064                    radioSend.

0801d914 <__FUNCTION__.8486>:
 801d914:	6573 646e 7542 6666 7265 2500                    sendBuffer.

0801d91f <radioImage>:
 801d91f:	0525 0df0 0000 a180 0000 9985 0000 9985     %...............
 801d92f:	0000 9985 0000 9985 0000 9985 0000 fc7b     ..............{.
 801d93f:	0525 0214 0000 0000 0000 0000 0000 9985     %...............
 801d94f:	0000 9385 0000 0000 0000 d584 0000 4185     ...............A
 801d95f:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 801d96f:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 801d97f:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 801d98f:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 801d99f:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 801d9af:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 801d9bf:	f44f 40c0 f2c2 0000 4685 f000 b801 ffff     O..@.....F......
 801d9cf:	f44f 5278 2100 f04f 2020 f640 344f 47a0     O.xR.!O.  @.O4.G
 801d9df:	f44f 5200 2100 484f 47a0 484f 8801 f421     O..R.!OH.GOH..!.
 801d9ef:	71a1 8001 211b f8a0 19be f000 f987 484b     .q...!........KH
 801d9ff:	6800 f000 f8f8 2002 f000 f89a f000 fa1a     .h..... ........
 801da0f:	f000 f912 b570 2302 2200 105b 2b01 d103     ....p..#."[..+..
 801da1f:	f811 3b01 f443 7380 07dc 780c d004 1c49     ...;C..s...x..I.
 801da2f:	f800 4b01 1c52 e7f0 1c49 2cf8 da11 f811     ...KR...I..,....
 801da3f:	5b01 f004 0607 ea45 2506 43ed 2603 eb06     .[....E..%.C.&..
 801da4f:	04e4 e003 5d46 f800 6b01 1c52 1e64 d2f9     ....F]...kR.d...
 801da5f:	e7db 4610 bd70 2800 d009 0b41 d008 2901     ...Fp..(..A....)
 801da6f:	d003 2902 d001 2903 d101 f100 5000 4770     ...)...).....PpG
 801da7f:	f100 4080 4770 0741 0ec9 08c0 4240 eb01     ...@pGA.....@B..
 801da8f:	1040 4927 4408 4770 0741 08c0 0ec9 4240     @.'I.DpGA.....@B
 801da9f:	eb01 1040 4922 3180 4408 4770 b570 f44f     ..@."I.1.DpGp.O.
 801daaf:	3580 f8d5 20ac 0e11 d032 f895 10ab 29ff     .5... ..2......)
 801dabf:	d02e 2902 d32c f44f 717a 4348 30c8 4c19     ...),.O.zqHC.0.L
 801dacf:	4b19 2100 f853 6021 4296 d809 eb03 0681     .K.!S.!`.B......
 801dadf:	6876 4296 d304 4c14 f8d5 6130 3c48 1b80     vh.B...L..0aH<..
 801daef:	1c89 2904 d3ee 2511 4b10 2100 eb04 0281     ...)...%.K.!....
 801daff:	6812 f502 62af 429a dd03 4282 dc01 4613     .h...b.B...B...F
 801db0f:	460d 1c49 2912 d3f1 4807 385c 5d40 bd70     .FI..)...H\8@]p.
 801db1f:	20f5 bd70 0020 0060 0040 4201 0000 f8fb     . p. .`.@..B....
 801db2f:	0042 6044 0100 5801 0000 b8d7 ffff d08a     B.D`...X........
 801db3f:	b510 4601 2000 b672 060a d512 4a6b 7913     ...F. r.....kJ.y
 801db4f:	7954 1b1b f003 031f 2b1c d21f 7910 4b68     Ty.......+...yhK
 801db5f:	eb03 0380 1c40 7110 6019 7910 f000 001f     ....@..q.`.y....
 801db6f:	e012 4a62 1f92 7913 7954 1b1b f003 033f     ..bJ...yTy....?.
 801db7f:	2b3c d20b 7910 4b5f eb03 0380 1c40 7110     <+...y_K....@..q
 801db8f:	6019 7910 f000 003f 7110 2001 b662 bf40     .`.y..?..q. b.@.
 801db9f:	bd10 4856 1f80 7901 7940 1a08 f000 003f     ..VH...y@y....?.
 801dbaf:	4770 b672 0601 d50a 4950 794a 1e52 714a     pGr.....PIJyR.Jq
 801dbbf:	794a f002 021f 714a 7949 4a4d e00a 494b     Jy....JqIyMJ..KI
 801dbcf:	1f89 794a 1e52 714a 794a f002 023f 714a     ..JyR.JqJy..?.Jq
 801dbdf:	7949 4a48 f842 0021 b662 4770 4943 1fc9     IyHJB.!.b.pGCI..
 801dbef:	7008 bf40 4770 e92d 41f0 4d41 4604 483f     .p@.pG-..AAM.F?H
 801dbff:	3580 2600 1f80 7106 7146 6006 1d80 7106     .5.&...qFq.`...q
 801dc0f:	7146 6006 1fc0 7006 4f3b e007 f845 1b04     Fq.`...p;O..E...
 801dc1f:	eb07 4004 4788 88a0 1da4 4404 6821 2900     ...@.G.....D!h.)
 801dc2f:	d1f4 602e e8bd 81f0 4e30 2500 1fb6 1db7     ...`....0N.%....
 801dc3f:	6830 b990 2000 b672 7971 7932 4291 d00a     0h... r.qy2y.B..
 801dc4f:	7970 492c eb01 0180 1c40 7170 6808 7971     py,I....@.pq.hqy
 801dc5f:	f001 013f 7171 b662 6030 6838 b990 2000     ..?.qqb.0`8h... 
 801dc6f:	b672 7979 793a 4291 d00a 7978 4920 eb01     r.yy:y.B..xy I..
 801dc7f:	0180 1c40 7178 6808 7979 f001 011f 7179     ..@.xq.hyy....yq
 801dc8f:	b662 6038 f8d6 8000 f1b8 0f00 d011 4c18     b.8`...........L
 801dc9f:	3480 e005 6830 4788 6030 4540 d104 1d24     .4..0h.G0`@E..$.
 801dcaf:	6821 2900 d1f6 e002 6820 2800 d1c0 6035     !h.).... h.(..5`
 801dcbf:	e7be 480e 1fc0 7800 b9b0 f8d7 8000 f1b8     ...H...x........
 801dccf:	0f00 d011 4c0a 3480 e005 6838 4788 6038     .....L.4..8h.G8`
 801dcdf:	4540 d104 1d24 6821 2900 d1f6 e002 6820     @E..$.!h.).... h
 801dcef:	2800 d1a5 603d e7a3 bf20 e7a1 0020 f359     .(..=`.. ... .Y.
 801dcff:	0020 0061 0020 0060 0600 0100 b510 22a0      .a. .`........"
 801dd0f:	496b 486c f640 3347 4798 486a f04f 21e0     kIlH@.G3.GjHO..!
 801dd1f:	f8c1 0d08 4868 f8c1 0d0c 2000 22b0 1843     ....hH..... ."C.
 801dd2f:	f883 2400 1c40 2818 dbf9 2080 f881 0d23     ...$@..(... ..#.
 801dd3f:	20d0 f881 0d22 2240 2100 4860 f640 334f     . ..".@".!`H@.O3
 801dd4f:	4798 485f 2100 6041 21ff 7001 bd10 4a59     .G_H.!A`.!.p..YJ
 801dd5f:	eb02 0080 6401 4770 495a 6808 174a f8c1     .....dpGZI.hJ...
 801dd6f:	2080 4770 4b55 f833 2010 b912 f823 1010     . pGUK3.. ..#...
 801dd7f:	4770 1e40 d2f7 4770 b672 2101 4081 4850     pG@...pGr..!.@PH
 801dd8f:	6842 4311 6041 4950 f04f 5080 6008 b662     Bh.CA`PIO..P.`b.
 801dd9f:	4770 b672 4a4a 6851 4301 6051 494a f04f     pGr.JJQh.CQ`JIO.
 801ddaf:	5080 6008 b662 4770 4b44 4602 f833 0010     .P.`b.pGDK.F3...
 801ddbf:	f823 1012 4770 4842 f990 0000 4770 2101     #...pGBH....pG.!
 801ddcf:	4081 4842 6001 4770 f04f 22e0 4410 f880     .@BH.`pGO..".D..
 801dddf:	1400 4770 b672 4a37 eb02 0280 6c10 6411     ..pGr.7J.....l.d
 801ddef:	b662 4770 b570 4d35 4c35 2601 e017 6860     b.pGp.5M5L.&..`h
 801ddff:	fab0 f080 f1c0 001f 7020 b672 7820 fa06     ........ pr. x..
 801de0f:	f100 6860 4388 6060 b662 f994 0000 f835     ..`h.C``b.....5.
 801de1f:	0010 b120 f994 0000 f835 0010 4780 6860     .. .....5....G`h
 801de2f:	2800 d1e4 20ff 7020 bd70 b672 4924 8048     .(...  pp.r.$IH.
 801de3f:	b662 4770 f64b 317f f04f 20e0 6141 2107     b.pGK..1O.. Aa.!
 801de4f:	6101 481f 2105 60c1 2100 6081 8041 4770     .a.H.!.`.!.`A.pG
 801de5f:	b510 2004 f7ff fe6c 4c19 68e0 1e40 60e0     ... ..l..L.h@..`
 801de6f:	d11e 2005 60e0 8860 b140 8860 1e40 0400     ... .``.@.`.@...
 801de7f:	0c00 8060 d102 f240 105f 4780 68a0 1c40     ..`...@._..G.h@.
 801de8f:	60a0 68a0 68a1 0900 0400 f001 010f ea40     .`.h.h........@.
 801de9f:	3001 1cc0 f7ff fe4c 490d f04f 7080 6008     .0....L..IO..p.`
 801deaf:	bd10 f240 105f 4700 f240 105f 4700 0000     ..@._..G@._..G..
 801debf:	0000 0080 0020 005c fa05 0005 0020 d05a     .... .\..... .Z.
 801decf:	0020 fc59 00e0 00e1 00e0 04ed 00e0 00e2      .Y.............
 801dedf:	0040 0805 e92d 5ff0 4605 b2c2 4f79 f8df     @...-.._.F..yO..
 801deef:	81e8 0c00 f640 3a47 2a01 d008 2a1c d07e     ....@.G:.*...*~.
 801deff:	2a3c d043 2a3d d13f 203e e8bd 9ff0 4604     <*C.=*?.> .....F
 801df0f:	4872 6078 7da0 b110 2080 f000 f8d1 220b     rHx`.}... ....."
 801df1f:	4621 486d 47d0 2000 f888 000b f898 000a     !FmH.G. ........
 801df2f:	f898 1009 2603 4348 f898 2008 0180 4631     .....&HC... ..1F
 801df3f:	07d2 d100 2102 4348 f000 f8ba f8a8 000c     .....!HC........
 801df4f:	4861 220b f104 010b 300e 47d0 4c5e 340e     aH.".....0.G^L.4
 801df5f:	7aa0 7a61 4348 7a21 0180 07c9 d100 2602     .zazHC!z.......&
 801df6f:	4370 f000 f8a5 81a0 20c3 f000 f8a1 4955     pC....... ....UI
 801df7f:	1f09 8008 6878 6038 4628 e7be f7ff fd6b     ....xh8`(F....k.
 801df8f:	4681 6838 6078 4850 22fc 2100 301c f640     .F8hx`PH.".!.0@.
 801df9f:	384f 47c0 4f4c 2500 371c f04f 0b15 eb05     O8.GLO.%.7O.....
 801dfaf:	0045 fb05 f60b eb09 0140 eb07 0446 2206     E.......@...F.."
 801dfbf:	4620 47d0 f817 0016 78a1 4008 28ff d06a      F.G.....x.@.(j.
 801dfcf:	78e0 2801 d05c 2802 d05a 2804 d05b 2805     .x.(\..(Z..([..(
 801dfdf:	d115 7920 0140 f000 f86b 8260 f817 0016     .. y@...k.`.....
 801dfef:	28ff d003 2030 f000 f863 81a0 e000 e057     .(..0 ..c.....W.
 801dfff:	78a0 28ff d003 2026 f000 f85a 81e0 7920     .x.(..& ..Z... y
 801e00f:	1dc0 08c0 f000 f854 82a0 7920 1dc0 08c2     ......T... y....
 801e01f:	8aa0 2100 f040 5000 47c0 7920 1dc0 08c0     ...!@..P.G y....
 801e02f:	f000 f846 82e0 7920 1dc0 08c2 8ae0 2100     ..F... y.......!
 801e03f:	f040 5000 47c0 7920 1dc0 08c0 f000 f838     @..P.G y......8.
 801e04f:	8360 7920 1dc0 08c2 8b60 2100 f040 5000     `. y....`..!@..P
 801e05f:	47c0 2010 f000 f82c 8320 b280 2210 f040     .G. ..,. ...."@.
 801e06f:	5000 2180 47c0 f64f 70ff 8120 f817 0016     .P.!.GO..p .....
 801e07f:	28ff f814 0f24 f020 0030 d00a 3010 e009     .(..$. .0....0..
 801e08f:	7920 0140 e001 7920 0180 f000 f811 8260      y@... y......`.
 801e09f:	e7b5 3020 7020 1c6d 2d06 db80 480c e72c     .. 0 pm..-...H,.
 801e0af:	2001 0c29 d000 2000 f888 000b 2000 e724     . ).... ..... $.
 801e0bf:	4a04 4603 6851 1cdb b288 f023 0303 4419     .J.FQh....#....D
 801e0cf:	6051 4770 0020 105a 0020 a05c 0020 002d     Q`pG .Z. .\. .-.
 801e0df:	0100 3e00 b510 4604 b2c0 490c 2801 d012     ...>...F...I.(..
 801e0ef:	2802 d10e 6808 f100 010e 7a00 0409 f000     .(...h.....z....
 801e0ff:	000f f040 0008 ea41 3000 f040 003f f7ff     ..@...A..0@.?...
 801e10f:	fd17 4620 bd10 0c20 6008 e7fa 0020 185a     .. F.. ..`.. .Z.
 801e11f:	e92d 4ff8 4dea 4feb f895 0028 f8df a3a8     -..O.M.O..(.....
 801e12f:	eb00 0140 48e7 f04f 0b00 6802 f895 0029     ..@..HO....h..).
 801e13f:	eb02 04c1 3420 1d3f f107 0808 fa1f f688     .... 4?.........
 801e14f:	b120 2801 d05f 2802 d15b e07d 7968 79a9      ..(_..([.}.hy.y
 801e15f:	4288 d101 2807 d202 f8a5 b026 e005 280f     .B...(....&....(
 801e16f:	d203 8ce8 f420 607c 84e8 f8b5 9026 8853     .... .|`....&.S.
 801e17f:	e020 88a0 fa90 f1a0 fab1 f181 eb05 0141      .............A.
 801e18f:	f9b1 100c f511 6f80 d102 f44f 4180 e001     .......o..O..A..
 801e19f:	f44f 5140 ea19 0f00 d001 4208 d10e f10c     O.@Q.......B....
 801e1af:	0c01 f00c 00ff f885 0028 eb00 0040 eb02     ........(...@...
 801e1bf:	04c0 3420 f895 c028 459c d3da f895 0028     .. 4..(..E....(.
 801e1cf:	46a9 4298 d104 e8bd 4ff8 2063 f7ff bcb0     .F.B.....Oc ....
 801e1df:	48bc 6822 1d00 2180 ea41 4000 9000 b10a     .H"h...!A..@....
 801e1ef:	f7ff fca6 6960 b110 9800 f7ff fca1 9800     ....`i..........
 801e1ff:	f7ff fc9e 2001 f889 0029 6820 b118 e9c7     ..... ..). h....
 801e20f:	a000 e8bd 8ff8 68e0 e9c8 0b00 2002 f885     .......h..... ..
 801e21f:	0029 6960 b1c0 48aa 7ae1 380c 7001 79a1     ).`i...H.z.8.p.y
 801e22f:	0909 7041 8046 7ae1 f041 0101 7101 79a1     ..ApF..zA....q.y
 801e23f:	f3c1 0103 7141 79a1 eb08 1111 80c1 f8c0     ....Aq.y........
 801e24f:	b008 e9c7 a000 e7dc f8df c274 7ae0 f1ac     ..........t..z..
 801e25f:	0c0c f88c 0000 79a0 f3c0 0103 eb01 1010     .......y........
 801e26f:	f88c 0001 f8ac 6002 f8cc b004 79a0 6961     .......`.....yai
 801e27f:	eb08 1010 6803 400b 6003 6921 430b 6003     .....h.@.`!i.C.`
 801e28f:	7921 0689 d51e 88a1 79e2 fa91 f1a1 fab1     !y.......y......
 801e29f:	f181 eb05 0141 f9b1 100c f3c2 1641 f1c6     ....A.......A...
 801e2af:	0603 4131 0616 d500 4249 f9b4 6008 4431     ..1A....IB...`1D
 801e2bf:	7aa6 2401 40b4 1e64 400c f3c2 0104 408c     .z.$.@d..@.....@
 801e2cf:	431c 6004 e9c7 ac00 3528 f885 b001 7828     .C.`....(5....(x
 801e2df:	1c40 7028 e795 e92d 41f0 4c79 b2c3 71a0     @.(p..-..AyL...q
 801e2ef:	7961 4299 d106 e8bd 41f0 2018 ea40 4001     ay.B.....A. @..@
 801e2ff:	f7ff bc1e 79e0 2800 d146 4872 4e73 f100     .....y.(F.rHsN..
 801e30f:	0214 4d73 4f73 6800 2903 d020 dc07 b161     ..sMsO.h.) ...a.
 801e31f:	2901 d139 b95b 69c0 6050 486f e02a 2907     .)9.[..iP`oH*..)
 801e32f:	d01f 290f d130 6900 e018 6840 e012 8841     ...)0..i..@h..A.
 801e33f:	8ca3 eb01 0141 eb00 00c1 3020 e002 4299     ....A..... 0...B
 801e34f:	d003 1d80 8881 2900 d1f9 6800 e00c 2b03     .......)...h...+
 801e35f:	d203 6980 e9c2 6000 e00d 6880 e9c2 7000     ...i...`...h...p
 801e36f:	e009 2b07 d203 6940 e9c2 5000 e003 68c0     ...+..@i...P...h
 801e37f:	6050 485a 6010 4853 2180 3014 ea41 4000     P`ZH.`SH.!.0A..@
 801e38f:	f7ff fbd6 2001 71e0 e8bd 81f0 b570 4604     ..... .q....p..F
 801e39f:	b2c1 f3c0 3203 4d4a 0c00 291a d02c dc0b     .....2JM...),...
 801e3af:	4e48 2901 d013 2904 d041 2919 d15b f414     HN.)...)A..)[...
 801e3bf:	4f70 d02b 484a bd70 291b d022 293f d014     pO+.JHp..)".?)..
 801e3cf:	2964 d150 06c8 ea40 4014 60a8 e025 6030     d)P...@..@.`%.0`
 801e3df:	f990 0000 2800 db04 2102 f100 4080 f880     .....(...!...@..
 801e3ef:	1200 2001 f885 002a e03d f3c2 0102 7129     ... ..*.=.....)q
 801e3ff:	f7ff fb31 6028 e036 84a8 4610 f7ff ff6b     ..1.(`6....F..k.
 801e40f:	e031 f000 f832 f7ff fe83 e02c b2c0 2818     1...2.....,....(
 801e41f:	d005 281b d101 f7ff fe7b 2000 bd70 2000     ...(....{.. p.. 
 801e42f:	71e8 0e20 7168 79a8 f7ff ff55 e7f5 6830     .q .hq.y..U...0h
 801e43f:	f990 0000 2800 db16 f7ff fb26 7800 b100     .....(....&..x..
 801e44f:	2001 6831 7849 4288 d101 2001 e000 2000     . 1hIx.B... ... 
 801e45f:	f895 102a 4281 d006 f885 002a 211c ea41     ..*..B....*..!A.
 801e46f:	4000 f7ff fb65 4620 bd70 b5f0 2700 4d14     .@..e. Fp....'.M
 801e47f:	4639 84ef 2601 e01c 682a eb01 0341 eb02     9F...&..*h..A...
 801e48f:	0243 7954 fa06 f304 4203 d011 7813 2bff     C.Ty.....B...x.+
 801e49f:	d101 7893 1d9b 8cea fa06 fc03 ea42 020c     ...x........B...
 801e4af:	84ea 68aa eb05 0343 eb02 0244 8812 819a     ...h..C...D.....
 801e4bf:	1c49 792a 428a dcdf f885 7028 bdf0 0000     I.*y.B....(p....
 801e4cf:	0020 1c5b 0020 1c5a 1b00 1900 1801 1900      .[. .Z.........
 801e4df:	1803 1900 1807 1900 1800 1900 180f 1900     ................
 801e4ef:	0100 0500 48ff 7a01 2900 d012 2100 7201     .....H.z.)...!.r
 801e4ff:	6802 6841 6001 6042 f1a0 0324 8199 3312     .hAh.`B`..$....3
 801e50f:	8199 7a41 7391 6840 2152 ea41 4000 f7ff     ..Az.s@hR!A..@..
 801e51f:	bb0f 4770 4bf3 b510 3b24 8898 4af2 f44f     ..pG.K..$;...JO.
 801e52f:	61c0 f040 5000 6011 4619 f04f 4280 f8a2     .a@..P.`.FO..B..
 801e53f:	1902 8984 317e 7a88 895b fb00 4303 f8a2     ....~1.z[....C..
 801e54f:	3610 1c40 b2c0 4ae9 7288 7a92 4290 d101     .6@....J.r.z.B..
 801e55f:	2000 7288 2001 7308 bd10 b510 f7ff ffc2     . .r. .s........
 801e56f:	48e0 2100 305a 7301 7b40 f04f 24e0 b138     .H.!Z0.s@{O..$8.
 801e57f:	201d f7ff fadd f44f 5040 f8c4 0180 bd10     . ....O.@P......
 801e58f:	f44f 60c0 f8c4 0100 bd10 49d6 b510 3924     O..`.......I..$9
 801e59f:	7888 4ad6 1c40 b2c0 7088 7a93 2200 4298     .x.J@....p.z.".B
 801e5af:	d100 708a 78c8 4bcf 1c40 b2c0 70c8 335a     ...p.x.K@....pZ3
 801e5bf:	7a5b 4298 d100 70ca f7ff ffcf bd10 4bc9     [z.B...p.......K
 801e5cf:	b510 3b12 8898 4ac8 f44f 61c0 f040 5000     ...;...JO..a@..P
 801e5df:	6011 4619 f04f 4280 f8a2 1902 8984 316c     .`.FO..B......l1
 801e5ef:	7ac8 895b fb00 4303 f8a2 3614 1c40 b2c0     .z[....C...6@...
 801e5ff:	4abf 72c8 7a92 4290 d101 2000 72c8 2001     .J.r.z.B... .r. 
 801e60f:	7308 bd10 49b7 b510 3912 7888 4ab8 1c40     .s...I...9.x.J@.
 801e61f:	b2c0 7088 7a93 2200 4298 d100 708a 78c8     ...p.z.".B...p.x
 801e62f:	4bb0 1c40 b2c0 70c8 335a 7a5b 4298 d100     .K@....pZ3[z.B..
 801e63f:	70ca f7ff ff92 bd10 b5f0 4aaa 2100 325a     .p.........J.!Z2
 801e64f:	7bd4 2615 4bab 4608 2701 fb00 f206 f813     .{.&.K.F.'......
 801e65f:	e012 fa07 f50e 4225 d008 eb03 0242 7952     ......%B....B.Ry
 801e66f:	fa07 fc02 ea4c 0c01 fa1f f18c 1c40 2806     ....L.......@..(
 801e67f:	dbeb 489c 3824 81c1 bdf0 e92d 5ff0 4605     ...H$8....-.._.F
 801e68f:	f8df b260 b2c0 f3c5 3303 ea4f 4a15 f640     ..`......3O..J@.
 801e69f:	344f f04f 0901 f04f 0800 f10b 075a 281d     O4O...O.....Z..(
 801e6af:	d07e dc13 4e94 2801 d023 2803 d079 2809     ~....N.(#..(y..(
 801e6bf:	d07f 280a d177 b672 0740 f8a0 8602 7b38     ...(w.r.@.....8{
 801e6cf:	2800 d071 f887 900d b662 e22f 2829 d06c     .(q.....b./.)(l.
 801e6df:	282e d06b 2851 d1ed 2228 f8db 0004 2100     .(k.Q(..(".....!
 801e6ef:	47a0 f88b 9008 7a38 2800 d1ee f7ff fefa     .G....8z.(......
 801e6ff:	e21c 4881 f640 416c 1d00 f8c6 a000 8001     ...H@.lA........
 801e70f:	f243 01c4 8041 f24d 016e 8081 497b 487c     C...A.M.n...{I|H
 801e71f:	f7ff f978 f04f 2020 2204 6841 1d00 f640     ..x.O.  ."Ah..@.
 801e72f:	3347 4798 4c77 f8a4 8300 f2af 2117 2009     G3.GwL.......!. 
 801e73f:	f7ff fb0d f2af 1179 200a f7ff fb08 f2af     ......y.. ......
 801e74f:	11b5 200c f7ff fb03 f2af 1147 200d f7ff     ... ......G.. ..
 801e75f:	fafe 8820 6832 8ad1 4308 8020 8b10 80e0     .. .2h...C .....
 801e76f:	8b50 80a0 f5a4 64c0 2000 eb02 0140 7c4b     P......d. ..@.K|
 801e77f:	b13b 4b65 7c0e 541e 7c49 eb04 0340 f8a3     ;.eK.|.TI|..@...
 801e78f:	1608 1c40 2802 ddf0 4856 300a f8cb 0000     ..@..(..VH.0....
 801e79f:	f100 0128 f8cb 1004 3956 8188 3112 e006     ..(.....V9...1..
 801e7af:	e172 e1c6 e005 e23c e168 e18a e18e 8188     r.....<.h.......
 801e7bf:	e241 484c 2101 3824 7001 f8df c130 4a53     A.LH.!$8.p..0.SJ
 801e7cf:	f89c 1008 f89c e009 ea4f 79c1 4949 2503     ........O..yII.%
 801e7df:	8812 b289 f1b9 0f00 d101 f04f 0502 fb0e     ..........O.....
 801e7ef:	fe05 f00e 05ff f880 e001 ea4f 1585 8145     ..........O...E.
 801e7ff:	4d3e 8085 80c1 8102 d002 f04f 0507 e000     >M........O.....
 801e80f:	2500 4838 f8df e0e8 3824 7405 3012 f880     .%8H....$8.t.0..
 801e81f:	8000 f89e c009 f89e e008 2503 ea5f 7ece     ...........%_..~
 801e82f:	d100 2502 fb0c fc05 f00c 05ff f880 c001     ...%............
 801e83f:	01ad 8145 4d2e 8085 80c1 8102 f8a0 800e     ..E..M..........
 801e84f:	6831 4e2c 7f49 4319 7401 78f2 2101 2a04     1h,NI..C.t.x.!.*
 801e85f:	d002 2a05 d000 2104 7932 4822 fbb2 f2f1     ...*...!2y"H....
 801e86f:	4920 3812 315a 724a 2104 7441 3012 f880      I.8Z1Jr.!At.0..
 801e87f:	8009 f04f 0900 2515 fb09 fb05 eb06 074b     ..O....%......K.
 801e88f:	f8a7 a006 78f8 2804 d07e 2805 d115 481a     .....x.(~..(...H
 801e89f:	1d00 8178 f816 001b 28ff d005 89b8 2230     ..x......(....0"
 801e8af:	f040 5000 2100 47a0 78b8 28ff d005 89f8     @..P.!.G.x.(....
 801e8bf:	2226 f040 5000 2100 47a0 f816 001b 28ff     &"@..P.!.G.....(
 801e8cf:	d105 7878 28ff d102 78b8 28ff d003 4905     ..xx.(...x.(...I
 801e8df:	7a48 1c40 7248 f887 901d f897 0024 f040     Hz@.Hr......$.@.
 801e8ef:	00c0 e015 0020 6c5b 00e0 80e1 0020 a05c     .... .[l.... .\.
 801e8ff:	0020 ae5c 0020 bc5c 0020 385a 0000 d5d7      .\. .\. .Z8....
 801e90f:	0020 0020 0040 0006 0040 0a02 0020 0c5a      . .@...@... .Z.
 801e91f:	f887 0024 201f 8438 f109 0901 8478 f1b9     ..$.. 8.....x...
 801e92f:	0f06 dba9 f7ff fe88 4ac8 49c9 8993 81cb     .........J.I....
 801e93f:	f8df c320 f8bc 000c 8248 273f 800f f8df     .. .....H.?'....
 801e94f:	a318 f8ba 700a 443b 81cb f10a 0912 f8b9     .....p;D........
 801e95f:	300a 18c7 824f 7a92 2102 fbb1 f7f2 fb02     .0..O..z.!......
 801e96f:	1217 f109 076c 72ba f88a 8002 f89c 200a     ....l..r....... 
 801e97f:	f040 5000 fbb1 fcf2 fb02 111c 72f9 435a     @..P.........rZC
 801e98f:	f889 8002 2100 e000 e003 47a0 f04f 0b00     .....!.....GO...
 801e99f:	e025 88f8 21c8 4ab1 4341 fbb2 f1f1 292d     %....!.JAC....-)
 801e9af:	d900 212d 72b9 f8a7 800c f887 800b f8a7     ..-!.r..........
 801e9bf:	800e f5b0 6fa0 d008 f5a0 60c0 384b d007     .....o.....`K8..
 801e9cf:	2899 d108 f44f 70b8 e007 f24c 0070 e004     .(..O..p..L.p...
 801e9df:	f24d 0070 e001 f44f 705c 8238 e76d 49a0     M.p...O.\p8.m..I
 801e9ef:	fb0b f005 eb01 0640 f886 801c 8ab0 b130     ......@.......0.
 801e9ff:	7931 f040 5000 1dc9 08ca 2100 47a0 8af0     1y@..P.....!.G..
 801ea0f:	b130 7931 f040 5000 1dc9 08ca 2100 47a0     0.1y@..P.....!.G
 801ea1f:	f10b 0b01 f1bb 0f06 dbe1 f887 800d 4991     ...............I
 801ea2f:	f44f 5058 f8c1 01fc 67c8 b672 4888 3020     O.XP.....gr..H 0
 801ea3f:	8981 8802 f021 013f 31ff fbb1 f3f2 fb02     ....!.?..1......
 801ea4f:	1113 8041 8081 8841 8802 1c49 fbb1 f3f2     ..A...A...I.....
 801ea5f:	fb02 1113 0989 f88a 1003 8881 8800 3181     ...............1
 801ea6f:	fbb1 f2f0 fb00 1012 0980 f889 0003 b662     ..............b.
 801ea7f:	2002 7238 487c f7ff f85b e057 4979 f44f     . 8r|H..[.W.yIO.
 801ea8f:	5058 31fc 6008 b662 2500 4e75 f04f 0915     XP.1.`b..%uNO...
 801ea9f:	fb05 f009 f816 1010 29ff d009 eb06 0040     .........)....@.
 801eaaf:	7901 8a80 1dc9 08ca f040 5000 2100 47a0     .y......@..P.!.G
 801eabf:	1c6d 2d06 dbec f887 8008 200b f7ff f838     m..-....... ..8.
 801eacf:	e614 4865 3012 f880 a011 e02f 0e2e f00a     ..eH.0..../.....
 801eadf:	05ff 2000 fa09 f400 4234 d022 fa03 f200     ... ....4B".....
 801eaef:	b2e1 b2d2 b95d 183c f884 8010 7bbc 438c     ....].<......{.C
 801eaff:	4314 73bc 7bfc 438c 4314 73fc e011 7bfc     .C.s.{.C.C.s...{
 801eb0f:	400c 4294 d103 183c f884 8010 e005 7bbc     .@.B..<........{
 801eb1f:	400c 4294 d005 183c 7425 7bbc 438c 4314     .@.B..<.%t.{.C.C
 801eb2f:	73bc 1c40 2806 dbd5 f7ff fd86 2000 e8bd     .s@..(....... ..
 801eb3f:	9ff0 7bfb 2000 1839 7c0a b162 1e52 f012     ...{. 9..|b.R...
 801eb4f:	02ff 740a d107 7bfa fa09 f100 7bbc 438a     ...t...{.....{.C
 801eb5f:	400c 4322 73fa 1c40 2806 dbec 7bf8 4298     .@"C.s@..(...{.B
 801eb6f:	d001 f7ff fd69 2101 7a38 460c f04f 3bff     ....i..!8z.FO..;
 801eb7f:	2802 d122 f8df e0e8 2000 f04f 0a15 fb00     .("...... O.....
 801eb8f:	f30a eb0e 0243 f892 c002 f1bc 0fff d006     ....C...........
 801eb9f:	8c12 464b 2a1e d800 2300 4019 e009 f81e     ..KF.*...#.@....
 801ebaf:	3013 2bff d005 8c12 464b 2a1e d800 2300     .0.+....KF.*...#
 801ebbf:	401c 1c40 2806 dbe2 b1b1 6878 1c40 6078     .@@..(....xh@.x`
 801ebcf:	d101 f8c7 b004 6831 6878 684a 4290 d104     ......1hxhJh.B..
 801ebdf:	204d f7fe ffad 2021 e003 68c9 4288 d10e     M ....! ...h.B..
 801ebef:	4822 f7fe ffa5 e00a 6830 68c0 b128 6879     "H......0h.h(.yh
 801ebff:	4281 d302 481e f7fe ff9b f8c7 8004 b1c4     .B...H..........
 801ec0f:	6838 1c40 6038 d101 f8c7 b000 6831 6838     8h@.8`......1h8h
 801ec1f:	680a 4290 d106 204d f7fe ff8a 2021 f7fe     .h.B..M ....! ..
 801ec2f:	ff87 e008 6889 4288 d105 480b f880 9011     .....h.B...H....
 801ec3f:	e001 f8c7 8000 4628 e779 4907 0002 f101     ......(Fy..I....
 801ec4f:	017e 6808 d100 6848 4770 0000 0020 a05c     ~..h..HhpG.. .\.
 801ec5f:	0040 0206 0020 ae5c 0020 485b e200 0090     @... .\. .[H....
 801ec6f:	0020 bc5c 00e0 84e0 0200 0b00 0400 2c30      .\...........0,
 801ec7f:	0500 2c30 e92d 41f0 4daf 6928 2800 d16f     ..0,-..A.M(i.(o.
 801ec8f:	7e28 2700 b130 762f 6868 68a9 4008 f000     (~.'0./vhh.h.@..
 801ec9f:	7080 6068 7ee8 2401 b140 7f28 b930 78e8     .ph`.~.$@.(.0..x
 801ecaf:	b920 772c f243 004c f7fe ff42 6828 6869      .,wC.L...B.(hih
 801ecbf:	4288 d001 6868 e00a 68a8 4281 d106 2800     .B..hh...h.B...(
 801eccf:	d175 e8bd 41f0 489d f7fe bf32 6068 4e9c     u....A.H..2.h`.N
 801ecdf:	6030 7ee8 b908 8aa8 b900 70f7 7828 07c1     0`.~.......p(x..
 801ecef:	d100 70f7 0780 d501 79e8 70f0 78e8 7831     ...p.....y.p.x1x
 801ecff:	b918 0789 d503 7034 e001 07c9 d0fb 78a9     ......4p.......x
 801ed0f:	b911 7eaa b102 70b7 78f2 b11a 7e6b b10b     ...~...p.x..k~..
 801ed1f:	8aeb b90b 70b7 e001 78b3 b903 7077 f8d6     .....p...x..wp..
 801ed2f:	3001 f8d5 7001 0a1b ebb3 2f17 d919 b12a     .0...p...../..*.
 801ed3f:	b920 8aa8 210c ea41 4000 e026 78b0 b130      ....!A..@&..x0.
 801ed4f:	b929 487d 3022 213c ea41 4000 e016 7870     ).}H"0<!A..@..px
 801ed5f:	b1f0 7868 b9e0 8aa8 2109 ea41 4000 e005     ..hx.....!A..@..
 801ed6f:	e025 7873 b933 786b b123 200a f7fe fee0     %.sx3.kx#.. ....
 801ed7f:	746c e00d 78b3 b92b b121 203d f7fe fed8     lt...x+.!.= ....
 801ed8f:	74ac e005 b922 b118 200d f7fe fed1 74ec     .t..".... .....t
 801ed9f:	7830 7829 4288 d00a 8aa9 f000 000f 0409     0x)x.B..........
 801edaf:	ea41 3000 f040 001a f7fe fec2 742c e8bd     A..0@.......,t..
 801edbf:	81f0 b570 4605 b2c1 0c00 2600 4c5e 2201     ..p..F.....&^L."
 801edcf:	b2c3 2926 d03a dc0a 2901 d01a 290b d06e     ..&):....)...)n.
 801eddf:	290e d053 2918 d14f 7023 7426 e04a 293e     .)S..)O.#p&tJ.>)
 801edef:	d05c 293f d013 2948 d01b 2949 d144 0748     \.?)..H)..I)D.H.
 801edff:	ea40 4015 8841 82a1 8800 82e0 f000 f862     @..@A.........b.
 801ee0f:	e038 6801 60e1 8880 82a0 76a2 e034 f3c5     8..h.`.....v4...
 801ee1f:	3103 f3c1 0102 7761 f7fe fe1d f8c4 001e     .1....aw........
 801ee2f:	e02a 76e3 b113 7622 7726 e003 f243 004c     *..v.."v&w..C.L.
 801ee3f:	f7fe fe7e f7ff ff1e 2000 bd70 2806 d20d     ..~...... p..(..
 801ee4f:	e8df f000 0a0c 080a 0305 483e e000 483e     ..........>H..>H
 801ee5f:	60a0 e00b 483d e7fb 68e0 e7f9 6820 b908     .`..=H...h.. h..
 801ee6f:	6920 b110 483a f7fe fe9c 60a6 6860 68a1      i..:H.....``h.h
 801ee7f:	4008 6060 f7ff fefe 4628 bd70 0c28 d009     .@``....(Fp.(...
 801ee8f:	2801 d009 2809 d002 280d d1f3 7622 70e2     .(...(...(.."v.p
 801ee9f:	74e6 e7ef 70e6 e7fb 7622 e7eb ebb2 4f15     .t...p.."v.....O
 801eeaf:	d101 2001 e000 2000 70a0 74a6 e7e2 2002     ... ... .p.t... 
 801eebf:	ebb0 4f15 d000 2200 7062 7466 e7da 491e     ...O..."bpft...I
 801eecf:	7688 e6d7 e92d 41f0 2400 4e1b f640 3747     .v..-..A.$.N@.G7
 801eedf:	e01e f8d6 101e eb04 0044 eb01 0140 eb06     ........D...@...
 801eeef:	0540 f105 0022 2206 47b8 f895 0025 2801     @..."..".G..%..(
 801eeff:	d00a 2802 d008 2804 d001 2805 d107 8af0     ...(...(...(....
 801ef0f:	0980 f885 0026 e002 8af0 0900 e7f9 1c64     ....&.........d.
 801ef1f:	7f70 42a0 dcdd 7f74 e008 eb04 0044 eb06     p..B..t.....D...
 801ef2f:	0040 3022 2206 490b 47b8 1c64 2c06 dbf4     @."0.".I.Gd..,..
 801ef3f:	2001 7670 e73b 0000 0020 d461 0100 2400     . pv;... .a....$
 801ef4f:	0020 425a 010f 0101 0107 0101 0103 0101      .ZB............
 801ef5f:	0100 2410 0000 e2e1 48ff 4770 b672 4aff     ...$.....HpGr..J
 801ef6f:	80d1 8010 49fe 1450 8088 b662 4770 b672     .....IP...b.pGr.
 801ef7f:	4afa 80d1 8010 49fa 1410 8088 b662 4770     .J.....I....b.pG
 801ef8f:	b672 2000 49f5 8008 80c8 49f5 8088 b662     r.. .I.....I..b.
 801ef9f:	4770 b672 2112 48f1 3008 80c1 49f0 3112     pGr..!.H.0...I.1
 801efaf:	8001 20ff 3912 8008 b662 4770 b510 4cec     ... .9..b.pG...L
 801efbf:	7ae0 7b21 0240 ea40 2001 79a1 4308 49e7     .z!{@.@.. .y.C.I
 801efcf:	1e89 8008 48e7 6800 f990 0008 2800 db0a     .....H.h.....(..
 801efdf:	f7fe fd51 79a2 79e3 2101 421a d000 2100     ..Q..y.y.!.B...!
 801efef:	7a22 4051 7001 bd10 b510 b672 4adc 7991     "zQ@.p....r..J.y
 801efff:	4301 7191 f7ff ffda b662 bd10 b510 b672     .C.q....b.....r.
 801f00f:	4ad7 7991 4381 7191 f7ff ffd0 b662 bd10     .J.y.C.q....b...
 801f01f:	b510 460c 21b0 4620 f240 126d 4790 2118     ...F.! F@.m..G.!
 801f02f:	4620 f7ff ff9b 2001 bd10 4608 b500 49ce      F..... ...F...I
 801f03f:	6809 6001 49cb 6809 680a 6042 6849 6081     .h.`.I.h.hB`Ih.`
 801f04f:	210c f7ff ff8b 2001 bd00 b510 b672 7801     .!..... ....r..x
 801f05f:	f3c1 0200 49c2 720a 7840 71c8 f7ff ffa6     .....I.r@x.q....
 801f06f:	b662 2001 bd10 48be b510 3012 7800 f000     b.. ...H...0.x..
 801f07f:	003f f7ff ffc3 2001 bd10 b510 7800 460c     ?...... .....x.F
 801f08f:	f3c0 0001 f000 ffcf 6020 2104 4620 f7ff     ........ `.! F..
 801f09f:	ff65 2001 bd10 b510 f8d0 1001 48b0 3012     e.. .........H.0
 801f0af:	7800 f3c0 0001 f000 ffd6 2020 f7fe fd79     .x........  ..y.
 801f0bf:	2001 bd10 b510 2013 ea40 4001 f7fe fd38     . ..... @..@..8.
 801f0cf:	2000 bd10 b510 2051 f7fe fd32 2000 bd10     . ....Q ..2.. ..
 801f0df:	b510 7800 2129 ea41 4000 f7fe fd29 2001     ...x)!A..@..).. 
 801f0ef:	bd10 b538 7801 295f d102 6801 0209 d003     ..8..x_)...h....
 801f0ff:	2010 f7ff ff79 e00e 6801 f990 0004 f341     . ..y....h....A.
 801f10f:	0117 f361 201f 9000 4b98 2201 4992 4668     ..a.. ...K.".IhF
 801f11f:	f240 24bb 47a0 2001 bd38 b510 460c 2204     @..$.G. 8....F."
 801f12f:	498d 4620 f640 3347 4798 2104 4620 f7ff     .I F@.G3.G.! F..
 801f13f:	ff15 2001 bd10 b510 6800 2123 f3c0 0013     ... .....h#!....
 801f14f:	ea41 3000 f7fe fcf4 2001 bd10 b510 2053     A..0..... ....S 
 801f15f:	ea40 4001 f7fe fcec 2000 bd10 b510 4604     @..@..... .....F
 801f16f:	f000 fbf8 4a7e f8c2 000e b188 7821 f3c1     ....~J......!x..
 801f17f:	0300 7801 f363 0100 7001 f8d4 1001 f8c0     ...xc....p......
 801f18f:	1001 8811 70d1 1d40 2120 f7ff fef0 e002     .....p@. !......
 801f19f:	2010 f7ff ff29 2001 bd10 b510 460c 2001     . ..).. .....F. 
 801f1af:	bf00 b1b8 f000 fc05 496d f8c1 000e b130     ........mI....0.
 801f1bf:	880a 70ca 7801 2205 eb02 0151 e007 2205     ...p.x."..Q...."
 801f1cf:	2100 4620 f640 334f 4798 2105 4620 f7ff     .! F@.O3.G.! F..
 801f1df:	fec5 e002 2010 f7ff ff07 2001 bd10 b510     ..... ..... ....
 801f1ef:	7800 2805 d805 2121 ea41 4000 f7fe fca0     .x.(..!!A..@....
 801f1ff:	e002 2010 f7ff fef8 2001 bd10 b510 460c     ... ..... .....F
 801f20f:	2001 f7ff fd1a 6020 2000 f7ff fd16 6060     . .... `. ....``
 801f21f:	f003 ff1a 60a0 f001 f84e 81a0 210e 4620     .....`..N....! F
 801f22f:	f7ff fe9c 2001 bd10 b510 4604 7800 f020     ..... .....F.x .
 801f23f:	000c 7020 484e f7fe fcb4 2030 ea40 4004     .. pNH....0 @..@
 801f24f:	f7fe fcaf 2000 bd10 b510 7800 460c f3c0     ..... .....x.F..
 801f25f:	0200 f3c0 0140 f3c0 0083 f001 fac5 8020     ....@......... .
 801f26f:	2102 4620 f7ff fe7a 2001 bd10 4608 493b     .! F..z.. ...F;I
 801f27f:	b500 39fe 6809 090a 8841 f362 010e 8041     ...9.h..A.b...A.
 801f28f:	2104 f7ff fe6b 2001 bd00 b510 7840 07c1     .!..k.. ....@x..
 801f29f:	4833 7b40 d003 b940 4833 3867 e001 b120     3H@{..@.3Hg8.. .
 801f2af:	2045 f7fe fc45 2000 bd10 2001 bd10 b510     E ..E.. ... ....
 801f2bf:	7840 2144 f3c0 0000 ea41 4000 f7fe fc38     @xD!....A..@..8.
 801f2cf:	2001 bd10 b510 7800 460c 1e41 2906 d303     . .....x.FA..)..
 801f2df:	2010 f7ff fe89 e00b f001 f82c 4601 220d     . ........,..F."
 801f2ef:	4620 f640 3347 4798 210d 4620 f7ff fe36      F@.G3.G.! F..6.
 801f2ff:	2001 bd10 b510 4a1a 8810 28ff d006 7990     . .....J...(...y
 801f30f:	f040 0010 7190 f7ff fe51 bd10 4813 300e     @....q..Q....H.0
 801f31f:	8841 8011 8800 7090 8890 b138 f7ff fe30     A......p..8...0.
 801f32f:	7990 f040 0010 7190 f7ff fe40 e8bd 4010     .y@....q..@....@
 801f33f:	205e f7fe bbfd b510 f04f 4280 f8b2 0320     ^ ......O..B.. .
 801f34f:	4c07 f400 41c0 4620 88a3 7980 4299 f040     .L...A F...y.B@.
 801f35f:	0010 d012 71a0 e00d 0000 e8e1 0040 2203     .....q......@.."
 801f36f:	0020 1a62 0020 485a 0100 ac00 0525 3713      .b. .ZH....%..7
 801f37f:	0200 5700 f7ff fe1a e00b 78e1 2904 d00b     ...W.......x.)..
 801f38f:	2905 d104 f8d4 000e b108 f000 fb20 2000     .).......... .. 
 801f39f:	70e0 f7ff fdf5 bd10 f8b2 1328 b141 f8d4     .p........(.A...
 801f3af:	000e 7802 f361 0247 7002 f000 fae2 e7ee     ...xa.G..p......
 801f3bf:	71a0 f7ff fdfb e7ea e92d 41f0 4eb5 b2c2     .q......-..A.N..
 801f3cf:	0c05 8833 4604 f3c0 3103 2a26 d076 dc1d     ..3..F...1&*v...
 801f3df:	2a14 d074 dc12 4fb0 2a01 d046 2a02 d070     .*t....O.*F..*p.
 801f3ef:	2a12 d16a 7371 2b0c d1fb 48aa 3012 7840     .*j.qs.+...H.0@x
 801f3ff:	07c0 7b70 d07d 2800 d05f e0c7 2a16 d079     ..p{}..(_....*y.
 801f40f:	2a1a d07d 2a1b d1ec 2008 e0bb 2a54 d073     .*}..*... ..T*s.
 801f41f:	dc0d f04f 5000 ea40 4014 2a46 d06d 2a47     ..O..P@..@F*m.G*
 801f42f:	d06c 2a52 d1dd 2b11 d169 2128 e0a2 2a57     l.R*...+i.(!..W*
 801f43f:	d071 2a5e d070 2a82 d1d3 f2af 1147 2006     q.^*p..*....G.. 
 801f44f:	f7fe fc85 f2af 1111 2007 f7fe fc80 21b0     ......... .....!
 801f45f:	2006 f7fe fcb9 21a0 2007 f7fe fcb5 498f     . .....!. .....I
 801f46f:	20c0 f8c1 01fc 67c8 e06f 2000 f04f 4180     . .....go.. O..A
 801f47f:	603d f8a1 0320 7aa8 71f0 7a68 7230 f995     =`.. ..z.qhz0r..
 801f48f:	0008 2800 db0f f7fe faf6 683a 2101 7a52     ...(......:h.!Rz
 801f49f:	b102 2100 7001 6838 2104 f990 0008 f100     ...!.p8h.!......
 801f4af:	4080 f880 1200 6838 f990 000b 2800 db6f     .@....8h.....(o.
 801f4bf:	2102 f100 4080 f880 1200 e069 e02d e047     .!...@....i.-.G.
 801f4cf:	e7ff 6838 f990 000b 2800 db0b f7fe fadc     ..8h.....(......
 801f4df:	7800 b938 683a f992 100b f992 000c 320d     .x8.:h.........2
 801f4ef:	f000 f87e 2001 f000 f8e1 2082 f7fe fb20     ..~.. ..... .. .
 801f4ff:	e04e e04a e041 e003 e02e e011 e017 e023     N.J.A.........#.
 801f50f:	f8b6 0009 ebb0 4f14 d042 2001 f7ff fd6c     .......OB.. ..l.
 801f51f:	f8a6 5009 e03c e00d e03d 72f5 2004 e031     ...P<...=..r. 1.
 801f52f:	2b08 d135 221c 4351 f7ff fd18 e02e 2b09     .+5.."QC.......+
 801f53f:	d12e e02b 2d01 d004 2d02 d006 2d03 d14d     ..+..-...-...-M.
 801f54f:	e003 2002 f7ff fd50 e048 f7ff fd22 e045     ... ..P.H...".E.
 801f55f:	2b10 d143 2140 e00b 2b0a d13f 484d 2106     .+C.@!...+?.MH.!
 801f56f:	3024 7800 eba1 1010 4240 2165 eb01 1100     $0.x....@Be!....
 801f57f:	4848 3024 f7ff fcf2 e7e7 0c20 d000 2001     HH$0...... .... 
 801f58f:	7330 2002 f7ff fd30 e002 b908 f7ff fd01     0s. ..0.........
 801f59f:	4620 e8bd 81f0 2100 4a41 4608 eb00 0440      F.....!AJ.F..@.
 801f5af:	f812 4014 429c d104 eb00 0040 eb02 0140     ...@.B....@...@.
 801f5bf:	e002 1c40 2817 d3f1 b119 78b0 794a 4290     ..@..(.....xJy.B
 801f5cf:	d003 2010 f7ff fd10 e7bf f8d1 2001 4931     ... ......... 1I
 801f5df:	3124 f1a1 0012 4790 2800 d1b6 2000 e7d8     $1.....G.(... ..
 801f5ef:	e92d 41f0 460f 4614 f7fe fa58 4606 4829     -..A.F.F..X..F)H
 801f5ff:	308a f001 f97b e02c 4826 2228 2100 308a     .0..{.,.&H(".!.0
 801f60f:	f640 334f 4798 4923 2501 318a 700d 2012     @.O3.G#I.%.1.p. 
 801f61f:	7288 f814 0b01 7408 2004 7508 0340 8348     .r.....t. .u@.H.
 801f62f:	2003 7708 774e 2000 7788 2107 f001 f994     . .wNw. .w.!....
 801f63f:	2101 4638 f000 f812 481a 7005 481a f880     .!8F.....H.p.H..
 801f64f:	520c 2100 4638 f000 f809 2108 2000 f001     .R.!8F.....!. ..
 801f65f:	f983 7820 2800 d1cf 1ee4 e7fa e92d 41f0     .. x.(......-..A
 801f66f:	1e4c 4680 43e6 f04f 4580 f44f 77c8 e00d     L..F.CO..EO..w..
 801f67f:	f8b5 0b02 f8b5 1b02 1a09 b289 42b9 d3f9     .............B..
 801f68f:	4640 f7fe fa01 7800 ea40 0444 42b4 d1ef     @F.....x@.D..B..
 801f69f:	e77f 0000 0020 1a62 0020 485a 00e0 84e0     .... .b. .ZH....
 801f6af:	0000 ece1 0020 967f 0142 0040 b510 49f2     .... ...B.@....I
 801f6bf:	f881 0178 49f1 2004 70c8 1d09 70c8 2080     ..x..I. .p...p. 
 801f6cf:	f7ff fc9c e8bd 4010 2040 f7ff bc8d 2001     .......@@ ..... 
 801f6df:	4770 4be9 f893 1176 2906 d207 eb03 02c1     pG.K..v..)......
 801f6ef:	1c49 f883 1176 6010 2000 6050 4770 b510     I...v..`. P`pG..
 801f6ff:	4ce1 f894 1176 2900 d011 f000 f9aa f894     .L..v..)........
 801f70f:	2176 eb04 01c2 3908 2800 d008 1e52 f884     v!.....9.(..R...
 801f71f:	2176 e8bd 4010 2208 f640 3347 4718 bd10     v!...@."@.G3.G..
 801f72f:	49d5 2000 f881 0176 4770 4ad3 f892 1176     .I. ..v.pG.J..v.
 801f73f:	b909 2000 4770 f892 0177 1c40 b2c0 f882     ... pG..w.@.....
 801f74f:	0177 4288 d302 2000 f882 0177 f892 0177     w..B... ..w...w.
 801f75f:	eb02 00c0 6800 4770 e92d 41f0 2400 4625     .....hpG-..A.$%F
 801f76f:	4fc6 4ec5 f04f 0815 e015 7878 fb00 f008     .O.NO.....xx....
 801f77f:	eb06 0540 f855 0f30 f000 f96b 0004 d005     ..@.U.0...k.....
 801f78f:	79a0 2802 d00a 7968 07c0 d107 48bb f000     .y.(..hy.....H..
 801f79f:	f93b f000 f947 78b8 2800 d1e6 78b9 2000     ;...G..x.(...x. 
 801f7af:	b329 f896 1177 eb06 01c1 42a1 d11f 79a1     )...w......B...y
 801f7bf:	1d28 2901 d103 7801 f021 0108 e007 7841     (..)...x!.....Ax
 801f7cf:	07c9 d0f8 2100 71a1 7801 f041 0108 7001     .....!.q.xA....p
 801f7df:	7922 b2c9 f362 0141 7001 7962 b2c9 f362     "y..b.A..pby..b.
 801f7ef:	0100 7001 79e1 e01e 7001 e8bd 81f0 f896     ...p.y...p......
 801f7ff:	1176 2900 d0f9 48a2 f896 1177 7842 eb06     v..)...H..w.Bx..
 801f80f:	01c1 f022 02fe 7042 f896 2178 b10a 680a     .."...Bp..x!...h
 801f81f:	e001 4a9c 6812 f8c0 2002 794b 7802 f363     ...J.h... Ky.xc.
 801f82f:	0200 7002 79c9 2901 7801 d102 f041 0104     ...p.y.).x..A...
 801f83f:	e7da f021 0104 e7d7 4890 1d00 7881 78c2     ..!......H...x.x
 801f84f:	4291 d207 7800 2113 4348 498b eb01 0040     .B...x.!HC.I..@.
 801f85f:	30d8 4770 2000 4770 e92d 47f0 4f87 2113     .0pG. pG-..G.O.!
 801f86f:	1d3f 7838 f8df 9210 4348 eb09 0540 f899     ?.8x....HC..@...
 801f87f:	0178 35d8 2800 f8d5 0002 d003 f000 f8e9     x..5.(..........
 801f88f:	4604 e004 497f 6809 4288 d137 4c7a 2c00     .F...I.h.B7.zL.,
 801f89f:	d034 487a 7881 2601 f04f 0802 b329 7840     4.zH.x.&O...).@x
 801f8af:	2115 4348 eb09 0040 3034 f8d0 1002 f8d5     .!HC..@.40......
 801f8bf:	2002 4291 d119 7829 074a d504 7840 07c0     . .B..)xJ...@x..
 801f8cf:	d001 71a6 e011 79a0 b178 7920 f3c1 0100     ...q...yx. y....
 801f8df:	4281 d10a f884 8006 4631 b100 2100 7121     .B......1F...!!q
 801f8ef:	4866 f000 f891 f000 f89d 7828 0700 d507     fH........(x....
 801f8ff:	71e6 7828 f340 0040 1c40 7160 e8bd 87f0     .q(x@.@.@.`q....
 801f90f:	79e0 2801 d107 f884 8007 7828 f340 0040     .y.(......(x@.@.
 801f91f:	1c40 7160 e001 2802 d1f0 7868 0840 d0ed     @.`q...(..hx@...
 801f92f:	7828 7961 f3c0 0040 4281 d0e7 78ba 78f9     (xay..@..B...x.x
 801f93f:	1e49 428a dae2 7160 7868 07c0 d002 2020     I..B..`qhx....  
 801f94f:	f7ff fb52 484d 1d00 f000 f850 e8bd 47f0     ..R.MH....P....G
 801f95f:	f000 b873 4849 7881 78c2 4291 d207 7800     ..s.IH.x.x.B...x
 801f96f:	2115 4348 4944 eb01 0040 3035 4770 2000     .!HCDI..@.50pG. 
 801f97f:	4770 b510 4841 2115 7800 4348 493e eb01     pG..AH.!.xHC>I..
 801f98f:	0040 3030 7942 0852 d012 f8d0 2006 6002     @.00ByR...... .`
 801f99f:	2200 7102 f891 1178 b919 493a 6809 f8c0     .".q..x...:I.h..
 801f9af:	1006 4836 f000 f822 e8bd 4010 f000 b83a     ..6H.."....@..:.
 801f9bf:	bd10 4832 1d00 7881 b139 7840 2113 4348     ..2H...x9.@x.!HC
 801f9cf:	492d eb01 0040 30d9 4770 2000 4770 482b     -I..@..0pG. pG+H
 801f9df:	b510 1d00 7880 2800 d007 4828 1d00 f000     .....x.(..(H....
 801f9ef:	f813 e8bd 4010 f000 b828 bd10 b672 7801     .....@..(...r..x
 801f9ff:	78c2 1c49 fbb1 f3f2 fb02 1113 7001 7881     .xI..........p.x
 801fa0f:	1c49 7081 b662 4770 b672 7841 78c2 1c49     I..pb.pGr.Ax.xI.
 801fa1f:	fbb1 f3f2 fb02 1113 7041 7881 1e49 7081     ........Ap.xI..p
 801fa2f:	b662 4770 b672 4815 7880 2803 f04f 0040     b.pGr..H.x.(O.@.
 801fa3f:	d201 f7ff bad9 f7ff bae1 b672 480f 1d00     ..........r..H..
 801fa4f:	7880 2800 f04f 0080 d001 f7ff bacd f7ff     .x.(O...........
 801fa5f:	bad5 b510 4b08 2100 f893 2176 e008 eb03     .....K.!..v!....
 801fa6f:	04c1 6824 4284 d102 eb03 00c1 bd10 1c49     ..$h.B........I.
 801fa7f:	428a dcf4 2000 bd10 0020 cc62 0020 4c5a     .B... .. .b. .ZL
 801fa8f:	0020 3c64 0100 ac00 b510 4604 f990 0000      .d<.......F....
 801fa9f:	2800 db12 7861 f3c1 0106 2904 d104 f7fd     .(..ax.....)....
 801faaf:	ffea 7861 09c9 7001 7860 f3c0 0106 f994     ..ax...p`x......
 801fabf:	0000 f100 4080 f880 1200 bd10 e92d 41f0     .....@......-..A
 801facf:	f04f 4680 f896 1403 2000 f896 2401 f001     O..F..... ...$..
 801fadf:	01f8 f002 04c7 4aa8 ea4f 0ce1 7811 4da7     .......JO....x.M
 801faef:	1e4b 4607 b2db f1bc 0f0c d21b e8df f00c     K..F............
 801faff:	061a 1e06 1e1c 1832 1c4b 4337 6868 f024     ......2.K.7Chh$.
 801fb0f:	0104 7803 07db d003 7843 2b01 d900 2701     ...x....Cx.+...'
 801fb1f:	ea41 0487 7841 7011 7800 f886 0405 e03e     A...Ax.p.x....>.
 801fb2f:	2001 7568 2002 e02f 2002 e016 b139 7013     . hu. /.. ..9..p
 801fb3f:	68a8 f810 1b01 f886 1405 60a8 e02f 6868     .h.........`/.hh
 801fb4f:	1d00 6068 7800 07c0 d002 f044 0420 e026     ..h`.x....D. .&.
 801fb5f:	2001 e019 2900 d0fb 2003 7568 e7f8 7013     . ...)... hu...p
 801fb6f:	2902 d101 f024 0404 f896 1405 68e8 f800     .)..$........h..
 801fb7f:	1b01 60e8 e013 f896 0405 68e9 7008 6868     ...`.......h.phh
 801fb8f:	1d00 6068 e7e4 b150 f024 0404 07c0 d001     ..h`..P.$.......
 801fb9f:	f044 0410 2000 f7fe f821 752f e002 6850     D.... ..!./u..Ph
 801fbaf:	7800 7528 f886 4401 e8bd 81f0 4a73 f04f     .x(u...D....sJO.
 801fbbf:	4380 6910 b170 f64f 71c0 4288 da00 4601     .C.ip.O..q.B...F
 801fbcf:	1a40 6110 b672 f8b3 0b02 4408 f8a3 0b48     @..ar......D..H.
 801fbdf:	b662 4770 2000 f8a3 0b28 6850 1d00 6050     b.pG. ..(.Ph..P`
 801fbef:	2000 f7fd bffb e92d 41f0 4605 b2c0 4e62     . ....-..A.F..bN
 801fbff:	4f62 f04f 4480 2803 d03d dc23 2801 d028     bOO..D.(=.#..((.
 801fc0f:	2802 d11e 6870 7840 f040 0040 f884 0401     .(..ph@x@.@.....
 801fc1f:	f2af 0167 2013 f7fe f89a 21e0 2013 f7fe     ..g.. .....!. ..
 801fc2f:	f8d3 4c57 f44f 2000 6020 f2af 116f 2008     ..WLO..  `..o.. 
 801fc3f:	f7fe f88d 21e0 2008 f7fe f8c6 f44f 7080     .....!. ....O..p
 801fc4f:	6020 e096 f04f 0800 2880 d024 2881 d1f8      `..O....($..(..
 801fc5f:	e02b 0c28 6070 2007 f884 020d f884 020e     +.(.p`. ........
 801fc6f:	2400 6870 eb00 0044 1c80 f7ff ff0d 1c64     .$ph..D.......d.
 801fc7f:	2c04 dbf6 e07d b672 7d38 b150 7d38 1e40     .,..}.r.8}P.8}@.
 801fc8f:	f010 00ff 7538 d104 b662 2005 f7fd ff50     ....8u..b.. ..P.
 801fc9f:	e06f b662 e06d f04f 5000 ea40 4015 6038     o.b.m.O..P@..@8`
 801fcaf:	6840 6078 f887 8015 2581 683a 6850 b120     @hx`.....%:hPh .
 801fcbf:	6878 8841 b109 7d7b b13b 6810 7d79 ea40     xhA...{};..hy}@.
 801fccf:	3001 f7fd ff35 2000 e76e 7802 b1ea 4608     .0..5.. n..x...F
 801fcdf:	f7fd fec1 60b8 6878 7901 07c9 d004 88c0     .....`xh.y......
 801fcef:	f7fd feb9 60f8 e001 f8c7 800c 6870 7800     .....`......ph.x
 801fcff:	7538 2001 f7fd ff72 f894 0401 f000 00c3     8u. ..r.........
 801fd0f:	f040 0020 f884 0401 e031 7842 b9b2 0188     @. .....1.Bx....
 801fd1f:	f64f 71c0 6138 4288 da00 4601 1a40 6138     O..q8a.B...F@.8a
 801fd2f:	b672 f8b4 0b02 4408 f8a4 0b48 2008 f8a4     r......D..H.. ..
 801fd3f:	0b28 2001 f7fd ff52 b662 e018 2a01 d103     (.. ..R.b....*..
 801fd4f:	1c80 f7ff fea1 e006 2a02 d106 f241 002e     .........*..A...
 801fd5f:	eb00 4001 e006 6878 e007 2a03 d105 202e     ...@..xh...*... 
 801fd6f:	ea40 4001 f7fd fee4 e7f5 1d00 6078 f505     @..@........x`..
 801fd7f:	3580 4628 e718 0000 0020 545a 0020 dc5b     .5(F.... .ZT .[.
 801fd8f:	00e0 00e1 b570 4604 b2c0 2801 d130 4e19     ....p..F...(0..N
 801fd9f:	0c20 6030 4818 f640 3547 7800 b120 4917      .0`.H@.G5.x ..I
 801fdaf:	4817 f7fd fe2f e004 4816 4914 6802 4814     .H../....H.I.h.H
 801fdbf:	47a8 6830 7840 b968 4813 2118 8001 8041     .G0h@xh..H.!..A.
 801fdcf:	f240 113f 8081 1541 80c1 480f 2210 490f     @.?...A....H.".I
 801fddf:	30d8 47a8 6830 7801 f04f 4080 b129 2133     .0.G0h.xO..@).3!
 801fdef:	f880 1212 2134 f880 1211 2100 f8a0 1c00     ....4!.....!....
 801fdff:	4620 bd70 0020 5c5a 0000 94e2 0000 95e2      Fp. .Z\........
 801fe0f:	0020 806d 0000 90e2 0020 ac7e 0000 76e2      .m..... .~....v
 801fe1f:	e92d 41f0 4605 b2c0 4e5c 4f5d 2801 d00d     -..A.F..\N]O.(..
 801fe2f:	2400 f04f 0c01 2803 d030 2826 d07e 2828     .$O....(0.&(~.((
 801fe3f:	d12b 6836 2000 f106 0310 e061 0c28 2400     +.6h. ....a.(..$
 801fe4f:	6030 6830 ebc4 01c4 4420 eb07 0841 f810     0`0h.... D..A...
 801fe5f:	1f08 f108 0804 f341 0106 2900 db09 4a4d     ......A....)..MJ
 801fe6f:	4411 f8c8 1000 7800 f340 0006 f7fd fe03     .D.....x@.......
 801fe7f:	e003 f04f 4080 f8c8 0000 1c64 f8c8 0004     ..O..@....d.....
 801fe8f:	2c02 dbde 2028 f7fd fe53 e07b f897 0020     .,..( ..S.{... .
 801fe9f:	2800 d077 2300 6830 f04f 0804 eb00 0e03     .(w..#0hO.......
 801feaf:	ebc3 00c3 eb07 0040 f10e 0e08 1d00 e01d     ......@.........
 801febf:	6881 f990 200c 5c8a 2aff d100 7304 f990     .h... .\.*...s..
 801fecf:	200c 5c89 1c52 7341 7302 2900 d0f0 7b01     . .\R.As.s.)...{
 801fedf:	07c9 d003 6801 f881 8000 e007 f89e 2000     .....h......... 
 801feef:	4661 0612 d400 2102 6802 7011 7b41 2900     aF.....!.h.pA{.)
 801feff:	d0de 7b41 1c5b 1e49 7341 2b02 dbcb e041     ..A{[.I.As.+..A.
 801ff0f:	ebc0 01c0 eb07 0141 1d09 00c2 fa25 f202     ......A.....%...
 801ff1f:	f3c2 4207 2a06 d900 2200 4432 7a92 f8d1     ...B.*..."2D.z..
 801ff2f:	c008 441a 4594 d004 608a e000 e005 734c     ...D.E...`....Ls
 801ff3f:	730c 1c40 2802 dbe3 e024 0c28 d000 2001     .s@..(..$.(.... 
 801ff4f:	f887 0020 2000 6831 f897 3020 4401 7a09     .. .. 1h.. 0.D.z
 801ff5f:	09ca ebc0 01c0 eb07 0141 1d09 b113 6849     ........A.....Ih
 801ff6f:	700a e00c 4663 4664 2a00 d001 f04f 0400     .p..cFdF.*..O...
 801ff7f:	684a 7014 d101 f04f 0302 6809 700b 1c40     Jh.p..O....h.p@.
 801ff8f:	2802 dbe0 4628 e8bd 81f0 0000 0020 605a     .(..(F...... .Z`
 801ff9f:	0020 b85d 0040 0002 b570 b2c1 4c3d f44f      .].@...p...=LO.
 801ffaf:	3680 f44f 457c 2901 d00a 2920 d107 2210     .6O.|E.).. )..."
 801ffbf:	4620 f640 23f5 6a21 4798 bb08 2000 bd70      F@..#!j.G... p.
 801ffcf:	0c03 4a35 f103 0110 6011 6226 6a22 3a10     ..5J.....`&b"j.:
 801ffdf:	6222 6811 1c49 d101 42aa d8f7 6811 1c49     "b.hI....B...hI.
 801ffef:	d000 4613 461d 2100 eb05 0281 6813 f844     ...F.F.!.....hD.
 801ffff:	3021 eb04 0281 1c49 6113 2904 dbf4 bd70     !0....I..a.)..p.
 802000f:	6a20 3010 6220 42b0 d305 4924 4628 f240      j.0 b.B..$I(F@.
 802001f:	12ad 4790 6225 6a21 4b21 2204 481d f240     ...G%b!j!K.".H@.
 802002f:	24bb 47a0 e7ca 491c f000 007f 6809 eb01     .$.G...I.....h..
 802003f:	0180 4818 780a 3010 0612 d400 3810 784a     ...H.x.0.....8Jx
 802004f:	eb00 0082 6800 788a 40d0 78ca 2101 4091     .....h.x.@.x.!.@
 802005f:	1e49 4008 4770 b510 4a0f f000 007f 6812     I..@pG...J.....h
 802006f:	4b0c eb02 0080 7802 3310 0612 d400 3b10     .K.....x.3.....;
 802007f:	78c4 2201 40a2 7884 1e52 40a2 40a1 4011     .x.".@.xR..@.@.@
 802008f:	b672 7840 eb03 0080 6803 4393 430b 6003     r.@x.....h.C.C.`
 802009f:	b662 bd10 0020 4864 0020 645a 0525 efbe     b... .dH .Zd%...
 80200af:	0525 3713 e92d 41f0 2403 4f55 4606 f04f     %..7-..A.$UO.FO.
 80200bf:	0801 2502 fa08 f004 4230 d019 4620 f7fd     ...%....0B.. F..
 80200cf:	fce3 7801 19e0 7802 2a08 d211 e8df f002     ...x...x.*......
 80200df:	080c 1004 1010 0c04 b951 f880 8000 e007     ........Q.......
 80200ef:	2901 d105 7005 e003 462a b901 2201 7002     .)...p..*F...".p
 80200ff:	1c64 2c12 ddde e8bd 81f0 e92d 41f0 4605     d..,......-..A.F
 802010f:	b2c0 4e40 2801 d005 2400 2804 d00f 2827     ..@N.(...$.(..'(
 802011f:	d14f e050 0c28 6070 6800 f7ff ffc3 6870     O.P.(.p`.h....ph
 802012f:	7d01 2900 d045 6880 f000 f870 e041 6870     .}.)E..h..p.A.ph
 802013f:	7d00 b390 f000 f870 b378 f000 f8bc 4680     .}....p.x......F
 802014f:	f000 f8b9 4f2f 7839 2900 6871 d001 89c9     ..../O9x.)qh....
 802015f:	e000 8989 4288 d801 2021 e026 6870 8a01     .....B..! &.ph..
 802016f:	4541 d30e f997 1001 2904 da0a 2900 da01     AE.......)...)..
 802017f:	707c e01c 1c49 b248 7078 2804 d117 4822     |p..I.H.xp.(.."H
 802018f:	e013 8a40 4540 d812 f997 0001 f110 0f14     ..@.@E..........
 802019f:	dd0d 2800 dd02 707c e002 e00a 1e40 7078     ...(..|p....@.xp
 80201af:	f997 0001 3014 d102 202d f7fd fcc1 2001     .....0..- ..... 
 80201bf:	7038 4628 e79f 2000 f7fd fc66 7800 2800     8p(F... ..f..x.(
 80201cf:	d0f9 6870 6840 f7ff ff6d 6870 f990 0015     ..ph@h..m.ph....
 80201df:	2800 db0a f7fd fc4f 7004 6870 2104 f990     .(....O..pph.!..
 80201ef:	0015 f100 4080 f880 1200 2102 074a f8a2     .....@.....!J...
 80201ff:	1100 2000 bf00 1c40 280a dbfb bf30 e7f6     ... ..@..(..0...
 802020f:	0040 0002 0020 685a 0100 2d00 4a2b 6010     @... .Zh...-+J.`
 802021f:	8091 200d 80d0 4770 b570 4928 f644 75c0     ... ..pGp.(ID..u
 802022f:	88c8 f04f 4380 1e40 b280 80c8 280c d840     ..O..C@......(@.
 802023f:	d105 f04f 0000 8108 f8a3 5a6c e039 4a1f     ..O.......lZ9..J
 802024f:	07c6 8912 f04f 0401 d009 0845 40ac 4322     ....O.....E..@"C
 802025f:	f44f 4480 ea44 1282 f8a3 2a6c e009 f8b3     O..DD.....l*....
 802026f:	6a6a 05f6 d403 0846 40b4 4322 810a f8a3     jj....F..@"C....
 802027f:	5a6c b9f0 f44f 4040 f8a3 0a6c 4a10 890c     lZ..O.@@..l..J..
 802028f:	e9d2 0300 1a1b 4363 243f fbb3 f3f4 4418     ......cC?$.....D
 802029f:	6993 f44f 747a fbb3 f3f4 680c 6912 4422     .iO.zt.....h.i"D
 80202af:	4402 4353 fbb3 f0f0 8148 8888 80c8 2001     .DSC....H...... 
 80202bf:	bd70 2000 bd70 4801 8940 4770 0020 f25b     p.. p..H@.pG .[.
 80202cf:	0100 d000 b2c1 2901 d007 4b0c 2903 d005     .......)...K.)..
 80202df:	2926 d102 0c01 f883 1062 4770 f893 1062     &)......b.pG..b.
 80202ef:	2900 d0fa 2100 b672 5c5a b10a 1e52 545a     .)...!r.Z\..R.ZT
 80202ff:	b662 1c49 2906 dbf6 4770 0000 0020 6c64     b.I..)..pG.. .dl
 802030f:	b570 4d18 1e44 f895 0062 2800 d011 7808     p..MD...b..(...x
 802031f:	f3c0 02c2 f3c0 0002 4410 2807 d809 200d     .........D.(... 
 802032f:	fb00 5004 1d80 220d f640 3347 4798 200a     ...P..."@.G3.G. 
 802033f:	5528 bd70 b510 1e40 b672 490a 5c0a 2a00     (Up...@.r..I.\.*
 802034f:	f04f 020d d006 fb00 1102 1d89 4806 f640     O............H@.
 802035f:	3347 e003 2100 4804 f640 334f 4798 b662     G3...!.H@.O3.Gb.
 802036f:	4801 bd10 0020 6c64 0020 d95d e92d 41f0     .H.. .dl .].-..A
 802037f:	4604 4d39 b2c0 0c21 2601 f995 2002 2821     .F9M..!..&... !(
 802038f:	d025 dc10 4a34 2801 f1a2 0204 d043 2802     %...4J.(....C..(
 802039f:	d047 2805 d104 f7fd fcdf f240 105f 4780     G..(......@._..G
 80203af:	4620 e8bd 81f0 2824 d041 2825 d04a 282c      F....$(A.%(J.,(
 80203bf:	d1f6 f3c4 3003 f04f 3701 686b 4087 43bb     .....0O..7kh.@.C
 80203cf:	fa06 f700 1e48 00c0 4087 431f 606f 2a00     ....H....@.Co`.*
 80203df:	d0e6 f414 4f70 d100 70a9 6868 f995 1002     ....pO...phh....
 80203ef:	fa90 f0a0 fab0 f080 eb06 00d0 4281 da00     .............B..
 80203ff:	78a8 f995 1003 4281 d0d2 b240 70e8 2126     .x.....B..@..p&!
 802040f:	ea41 4000 f7fd fb94 78e8 2800 d1c8 2025     A..@.....x.(..% 
 802041f:	f7fd fb8e e7c4 f04f 30ff 6011 70a8 70e8     ......O..0.`.p.p
 802042f:	e7be 6810 7800 2800 d0ba 480c e7f0 480a     ...h.x.(...H...H
 802043f:	f414 4f70 8800 d002 ea40 4014 e001 ea20     ..pO....@..@.. .
 802044f:	4014 8028 2a00 d1ab 8828 2800 d1a8 2027     .@(..*..(..(..' 
 802045f:	f7fd fba7 2020 e7a4 0020 745a 0500 2100     ....  .. .Zt...!
 802046f:	e92d 4ff1 f89d 6000 4af4 f3c6 0000 f3c6     -..O...`.J......
 802047f:	0140 ea40 0041 eb00 0180 f8df 93c4 6812     @.@.A..........h
 802048f:	eb00 00c0 eb09 0440 f89d 7001 eb02 05c1     ......@....p....
 802049f:	f8bd 0002 f9b4 800c f3c7 1101 f340 000a     ............@...
 80204af:	2901 d101 81a0 e015 2902 d101 4440 e7f9     .).......)..@D..
 80204bf:	2903 d10f f89d 1001 4be1 f3c1 0103 07f2     .).......K......
 80204cf:	eb03 0141 d004 f8a1 006e f647 78ff e001     ..A.....n.G..x..
 80204df:	f8a1 004e f017 0f30 f04f 0a00 d012 f9b4     ..N...0.O.......
 80204ef:	000c 2800 dd02 f8a4 a00c e005 f9b5 101e     ...(............
 80204ff:	4288 da01 8c28 81a0 f9b4 100c f895 0027     .B..(.........'.
 802050f:	f7ff fda9 7c60 2101 ebb1 1f97 d00c 2202     ....`|.!......."
 802051f:	ebb2 1f97 d102 f884 a011 e006 2203 ebb2     ............."..
 802052f:	1f97 d102 b100 2100 7461 07f1 d018 7c62     .......!at....b|
 802053f:	f240 31ff f44f 437c 4282 d013 b112 f895     @..1O.|C.B......
 802054f:	0025 e001 f895 0026 7c22 4282 da00 7420     %.....&."|.B.. t
 802055f:	f8b9 004c 07b2 d400 4619 4308 f8a9 004c     ..L......F.C..L.
 802056f:	e8bd 8ff8 f9b4 000c 4540 d0f9 f895 0024     ........@E....$.
 802057f:	e7ea e92d 5ff0 4fb2 f04f 0b00 f8b7 404c     ..-.._.OO.....L@
 802058f:	f8b7 004a f8a7 b04c 4004 48ac f8df 92b4     ..J...L..@.H....
 802059f:	2601 f8d0 8000 e05b fa94 f0a4 fab0 f180     .&....[.........
 80205af:	2909 4640 dc03 4aa6 3078 3236 e002 4aa4     .)@F...Jx062...J
 80205bf:	3028 3212 eb07 0541 f9b5 308e 454b d102     (0.2..A....0KE..
 80205cf:	f9b0 3020 e004 f8b0 c01c eba3 030c b21b     .. 0............
 80205df:	f892 c011 f1bc 0f00 d112 f9b2 c00c f9b0     ................
 80205ef:	e01e 45f4 db0c f8b5 a06e 44d4 fa0f fc8c     ...E....n..D....
 80205ff:	f1bc 0f00 dd02 f04f 0c00 e003 45e6 dd01     ......O......E..
 802060f:	f9b0 c020 ebac 0e03 f892 c010 fb9e f2fc     .. .............
 802061f:	f897 e0af 441a b212 f1be 0f00 d104 429a     .....D.........B
 802062f:	d102 f1bc 0f01 d910 f9b0 c01e 464b 4594     ............KF.E
 802063f:	dc02 f9b0 001c 1883 f8a5 308e f8b7 004c     ...........0..L.
 802064f:	fa06 f201 4310 f8a7 004c fa06 f001 4384     .....C..L......C
 802065f:	2c00 d1a1 f897 0046 2801 d902 1e40 f887     .,....F..(..@...
 802066f:	0046 f897 0022 2801 d902 1e40 f887 0022     F..."..(..@...".
 802067f:	f8b7 004c 2800 d008 211b ea41 4000 f7fd     ..L..(...!A..@..
 802068f:	fa57 f887 60ae f887 b0af e8bd 9ff0 e92d     W....`........-.
 802069f:	43f8 4604 b2c1 4a69 2700 2601 4d68 0c00     .C.F..iJ.'.&hM..
 80206af:	2926 d071 dc10 2901 d019 2903 d061 2918     &)q....)...)a..)
 80206bf:	d112 2801 d069 2807 d068 280f d10c f64f     ...(i..(h..(..O.
 80206cf:	70ff f000 f8af e007 2930 d060 293f d036     .p......0)`.?)6.
 80206df:	2963 d101 f885 70ae 4620 e8bd 83f8 f8df     c).....p F......
 80206ef:	8164 2100 6010 eb05 0241 1c49 f8a2 808e     d..!.`..A.I.....
 80206ff:	290f ddf8 2100 eb01 0281 eb00 03c2 f8b3     .)...!..........
 802070f:	9018 eb01 02c1 eb05 0242 46be ea5f 69c9     ........B..F_..i
 802071f:	d400 46c6 f8a2 e00c 8b1b 46bc 06db d400     ...F.......F....
 802072f:	46c4 f8a2 c00e 1c49 7416 2904 dbe3 4844     .F....I..t.)..DH
 802073f:	2164 308e ea41 4000 f7fd f9fa e7cc f3c4     d!.0A..@........
 802074f:	3103 f3c1 0802 f7fd f986 f8a5 704a 2100     .1..........Jp.!
 802075f:	e00c eb01 0341 eb00 0343 795b f8b5 204a     ....A...C.[y..J 
 802076f:	fa06 f303 431a f8a5 204a 1c49 4541 dbf0     .....C..J I.AE..
 802077f:	e7b2 f895 0048 2800 d0ae f895 00ae 2800     ....H..(.......(
 802078f:	d1aa f7ff fef6 e7a7 e025 e01e e020 f04f     ........%... .O.
 802079f:	5000 ea40 4014 6800 9000 f89d 1000 6812     .P@..@.h.......h
 80207af:	f3c1 0300 f3c1 0440 ea43 0344 eb03 0383     ......@.C.D.....
 80207bf:	eb02 02c3 f3c1 0181 8b12 3108 408e 4232     ...........1.@2B
 80207cf:	d001 f7ff fe4d 2000 e787 f885 6048 e783     ....M.. ....H`..
 80207df:	f240 30ff e775 0c20 d002 f885 6049 e77b     @..0u. .....I`{.
 80207ef:	f805 7f48 706f e777 ea42 0041 4a13 eb00     ..H.opw.B.A..J..
 80207ff:	0180 6812 eb00 00c0 eb02 02c1 4910 f9b2     ...h.........I..
 802080f:	201e eb01 0140 f9b1 000c 4290 db02 7c49     . ..@......B..I|
 802081f:	2900 d000 480b 4770 4909 eb01 0040 f9b0     .)...HpG.I..@...
 802082f:	004e 4770 4906 f8a1 004c 2001 f881 00af     N.pG.I..L.. ....
 802083f:	f881 0046 f881 0022 4770 0000 0020 7c5a     ..F...".pG.. .Z|
 802084f:	0020 e864 ffff 00fc 4a53 8810 2800 d014      .d.....SJ...(..
 802085f:	8810 4b52 fa90 f0a0 fab0 f180 689b eb01     ..RK.........h..
 802086f:	0081 eb03 0040 7843 2300 7043 4b4c 8018     ....@.Cx.#CpLK..
 802087f:	8810 2301 408b 4398 8010 4770 e92d 41f0     ...#.@.C..pG-..A
 802088f:	2701 4d45 4e47 e018 79a8 1c40 71a8 8868     .'EMGN...y@..qh.
 802089f:	b198 8868 88a9 fa90 f0a0 fab0 f080 fa07     ..h.............
 80208af:	f400 4221 d006 483d 7800 f7fd fa65 79e8     ..!B..=H.x..e..y
 80208bf:	1c40 71e8 8868 43a0 8068 79a8 f896 1f94     @..qh..Ch..y....
 80208cf:	4288 d1e1 e8bd 81f0 b510 4c34 6860 4780     .B........4L`h.G
 80208df:	4931 7a08 1c40 b2c0 7208 79c9 4288 d004     1I.z@....r.y.B..
 80208ef:	7820 e8bd 4010 f7fd ba47 bd10 b510 4c2b      x...@..G.....+L
 80208ff:	2209 60a0 2100 4828 f640 334f 4798 492a     .".`.!(H@.O3.G*I
 802090f:	2000 7008 f2af 01bf f7fd fa21 f2af 0193     . .p......!.....
 802091f:	2001 f7fd fa1c 2160 2000 f7fd fa55 2150     . ....`!. ..U.P!
 802092f:	2001 f7fd fa51 f2af 015f 201f f7fd fa1a     . ..Q..._.. ....
 802093f:	7020 481e 2101 6001 2102 6001 bd10 4917      p.H.!.`.!.`...I
 802094f:	2201 6048 4814 71c2 2200 7202 7808 f7fd     ."H`.H.q.".r.x..
 802095f:	ba13 4912 6048 4770 4a0f 4301 8011 8051     ...IH`pG.J.C..Q.
 802096f:	8090 2000 f7fd ba2b b570 4606 460d b672     ... ..+.p..F.Fr.
 802097f:	4c09 8820 4210 d102 480d f7fd f8d9 8820     .L ..B...H.... .
 802098f:	4335 4328 8020 8860 4328 8060 88a0 4330     5C(C .`.(C`...0C
 802099f:	80a0 b662 bd70 0000 0020 e65d 0020 805a     ..b.p... .]. .Z.
 80209af:	0040 020c 0020 0070 0020 947f 00e0 00e1     @... .p. .......
 80209bf:	0200 0500 b510 4823 2240 6c00 4921 f640     ......#H@".l!I@.
 80209cf:	3347 4798 2240 2100 481e f640 334f 4798     G3.G@".!.H@.O3.G
 80209df:	e8bd 4010 2014 f7fd b8ab 491a 6408 481a     ...@. .....I.d.H
 80209ef:	7800 f7fd b9c9 b510 f2af 0137 2018 f7fd     .x........7.. ..
 80209ff:	f9b9 4915 7008 bd10 4a12 eb02 0080 6802     ...I.p...J.....h
 8020a0f:	1851 d301 f04f 31ff 6001 4770 490d eb01     Q...O..1.`pG.I..
 8020a1f:	0180 6808 1c40 d000 6008 4770 4909 eb01     ...h@....`pG.I..
 8020a2f:	0140 8808 1c40 0400 0c00 d000 8008 4770     @...@.........pG
 8020a3f:	4904 4401 7808 1c40 f010 00ff d000 7008     .I.D.x@........p
 8020a4f:	4770 0000 0020 9865 0020 8c5a f000 3155     pG.. .e. .Z...U1
 8020a5f:	f000 30aa eb01 0050 f000 3133 f000 30cc     ...0..P...31...0
 8020a6f:	eb01 0090 f000 310f f000 30f0 eb01 1010     .......1...0....
 8020a7f:	f000 11ff f000 20ff eb01 2010 b281 eb01     ....... ... ....
 8020a8f:	4010 4770 4851 4952 6800 6008 4770 b510     .@pGQHRI.h.`pG..
 8020a9f:	4c4f 21c5 6820 4788 6020 bd10 b510 4604     OL.! h.G `.....F
 8020aaf:	f7ff fff5 4602 4620 f7ff ffd0 fbb2 f1f0     .....F F........
 8020abf:	fb00 2011 2301 e006 fa94 f1a4 fab1 f281     ... .#..........
 8020acf:	fa03 f102 438c 1e40 d2f6 fa94 f0a4 fab0     .....C@.........
 8020adf:	f080 bd10 7981 0689 d501 1dc0 4770 2000     .....y......pG. 
 8020aef:	4770 7981 2203 ebb2 1f91 d006 06ca d504     pG.y."..........
 8020aff:	1dc0 f3c1 1140 4408 4770 2000 4770 7981     ....@..DpG. pG.y
 8020b0f:	2203 ebb2 1f91 d009 070a d507 f3c1 1240     ."............@.
 8020b1f:	1dc0 4410 f3c1 1100 4408 4770 2000 4770     ...D.....DpG. pG
 8020b2f:	7981 2203 ebb2 1f91 d00a 1dc0 f3c1 1240     .y."..........@.
 8020b3f:	4410 f3c1 1200 4410 f3c1 01c0 4408 4770     .D.....D.....DpG
 8020b4f:	2000 4770 7981 098a d10e 1dc0 f3c1 1240     . pG.y........@.
 8020b5f:	4410 f3c1 1200 4410 f3c1 02c0 4410 f3c1     .D.....D.....D..
 8020b6f:	0102 eb00 0041 4770 2000 4770 b570 7984     ....A.pG. pGp..y
 8020b7f:	1dc2 210b 06a3 d502 f812 1b01 310f 06e3     ...!.........1..
 8020b8f:	d504 f812 3b01 1d09 4419 b289 0723 d504     .....;...D..#...
 8020b9f:	f812 3b01 1d09 4419 b289 2300 f3c4 0502     ...;...D...#....
 8020baf:	e008 eb02 0643 8836 f3c6 0608 4431 1c89     ....C.6.....1D..
 8020bbf:	b289 1c5b 429d dcf4 09a2 d101 1c89 b289     ..[..B..........
 8020bcf:	8802 f361 020b 8002 bd70 0000 0100 ac00     ..a.....p.......
 8020bdf:	0020 905a e92d 43f0 4684 e9dd 7808 9807      .Z.-..C.F...x..
 8020bef:	4293 d201 440b 3320 4614 f04f 0e01 17e5     .B...D 3.FO.....
 8020bff:	eb04 65d5 116d eb0c 0585 682d 4294 ea05     ...em.....-h.B..
 8020c0f:	0508 d10a f002 061f 1ba4 1b16 f1c6 0920     .............. .
 8020c1f:	fa0e f609 1e76 4035 e019 1b1e 2e1f d216     ....v.5@........
 8020c2f:	f1c6 091f fa0e f609 1e76 43b5 e00f 683e     ........v..C..>h
 8020c3f:	2e00 d017 1e76 603e fab5 f685 f1c6 091f     ....v.>`........
 8020c4f:	fa0e f909 4426 ea25 0509 f800 6b01 2d00     ....&D%......k.-
 8020c5f:	d1ed 3420 429c d805 428c d3c8 2400 1a5b     .. 4.B...B...$[.
 8020c6f:	3b20 e7c4 e8bd 83f0 e92d 41f0 1c5b fbb3      ;......-..A[...
 8020c7f:	f4f1 fb01 3414 440a 1e52 fbb2 f3f1 fb01     .....4.DR.......
 8020c8f:	2313 2200 f04f 3eff 2701 f8dd c018 e062     .#."O..>.'....b.
 8020c9f:	2500 4294 d321 f102 0620 42b4 d21d 4293     .%.B!... ..B...B
 8020caf:	d316 1e75 42ab d213 429c d207 1b1d 1c6d     ..u..B...B....m.
 8020cbf:	fa07 f505 1e6d 1aa6 40b5 e019 1ae6 1e76     ....m....@....v.
 8020ccf:	fa07 f506 1e6d 1a9e 1c76 40b5 43ed e00f     ....m...v..@.C..
 8020cdf:	1aa5 fa07 f505 1e6d e7f8 4293 d30b f102     ......m....B....
 8020cef:	061f 42b3 d207 1a9d 1c6d fa07 f505 1e6d     ...B....m.....m.
 8020cff:	fa95 f5a5 e00d 429c d203 42a2 d301 429a     .......B...B...B
 8020d0f:	d905 42a3 d205 429a d301 42a2 d901 fa9e     ...B...B...B....
 8020d1f:	f5ae ea4f 1652 eb00 0686 f8d6 8000 f1bc     ..O.R...........
 8020d2f:	0f00 d002 ea48 0805 e001 ea28 0805 1a8d     ....H.....(.....
 8020d3f:	f8c6 8000 2d20 d20d 0955 1a56 eb00 0585     .... -..U.V.....
 8020d4f:	3620 f8d5 8000 fa07 f606 1e76 ea28 0806      6........v.(...
 8020d5f:	f8c5 8000 3220 428a d39a e8bd 81f0 e92d     .... 2.B......-.
 8020d6f:	4ff0 b087 460d 4617 4604 aa05 a906 f001     .O...F.F.F......
 8020d7f:	fa11 8aa0 f894 b004 f040 5300 8ae0 4a52     ........@..S..RJ
 8020d8f:	f040 5600 2000 eb03 0180 eb06 0c80 6809     @..V. .........h
 8020d9f:	f8dc c000 ea01 010c f842 1020 1c40 2804     ........B. .@..(
 8020daf:	d3f1 2300 9300 e9dd 3205 4659 4846 f7ff     ...#.....2YFFH..
 8020dbf:	ff5b 2301 9300 e9dd 3205 4659 4630 f7ff     [..#.....2YF0F..
 8020dcf:	ff53 f04f 0a24 fb95 f2fa 8b20 78e1 2600     S.O.$..... ..x.&
 8020ddf:	f040 5000 f04f 39ff f04f 0880 2901 d001     @..PO..9O....)..
 8020def:	2902 d10e 9204 f04f 33aa aa04 e88d 000d     .)....O..3......
 8020dff:	e9dd 3205 4659 4834 f7ff feec f04f 3355     ...2YF4H....O.U3
 8020e0f:	e003 2905 d111 464b 9204 aa04 e88d 000d     ...)..KF........
 8020e1f:	e9dd 3205 4659 482c f7ff fedc 8b21 f041     ...2YF,H....!.A.
 8020e2f:	5100 1a46 fb06 f60a e022 2904 d120 aa04     .QF....."..) ...
 8020e3f:	e88d 0205 210f 9104 e9dd 3205 4659 4822     .....!.....2YF"H
 8020e4f:	f7ff fec8 f880 8000 8a60 2307 f040 5200     ........`..#@..R
 8020e5f:	8b20 f040 5000 e008 eb02 1181 7809 eb03      .@..P.......x..
 8020e6f:	0191 1a6d d404 440e 1c40 7801 2980 d1f3     ..m....D@..x.)..
 8020e7f:	f880 8000 8b22 7839 1a80 4408 7038 8b20     ....".9x...D8p .
 8020e8f:	f040 5100 7808 2880 d01a 1e40 b240 2800     @..Q.x.(..@.@..(
 8020e9f:	da02 7922 4410 b240 8aa2 f042 5200 eb02     .."y.D@...B..R..
 8020eaf:	02e0 f000 0007 f1c0 0307 7812 2001 4098     ...........x. .@
 8020ebf:	4202 d002 f884 9029 e002 7808 f884 0029     .B....)....x..).
 8020ecf:	4630 b007 e8bd 8ff0 0020 dc65 b510 485f     0F...... .e..._H
 8020edf:	2265 495d 6840 f640 3347 4798 e8bd 4010     e"]I@h@.G3.G...@
 8020eef:	2054 f7fc be25 4959 6048 7808 f7fc bf44     T ..%.YIH`.x..D.
 8020eff:	e92d 41f0 4604 b2c1 f3c0 3703 2501 4e53     -..A.F.....7.%SN
 8020f0f:	0768 4b51 360c 0c22 ea40 4014 2917 d03d     h.QK.6".@..@.)=.
 8020f1f:	dc0a 2901 d013 2910 d07b 2911 d06e 2913     ...)...){..)n..)
 8020f2f:	d132 f7ff fd5a e007 2922 d02a 293f d020     2...Z...")*.?) .
 8020f3f:	2953 d129 f7ff ffd7 2000 e8bd 81f0 4d43     S))...... ....CM
 8020f4f:	60aa 7d91 7858 f361 1007 7058 4840 f8c3     .`.}Xxa...Xp@H..
 8020f5f:	0067 f7ff fd48 f7ff fd95 f2af 018f 2018     g...H.......... 
 8020f6f:	f7fc ff00 7028 f000 f920 483a f7ff fcbe     ....(p.. .:H....
 8020f7f:	e00a 4610 f7fc fd6f f3c7 0102 f000 ffe0     ...F..o.........
 8020f8f:	e002 0b20 f8c3 0067 4620 e7d6 4610 f7fc     .. ...g. F...F..
 8020f9f:	fd62 4f2d 0004 f107 076c d013 2220 2100     b.-O....l... ".!
 8020faf:	4638 f640 334f 4798 2100 2315 fb01 f003     8F@.O3.G.!.#....
 8020fbf:	eb04 0240 7950 280f dc04 1c49 f827 2010     ..@.Py.(..I.'.. 
 8020fcf:	2906 dbf3 b672 7930 b990 78b0 b980 b662     .)..r.0y...x..b.
 8020fdf:	b114 481d 306c e000 2000 f000 f8c9 b10c     ...Hl0... ......
 8020fef:	2001 e000 2000 f887 0020 f241 004c e01b     . ... .. .A.L...
 8020fff:	2c00 d004 f04f 0001 e003 e00a e021 f04f     .,..O.......!.O.
 802100f:	0000 f887 0021 d001 f04f 0500 f887 5022     ....!...O....."P
 802101f:	e00e b97f b672 78f0 b148 b662 2000 70b0     ....r..xH.b.. .p
 802102f:	70f0 f000 fdfb 204c f7fc fd82 e784 7175     .p....L ......uq
 802103f:	b662 e781 2f02 d1f9 7077 7135 f000 ff5d     b..../..wp5q..].
 802104f:	e77a f001 f835 e777 0020 ec65 0020 945a     z...5.w. .e. .Z.
 802105f:	0700 feff 0020 7c66 4840 f04f 4180 6800     .... .f|@HO..A.h
 802106f:	f990 203e 2a00 db0a 220a f8a1 2b2a f990     ..> .*..."..*+..
 802107f:	003e 2158 f100 4080 f880 1200 4770 f990     >.X!...@....pG..
 802108f:	003f 2800 dbfa 4b36 f04f 32ff 601a f8a1     ?..(..6KO..2.`..
 802109f:	0128 200d f8a1 0b2a 4770 e92d 41f0 482f     (.. ..*.pG-..A/H
 80210af:	237d 6800 7d81 f890 203c 4359 b90a 011a     }#.h.}..< YC....
 80210bf:	e001 f44f 727a eb02 0141 0449 0c0a 4929     ..O.zr..A.I...)I
 80210cf:	4d29 f990 603e 880b 8829 f04f 4480 2e00     )M..>`..).O..D..
 80210df:	db06 0998 07c0 d03e 1888 f8a4 0b4a e03a     ......>.....J.:.
 80210ef:	f990 003f 2800 db36 f8b4 0b4a 4e1c 6834     ..?..(6...J..N4h
 80210ff:	2c00 db0b 4284 d009 1a44 3408 b2a4 fbb4     .,...B..D..4....
 802110f:	f7f2 fb02 4217 3a08 4411 8029 6030 4817     .....B.:.D).0`.H
 802111f:	7800 2801 d11f eb00 1093 f44f 717f fbb0     .x.(......O..q..
 802112f:	f2f1 fb01 0412 200a fb94 f1f0 fb00 4011     ....... .......@
 802113f:	2505 b930 f7ff fcab fbb0 f1f5 fb05 0011     .%0.............
 802114f:	7130 fb94 f0f5 fb05 4010 7931 4288 d102     0q.......@1y.B..
 802115f:	2001 e8bd 81f0 2000 e7fb 0000 0020 9c5a     . ..... .... .Z.
 802116f:	0020 a75a 0020 a267 0020 ac5a 0020 a05a      .Z. .g. .Z. .Z.
 802117f:	b510 4aff b283 8193 2102 ebc1 04c1 eb02     ...J.....!......
 802118f:	0444 1c49 81a3 2908 ddf7 2800 d00c 210a     D.I....)...(...!
 802119f:	2380 eb00 0241 8812 b11a f042 5200 f882     .#..A.....B..R..
 80211af:	3025 1c49 290f ddf4 bd10 e92d 47f0 4ef1     %0I..)....-..G.N
 80211bf:	49f1 6830 f890 003c 0100 7008 48ec 2282     .I0h..<....p.H."
 80211cf:	2100 3882 f640 374f 47b8 4ce9 3c82 7820     .!.8@.O7.G.L.< x
 80211df:	f020 00c0 b2c0 f020 000f 1c40 7020 7960      ..... ...@. p`y
 80211ef:	2004 7160 7aa0 f020 00c0 b2c0 f040 0010     . `q.z .....@...
 80211ff:	b2c0 f020 000f 1c80 72a0 7d20 f020 00c0     .. ......r } ...
 802120f:	3080 f040 0010 b2c0 f020 000f 1cc0 7520     .0@..... ..... u
 802121f:	f7fd fea2 7801 0609 d503 6830 f990 001a     .....x....0h....
 802122f:	e001 f990 0003 f7fc fc39 f814 1f1e 4dd0     ........9......M
 802123f:	f021 01c0 3180 f041 0120 b2c9 f041 0110     !....1A. ...A...
 802124f:	b2c9 f021 010f 1d09 7021 6831 f44f 7387     ..!.....!p1hO..s
 802125f:	f891 2040 7a21 f362 0102 7221 7260 48c4     ..@ !zb...!r`r.H
 802126f:	80e0 3c1e 2004 eb00 0180 f814 2011 f022     ...<. ....... ".
 802127f:	02c0 3280 f042 0210 f804 2011 f814 2011     ...2B...... ... 
 802128f:	f022 020f 1d52 f804 2011 ebc0 02c0 eb05     "...R.... ......
 802129f:	0242 3a2a eb04 0141 80ca 1c40 810b 280b     B.*:..A...@....(
 80212af:	dde1 f814 0f78 227e f020 00c0 b2c0 f020     ....x.~" ..... .
 80212bf:	000f 7020 2100 48ae 47b8 48ad f8df c2bc     .. p.!.H.G.H....
 80212cf:	308a 8068 301a 80a8 301a 8168 3840 b283     .0h..0...0h.@8..
 80212df:	81eb 308a 8228 301a 8268 2005 240d f10c     ...0(..0h.. .$..
 80212ef:	0e9c f10c 08ea ebc0 01c0 fb00 f204 eb05     ................
 80212ff:	0141 eb0c 0942 f821 3d2a f1a9 0982 f8a1     A...B.!.*=......
 802130f:	9002 eb02 090e f1a9 0941 eb08 0282 f8a1     ........A.......
 802131f:	9004 f5a2 7282 1c40 814a 280b dde3 4894     .....r@.J..(...H
 802132f:	220c 2100 307e 47b8 4891 f44f 3880 307e     .".!~0.G.HO..8~0
 802133f:	f8d8 10ac 6001 7981 251a f041 0104 b2c9     .....`.y.%A.....
 802134f:	f041 0103 7181 71c5 8084 2126 7281 2134     A....q.q..&!.r4!
 802135f:	72c1 2100 462a 300c 47b8 6830 f890 203c     .r.!*F.0.G0h..< 
 802136f:	4883 308a 7801 f362 1105 7001 f8d8 10ac     .H.0.xb....p....
 802137f:	f8c0 1002 7981 221a f021 01c0 3140 f041     .....y."!...@1A.
 802138f:	0120 7181 71c5 2100 301a 47b8 487b 6831      ..q.q.!.0.G{H1h
 802139f:	388c 7d8b 7b02 f363 1207 7302 7b8b 7c02     .8.}.{c....s.{.|
 80213af:	f363 1245 7402 7b0b 7c42 f363 0200 7442     c.E..t.{B|c...Bt
 80213bf:	7ecb 7c02 f363 02c3 7402 7b4a 7c01 f362     .~.|c....tJ{.|b.
 80213cf:	1104 7401 e8bd 87f0 486d 8800 496d 8008     ...t....mH..mI..
 80213df:	4770 e92d 47f0 f001 fac0 f8df 9198 4607     pG-..G.........F
 80213ef:	f8d9 1000 4d65 8a08 3d88 b284 07f8 f04f     ....eM...=....O.
 80213ff:	0800 d015 f891 003c 2800 4620 d102 f2a0     ......<..( F....
 802140f:	4074 e000 388c 17c1 eb00 60d1 f3c0 104f     t@...8.....`..O.
 802141f:	f805 0b01 f8d9 0000 8a40 4420 b284 e001     ........@. D....
 802142f:	f805 8b01 2602 4237 d033 f8d9 0000 f890     .....&7B3.......
 802143f:	003c 2800 4620 d102 f2a0 4074 e000 388c     <..( F....t@...8
 802144f:	17c1 eb00 60d1 f3c0 104f f805 0b01 f8d9     .....`..O.......
 802145f:	0000 8a80 4420 b284 fa96 f0a6 fab0 f080     .... D..........
 802146f:	f001 fa26 8980 f8d9 3000 f400 417c 2001     ..&......0..|A. 
 802147f:	e00c fa91 f2a1 fab2 f282 fa00 fc02 eb03     ................
 802148f:	0242 8b92 ea21 010c 4422 b294 2900 d1f0     B...!..."D...)..
 802149f:	e001 f805 8b01 0670 0e06 d1c4 f8d9 0000     ......p.........
 80214af:	7b00 2800 d08e 2001 bf00 2800 d08a f7fe     .{.(... ...(....
 80214bf:	f93c 0005 d086 4e2e 2401 4620 f001 f9f8     <......N.$ F....
 80214cf:	6800 42a8 d107 f7fe f9b7 ebc4 01c4 eb06     .h.B............
 80214df:	0141 82c8 e005 ebc4 00c4 eb06 0040 f8a0     A...........@...
 80214ef:	8016 1c64 2c07 dde8 e76c 4822 227d 6800     ..d..,..l."H}".h
 80214ff:	f890 103c 7d80 4350 b909 0111 e001 f44f     ..<..}PC......O.
 802150f:	717a eb01 0040 491f 0440 880a eb02 4010     zq..@..I@......@
 802151f:	8008 491d 4a16 f8b1 1065 1a40 f5a0 71be     ...I.J..e.@....q
 802152f:	3a82 82d1 388c 8410 4770 b5f0 4a11 4913     .:...8..pG...J.I
 802153f:	6814 4a14 3988 2004 8815 f240 4684 279c     .h.J.9. ..@..F.'
 802154f:	f5a1 7c95 780a f894 303c b913 eb06 1242     ...|.x..<0....B.
 802155f:	e001 eb07 1242 b292 442a eb00 0380 3afa     ....B...*D.....:
 802156f:	eb0c 0343 805a 1c49 1c40 280b ddea bdf0     ..C.Z.I.@..(....
 802157f:	0020 fe66 0020 9c5a 0020 407f 0020 2e68      .f. .Z. ..@ .h.
 802158f:	0040 020b 0020 ac5a 0020 ec65 4810 227d     @... .Z. .e..H}"
 802159f:	6800 f890 103c 7d80 4350 b909 0111 e001     .h..<..}PC......
 80215af:	f44f 717a eb01 0040 490a 0440 880a eb02     O.zq..@..I@.....
 80215bf:	4010 8008 4770 b500 f7ff ffe8 4805 4906     .@..pG.......H.I
 80215cf:	8800 388c 82c8 bd00 4802 8800 4770 0000     ...8.....H..pG..
 80215df:	0020 9c5a 0020 ac5a 0020 7c66 48ff 2101      .Z. .Z. .f|.H.!
 80215ef:	8800 eb01 1090 2105 fbb0 f2f1 fb01 0012     .......!........
 80215ff:	49fb 2804 da02 4408 7e00 4770 48f8 7c49     .I.(...D.~pG.HI|
 802160f:	301c 5c08 4770 e92d 5ff0 2500 4681 4688     .0.\pG-.._.%.F.F
 802161f:	462c f1c0 0706 f04f 0b01 f8df a3c4 e01d     ,F....O.........
 802162f:	eb0a 0004 7f06 eb06 0046 eb0a 0140 3140     ........F...@.@1
 802163f:	7848 788a 78c9 4310 4308 fa0b f109 1e49     Hx.x.x.C.C....I.
 802164f:	4201 d10a f7ff fa02 2100 2f00 dd00 4639     .B.......!./..9F
 802165f:	4288 da02 fa0b f006 4305 1c64 f89a 0010     .B.......Cd.....
 802166f:	42a0 dcdd 48de f89a 1011 301c 5c08 fa0b     .B...H.....0.\..
 802167f:	fb00 48dc ea25 050b f8d0 1067 4029 f1b8     ...H%.....g.)@..
 802168f:	0f01 db14 f8da 0000 0043 ea40 0280 ea43     ........C.@...C.
 802169f:	0350 431a ea42 0090 ea21 0200 f8da 000c     P..CB...!.......
 80216af:	0043 ea43 0350 4303 ea32 0003 d129 f1b8     C.C.P..C2...)...
 80216bf:	0f02 db0f f8da 0000 0043 ea40 0280 ea43     ........C.@...C.
 80216cf:	0350 431a ea42 0290 ea21 0002 f8da 200c     P..CB...!...... 
 80216df:	4390 d116 f1b8 0f03 db0b f8da 0000 0042     .C............B.
 80216ef:	ea42 0250 4302 ea21 0002 f8da 200c 4390     B.P..C!...... .C
 80216ff:	d107 f1b8 0f04 db0d f8da 200c ea31 0002     ........... 1...
 802170f:	d008 f7ff f9cb eb00 0040 eb0a 0040 3040     ........@...@.@0
 802171f:	e8bd 9ff0 2000 e7fb e92d 47f0 22b8 2100     ..... ..-..G.".!
 802172f:	48af f640 334f 4798 49af 7e88 f020 000f     .H@.O3.G.I.~ ...
 802173f:	1d80 7688 48ad 6800 6880 4605 f7ff f986     ...v.H.h.h.F....
 802174f:	4607 f8df 829c 1f00 f8df a298 f888 0010     .F..............
 802175f:	f8da 0067 f04f 0901 43c6 2400 e030 2c04     ..g.O....C.$0..,
 802176f:	4628 da15 43b0 d103 f8da 0067 4028 43c6     (F...C....g.(@.C
 802177f:	ea25 0006 f7ff f992 f8d8 1000 fa09 f200     %...............
 802178f:	4311 f8c8 1000 2107 4081 ea46 0661 e008     .C.....!.@F.a...
 802179f:	f7ff f984 f8d8 1004 fa09 f200 4311 f8c8     .............C..
 80217af:	1004 fa09 f100 438d eb08 0104 7608 f881     .......C.....v..
 80217bf:	002c eb00 0040 eb08 0040 f880 4040 1c64     ,...@...@...@@d.
 80217cf:	42bc dbcc e8bd 87f0 b510 4603 f7ff ff06     .B.........F....
 80217df:	2154 eb01 0280 4984 300c 740a 76cb e8bd     T!.....I.0.t.v..
 80217ef:	4010 f7ff b91b e92d 4ff8 f8df 91f4 f8df     .@....-..O......
 80217ff:	b1f4 f899 7016 f899 5012 eb07 0047 eb09     .....p...P..G...
 802180f:	0440 f899 6013 3440 b1f5 42ae d103 78a0     @....`@4...B...x
 802181f:	f040 0001 70a0 4630 f7ff f918 eb00 0840     @....p0F......@.
 802182f:	4628 f7ff f913 4580 db03 78e0 f040 0001     (F.....E...x@...
 802183f:	70e0 b94e 486d f89b 1000 6800 7bc0 ebb0     .pN.mH.....h.{..
 802184f:	1f11 d101 2000 e003 f899 0014 b110 1e40     ..... ........@.
 802185f:	f889 0014 f04f 0a01 f8d9 0000 4d60 fa0a     ....O.......`M..
 802186f:	f607 4206 f105 051c d04b f899 0014 2800     ...B....K......(
 802187f:	d17b 7867 f894 8002 78e0 9000 ea47 0008     {.gx.....x..G...
 802188f:	f000 001f f7ff f8e2 43f9 fa91 f1a1 fab1     .........C......
 802189f:	f181 2902 d211 ea6f 0108 fa91 f1a1 fab1     ...)..o.........
 80218af:	f181 2903 d209 9900 43c9 fa91 f1a1 fab1     ...).....C......
 80218bf:	f181 2904 d201 2803 d306 4652 2804 d200     ...)...(..RF.(..
 80218cf:	2202 4610 2104 e005 f8d9 000c 4206 d004     .".F.!.......B..
 80218df:	2103 2004 f7ff fe97 b940 f8db 0067 4206     .!. ....@...g..B
 80218ef:	d14c 2104 2000 f7ff fe8e b3f0 4601 4620     L..!. .......F F
 80218ff:	f000 f96e 200b f7ff f891 2005 f889 0014     ..n.. ..... ....
 802190f:	e03c f899 0010 f899 1011 1c49 fbb1 f2f0     <.........I.....
 802191f:	fb00 1112 b2c9 f889 1011 5d49 f8db 2067     ..........I]..g 
 802192f:	fa0a f101 4211 d0ee f899 0017 b110 1e40     .....B........@.
 802193f:	f889 0017 7860 07c0 d020 f899 0017 b9a0     ....`x.. .......
 802194f:	f7ff f8a5 f000 000f 3008 f889 0017 f8d9     .........0......
 802195f:	0004 43b0 f7ff f8a2 eb00 0140 eb09 0341     ...C......@...A.
 802196f:	f994 1000 f993 2040 e000 e007 7022 f883     ......@ ...."p..
 802197f:	1040 4449 7608 eb09 0002 7607 f7ff fe2e     @.ID.v.....v....
 802198f:	b2c0 4c16 f889 0016 8821 f44f 737f eb0a     ...L....!.O..s..
 802199f:	1291 fbb2 f6f3 fb03 2216 f362 118f 4b12     ........."b....K
 80219af:	8021 7f9a f899 6015 f042 0120 b10e f022     !......`B. ...".
 80219bf:	0120 eb00 0040 eb09 0040 7799 3040 7841      ...@...@..w@0Ax
 80219cf:	0049 7041 7881 0049 7081 78c1 0049 70c1     I.Ap.xI..p.xI..p
 80219df:	f000 ffc3 f020 0001 e00a 0000 0020 a267     .... ....... .g.
 80219ef:	0020 506a 0020 ec65 0020 7c66 0020 9c5a      .jP .e. .f| .Z.
 80219ff:	f889 0012 2100 f889 0013 4608 2214 eb09     .....!.....F."..
 8021a0f:	0300 7e1b 1c40 4419 4351 2804 dbf7 f899     ...~@..DQC.(....
 8021a1f:	0011 5d40 4408 6821 f360 0115 6021 e8bd     ..@].D!h`...!`..
 8021a2f:	8ff8 e92d 41f0 4e78 4d78 7db4 eb04 0044     ..-..AxNxM.}..D.
 8021a3f:	eb06 0240 f995 0018 3240 4975 2300 6809     ..@.....@2uI.#.h
 8021a4f:	27fe f991 1017 1a41 316e 4618 ebb7 0f41     .'....A.n1.F..A.
 8021a5f:	db04 ea4f 0c41 f1bc 0f00 dd04 4638 ebb7     ..O.A.......8F..
 8021a6f:	0f41 db00 0048 f995 1018 f995 501b 42a9     A...H........P.B
 8021a7f:	dd05 7851 f041 0101 7051 2102 e002 7d71     ..QxA...Qp.!..q}
 8021a8f:	b109 1e49 7571 4963 f240 35f9 8809 ebb5     ..I.qucI@..5....
 8021a9f:	1f91 d101 2103 7571 4d5f 68b1 f8d5 5067     .....!qu_M.h..gP
 8021aaf:	2701 4029 60b1 7915 4285 da0a 283c dd08     .')@.`.y.B..<(..
 8021abf:	7955 2d08 d203 fa07 f504 4329 60b1 7153     Uy.-......)C.`Sq
 8021acf:	e00d 7951 2920 d20a 1c49 b2c9 7151 2920     ..Qy )..I...Qq )
 8021adf:	d105 68b5 fa07 f104 438d 60b5 7110 7911     ...h.....C.`.q.y
 8021aef:	1f80 f1a1 0c01 4605 4584 dd00 1e48 2800     .......F.E..H..(
 8021aff:	dd03 462b 45ac dd00 1e4b 7113 2300 f896     ..+F.E..K..q.#..
 8021b0f:	c010 1e58 4619 f10c 0e04 e013 1875 f895     ..X..F......u...
 8021b1f:	502c 42a5 d100 460b 2800 da0a eb05 0545     ,P.B...F.(....E.
 8021b2f:	eb06 0545 f892 8004 f895 5044 45a8 d900     ..E.......DP.E..
 8021b3f:	4608 1c49 458e dce9 2800 da01 f10c 0004     .FI..E...(......
 8021b4f:	4298 dc08 e004 18f1 f811 2f2b 704a 1e5b     .B........+/Jp[.
 8021b5f:	4283 dcf8 e008 1e40 e004 18f1 312c 784a     .B....@.....,1Jx
 8021b6f:	700a 1c5b 4283 dbf8 4430 2100 f880 402c     .p[..B..0D.!..,@
 8021b7f:	460b 4608 1832 f892 402c fa07 f204 68b4     .F.F2...,@.....h
 8021b8f:	4222 d003 4311 1c5b 2b04 d002 1c40 2814     "B...C[..+..@..(
 8021b9f:	dbf0 60f1 e8bd 81f0 b510 4604 f000 fe88     ...`.......F....
 8021baf:	4a1a eb04 0184 eb02 0141 f891 3029 2101     .J......A...)0.!
 8021bbf:	4a15 40a1 2b02 d103 7cd0 4388 74d0 bd10     .J.@.+...|.C.t..
 8021bcf:	b110 7b80 280a d9fa 7c90 4388 7490 e7f3     ...{.(...|.C.t..
 8021bdf:	b530 f990 3000 f991 2000 7002 480a 700b     0....0... .p.H.p
 8021bef:	4403 1884 7e19 7e22 761a 7621 2401 6845     .D...~"~.v!v.$Eh
 8021bff:	fa04 f302 439d 408c 4325 6045 6801 43a1     .....C.@%CE`.h.C
 8021c0f:	4319 6001 bd30 0000 0020 506a 0020 7c66     .C.`0... .jP .f|
 8021c1f:	0020 9c5a 0020 a267 0020 ec65 49be 780a      .Z. .g. .e..I.x
 8021c2f:	4282 d00f 4abd 7008 7811 f360 0103 7011     .B...J.p.x`....p
 8021c3f:	4611 0409 f000 000f ea41 3000 f040 0012     .F......A..0@...
 8021c4f:	f7fb bf76 4770 e92d 41f0 f000 fe8a 4eb4     ..v.pG-..A.....N
 8021c5f:	4fb2 0005 d123 f000 fbda 2800 d060 48b1     .O..#......(`..H
 8021c6f:	8a40 f040 5400 4620 f000 fdaa 2014 f7fe     @.@..T F..... ..
 8021c7f:	fedf 7c30 f020 0080 7430 7838 7c31 0900     ..0| ...0t8x1|..
 8021c8f:	0400 09c9 ea40 3001 f040 0016 f7fb ff50     ....@..0@.....P.
 8021c9f:	7b20 07c0 d044 6820 f7fd fd1b e040 48a2      {..D. h....@..H
 8021caf:	7fc0 2810 d03c 2001 f7fe feb0 4c9f 2003     ...(<.. .....L. 
 8021cbf:	7821 f7fe fea1 f04f 0800 f884 8000 4628     !x....O.......(F
 8021ccf:	f000 fdf6 4604 4628 f000 fbd0 b128 f884     .....F(F....(...
 8021cdf:	800e 4628 f000 fbe4 e01f 2002 f7fe fe96     ..(F....... ....
 8021cef:	7ba0 1c40 b2c0 73a0 2880 d916 2015 f7fe     .{@....s.(... ..
 8021cff:	fe9f 7be0 07c0 d002 6820 f7fd fcf8 4628     ...{.... h....(F
 8021d0f:	f000 fde1 7838 7c31 0900 0400 09c9 ea40     ....8x1|......@.
 8021d1f:	3001 f040 0016 f7fb ff0b b2e8 f7ff ff3c     .0@...........<.
 8021d2f:	f000 fe27 2800 d106 f000 fcaf e8bd 41f0     ..'..(.........A
 8021d3f:	487f f7fe be0e e8bd 81f0 b510 f7ff fe71     .H............q.
 8021d4f:	f2af 00fd e8bd 4010 f7fe be03 b510 f7ff     .......@........
 8021d5f:	fe68 e8bd 4010 4876 f7fe bdfb e92d 47f0     h....@vH....-..G
 8021d6f:	4d74 f895 1021 2601 f241 004c 2400 b139     tM..!..&A.L..$9.
 8021d7f:	f885 4021 f885 6020 f7fb feda 4628 e009     ..!@.. `....(F..
 8021d8f:	f895 1022 b141 f885 4022 f885 4020 f7fb     ..".A..."@.. @..
 8021d9f:	fecf 2000 f7ff f9ec 485f 7941 4f5f b1b9     ... ...._HAy_O..
 8021daf:	7144 7084 2000 f7fc f840 2000 f7ff ff36     Dq.p. ..@.. ..6.
 8021dbf:	f7fd fcb6 7838 0901 d005 f020 00f0 7038     ....8x.... ...8p
 8021dcf:	2016 f7fb feb5 e8bd 47f0 204c f7fb beb0     . .......GL ....
 8021ddf:	7901 b1c9 7104 7086 f7ff f93e f000 fc92     .y...q.p..>.....
 8021def:	f7ff fc9a 2001 f7ff ff19 204c f7fb fea0     ..... ....L ....
 8021dff:	f2af 0097 f7fe fdad 2100 2001 f7fe fdac     .........!. ....
 8021e0f:	e8bd 47f0 f7ff bae0 2002 f7fc f80e f7ff     ...G..... ......
 8021e1f:	f944 4e49 0004 6830 d002 f990 0019 e001     D.IN..0h........
 8021e2f:	f990 0018 f7ff fcd0 f8df 80f4 f240 31fa     ............@..1
 8021e3f:	f8b8 0000 ebb1 1f90 d108 f7ff fba7 f7ff     ................
 8021e4f:	fcd2 2100 2001 f7fe fd87 e00e f241 0904     ...!. ......A...
 8021e5f:	b174 f7ff fbb0 f7ff fcc6 2102 4648 f7fe     t..........!HF..
 8021e6f:	fd7b f2af 1017 f7fe fd74 f000 f9f0 e02e     {.......t.......
 8021e7f:	6830 4c32 f890 003c f080 0101 7820 f361     0h2L..<..... xa.
 8021e8f:	1005 7020 f7ff fb31 210a 4648 f7fe fd64     .. p..1..!HF..d.
 8021e9f:	f000 fc51 f7ff fca7 f7ff fa9b f7ff fb45     ..Q...........E.
 8021eaf:	f000 fd5b 0100 f44f 5280 2100 f7fe fd5c     ..[...O..R.!..\.
 8021ebf:	f2af 1079 f7fe fd4d f000 f9c9 6830 f890     ..y...M.....0h..
 8021ecf:	103c 7820 f361 1005 7020 f000 fbbd 7838     <. xa... p....8x
 8021edf:	0900 d101 2001 e009 f895 0020 b118 f898     ..... .... .....
 8021eef:	0010 0640 d501 2002 e000 200c f7ff fe96     ..@.... ... ....
 8021eff:	e8bd 47f0 2000 f7fe bd89 4907 2000 4a07     ...G. .....I. .J
 8021f0f:	7008 7811 f360 0103 7011 4908 7008 f2af     .p.x`....p.I.p..
 8021f1f:	10b3 f7fe bd14 0000 0020 a05a 0020 ec65     ........ .Z. .e.
 8021f2f:	0020 a267 0020 fe66 0020 7c66 0020 ae5a      .g. .f. .f| .Z.
 8021f3f:	0000 4dc4 0020 5866 0020 9c5a 0020 8867     ...M .fX .Z. .g.
 8021f4f:	b570 4604 460d 2228 2100 488d f640 334f     p..F.F(".!.H@.O3
 8021f5f:	4798 488c 4b8a 6800 f890 203d 488a 7d81     .G.H.K.h..= .H.}
 8021f6f:	f362 1186 7581 761d 7c01 f365 0102 7401     b....u.v.|e....t
 8021f7f:	2000 e00d eb03 0180 7966 784a 1c40 f366     . ......fyJx@.f.
 8021f8f:	0203 704a 78e6 78ca 1da4 f366 0202 70ca     ..Jp.x.x..f....p
 8021f9f:	42a8 dbef bd70 b570 4a79 7e51 b141 1e49     .B..p.p.yJQ~A.I.
 8021faf:	7651 2000 f000 fc84 7bc0 f3c0 0042 bd70     Qv. .....{..B.p.
 8021fbf:	8b51 f060 03fe 4019 8351 b289 2301 b9f9     Q.`....@Q....#..
 8021fcf:	f244 0101 f020 0001 4301 7e10 b28c fa03     D... ....C.~....
 8021fdf:	f100 f06f 05ff eb05 2101 430c 496b 8354     ..o......!.CkIT.
 8021fef:	7809 2402 eb04 1111 4408 2105 fbb0 f4f1     .x.$.....D.!....
 8021fff:	fb01 0014 b908 2001 e000 2000 f882 0027     ....... ... ..'.
 802200f:	f892 0027 b118 2000 f882 0027 bd70 8b51     ..'.... ..'.p.Q.
 802201f:	fa91 f0a1 fab0 f080 4083 4399 8351 bd70     .........@.CQ.p.
 802202f:	b570 4c59 280f 7ba1 f360 1107 73a1 4955     p.YL.(.{`....sUI
 802203f:	6809 d238 e8df f000 0a08 0a0a 0a0a 0a0a     .h8.............
 802204f:	0f0f 0f0f 0f0f 0038 6808 e02e f000 fc30     ......8..h....0.
 802205f:	b358 6800 e029 494a 3808 eb01 0180 7848     X..h).JI.8....Hx
 802206f:	2204 f3c0 0503 4848 f640 3347 3012 4798     ."....HH@.G3.0.G
 802207f:	4846 f8b0 1003 7d60 40e9 f361 1004 2101     FH....`}.@a....!
 802208f:	7560 2d0a da00 2100 2200 4610 f7fe fbac     `u.-...!.".F....
 802209f:	8a61 f360 114f 8261 4628 f7fe fbbd 8aa1     a.`.O.a.(F......
 80220af:	f360 114f 82a1 bd70 6848 f8c4 0012 bd70     `.O...p.Hh....p.
 80220bf:	79c3 4933 2201 b13b b672 f881 2023 8803     .y3I.";.r...# ..
 80220cf:	838b 8843 83cb b662 7a03 b133 b672 f881     ..C...b..z3.r...
 80220df:	2024 7903 f881 3020 b662 7a43 b133 b672     $ .y.. 0b.Cz3.r.
 80220ef:	f881 2025 7943 f881 3021 b662 7a83 2b00     ..% Cy..!0b..z.+
 80220ff:	d005 b672 3122 710a 7980 7008 b662 4770     ..r."1.q.y.pb.pG
 802210f:	b530 4b1f 4a20 f893 0023 2100 b190 f883     0..K J..#..!....
 802211f:	1023 4c1e 8b98 f8b4 5001 f360 050b f8a4     #..L.....P`.....
 802212f:	5001 8994 f360 040b 8194 8bdc 89d0 f364     .P..`.........d.
 802213f:	000b 81d0 f893 0024 b138 f883 1024 f893     ......$.8...$...
 802214f:	4020 7c10 f364 10c7 7410 f893 0025 b150      @.|d....t..%.P.
 802215f:	4c0f f883 1025 79a0 f893 5021 f020 00c0     .L..%..y..!P ...
 802216f:	b905 3040 71a0 f893 0026 2800 d006 3322     ..@0.q..&..(.."3
 802217f:	7119 7819 7c10 f361 1086 7410 bd30 0000     .q.x.|a....t0...
 802218f:	0020 086b 0020 9c5a 0020 a267 0020 ec65      .k. .Z. .g. .e.
 802219f:	0020 8867 e92d 47f0 4681 460f 88c0 2119      .g.-..G.F.F...!
 80221af:	4348 49fd 4690 fbb1 f6f0 b672 48fb 8985     HC.I.F....r..H..
 80221bf:	f8b0 a4e0 b662 8804 f7ff fa06 f899 2003     ....b.......... 
 80221cf:	eba0 000a b280 4629 f04f 0c64 2a04 d008     ......)FO.d..*..
 80221df:	fb00 f10c fbb1 f1f6 4429 fbb1 f3f4 fb04     ........)D......
 80221ef:	1113 b28b 49ee 6809 f8b1 e010 7ec9 4470     .....I.h.....~pD
 80221ff:	b280 fb00 f00c fbb0 f0f6 4428 fbb0 f5f4     ..........(D....
 802220f:	fb04 0015 b280 3080 fbb0 f5f4 fb04 0015     .......0........
 802221f:	0980 2590 b901 2580 18e1 1b49 fb91 f3f4     ...%...%..I.....
 802222f:	fb04 1113 17cb eb01 6193 1189 2a04 d001     .........a...*..
 802223f:	2a05 d104 6038 f8c8 1000 e8bd 87f0 0080     .*..8`..........
 802224f:	6038 2003 eb00 0081 f8c8 0000 e7f5 e92d     8`. ..........-.
 802225f:	5ff0 f7ff ff55 f000 fb80 f7ff fe9c f7ff     ._..U...........
 802226f:	fedf f7fd fa79 f8df 8338 4604 f8d8 0000     ....y...8..F....
 802227f:	7b00 b180 b17c 48cb 7981 f041 0110 7181     .{..|..H.yA....q
 802228f:	48c9 8104 48c7 f7fe fc2c 7861 2206 eb02     .H...H..,.ax."..
 802229f:	0151 7001 e004 48c3 7981 f021 0110 7181     Q..p...H.y!....q
 80222af:	f8df b308 2600 f89b 0020 f8df a304 f04f     .....&.. .....O.
 80222bf:	0901 b380 f8ba 0003 f400 457c e047 fa95     ..........|EG...
 80222cf:	f0a5 fab0 f480 fa09 f704 43bd f83b 0014     ...........C;...
 80222df:	f7fb fbc1 b3d8 2300 4619 f89a e000 e00c     .......#.F......
 80222ef:	eb0a 1201 1d52 f8b2 c00c ea17 0f0c d003     ....R...........
 80222ff:	7bd1 f3c1 0342 e003 1c49 ebb1 1f1e dbef     .{..B...I.......
 802230f:	4aac ea44 1103 5591 f890 1025 1c76 297b     .JD....U..%.v.{)
 802231f:	d902 2100 e00d e01c f8d8 1000 eb01 0344     ...!..........D.
 802232f:	8b9c f891 1040 2305 2901 d000 2302 435c     ....@..#.)...#\C
 802233f:	0a21 5591 7901 8a80 1dc9 08cc 1c76 f040     !..U.y......v.@.
 802234f:	5100 1990 4622 f640 3347 4798 4426 2d00     .Q.."F@.G3.G&D.-
 802235f:	d1b5 4898 2180 4f93 5581 79b8 1c76 f040     ...H.!.O.U.yv.@.
 802236f:	0008 71b8 4638 f7fe fbca 7006 79b8 f020     ...q8F.....p.y .
 802237f:	0007 71b8 f89b 0020 b3f0 f8ba 0003 b3d8     ...q.. .........
 802238f:	498d 2000 7008 4638 f7fe fbca 4604 f8ba     .I. .p8F.....F..
 802239f:	0003 f3c0 0609 e033 4630 f7fe fb7f fa09     ......3.0F......
 80223af:	f100 438e f83b 0010 f7fb fb55 0005 d027     ...C;.....U...'.
 80223bf:	7968 f8d8 1000 eb01 0040 8b81 f5b1 7f00     hy......@.......
 80223cf:	db01 f240 11ff 4a7c 4628 f7fe fcc8 8821     ..@...|J(F....!.
 80223df:	f360 0108 8021 7969 7820 f361 1007 7020     `...!.iy xa... p
 80223ef:	78e9 b2c0 f361 0043 f804 0b02 79b8 f04f     .x..a.C......yO.
 80223ff:	5100 eb01 00f0 e000 e004 ea4f 7070 71b8     .Q........O.pp.q
 802240f:	2e00 d1c9 e8bd 5ff0 4866 f7fe bbaf b530     ......._fH....0.
 802241f:	4965 486a 8a0a 8a49 7843 f042 5200 f041     eIjH..I.CxB..RA.
 802242f:	5100 2b02 d11a 7940 0600 d517 7990 2203     .Q.+..@y.....y."
 802243f:	ebb2 1f90 d112 485a 6800 7b82 b11a 684a     ......ZH.h.{..Jh
 802244f:	6800 4282 d10a 4b5a 2000 781a e009 eb03     .h.B..ZK. .x....
 802245f:	1400 f8d4 4005 680d 42ac d101 2000 bd30     .....@.h.B... 0.
 802246f:	1c40 ebb0 1f12 dbf2 2001 bd30 4a53 eb00     @........ 0.SJ..
 802247f:	0180 3a28 eb02 0141 4a4b ebc0 00c0 eb02     ..(:..A.KJ......
 802248f:	0040 8a00 f891 1029 f040 5000 2902 d105     @.....).@..P.)..
 802249f:	7980 ebb1 1f90 d101 2001 4770 2000 4770     .y....... pG. pG
 80224af:	e92d 5ff0 4945 4606 eb00 0080 3928 eb01     -.._EI.F....(9..
 80224bf:	0a40 493d ebc6 00c6 eb01 0440 340e 8860     @.=I......@..4`.
 80224cf:	f10a 0a28 f040 5700 4630 f000 f9f1 4605     ..(.@..W0F.....F
 80224df:	4833 6800 7b40 b168 88a0 b158 79b9 0689     3H.h@{h...X..y..
 80224ef:	d508 f89a 1005 0609 d504 f040 5100 4630     ..........@..Q0F
 80224ff:	f7fd ff06 2001 bf00 b150 8920 b140 79b8     ..... ..P. .@..y
 802250f:	06c0 d505 f89a 0005 0640 d501 f7fd f9a4     ........@.......
 802251f:	79b8 0700 d403 89a8 f36f 0009 81a8 f8df     .y......o.......
 802252f:	908c f899 0020 f04f 0801 b3a0 79b8 0700     .... .O......y..
 802253f:	d557 f89a 0005 0680 d553 8960 f040 5400     W.......S.`.@..T
 802254f:	4638 f7fe fadc 7802 89a8 f36f 0009 81a8     8F.....x..o.....
 802255f:	e042 1c64 280a d244 f839 1010 b1d9 1e52     B.d..(D.9.....R.
 802256f:	89ab fa08 fc00 f3cc 0c09 ea43 030c 81ab     ..........C.....
 802257f:	f839 0010 fa08 f106 f040 5000 f890 3026     9.......@..P..&0
 802258f:	430b f880 3026 7901 8b40 1dc9 08cb f040     .C..&0.y@.....@.
 802259f:	5000 2100 e01d e024 eb0b 00c2 0040 2206     .P.!..$.....@.."
 80225af:	0020 9c5a 0020 8867 0020 fe66 0020 5866      .Z. .g. .f. .fX
 80225bf:	0020 ec65 0020 bc67 0020 ae5a 0020 a466      .e. .g. .Z. .f.
 80225cf:	f810 c001 f814 eb01 ea0c 0c0e f800 c001     ................
 80225df:	1c49 4299 dbf4 1ad2 7820 2880 d001 2a00     I..B.... x.(...*
 80225ef:	dcb7 f899 0020 2800 d02c 4638 f7fe fa98     .... ..(,.8F....
 80225ff:	2400 4682 46a3 e020 f81a 0014 0900 fa08     .$.F.F .........
 802260f:	f600 f416 4f7c d017 f839 0010 f7fb fa23     ....|O..9.....#.
 802261f:	b190 89a9 420e d002 f880 b025 e00c 4a37     .....B....%...7J
 802262f:	f8b2 3003 421e d107 4331 81a9 f8b2 1003     ...0.B..1C......
 802263f:	4331 f8a2 1003 e7ef 1c64 79b8 f3c0 0002     1C......d..y....
 802264f:	42a0 dcd9 e8bd 9ff0 e92d 41f0 4e2c f896     .B......-..A,N..
 802265f:	0020 2800 d017 2500 462f f640 384f f836      ..(...%/F@.O86.
 802266f:	0015 b168 f040 5400 7920 1dc0 08c2 8b60     ..h.@..T y....`.
 802267f:	21ff f040 5000 47c0 f814 0f26 7060 7027     .!@..P.G..&.`p'p
 802268f:	1c6d 2d09 ddeb e8bd 81f0 b5f0 4e1c f896     m..-.........N..
 802269f:	0020 2800 d031 2100 f836 0011 b330 f040      ..(1..!6...0.@.
 80226af:	5000 8ac2 f890 3028 f042 5200 b113 1e5b     .P....(0B..R..[.
 80226bf:	f880 3028 f890 3026 b1cb f890 4028 b91c     ..(0..&0....(@..
 80226cf:	f890 4027 439c d112 7903 8b40 331f 095b     ..'@.C...y@..3[.
 80226df:	f040 5400 2000 e007 eb04 0580 682d eb02     @..T. ......-h..
 80226ef:	0780 43ed 603d 1c40 4298 dbf5 e002 2203     ...C=`@..B....."
 80226ff:	f880 2028 1c49 2909 ddce bdf0 0020 ec65     ..( I..).... .e.
 802270f:	0020 5866 b570 4ca3 2260 7820 2100 f020      .fXp..L`" x.! .
 802271f:	00f0 7020 1d60 f640 354f 47a8 2208 f04f     .. p`.@.O5.G."O.
 802272f:	31ff 489d 47a8 2000 f8a4 0003 499a 2001     .1.H.G. .....I. 
 802273f:	1e89 7008 bd70 b5f0 4997 4e96 1e89 7808     ...pp....I.N...x
 802274f:	7048 4996 0842 7c48 f8df c254 f362 0047     Hp.IB.H|..T.b.G.
 802275f:	7448 2000 f8a6 0003 4603 2701 e02b eb06     Ht. .....F.'+...
 802276f:	1103 f89c 0020 1d49 b1f0 8988 f400 407c     .... .I.......|@
 802277f:	e018 fa90 f2a0 fab2 f282 fa07 f402 f83c     ..............<.
 802278f:	2012 43a0 f052 5200 d00c f892 5025 2d80     . .CR..R....%P.-
 802279f:	d208 1c6d b2ed f882 5025 2d80 d102 898a     ..m.....%P.-....
 80227af:	43a2 818a 2800 d1e4 f8b6 0003 8989 4308     .C...(.........C
 80227bf:	f8a6 0003 1c5b 7830 ebb3 1f10 dbcf bdf0     ....[.0x........
 80227cf:	b5f0 4974 6802 780b f023 030f 440b f8c3     ..tI.h.x#....D..
 80227df:	2005 780b 6842 f023 030f 440b f8c3 2009     . .xBh#....D... 
 80227ef:	780b 6882 f023 030f 440b f8c3 200d 7b02     .x.h#....D... .{
 80227ff:	f3c2 0400 780a f022 020f 440a 7d13 f364     .....x"....D.}d.
 802280f:	0300 7513 7b02 f3c2 0440 780a f022 020f     ...u.{..@..x"...
 802281f:	440a 7d13 f364 1304 7513 780b 2200 f023     .D.}d....u.x."#.
 802282f:	030f 440b f8a3 2011 780b f023 030f 440b     ...D... .x#....D
 802283f:	74da 7b00 0780 d50c 20c0 f8a1 0065 4857     .t.{..... ..e.WH
 802284f:	7d82 f042 0280 7582 4856 7802 f042 0220     .}B....uVH.xB. .
 802285f:	7002 4d51 780b 1ead 782a f023 030f f042     .pQM.x..*x#...B.
 802286f:	0001 43c0 440b fa90 f0a0 7d1c fab0 f080     ...C.D.....}....
 802287f:	f360 0443 751c 2601 fa06 f300 4313 b2db     `.C..u.&.....C..
 802288f:	702b 780a 1caf 0914 543c 703c 4c46 2008     +p.x....<T<pFL. 
 802289f:	7660 eb06 1012 f360 1207 4844 700a 6800     `v....`...DH.p.h
 80228af:	7bc0 ebb0 1f12 d802 f023 0001 7028 bdf0     .{......#...(p..
 80228bf:	4939 5608 2800 da01 2000 4770 4935 eb01     9I.V.(... pG5I..
 80228cf:	1000 1d40 4770 e92d 41f0 2201 4605 4082     ..@.pG-..A.".F.@
 80228df:	4831 4c30 1e80 7801 f04f 36ff 4391 b2c9     1H0L...xO..6.C..
 80228ef:	f041 0101 7001 7820 eb06 1110 f361 1007     A....p x....a...
 80228ff:	7020 4628 f7ff ffdc 4607 7820 f640 3347      p(F.....F x@.G3
 802290f:	f020 000f 1901 1d49 2210 4638 4798 4822      .....I.."8F.G"H
 802291f:	7bfa 5d41 f3c2 0242 5481 5546 2100 4608     .{A]..B..TFU.!.F
 802292f:	7822 e006 eb04 1300 7d1b 06db d500 1c49     "x.......}....I.
 802293f:	1c40 ebb0 1f12 dbf5 2900 d10c 2000 f8a4     @........)... ..
 802294f:	0065 4816 7d81 f021 0180 7581 4815 7801     e..H.}!....u.H.x
 802295f:	f021 0120 7001 e8bd 81f0 480f 1e80 7800     !. ..p.....H...x
 802296f:	4770 480d 1e80 7840 fa90 f0a0 fab0 f080     pG.H..@x........
 802297f:	4770 4909 1e89 7848 fa90 f2a0 fab2 f382     pG.I..Hx........
 802298f:	2201 409a 4390 7048 b2c0 2800 d000 2001     .".@.CHp...(... 
 802299f:	4770 0000 0020 ec65 0020 b15a 0020 a267     pG.. .e. .Z. .g.
 80229af:	0020 5866 0020 a266 0020 086b 0020 9c5a      .fX .f. .k. .Z.
 80229bf:	e92d 4ff8 4681 b2c1 4e77 0c00 f04f 4480     -..O.F..wN..O..D
 80229cf:	2901 d013 2700 f04f 0a03 f04f 0b04 f64f     .)...'O...O...O.
 80229df:	78ff f106 0508 2904 d05c 290c d02b 290d     .x.....)\..)+..)
 80229ef:	d115 f000 f95a 200a 71a8 e050 6030 7802     ....Z.. .qP.0`.x
 80229ff:	2107 b16a f8b4 0600 f000 0004 1c40 f8a4     .!j.........@...
 8022a0f:	0600 f884 1208 f884 1209 f8a4 1144 e0b8     ............D...
 8022a1f:	f8b4 2600 f002 0204 1c92 f8a4 2600 f884     ...&.........&..
 8022a2f:	1208 f884 1209 7840 b108 f884 1207 2006     ......@x....... 
 8022a3f:	f8a4 0144 e0a5 6831 780a b13a 2005 f8a4     ..D...1h.x:.. ..
 8022a4f:	0144 806f 2002 8028 71a8 e016 1d09 f000     D.o.. (..q......
 8022a5f:	f962 6070 6831 78ca 7889 f000 f8ac b148     b.p`1h.x.x....H.
 8022a6f:	6870 8801 8069 88c0 8028 f8a5 a004 f885     ph..i...(.......
 8022a7f:	b006 e002 200d f000 f886 f8a4 8624 f8a4     ..... ......$...
 8022a8f:	8626 8828 f8a4 0622 2001 f8a4 061a 2000     &.(...".. ..... 
 8022a9f:	e8bd 8ff8 4a40 79ab 3208 8891 f04f 0c49     ....@J.y.2..O.I.
 8022aaf:	1e48 ea4c 4202 b280 9200 2b0b d269 e8df     H.L..B.....+i...
 8022abf:	f003 6868 1306 6836 6868 4c68 0063 f8b4     ..hh..6hhhhLc...
 8022acf:	061e 2800 d05d 2019 80a8 f64f 70f7 f8a4     ...(].. ..O..p..
 8022adf:	0618 f885 a006 e054 80a8 2900 d151 f8b4     ......T....)Q...
 8022aef:	0618 0700 d419 f8b4 061e 2103 f000 f900     ...........!....
 8022aff:	8068 6831 b280 1d09 f000 f90d 6070 8869     h.1h........p`i.
 8022b0f:	b159 8802 4291 d108 f8a4 7618 f8a4 862c     Y....B.....v..,.
 8022b1f:	88c0 8028 f8a4 0622 e012 200d e029 80a8     ..(...".... )...
 8022b2f:	b151 2901 d12d f8a4 b144 f8b4 0800 f040     Q..)-...D.....@.
 8022b3f:	0001 f8a4 0800 e024 f8a4 7618 f8a4 862c     ......$....v..,.
 8022b4f:	9800 f7fa fff5 2009 e013 f8b4 061e 2104     ....... .......!
 8022b5f:	f000 f8ce 8869 4288 d10a f8b4 062c 2104     ....i..B....,..!
 8022b6f:	f000 f8c6 8869 4288 d102 f8b4 0618 b140     ....i..B......@.
 8022b7f:	2001 f000 f808 e004 f000 f8a7 b108 2000     . ............. 
 8022b8f:	e7f7 4648 e784 4904 3108 7188 210e ea41     ..HF...I.1.q.!A.
 8022b9f:	4000 f7fa bfcd 0000 0020 bc5a 2219 fbb0     .@...... .Z.."..
 8022baf:	f2f2 4962 e002 4282 d003 1c89 8808 2800     ..bI...B.......(
 8022bbf:	d1f9 8808 4770 b5f0 4603 8800 2519 460c     ....pG...F...%.F
 8022bcf:	4616 4368 f7ff ffea 2800 d065 8818 07aa     .FhC.....(e.....
 8022bdf:	f5a0 61c0 394b d10c 2060 f8a2 080a f640     ...aK9..` ....@.
 8022bef:	60bf f8a2 0808 8818 8859 4348 4368 4950     .`......Y.HChCPI
 8022bff:	e01f f240 11b9 fbb0 f7f1 fb01 0017 b960     ..@...........`.
 8022c0f:	205a f8a2 080a f241 4046 f8a2 0808 8818     Z ....A.F@......
 8022c1f:	8859 4348 4368 4947 e00b 2062 f8a2 080a     Y.HChCGI..b ....
 8022c2f:	f241 3075 f8a2 0808 8818 8859 4348 4942     A.u0......Y.HCBI
 8022c3f:	4368 fbb1 f0f0 f8a2 0804 f8b2 0804 8899     hC..............
 8022c4f:	fbb0 f0f1 f8a2 0802 8859 2001 b104 2000     ........Y.. ... 
 8022c5f:	1a09 1c60 fb91 f0f0 f8a2 0806 00f0 ea40     ..`...........@.
 8022c6f:	0044 f040 00f0 f8a2 0800 f44f 3180 f8d1     D.@.......O..1..
 8022c7f:	00ac 0e00 d009 f891 00ab 2802 d305 28ff     ...........(...(
 8022c8f:	d003 f891 01a8 0040 e000 200e f8a2 0a68     ......@.... ..h.
 8022c9f:	201f f8a2 0a66 2001 bdf0 4828 f8b0 16bc     . ..f.. ..(H....
 8022caf:	f021 0101 f8a0 16bc 2200 8002 f64f 71ff     !........"..O..q
 8022cbf:	f8a0 14e0 f8a0 14e2 f200 40d4 8042 2101     ...........@B..!
 8022ccf:	8041 f64f 71f7 8001 4770 f04f 4080 f8b0     A.O..q..pGO..@..
 8022cdf:	1618 0709 d50a 2102 f8a0 1144 2101 f8a0     .......!..D..!..
 8022cef:	1a68 2100 f8a0 161a 2001 4770 2000 4770     h..!..... pG. pG
 8022cff:	b530 4a0e 4c12 e009 fbb4 f3f3 b29b 1a5d     0..J.L........].
 8022d0f:	4285 dc02 440b 4283 da03 1c92 8813 2b00     .B...D.B.......+
 8022d1f:	d1f2 8810 bd30 4602 4608 e002 4291 d003     ....0..F.F...B..
 8022d2f:	3008 8801 2900 d1f9 4770 0000 0000 88f1     .0...)..pG......
 8022d3f:	9a08 008a 1308 0030 ca08 0000 0040 4401     ......0.....@..D
 8022d4f:	0e00 00a6 b430 4cc2 2000 79a2 f104 0112     ....0..L. .y....
 8022d5f:	2304 7909 2a01 d00f 2a02 d012 2a0c d102     .#.y.*...*...*..
 8022d6f:	4618 b901 2003 7c61 b1c9 49ba 6809 79c9     .F... a|...I.h.y
 8022d7f:	07ca d00b 2005 e012 4618 2900 d1f3 2001     ..... ...F.)... 
 8022d8f:	e7f1 4618 2900 d1ee 2002 e7ec 078a d502     ...F.)... ......
 8022d9f:	f440 60a0 e003 0749 d501 0600 0c00 2128     @..`..I.......(!
 8022daf:	bc30 ea41 4000 f7fa bec3 b570 4da8 2601     0.A..@....p..M.&
 8022dbf:	4629 7968 78c9 2400 b110 b951 4630 e005     )Fhy.x.$..Q.0F..
 8022dcf:	b139 7928 b928 7c28 b918 4620 70e8 f7fc     9.(y(.(|.. F.p..
 8022ddf:	f876 7ae8 2800 d118 7c28 2800 d115 7a28     v..z.(..(|.(..(z
 8022def:	4621 b110 7aa8 b100 2101 7928 796a 4290     !F...z...!(yjy.B
 8022dff:	d00c 712a b2d0 b108 4997 e000 2100 2017     ..*q.....I...!. 
 8022e0f:	ea40 4001 f7fa fe94 742e bd70 b111 7a68     @..@.....tp...hz
 8022e1f:	b900 2401 79e8 4284 d00b 71e9 b109 2002     ...$.y.B...q... 
 8022e2f:	e000 2000 2110 ea41 3000 f7fa fe81 72ee     ... .!A..0.....r
 8022e3f:	bd70 78a8 2800 d1fb e8bd 4070 4887 f7fa     p..x.(....p@.H..
 8022e4f:	be77 e92d 47f0 4604 f8df 9204 f8df a204     w.-..G.F........
 8022e5f:	2711 b2c0 ea4f 4c14 f109 0912 2600 4d7c     .'..O..L.....&|M
 8022e6f:	f8da 2000 f00c 01ff f3c4 3303 f04f 0801     ... .......3O...
 8022e7f:	ea47 4709 2826 d07d dc25 2812 d07b dc15     G..G&(}.%..({...
 8022e8f:	2801 d040 2803 d065 280e d10e f8c9 6007     .(@..(e..(.....`
 8022e9f:	2009 f889 8009 ebb0 4f14 d001 f04f 0800     . .......O..O...
 8022eaf:	f889 8005 4638 f7fa fe7c e0be 2816 d039     ....8F..|....(9.
 8022ebf:	2823 d1fa 6810 ea00 3014 f7fd fdc7 2806     #(...h...0.....(
 8022ecf:	db73 2001 e0b5 2845 d070 dc0f 282d d021     s.. ..E(p...-(!.
 8022edf:	283e d079 2844 d1e8 f8c9 6007 f889 8008     >(y.D(.....`....
 8022eef:	f889 1004 b1c1 f9b2 0004 e016 2849 d022     ............I(".
 8022eff:	284c d1da 2b00 d071 2b01 d072 2b02 d101     L(...+q..+r..+..
 8022f0f:	f885 8009 e08f f8ca c000 f885 8003 f885     ................
 8022f1f:	800a e08a 7469 e00b 2000 8028 4638 f7fa     ....it... (.8F..
 8022f2f:	fe40 e005 f414 4f70 d17f 802e f889 6004     @.....pO.......`
 8022f3f:	f7ff ff08 e079 f04f 5000 f8c9 6007 ea40     ....y.O..P...`@.
 8022f4f:	4014 f889 8007 8841 f8a9 1000 8800 f8a9     .@....A.........
 8022f5f:	0002 e7a7 f9b5 0000 2800 dd11 1e40 b200     .........(..@...
 8022f6f:	8028 b968 f8c9 6007 f889 8008 f889 6004     (.h....`.......`
 8022f7f:	4638 e001 e039 e036 f7fa fe13 f7ff fee2     8F..9.6.........
 8022f8f:	79a8 2802 d214 68e8 1c40 60e8 d001 68e8     .y.(...h@..`...h
 8022f9f:	e002 f04f 30ff 60e8 f8da 1000 6889 4288     ..O..0.`.....h.B
 8022faf:	d143 482f f7fa fdc4 e03f e041 e036 e00b     C./H....?.A.6...
 8022fbf:	f8da 0000 6880 b128 68e9 4281 d302 4829     .....h(..h.B..)H
 8022fcf:	f7fa fdb6 60ee e030 ebb8 4f14 d101 2001     .....`0....O... 
 8022fdf:	e000 2000 7168 e026 e000 e002 72ee 726e     ... hq&......rnr
 8022fef:	e021 742e e01f 71ab e7a2 70a9 b921 481e     !..t...q...p!..H
 8022fff:	f7fa fdd7 722e e003 7990 b108 f885 8008     .....r...y......
 802300f:	f7ff fed3 78a9 4640 2902 d900 2000 f889     .....x@F.)... ..
 802301f:	0006 f8c9 6007 f889 800a e743 7990 b920     .....`....C..y .
 802302f:	78a8 b110 7229 f7ff fec0 4620 e8bd 87f0     .x..)r.... F....
 802303f:	2000 72a8 b2c0 2800 d0f5 0b20 0300 f040     . .r...(.. ...@.
 802304f:	0022 f7fa fd75 e7ee 4801 68c0 4770 0000     "...u....H.hpG..
 802305f:	0020 306b 0020 cc5a 0020 bc5c 0400 2400      .k0 .Z. .\....$
 802306f:	0300 2c10 0500 2c10 0400 2410 faff e5f5     ...,...,...$....
 802307f:	c5d5 a5b5 8595 6575 4555 2535 0515 0000     ......ueUE5%....
 802308f:	0000 e70d 0000 ec0b 0000 4c09 0000 0000     ...........L....
 802309f:	ffff a7f8 ffff eff2 ffff c3ee ffff 46e8     ...............F
 80230af:	ffff fae0 ffff 0bdc ffff fed5 ffff 6acf     ...............j
 80230bf:	ffff 82c7 ffff 9abe ffff 97b5 ffff 7daf     ...............}
 80230cf:	ffff 9ca7 ffff 22a0 0f20 805e 1120 220e     ......." .^. .."
 80230df:	1820 8920 1820 f8b9 0020 0020 0000 0d0a      . . ... . .....
 80230ef:	0000 000d ff01 0528 183f 0100 b000 32ff     ......(.?......2
 80230ff:	28d0 7801 03b8 ff89 3800 8813 0028 f9cf     .(.x.....8..(...
 802310f:	27ff 2708 9019 2808 ff8b 684b 1028 3a15     .'.'...(..Kh(..:
 802311f:	0803 f0ff 2f00 39d0 0310 fb21 b87e 2100     ...../.9..!.~..!
 802312f:	8e18 e0b8 eaa9 1b00 0069 861b 1b08 0339     ........i.....9.
 802313f:	ff98 3f00 0302 7e80 28b8 01ff b972 3800     ...?...~.(..r..8
 802314f:	9808 df09 1108 6c18 08a8 f829 ff00 0439     .......l..)...9.
 802315f:	1428 9e15 033f 00fe 9605 0328 b33f 0664     (...?.....(.?.d.
 802316f:	90ff 9002 9003 9404 fe05 4300 6577 e006     ...........Cwe..
 802317f:	0d30 ff76 8613 b627 c627 8611 03ff 6468     0.v...'.'.....hd
 802318f:	0d06 1378 ff88 8960 a900 9208 b926 09b5     ..x...`.....&...
 802319f:	0708 0893 2623 10c9 940b 00ff 3628 90e5     ....#&......(6..
 80231af:	2805 ff60 8998 9603 0128 06e0 90ff 0c08     .(`.....(.......
 80231bf:	3c32 9012 ff15 3203 2628 989b 0928 99ff     2<.....2(&..(...
 80231cf:	0c89 3c42 9007 df25 4203 2628 109c 030f     ..B<..%..B(&....
 80231df:	bd96 0029 2827 4d44 0028 3903 28ef 4f44     ..).'(DM(..9.(DO
 80231ef:	0058 6603 6212 0efb 0052 257f 4528 a24f     X..f.b..R..%(EO.
 80231ff:	29ef ec00 0030 459f a247 28ff 438b 9169     .)..0..EG..(.Ci.
 802320f:	6643 ff28 8309 0890 8369 b87e 0ebf 2832     Cf(.....i.~...2(
 802321f:	c000 0072 b6d5 00fe 68f7 9809 6808 0029     ..r......h...h).
 802322f:	e0ff 11a8 6c28 1218 ff28 1811 2228 a8ef     ....(l..(...("..
 802323f:	8478 03fd 0900 18e1 485c 8403 90ff 09e8     x.......\H......
 802324f:	0e38 9084 ff88 8208 320d 380d 4812 08ff     8........2.8.H..
 802325f:	9082 f005 3ef4 ff0a 4591 4866 8509 1890     .....>...EfH....
 802326f:	0dff 1258 0818 0e84 ff54 046c 2890 8468     ..X.....T.l..(h.
 802327f:	426e 0eff f252 3c12 1204 ff12 15e0 fc3f     nB..R..<......?.
 802328f:	2866 7991 09bf 2789 66f9 0043 8361 09fb     f(.y...'.fC.a...
 802329f:	0053 839b da32 db32 32bf 03d1 0d47 0057     S...2.2..2..G.W.
 80232af:	1713 12ff 9117 2708 03e8 ff86 8890 3868     .......'......h8
 80232bf:	8609 0894 00fe 2813 d827 0864 0990 27ff     .......('.d....'
 80232cf:	2789 2799 65a9 bf08 30e0 21e0 8953 c300     .'.'.e...0.!S...
 80232df:	ff73 380d 8267 4990 926a 00fe 1223 8813     s..8g..Ij...#...
 80232ef:	8903 290d 6cff 0fb9 7f69 00ba ff3a 690d     ...).l..i...:..i
 80232ff:	290f 9809 ab03 26ff 5f0a 098a 26ab ff1a     .).....&._...&..
 802330f:	8a5f b927 c927 290d 0fdf 9169 0908 7d01     _.'.'..)..i....}
 802331f:	8952 32ff 00d2 65d1 9306 dff2 30e0 6803     R..2...e.....0.h
 802332f:	020d 600f af88 0000 b809 5500 022b a81f     ...`.......U+...
 802333f:	0eff 6cb8 6eb8 0e48 ff58 d100 866d 4e3e     ...l.nH.X...m.>N
 802334f:	d100 3aff 5845 0d48 0858 ff78 b80d 09f0     ...:EXH.X.x.....
 802335f:	0e53 023b 00fb 00b8 3b13 0664 8909 107a     S.;......;d...z.
 802336f:	9a63 6310 659a 6106 4500 00ff 3528 2662     c..c.e.a.E..(5b&
 802337f:	f0a8 ff08 0738 0890 6853 c100 3afb 0027     ....8...Sh...:'.
 802338f:	2503 d62f d22f 27ff 27a8 2788 2f98 ffdb     .%/./..'.'.'./..
 802339f:	ba6c ba8f da2f 1003 09fb 0020 30b9 5053     l.../..... ..0SP
 80233af:	30e0 00fc 0229 4387 5329 5319 ff34 3553     .0..)..C)S.S4.S5
 80233bf:	f826 2853 4890 27ff 53d8 5316 0023 ffd2     &.S(.H.'.S.S#...
 80233cf:	2878 a626 0491 6409 52ff 0048 00d2 0302     x(&....d.RH.....
 80233df:	fe29 4908 db2f da2f 0090 d500 0002 f885     )..I/./.........
 80233ef:	0300 00f6 833b 2d52 0938 3f13 02aa 057d     ....;.R-8..?..}.
 80233ff:	8500 0110 63ff 59b0 50bc 48c7 ffb7 7541     .....c.Y.P.H..Au
 802340f:	ec3a 0b35 bf2f 2aff 26fb 22b1 1fd4 ff5a     :.5./..*.&."..Z.
 802341f:	391c 6819 df16 9614 12ff 1088 0faf 0d04     .9.h............
 802342f:	ff85 2b0c f40a dc09 e008 07ff 07fe 0631     ...+..........1.
 802343f:	057a ffd4 3f05 b904 4004 d403 03ff 0372     z....?...@....r.
 802344f:	021a 02cb ff83 4302 0902 d501 a601 01ff     .......C........
 802345f:	017c 0156 0134 ff15 fa00 e100 ca00 b600     |.V.4...........
 802346f:	00ff 00a4 0094 0085 ff78 6c00 6100 5700     ........x..l.a.W
 802347f:	4f00 00ff 0047 0040 0039 ff34 2e00 2a00     .O..G.@.9.4....*
 802348f:	2600 2200 09fe 7edb 7dba 32b6 32dc d1ff     .&."...~.}.2.2..
 802349f:	4ae2 a464 a465 ffe0 643a 65a5 32a5 03d6     .Jd.e...:d.e.2..
 80234af:	01ff 46e0 6978 da32 df94 2807 9625 0022     ...Fxi2....(%.".
 80234bf:	c303 ff27 0078 2739 90b9 9009 8cff 1b90     ..'.x.9'........
 80234cf:	0a94 1228 7f15 2f9d 62da 63a5 01a5 ff23     ..(..../.b.c..#.
 80234df:	623a 63a4 2fa4 29d6 005f 4ae2 1792 c702     :b.c./.)_..J....
 80234ef:	0000 bf3d 9206 2815 9025 3900 dd92 0023     ..=....(%..9..#.
 80234ff:	442b 9ae0 1908 d0eb 0052 2619 0f08 3500     +D......R..&...5
 802350f:	009a 2603 f50a e20f 32aa 38d6 187b 2879     ...&.....2.8{.y(
 802351f:	0875 ff73 da32 0c90 7927 0b92 10f2 9975     u.s.2...'y....u.
 802352f:	7558 7300 2faa e1d6 baab 0091 e55d 5d10     Xu.s./......]..]
 802353f:	5091 2977 00df bae1 2ae1 1d08 26e0 2fff     .Pw).....*...&./
 802354f:	29d0 e600 2891 6b24 629f 2100 08e3 2f1d     .)...($k.b.!.../
 802355f:	09dc eea9 1314 3f01 00a9 d6ef 9803 13fb     .......?........
 802356f:	0289 c88b a964 a965 00ee ab8f ab65 0500     ....d.e.....e...
 802357f:	65ac ffac da32 9a03 6200 8903 26ff 09b6     .e..2....b...&..
 802358f:	5fb9 0896 efa6 8a03 6803 0d00 09c6 eec9     ._.......h......
 802359f:	0d00 03b6 008b 6c1b 6300 37ef 0307 00a9     .......l.c.7....
 80235af:	ac9f ac63 10ee ab9f ab63 0710 63a9 ffa9     ..c.....c....c..
 80235bf:	d62f 0200 182f 3800 03ff 0889 1348 0318     /.../..8....H...
 80235cf:	ff94 043f 1864 1865 31e0 f1bf 3e17 35e4     ..?.d.e..1...>.5
 80235df:	1057 610b 0cff 3e57 34de 08f7 bf86 1613     W..a..W>.4......
 80235ef:	b66c 0633 1f18 ff3f 6cd7 11b6 6286 6306     l.3...?..l...b.c
 80235ff:	06df 60e0 d13f 0710 3fc0 cdff 1964 1965     ...`?....?..d.e.
 802360f:	31e0 ff90 2617 51b6 1346 5186 56ff 5603     .1...&.QF..Q.V.V
 802361f:	6200 8cd0 ff39 0803 1398 5118 038a 45ff     .b..9......Q...E
 802362f:	7426 7427 4608 ff13 0066 3663 36f7 00ab     &t't.F..f.c6.6..
 802363f:	02ad 4b08 c80f 4d00 10ee 3041 3fff 7cf5     ...K...M..A0.?.|
 802364f:	28c0 7001 ffa1 c271 c87d c972 9858 7ebf     .(.p..q.}.r.X..~
 802365f:	08a3 0083 0102 ba11 70ef 71b4 13b5 dcf1     .........p.q....
 802366f:	11d0 39ff 900d 2727 9007 ff17 1128 8698     ...9..''....(...
 802367f:	7828 8894 93ff 2889 4d4c e089 ef19 0d3f     (x.....(LM....?.
 802368f:	3790 1700 9007 7f06 6428 8894 6528 1094     .7......(d..(e..
 802369f:	aa17 e900 00f9 d907 0300 0078 f80b 00fe     ..........x.....
 80236af:	c807 21d0 0738 a228 40ff d008 3818 9103     ...!8.(..@...8..
 80236bf:	be86 4900 4d4c 08a6 0076 f605 ffbf 39f5     ...ILM..v......9
 80236cf:	280a 0026 263d 93ff 0966 1368 2818 ef3f     .(&.=&..f.h..(?.
 80236df:	08e0 023f ed05 4d4c ffb8 0726 7458 3408     ..?...LM..&.Xt.4
 80236ef:	5603 587f 0876 2863 7301 4b09 1cff ba7c     .V.Xv.c(.s.K..|.
 80236ff:	0690 7627 df90 9485 7807 0548 24db ff11     ..'v.....xH..$..
 802370f:	3f88 7809 0039 0839 23ff 1900 1813 1913     .?.x9.9..#......
 802371f:	ff08 6c98 06f8 62c8 6308 04fe 677f 6a89     ...l...b.c...g.j
 802372f:	9095 0019 a8ff 786c 8668 8951 f536 0087     ......lxh.Q.6...
 802373f:	153f e919 0390 1328 156f 907b 0823 3f05     ?.....(.o.{.#..?
 802374f:	087c afef b472 0990 a500 200b 07a5 91bf     |...r...... ....
 802375f:	2858 4f4d 0018 10fb 3feb 0007 1909 0900     X(MO.....?......
 802376f:	280b 7b13 5998 0b00 2829 9488 1d08 387f     .(.{.Y..)(.....8
 802377f:	4408 0b3f 6228 0b10 28f7 6328 1318 3990     .D?.(b...((c...9
 802378f:	9458 08fe 08a1 9434 6407 6505 05f5 b704     X.....4..d.e....
 802379f:	3858 0083 0015 bf00 4588 2408 3737 8118     X8.......E.$77..
 80237af:	ff28 3f00 908e 0800 083a 3bff 7226 6103     (..?....:..;&r.a
 80237bf:	a87a ff0c 3d82 780e 0ca8 3d81 0bff 0228     z....=.x...=..(.
 80237cf:	b878 18e0 df28 f001 3c08 0006 18b7 fd90     x...(....<......
 80237df:	1110 0215 b888 8212 ff12 0981 093a 003b     ............:.;.
 80237ef:	1802 0cff ca7a cb7b 4028 5f44 0328 1287     ....z.{.(@D_(...
 80237ff:	0647 f71b 990d 11ff 9017 0619 2889 ffa2     G............(..
 802380f:	0948 8812 58f8 0238 90ef 7007 00c8 46d1     H....X8....p...F
 802381f:	f7d0 38ff 3241 70d7 ffb8 fff8 3838 ff2b     ...8A2.p....88+.
 802382f:	0e3f 10d0 38ff 7306 f0b8 3948 ef03 0890     ?....8.s..H9....
 802383f:	b88e 6f00 28b9 bf02 c871 19f0 043d 6708     ...o.(..q...=..g
 802384f:	7f81 75c8 7fb4 0ec9 0049 ff55 0419 2898     ...u....I.U....(
 802385f:	7404 03b4 49ff 7912 890c 1038 ffc7 11f4     .t...I.y..8.....
 802386f:	0478 2884 8404 b4ff 04d8 0938 0128 ff7a     x..(......8.(.z.
 802387f:	74b0 90b9 e008 1279 39df 0831 f937 4303     .t....y..91.7..C
 802388f:	d810 04ff 0739 0228 c770 ff6a 2857 9828     ....9.(.p.j.W((.
 802389f:	3fe0 e262 abf7 d72f 9908 c139 5125 03ca     .?b.../...9.%Q..
 80238af:	085f 8900 0818 006b 18a3 efd0 3848 cf04     _.....k.....H8..
 80238bf:	7d00 c881 7f32 72d7 ffb4 38f4 0008 9733     .}..2..r...8..3.
 80238cf:	3f20 0048 35a1 4b08 3b08 f737 2537 0150      ?H..5.K.;7.7%P.
 80238df:	ec29 0328 ff75 90b9 7e48 5cc3 e198 03ff     ).(.u...H~.\....
 80238ef:	8308 3978 9168 ff88 7931 9138 5e09 9f29     ..x9h...1y8..^).
 80238ff:	01ff 815e 1908 3989 ff00 3202 7edc 08cc     ..^....9...2.~..
 802390f:	788c c87d 0702 8838 2fc8 28dc fd11 0079     .x}...8../.(..y.
 802391f:	8911 78c8 13c9 ff88 8813 8908 c988 8913     ...x............
 802392f:	1367 3889 af07 5b09 c889 2918 0dfe 2889     g..8...[...)...(
 802393f:	28e8 28ec 22ea eef7 f828 0b00 28b8 28d6     .(.(."..(....(.(
 802394f:	d4ff 0820 7a23 b373 ff73 03c8 2839 e22a     .. .#zs.s...9(*.
 802395f:	7069 99ff 0128 b179 8958 ff08 1191 0813     ip..(.y.X.......
 802396f:	7830 7c08 c0f7 6800 1702 2888 4c53 08fd     0x.|...h...(SL..
 802397f:	3701 4c53 2818 9133 08fa 280d bd00 3fb8     .7SL.(3....(...?
 802398f:	3f05 fe82 0700 3fca 9f01 9ff3 faf4 0900     .?.....?........
 802399f:	0082 79d7 033f 083f 3fdf 9f07 9003 1110     ...y?.?..?......
 80239af:	8b3f 3fff 9001 9608 3307 bf08 f737 853f     ?..?.....3..7.?.
 80239bf:	c573 5101 ffb6 5803 1512 5608 1528 15ff     s..Q...X...V(...
 80239cf:	7000 d069 3918 ff04 09af 4906 033f f9a0     .pi..9.....I?...
 80239df:	066f 8039 0069 0f15 0a00 dd0b 0252 0475     o.9.i.......R.u.
 80239ef:	7899 0700 3f38 0897 9895 0f10 1806 300f     .x..8?.........0
 80239ff:	3845 08fb 0168 75c1 0998 590e 10fe 874d     E8..h..u...Y..M.
 8023a0f:	0000 9704 8780 18fe 2843 9829 9067 9024     ........C().g.$.
 8023a1f:	25df 0691 0864 af07 1360 07de 3315 3718     .%..d...`....3.7
 8023a2f:	0da6 3741 cf65 a0e5 3437 6700 cf27 1990     ..A7e...74.g'...
 8023a3f:	11bf 2779 90d9 0023 452f 90cf 9046 18a7     ..y'..#./E..F...
 8023a4f:	0331 9761 fd37 05b6 805b 0e3f 5537 77e2     1.a.7...[.?.7U.w
 8023a5f:	3701 0124 134f 0239 3700 00fa eb09 670d     .7$.O.9..7.....g
 8023a6f:	3f01 90e8 bfa9 7909 3953 4690 3318 ff0f     .?.....yS9.F.3..
 8023a7f:	5398 00e8 37d1 3fa6 e87d 2500 1b18 a428     .S...7.?}..%..(.
 8023a8f:	000e ff05 2b48 3ffe 9099 2910 fadf 604b     ....H+.?...)..K`
 8023a9f:	0090 0500 2970 fad7 5043 0300 0271 03a5     ....p)..CP..q...
 8023aaf:	a7d0 3811 00f9 082b 6017 a501 ff80 c080     ...8..+..`......
 8023abf:	2040 0400 0404 01ff 2801 902d 3f0d 00de     @ .......(-..?..
 8023acf:	1300 0118 00f0 01f0 01f0 01f0 01f0 01f0     ................
 8023adf:	f000 f001 f001 f001 f001 f001 f001 f001     ................
 8023aef:	0001 01f0 01f0 01f0 01f0 01f0 01f0 01f0     ................
 8023aff:	0138 ffff 00ff ff00 ffff ffff 0004 9800     8...............
 8023b0f:	054d 0005 9800 008b 000a 9800 003d 000c     M...........=...
 8023b1f:	9900 027b 000d 9900 029f 000e 9800 0427     ..{...........'.
 8023b2f:	0010 9700 00a5 0011 9700 00b5 0016 9900     ................
 8023b3f:	0139 0017 9900 0419 0019 9700 0157 001a     9...........W...
 8023b4f:	9700 023b 001c 9800 01cf 001d 9800 00ed     ..;.............
 8023b5f:	001e 9700 001b 001f 9700 0201 0024 9700     ............$...
 8023b6f:	01c1 0028 9700 05d3 0029 9800 000b 002a     ..(.....).....*.
 8023b7f:	9900 005d 002b 9700 016b 002c 9700 0587     ..].+...k.,.....
 8023b8f:	002e 9900 01b5 0c04 341c 684c 9880 a8a4     .........4Lh....
 8023b9f:	b0ac b8b4 bcbc ffff 0020 806d 0000 f20e     ........ .m.....
 8023baf:	0000 8012 ff01 d432 eb28 504d 6d1f 1fff     ......2.(.MP.m..
 8023bbf:	2825 9fff 03f6 ff63 017b 8028 01d0 1939     %(....c.{.(...9.
 8023bcf:	7baf 7900 0007 8019 0300 fb67 0178 0500     .{.y......g.x...
 8023bdf:	7691 2814 fffd 9045 10a0 501b 0092 1bff     .v.(..E....P....
 8023bef:	2240 3936 ce14 fffe 3018 70d0 0c39 0ea5     @"69.....0.p9...
 8023bff:	3fff 1ff9 a517 ce0e fffe 5823 fd39 0ea1     .?........#X9...
 8023c0f:	2090 28af 3f01 0032 d007 0700 ff1f 7090     . .(.?2........p
 8023c1f:	3828 4115 ff2b 71ff 2b70 72ff 1171 ff80     (8.A+..qp+.rq...
 8023c2f:	0104 0f28 f1cf 611b 12ff 2980 40fd 2804     ..(....a...).@.(
 8023c3f:	ff00 00cb 400c 0438 5091 00fa 092b 6700     .....@8..P..+..g
 8023c4f:	2b77 77ff ff75 0490 d629 654b 05d2 38df     w+.wu...).Ke...8
 8023c5f:	e002 d114 0510 85d0 08fe dc05 3905 e002     .............9..
 8023c6f:	0324 50ff 0028 70c0 0008 5f08 0340 e001     $..P(..p..._@...
 8023c7f:	00a1 a133 6108 90fb 0007 3605 0604 06f0     ..3..a.....6....
 8023c8f:	38ff 9004 2880 3f00 bfe2 eb28 9145 4690     .8...(.?..(.E..F
 8023c9f:	0500 ff62 1076 22e0 40d0 1038 9fff 90f4     ..b.v..".@8.....
 8023caf:	2d07 2d23 ff10 3406 3005 0704 b637 ffbf     .-#-...4.0..7...
 8023cbf:	38f4 f006 0007 f02f 00fa ca2f 2900 2d60     .8..../.../..)`-
 8023ccf:	2d01 cf02 8114 2104 a308 0f00 09a0 00f6     .-.....!........
 8023cdf:	45fb 0070 0589 022d 1f29 e000 0931 0021     .Ep...-.)...1.!.
 8023cef:	308f 000b d695 0b30 5203 9500 0072 120b     .0....0..R..r...
 8023cff:	ff3e 2d09 2d03 1404 0483 43ff 0128 f3cf     >..-.-.....C(...
 8023d0f:	3109 f53f 00f6 1115 9520 1f97 906c 10ff     .1?..... ...l...
 8023d1f:	f529 6049 3b28 dd15 00b6 925b 208c 0500     ).I`(;....[.. ..
 8023d2f:	7552 20bf 0028 00c1 0885 740b 00ea 136d     Ru. (......t..m.
 8023d3f:	1908 087a 830d 412d 7aeb 0037 77d9 2508     ..z...-A.z7..w.%
 8023d4f:	0090 ff75 f021 3906 9802 0400 01eb 0885     ..u.!..9........
 8023d5f:	1489 2708 0128 4a72 2920 707c 9429 2910     ...'(.rJ )|p)..)
 8023d6f:	a700 1815 d529 2073 7d29 2970 1092 2129     ....).s )}p)..)!
 8023d7f:	ea18 c500 0075 8017 b300 3e15 ef37 412d     ....u......>7.-A
 8023d8f:	422d 0f09 007e fff0 3900 3f02 0325 1212     -B..~....9.?%...
 8023d9f:	c2bf 2008 2008 1878 1d0f 28ff 7404 2802     ... . x....(.t.(
 8023daf:	c300 ff02 02f2 0438 02f3 0238 3faf 7314     ......8...8..?.s
 8023dbf:	0003 9223 0b09 fd0c 0023 0c0f 2208 7028     ..#.....#...."(p
 8023dcf:	5fe5 78c2 f022 0002 052f 1101 f17f 7200     ._.x".../......r
 8023ddf:	d03f 1003 0900 f07f 0790 7191 d332 bd09     ?..........q2...
 8023def:	2fbf 3fd3 90c6 4810 900f 20df 103f 0190     ./.?...H... ?...
 8023dff:	2901 9061 01ff 611b 0f44 ff03 dd1f 026c     .)a....aD.....l.
 8023e0f:	1161 0338 6f02 a1fc 0eff 6d1f 2521 fece     a.8..o.....m!%..
 8023e1f:	df29 43fa f084 1014 fa13 ffa1 280e 4602     )..C.........(.F
 8023e2f:	cf14 28d4 02ff 144e d42f 0200 5f00 7100     ...(..N./...._.q
 8023e3f:	711e 001e 2405 0508 00bf 2800 9d70 0061     .q...$.....(p.a.
 8023e4f:	0203 09ff 1321 2811 a03f ff01 e128 814e     ....!..(?...(.N.
 8023e5f:	3090 00f0 38ff 9131 6a01 0901 fb10 1203     .0...81..j......
 8023e6f:	bd09 0928 02a0 ff1b 9252 1b02 f842 3d07     ..(.....R...B..=
 8023e7f:	02d7 0790 e502 0832 f0cd bf32 0639 1628     ......2...2.9.(.
 8023e8f:	6192 3508 f93f 0218 08ff f273 0ea1 2218     .a.5?.....s...."
 8023e9f:	28ff d001 3802 1ffd ff5a 7231 2317 2616     .(...8..Z.1r.#.&
 8023eaf:	8137 3feb 02d7 83bd 2b28 2190 ff3f a1ef     7..?....(+.!?...
 8023ebf:	290e 43d6 0080 02fd 630b 106a 0109 d332     .).C.....cj...2.
 8023ecf:	32af 03d1 0063 0379 eb10 bad0 0900 1205     .2..c.y.........
 8023edf:	41bf 2694 c72a ff2f 00d3 9202 9002 3f53     .A.&*./.......S?
 8023eef:	03ff 0294 6390 ca29 fd4a 0062 7303 d432     .....c).J.b..s2.
 8023eff:	d532 fe03 4501 547c 1303 0090 f728 8703     2....E|T....(...
 8023f0f:	0050 8015 03f0 ff28 3800 f1a9 2883 3e00     P.....(..8...(.>
 8023f1f:	a2fd 6308 2090 0309 7528 9a3f 3287 03d3     ...c. ..(u?..2..
 8023f2f:	0863 0855 ff8f d32f ca29 7042 60f0 39fb     c.U.../.).Bp.`.9
 8023f3f:	0012 8007 30f0 0028 3dfb 038c 706b 2012     .....0(..=..kp. 
 8023f4f:	30e0 f1ff 2840 3c00 f485 ea10 1300 0082     .0..@(.<........
 8023f5f:	604f 2100 e060 ff20 030c 023d 7a3f ff2b     O`.!`. ...=.?z+.
 8023f6f:	76ef 7470 0051 9015 0028 c7bf 0cf0 3c10     .vptQ...(......<
 8023f7f:	0807 e03f 10fd 7708 5f3f 0328 5077 e1f1     ..?....w?_(.wP..
 8023f8f:	8710 2708 2108 0128 517a 03ff 1202 0832     ...'.!(.zQ....2.
 8023f9f:	7021 fd11 0203 c01b 0d72 d821 fe01 0902     !p......r.!.....
 8023faf:	8049 0340 2872 fb01 5779 3f00 0d71 0810     I.@.r(..yW.?q...
 8023fbf:	ce07 7d00 3122 0872 016b 1077 c532 01d3     ...}"1r.k.w.2...
 8023fcf:	8323 c94b b110 8700 0309 03b2 0cd3 7538     #.K...........8u
 8023fdf:	7308 10e0 7308 cd3f 0084 9015 01d8 103d     .s...s?.......=.
 8023fef:	0579 c781 7050 1840 0c7f 0821 9883 ff02     y...Pp@...!.....
 8023fff:	020e d132 3928 5515 2fff 70d1 0410 8020     ..2.(9.U./.p.. .
 802400f:	fe10 0b00 e063 2b14 3fff f666 5d28 0790     ....c..+.?f.(]..
 802401f:	732a 83f1 ff2b 3def 035a 1930 988b 8000     *s..+..=Z.0.....
 802402f:	40b7 d52f 491a ff00 b503 abfa 504b 0300     .@/..I......KP..
 802403f:	0270 6073 0300 ff71 10d0 0338 11d0 f939     p.s`..q...8...9.
 802404f:	00ef 9002 0800 001b 2902 f5df 3841 b97b     .........)..A8{.
 802405f:	4105 3809 03fd 0b00 1b28 28d8 9a01 9877     .A.8....(..(..w.
 802406f:	e81b 9702 a018 0228 fd97 0018 e837 3f28     ......(.....7.(?
 802407f:	0415 f728 9673 052c f94f 19d0 fb28 940f     ..(.s.,.O...(...
 802408f:	2d00 0d28 0994 7728 4c14 2099 0e3d 0128     .-(...(w.L. =.(.
 802409f:	0f18 00fe 5a45 aa11 0b28 0aac 28ff 9094     ....EZ..(....(..
 80240af:	9008 3f09 fe07 3500 2878 9e30 2809 ab03     ...?...5x(0..(..
 80240bf:	0a9d 2100 0088 a903 0300 ffba b875 08d1     ...!........u...
 80240cf:	0838 0890 29ff 4afa 2868 9001 ff08 481b     8....).Jh(.....H
 80240df:	181f de2f 0300 00be 882f 581b 581f 4113     ../...../..X.X.A
 80240ef:	fa59 1f08 004b 4533 2898 4ce7 e8ff 2028     Y...K.3E.(.L..( 
 80240ff:	9893 1428 f74d 9098 1888 9993 28ec bf0f     ..(.M........(..
 802410f:	f89f 681b 6c1f 3908 7f00 1f09 28f0 44e7     ...h.l.9.....(.D
 802411f:	08e8 7b21 b87b 9700 3808 9007 c100 4aff     ..!{{....8.....J
 802412f:	2878 4df9 3fab bf1e b87c 08f0 0639 1118     x(.M.?..|...9...
 802413f:	ff1f 3f17 7010 28b9 cc00 09ff 09f8 0538     ...?.p.(......8.
 802414f:	8918 ff29 e100 3f49 7902 08b9 98ff 1628     ..)...I?.y....(.
 802415f:	084e 7428 fb91 91ec 9108 9014 28c8 fd16     N.(t.........(..
 802416f:	104d 3297 21de 9017 fe08 0d00 1f08 286d     M..2.!........m(
 802417f:	4616 fb18 b889 5508 0428 2890 df1b 2148     .F.....U(..(..H!
 802418f:	1f14 0811 9023 ff78 b881 8818 b889 1421     ....#.x.......!.
 802419f:	90bb 000c f5b9 6849 7910 ef0c de32 3818     ......Ih.y..2..8
 80241af:	e101 f078 cf58 3a38 18f0 5905 1b18 4514     ..x.X.8:...Y...E
 80241bf:	a8ff 4800 0029 18e4 ff84 28b8 4414 12e9     ...H)......(.D..
 80241cf:	1129 a9ef 3818 1012 1129 0478 89fd 1300     )....8..).x.....
 80241df:	11f8 1368 2b68 ffff 0a9c a869 fa93 bd6b     ..h.h+....i...k.
 80241ef:	02a8 f835 8904 007b 38c7 02ff 898b f021     ..5...{..8....!.
 80241ff:	0f28 7f9a 1bc8 21e8 2159 0858 ebd5 884b     (......!Y!X...K.
 802420f:	9f10 0818 28a3 930d 08be 1197 0428 5d3f     .....(......(.?]
 802421f:	6748 7f77 00b9 0c49 3b89 4007 609d 1109     Hgw...I..;.@.`..
 802422f:	0b20 51f0 5108 1b02 d8cf 1b0a 00fe 2f5b      ..Q.Q........[/
 802423f:	de32 fa29 6842 e07d 5309 f068 3928 3819     2.).Bh}..Sh.(9.8
 802424f:	be6b 2d07 2929 48fd 0028 986f 3bfb 000d     k..-)).H(.o..;..
 802425f:	390d 29f0 093d b0fb 0019 3913 0228 0945     .9.)=......9(.E.
 802426f:	b0bf 2889 4d02 1909 2959 feff 6841 18d0     ...(.M..Y)..Ah..
 802427f:	0a38 dfcf 29e8 49fe 0068 7851 d7f0 3828     8....).Ih.Qx..(8
 802428f:	0105 0b29 1f08 861f 1fdb 0812 a121 0808     ..).........!...
 802429f:	3f1d 86f7 8519 0428 a109 1738 d138 2b03     .?....(...8.8..+
 80242af:	ec53 3f0d 0158 d432 7907 7b50 ba01 1702     S..?X.2..yP{....
 80242bf:	0401 20bd 171f dd06 bd9c 0594 1f37 2126     ... ........7.&!
 80242cf:	0c87 0385 64df 017b 1779 2500 2d81 7067     .....d{.y..%.-gp
 80242df:	0303 b100 9503 03cb 1506 04db 0491 3f7d     ..............}?
 80242ef:	0786 9401 9f2d 1472 0480 0820 0309 0fb3     ....-.r... .....
 80242ff:	cf7b 04f2 2209 8014 0403 6fcf f3cf 5090     {....".....o...P
 802430f:	1700 03a3 b906 4d3b 0777 0413 702d 2708     ......;Mw...-p.'
 802431f:	f506 20d8 0609 20d5 0309 0b50 08ef de00     ... ... ..P.....
 802432f:	2f08 05dc 0939 5b0f 8014 08ec 1819 0305     ./..9..[........
 802433f:	0040 9805 6003 10e2 980d 0518 070f 6d27     @....`........'m
 802434f:	7a05 9537 082d cc21 db0f 207c 0f0b 7ddb     .z7.-.!...| ...}
 802435f:	20a6 7e0b 0f33 1715 2711 1107 fe40 1107     . .~3....'..@...
 802436f:	1210 11c1 0811 ff31 1178 01f0 0339 5090     ......1.x...9..P
 802437f:	3ff3 041f 16f3 73f5 0c16 3526 0838 1611     .?.....s..&58...
 802438f:	f906 e177 f91e 0f08 03fe cfd3 32f0 00d3     ..w..........2..
 802439f:	2f72 d3d5 ef05 00da 0511 c105 153b 9757     r/..........;.W.
 80243af:	2090 6306 0051 313b 5316 06f6 21c7 1c26     . .cQ.;1.S...!&.
 80243bf:	7775 77c6 fec6 0500 77d0 16c6 1706 ff04     uw.w.....w......
 80243cf:	023f 871f 5222 0739 a5ff 320e 94d1 1b01     ?..."R9....2....
 80243df:	ff41 d12f f93f 701b 881f 006b 0002 114f     A./.?..p..k...O.
 80243ef:	1108 712d 1f00 04ff 0ea5 461f fc3f 7f1b     ..-q.......F?...
 80243ff:	1f71 1688 1716 1e14 bbc5 3037 7d06 440c     q.........70.}.D
 802440f:	00e1 f203 0cff 3c21 9103 3ff0 ff0a 0090     ......!<...?....
 802441f:	5390 1111 1011 08fe e00f 0910 3721 28a3     .S..........!7.(
 802442f:	0c7f 0145 5111 1004 a91e 0d74 0195 f087     ..E..Q....t.....
 802443f:	9b05 03d4 1164 2c8b 4781 a908 0392 9705     ....d..,.G......
 802444f:	0663 1eab dca9 a516 e905 0312 0604 13a9     c...............
 802445f:	df2d d830 3900 0531 756d ff03 0d07 0857     -.0..91.mu....W.
 802446f:	f027 3965 05ff 7570 2512 35e0 ff3f 9202     '.e9..pu.%.5?...
 802447f:	e005 0945 3d54 047f 5408 1090 233f 5302     ..E.T=...T..?#.S
 802448f:	05ff 1471 400c 0239 71a8 1a00 0941 00bd     ..q..@9..q..A...
 802449f:	4587 5003 c505 00f6 2f81 98d1 3f83 90ce     .E.P...../...?..
 80244af:	bf00 04f0 0238 2090 b11d 9f32 32d0 32d1     ....8.. ..2..2.2
 80244bf:	07d2 0067 3289 d6ff d732 fece 1819 ff19     ..g..2..2.......
 80244cf:	90e7 1b00 7410 f0b0 00f7 0128 cb07 9b7a     .....t....(...z.
 80244df:	9121 02ff 1033 f237 f521 ff1f 21e4 21e5     !...3.7.!....!.!
 80244ef:	90e3 1110 c0f5 eb04 15c0 a529 ea29 ff43     ..........).).C.
 80244ff:	d020 3980 d06d 3840 04ff 5a28 519a 033f      ..9m.@8..(Z.Q?.
 802450f:	7f28 9812 1141 0e20 0101 ffa9 11f1 2881     (...A. ........(
 802451f:	a220 1b41 a1fd 2508 0828 0290 0190 00ba      .A....%(.......
 802452f:	0a27 bd04 d002 0020 f52f 467d 2f08 46f5     '..... ./.}F./.F
 802453f:	0861 0812 ff0f c191 b21b 033f b191 1bbf     a.........?.....
 802454f:	03c2 0324 0525 029d 08ff 0925 0324 0842     ..$.%.....%.$.B.
 802455f:	ff52 1212 420c 1b38 520c 38ff 0219 2812     R....B8..R.8...(
 802456f:	9020 ef03 431b 231b 7f10 a5a4 ff0e a318      ....C.#........
 802457f:	0328 f3cf 10d0 39bf 0304 9036 0183 865b     (......9..6...[.
 802458f:	0cff 3d63 0303 3f24 efe4 2503 e23f bf00     ..c=..$?...%?...
 802459f:	11a3 6f10 0308 3288 a910 3810 d306 7fbf     ...o...2...8....
 80245af:	2834 9c7a 00a3 609f 08ff d003 3940 0806     4(z....`....@9..
 80245bf:	ff24 1211 4208 2212 033f 00f2 1205 2918     $....B."?......)
 80245cf:	4307 4bea 3f20 91f5 9d00 0071 5003 0428     .C.K ?....q..P(.
 80245df:	ffe0 0900 2801 4ef5 2871 0c5f 0190 1009     .....(.Nq(_.....
 80245ef:	0900 0050 5517 0081 6003 1b30 3081 601b     ..P..U...`0..0.`
 80245ff:	1700 70fd 1f08 1203 0208 1213 090f 0920     ...p.......... .
 802460f:	0021 0015 0011 0023 bf4d a000 1011 00e0     !.....#.M.......
 802461f:	350a d603 3700 6046 0f40 0002 730f ff03     .5...7F`@....s..
 802462f:	5134 2823 e002 1303 a3ff 2308 2411 4309     4Q#(.......#.$.C
 802463f:	ff0c 3b13 0302 1113 2863 7c67 03c0 6d00     ...;....c(g|...m
 802464f:	3301 734e 2700 8355 2700 2013 1327 2710     .3Ns.'U..'. '..'
 802465f:	0023 a527 5023 8327 6509 2101 00f1 6207     #.'.#P'..e.!...b
 802466f:	00f2 f207 5f08 0300 0484 0413 24f5 c701     ....._.......$..
 802467f:	0033 4403 b38b f78c 90b4 0003 c309 a31b     3..D............
 802468f:	ff1f 1fe4 1fe5 d1e3 3907 02c7 f51f 7903     .........9.....y
 802469f:	e901 0f02 3f20 07b7 b07b 0b00 7c30 0508     .... ?..{...0|..
 80246af:	bf40 e71b d72f d62f 430a ff2f 2fd3 2fd2     @..././..C/.././
 80246bf:	2fd1 1bd0 183d cf3d 0128 5e3f 097d 1765     ./..=.=.(.?^}.e.
 80246cf:	d7fd b307 1b48 1fd8 91e0 48fd 550f 1c21     ....H......H.U!.
 80246df:	f11f 0f28 98ff 1b58 28e8 7101 ffb8 d928     ..(...X..(.q..(.
 80246ef:	08a0 1428 384e 09fe 21e3 28e8 46fa 2889     ..(.N8...!.(.F.(
 80246ff:	01ff ba70 a703 7f28 dd98 014c 7ab7 8aa1     ..p...(...L..z..
 802470f:	6927 2815 02f7 0aa0 7308 1811 1813 08ef     'i.(.....s......
 802471f:	9089 1728 0077 77c0 f0ff 3837 9704 9087     ..(.w..w..78....
 802472f:	ff48 123f 8797 0892 0f3f 1fef 9013 16e8     H.?.....?.......
 802473f:	fd53 6745 90fb 0048 b94d 09d2 0238 91bb     S.Eg..H.M...8...
 802474f:	1008 145b 874c 8d00 fb57 17d0 1d00 3847     ..[.L...W.....G8
 802475f:	1102 3f47 f028 07c0 7804 e900 8500 4dff     ..G?(....x.....M
 802476f:	1b19 288a 987b e3cc 1c1f f300 1706 7712     ...({..........w
 802477f:	9089 700c 431e 931f af26 cb0e 1f13 2712     ...p.C..&......'
 802478f:	77b7 2112 2683 f1d7 5818 9300 38df 38f0     .w.!.&...X...8.8
 802479f:	053d 2519 063f e0e7 8138 3500 3111 3f00     =..%?...8..5.1.?
 80247af:	ffc7 851f 0990 8a2d 9a04 1bff 1f7a 2888     ......-.....z..(
 80247bf:	e001 ff09 1028 09f0 f83c 8521 04ee 7f61     ....(...<.!...a.
 80247cf:	0d94 0300 1b40 ff30 0090 0b03 0c03 f01b     ....@.0.........
 80247df:	28ff 153d 28f0 9f1f dbf0 e01b 2101 911b     .(=..(.......!..
 80247ef:	8f01 404e 28ef 9260 0040 80a9 f093 00fe     ..N@.(`.@.......
 80247ff:	200d 0928 6096 1428 4faf 9100 0090 1005     . (..`(..O......
 802480f:	1908 e74e 28b0 007f 0031 9009 1b10 10f7     ..N..(..1.......
 802481f:	fa29 8d03 a028 2800 e1f7 904c 0b00 1130     )...(..(..L...0.
 802482f:	2840 a057 20a0 0d00 01a0 485f 5f08 a5ff     @(W.. ...._H._..
 802483f:	ce0e 28fe 45f9 faa4 2b04 02fb f903 a04d     ...(.E...+....M.
 802484f:	0ea1 71ff f041 3911 700b fe41 d70b 1108     ...qA..9.pA.....
 802485f:	7c28 61eb 7f78 0311 0040 8171 0740 770d     (|.ax...@.q.@..w
 802486f:	e041 0711 410d f221 1d11 ddff 101f e03f     A....A!.......?.
 802487f:	0000 fd7e 18ba 7501 6dba 7e80 bfba d81f     ..~....u.m.~....
 802488f:	f521 b876 f100 ff38 8903 a8f7 073d 1c90     !.v...8.....=...
 802489f:	e0ff e038 2b19 91fd af2a 083f 0c90 bd04     ..8..+..*.?.....
 80248af:	0038 1903 28af 9e02 00ea 5c23 0b03 faf9     8....(....#\....
 80248bf:	0700 0048 2903 fa28 8a4e 1beb 00d9 1adf     ..H..)(.N.......
 80248cf:	4f01 1bd8 ffe8 f51f b877 08f0 0238 3fbb     .O......w...8..?
 80248df:	0109 1477 984e 7310 9fd9 4897 0f3f 1a7c     ..w.N..s...H?.|.
 80248ef:	0215 46c9 9867 0828 4312 1d20 8891 650a     ...Fg.(..C ....e
 80248ff:	288f 957d 098c 2a9d 0085 a827 08f6 8a23     .(}....*..'...#.
 802490f:	3ab8 70bd d1b8 7308 0639 ad08 6501 1bf8     .:.p...s9....e..
 802491f:	02e8 7f19 1b28 90d8 030b 21bc ffd7 1810     ....(......!....
 802492f:	280b 4cff 90cb 18f7 b881 5b10 70de 03b8     .(.L.......[.p..
 802493f:	89fd 1501 f0f9 3c69 9104 00be 3f15 d220     ......i<.....? .
 802494f:	3808 db01 7f41 f06c 390c 9104 0008 ff11     .8..A.l..9......
 802495f:	0817 2899 ef7d 78a9 9cff 08dc 0b38 f31f     ...(}..x....8...
 802496f:	ff79 18b8 e089 0949 3e89 02ff 0138 1628     y.....I..>..8.(.
 802497f:	084e ff3f 280b 9084 1b08 1848 881f b889     N.?..(....H.....
 802498f:	053f 0508 8908 6f08 7eff 7894 7c58 7ec4     ?......o.~.xX|.~
 802499f:	ff12 d27a ce72 947e 8918 08bb 0089 292f     ..z.r.~......./)
 80249af:	0200 5d00 fe38 3d03 28f0 4602 a018 ff28     ...]8..=.(.F..(.
 80249bf:	0228 184e 0128 989a 00fe faad e843 7e28     (.N.(.......C.(~
 80249cf:	6c94 0876 76ed 00b8 f895 6811 df02 b8fd     .lv..v.....h....
 80249df:	4b08 0328 0898 581b 90bf 1b28 1f48 2011     .K(....X..(.H.. 
 80249ef:	17cb 1fff 21f2 f0f3 380c bf08 0890 6c00     .....!...8.....l
 80249ff:	de32 0900 bf03 1890 6c00 d879 6107 feff     2........ly..a..
 8024a0f:	2100 28d7 440a f067 ff07 fd39 d779 27e0     .!.(.Dg...9.y..'
 8024a1f:	d789 05fe 773b 0a28 674c d72f 007b 3902     ....;w(.Lg/.{..9
 8024a2f:	2b31 3fff 1066 fb2f 7400 5409 0019 0919     1+.?f./..t.T....
 8024a3f:	7d3f 2109 9061 0020 0a02 0cec f0d8 f001     ?}.!a. .........
 8024a4f:	f001 0001 0002 22a5 7f2b 3ffa 2b76 3ffe     ......."+..?v+.?
 8024a5f:	0032 5503 0023 520b 1300 00a4 a203 0b00     2..U#..R........
 8024a6f:	f955 0300 00d5 9c0b 0300 0074 5503 0098     U.........t..U..
 8024a7f:	7803 0300 007e 9203 2f00 3cff 0302 0a06     .x..~..../.<....
 8024a8f:	130e 3f18 211d 2926 2e2c 0000 71f0 f030     ...?.!&),....q0.
 8024a9f:	f001 3001 f801 ff00 0005 4b06 e406 8007     ...0.......K....
 8024aaf:	0000 ffff ffff ffff ffff ffff ffff ffff     ................
 8024abf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024acf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024adf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024aef:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024aff:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024b0f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024b1f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024b2f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024b3f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024b4f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024b5f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024b6f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024b7f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024b8f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024b9f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024baf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024bbf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024bcf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024bdf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024bef:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024bff:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024c0f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024c1f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024c2f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024c3f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024c4f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024c5f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024c6f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024c7f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024c8f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024c9f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024caf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024cbf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024ccf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024cdf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024cef:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024cff:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024d0f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024d1f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024d2f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024d3f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024d4f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024d5f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024d6f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024d7f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024d8f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024d9f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024daf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024dbf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024dcf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024ddf:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024def:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024dff:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024e0f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024e1f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024e2f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024e3f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024e4f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024e5f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024e6f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024e7f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024e8f:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8024e9f:	0000 c585 1700 0100 0010 0100 0004 0200     ................
 8024eaf:	0002 0001 0001 0001 0001 0000 0000 8700     ................
 8024ebf:	00c5 001a 0000 0000 ff00 0200 0001 ffff     ................
 8024ecf:	00ff ffff 0001 0100 ffff 0001 0001 8a00     ................
 8024edf:	007d ff26 0000 0000 fb00 00f0 0000 0000     }.&.............
	...
 8024eff:	fb00 00e8 0000 0000 0000 8d00 006b 001e     ............k...
	...
 8024f1f:	0600 0003 0000 0000 0010 0010 0000 9400     ................
 8024f2f:	00a3 0006 0000 0600 00e4 9a00 00a9 ab11     ................
 8024f3f:	efcd ab01 efcd 0402 0000 05ff 7c58 009c     ............X|..
 8024f4f:	0000 d7a2 0a00 8264 0405 00ff 00ff 00ff     ......d.........
 8024f5f:	0000 75a4 0200 0101 0000 89a6 2000 0000     ...u......... ..
	...
 8024f7f:	2000 0101 2000 0202 2000 0303 2000 0000     . ... ... ... ..
 8024f8f:	eba7 1600 f9ff 80f4 f9ff 80fc 0100 a086     ................
 8024f9f:	0000 0000 0000 ffff ff00 0000 b5a9 0000     ................
 8024faf:	0000 5daa 0100 0001 ad00 007f 00a0 0000     ...]............
 8024fbf:	0000 ff00 0000 0000 0000 ff00 0000 0000     ................
 8024fcf:	0000 ff00 0500 0000 0000 fe00 fe70 006f     ............p.o.
 8024fdf:	0101 0101 0002 0000 0000 ff00 0000 0000     ................
 8024fef:	0000 ff00 0000 0000 0000 ff00 0500 0008     ................
 8024fff:	0000 fc00 fc08 0007 0a01 0101 0000 0000     ................
 802500f:	0000 ff00 0000 0000 0000 ff00 0000 0000     ................
 802501f:	0000 ff00 0500 0010 0000 fc00 fc08 0007     ................
 802502f:	0101 0101 0003 0000 0000 ff00 0000 0000     ................
 802503f:	0000 ff00 0000 0000 0000 ff00 0500 0018     ................
 802504f:	0000 fc00 fc08 0007 0a01 0101 0001 b500     ................
 802505f:	00e1 ab41 efcd ab01 efcd 0002 ff07 01fe     ..A.............
 802506f:	0001 1004 0280 0220 09e0 ca0b 05e3 0100     ...... .........
 802507f:	01f8 00f8 0000 0000 0000 0000 0000 0000     ................
	...
 802509f:	ff00 0106 0000 a1d0 2400 0001 0100 0005     .........$......
 80250af:	4000 0400 0004 4b06 4000 0400 0004 e406     .@.....K.@......
 80250bf:	4000 0400 0004 0000 0000 0000 0000 0000     .@..............
 80250cf:	33d5 0c00 0700 feff feff 0000 0000 0000     .3..............
	...
 8025507:	0100 0405 0000 0000 0100 8405 0000 0000     ................
 8025517:	0000 80f5 387b 1c7a ffff ffff ffff ffff     ....{8z.........
 8025527:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025537:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025547:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025557:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025567:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025577:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025587:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025597:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80255a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80255b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80255c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80255d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80255e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80255f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025607:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025617:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025627:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025637:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025647:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025657:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025667:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025677:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025687:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025697:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80256a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80256b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80256c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80256d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80256e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80256f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025707:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025717:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025727:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025737:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025747:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025757:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025767:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025777:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025787:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025797:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80257a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80257b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80257c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80257d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80257e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80257f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025807:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025817:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025827:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025837:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025847:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025857:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025867:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025877:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025887:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025897:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80258a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80258b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80258c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80258d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80258e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80258f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025907:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8025917:	ffff ffff ffff ffff 0525 0df0 0000 a180     ........%.......
 8025927:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 8025937:	0000 9985 0000 fc7b 0525 0214 0000 0000     ......{.%.......
 8025947:	0000 0000 0000 9985 0000 9385 0000 0000     ................
 8025957:	0000 d584 0000 4185 0000 9985 0000 9985     .......A........
 8025967:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 8025977:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 8025987:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 8025997:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 80259a7:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 80259b7:	0000 9985 0000 9985 f44f 40c0 f2c2 0000     ........O..@....
 80259c7:	4685 f000 b801 ffff f44f 5278 2100 f04f     .F......O.xR.!O.
 80259d7:	2020 f640 344f 47a0 f44f 5200 2100 484f       @.O4.GO..R.!OH
 80259e7:	47a0 484f 8801 f421 71a1 8001 211b f8a0     .GOH..!..q...!..
 80259f7:	19be f000 f987 484b 6800 f000 f8f8 2002     ......KH.h..... 
 8025a07:	f000 f89a f000 fa1a f000 f912 b570 2302     ............p..#
 8025a17:	2200 105b 2b01 d103 f811 3b01 f443 7380     ."[..+.....;C..s
 8025a27:	07dc 780c d004 1c49 f800 4b01 1c52 e7f0     ...x..I....KR...
 8025a37:	1c49 2cf8 da11 f811 5b01 f004 0607 ea45     I..,.....[....E.
 8025a47:	2506 43ed 2603 eb06 04e4 e003 5d46 f800     .%.C.&......F]..
 8025a57:	6b01 1c52 1e64 d2f9 e7db 4610 bd70 2800     .kR.d......Fp..(
 8025a67:	d009 0b41 d008 2901 d003 2902 d001 2903     ..A....)...)...)
 8025a77:	d101 f100 5000 4770 f100 4080 4770 0741     .....PpG...@pGA.
 8025a87:	0ec9 08c0 4240 eb01 1040 4927 4408 4770     ....@B..@.'I.DpG
 8025a97:	0741 08c0 0ec9 4240 eb01 1040 4922 3180     A.....@B..@."I.1
 8025aa7:	4408 4770 b570 f44f 3580 f8d5 20ac 0e11     .DpGp.O..5... ..
 8025ab7:	d032 f895 10ab 29ff d02e 2902 d32c f44f     2......)...),.O.
 8025ac7:	717a 4348 30c8 4c19 4b19 2100 f853 6021     zqHC.0.L.K.!S.!`
 8025ad7:	4296 d809 eb03 0681 6876 4296 d304 4c14     .B......vh.B...L
 8025ae7:	f8d5 6130 3c48 1b80 1c89 2904 d3ee 2511     ..0aH<.....)...%
 8025af7:	4b10 2100 eb04 0281 6812 f502 62af 429a     .K.!.....h...b.B
 8025b07:	dd03 4282 dc01 4613 460d 1c49 2912 d3f1     ...B...F.FI..)..
 8025b17:	4807 385c 5d40 bd70 20f5 bd70 0020 0060     .H\8@]p.. p. .`.
 8025b27:	0040 4201 0000 f8fb 0042 6044 0100 5801     @..B....B.D`...X
 8025b37:	0000 b8d7 ffff d08a b510 4601 2000 b672     ...........F. r.
 8025b47:	060a d512 4a6b 7913 7954 1b1b f003 031f     ....kJ.yTy......
 8025b57:	2b1c d21f 7910 4b68 eb03 0380 1c40 7110     .+...yhK....@..q
 8025b67:	6019 7910 f000 001f e012 4a62 1f92 7913     .`.y......bJ...y
 8025b77:	7954 1b1b f003 033f 2b3c d20b 7910 4b5f     Ty....?.<+...y_K
 8025b87:	eb03 0380 1c40 7110 6019 7910 f000 003f     ....@..q.`.y..?.
 8025b97:	7110 2001 b662 bf40 bd10 4856 1f80 7901     .q. b.@...VH...y
 8025ba7:	7940 1a08 f000 003f 4770 b672 0601 d50a     @y....?.pGr.....
 8025bb7:	4950 794a 1e52 714a 794a f002 021f 714a     PIJyR.JqJy....Jq
 8025bc7:	7949 4a4d e00a 494b 1f89 794a 1e52 714a     IyMJ..KI..JyR.Jq
 8025bd7:	794a f002 023f 714a 7949 4a48 f842 0021     Jy..?.JqIyHJB.!.
 8025be7:	b662 4770 4943 1fc9 7008 bf40 4770 e92d     b.pGCI...p@.pG-.
 8025bf7:	41f0 4d41 4604 483f 3580 2600 1f80 7106     .AAM.F?H.5.&...q
 8025c07:	7146 6006 1d80 7106 7146 6006 1fc0 7006     Fq.`...qFq.`...p
 8025c17:	4f3b e007 f845 1b04 eb07 4004 4788 88a0     ;O..E......@.G..
 8025c27:	1da4 4404 6821 2900 d1f4 602e e8bd 81f0     ...D!h.)...`....
 8025c37:	4e30 2500 1fb6 1db7 6830 b990 2000 b672     0N.%....0h... r.
 8025c47:	7971 7932 4291 d00a 7970 492c eb01 0180     qy2y.B..py,I....
 8025c57:	1c40 7170 6808 7971 f001 013f 7171 b662     @.pq.hqy..?.qqb.
 8025c67:	6030 6838 b990 2000 b672 7979 793a 4291     0`8h... r.yy:y.B
 8025c77:	d00a 7978 4920 eb01 0180 1c40 7178 6808     ..xy I....@.xq.h
 8025c87:	7979 f001 011f 7179 b662 6038 f8d6 8000     yy....yqb.8`....
 8025c97:	f1b8 0f00 d011 4c18 3480 e005 6830 4788     .......L.4..0h.G
 8025ca7:	6030 4540 d104 1d24 6821 2900 d1f6 e002     0`@E..$.!h.)....
 8025cb7:	6820 2800 d1c0 6035 e7be 480e 1fc0 7800      h.(..5`...H...x
 8025cc7:	b9b0 f8d7 8000 f1b8 0f00 d011 4c0a 3480     .............L.4
 8025cd7:	e005 6838 4788 6038 4540 d104 1d24 6821     ..8h.G8`@E..$.!h
 8025ce7:	2900 d1f6 e002 6820 2800 d1a5 603d e7a3     .).... h.(..=`..
 8025cf7:	bf20 e7a1 0020 f359 0020 0061 0020 0060      ... .Y. .a. .`.
 8025d07:	0600 0100 b510 22a0 496b 486c f640 3347     ......."kIlH@.G3
 8025d17:	4798 486a f04f 21e0 f8c1 0d08 4868 f8c1     .GjHO..!....hH..
 8025d27:	0d0c 2000 22b0 1843 f883 2400 1c40 2818     ... ."C....$@..(
 8025d37:	dbf9 2080 f881 0d23 20d0 f881 0d22 2240     ... ..#.. ..".@"
 8025d47:	2100 4860 f640 334f 4798 485f 2100 6041     .!`H@.O3.G_H.!A`
 8025d57:	21ff 7001 bd10 4a59 eb02 0080 6401 4770     .!.p..YJ.....dpG
 8025d67:	495a 6808 174a f8c1 2080 4770 4b55 f833     ZI.hJ.... pGUK3.
 8025d77:	2010 b912 f823 1010 4770 1e40 d2f7 4770     . ..#...pG@...pG
 8025d87:	b672 2101 4081 4850 6842 4311 6041 4950     r..!.@PHBh.CA`PI
 8025d97:	f04f 5080 6008 b662 4770 b672 4a4a 6851     O..P.`b.pGr.JJQh
 8025da7:	4301 6051 494a f04f 5080 6008 b662 4770     .CQ`JIO..P.`b.pG
 8025db7:	4b44 4602 f833 0010 f823 1012 4770 4842     DK.F3...#...pGBH
 8025dc7:	f990 0000 4770 2101 4081 4842 6001 4770     ....pG.!.@BH.`pG
 8025dd7:	f04f 22e0 4410 f880 1400 4770 b672 4a37     O..".D....pGr.7J
 8025de7:	eb02 0280 6c10 6411 b662 4770 b570 4d35     .....l.db.pGp.5M
 8025df7:	4c35 2601 e017 6860 fab0 f080 f1c0 001f     5L.&..`h........
 8025e07:	7020 b672 7820 fa06 f100 6860 4388 6060      pr. x....`h.C``
 8025e17:	b662 f994 0000 f835 0010 b120 f994 0000     b.....5... .....
 8025e27:	f835 0010 4780 6860 2800 d1e4 20ff 7020     5....G`h.(...  p
 8025e37:	bd70 b672 4924 8048 b662 4770 f64b 317f     p.r.$IH.b.pGK..1
 8025e47:	f04f 20e0 6141 2107 6101 481f 2105 60c1     O.. Aa.!.a.H.!.`
 8025e57:	2100 6081 8041 4770 b510 2004 f7ff fe6c     .!.`A.pG... ..l.
 8025e67:	4c19 68e0 1e40 60e0 d11e 2005 60e0 8860     .L.h@..`... .``.
 8025e77:	b140 8860 1e40 0400 0c00 8060 d102 f240     @.`.@.....`...@.
 8025e87:	105f 4780 68a0 1c40 60a0 68a0 68a1 0900     _..G.h@..`.h.h..
 8025e97:	0400 f001 010f ea40 3001 1cc0 f7ff fe4c     ......@..0....L.
 8025ea7:	490d f04f 7080 6008 bd10 f240 105f 4700     .IO..p.`..@._..G
 8025eb7:	f240 105f 4700 0000 0000 0080 0020 005c     @._..G...... .\.
 8025ec7:	fa05 0005 0020 d05a 0020 fc59 00e0 00e1     .... .Z. .Y.....
 8025ed7:	00e0 04ed 00e0 00e2 0040 0805 e92d 5ff0     ........@...-.._
 8025ee7:	4605 b2c2 4f79 f8df 81e8 0c00 f640 3a47     .F..yO......@.G:
 8025ef7:	2a01 d008 2a1c d07e 2a3c d043 2a3d d13f     .*...*~.<*C.=*?.
 8025f07:	203e e8bd 9ff0 4604 4872 6078 7da0 b110     > .....FrHx`.}..
 8025f17:	2080 f000 f8d1 220b 4621 486d 47d0 2000     . ....."!FmH.G. 
 8025f27:	f888 000b f898 000a f898 1009 2603 4348     .............&HC
 8025f37:	f898 2008 0180 4631 07d2 d100 2102 4348     ... ..1F.....!HC
 8025f47:	f000 f8ba f8a8 000c 4861 220b f104 010b     ........aH."....
 8025f57:	300e 47d0 4c5e 340e 7aa0 7a61 4348 7a21     .0.G^L.4.zazHC!z
 8025f67:	0180 07c9 d100 2602 4370 f000 f8a5 81a0     .......&pC......
 8025f77:	20c3 f000 f8a1 4955 1f09 8008 6878 6038     . ....UI....xh8`
 8025f87:	4628 e7be f7ff fd6b 4681 6838 6078 4850     (F....k..F8hx`PH
 8025f97:	22fc 2100 301c f640 384f 47c0 4f4c 2500     .".!.0@.O8.GLO.%
 8025fa7:	371c f04f 0b15 eb05 0045 fb05 f60b eb09     .7O.....E.......
 8025fb7:	0140 eb07 0446 2206 4620 47d0 f817 0016     @...F.." F.G....
 8025fc7:	78a1 4008 28ff d06a 78e0 2801 d05c 2802     .x.@.(j..x.(\..(
 8025fd7:	d05a 2804 d05b 2805 d115 7920 0140 f000     Z..([..(.. y@...
 8025fe7:	f86b 8260 f817 0016 28ff d003 2030 f000     k.`......(..0 ..
 8025ff7:	f863 81a0 e000 e057 78a0 28ff d003 2026     c.....W..x.(..& 
 8026007:	f000 f85a 81e0 7920 1dc0 08c0 f000 f854     ..Z... y......T.
 8026017:	82a0 7920 1dc0 08c2 8aa0 2100 f040 5000     .. y.......!@..P
 8026027:	47c0 7920 1dc0 08c0 f000 f846 82e0 7920     .G y......F... y
 8026037:	1dc0 08c2 8ae0 2100 f040 5000 47c0 7920     .......!@..P.G y
 8026047:	1dc0 08c0 f000 f838 8360 7920 1dc0 08c2     ......8.`. y....
 8026057:	8b60 2100 f040 5000 47c0 2010 f000 f82c     `..!@..P.G. ..,.
 8026067:	8320 b280 2210 f040 5000 2180 47c0 f64f      ...."@..P.!.GO.
 8026077:	70ff 8120 f817 0016 28ff f814 0f24 f020     .p ......(..$. .
 8026087:	0030 d00a 3010 e009 7920 0140 e001 7920     0....0.. y@... y
 8026097:	0180 f000 f811 8260 e7b5 3020 7020 1c6d     ......`... 0 pm.
 80260a7:	2d06 db80 480c e72c 2001 0c29 d000 2000     .-...H,.. ).... 
 80260b7:	f888 000b 2000 e724 4a04 4603 6851 1cdb     ..... $..J.FQh..
 80260c7:	b288 f023 0303 4419 6051 4770 0020 105a     ..#....DQ`pG .Z.
 80260d7:	0020 a05c 0020 002d 0100 3e00 b510 4604      .\. .-....>...F
 80260e7:	b2c0 490c 2801 d012 2802 d10e 6808 f100     ...I.(...(...h..
 80260f7:	010e 7a00 0409 f000 000f f040 0008 ea41     ...z......@...A.
 8026107:	3000 f040 003f f7ff fd17 4620 bd10 0c20     .0@.?..... F.. .
 8026117:	6008 e7fa 0020 185a e92d 4ff8 4dea 4feb     .`.. .Z.-..O.M.O
 8026127:	f895 0028 f8df a3a8 eb00 0140 48e7 f04f     ..(.......@..HO.
 8026137:	0b00 6802 f895 0029 eb02 04c1 3420 1d3f     ...h..)..... 4?.
 8026147:	f107 0808 fa1f f688 b120 2801 d05f 2802     ........ ..(_..(
 8026157:	d15b e07d 7968 79a9 4288 d101 2807 d202     [.}.hy.y.B...(..
 8026167:	f8a5 b026 e005 280f d203 8ce8 f420 607c     ..&....(.... .|`
 8026177:	84e8 f8b5 9026 8853 e020 88a0 fa90 f1a0     ....&.S. .......
 8026187:	fab1 f181 eb05 0141 f9b1 100c f511 6f80     ......A........o
 8026197:	d102 f44f 4180 e001 f44f 5140 ea19 0f00     ..O..A..O.@Q....
 80261a7:	d001 4208 d10e f10c 0c01 f00c 00ff f885     ...B............
 80261b7:	0028 eb00 0040 eb02 04c0 3420 f895 c028     (...@..... 4..(.
 80261c7:	459c d3da f895 0028 46a9 4298 d104 e8bd     .E....(..F.B....
 80261d7:	4ff8 2063 f7ff bcb0 48bc 6822 1d00 2180     .Oc .....H"h...!
 80261e7:	ea41 4000 9000 b10a f7ff fca6 6960 b110     A..@........`i..
 80261f7:	9800 f7ff fca1 9800 f7ff fc9e 2001 f889     ............. ..
 8026207:	0029 6820 b118 e9c7 a000 e8bd 8ff8 68e0     ). h...........h
 8026217:	e9c8 0b00 2002 f885 0029 6960 b1c0 48aa     ..... ..).`i...H
 8026227:	7ae1 380c 7001 79a1 0909 7041 8046 7ae1     .z.8.p.y..ApF..z
 8026237:	f041 0101 7101 79a1 f3c1 0103 7141 79a1     A....q.y....Aq.y
 8026247:	eb08 1111 80c1 f8c0 b008 e9c7 a000 e7dc     ................
 8026257:	f8df c274 7ae0 f1ac 0c0c f88c 0000 79a0     ..t..z.........y
 8026267:	f3c0 0103 eb01 1010 f88c 0001 f8ac 6002     ...............`
 8026277:	f8cc b004 79a0 6961 eb08 1010 6803 400b     .....yai.....h.@
 8026287:	6003 6921 430b 6003 7921 0689 d51e 88a1     .`!i.C.`!y......
 8026297:	79e2 fa91 f1a1 fab1 f181 eb05 0141 f9b1     .y..........A...
 80262a7:	100c f3c2 1641 f1c6 0603 4131 0616 d500     ....A.....1A....
 80262b7:	4249 f9b4 6008 4431 7aa6 2401 40b4 1e64     IB...`1D.z.$.@d.
 80262c7:	400c f3c2 0104 408c 431c 6004 e9c7 ac00     .@.....@.C.`....
 80262d7:	3528 f885 b001 7828 1c40 7028 e795 e92d     (5....(x@.(p..-.
 80262e7:	41f0 4c79 b2c3 71a0 7961 4299 d106 e8bd     .AyL...qay.B....
 80262f7:	41f0 2018 ea40 4001 f7ff bc1e 79e0 2800     .A. @..@.....y.(
 8026307:	d146 4872 4e73 f100 0214 4d73 4f73 6800     F.rHsN....sMsO.h
 8026317:	2903 d020 dc07 b161 2901 d139 b95b 69c0     .) ...a..)9.[..i
 8026327:	6050 486f e02a 2907 d01f 290f d130 6900     P`oH*..)...)0..i
 8026337:	e018 6840 e012 8841 8ca3 eb01 0141 eb00     ..@h..A.....A...
 8026347:	00c1 3020 e002 4299 d003 1d80 8881 2900     .. 0...B.......)
 8026357:	d1f9 6800 e00c 2b03 d203 6980 e9c2 6000     ...h...+...i...`
 8026367:	e00d 6880 e9c2 7000 e009 2b07 d203 6940     ...h...p...+..@i
 8026377:	e9c2 5000 e003 68c0 6050 485a 6010 4853     ...P...hP`ZH.`SH
 8026387:	2180 3014 ea41 4000 f7ff fbd6 2001 71e0     .!.0A..@..... .q
 8026397:	e8bd 81f0 b570 4604 b2c1 f3c0 3203 4d4a     ....p..F.....2JM
 80263a7:	0c00 291a d02c dc0b 4e48 2901 d013 2904     ...),...HN.)...)
 80263b7:	d041 2919 d15b f414 4f70 d02b 484a bd70     A..)[...pO+.JHp.
 80263c7:	291b d022 293f d014 2964 d150 06c8 ea40     .)".?)..d)P...@.
 80263d7:	4014 60a8 e025 6030 f990 0000 2800 db04     .@.`%.0`.....(..
 80263e7:	2102 f100 4080 f880 1200 2001 f885 002a     .!...@..... ..*.
 80263f7:	e03d f3c2 0102 7129 f7ff fb31 6028 e036     =.....)q..1.(`6.
 8026407:	84a8 4610 f7ff ff6b e031 f000 f832 f7ff     ...F..k.1...2...
 8026417:	fe83 e02c b2c0 2818 d005 281b d101 f7ff     ..,....(...(....
 8026427:	fe7b 2000 bd70 2000 71e8 0e20 7168 79a8     {.. p.. .q .hq.y
 8026437:	f7ff ff55 e7f5 6830 f990 0000 2800 db16     ..U...0h.....(..
 8026447:	f7ff fb26 7800 b100 2001 6831 7849 4288     ..&..x... 1hIx.B
 8026457:	d101 2001 e000 2000 f895 102a 4281 d006     ... ... ..*..B..
 8026467:	f885 002a 211c ea41 4000 f7ff fb65 4620     ..*..!A..@..e. F
 8026477:	bd70 b5f0 2700 4d14 4639 84ef 2601 e01c     p....'.M9F...&..
 8026487:	682a eb01 0341 eb02 0243 7954 fa06 f304     *h..A...C.Ty....
 8026497:	4203 d011 7813 2bff d101 7893 1d9b 8cea     .B...x.+...x....
 80264a7:	fa06 fc03 ea42 020c 84ea 68aa eb05 0343     ....B......h..C.
 80264b7:	eb02 0244 8812 819a 1c49 792a 428a dcdf     ..D.....I.*y.B..
 80264c7:	f885 7028 bdf0 0000 0020 1c5b 0020 1c5a     ..(p.... .[. .Z.
 80264d7:	1b00 1900 1801 1900 1803 1900 1807 1900     ................
 80264e7:	1800 1900 180f 1900 0100 0500 48ff 7a01     .............H.z
 80264f7:	2900 d012 2100 7201 6802 6841 6001 6042     .)...!.r.hAh.`B`
 8026507:	f1a0 0324 8199 3312 8199 7a41 7391 6840     ..$....3..Az.s@h
 8026517:	2152 ea41 4000 f7ff bb0f 4770 4bf3 b510     R!A..@....pG.K..
 8026527:	3b24 8898 4af2 f44f 61c0 f040 5000 6011     $;...JO..a@..P.`
 8026537:	4619 f04f 4280 f8a2 1902 8984 317e 7a88     .FO..B......~1.z
 8026547:	895b fb00 4303 f8a2 3610 1c40 b2c0 4ae9     [....C...6@....J
 8026557:	7288 7a92 4290 d101 2000 7288 2001 7308     .r.z.B... .r. .s
 8026567:	bd10 b510 f7ff ffc2 48e0 2100 305a 7301     .........H.!Z0.s
 8026577:	7b40 f04f 24e0 b138 201d f7ff fadd f44f     @{O..$8.. ....O.
 8026587:	5040 f8c4 0180 bd10 f44f 60c0 f8c4 0100     @P......O..`....
 8026597:	bd10 49d6 b510 3924 7888 4ad6 1c40 b2c0     ...I..$9.x.J@...
 80265a7:	7088 7a93 2200 4298 d100 708a 78c8 4bcf     .p.z.".B...p.x.K
 80265b7:	1c40 b2c0 70c8 335a 7a5b 4298 d100 70ca     @....pZ3[z.B...p
 80265c7:	f7ff ffcf bd10 4bc9 b510 3b12 8898 4ac8     .......K...;...J
 80265d7:	f44f 61c0 f040 5000 6011 4619 f04f 4280     O..a@..P.`.FO..B
 80265e7:	f8a2 1902 8984 316c 7ac8 895b fb00 4303     ......l1.z[....C
 80265f7:	f8a2 3614 1c40 b2c0 4abf 72c8 7a92 4290     ...6@....J.r.z.B
 8026607:	d101 2000 72c8 2001 7308 bd10 49b7 b510     ... .r. .s...I..
 8026617:	3912 7888 4ab8 1c40 b2c0 7088 7a93 2200     .9.x.J@....p.z."
 8026627:	4298 d100 708a 78c8 4bb0 1c40 b2c0 70c8     .B...p.x.K@....p
 8026637:	335a 7a5b 4298 d100 70ca f7ff ff92 bd10     Z3[z.B...p......
 8026647:	b5f0 4aaa 2100 325a 7bd4 2615 4bab 4608     ...J.!Z2.{.&.K.F
 8026657:	2701 fb00 f206 f813 e012 fa07 f50e 4225     .'............%B
 8026667:	d008 eb03 0242 7952 fa07 fc02 ea4c 0c01     ....B.Ry....L...
 8026677:	fa1f f18c 1c40 2806 dbeb 489c 3824 81c1     ....@..(...H$8..
 8026687:	bdf0 e92d 5ff0 4605 f8df b260 b2c0 f3c5     ..-.._.F..`.....
 8026697:	3303 ea4f 4a15 f640 344f f04f 0901 f04f     .3O..J@.O4O...O.
 80266a7:	0800 f10b 075a 281d d07e dc13 4e94 2801     ....Z..(~....N.(
 80266b7:	d023 2803 d079 2809 d07f 280a d177 b672     #..(y..(...(w.r.
 80266c7:	0740 f8a0 8602 7b38 2800 d071 f887 900d     @.....8{.(q.....
 80266d7:	b662 e22f 2829 d06c 282e d06b 2851 d1ed     b./.)(l..(k.Q(..
 80266e7:	2228 f8db 0004 2100 47a0 f88b 9008 7a38     (".....!.G....8z
 80266f7:	2800 d1ee f7ff fefa e21c 4881 f640 416c     .(.........H@.lA
 8026707:	1d00 f8c6 a000 8001 f243 01c4 8041 f24d     ........C...A.M.
 8026717:	016e 8081 497b 487c f7ff f978 f04f 2020     n...{I|H..x.O.  
 8026727:	2204 6841 1d00 f640 3347 4798 4c77 f8a4     ."Ah..@.G3.GwL..
 8026737:	8300 f2af 2117 2009 f7ff fb0d f2af 1179     .....!. ......y.
 8026747:	200a f7ff fb08 f2af 11b5 200c f7ff fb03     . ......... ....
 8026757:	f2af 1147 200d f7ff fafe 8820 6832 8ad1     ..G.. .... .2h..
 8026767:	4308 8020 8b10 80e0 8b50 80a0 f5a4 64c0     .C .....P......d
 8026777:	2000 eb02 0140 7c4b b13b 4b65 7c0e 541e     . ..@.K|;.eK.|.T
 8026787:	7c49 eb04 0340 f8a3 1608 1c40 2802 ddf0     I|..@.....@..(..
 8026797:	4856 300a f8cb 0000 f100 0128 f8cb 1004     VH.0......(.....
 80267a7:	3956 8188 3112 e006 e172 e1c6 e005 e23c     V9...1..r.....<.
 80267b7:	e168 e18a e18e 8188 e241 484c 2101 3824     h.......A.LH.!$8
 80267c7:	7001 f8df c130 4a53 f89c 1008 f89c e009     .p..0.SJ........
 80267d7:	ea4f 79c1 4949 2503 8812 b289 f1b9 0f00     O..yII.%........
 80267e7:	d101 f04f 0502 fb0e fe05 f00e 05ff f880     ..O.............
 80267f7:	e001 ea4f 1585 8145 4d3e 8085 80c1 8102     ..O...E.>M......
 8026807:	d002 f04f 0507 e000 2500 4838 f8df e0e8     ..O......%8H....
 8026817:	3824 7405 3012 f880 8000 f89e c009 f89e     $8.t.0..........
 8026827:	e008 2503 ea5f 7ece d100 2502 fb0c fc05     ...%_..~...%....
 8026837:	f00c 05ff f880 c001 01ad 8145 4d2e 8085     ..........E..M..
 8026847:	80c1 8102 f8a0 800e 6831 4e2c 7f49 4319     ........1h,NI..C
 8026857:	7401 78f2 2101 2a04 d002 2a05 d000 2104     .t.x.!.*...*...!
 8026867:	7932 4822 fbb2 f2f1 4920 3812 315a 724a     2y"H.... I.8Z1Jr
 8026877:	2104 7441 3012 f880 8009 f04f 0900 2515     .!At.0....O....%
 8026887:	fb09 fb05 eb06 074b f8a7 a006 78f8 2804     ......K......x.(
 8026897:	d07e 2805 d115 481a 1d00 8178 f816 001b     ~..(...H..x.....
 80268a7:	28ff d005 89b8 2230 f040 5000 2100 47a0     .(....0"@..P.!.G
 80268b7:	78b8 28ff d005 89f8 2226 f040 5000 2100     .x.(....&"@..P.!
 80268c7:	47a0 f816 001b 28ff d105 7878 28ff d102     .G.....(..xx.(..
 80268d7:	78b8 28ff d003 4905 7a48 1c40 7248 f887     .x.(...IHz@.Hr..
 80268e7:	901d f897 0024 f040 00c0 e015 0020 6c5b     ....$.@..... .[l
 80268f7:	00e0 80e1 0020 a05c 0020 ae5c 0020 bc5c     .... .\. .\. .\.
 8026907:	0020 385a 0000 d5d7 0020 0020 0040 0006      .Z8.... . .@...
 8026917:	0040 0a02 0020 0c5a f887 0024 201f 8438     @... .Z...$.. 8.
 8026927:	f109 0901 8478 f1b9 0f06 dba9 f7ff fe88     ....x...........
 8026937:	4ac8 49c9 8993 81cb f8df c320 f8bc 000c     .J.I...... .....
 8026947:	8248 273f 800f f8df a318 f8ba 700a 443b     H.?'.........p;D
 8026957:	81cb f10a 0912 f8b9 300a 18c7 824f 7a92     .........0..O..z
 8026967:	2102 fbb1 f7f2 fb02 1217 f109 076c 72ba     .!..........l..r
 8026977:	f88a 8002 f89c 200a f040 5000 fbb1 fcf2     ....... @..P....
 8026987:	fb02 111c 72f9 435a f889 8002 2100 e000     .....rZC.....!..
 8026997:	e003 47a0 f04f 0b00 e025 88f8 21c8 4ab1     ...GO...%....!.J
 80269a7:	4341 fbb2 f1f1 292d d900 212d 72b9 f8a7     AC....-)..-!.r..
 80269b7:	800c f887 800b f8a7 800e f5b0 6fa0 d008     .............o..
 80269c7:	f5a0 60c0 384b d007 2899 d108 f44f 70b8     ...`K8...(..O..p
 80269d7:	e007 f24c 0070 e004 f24d 0070 e001 f44f     ..L.p...M.p...O.
 80269e7:	705c 8238 e76d 49a0 fb0b f005 eb01 0640     \p8.m..I......@.
 80269f7:	f886 801c 8ab0 b130 7931 f040 5000 1dc9     ......0.1y@..P..
 8026a07:	08ca 2100 47a0 8af0 b130 7931 f040 5000     ...!.G..0.1y@..P
 8026a17:	1dc9 08ca 2100 47a0 f10b 0b01 f1bb 0f06     .....!.G........
 8026a27:	dbe1 f887 800d 4991 f44f 5058 f8c1 01fc     .......IO.XP....
 8026a37:	67c8 b672 4888 3020 8981 8802 f021 013f     .gr..H 0....!.?.
 8026a47:	31ff fbb1 f3f2 fb02 1113 8041 8081 8841     .1........A...A.
 8026a57:	8802 1c49 fbb1 f3f2 fb02 1113 0989 f88a     ..I.............
 8026a67:	1003 8881 8800 3181 fbb1 f2f0 fb00 1012     .......1........
 8026a77:	0980 f889 0003 b662 2002 7238 487c f7ff     ......b.. 8r|H..
 8026a87:	f85b e057 4979 f44f 5058 31fc 6008 b662     [.W.yIO.XP.1.`b.
 8026a97:	2500 4e75 f04f 0915 fb05 f009 f816 1010     .%uNO...........
 8026aa7:	29ff d009 eb06 0040 7901 8a80 1dc9 08ca     .)....@..y......
 8026ab7:	f040 5000 2100 47a0 1c6d 2d06 dbec f887     @..P.!.Gm..-....
 8026ac7:	8008 200b f7ff f838 e614 4865 3012 f880     ... ..8...eH.0..
 8026ad7:	a011 e02f 0e2e f00a 05ff 2000 fa09 f400     ../........ ....
 8026ae7:	4234 d022 fa03 f200 b2e1 b2d2 b95d 183c     4B".........].<.
 8026af7:	f884 8010 7bbc 438c 4314 73bc 7bfc 438c     .....{.C.C.s.{.C
 8026b07:	4314 73fc e011 7bfc 400c 4294 d103 183c     .C.s...{.@.B..<.
 8026b17:	f884 8010 e005 7bbc 400c 4294 d005 183c     .......{.@.B..<.
 8026b27:	7425 7bbc 438c 4314 73bc 1c40 2806 dbd5     %t.{.C.C.s@..(..
 8026b37:	f7ff fd86 2000 e8bd 9ff0 7bfb 2000 1839     ..... .....{. 9.
 8026b47:	7c0a b162 1e52 f012 02ff 740a d107 7bfa     .|b.R......t...{
 8026b57:	fa09 f100 7bbc 438a 400c 4322 73fa 1c40     .....{.C.@"C.s@.
 8026b67:	2806 dbec 7bf8 4298 d001 f7ff fd69 2101     .(...{.B....i..!
 8026b77:	7a38 460c f04f 3bff 2802 d122 f8df e0e8     8z.FO..;.(".....
 8026b87:	2000 f04f 0a15 fb00 f30a eb0e 0243 f892     . O.........C...
 8026b97:	c002 f1bc 0fff d006 8c12 464b 2a1e d800     ..........KF.*..
 8026ba7:	2300 4019 e009 f81e 3013 2bff d005 8c12     .#.@.....0.+....
 8026bb7:	464b 2a1e d800 2300 401c 1c40 2806 dbe2     KF.*...#.@@..(..
 8026bc7:	b1b1 6878 1c40 6078 d101 f8c7 b004 6831     ..xh@.x`......1h
 8026bd7:	6878 684a 4290 d104 204d f7fe ffad 2021     xhJh.B..M ....! 
 8026be7:	e003 68c9 4288 d10e 4822 f7fe ffa5 e00a     ...h.B.."H......
 8026bf7:	6830 68c0 b128 6879 4281 d302 481e f7fe     0h.h(.yh.B...H..
 8026c07:	ff9b f8c7 8004 b1c4 6838 1c40 6038 d101     ........8h@.8`..
 8026c17:	f8c7 b000 6831 6838 680a 4290 d106 204d     ....1h8h.h.B..M 
 8026c27:	f7fe ff8a 2021 f7fe ff87 e008 6889 4288     ....! .......h.B
 8026c37:	d105 480b f880 9011 e001 f8c7 8000 4628     ...H..........(F
 8026c47:	e779 4907 0002 f101 017e 6808 d100 6848     y..I....~..h..Hh
 8026c57:	4770 0000 0020 a05c 0040 0206 0020 ae5c     pG.. .\.@... .\.
 8026c67:	0020 485b e200 0090 0020 bc5c 00e0 84e0      .[H.... .\.....
 8026c77:	0200 0b00 0400 2c30 0500 2c30 e92d 41f0     ......0,..0,-..A
 8026c87:	4daf 6928 2800 d16f 7e28 2700 b130 762f     .M(i.(o.(~.'0./v
 8026c97:	6868 68a9 4008 f000 7080 6068 7ee8 2401     hh.h.@...ph`.~.$
 8026ca7:	b140 7f28 b930 78e8 b920 772c f243 004c     @.(.0..x .,wC.L.
 8026cb7:	f7fe ff42 6828 6869 4288 d001 6868 e00a     ..B.(hih.B..hh..
 8026cc7:	68a8 4281 d106 2800 d175 e8bd 41f0 489d     .h.B...(u....A.H
 8026cd7:	f7fe bf32 6068 4e9c 6030 7ee8 b908 8aa8     ..2.h`.N0`.~....
 8026ce7:	b900 70f7 7828 07c1 d100 70f7 0780 d501     ...p(x.....p....
 8026cf7:	79e8 70f0 78e8 7831 b918 0789 d503 7034     .y.p.x1x......4p
 8026d07:	e001 07c9 d0fb 78a9 b911 7eaa b102 70b7     .......x...~...p
 8026d17:	78f2 b11a 7e6b b10b 8aeb b90b 70b7 e001     .x..k~.......p..
 8026d27:	78b3 b903 7077 f8d6 3001 f8d5 7001 0a1b     .x..wp...0...p..
 8026d37:	ebb3 2f17 d919 b12a b920 8aa8 210c ea41     .../..*. ....!A.
 8026d47:	4000 e026 78b0 b130 b929 487d 3022 213c     .@&..x0.).}H"0<!
 8026d57:	ea41 4000 e016 7870 b1f0 7868 b9e0 8aa8     A..@..px..hx....
 8026d67:	2109 ea41 4000 e005 e025 7873 b933 786b     .!A..@..%.sx3.kx
 8026d77:	b123 200a f7fe fee0 746c e00d 78b3 b92b     #.. ....lt...x+.
 8026d87:	b121 203d f7fe fed8 74ac e005 b922 b118     !.= .....t.."...
 8026d97:	200d f7fe fed1 74ec 7830 7829 4288 d00a     . .....t0x)x.B..
 8026da7:	8aa9 f000 000f 0409 ea41 3000 f040 001a     ........A..0@...
 8026db7:	f7fe fec2 742c e8bd 81f0 b570 4605 b2c1     ....,t....p..F..
 8026dc7:	0c00 2600 4c5e 2201 b2c3 2926 d03a dc0a     ...&^L."..&):...
 8026dd7:	2901 d01a 290b d06e 290e d053 2918 d14f     .)...)n..)S..)O.
 8026de7:	7023 7426 e04a 293e d05c 293f d013 2948     #p&tJ.>)\.?)..H)
 8026df7:	d01b 2949 d144 0748 ea40 4015 8841 82a1     ..I)D.H.@..@A...
 8026e07:	8800 82e0 f000 f862 e038 6801 60e1 8880     ......b.8..h.`..
 8026e17:	82a0 76a2 e034 f3c5 3103 f3c1 0102 7761     ...v4....1....aw
 8026e27:	f7fe fe1d f8c4 001e e02a 76e3 b113 7622     ........*..v.."v
 8026e37:	7726 e003 f243 004c f7fe fe7e f7ff ff1e     &w..C.L...~.....
 8026e47:	2000 bd70 2806 d20d e8df f000 0a0c 080a     . p..(..........
 8026e57:	0305 483e e000 483e 60a0 e00b 483d e7fb     ..>H..>H.`..=H..
 8026e67:	68e0 e7f9 6820 b908 6920 b110 483a f7fe     .h.. h.. i..:H..
 8026e77:	fe9c 60a6 6860 68a1 4008 6060 f7ff fefe     ...``h.h.@``....
 8026e87:	4628 bd70 0c28 d009 2801 d009 2809 d002     (Fp.(....(...(..
 8026e97:	280d d1f3 7622 70e2 74e6 e7ef 70e6 e7fb     .(.."v.p.t...p..
 8026ea7:	7622 e7eb ebb2 4f15 d101 2001 e000 2000     "v.....O... ... 
 8026eb7:	70a0 74a6 e7e2 2002 ebb0 4f15 d000 2200     .p.t... ...O..."
 8026ec7:	7062 7466 e7da 491e 7688 e6d7 e92d 41f0     bpft...I.v..-..A
 8026ed7:	2400 4e1b f640 3747 e01e f8d6 101e eb04     .$.N@.G7........
 8026ee7:	0044 eb01 0140 eb06 0540 f105 0022 2206     D...@...@...".."
 8026ef7:	47b8 f895 0025 2801 d00a 2802 d008 2804     .G..%..(...(...(
 8026f07:	d001 2805 d107 8af0 0980 f885 0026 e002     ...(........&...
 8026f17:	8af0 0900 e7f9 1c64 7f70 42a0 dcdd 7f74     ......d.p..B..t.
 8026f27:	e008 eb04 0044 eb06 0040 3022 2206 490b     ....D...@."0.".I
 8026f37:	47b8 1c64 2c06 dbf4 2001 7670 e73b 0000     .Gd..,... pv;...
 8026f47:	0020 d461 0100 2400 0020 425a 010f 0101      .a....$ .ZB....
 8026f57:	0107 0101 0103 0101 0100 2410 0000 e2e1     ...........$....
 8026f67:	48ff 4770 b672 4aff 80d1 8010 49fe 1450     .HpGr..J.....IP.
 8026f77:	8088 b662 4770 b672 4afa 80d1 8010 49fa     ..b.pGr..J.....I
 8026f87:	1410 8088 b662 4770 b672 2000 49f5 8008     ....b.pGr.. .I..
 8026f97:	80c8 49f5 8088 b662 4770 b672 2112 48f1     ...I..b.pGr..!.H
 8026fa7:	3008 80c1 49f0 3112 8001 20ff 3912 8008     .0...I.1... .9..
 8026fb7:	b662 4770 b510 4cec 7ae0 7b21 0240 ea40     b.pG...L.z!{@.@.
 8026fc7:	2001 79a1 4308 49e7 1e89 8008 48e7 6800     . .y.C.I.....H.h
 8026fd7:	f990 0008 2800 db0a f7fe fd51 79a2 79e3     .....(....Q..y.y
 8026fe7:	2101 421a d000 2100 7a22 4051 7001 bd10     .!.B...!"zQ@.p..
 8026ff7:	b510 b672 4adc 7991 4301 7191 f7ff ffda     ..r..J.y.C.q....
 8027007:	b662 bd10 b510 b672 4ad7 7991 4381 7191     b.....r..J.y.C.q
 8027017:	f7ff ffd0 b662 bd10 b510 460c 21b0 4620     ....b......F.! F
 8027027:	f240 126d 4790 2118 4620 f7ff ff9b 2001     @.m..G.! F..... 
 8027037:	bd10 4608 b500 49ce 6809 6001 49cb 6809     ...F...I.h.`.I.h
 8027047:	680a 6042 6849 6081 210c f7ff ff8b 2001     .hB`Ih.`.!..... 
 8027057:	bd00 b510 b672 7801 f3c1 0200 49c2 720a     ....r..x.....I.r
 8027067:	7840 71c8 f7ff ffa6 b662 2001 bd10 48be     @x.q....b.. ...H
 8027077:	b510 3012 7800 f000 003f f7ff ffc3 2001     ...0.x..?...... 
 8027087:	bd10 b510 7800 460c f3c0 0001 f000 ffcf     .....x.F........
 8027097:	6020 2104 4620 f7ff ff65 2001 bd10 b510      `.! F..e.. ....
 80270a7:	f8d0 1001 48b0 3012 7800 f3c0 0001 f000     .....H.0.x......
 80270b7:	ffd6 2020 f7fe fd79 2001 bd10 b510 2013     ..  ..y.. ..... 
 80270c7:	ea40 4001 f7fe fd38 2000 bd10 b510 2051     @..@..8.. ....Q 
 80270d7:	f7fe fd32 2000 bd10 b510 7800 2129 ea41     ..2.. .....x)!A.
 80270e7:	4000 f7fe fd29 2001 bd10 b538 7801 295f     .@..).. ..8..x_)
 80270f7:	d102 6801 0209 d003 2010 f7ff ff79 e00e     ...h..... ..y...
 8027107:	6801 f990 0004 f341 0117 f361 201f 9000     .h....A...a.. ..
 8027117:	4b98 2201 4992 4668 f240 24bb 47a0 2001     .K.".IhF@..$.G. 
 8027127:	bd38 b510 460c 2204 498d 4620 f640 3347     8....F.".I F@.G3
 8027137:	4798 2104 4620 f7ff ff15 2001 bd10 b510     .G.! F..... ....
 8027147:	6800 2123 f3c0 0013 ea41 3000 f7fe fcf4     .h#!....A..0....
 8027157:	2001 bd10 b510 2053 ea40 4001 f7fe fcec     . ....S @..@....
 8027167:	2000 bd10 b510 4604 f000 fbf8 4a7e f8c2     . .....F....~J..
 8027177:	000e b188 7821 f3c1 0300 7801 f363 0100     ....!x.....xc...
 8027187:	7001 f8d4 1001 f8c0 1001 8811 70d1 1d40     .p...........p@.
 8027197:	2120 f7ff fef0 e002 2010 f7ff ff29 2001      !....... ..).. 
 80271a7:	bd10 b510 460c 2001 bf00 b1b8 f000 fc05     .....F. ........
 80271b7:	496d f8c1 000e b130 880a 70ca 7801 2205     mI....0....p.x."
 80271c7:	eb02 0151 e007 2205 2100 4620 f640 334f     ..Q....".! F@.O3
 80271d7:	4798 2105 4620 f7ff fec5 e002 2010 f7ff     .G.! F....... ..
 80271e7:	ff07 2001 bd10 b510 7800 2805 d805 2121     ... .....x.(..!!
 80271f7:	ea41 4000 f7fe fca0 e002 2010 f7ff fef8     A..@....... ....
 8027207:	2001 bd10 b510 460c 2001 f7ff fd1a 6020     . .....F. .... `
 8027217:	2000 f7ff fd16 6060 f003 ff1a 60a0 f001     . ....``.....`..
 8027227:	f84e 81a0 210e 4620 f7ff fe9c 2001 bd10     N....! F..... ..
 8027237:	b510 4604 7800 f020 000c 7020 484e f7fe     ...F.x ... pNH..
 8027247:	fcb4 2030 ea40 4004 f7fe fcaf 2000 bd10     ..0 @..@..... ..
 8027257:	b510 7800 460c f3c0 0200 f3c0 0140 f3c0     ...x.F......@...
 8027267:	0083 f001 fac5 8020 2102 4620 f7ff fe7a     ...... ..! F..z.
 8027277:	2001 bd10 4608 493b b500 39fe 6809 090a     . ...F;I...9.h..
 8027287:	8841 f362 010e 8041 2104 f7ff fe6b 2001     A.b...A..!..k.. 
 8027297:	bd00 b510 7840 07c1 4833 7b40 d003 b940     ....@x..3H@{..@.
 80272a7:	4833 3867 e001 b120 2045 f7fe fc45 2000     3Hg8.. .E ..E.. 
 80272b7:	bd10 2001 bd10 b510 7840 2144 f3c0 0000     ... ....@xD!....
 80272c7:	ea41 4000 f7fe fc38 2001 bd10 b510 7800     A..@..8.. .....x
 80272d7:	460c 1e41 2906 d303 2010 f7ff fe89 e00b     .FA..)... ......
 80272e7:	f001 f82c 4601 220d 4620 f640 3347 4798     ..,..F." F@.G3.G
 80272f7:	210d 4620 f7ff fe36 2001 bd10 b510 4a1a     .! F..6.. .....J
 8027307:	8810 28ff d006 7990 f040 0010 7190 f7ff     ...(...y@....q..
 8027317:	fe51 bd10 4813 300e 8841 8011 8800 7090     Q....H.0A......p
 8027327:	8890 b138 f7ff fe30 7990 f040 0010 7190     ..8...0..y@....q
 8027337:	f7ff fe40 e8bd 4010 205e f7fe bbfd b510     ..@....@^ ......
 8027347:	f04f 4280 f8b2 0320 4c07 f400 41c0 4620     O..B.. ..L...A F
 8027357:	88a3 7980 4299 f040 0010 d012 71a0 e00d     ...y.B@......q..
 8027367:	0000 e8e1 0040 2203 0020 1a62 0020 485a     ....@.." .b. .ZH
 8027377:	0100 ac00 0525 3713 0200 5700 f7ff fe1a     ....%..7...W....
 8027387:	e00b 78e1 2904 d00b 2905 d104 f8d4 000e     ...x.)...)......
 8027397:	b108 f000 fb20 2000 70e0 f7ff fdf5 bd10     .... .. .p......
 80273a7:	f8b2 1328 b141 f8d4 000e 7802 f361 0247     ..(.A......xa.G.
 80273b7:	7002 f000 fae2 e7ee 71a0 f7ff fdfb e7ea     .p.......q......
 80273c7:	e92d 41f0 4eb5 b2c2 0c05 8833 4604 f3c0     -..A.N....3..F..
 80273d7:	3103 2a26 d076 dc1d 2a14 d074 dc12 4fb0     .1&*v....*t....O
 80273e7:	2a01 d046 2a02 d070 2a12 d16a 7371 2b0c     .*F..*p..*j.qs.+
 80273f7:	d1fb 48aa 3012 7840 07c0 7b70 d07d 2800     ...H.0@x..p{}..(
 8027407:	d05f e0c7 2a16 d079 2a1a d07d 2a1b d1ec     _....*y..*}..*..
 8027417:	2008 e0bb 2a54 d073 dc0d f04f 5000 ea40     . ..T*s...O..P@.
 8027427:	4014 2a46 d06d 2a47 d06c 2a52 d1dd 2b11     .@F*m.G*l.R*...+
 8027437:	d169 2128 e0a2 2a57 d071 2a5e d070 2a82     i.(!..W*q.^*p..*
 8027447:	d1d3 f2af 1147 2006 f7fe fc85 f2af 1111     ....G.. ........
 8027457:	2007 f7fe fc80 21b0 2006 f7fe fcb9 21a0     . .....!. .....!
 8027467:	2007 f7fe fcb5 498f 20c0 f8c1 01fc 67c8     . .....I. .....g
 8027477:	e06f 2000 f04f 4180 603d f8a1 0320 7aa8     o.. O..A=`.. ..z
 8027487:	71f0 7a68 7230 f995 0008 2800 db0f f7fe     .qhz0r.....(....
 8027497:	faf6 683a 2101 7a52 b102 2100 7001 6838     ..:h.!Rz...!.p8h
 80274a7:	2104 f990 0008 f100 4080 f880 1200 6838     .!.......@....8h
 80274b7:	f990 000b 2800 db6f 2102 f100 4080 f880     .....(o..!...@..
 80274c7:	1200 e069 e02d e047 e7ff 6838 f990 000b     ..i.-.G...8h....
 80274d7:	2800 db0b f7fe fadc 7800 b938 683a f992     .(.......x8.:h..
 80274e7:	100b f992 000c 320d f000 f87e 2001 f000     .......2..~.. ..
 80274f7:	f8e1 2082 f7fe fb20 e04e e04a e041 e003     ... .. .N.J.A...
 8027507:	e02e e011 e017 e023 f8b6 0009 ebb0 4f14     ......#........O
 8027517:	d042 2001 f7ff fd6c f8a6 5009 e03c e00d     B.. ..l....P<...
 8027527:	e03d 72f5 2004 e031 2b08 d135 221c 4351     =..r. 1..+5.."QC
 8027537:	f7ff fd18 e02e 2b09 d12e e02b 2d01 d004     .......+..+..-..
 8027547:	2d02 d006 2d03 d14d e003 2002 f7ff fd50     .-...-M.... ..P.
 8027557:	e048 f7ff fd22 e045 2b10 d143 2140 e00b     H...".E..+C.@!..
 8027567:	2b0a d13f 484d 2106 3024 7800 eba1 1010     .+?.MH.!$0.x....
 8027577:	4240 2165 eb01 1100 4848 3024 f7ff fcf2     @Be!....HH$0....
 8027587:	e7e7 0c20 d000 2001 7330 2002 f7ff fd30     .. .... 0s. ..0.
 8027597:	e002 b908 f7ff fd01 4620 e8bd 81f0 2100     ........ F.....!
 80275a7:	4a41 4608 eb00 0440 f812 4014 429c d104     AJ.F..@....@.B..
 80275b7:	eb00 0040 eb02 0140 e002 1c40 2817 d3f1     ..@...@...@..(..
 80275c7:	b119 78b0 794a 4290 d003 2010 f7ff fd10     ...xJy.B... ....
 80275d7:	e7bf f8d1 2001 4931 3124 f1a1 0012 4790     ..... 1I$1.....G
 80275e7:	2800 d1b6 2000 e7d8 e92d 41f0 460f 4614     .(... ..-..A.F.F
 80275f7:	f7fe fa58 4606 4829 308a f001 f97b e02c     ..X..F)H.0..{.,.
 8027607:	4826 2228 2100 308a f640 334f 4798 4923     &H(".!.0@.O3.G#I
 8027617:	2501 318a 700d 2012 7288 f814 0b01 7408     .%.1.p. .r.....t
 8027627:	2004 7508 0340 8348 2003 7708 774e 2000     . .u@.H.. .wNw. 
 8027637:	7788 2107 f001 f994 2101 4638 f000 f812     .w.!.....!8F....
 8027647:	481a 7005 481a f880 520c 2100 4638 f000     .H.p.H...R.!8F..
 8027657:	f809 2108 2000 f001 f983 7820 2800 d1cf     ...!. .... x.(..
 8027667:	1ee4 e7fa e92d 41f0 1e4c 4680 43e6 f04f     ....-..AL..F.CO.
 8027677:	4580 f44f 77c8 e00d f8b5 0b02 f8b5 1b02     .EO..w..........
 8027687:	1a09 b289 42b9 d3f9 4640 f7fe fa01 7800     .....B..@F.....x
 8027697:	ea40 0444 42b4 d1ef e77f 0000 0020 1a62     @.D..B...... .b.
 80276a7:	0020 485a 00e0 84e0 0000 ece1 0020 967f      .ZH........ ...
 80276b7:	0142 0040 b510 49f2 f881 0178 49f1 2004     B.@....I..x..I. 
 80276c7:	70c8 1d09 70c8 2080 f7ff fc9c e8bd 4010     .p...p. .......@
 80276d7:	2040 f7ff bc8d 2001 4770 4be9 f893 1176     @ ..... pG.K..v.
 80276e7:	2906 d207 eb03 02c1 1c49 f883 1176 6010     .)......I...v..`
 80276f7:	2000 6050 4770 b510 4ce1 f894 1176 2900     . P`pG...L..v..)
 8027707:	d011 f000 f9aa f894 2176 eb04 01c2 3908     ........v!.....9
 8027717:	2800 d008 1e52 f884 2176 e8bd 4010 2208     .(..R...v!...@."
 8027727:	f640 3347 4718 bd10 49d5 2000 f881 0176     @.G3.G...I. ..v.
 8027737:	4770 4ad3 f892 1176 b909 2000 4770 f892     pG.J..v.... pG..
 8027747:	0177 1c40 b2c0 f882 0177 4288 d302 2000     w.@.....w..B... 
 8027757:	f882 0177 f892 0177 eb02 00c0 6800 4770     ..w...w......hpG
 8027767:	e92d 41f0 2400 4625 4fc6 4ec5 f04f 0815     -..A.$%F.O.NO...
 8027777:	e015 7878 fb00 f008 eb06 0540 f855 0f30     ..xx......@.U.0.
 8027787:	f000 f96b 0004 d005 79a0 2802 d00a 7968     ..k......y.(..hy
 8027797:	07c0 d107 48bb f000 f93b f000 f947 78b8     .....H..;...G..x
 80277a7:	2800 d1e6 78b9 2000 b329 f896 1177 eb06     .(...x. )...w...
 80277b7:	01c1 42a1 d11f 79a1 1d28 2901 d103 7801     ...B...y(..)...x
 80277c7:	f021 0108 e007 7841 07c9 d0f8 2100 71a1     !.....Ax.....!.q
 80277d7:	7801 f041 0108 7001 7922 b2c9 f362 0141     .xA....p"y..b.A.
 80277e7:	7001 7962 b2c9 f362 0100 7001 79e1 e01e     .pby..b....p.y..
 80277f7:	7001 e8bd 81f0 f896 1176 2900 d0f9 48a2     .p......v..)...H
 8027807:	f896 1177 7842 eb06 01c1 f022 02fe 7042     ..w.Bx...."...Bp
 8027817:	f896 2178 b10a 680a e001 4a9c 6812 f8c0     ..x!...h...J.h..
 8027827:	2002 794b 7802 f363 0200 7002 79c9 2901     . Ky.xc....p.y.)
 8027837:	7801 d102 f041 0104 e7da f021 0104 e7d7     .x..A.....!.....
 8027847:	4890 1d00 7881 78c2 4291 d207 7800 2113     .H...x.x.B...x.!
 8027857:	4348 498b eb01 0040 30d8 4770 2000 4770     HC.I..@..0pG. pG
 8027867:	e92d 47f0 4f87 2113 1d3f 7838 f8df 9210     -..G.O.!?.8x....
 8027877:	4348 eb09 0540 f899 0178 35d8 2800 f8d5     HC..@...x..5.(..
 8027887:	0002 d003 f000 f8e9 4604 e004 497f 6809     .........F...I.h
 8027897:	4288 d137 4c7a 2c00 d034 487a 7881 2601     .B7.zL.,4.zH.x.&
 80278a7:	f04f 0802 b329 7840 2115 4348 eb09 0040     O...).@x.!HC..@.
 80278b7:	3034 f8d0 1002 f8d5 2002 4291 d119 7829     40....... .B..)x
 80278c7:	074a d504 7840 07c0 d001 71a6 e011 79a0     J...@x.....q...y
 80278d7:	b178 7920 f3c1 0100 4281 d10a f884 8006     x. y.....B......
 80278e7:	4631 b100 2100 7121 4866 f000 f891 f000     1F...!!qfH......
 80278f7:	f89d 7828 0700 d507 71e6 7828 f340 0040     ..(x.....q(x@.@.
 8027907:	1c40 7160 e8bd 87f0 79e0 2801 d107 f884     @.`q.....y.(....
 8027917:	8007 7828 f340 0040 1c40 7160 e001 2802     ..(x@.@.@.`q...(
 8027927:	d1f0 7868 0840 d0ed 7828 7961 f3c0 0040     ..hx@...(xay..@.
 8027937:	4281 d0e7 78ba 78f9 1e49 428a dae2 7160     .B...x.xI..B..`q
 8027947:	7868 07c0 d002 2020 f7ff fb52 484d 1d00     hx....  ..R.MH..
 8027957:	f000 f850 e8bd 47f0 f000 b873 4849 7881     ..P....G..s.IH.x
 8027967:	78c2 4291 d207 7800 2115 4348 4944 eb01     .x.B...x.!HCDI..
 8027977:	0040 3035 4770 2000 4770 b510 4841 2115     @.50pG. pG..AH.!
 8027987:	7800 4348 493e eb01 0040 3030 7942 0852     .xHC>I..@.00ByR.
 8027997:	d012 f8d0 2006 6002 2200 7102 f891 1178     ..... .`.".q..x.
 80279a7:	b919 493a 6809 f8c0 1006 4836 f000 f822     ..:I.h....6H..".
 80279b7:	e8bd 4010 f000 b83a bd10 4832 1d00 7881     ...@..:...2H...x
 80279c7:	b139 7840 2113 4348 492d eb01 0040 30d9     9.@x.!HC-I..@..0
 80279d7:	4770 2000 4770 482b b510 1d00 7880 2800     pG. pG+H.....x.(
 80279e7:	d007 4828 1d00 f000 f813 e8bd 4010 f000     ..(H.........@..
 80279f7:	b828 bd10 b672 7801 78c2 1c49 fbb1 f3f2     (...r..x.xI.....
 8027a07:	fb02 1113 7001 7881 1c49 7081 b662 4770     .....p.xI..pb.pG
 8027a17:	b672 7841 78c2 1c49 fbb1 f3f2 fb02 1113     r.Ax.xI.........
 8027a27:	7041 7881 1e49 7081 b662 4770 b672 4815     Ap.xI..pb.pGr..H
 8027a37:	7880 2803 f04f 0040 d201 f7ff bad9 f7ff     .x.(O.@.........
 8027a47:	bae1 b672 480f 1d00 7880 2800 f04f 0080     ..r..H...x.(O...
 8027a57:	d001 f7ff bacd f7ff bad5 b510 4b08 2100     .............K.!
 8027a67:	f893 2176 e008 eb03 04c1 6824 4284 d102     ..v!......$h.B..
 8027a77:	eb03 00c1 bd10 1c49 428a dcf4 2000 bd10     ......I..B... ..
 8027a87:	0020 cc62 0020 4c5a 0020 3c64 0100 ac00      .b. .ZL .d<....
 8027a97:	b510 4604 f990 0000 2800 db12 7861 f3c1     ...F.....(..ax..
 8027aa7:	0106 2904 d104 f7fd ffea 7861 09c9 7001     ...)......ax...p
 8027ab7:	7860 f3c0 0106 f994 0000 f100 4080 f880     `x...........@..
 8027ac7:	1200 bd10 e92d 41f0 f04f 4680 f896 1403     ....-..AO..F....
 8027ad7:	2000 f896 2401 f001 01f8 f002 04c7 4aa8     . ...$.........J
 8027ae7:	ea4f 0ce1 7811 4da7 1e4b 4607 b2db f1bc     O....x.MK..F....
 8027af7:	0f0c d21b e8df f00c 061a 1e06 1e1c 1832     ..............2.
 8027b07:	1c4b 4337 6868 f024 0104 7803 07db d003     K.7Chh$....x....
 8027b17:	7843 2b01 d900 2701 ea41 0487 7841 7011     Cx.+...'A...Ax.p
 8027b27:	7800 f886 0405 e03e 2001 7568 2002 e02f     .x....>.. hu. /.
 8027b37:	2002 e016 b139 7013 68a8 f810 1b01 f886     . ..9..p.h......
 8027b47:	1405 60a8 e02f 6868 1d00 6068 7800 07c0     ...`/.hh..h`.x..
 8027b57:	d002 f044 0420 e026 2001 e019 2900 d0fb     ..D. .&.. ...)..
 8027b67:	2003 7568 e7f8 7013 2902 d101 f024 0404     . hu...p.)..$...
 8027b77:	f896 1405 68e8 f800 1b01 60e8 e013 f896     .....h.....`....
 8027b87:	0405 68e9 7008 6868 1d00 6068 e7e4 b150     ...h.phh..h`..P.
 8027b97:	f024 0404 07c0 d001 f044 0410 2000 f7fe     $.......D.... ..
 8027ba7:	f821 752f e002 6850 7800 7528 f886 4401     !./u..Ph.x(u...D
 8027bb7:	e8bd 81f0 4a73 f04f 4380 6910 b170 f64f     ....sJO..C.ip.O.
 8027bc7:	71c0 4288 da00 4601 1a40 6110 b672 f8b3     .q.B...F@..ar...
 8027bd7:	0b02 4408 f8a3 0b48 b662 4770 2000 f8a3     ...D..H.b.pG. ..
 8027be7:	0b28 6850 1d00 6050 2000 f7fd bffb e92d     (.Ph..P`. ....-.
 8027bf7:	41f0 4605 b2c0 4e62 4f62 f04f 4480 2803     .A.F..bNbOO..D.(
 8027c07:	d03d dc23 2801 d028 2802 d11e 6870 7840     =.#..((..(..ph@x
 8027c17:	f040 0040 f884 0401 f2af 0167 2013 f7fe     @.@.......g.. ..
 8027c27:	f89a 21e0 2013 f7fe f8d3 4c57 f44f 2000     ...!. ....WLO.. 
 8027c37:	6020 f2af 116f 2008 f7fe f88d 21e0 2008      `..o.. .....!. 
 8027c47:	f7fe f8c6 f44f 7080 6020 e096 f04f 0800     ....O..p `..O...
 8027c57:	2880 d024 2881 d1f8 e02b 0c28 6070 2007     .($..(..+.(.p`. 
 8027c67:	f884 020d f884 020e 2400 6870 eb00 0044     .........$ph..D.
 8027c77:	1c80 f7ff ff0d 1c64 2c04 dbf6 e07d b672     ......d..,..}.r.
 8027c87:	7d38 b150 7d38 1e40 f010 00ff 7538 d104     8}P.8}@.....8u..
 8027c97:	b662 2005 f7fd ff50 e06f b662 e06d f04f     b.. ..P.o.b.m.O.
 8027ca7:	5000 ea40 4015 6038 6840 6078 f887 8015     .P@..@8`@hx`....
 8027cb7:	2581 683a 6850 b120 6878 8841 b109 7d7b     .%:hPh .xhA...{}
 8027cc7:	b13b 6810 7d79 ea40 3001 f7fd ff35 2000     ;..hy}@..0..5.. 
 8027cd7:	e76e 7802 b1ea 4608 f7fd fec1 60b8 6878     n..x...F.....`xh
 8027ce7:	7901 07c9 d004 88c0 f7fd feb9 60f8 e001     .y...........`..
 8027cf7:	f8c7 800c 6870 7800 7538 2001 f7fd ff72     ....ph.x8u. ..r.
 8027d07:	f894 0401 f000 00c3 f040 0020 f884 0401     ........@. .....
 8027d17:	e031 7842 b9b2 0188 f64f 71c0 6138 4288     1.Bx....O..q8a.B
 8027d27:	da00 4601 1a40 6138 b672 f8b4 0b02 4408     ...F@.8ar......D
 8027d37:	f8a4 0b48 2008 f8a4 0b28 2001 f7fd ff52     ..H.. ..(.. ..R.
 8027d47:	b662 e018 2a01 d103 1c80 f7ff fea1 e006     b....*..........
 8027d57:	2a02 d106 f241 002e eb00 4001 e006 6878     .*..A......@..xh
 8027d67:	e007 2a03 d105 202e ea40 4001 f7fd fee4     ...*... @..@....
 8027d77:	e7f5 1d00 6078 f505 3580 4628 e718 0000     ....x`...5(F....
 8027d87:	0020 545a 0020 dc5b 00e0 00e1 b570 4604      .ZT .[.....p..F
 8027d97:	b2c0 2801 d130 4e19 0c20 6030 4818 f640     ...(0..N .0`.H@.
 8027da7:	3547 7800 b120 4917 4817 f7fd fe2f e004     G5.x ..I.H../...
 8027db7:	4816 4914 6802 4814 47a8 6830 7840 b968     .H.I.h.H.G0h@xh.
 8027dc7:	4813 2118 8001 8041 f240 113f 8081 1541     .H.!..A.@.?...A.
 8027dd7:	80c1 480f 2210 490f 30d8 47a8 6830 7801     ...H.".I.0.G0h.x
 8027de7:	f04f 4080 b129 2133 f880 1212 2134 f880     O..@).3!....4!..
 8027df7:	1211 2100 f8a0 1c00 4620 bd70 0020 5c5a     ...!.... Fp. .Z\
 8027e07:	0000 94e2 0000 95e2 0020 806d 0000 90e2     ........ .m.....
 8027e17:	0020 ac7e 0000 76e2 e92d 41f0 4605 b2c0      .~....v-..A.F..
 8027e27:	4e5c 4f5d 2801 d00d 2400 f04f 0c01 2803     \N]O.(...$O....(
 8027e37:	d030 2826 d07e 2828 d12b 6836 2000 f106     0.&(~.((+.6h. ..
 8027e47:	0310 e061 0c28 2400 6030 6830 ebc4 01c4     ..a.(..$0`0h....
 8027e57:	4420 eb07 0841 f810 1f08 f108 0804 f341      D..A.........A.
 8027e67:	0106 2900 db09 4a4d 4411 f8c8 1000 7800     ...)..MJ.D.....x
 8027e77:	f340 0006 f7fd fe03 e003 f04f 4080 f8c8     @.........O..@..
 8027e87:	0000 1c64 f8c8 0004 2c02 dbde 2028 f7fd     ..d......,..( ..
 8027e97:	fe53 e07b f897 0020 2800 d077 2300 6830     S.{... ..(w..#0h
 8027ea7:	f04f 0804 eb00 0e03 ebc3 00c3 eb07 0040     O.............@.
 8027eb7:	f10e 0e08 1d00 e01d 6881 f990 200c 5c8a     .........h... .\
 8027ec7:	2aff d100 7304 f990 200c 5c89 1c52 7341     .*...s... .\R.As
 8027ed7:	7302 2900 d0f0 7b01 07c9 d003 6801 f881     .s.)...{.....h..
 8027ee7:	8000 e007 f89e 2000 4661 0612 d400 2102     ....... aF.....!
 8027ef7:	6802 7011 7b41 2900 d0de 7b41 1c5b 1e49     .h.pA{.)..A{[.I.
 8027f07:	7341 2b02 dbcb e041 ebc0 01c0 eb07 0141     As.+..A.......A.
 8027f17:	1d09 00c2 fa25 f202 f3c2 4207 2a06 d900     ....%......B.*..
 8027f27:	2200 4432 7a92 f8d1 c008 441a 4594 d004     ."2D.z.....D.E..
 8027f37:	608a e000 e005 734c 730c 1c40 2802 dbe3     .`....Ls.s@..(..
 8027f47:	e024 0c28 d000 2001 f887 0020 2000 6831     $.(.... .. .. 1h
 8027f57:	f897 3020 4401 7a09 09ca ebc0 01c0 eb07     .. 0.D.z........
 8027f67:	0141 1d09 b113 6849 700a e00c 4663 4664     A.....Ih.p..cFdF
 8027f77:	2a00 d001 f04f 0400 684a 7014 d101 f04f     .*..O...Jh.p..O.
 8027f87:	0302 6809 700b 1c40 2802 dbe0 4628 e8bd     ...h.p@..(..(F..
 8027f97:	81f0 0000 0020 605a 0020 b85d 0040 0002     .... .Z` .].@...
 8027fa7:	b570 b2c1 4c3d f44f 3680 f44f 457c 2901     p...=LO..6O.|E.)
 8027fb7:	d00a 2920 d107 2210 4620 f640 23f5 6a21     .. )..." F@..#!j
 8027fc7:	4798 bb08 2000 bd70 0c03 4a35 f103 0110     .G... p...5J....
 8027fd7:	6011 6226 6a22 3a10 6222 6811 1c49 d101     .`&b"j.:"b.hI...
 8027fe7:	42aa d8f7 6811 1c49 d000 4613 461d 2100     .B...hI....F.F.!
 8027ff7:	eb05 0281 6813 f844 3021 eb04 0281 1c49     .....hD.!0....I.
 8028007:	6113 2904 dbf4 bd70 6a20 3010 6220 42b0     .a.)..p. j.0 b.B
 8028017:	d305 4924 4628 f240 12ad 4790 6225 6a21     ..$I(F@....G%b!j
 8028027:	4b21 2204 481d f240 24bb 47a0 e7ca 491c     !K.".H@..$.G...I
 8028037:	f000 007f 6809 eb01 0180 4818 780a 3010     .....h.....H.x.0
 8028047:	0612 d400 3810 784a eb00 0082 6800 788a     .....8Jx.....h.x
 8028057:	40d0 78ca 2101 4091 1e49 4008 4770 b510     .@.x.!.@I..@pG..
 8028067:	4a0f f000 007f 6812 4b0c eb02 0080 7802     .J.....h.K.....x
 8028077:	3310 0612 d400 3b10 78c4 2201 40a2 7884     .3.....;.x.".@.x
 8028087:	1e52 40a2 40a1 4011 b672 7840 eb03 0080     R..@.@.@r.@x....
 8028097:	6803 4393 430b 6003 b662 bd10 0020 4864     .h.C.C.`b... .dH
 80280a7:	0020 645a 0525 efbe 0525 3713 e92d 41f0      .Zd%...%..7-..A
 80280b7:	2403 4f55 4606 f04f 0801 2502 fa08 f004     .$UO.FO....%....
 80280c7:	4230 d019 4620 f7fd fce3 7801 19e0 7802     0B.. F.....x...x
 80280d7:	2a08 d211 e8df f002 080c 1004 1010 0c04     .*..............
 80280e7:	b951 f880 8000 e007 2901 d105 7005 e003     Q........)...p..
 80280f7:	462a b901 2201 7002 1c64 2c12 ddde e8bd     *F...".pd..,....
 8028107:	81f0 e92d 41f0 4605 b2c0 4e40 2801 d005     ..-..A.F..@N.(..
 8028117:	2400 2804 d00f 2827 d14f e050 0c28 6070     .$.(..'(O.P.(.p`
 8028127:	6800 f7ff ffc3 6870 7d01 2900 d045 6880     .h....ph.}.)E..h
 8028137:	f000 f870 e041 6870 7d00 b390 f000 f870     ..p.A.ph.}....p.
 8028147:	b378 f000 f8bc 4680 f000 f8b9 4f2f 7839     x......F..../O9x
 8028157:	2900 6871 d001 89c9 e000 8989 4288 d801     .)qh.........B..
 8028167:	2021 e026 6870 8a01 4541 d30e f997 1001     ! &.ph..AE......
 8028177:	2904 da0a 2900 da01 707c e01c 1c49 b248     .)...)..|p..I.H.
 8028187:	7078 2804 d117 4822 e013 8a40 4540 d812     xp.(.."H..@.@E..
 8028197:	f997 0001 f110 0f14 dd0d 2800 dd02 707c     ...........(..|p
 80281a7:	e002 e00a 1e40 7078 f997 0001 3014 d102     ....@.xp.....0..
 80281b7:	202d f7fd fcc1 2001 7038 4628 e79f 2000     - ..... 8p(F... 
 80281c7:	f7fd fc66 7800 2800 d0f9 6870 6840 f7ff     ..f..x.(..ph@h..
 80281d7:	ff6d 6870 f990 0015 2800 db0a f7fd fc4f     m.ph.....(....O.
 80281e7:	7004 6870 2104 f990 0015 f100 4080 f880     .pph.!.......@..
 80281f7:	1200 2102 074a f8a2 1100 2000 bf00 1c40     ...!J...... ..@.
 8028207:	280a dbfb bf30 e7f6 0040 0002 0020 685a     .(..0...@... .Zh
 8028217:	0100 2d00 4a2b 6010 8091 200d 80d0 4770     ...-+J.`... ..pG
 8028227:	b570 4928 f644 75c0 88c8 f04f 4380 1e40     p.(ID..u..O..C@.
 8028237:	b280 80c8 280c d840 d105 f04f 0000 8108     .....(@...O.....
 8028247:	f8a3 5a6c e039 4a1f 07c6 8912 f04f 0401     ..lZ9..J....O...
 8028257:	d009 0845 40ac 4322 f44f 4480 ea44 1282     ..E..@"CO..DD...
 8028267:	f8a3 2a6c e009 f8b3 6a6a 05f6 d403 0846     ..l*....jj....F.
 8028277:	40b4 4322 810a f8a3 5a6c b9f0 f44f 4040     .@"C....lZ..O.@@
 8028287:	f8a3 0a6c 4a10 890c e9d2 0300 1a1b 4363     ..l..J........cC
 8028297:	243f fbb3 f3f4 4418 6993 f44f 747a fbb3     ?$.....D.iO.zt..
 80282a7:	f3f4 680c 6912 4422 4402 4353 fbb3 f0f0     ...h.i"D.DSC....
 80282b7:	8148 8888 80c8 2001 bd70 2000 bd70 4801     H...... p.. p..H
 80282c7:	8940 4770 0020 f25b 0100 d000 b2c1 2901     @.pG .[........)
 80282d7:	d007 4b0c 2903 d005 2926 d102 0c01 f883     ...K.)..&)......
 80282e7:	1062 4770 f893 1062 2900 d0fa 2100 b672     b.pG..b..)...!r.
 80282f7:	5c5a b10a 1e52 545a b662 1c49 2906 dbf6     Z\..R.ZTb.I..)..
 8028307:	4770 0000 0020 6c64 b570 4d18 1e44 f895     pG.. .dlp..MD...
 8028317:	0062 2800 d011 7808 f3c0 02c2 f3c0 0002     b..(...x........
 8028327:	4410 2807 d809 200d fb00 5004 1d80 220d     .D.(... ...P..."
 8028337:	f640 3347 4798 200a 5528 bd70 b510 1e40     @.G3.G. (Up...@.
 8028347:	b672 490a 5c0a 2a00 f04f 020d d006 fb00     r..I.\.*O.......
 8028357:	1102 1d89 4806 f640 3347 e003 2100 4804     .....H@.G3...!.H
 8028367:	f640 334f 4798 b662 4801 bd10 0020 6c64     @.O3.Gb..H.. .dl
 8028377:	0020 d95d e92d 41f0 4604 4d39 b2c0 0c21      .].-..A.F9M..!.
 8028387:	2601 f995 2002 2821 d025 dc10 4a34 2801     .&... !(%...4J.(
 8028397:	f1a2 0204 d043 2802 d047 2805 d104 f7fd     ....C..(G..(....
 80283a7:	fcdf f240 105f 4780 4620 e8bd 81f0 2824     ..@._..G F....$(
 80283b7:	d041 2825 d04a 282c d1f6 f3c4 3003 f04f     A.%(J.,(.....0O.
 80283c7:	3701 686b 4087 43bb fa06 f700 1e48 00c0     .7kh.@.C....H...
 80283d7:	4087 431f 606f 2a00 d0e6 f414 4f70 d100     .@.Co`.*....pO..
 80283e7:	70a9 6868 f995 1002 fa90 f0a0 fab0 f080     .phh............
 80283f7:	eb06 00d0 4281 da00 78a8 f995 1003 4281     .....B...x.....B
 8028407:	d0d2 b240 70e8 2126 ea41 4000 f7fd fb94     ..@..p&!A..@....
 8028417:	78e8 2800 d1c8 2025 f7fd fb8e e7c4 f04f     .x.(..% ......O.
 8028427:	30ff 6011 70a8 70e8 e7be 6810 7800 2800     .0.`.p.p...h.x.(
 8028437:	d0ba 480c e7f0 480a f414 4f70 8800 d002     ...H...H..pO....
 8028447:	ea40 4014 e001 ea20 4014 8028 2a00 d1ab     @..@.. ..@(..*..
 8028457:	8828 2800 d1a8 2027 f7fd fba7 2020 e7a4     (..(..' ....  ..
 8028467:	0020 745a 0500 2100 e92d 4ff1 f89d 6000      .Zt...!-..O...`
 8028477:	4af4 f3c6 0000 f3c6 0140 ea40 0041 eb00     .J......@.@.A...
 8028487:	0180 f8df 93c4 6812 eb00 00c0 eb09 0440     .......h......@.
 8028497:	f89d 7001 eb02 05c1 f8bd 0002 f9b4 800c     ...p............
 80284a7:	f3c7 1101 f340 000a 2901 d101 81a0 e015     ....@....)......
 80284b7:	2902 d101 4440 e7f9 2903 d10f f89d 1001     .)..@D...)......
 80284c7:	4be1 f3c1 0103 07f2 eb03 0141 d004 f8a1     .K........A.....
 80284d7:	006e f647 78ff e001 f8a1 004e f017 0f30     n.G..x....N...0.
 80284e7:	f04f 0a00 d012 f9b4 000c 2800 dd02 f8a4     O..........(....
 80284f7:	a00c e005 f9b5 101e 4288 da01 8c28 81a0     .........B..(...
 8028507:	f9b4 100c f895 0027 f7ff fda9 7c60 2101     ......'.....`|.!
 8028517:	ebb1 1f97 d00c 2202 ebb2 1f97 d102 f884     ......."........
 8028527:	a011 e006 2203 ebb2 1f97 d102 b100 2100     .....".........!
 8028537:	7461 07f1 d018 7c62 f240 31ff f44f 437c     at....b|@..1O.|C
 8028547:	4282 d013 b112 f895 0025 e001 f895 0026     .B......%.....&.
 8028557:	7c22 4282 da00 7420 f8b9 004c 07b2 d400     "|.B.. t..L.....
 8028567:	4619 4308 f8a9 004c e8bd 8ff8 f9b4 000c     .F.C..L.........
 8028577:	4540 d0f9 f895 0024 e7ea e92d 5ff0 4fb2     @E....$...-.._.O
 8028587:	f04f 0b00 f8b7 404c f8b7 004a f8a7 b04c     O.....L@..J...L.
 8028597:	4004 48ac f8df 92b4 2601 f8d0 8000 e05b     .@.H.....&....[.
 80285a7:	fa94 f0a4 fab0 f180 2909 4640 dc03 4aa6     .........)@F...J
 80285b7:	3078 3236 e002 4aa4 3028 3212 eb07 0541     x062...J(0.2..A.
 80285c7:	f9b5 308e 454b d102 f9b0 3020 e004 f8b0     ...0KE.... 0....
 80285d7:	c01c eba3 030c b21b f892 c011 f1bc 0f00     ................
 80285e7:	d112 f9b2 c00c f9b0 e01e 45f4 db0c f8b5     ...........E....
 80285f7:	a06e 44d4 fa0f fc8c f1bc 0f00 dd02 f04f     n..D..........O.
 8028607:	0c00 e003 45e6 dd01 f9b0 c020 ebac 0e03     .....E.... .....
 8028617:	f892 c010 fb9e f2fc f897 e0af 441a b212     .............D..
 8028627:	f1be 0f00 d104 429a d102 f1bc 0f01 d910     .......B........
 8028637:	f9b0 c01e 464b 4594 dc02 f9b0 001c 1883     ....KF.E........
 8028647:	f8a5 308e f8b7 004c fa06 f201 4310 f8a7     ...0..L......C..
 8028657:	004c fa06 f001 4384 2c00 d1a1 f897 0046     L......C.,....F.
 8028667:	2801 d902 1e40 f887 0046 f897 0022 2801     .(..@...F..."..(
 8028677:	d902 1e40 f887 0022 f8b7 004c 2800 d008     ..@..."...L..(..
 8028687:	211b ea41 4000 f7fd fa57 f887 60ae f887     .!A..@..W....`..
 8028697:	b0af e8bd 9ff0 e92d 43f8 4604 b2c1 4a69     ......-..C.F..iJ
 80286a7:	2700 2601 4d68 0c00 2926 d071 dc10 2901     .'.&hM..&)q....)
 80286b7:	d019 2903 d061 2918 d112 2801 d069 2807     ...)a..)...(i..(
 80286c7:	d068 280f d10c f64f 70ff f000 f8af e007     h..(..O..p......
 80286d7:	2930 d060 293f d036 2963 d101 f885 70ae     0)`.?)6.c).....p
 80286e7:	4620 e8bd 83f8 f8df 8164 2100 6010 eb05      F......d..!.`..
 80286f7:	0241 1c49 f8a2 808e 290f ddf8 2100 eb01     A.I......)...!..
 8028707:	0281 eb00 03c2 f8b3 9018 eb01 02c1 eb05     ................
 8028717:	0242 46be ea5f 69c9 d400 46c6 f8a2 e00c     B..F_..i...F....
 8028727:	8b1b 46bc 06db d400 46c4 f8a2 c00e 1c49     ...F.....F....I.
 8028737:	7416 2904 dbe3 4844 2164 308e ea41 4000     .t.)..DHd!.0A..@
 8028747:	f7fd f9fa e7cc f3c4 3103 f3c1 0802 f7fd     .........1......
 8028757:	f986 f8a5 704a 2100 e00c eb01 0341 eb00     ....Jp.!....A...
 8028767:	0343 795b f8b5 204a fa06 f303 431a f8a5     C.[y..J .....C..
 8028777:	204a 1c49 4541 dbf0 e7b2 f895 0048 2800     J I.AE......H..(
 8028787:	d0ae f895 00ae 2800 d1aa f7ff fef6 e7a7     .......(........
 8028797:	e025 e01e e020 f04f 5000 ea40 4014 6800     %... .O..P@..@.h
 80287a7:	9000 f89d 1000 6812 f3c1 0300 f3c1 0440     .......h......@.
 80287b7:	ea43 0344 eb03 0383 eb02 02c3 f3c1 0181     C.D.............
 80287c7:	8b12 3108 408e 4232 d001 f7ff fe4d 2000     ...1.@2B....M.. 
 80287d7:	e787 f885 6048 e783 f240 30ff e775 0c20     ....H`..@..0u. .
 80287e7:	d002 f885 6049 e77b f805 7f48 706f e777     ....I`{...H.opw.
 80287f7:	ea42 0041 4a13 eb00 0180 6812 eb00 00c0     B.A..J.....h....
 8028807:	eb02 02c1 4910 f9b2 201e eb01 0140 f9b1     .....I... ..@...
 8028817:	000c 4290 db02 7c49 2900 d000 480b 4770     ...B..I|.)...HpG
 8028827:	4909 eb01 0040 f9b0 004e 4770 4906 f8a1     .I..@...N.pG.I..
 8028837:	004c 2001 f881 00af f881 0046 f881 0022     L.. ......F...".
 8028847:	4770 0000 0020 7c5a 0020 e864 ffff 00fc     pG.. .Z| .d.....
 8028857:	4a53 8810 2800 d014 8810 4b52 fa90 f0a0     SJ...(....RK....
 8028867:	fab0 f180 689b eb01 0081 eb03 0040 7843     .....h......@.Cx
 8028877:	2300 7043 4b4c 8018 8810 2301 408b 4398     .#CpLK.....#.@.C
 8028887:	8010 4770 e92d 41f0 2701 4d45 4e47 e018     ..pG-..A.'EMGN..
 8028897:	79a8 1c40 71a8 8868 b198 8868 88a9 fa90     .y@..qh...h.....
 80288a7:	f0a0 fab0 f080 fa07 f400 4221 d006 483d     ..........!B..=H
 80288b7:	7800 f7fd fa65 79e8 1c40 71e8 8868 43a0     .x..e..y@..qh..C
 80288c7:	8068 79a8 f896 1f94 4288 d1e1 e8bd 81f0     h..y.....B......
 80288d7:	b510 4c34 6860 4780 4931 7a08 1c40 b2c0     ..4L`h.G1I.z@...
 80288e7:	7208 79c9 4288 d004 7820 e8bd 4010 f7fd     .r.y.B.. x...@..
 80288f7:	ba47 bd10 b510 4c2b 2209 60a0 2100 4828     G.....+L.".`.!(H
 8028907:	f640 334f 4798 492a 2000 7008 f2af 01bf     @.O3.G*I. .p....
 8028917:	f7fd fa21 f2af 0193 2001 f7fd fa1c 2160     ..!...... ....`!
 8028927:	2000 f7fd fa55 2150 2001 f7fd fa51 f2af     . ..U.P!. ..Q...
 8028937:	015f 201f f7fd fa1a 7020 481e 2101 6001     _.. .... p.H.!.`
 8028947:	2102 6001 bd10 4917 2201 6048 4814 71c2     .!.`...I."H`.H.q
 8028957:	2200 7202 7808 f7fd ba13 4912 6048 4770     .".r.x.....IH`pG
 8028967:	4a0f 4301 8011 8051 8090 2000 f7fd ba2b     .J.C..Q.... ..+.
 8028977:	b570 4606 460d b672 4c09 8820 4210 d102     p..F.Fr..L ..B..
 8028987:	480d f7fd f8d9 8820 4335 4328 8020 8860     .H.... .5C(C .`.
 8028997:	4328 8060 88a0 4330 80a0 b662 bd70 0000     (C`...0C..b.p...
 80289a7:	0020 e65d 0020 805a 0040 020c 0020 0070      .]. .Z.@... .p.
 80289b7:	0020 947f 00e0 00e1 0200 0500 b510 4823      .............#H
 80289c7:	2240 6c00 4921 f640 3347 4798 2240 2100     @".l!I@.G3.G@".!
 80289d7:	481e f640 334f 4798 e8bd 4010 2014 f7fd     .H@.O3.G...@. ..
 80289e7:	b8ab 491a 6408 481a 7800 f7fd b9c9 b510     ...I.d.H.x......
 80289f7:	f2af 0137 2018 f7fd f9b9 4915 7008 bd10     ..7.. .....I.p..
 8028a07:	4a12 eb02 0080 6802 1851 d301 f04f 31ff     .J.....hQ...O..1
 8028a17:	6001 4770 490d eb01 0180 6808 1c40 d000     .`pG.I.....h@...
 8028a27:	6008 4770 4909 eb01 0140 8808 1c40 0400     .`pG.I..@...@...
 8028a37:	0c00 d000 8008 4770 4904 4401 7808 1c40     ......pG.I.D.x@.
 8028a47:	f010 00ff d000 7008 4770 0000 0020 9865     .......ppG.. .e.
 8028a57:	0020 8c5a f000 3155 f000 30aa eb01 0050      .Z...U1...0..P.
 8028a67:	f000 3133 f000 30cc eb01 0090 f000 310f     ..31...0.......1
 8028a77:	f000 30f0 eb01 1010 f000 11ff f000 20ff     ...0........... 
 8028a87:	eb01 2010 b281 eb01 4010 4770 4851 4952     ... .....@pGQHRI
 8028a97:	6800 6008 4770 b510 4c4f 21c5 6820 4788     .h.`pG..OL.! h.G
 8028aa7:	6020 bd10 b510 4604 f7ff fff5 4602 4620      `.....F.....F F
 8028ab7:	f7ff ffd0 fbb2 f1f0 fb00 2011 2301 e006     ........... .#..
 8028ac7:	fa94 f1a4 fab1 f281 fa03 f102 438c 1e40     .............C@.
 8028ad7:	d2f6 fa94 f0a4 fab0 f080 bd10 7981 0689     .............y..
 8028ae7:	d501 1dc0 4770 2000 4770 7981 2203 ebb2     ....pG. pG.y."..
 8028af7:	1f91 d006 06ca d504 1dc0 f3c1 1140 4408     ............@..D
 8028b07:	4770 2000 4770 7981 2203 ebb2 1f91 d009     pG. pG.y."......
 8028b17:	070a d507 f3c1 1240 1dc0 4410 f3c1 1100     ......@....D....
 8028b27:	4408 4770 2000 4770 7981 2203 ebb2 1f91     .DpG. pG.y."....
 8028b37:	d00a 1dc0 f3c1 1240 4410 f3c1 1200 4410     ......@..D.....D
 8028b47:	f3c1 01c0 4408 4770 2000 4770 7981 098a     .....DpG. pG.y..
 8028b57:	d10e 1dc0 f3c1 1240 4410 f3c1 1200 4410     ......@..D.....D
 8028b67:	f3c1 02c0 4410 f3c1 0102 eb00 0041 4770     .....D......A.pG
 8028b77:	2000 4770 b570 7984 1dc2 210b 06a3 d502     . pGp..y...!....
 8028b87:	f812 1b01 310f 06e3 d504 f812 3b01 1d09     .....1.......;..
 8028b97:	4419 b289 0723 d504 f812 3b01 1d09 4419     .D..#......;...D
 8028ba7:	b289 2300 f3c4 0502 e008 eb02 0643 8836     ...#........C.6.
 8028bb7:	f3c6 0608 4431 1c89 b289 1c5b 429d dcf4     ....1D....[..B..
 8028bc7:	09a2 d101 1c89 b289 8802 f361 020b 8002     ..........a.....
 8028bd7:	bd70 0000 0100 ac00 0020 905a e92d 43f0     p....... .Z.-..C
 8028be7:	4684 e9dd 7808 9807 4293 d201 440b 3320     .F...x...B...D 3
 8028bf7:	4614 f04f 0e01 17e5 eb04 65d5 116d eb0c     .FO........em...
 8028c07:	0585 682d 4294 ea05 0508 d10a f002 061f     ..-h.B..........
 8028c17:	1ba4 1b16 f1c6 0920 fa0e f609 1e76 4035     ...... .....v.5@
 8028c27:	e019 1b1e 2e1f d216 f1c6 091f fa0e f609     ................
 8028c37:	1e76 43b5 e00f 683e 2e00 d017 1e76 603e     v..C..>h....v.>`
 8028c47:	fab5 f685 f1c6 091f fa0e f909 4426 ea25     ............&D%.
 8028c57:	0509 f800 6b01 2d00 d1ed 3420 429c d805     .....k.-.. 4.B..
 8028c67:	428c d3c8 2400 1a5b 3b20 e7c4 e8bd 83f0     .B...$[. ;......
 8028c77:	e92d 41f0 1c5b fbb3 f4f1 fb01 3414 440a     -..A[........4.D
 8028c87:	1e52 fbb2 f3f1 fb01 2313 2200 f04f 3eff     R........#."O..>
 8028c97:	2701 f8dd c018 e062 2500 4294 d321 f102     .'....b..%.B!...
 8028ca7:	0620 42b4 d21d 4293 d316 1e75 42ab d213      ..B...B..u..B..
 8028cb7:	429c d207 1b1d 1c6d fa07 f505 1e6d 1aa6     .B....m.....m...
 8028cc7:	40b5 e019 1ae6 1e76 fa07 f506 1e6d 1a9e     .@....v.....m...
 8028cd7:	1c76 40b5 43ed e00f 1aa5 fa07 f505 1e6d     v..@.C........m.
 8028ce7:	e7f8 4293 d30b f102 061f 42b3 d207 1a9d     ...B.......B....
 8028cf7:	1c6d fa07 f505 1e6d fa95 f5a5 e00d 429c     m.....m........B
 8028d07:	d203 42a2 d301 429a d905 42a3 d205 429a     ...B...B...B...B
 8028d17:	d301 42a2 d901 fa9e f5ae ea4f 1652 eb00     ...B......O.R...
 8028d27:	0686 f8d6 8000 f1bc 0f00 d002 ea48 0805     ............H...
 8028d37:	e001 ea28 0805 1a8d f8c6 8000 2d20 d20d     ..(......... -..
 8028d47:	0955 1a56 eb00 0585 3620 f8d5 8000 fa07     U.V..... 6......
 8028d57:	f606 1e76 ea28 0806 f8c5 8000 3220 428a     ..v.(....... 2.B
 8028d67:	d39a e8bd 81f0 e92d 4ff0 b087 460d 4617     ......-..O...F.F
 8028d77:	4604 aa05 a906 f001 fa11 8aa0 f894 b004     .F..............
 8028d87:	f040 5300 8ae0 4a52 f040 5600 2000 eb03     @..S..RJ@..V. ..
 8028d97:	0180 eb06 0c80 6809 f8dc c000 ea01 010c     .......h........
 8028da7:	f842 1020 1c40 2804 d3f1 2300 9300 e9dd     B. .@..(...#....
 8028db7:	3205 4659 4846 f7ff ff5b 2301 9300 e9dd     .2YFFH..[..#....
 8028dc7:	3205 4659 4630 f7ff ff53 f04f 0a24 fb95     .2YF0F..S.O.$...
 8028dd7:	f2fa 8b20 78e1 2600 f040 5000 f04f 39ff     .. ..x.&@..PO..9
 8028de7:	f04f 0880 2901 d001 2902 d10e 9204 f04f     O....)...)....O.
 8028df7:	33aa aa04 e88d 000d e9dd 3205 4659 4834     .3.........2YF4H
 8028e07:	f7ff feec f04f 3355 e003 2905 d111 464b     ....O.U3...)..KF
 8028e17:	9204 aa04 e88d 000d e9dd 3205 4659 482c     ...........2YF,H
 8028e27:	f7ff fedc 8b21 f041 5100 1a46 fb06 f60a     ....!.A..QF.....
 8028e37:	e022 2904 d120 aa04 e88d 0205 210f 9104     "..) ........!..
 8028e47:	e9dd 3205 4659 4822 f7ff fec8 f880 8000     ...2YF"H........
 8028e57:	8a60 2307 f040 5200 8b20 f040 5000 e008     `..#@..R .@..P..
 8028e67:	eb02 1181 7809 eb03 0191 1a6d d404 440e     .....x....m....D
 8028e77:	1c40 7801 2980 d1f3 f880 8000 8b22 7839     @..x.)......".9x
 8028e87:	1a80 4408 7038 8b20 f040 5100 7808 2880     ...D8p .@..Q.x.(
 8028e97:	d01a 1e40 b240 2800 da02 7922 4410 b240     ..@.@..(.."y.D@.
 8028ea7:	8aa2 f042 5200 eb02 02e0 f000 0007 f1c0     ..B..R..........
 8028eb7:	0307 7812 2001 4098 4202 d002 f884 9029     ...x. .@.B....).
 8028ec7:	e002 7808 f884 0029 4630 b007 e8bd 8ff0     ...x..).0F......
 8028ed7:	0020 dc65 b510 485f 2265 495d 6840 f640      .e..._He"]I@h@.
 8028ee7:	3347 4798 e8bd 4010 2054 f7fc be25 4959     G3.G...@T ..%.YI
 8028ef7:	6048 7808 f7fc bf44 e92d 41f0 4604 b2c1     H`.x..D.-..A.F..
 8028f07:	f3c0 3703 2501 4e53 0768 4b51 360c 0c22     ...7.%SNh.QK.6".
 8028f17:	ea40 4014 2917 d03d dc0a 2901 d013 2910     @..@.)=....)...)
 8028f27:	d07b 2911 d06e 2913 d132 f7ff fd5a e007     {..)n..)2...Z...
 8028f37:	2922 d02a 293f d020 2953 d129 f7ff ffd7     ")*.?) .S)).....
 8028f47:	2000 e8bd 81f0 4d43 60aa 7d91 7858 f361     . ....CM.`.}Xxa.
 8028f57:	1007 7058 4840 f8c3 0067 f7ff fd48 f7ff     ..Xp@H..g...H...
 8028f67:	fd95 f2af 018f 2018 f7fc ff00 7028 f000     ....... ....(p..
 8028f77:	f920 483a f7ff fcbe e00a 4610 f7fc fd6f      .:H.......F..o.
 8028f87:	f3c7 0102 f000 ffe0 e002 0b20 f8c3 0067     .......... ...g.
 8028f97:	4620 e7d6 4610 f7fc fd62 4f2d 0004 f107      F...F..b.-O....
 8028fa7:	076c d013 2220 2100 4638 f640 334f 4798     l... ".!8F@.O3.G
 8028fb7:	2100 2315 fb01 f003 eb04 0240 7950 280f     .!.#......@.Py.(
 8028fc7:	dc04 1c49 f827 2010 2906 dbf3 b672 7930     ..I.'.. .)..r.0y
 8028fd7:	b990 78b0 b980 b662 b114 481d 306c e000     ...x..b....Hl0..
 8028fe7:	2000 f000 f8c9 b10c 2001 e000 2000 f887     . ....... ... ..
 8028ff7:	0020 f241 004c e01b 2c00 d004 f04f 0001      .A.L....,..O...
 8029007:	e003 e00a e021 f04f 0000 f887 0021 d001     ....!.O.....!...
 8029017:	f04f 0500 f887 5022 e00e b97f b672 78f0     O....."P....r..x
 8029027:	b148 b662 2000 70b0 70f0 f000 fdfb 204c     H.b.. .p.p....L 
 8029037:	f7fc fd82 e784 7175 b662 e781 2f02 d1f9     ......uqb..../..
 8029047:	7077 7135 f000 ff5d e77a f001 f835 e777     wp5q..].z...5.w.
 8029057:	0020 ec65 0020 945a 0700 feff 0020 7c66      .e. .Z..... .f|
 8029067:	4840 f04f 4180 6800 f990 203e 2a00 db0a     @HO..A.h..> .*..
 8029077:	220a f8a1 2b2a f990 003e 2158 f100 4080     ."..*+..>.X!...@
 8029087:	f880 1200 4770 f990 003f 2800 dbfa 4b36     ....pG..?..(..6K
 8029097:	f04f 32ff 601a f8a1 0128 200d f8a1 0b2a     O..2.`..(.. ..*.
 80290a7:	4770 e92d 41f0 482f 237d 6800 7d81 f890     pG-..A/H}#.h.}..
 80290b7:	203c 4359 b90a 011a e001 f44f 727a eb02     < YC......O.zr..
 80290c7:	0141 0449 0c0a 4929 4d29 f990 603e 880b     A.I...)I)M..>`..
 80290d7:	8829 f04f 4480 2e00 db06 0998 07c0 d03e     ).O..D........>.
 80290e7:	1888 f8a4 0b4a e03a f990 003f 2800 db36     ....J.:...?..(6.
 80290f7:	f8b4 0b4a 4e1c 6834 2c00 db0b 4284 d009     ..J..N4h.,...B..
 8029107:	1a44 3408 b2a4 fbb4 f7f2 fb02 4217 3a08     D..4.........B.:
 8029117:	4411 8029 6030 4817 7800 2801 d11f eb00     .D).0`.H.x.(....
 8029127:	1093 f44f 717f fbb0 f2f1 fb01 0412 200a     ..O..q......... 
 8029137:	fb94 f1f0 fb00 4011 2505 b930 f7ff fcab     .......@.%0.....
 8029147:	fbb0 f1f5 fb05 0011 7130 fb94 f0f5 fb05     ........0q......
 8029157:	4010 7931 4288 d102 2001 e8bd 81f0 2000     .@1y.B... ..... 
 8029167:	e7fb 0000 0020 9c5a 0020 a75a 0020 a267     .... .Z. .Z. .g.
 8029177:	0020 ac5a 0020 a05a b510 4aff b283 8193      .Z. .Z....J....
 8029187:	2102 ebc1 04c1 eb02 0444 1c49 81a3 2908     .!......D.I....)
 8029197:	ddf7 2800 d00c 210a 2380 eb00 0241 8812     ...(...!.#..A...
 80291a7:	b11a f042 5200 f882 3025 1c49 290f ddf4     ..B..R..%0I..)..
 80291b7:	bd10 e92d 47f0 4ef1 49f1 6830 f890 003c     ..-..G.N.I0h..<.
 80291c7:	0100 7008 48ec 2282 2100 3882 f640 374f     ...p.H.".!.8@.O7
 80291d7:	47b8 4ce9 3c82 7820 f020 00c0 b2c0 f020     .G.L.< x ..... .
 80291e7:	000f 1c40 7020 7960 2004 7160 7aa0 f020     ..@. p`y. `q.z .
 80291f7:	00c0 b2c0 f040 0010 b2c0 f020 000f 1c80     ....@..... .....
 8029207:	72a0 7d20 f020 00c0 3080 f040 0010 b2c0     .r } ....0@.....
 8029217:	f020 000f 1cc0 7520 f7fd fea2 7801 0609      ..... u.....x..
 8029227:	d503 6830 f990 001a e001 f990 0003 f7fc     ..0h............
 8029237:	fc39 f814 1f1e 4dd0 f021 01c0 3180 f041     9......M!....1A.
 8029247:	0120 b2c9 f041 0110 b2c9 f021 010f 1d09      ...A.....!.....
 8029257:	7021 6831 f44f 7387 f891 2040 7a21 f362     !p1hO..s..@ !zb.
 8029267:	0102 7221 7260 48c4 80e0 3c1e 2004 eb00     ..!r`r.H...<. ..
 8029277:	0180 f814 2011 f022 02c0 3280 f042 0210     ..... "....2B...
 8029287:	f804 2011 f814 2011 f022 020f 1d52 f804     ... ... "...R...
 8029297:	2011 ebc0 02c0 eb05 0242 3a2a eb04 0141     . ......B.*:..A.
 80292a7:	80ca 1c40 810b 280b dde1 f814 0f78 227e     ..@....(....x.~"
 80292b7:	f020 00c0 b2c0 f020 000f 7020 2100 48ae      ..... ... p.!.H
 80292c7:	47b8 48ad f8df c2bc 308a 8068 301a 80a8     .G.H.....0h..0..
 80292d7:	301a 8168 3840 b283 81eb 308a 8228 301a     .0h.@8.....0(..0
 80292e7:	8268 2005 240d f10c 0e9c f10c 08ea ebc0     h.. .$..........
 80292f7:	01c0 fb00 f204 eb05 0141 eb0c 0942 f821     ........A...B.!.
 8029307:	3d2a f1a9 0982 f8a1 9002 eb02 090e f1a9     *=..............
 8029317:	0941 eb08 0282 f8a1 9004 f5a2 7282 1c40     A............r@.
 8029327:	814a 280b dde3 4894 220c 2100 307e 47b8     J..(...H.".!~0.G
 8029337:	4891 f44f 3880 307e f8d8 10ac 6001 7981     .HO..8~0.....`.y
 8029347:	251a f041 0104 b2c9 f041 0103 7181 71c5     .%A.....A....q.q
 8029357:	8084 2126 7281 2134 72c1 2100 462a 300c     ..&!.r4!.r.!*F.0
 8029367:	47b8 6830 f890 203c 4883 308a 7801 f362     .G0h..< .H.0.xb.
 8029377:	1105 7001 f8d8 10ac f8c0 1002 7981 221a     ...p.........y."
 8029387:	f021 01c0 3140 f041 0120 7181 71c5 2100     !...@1A. ..q.q.!
 8029397:	301a 47b8 487b 6831 388c 7d8b 7b02 f363     .0.G{H1h.8.}.{c.
 80293a7:	1207 7302 7b8b 7c02 f363 1245 7402 7b0b     ...s.{.|c.E..t.{
 80293b7:	7c42 f363 0200 7442 7ecb 7c02 f363 02c3     B|c...Bt.~.|c...
 80293c7:	7402 7b4a 7c01 f362 1104 7401 e8bd 87f0     .tJ{.|b....t....
 80293d7:	486d 8800 496d 8008 4770 e92d 47f0 f001     mH..mI..pG-..G..
 80293e7:	fac0 f8df 9198 4607 f8d9 1000 4d65 8a08     .......F....eM..
 80293f7:	3d88 b284 07f8 f04f 0800 d015 f891 003c     .=....O.......<.
 8029407:	2800 4620 d102 f2a0 4074 e000 388c 17c1     .( F....t@...8..
 8029417:	eb00 60d1 f3c0 104f f805 0b01 f8d9 0000     ...`..O.........
 8029427:	8a40 4420 b284 e001 f805 8b01 2602 4237     @. D.........&7B
 8029437:	d033 f8d9 0000 f890 003c 2800 4620 d102     3.......<..( F..
 8029447:	f2a0 4074 e000 388c 17c1 eb00 60d1 f3c0     ..t@...8.....`..
 8029457:	104f f805 0b01 f8d9 0000 8a80 4420 b284     O........... D..
 8029467:	fa96 f0a6 fab0 f080 f001 fa26 8980 f8d9     ..........&.....
 8029477:	3000 f400 417c 2001 e00c fa91 f2a1 fab2     .0..|A. ........
 8029487:	f282 fa00 fc02 eb03 0242 8b92 ea21 010c     ........B...!...
 8029497:	4422 b294 2900 d1f0 e001 f805 8b01 0670     "D...)........p.
 80294a7:	0e06 d1c4 f8d9 0000 7b00 2800 d08e 2001     .........{.(... 
 80294b7:	bf00 2800 d08a f7fe f93c 0005 d086 4e2e     ...(....<......N
 80294c7:	2401 4620 f001 f9f8 6800 42a8 d107 f7fe     .$ F.....h.B....
 80294d7:	f9b7 ebc4 01c4 eb06 0141 82c8 e005 ebc4     ........A.......
 80294e7:	00c4 eb06 0040 f8a0 8016 1c64 2c07 dde8     ....@.....d..,..
 80294f7:	e76c 4822 227d 6800 f890 103c 7d80 4350     l."H}".h..<..}PC
 8029507:	b909 0111 e001 f44f 717a eb01 0040 491f     ......O.zq..@..I
 8029517:	0440 880a eb02 4010 8008 491d 4a16 f8b1     @......@...I.J..
 8029527:	1065 1a40 f5a0 71be 3a82 82d1 388c 8410     e.@....q.:...8..
 8029537:	4770 b5f0 4a11 4913 6814 4a14 3988 2004     pG...J.I.h.J.9. 
 8029547:	8815 f240 4684 279c f5a1 7c95 780a f894     ..@..F.'...|.x..
 8029557:	303c b913 eb06 1242 e001 eb07 1242 b292     <0....B.....B...
 8029567:	442a eb00 0380 3afa eb0c 0343 805a 1c49     *D.....:..C.Z.I.
 8029577:	1c40 280b ddea bdf0 0020 fe66 0020 9c5a     @..(.... .f. .Z.
 8029587:	0020 407f 0020 2e68 0040 020b 0020 ac5a      ..@ .h.@... .Z.
 8029597:	0020 ec65 4810 227d 6800 f890 103c 7d80      .e..H}".h..<..}
 80295a7:	4350 b909 0111 e001 f44f 717a eb01 0040     PC......O.zq..@.
 80295b7:	490a 0440 880a eb02 4010 8008 4770 b500     .I@......@..pG..
 80295c7:	f7ff ffe8 4805 4906 8800 388c 82c8 bd00     .....H.I...8....
 80295d7:	4802 8800 4770 0000 0020 9c5a 0020 ac5a     .H..pG.. .Z. .Z.
 80295e7:	0020 7c66 48ff 2101 8800 eb01 1090 2105      .f|.H.!.......!
 80295f7:	fbb0 f2f1 fb01 0012 49fb 2804 da02 4408     .........I.(...D
 8029607:	7e00 4770 48f8 7c49 301c 5c08 4770 e92d     .~pG.HI|.0.\pG-.
 8029617:	5ff0 2500 4681 4688 462c f1c0 0706 f04f     ._.%.F.F,F....O.
 8029627:	0b01 f8df a3c4 e01d eb0a 0004 7f06 eb06     ................
 8029637:	0046 eb0a 0140 3140 7848 788a 78c9 4310     F...@.@1Hx.x.x.C
 8029647:	4308 fa0b f109 1e49 4201 d10a f7ff fa02     .C....I..B......
 8029657:	2100 2f00 dd00 4639 4288 da02 fa0b f006     .!./..9F.B......
 8029667:	4305 1c64 f89a 0010 42a0 dcdd 48de f89a     .Cd......B...H..
 8029677:	1011 301c 5c08 fa0b fb00 48dc ea25 050b     ...0.\.....H%...
 8029687:	f8d0 1067 4029 f1b8 0f01 db14 f8da 0000     ..g.)@..........
 8029697:	0043 ea40 0280 ea43 0350 431a ea42 0090     C.@...C.P..CB...
 80296a7:	ea21 0200 f8da 000c 0043 ea43 0350 4303     !.......C.C.P..C
 80296b7:	ea32 0003 d129 f1b8 0f02 db0f f8da 0000     2...)...........
 80296c7:	0043 ea40 0280 ea43 0350 431a ea42 0290     C.@...C.P..CB...
 80296d7:	ea21 0002 f8da 200c 4390 d116 f1b8 0f03     !...... .C......
 80296e7:	db0b f8da 0000 0042 ea42 0250 4302 ea21     ......B.B.P..C!.
 80296f7:	0002 f8da 200c 4390 d107 f1b8 0f04 db0d     ..... .C........
 8029707:	f8da 200c ea31 0002 d008 f7ff f9cb eb00     ... 1...........
 8029717:	0040 eb0a 0040 3040 e8bd 9ff0 2000 e7fb     @...@.@0..... ..
 8029727:	e92d 47f0 22b8 2100 48af f640 334f 4798     -..G.".!.H@.O3.G
 8029737:	49af 7e88 f020 000f 1d80 7688 48ad 6800     .I.~ ......v.H.h
 8029747:	6880 4605 f7ff f986 4607 f8df 829c 1f00     .h.F.....F......
 8029757:	f8df a298 f888 0010 f8da 0067 f04f 0901     ..........g.O...
 8029767:	43c6 2400 e030 2c04 4628 da15 43b0 d103     .C.$0..,(F...C..
 8029777:	f8da 0067 4028 43c6 ea25 0006 f7ff f992     ..g.(@.C%.......
 8029787:	f8d8 1000 fa09 f200 4311 f8c8 1000 2107     .........C.....!
 8029797:	4081 ea46 0661 e008 f7ff f984 f8d8 1004     .@F.a...........
 80297a7:	fa09 f200 4311 f8c8 1004 fa09 f100 438d     .....C.........C
 80297b7:	eb08 0104 7608 f881 002c eb00 0040 eb08     .....v..,...@...
 80297c7:	0040 f880 4040 1c64 42bc dbcc e8bd 87f0     @...@@d..B......
 80297d7:	b510 4603 f7ff ff06 2154 eb01 0280 4984     ...F....T!.....I
 80297e7:	300c 740a 76cb e8bd 4010 f7ff b91b e92d     .0.t.v...@....-.
 80297f7:	4ff8 f8df 91f4 f8df b1f4 f899 7016 f899     .O...........p..
 8029807:	5012 eb07 0047 eb09 0440 f899 6013 3440     .P..G...@....`@4
 8029817:	b1f5 42ae d103 78a0 f040 0001 70a0 4630     ...B...x@....p0F
 8029827:	f7ff f918 eb00 0840 4628 f7ff f913 4580     ......@.(F.....E
 8029837:	db03 78e0 f040 0001 70e0 b94e 486d f89b     ...x@....pN.mH..
 8029847:	1000 6800 7bc0 ebb0 1f11 d101 2000 e003     ...h.{....... ..
 8029857:	f899 0014 b110 1e40 f889 0014 f04f 0a01     ......@.....O...
 8029867:	f8d9 0000 4d60 fa0a f607 4206 f105 051c     ....`M.....B....
 8029877:	d04b f899 0014 2800 d17b 7867 f894 8002     K......({.gx....
 8029887:	78e0 9000 ea47 0008 f000 001f f7ff f8e2     .x..G...........
 8029897:	43f9 fa91 f1a1 fab1 f181 2902 d211 ea6f     .C.........)..o.
 80298a7:	0108 fa91 f1a1 fab1 f181 2903 d209 9900     ...........)....
 80298b7:	43c9 fa91 f1a1 fab1 f181 2904 d201 2803     .C.........)...(
 80298c7:	d306 4652 2804 d200 2202 4610 2104 e005     ..RF.(...".F.!..
 80298d7:	f8d9 000c 4206 d004 2103 2004 f7ff fe97     .....B...!. ....
 80298e7:	b940 f8db 0067 4206 d14c 2104 2000 f7ff     @...g..BL..!. ..
 80298f7:	fe8e b3f0 4601 4620 f000 f96e 200b f7ff     .....F F..n.. ..
 8029907:	f891 2005 f889 0014 e03c f899 0010 f899     ... ....<.......
 8029917:	1011 1c49 fbb1 f2f0 fb00 1112 b2c9 f889     ..I.............
 8029927:	1011 5d49 f8db 2067 fa0a f101 4211 d0ee     ..I]..g .....B..
 8029937:	f899 0017 b110 1e40 f889 0017 7860 07c0     ......@.....`x..
 8029947:	d020 f899 0017 b9a0 f7ff f8a5 f000 000f      ...............
 8029957:	3008 f889 0017 f8d9 0004 43b0 f7ff f8a2     .0.........C....
 8029967:	eb00 0140 eb09 0341 f994 1000 f993 2040     ..@...A.......@ 
 8029977:	e000 e007 7022 f883 1040 4449 7608 eb09     ...."p..@.ID.v..
 8029987:	0002 7607 f7ff fe2e b2c0 4c16 f889 0016     ...v.......L....
 8029997:	8821 f44f 737f eb0a 1291 fbb2 f6f3 fb03     !.O..s..........
 80299a7:	2216 f362 118f 4b12 8021 7f9a f899 6015     ."b....K!......`
 80299b7:	f042 0120 b10e f022 0120 eb00 0040 eb09     B. ...". ...@...
 80299c7:	0040 7799 3040 7841 0049 7041 7881 0049     @..w@0AxI.Ap.xI.
 80299d7:	7081 78c1 0049 70c1 f000 ffc3 f020 0001     .p.xI..p.... ...
 80299e7:	e00a 0000 0020 a267 0020 506a 0020 ec65     .... .g. .jP .e.
 80299f7:	0020 7c66 0020 9c5a f889 0012 2100 f889      .f| .Z......!..
 8029a07:	0013 4608 2214 eb09 0300 7e1b 1c40 4419     ...F.".....~@..D
 8029a17:	4351 2804 dbf7 f899 0011 5d40 4408 6821     QC.(......@].D!h
 8029a27:	f360 0115 6021 e8bd 8ff8 e92d 41f0 4e78     `...!`....-..AxN
 8029a37:	4d78 7db4 eb04 0044 eb06 0240 f995 0018     xM.}..D...@.....
 8029a47:	3240 4975 2300 6809 27fe f991 1017 1a41     @2uI.#.h.'....A.
 8029a57:	316e 4618 ebb7 0f41 db04 ea4f 0c41 f1bc     n1.F..A...O.A...
 8029a67:	0f00 dd04 4638 ebb7 0f41 db00 0048 f995     ....8F..A...H...
 8029a77:	1018 f995 501b 42a9 dd05 7851 f041 0101     .....P.B..QxA...
 8029a87:	7051 2102 e002 7d71 b109 1e49 7571 4963     Qp.!..q}..I.qucI
 8029a97:	f240 35f9 8809 ebb5 1f91 d101 2103 7571     @..5.........!qu
 8029aa7:	4d5f 68b1 f8d5 5067 2701 4029 60b1 7915     _M.h..gP.')@.`.y
 8029ab7:	4285 da0a 283c dd08 7955 2d08 d203 fa07     .B..<(..Uy.-....
 8029ac7:	f504 4329 60b1 7153 e00d 7951 2920 d20a     ..)C.`Sq..Qy )..
 8029ad7:	1c49 b2c9 7151 2920 d105 68b5 fa07 f104     I...Qq )...h....
 8029ae7:	438d 60b5 7110 7911 1f80 f1a1 0c01 4605     .C.`.q.y.......F
 8029af7:	4584 dd00 1e48 2800 dd03 462b 45ac dd00     .E..H..(..+F.E..
 8029b07:	1e4b 7113 2300 f896 c010 1e58 4619 f10c     K..q.#....X..F..
 8029b17:	0e04 e013 1875 f895 502c 42a5 d100 460b     ....u...,P.B...F
 8029b27:	2800 da0a eb05 0545 eb06 0545 f892 8004     .(....E...E.....
 8029b37:	f895 5044 45a8 d900 4608 1c49 458e dce9     ..DP.E...FI..E..
 8029b47:	2800 da01 f10c 0004 4298 dc08 e004 18f1     .(.......B......
 8029b57:	f811 2f2b 704a 1e5b 4283 dcf8 e008 1e40     ..+/Jp[..B....@.
 8029b67:	e004 18f1 312c 784a 700a 1c5b 4283 dbf8     ....,1Jx.p[..B..
 8029b77:	4430 2100 f880 402c 460b 4608 1832 f892     0D.!..,@.F.F2...
 8029b87:	402c fa07 f204 68b4 4222 d003 4311 1c5b     ,@.....h"B...C[.
 8029b97:	2b04 d002 1c40 2814 dbf0 60f1 e8bd 81f0     .+..@..(...`....
 8029ba7:	b510 4604 f000 fe88 4a1a eb04 0184 eb02     ...F.....J......
 8029bb7:	0141 f891 3029 2101 4a15 40a1 2b02 d103     A...)0.!.J.@.+..
 8029bc7:	7cd0 4388 74d0 bd10 b110 7b80 280a d9fa     .|.C.t.....{.(..
 8029bd7:	7c90 4388 7490 e7f3 b530 f990 3000 f991     .|.C.t..0....0..
 8029be7:	2000 7002 480a 700b 4403 1884 7e19 7e22     . .p.H.p.D...~"~
 8029bf7:	761a 7621 2401 6845 fa04 f302 439d 408c     .v!v.$Eh.....C.@
 8029c07:	4325 6045 6801 43a1 4319 6001 bd30 0000     %CE`.h.C.C.`0...
 8029c17:	0020 506a 0020 7c66 0020 9c5a 0020 a267      .jP .f| .Z. .g.
 8029c27:	0020 ec65 49be 780a 4282 d00f 4abd 7008      .e..I.x.B...J.p
 8029c37:	7811 f360 0103 7011 4611 0409 f000 000f     .x`....p.F......
 8029c47:	ea41 3000 f040 0012 f7fb bf76 4770 e92d     A..0@.....v.pG-.
 8029c57:	41f0 f000 fe8a 4eb4 4fb2 0005 d123 f000     .A.....N.O..#...
 8029c67:	fbda 2800 d060 48b1 8a40 f040 5400 4620     ...(`..H@.@..T F
 8029c77:	f000 fdaa 2014 f7fe fedf 7c30 f020 0080     ..... ....0| ...
 8029c87:	7430 7838 7c31 0900 0400 09c9 ea40 3001     0t8x1|......@..0
 8029c97:	f040 0016 f7fb ff50 7b20 07c0 d044 6820     @.....P. {..D. h
 8029ca7:	f7fd fd1b e040 48a2 7fc0 2810 d03c 2001     ....@..H...(<.. 
 8029cb7:	f7fe feb0 4c9f 2003 7821 f7fe fea1 f04f     .....L. !x....O.
 8029cc7:	0800 f884 8000 4628 f000 fdf6 4604 4628     ......(F.....F(F
 8029cd7:	f000 fbd0 b128 f884 800e 4628 f000 fbe4     ....(.....(F....
 8029ce7:	e01f 2002 f7fe fe96 7ba0 1c40 b2c0 73a0     ... .....{@....s
 8029cf7:	2880 d916 2015 f7fe fe9f 7be0 07c0 d002     .(... .....{....
 8029d07:	6820 f7fd fcf8 4628 f000 fde1 7838 7c31      h....(F....8x1|
 8029d17:	0900 0400 09c9 ea40 3001 f040 0016 f7fb     ......@..0@.....
 8029d27:	ff0b b2e8 f7ff ff3c f000 fe27 2800 d106     ......<...'..(..
 8029d37:	f000 fcaf e8bd 41f0 487f f7fe be0e e8bd     .......A.H......
 8029d47:	81f0 b510 f7ff fe71 f2af 00fd e8bd 4010     ......q........@
 8029d57:	f7fe be03 b510 f7ff fe68 e8bd 4010 4876     ........h....@vH
 8029d67:	f7fe bdfb e92d 47f0 4d74 f895 1021 2601     ....-..GtM..!..&
 8029d77:	f241 004c 2400 b139 f885 4021 f885 6020     A.L..$9...!@.. `
 8029d87:	f7fb feda 4628 e009 f895 1022 b141 f885     ....(F....".A...
 8029d97:	4022 f885 4020 f7fb fecf 2000 f7ff f9ec     "@.. @..... ....
 8029da7:	485f 7941 4f5f b1b9 7144 7084 2000 f7fc     _HAy_O..Dq.p. ..
 8029db7:	f840 2000 f7ff ff36 f7fd fcb6 7838 0901     @.. ..6.....8x..
 8029dc7:	d005 f020 00f0 7038 2016 f7fb feb5 e8bd     .. ...8p. ......
 8029dd7:	47f0 204c f7fb beb0 7901 b1c9 7104 7086     .GL .....y...q.p
 8029de7:	f7ff f93e f000 fc92 f7ff fc9a 2001 f7ff     ..>.......... ..
 8029df7:	ff19 204c f7fb fea0 f2af 0097 f7fe fdad     ..L ............
 8029e07:	2100 2001 f7fe fdac e8bd 47f0 f7ff bae0     .!. .......G....
 8029e17:	2002 f7fc f80e f7ff f944 4e49 0004 6830     . ......D.IN..0h
 8029e27:	d002 f990 0019 e001 f990 0018 f7ff fcd0     ................
 8029e37:	f8df 80f4 f240 31fa f8b8 0000 ebb1 1f90     ....@..1........
 8029e47:	d108 f7ff fba7 f7ff fcd2 2100 2001 f7fe     ...........!. ..
 8029e57:	fd87 e00e f241 0904 b174 f7ff fbb0 f7ff     ....A...t.......
 8029e67:	fcc6 2102 4648 f7fe fd7b f2af 1017 f7fe     ...!HF..{.......
 8029e77:	fd74 f000 f9f0 e02e 6830 4c32 f890 003c     t.......0h2L..<.
 8029e87:	f080 0101 7820 f361 1005 7020 f7ff fb31     .... xa... p..1.
 8029e97:	210a 4648 f7fe fd64 f000 fc51 f7ff fca7     .!HF..d...Q.....
 8029ea7:	f7ff fa9b f7ff fb45 f000 fd5b 0100 f44f     ......E...[...O.
 8029eb7:	5280 2100 f7fe fd5c f2af 1079 f7fe fd4d     .R.!..\...y...M.
 8029ec7:	f000 f9c9 6830 f890 103c 7820 f361 1005     ....0h..<. xa...
 8029ed7:	7020 f000 fbbd 7838 0900 d101 2001 e009      p....8x..... ..
 8029ee7:	f895 0020 b118 f898 0010 0640 d501 2002     .. .......@.... 
 8029ef7:	e000 200c f7ff fe96 e8bd 47f0 2000 f7fe     ... .......G. ..
 8029f07:	bd89 4907 2000 4a07 7008 7811 f360 0103     ...I. .J.p.x`...
 8029f17:	7011 4908 7008 f2af 10b3 f7fe bd14 0000     .p.I.p..........
 8029f27:	0020 a05a 0020 ec65 0020 a267 0020 fe66      .Z. .e. .g. .f.
 8029f37:	0020 7c66 0020 ae5a 0000 4dc4 0020 5866      .f| .Z....M .fX
 8029f47:	0020 9c5a 0020 8867 b570 4604 460d 2228      .Z. .g.p..F.F("
 8029f57:	2100 488d f640 334f 4798 488c 4b8a 6800     .!.H@.O3.G.H.K.h
 8029f67:	f890 203d 488a 7d81 f362 1186 7581 761d     ..= .H.}b....u.v
 8029f77:	7c01 f365 0102 7401 2000 e00d eb03 0180     .|e....t. ......
 8029f87:	7966 784a 1c40 f366 0203 704a 78e6 78ca     fyJx@.f...Jp.x.x
 8029f97:	1da4 f366 0202 70ca 42a8 dbef bd70 b570     ..f....p.B..p.p.
 8029fa7:	4a79 7e51 b141 1e49 7651 2000 f000 fc84     yJQ~A.I.Qv. ....
 8029fb7:	7bc0 f3c0 0042 bd70 8b51 f060 03fe 4019     .{..B.p.Q.`....@
 8029fc7:	8351 b289 2301 b9f9 f244 0101 f020 0001     Q....#..D... ...
 8029fd7:	4301 7e10 b28c fa03 f100 f06f 05ff eb05     .C.~......o.....
 8029fe7:	2101 430c 496b 8354 7809 2402 eb04 1111     .!.CkIT..x.$....
 8029ff7:	4408 2105 fbb0 f4f1 fb01 0014 b908 2001     .D.!........... 
 802a007:	e000 2000 f882 0027 f892 0027 b118 2000     ... ..'...'.... 
 802a017:	f882 0027 bd70 8b51 fa91 f0a1 fab0 f080     ..'.p.Q.........
 802a027:	4083 4399 8351 bd70 b570 4c59 280f 7ba1     .@.CQ.p.p.YL.(.{
 802a037:	f360 1107 73a1 4955 6809 d238 e8df f000     `....sUI.h8.....
 802a047:	0a08 0a0a 0a0a 0a0a 0f0f 0f0f 0f0f 0038     ..............8.
 802a057:	6808 e02e f000 fc30 b358 6800 e029 494a     .h....0.X..h).JI
 802a067:	3808 eb01 0180 7848 2204 f3c0 0503 4848     .8....Hx."....HH
 802a077:	f640 3347 3012 4798 4846 f8b0 1003 7d60     @.G3.0.GFH....`}
 802a087:	40e9 f361 1004 2101 7560 2d0a da00 2100     .@a....!`u.-...!
 802a097:	2200 4610 f7fe fbac 8a61 f360 114f 8261     .".F....a.`.O.a.
 802a0a7:	4628 f7fe fbbd 8aa1 f360 114f 82a1 bd70     (F......`.O...p.
 802a0b7:	6848 f8c4 0012 bd70 79c3 4933 2201 b13b     Hh....p..y3I.";.
 802a0c7:	b672 f881 2023 8803 838b 8843 83cb b662     r...# ....C...b.
 802a0d7:	7a03 b133 b672 f881 2024 7903 f881 3020     .z3.r...$ .y.. 0
 802a0e7:	b662 7a43 b133 b672 f881 2025 7943 f881     b.Cz3.r...% Cy..
 802a0f7:	3021 b662 7a83 2b00 d005 b672 3122 710a     !0b..z.+..r."1.q
 802a107:	7980 7008 b662 4770 b530 4b1f 4a20 f893     .y.pb.pG0..K J..
 802a117:	0023 2100 b190 f883 1023 4c1e 8b98 f8b4     #..!....#..L....
 802a127:	5001 f360 050b f8a4 5001 8994 f360 040b     .P`......P..`...
 802a137:	8194 8bdc 89d0 f364 000b 81d0 f893 0024     ......d.......$.
 802a147:	b138 f883 1024 f893 4020 7c10 f364 10c7     8...$... @.|d...
 802a157:	7410 f893 0025 b150 4c0f f883 1025 79a0     .t..%.P..L..%..y
 802a167:	f893 5021 f020 00c0 b905 3040 71a0 f893     ..!P .....@0.q..
 802a177:	0026 2800 d006 3322 7119 7819 7c10 f361     &..(.."3.q.x.|a.
 802a187:	1086 7410 bd30 0000 0020 086b 0020 9c5a     ...t0... .k. .Z.
 802a197:	0020 a267 0020 ec65 0020 8867 e92d 47f0      .g. .e. .g.-..G
 802a1a7:	4681 460f 88c0 2119 4348 49fd 4690 fbb1     .F.F...!HC.I.F..
 802a1b7:	f6f0 b672 48fb 8985 f8b0 a4e0 b662 8804     ..r..H......b...
 802a1c7:	f7ff fa06 f899 2003 eba0 000a b280 4629     ....... ......)F
 802a1d7:	f04f 0c64 2a04 d008 fb00 f10c fbb1 f1f6     O.d..*..........
 802a1e7:	4429 fbb1 f3f4 fb04 1113 b28b 49ee 6809     )D...........I.h
 802a1f7:	f8b1 e010 7ec9 4470 b280 fb00 f00c fbb0     .....~pD........
 802a207:	f0f6 4428 fbb0 f5f4 fb04 0015 b280 3080     ..(D...........0
 802a217:	fbb0 f5f4 fb04 0015 0980 2590 b901 2580     ...........%...%
 802a227:	18e1 1b49 fb91 f3f4 fb04 1113 17cb eb01     ..I.............
 802a237:	6193 1189 2a04 d001 2a05 d104 6038 f8c8     .a...*...*..8`..
 802a247:	1000 e8bd 87f0 0080 6038 2003 eb00 0081     ........8`. ....
 802a257:	f8c8 0000 e7f5 e92d 5ff0 f7ff ff55 f000     ......-.._..U...
 802a267:	fb80 f7ff fe9c f7ff fedf f7fd fa79 f8df     ............y...
 802a277:	8338 4604 f8d8 0000 7b00 b180 b17c 48cb     8..F.....{..|..H
 802a287:	7981 f041 0110 7181 48c9 8104 48c7 f7fe     .yA....q.H...H..
 802a297:	fc2c 7861 2206 eb02 0151 7001 e004 48c3     ,.ax."..Q..p...H
 802a2a7:	7981 f021 0110 7181 f8df b308 2600 f89b     .y!....q.....&..
 802a2b7:	0020 f8df a304 f04f 0901 b380 f8ba 0003      .....O.........
 802a2c7:	f400 457c e047 fa95 f0a5 fab0 f480 fa09     ..|EG...........
 802a2d7:	f704 43bd f83b 0014 f7fb fbc1 b3d8 2300     ...C;..........#
 802a2e7:	4619 f89a e000 e00c eb0a 1201 1d52 f8b2     .F..........R...
 802a2f7:	c00c ea17 0f0c d003 7bd1 f3c1 0342 e003     .........{..B...
 802a307:	1c49 ebb1 1f1e dbef 4aac ea44 1103 5591     I........JD....U
 802a317:	f890 1025 1c76 297b d902 2100 e00d e01c     ..%.v.{)...!....
 802a327:	f8d8 1000 eb01 0344 8b9c f891 1040 2305     ......D.....@..#
 802a337:	2901 d000 2302 435c 0a21 5591 7901 8a80     .)...#\C!..U.y..
 802a347:	1dc9 08cc 1c76 f040 5100 1990 4622 f640     ....v.@..Q.."F@.
 802a357:	3347 4798 4426 2d00 d1b5 4898 2180 4f93     G3.G&D.-...H.!.O
 802a367:	5581 79b8 1c76 f040 0008 71b8 4638 f7fe     .U.yv.@....q8F..
 802a377:	fbca 7006 79b8 f020 0007 71b8 f89b 0020     ...p.y ....q.. .
 802a387:	b3f0 f8ba 0003 b3d8 498d 2000 7008 4638     .........I. .p8F
 802a397:	f7fe fbca 4604 f8ba 0003 f3c0 0609 e033     .....F........3.
 802a3a7:	4630 f7fe fb7f fa09 f100 438e f83b 0010     0F.........C;...
 802a3b7:	f7fb fb55 0005 d027 7968 f8d8 1000 eb01     ..U...'.hy......
 802a3c7:	0040 8b81 f5b1 7f00 db01 f240 11ff 4a7c     @.........@...|J
 802a3d7:	4628 f7fe fcc8 8821 f360 0108 8021 7969     (F....!.`...!.iy
 802a3e7:	7820 f361 1007 7020 78e9 b2c0 f361 0043      xa... p.x..a.C.
 802a3f7:	f804 0b02 79b8 f04f 5100 eb01 00f0 e000     .....yO..Q......
 802a407:	e004 ea4f 7070 71b8 2e00 d1c9 e8bd 5ff0     ..O.pp.q......._
 802a417:	4866 f7fe bbaf b530 4965 486a 8a0a 8a49     fH....0.eIjH..I.
 802a427:	7843 f042 5200 f041 5100 2b02 d11a 7940     CxB..RA..Q.+..@y
 802a437:	0600 d517 7990 2203 ebb2 1f90 d112 485a     .....y."......ZH
 802a447:	6800 7b82 b11a 684a 6800 4282 d10a 4b5a     .h.{..Jh.h.B..ZK
 802a457:	2000 781a e009 eb03 1400 f8d4 4005 680d     . .x.........@.h
 802a467:	42ac d101 2000 bd30 1c40 ebb0 1f12 dbf2     .B... 0.@.......
 802a477:	2001 bd30 4a53 eb00 0180 3a28 eb02 0141     . 0.SJ....(:..A.
 802a487:	4a4b ebc0 00c0 eb02 0040 8a00 f891 1029     KJ......@.....).
 802a497:	f040 5000 2902 d105 7980 ebb1 1f90 d101     @..P.)...y......
 802a4a7:	2001 4770 2000 4770 e92d 5ff0 4945 4606     . pG. pG-.._EI.F
 802a4b7:	eb00 0080 3928 eb01 0a40 493d ebc6 00c6     ....(9..@.=I....
 802a4c7:	eb01 0440 340e 8860 f10a 0a28 f040 5700     ..@..4`...(.@..W
 802a4d7:	4630 f000 f9f1 4605 4833 6800 7b40 b168     0F.....F3H.h@{h.
 802a4e7:	88a0 b158 79b9 0689 d508 f89a 1005 0609     ..X..y..........
 802a4f7:	d504 f040 5100 4630 f7fd ff06 2001 bf00     ..@..Q0F..... ..
 802a507:	b150 8920 b140 79b8 06c0 d505 f89a 0005     P. .@..y........
 802a517:	0640 d501 f7fd f9a4 79b8 0700 d403 89a8     @........y......
 802a527:	f36f 0009 81a8 f8df 908c f899 0020 f04f     o........... .O.
 802a537:	0801 b3a0 79b8 0700 d557 f89a 0005 0680     .....y..W.......
 802a547:	d553 8960 f040 5400 4638 f7fe fadc 7802     S.`.@..T8F.....x
 802a557:	89a8 f36f 0009 81a8 e042 1c64 280a d244     ..o.....B.d..(D.
 802a567:	f839 1010 b1d9 1e52 89ab fa08 fc00 f3cc     9.....R.........
 802a577:	0c09 ea43 030c 81ab f839 0010 fa08 f106     ..C.....9.......
 802a587:	f040 5000 f890 3026 430b f880 3026 7901     @..P..&0.C..&0.y
 802a597:	8b40 1dc9 08cb f040 5000 2100 e01d e024     @.....@..P.!..$.
 802a5a7:	eb0b 00c2 0040 2206 0020 9c5a 0020 8867     ....@.." .Z. .g.
 802a5b7:	0020 fe66 0020 5866 0020 ec65 0020 bc67      .f. .fX .e. .g.
 802a5c7:	0020 ae5a 0020 a466 f810 c001 f814 eb01      .Z. .f.........
 802a5d7:	ea0c 0c0e f800 c001 1c49 4299 dbf4 1ad2     ........I..B....
 802a5e7:	7820 2880 d001 2a00 dcb7 f899 0020 2800      x.(...*.... ..(
 802a5f7:	d02c 4638 f7fe fa98 2400 4682 46a3 e020     ,.8F.....$.F.F .
 802a607:	f81a 0014 0900 fa08 f600 f416 4f7c d017     ............|O..
 802a617:	f839 0010 f7fb fa23 b190 89a9 420e d002     9.....#......B..
 802a627:	f880 b025 e00c 4a37 f8b2 3003 421e d107     ..%...7J...0.B..
 802a637:	4331 81a9 f8b2 1003 4331 f8a2 1003 e7ef     1C......1C......
 802a647:	1c64 79b8 f3c0 0002 42a0 dcd9 e8bd 9ff0     d..y.....B......
 802a657:	e92d 41f0 4e2c f896 0020 2800 d017 2500     -..A,N.. ..(...%
 802a667:	462f f640 384f f836 0015 b168 f040 5400     /F@.O86...h.@..T
 802a677:	7920 1dc0 08c2 8b60 21ff f040 5000 47c0      y....`..!@..P.G
 802a687:	f814 0f26 7060 7027 1c6d 2d09 ddeb e8bd     ..&.`p'pm..-....
 802a697:	81f0 b5f0 4e1c f896 0020 2800 d031 2100     .....N.. ..(1..!
 802a6a7:	f836 0011 b330 f040 5000 8ac2 f890 3028     6...0.@..P....(0
 802a6b7:	f042 5200 b113 1e5b f880 3028 f890 3026     B..R..[...(0..&0
 802a6c7:	b1cb f890 4028 b91c f890 4027 439c d112     ....(@....'@.C..
 802a6d7:	7903 8b40 331f 095b f040 5400 2000 e007     .y@..3[.@..T. ..
 802a6e7:	eb04 0580 682d eb02 0780 43ed 603d 1c40     ....-h.....C=`@.
 802a6f7:	4298 dbf5 e002 2203 f880 2028 1c49 2909     .B....."..( I..)
 802a707:	ddce bdf0 0020 ec65 0020 5866 b570 4ca3     .... .e. .fXp..L
 802a717:	2260 7820 2100 f020 00f0 7020 1d60 f640     `" x.! ... p`.@.
 802a727:	354f 47a8 2208 f04f 31ff 489d 47a8 2000     O5.G."O..1.H.G. 
 802a737:	f8a4 0003 499a 2001 1e89 7008 bd70 b5f0     .....I. ...pp...
 802a747:	4997 4e96 1e89 7808 7048 4996 0842 7c48     .I.N...xHp.IB.H|
 802a757:	f8df c254 f362 0047 7448 2000 f8a6 0003     ..T.b.G.Ht. ....
 802a767:	4603 2701 e02b eb06 1103 f89c 0020 1d49     .F.'+....... .I.
 802a777:	b1f0 8988 f400 407c e018 fa90 f2a0 fab2     ......|@........
 802a787:	f282 fa07 f402 f83c 2012 43a0 f052 5200     ......<.. .CR..R
 802a797:	d00c f892 5025 2d80 d208 1c6d b2ed f882     ....%P.-..m.....
 802a7a7:	5025 2d80 d102 898a 43a2 818a 2800 d1e4     %P.-.....C...(..
 802a7b7:	f8b6 0003 8989 4308 f8a6 0003 1c5b 7830     .......C....[.0x
 802a7c7:	ebb3 1f10 dbcf bdf0 b5f0 4974 6802 780b     ..........tI.h.x
 802a7d7:	f023 030f 440b f8c3 2005 780b 6842 f023     #....D... .xBh#.
 802a7e7:	030f 440b f8c3 2009 780b 6882 f023 030f     ...D... .x.h#...
 802a7f7:	440b f8c3 200d 7b02 f3c2 0400 780a f022     .D... .{.....x".
 802a807:	020f 440a 7d13 f364 0300 7513 7b02 f3c2     ...D.}d....u.{..
 802a817:	0440 780a f022 020f 440a 7d13 f364 1304     @..x"....D.}d...
 802a827:	7513 780b 2200 f023 030f 440b f8a3 2011     .u.x."#....D... 
 802a837:	780b f023 030f 440b 74da 7b00 0780 d50c     .x#....D.t.{....
 802a847:	20c0 f8a1 0065 4857 7d82 f042 0280 7582     . ..e.WH.}B....u
 802a857:	4856 7802 f042 0220 7002 4d51 780b 1ead     VH.xB. ..pQM.x..
 802a867:	782a f023 030f f042 0001 43c0 440b fa90     *x#...B....C.D..
 802a877:	f0a0 7d1c fab0 f080 f360 0443 751c 2601     ...}....`.C..u.&
 802a887:	fa06 f300 4313 b2db 702b 780a 1caf 0914     .....C..+p.x....
 802a897:	543c 703c 4c46 2008 7660 eb06 1012 f360     <T<pFL. `v....`.
 802a8a7:	1207 4844 700a 6800 7bc0 ebb0 1f12 d802     ..DH.p.h.{......
 802a8b7:	f023 0001 7028 bdf0 4939 5608 2800 da01     #...(p..9I.V.(..
 802a8c7:	2000 4770 4935 eb01 1000 1d40 4770 e92d     . pG5I....@.pG-.
 802a8d7:	41f0 2201 4605 4082 4831 4c30 1e80 7801     .A.".F.@1H0L...x
 802a8e7:	f04f 36ff 4391 b2c9 f041 0101 7001 7820     O..6.C..A....p x
 802a8f7:	eb06 1110 f361 1007 7020 4628 f7ff ffdc     ....a... p(F....
 802a907:	4607 7820 f640 3347 f020 000f 1901 1d49     .F x@.G3 .....I.
 802a917:	2210 4638 4798 4822 7bfa 5d41 f3c2 0242     ."8F.G"H.{A]..B.
 802a927:	5481 5546 2100 4608 7822 e006 eb04 1300     .TFU.!.F"x......
 802a937:	7d1b 06db d500 1c49 1c40 ebb0 1f12 dbf5     .}....I.@.......
 802a947:	2900 d10c 2000 f8a4 0065 4816 7d81 f021     .)... ..e..H.}!.
 802a957:	0180 7581 4815 7801 f021 0120 7001 e8bd     ...u.H.x!. ..p..
 802a967:	81f0 480f 1e80 7800 4770 480d 1e80 7840     ...H...xpG.H..@x
 802a977:	fa90 f0a0 fab0 f080 4770 4909 1e89 7848     ........pG.I..Hx
 802a987:	fa90 f2a0 fab2 f382 2201 409a 4390 7048     .........".@.CHp
 802a997:	b2c0 2800 d000 2001 4770 0000 0020 ec65     ...(... pG.. .e.
 802a9a7:	0020 b15a 0020 a267 0020 5866 0020 a266      .Z. .g. .fX .f.
 802a9b7:	0020 086b 0020 9c5a e92d 4ff8 4681 b2c1      .k. .Z.-..O.F..
 802a9c7:	4e77 0c00 f04f 4480 2901 d013 2700 f04f     wN..O..D.)...'O.
 802a9d7:	0a03 f04f 0b04 f64f 78ff f106 0508 2904     ..O...O..x.....)
 802a9e7:	d05c 290c d02b 290d d115 f000 f95a 200a     \..)+..)....Z.. 
 802a9f7:	71a8 e050 6030 7802 2107 b16a f8b4 0600     .qP.0`.x.!j.....
 802aa07:	f000 0004 1c40 f8a4 0600 f884 1208 f884     ....@...........
 802aa17:	1209 f8a4 1144 e0b8 f8b4 2600 f002 0204     ....D......&....
 802aa27:	1c92 f8a4 2600 f884 1208 f884 1209 7840     .....&........@x
 802aa37:	b108 f884 1207 2006 f8a4 0144 e0a5 6831     ....... ..D...1h
 802aa47:	780a b13a 2005 f8a4 0144 806f 2002 8028     .x:.. ..D.o.. (.
 802aa57:	71a8 e016 1d09 f000 f962 6070 6831 78ca     .q......b.p`1h.x
 802aa67:	7889 f000 f8ac b148 6870 8801 8069 88c0     .x....H.ph..i...
 802aa77:	8028 f8a5 a004 f885 b006 e002 200d f000     (............ ..
 802aa87:	f886 f8a4 8624 f8a4 8626 8828 f8a4 0622     ....$...&.(...".
 802aa97:	2001 f8a4 061a 2000 e8bd 8ff8 4a40 79ab     . ..... ....@J.y
 802aaa7:	3208 8891 f04f 0c49 1e48 ea4c 4202 b280     .2..O.I.H.L..B..
 802aab7:	9200 2b0b d269 e8df f003 6868 1306 6836     ...+i.....hh..6h
 802aac7:	6868 4c68 0063 f8b4 061e 2800 d05d 2019     hhhLc......(].. 
 802aad7:	80a8 f64f 70f7 f8a4 0618 f885 a006 e054     ..O..p........T.
 802aae7:	80a8 2900 d151 f8b4 0618 0700 d419 f8b4     ...)Q...........
 802aaf7:	061e 2103 f000 f900 8068 6831 b280 1d09     ...!....h.1h....
 802ab07:	f000 f90d 6070 8869 b159 8802 4291 d108     ....p`i.Y....B..
 802ab17:	f8a4 7618 f8a4 862c 88c0 8028 f8a4 0622     ...v..,...(...".
 802ab27:	e012 200d e029 80a8 b151 2901 d12d f8a4     ... )...Q..)-...
 802ab37:	b144 f8b4 0800 f040 0001 f8a4 0800 e024     D.....@.......$.
 802ab47:	f8a4 7618 f8a4 862c 9800 f7fa fff5 2009     ...v..,........ 
 802ab57:	e013 f8b4 061e 2104 f000 f8ce 8869 4288     .......!....i..B
 802ab67:	d10a f8b4 062c 2104 f000 f8c6 8869 4288     ....,..!....i..B
 802ab77:	d102 f8b4 0618 b140 2001 f000 f808 e004     ......@.. ......
 802ab87:	f000 f8a7 b108 2000 e7f7 4648 e784 4904     ....... ..HF...I
 802ab97:	3108 7188 210e ea41 4000 f7fa bfcd 0000     .1.q.!A..@......
 802aba7:	0020 bc5a 2219 fbb0 f2f2 4962 e002 4282      .Z.."....bI...B
 802abb7:	d003 1c89 8808 2800 d1f9 8808 4770 b5f0     .......(....pG..
 802abc7:	4603 8800 2519 460c 4616 4368 f7ff ffea     .F...%.F.FhC....
 802abd7:	2800 d065 8818 07aa f5a0 61c0 394b d10c     .(e........aK9..
 802abe7:	2060 f8a2 080a f640 60bf f8a2 0808 8818     ` ....@..`......
 802abf7:	8859 4348 4368 4950 e01f f240 11b9 fbb0     Y.HChCPI..@.....
 802ac07:	f7f1 fb01 0017 b960 205a f8a2 080a f241     ......`.Z ....A.
 802ac17:	4046 f8a2 0808 8818 8859 4348 4368 4947     F@......Y.HChCGI
 802ac27:	e00b 2062 f8a2 080a f241 3075 f8a2 0808     ..b ....A.u0....
 802ac37:	8818 8859 4348 4942 4368 fbb1 f0f0 f8a2     ..Y.HCBIhC......
 802ac47:	0804 f8b2 0804 8899 fbb0 f0f1 f8a2 0802     ................
 802ac57:	8859 2001 b104 2000 1a09 1c60 fb91 f0f0     Y.. ... ..`.....
 802ac67:	f8a2 0806 00f0 ea40 0044 f040 00f0 f8a2     ......@.D.@.....
 802ac77:	0800 f44f 3180 f8d1 00ac 0e00 d009 f891     ..O..1..........
 802ac87:	00ab 2802 d305 28ff d003 f891 01a8 0040     ...(...(......@.
 802ac97:	e000 200e f8a2 0a68 201f f8a2 0a66 2001     ... ..h.. ..f.. 
 802aca7:	bdf0 4828 f8b0 16bc f021 0101 f8a0 16bc     ..(H....!.......
 802acb7:	2200 8002 f64f 71ff f8a0 14e0 f8a0 14e2     ."..O..q........
 802acc7:	f200 40d4 8042 2101 8041 f64f 71f7 8001     ...@B..!A.O..q..
 802acd7:	4770 f04f 4080 f8b0 1618 0709 d50a 2102     pGO..@.........!
 802ace7:	f8a0 1144 2101 f8a0 1a68 2100 f8a0 161a     ..D..!..h..!....
 802acf7:	2001 4770 2000 4770 b530 4a0e 4c12 e009     . pG. pG0..J.L..
 802ad07:	fbb4 f3f3 b29b 1a5d 4285 dc02 440b 4283     ......]..B...D.B
 802ad17:	da03 1c92 8813 2b00 d1f2 8810 bd30 4602     .......+....0..F
 802ad27:	4608 e002 4291 d003 3008 8801 2900 d1f9     .F...B...0...)..
 802ad37:	4770 0000 0000 88f1 9a08 008a 1308 0030     pG............0.
 802ad47:	ca08 0000 0040 4401 0e00 00a6 b430 4cc2     ....@..D....0..L
 802ad57:	2000 79a2 f104 0112 2304 7909 2a01 d00f     . .y.....#.y.*..
 802ad67:	2a02 d012 2a0c d102 4618 b901 2003 7c61     .*...*...F... a|
 802ad77:	b1c9 49ba 6809 79c9 07ca d00b 2005 e012     ...I.h.y..... ..
 802ad87:	4618 2900 d1f3 2001 e7f1 4618 2900 d1ee     .F.)... ...F.)..
 802ad97:	2002 e7ec 078a d502 f440 60a0 e003 0749     . ......@..`..I.
 802ada7:	d501 0600 0c00 2128 bc30 ea41 4000 f7fa     ......(!0.A..@..
 802adb7:	bec3 b570 4da8 2601 4629 7968 78c9 2400     ..p..M.&)Fhy.x.$
 802adc7:	b110 b951 4630 e005 b139 7928 b928 7c28     ..Q.0F..9.(y(.(|
 802add7:	b918 4620 70e8 f7fc f876 7ae8 2800 d118     .. F.p..v..z.(..
 802ade7:	7c28 2800 d115 7a28 4621 b110 7aa8 b100     (|.(..(z!F...z..
 802adf7:	2101 7928 796a 4290 d00c 712a b2d0 b108     .!(yjy.B..*q....
 802ae07:	4997 e000 2100 2017 ea40 4001 f7fa fe94     .I...!. @..@....
 802ae17:	742e bd70 b111 7a68 b900 2401 79e8 4284     .tp...hz...$.y.B
 802ae27:	d00b 71e9 b109 2002 e000 2000 2110 ea41     ...q... ... .!A.
 802ae37:	3000 f7fa fe81 72ee bd70 78a8 2800 d1fb     .0.....rp..x.(..
 802ae47:	e8bd 4070 4887 f7fa be77 e92d 47f0 4604     ..p@.H..w.-..G.F
 802ae57:	f8df 9204 f8df a204 2711 b2c0 ea4f 4c14     .........'..O..L
 802ae67:	f109 0912 2600 4d7c f8da 2000 f00c 01ff     .....&|M... ....
 802ae77:	f3c4 3303 f04f 0801 ea47 4709 2826 d07d     ...3O...G..G&(}.
 802ae87:	dc25 2812 d07b dc15 2801 d040 2803 d065     %..({....(@..(e.
 802ae97:	280e d10e f8c9 6007 2009 f889 8009 ebb0     .(.....`. ......
 802aea7:	4f14 d001 f04f 0800 f889 8005 4638 f7fa     .O..O.......8F..
 802aeb7:	fe7c e0be 2816 d039 2823 d1fa 6810 ea00     |....(9.#(...h..
 802aec7:	3014 f7fd fdc7 2806 db73 2001 e0b5 2845     .0.....(s.. ..E(
 802aed7:	d070 dc0f 282d d021 283e d079 2844 d1e8     p...-(!.>(y.D(..
 802aee7:	f8c9 6007 f889 8008 f889 1004 b1c1 f9b2     ...`............
 802aef7:	0004 e016 2849 d022 284c d1da 2b00 d071     ....I(".L(...+q.
 802af07:	2b01 d072 2b02 d101 f885 8009 e08f f8ca     .+r..+..........
 802af17:	c000 f885 8003 f885 800a e08a 7469 e00b     ............it..
 802af27:	2000 8028 4638 f7fa fe40 e005 f414 4f70     . (.8F..@.....pO
 802af37:	d17f 802e f889 6004 f7ff ff08 e079 f04f     .......`....y.O.
 802af47:	5000 f8c9 6007 ea40 4014 f889 8007 8841     .P...`@..@....A.
 802af57:	f8a9 1000 8800 f8a9 0002 e7a7 f9b5 0000     ................
 802af67:	2800 dd11 1e40 b200 8028 b968 f8c9 6007     .(..@...(.h....`
 802af77:	f889 8008 f889 6004 4638 e001 e039 e036     .......`8F..9.6.
 802af87:	f7fa fe13 f7ff fee2 79a8 2802 d214 68e8     .........y.(...h
 802af97:	1c40 60e8 d001 68e8 e002 f04f 30ff 60e8     @..`...h..O..0.`
 802afa7:	f8da 1000 6889 4288 d143 482f f7fa fdc4     .....h.BC./H....
 802afb7:	e03f e041 e036 e00b f8da 0000 6880 b128     ?.A.6........h(.
 802afc7:	68e9 4281 d302 4829 f7fa fdb6 60ee e030     .h.B..)H.....`0.
 802afd7:	ebb8 4f14 d101 2001 e000 2000 7168 e026     ...O... ... hq&.
 802afe7:	e000 e002 72ee 726e e021 742e e01f 71ab     .....rnr!..t...q
 802aff7:	e7a2 70a9 b921 481e f7fa fdd7 722e e003     ...p!..H.....r..
 802b007:	7990 b108 f885 8008 f7ff fed3 78a9 4640     .y...........x@F
 802b017:	2902 d900 2000 f889 0006 f8c9 6007 f889     .)... .......`..
 802b027:	800a e743 7990 b920 78a8 b110 7229 f7ff     ..C..y ..x..)r..
 802b037:	fec0 4620 e8bd 87f0 2000 72a8 b2c0 2800     .. F..... .r...(
 802b047:	d0f5 0b20 0300 f040 0022 f7fa fd75 e7ee     .. ...@."...u...
 802b057:	4801 68c0 4770 0000 0020 306b 0020 cc5a     .H.hpG.. .k0 .Z.
 802b067:	0020 bc5c 0400 2400 0300 2c10 0500 2c10      .\....$...,...,
 802b077:	0400 2410 faff e5f5 c5d5 a5b5 8595 6575     ...$..........ue
 802b087:	4555 2535 0515 0000 0000 e70d 0000 ec0b     UE5%............
 802b097:	0000 4c09 0000 0000 ffff a7f8 ffff eff2     ...L............
 802b0a7:	ffff c3ee ffff 46e8 ffff fae0 ffff 0bdc     .......F........
 802b0b7:	ffff fed5 ffff 6acf ffff 82c7 ffff 9abe     .......j........
 802b0c7:	ffff 97b5 ffff 7daf ffff 9ca7 ffff 22a0     .......}......."
 802b0d7:	0f20 805e 1120 220e 1820 8920 1820 f8b9      .^. .." . . ...
 802b0e7:	0020 0020 0000 0d0a 0000 000d ff01 0528      . ...........(.
 802b0f7:	183f 0100 b000 32ff 28d0 7801 03b8 ff89     ?......2.(.x....
 802b107:	3800 8813 0028 f9cf 27ff 2708 9019 2808     .8..(....'.'...(
 802b117:	ff8b 684b 1028 3a15 0803 f0ff 2f00 39d0     ..Kh(..:...../.9
 802b127:	0310 fb21 b87e 2100 8e18 e0b8 eaa9 1b00     ..!.~..!........
 802b137:	0069 861b 1b08 0339 ff98 3f00 0302 7e80     i.....9....?...~
 802b147:	28b8 01ff b972 3800 9808 df09 1108 6c18     .(..r..8.......l
 802b157:	08a8 f829 ff00 0439 1428 9e15 033f 00fe     ..)...9.(...?...
 802b167:	9605 0328 b33f 0664 90ff 9002 9003 9404     ..(.?.d.........
 802b177:	fe05 4300 6577 e006 0d30 ff76 8613 b627     ...Cwe..0.v...'.
 802b187:	c627 8611 03ff 6468 0d06 1378 ff88 8960     '.....hd..x...`.
 802b197:	a900 9208 b926 09b5 0708 0893 2623 10c9     ....&.......#&..
 802b1a7:	940b 00ff 3628 90e5 2805 ff60 8998 9603     ....(6...(`.....
 802b1b7:	0128 06e0 90ff 0c08 3c32 9012 ff15 3203     (.......2<.....2
 802b1c7:	2628 989b 0928 99ff 0c89 3c42 9007 df25     (&..(.....B<..%.
 802b1d7:	4203 2628 109c 030f bd96 0029 2827 4d44     .B(&......).'(DM
 802b1e7:	0028 3903 28ef 4f44 0058 6603 6212 0efb     (..9.(DOX..f.b..
 802b1f7:	0052 257f 4528 a24f 29ef ec00 0030 459f     R..%(EO..)..0..E
 802b207:	a247 28ff 438b 9169 6643 ff28 8309 0890     G..(.Ci.Cf(.....
 802b217:	8369 b87e 0ebf 2832 c000 0072 b6d5 00fe     i.~...2(..r.....
 802b227:	68f7 9809 6808 0029 e0ff 11a8 6c28 1218     .h...h).....(l..
 802b237:	ff28 1811 2228 a8ef 8478 03fd 0900 18e1     (...("..x.......
 802b247:	485c 8403 90ff 09e8 0e38 9084 ff88 8208     \H......8.......
 802b257:	320d 380d 4812 08ff 9082 f005 3ef4 ff0a     .2.8.H.......>..
 802b267:	4591 4866 8509 1890 0dff 1258 0818 0e84     .EfH......X.....
 802b277:	ff54 046c 2890 8468 426e 0eff f252 3c12     T.l..(h.nB..R..<
 802b287:	1204 ff12 15e0 fc3f 2866 7991 09bf 2789     ......?.f(.y...'
 802b297:	66f9 0043 8361 09fb 0053 839b da32 db32     .fC.a...S...2.2.
 802b2a7:	32bf 03d1 0d47 0057 1713 12ff 9117 2708     .2..G.W........'
 802b2b7:	03e8 ff86 8890 3868 8609 0894 00fe 2813     ......h8.......(
 802b2c7:	d827 0864 0990 27ff 2789 2799 65a9 bf08     '.d....'.'.'.e..
 802b2d7:	30e0 21e0 8953 c300 ff73 380d 8267 4990     .0.!S...s..8g..I
 802b2e7:	926a 00fe 1223 8813 8903 290d 6cff 0fb9     j...#......).l..
 802b2f7:	7f69 00ba ff3a 690d 290f 9809 ab03 26ff     i...:..i.).....&
 802b307:	5f0a 098a 26ab ff1a 8a5f b927 c927 290d     ._...&.._.'.'..)
 802b317:	0fdf 9169 0908 7d01 8952 32ff 00d2 65d1     ..i....}R..2...e
 802b327:	9306 dff2 30e0 6803 020d 600f af88 0000     .....0.h...`....
 802b337:	b809 5500 022b a81f 0eff 6cb8 6eb8 0e48     ...U+......l.nH.
 802b347:	ff58 d100 866d 4e3e d100 3aff 5845 0d48     X...m.>N...:EXH.
 802b357:	0858 ff78 b80d 09f0 0e53 023b 00fb 00b8     X.x.....S.;.....
 802b367:	3b13 0664 8909 107a 9a63 6310 659a 6106     .;d...z.c..c.e.a
 802b377:	4500 00ff 3528 2662 f0a8 ff08 0738 0890     .E..(5b&....8...
 802b387:	6853 c100 3afb 0027 2503 d62f d22f 27ff     Sh...:'..%/./..'
 802b397:	27a8 2788 2f98 ffdb ba6c ba8f da2f 1003     .'.'./..l.../...
 802b3a7:	09fb 0020 30b9 5053 30e0 00fc 0229 4387     .. ..0SP.0..)..C
 802b3b7:	5329 5319 ff34 3553 f826 2853 4890 27ff     )S.S4.S5&.S(.H.'
 802b3c7:	53d8 5316 0023 ffd2 2878 a626 0491 6409     .S.S#...x(&....d
 802b3d7:	52ff 0048 00d2 0302 fe29 4908 db2f da2f     .RH.....)..I/./.
 802b3e7:	0090 d500 0002 f885 0300 00f6 833b 2d52     ............;.R-
 802b3f7:	0938 3f13 02aa 057d 8500 0110 63ff 59b0     8..?..}......c.Y
 802b407:	50bc 48c7 ffb7 7541 ec3a 0b35 bf2f 2aff     .P.H..Au:.5./..*
 802b417:	26fb 22b1 1fd4 ff5a 391c 6819 df16 9614     .&."..Z..9.h....
 802b427:	12ff 1088 0faf 0d04 ff85 2b0c f40a dc09     ...........+....
 802b437:	e008 07ff 07fe 0631 057a ffd4 3f05 b904     ......1.z....?..
 802b447:	4004 d403 03ff 0372 021a 02cb ff83 4302     .@....r........C
 802b457:	0902 d501 a601 01ff 017c 0156 0134 ff15     ........|.V.4...
 802b467:	fa00 e100 ca00 b600 00ff 00a4 0094 0085     ................
 802b477:	ff78 6c00 6100 5700 4f00 00ff 0047 0040     x..l.a.W.O..G.@.
 802b487:	0039 ff34 2e00 2a00 2600 2200 09fe 7edb     9.4....*.&."...~
 802b497:	7dba 32b6 32dc d1ff 4ae2 a464 a465 ffe0     .}.2.2...Jd.e...
 802b4a7:	643a 65a5 32a5 03d6 01ff 46e0 6978 da32     :d.e.2.....Fxi2.
 802b4b7:	df94 2807 9625 0022 c303 ff27 0078 2739     ...(%."...'.x.9'
 802b4c7:	90b9 9009 8cff 1b90 0a94 1228 7f15 2f9d     ..........(..../
 802b4d7:	62da 63a5 01a5 ff23 623a 63a4 2fa4 29d6     .b.c..#.:b.c./.)
 802b4e7:	005f 4ae2 1792 c702 0000 bf3d 9206 2815     _..J......=....(
 802b4f7:	9025 3900 dd92 0023 442b 9ae0 1908 d0eb     %..9..#.+D......
 802b507:	0052 2619 0f08 3500 009a 2603 f50a e20f     R..&...5...&....
 802b517:	32aa 38d6 187b 2879 0875 ff73 da32 0c90     .2.8{.y(u.s.2...
 802b527:	7927 0b92 10f2 9975 7558 7300 2faa e1d6     'y....u.Xu.s./..
 802b537:	baab 0091 e55d 5d10 5091 2977 00df bae1     ....]..].Pw)....
 802b547:	2ae1 1d08 26e0 2fff 29d0 e600 2891 6b24     .*...&./.)...($k
 802b557:	629f 2100 08e3 2f1d 09dc eea9 1314 3f01     .b.!.../.......?
 802b567:	00a9 d6ef 9803 13fb 0289 c88b a964 a965     ............d.e.
 802b577:	00ee ab8f ab65 0500 65ac ffac da32 9a03     ....e....e..2...
 802b587:	6200 8903 26ff 09b6 5fb9 0896 efa6 8a03     .b...&..._......
 802b597:	6803 0d00 09c6 eec9 0d00 03b6 008b 6c1b     .h.............l
 802b5a7:	6300 37ef 0307 00a9 ac9f ac63 10ee ab9f     .c.7......c.....
 802b5b7:	ab63 0710 63a9 ffa9 d62f 0200 182f 3800     c....c../.../..8
 802b5c7:	03ff 0889 1348 0318 ff94 043f 1864 1865     ....H.....?.d.e.
 802b5d7:	31e0 f1bf 3e17 35e4 1057 610b 0cff 3e57     .1...>.5W..a..W>
 802b5e7:	34de 08f7 bf86 1613 b66c 0633 1f18 ff3f     .4......l.3...?.
 802b5f7:	6cd7 11b6 6286 6306 06df 60e0 d13f 0710     .l...b.c...`?...
 802b607:	3fc0 cdff 1964 1965 31e0 ff90 2617 51b6     .?..d.e..1...&.Q
 802b617:	1346 5186 56ff 5603 6200 8cd0 ff39 0803     F..Q.V.V.b..9...
 802b627:	1398 5118 038a 45ff 7426 7427 4608 ff13     ...Q...E&t't.F..
 802b637:	0066 3663 36f7 00ab 02ad 4b08 c80f 4d00     f.c6.6.....K...M
 802b647:	10ee 3041 3fff 7cf5 28c0 7001 ffa1 c271     ..A0.?.|.(.p..q.
 802b657:	c87d c972 9858 7ebf 08a3 0083 0102 ba11     }.r.X..~........
 802b667:	70ef 71b4 13b5 dcf1 11d0 39ff 900d 2727     .p.q.......9..''
 802b677:	9007 ff17 1128 8698 7828 8894 93ff 2889     ....(...(x.....(
 802b687:	4d4c e089 ef19 0d3f 3790 1700 9007 7f06     LM....?..7......
 802b697:	6428 8894 6528 1094 aa17 e900 00f9 d907     (d..(e..........
 802b6a7:	0300 0078 f80b 00fe c807 21d0 0738 a228     ..x........!8.(.
 802b6b7:	40ff d008 3818 9103 be86 4900 4d4c 08a6     .@...8.....ILM..
 802b6c7:	0076 f605 ffbf 39f5 280a 0026 263d 93ff     v......9.(&.=&..
 802b6d7:	0966 1368 2818 ef3f 08e0 023f ed05 4d4c     f.h..(?...?...LM
 802b6e7:	ffb8 0726 7458 3408 5603 587f 0876 2863     ..&.Xt.4.V.Xv.c(
 802b6f7:	7301 4b09 1cff ba7c 0690 7627 df90 9485     .s.K..|...'v....
 802b707:	7807 0548 24db ff11 3f88 7809 0039 0839     .xH..$...?.x9.9.
 802b717:	23ff 1900 1813 1913 ff08 6c98 06f8 62c8     .#.........l...b
 802b727:	6308 04fe 677f 6a89 9095 0019 a8ff 786c     .c...g.j......lx
 802b737:	8668 8951 f536 0087 153f e919 0390 1328     h.Q.6...?.....(.
 802b747:	156f 907b 0823 3f05 087c afef b472 0990     o.{.#..?|...r...
 802b757:	a500 200b 07a5 91bf 2858 4f4d 0018 10fb     ... ....X(MO....
 802b767:	3feb 0007 1909 0900 280b 7b13 5998 0b00     .?.......(.{.Y..
 802b777:	2829 9488 1d08 387f 4408 0b3f 6228 0b10     )(.....8.D?.(b..
 802b787:	28f7 6328 1318 3990 9458 08fe 08a1 9434     .((c...9X.....4.
 802b797:	6407 6505 05f5 b704 3858 0083 0015 bf00     .d.e....X8......
 802b7a7:	4588 2408 3737 8118 ff28 3f00 908e 0800     .E.$77..(..?....
 802b7b7:	083a 3bff 7226 6103 a87a ff0c 3d82 780e     :..;&r.az....=.x
 802b7c7:	0ca8 3d81 0bff 0228 b878 18e0 df28 f001     ...=..(.x...(...
 802b7d7:	3c08 0006 18b7 fd90 1110 0215 b888 8212     .<..............
 802b7e7:	ff12 0981 093a 003b 1802 0cff ca7a cb7b     ....:.;.....z.{.
 802b7f7:	4028 5f44 0328 1287 0647 f71b 990d 11ff     (@D_(...G.......
 802b807:	9017 0619 2889 ffa2 0948 8812 58f8 0238     .....(..H....X8.
 802b817:	90ef 7007 00c8 46d1 f7d0 38ff 3241 70d7     ...p...F...8A2.p
 802b827:	ffb8 fff8 3838 ff2b 0e3f 10d0 38ff 7306     ....88+.?....8.s
 802b837:	f0b8 3948 ef03 0890 b88e 6f00 28b9 bf02     ..H9.......o.(..
 802b847:	c871 19f0 043d 6708 7f81 75c8 7fb4 0ec9     q...=..g...u....
 802b857:	0049 ff55 0419 2898 7404 03b4 49ff 7912     I.U....(.t...I.y
 802b867:	890c 1038 ffc7 11f4 0478 2884 8404 b4ff     ..8.....x..(....
 802b877:	04d8 0938 0128 ff7a 74b0 90b9 e008 1279     ..8.(.z..t....y.
 802b887:	39df 0831 f937 4303 d810 04ff 0739 0228     .91.7..C....9.(.
 802b897:	c770 ff6a 2857 9828 3fe0 e262 abf7 d72f     p.j.W((..?b.../.
 802b8a7:	9908 c139 5125 03ca 085f 8900 0818 006b     ..9.%Q.._.....k.
 802b8b7:	18a3 efd0 3848 cf04 7d00 c881 7f32 72d7     ....H8...}..2..r
 802b8c7:	ffb4 38f4 0008 9733 3f20 0048 35a1 4b08     ...8..3. ?H..5.K
 802b8d7:	3b08 f737 2537 0150 ec29 0328 ff75 90b9     .;7.7%P.).(.u...
 802b8e7:	7e48 5cc3 e198 03ff 8308 3978 9168 ff88     H~.\......x9h...
 802b8f7:	7931 9138 5e09 9f29 01ff 815e 1908 3989     1y8..^)...^....9
 802b907:	ff00 3202 7edc 08cc 788c c87d 0702 8838     ...2.~...x}...8.
 802b917:	2fc8 28dc fd11 0079 8911 78c8 13c9 ff88     ./.(..y....x....
 802b927:	8813 8908 c988 8913 1367 3889 af07 5b09     ........g..8...[
 802b937:	c889 2918 0dfe 2889 28e8 28ec 22ea eef7     ...)...(.(.(."..
 802b947:	f828 0b00 28b8 28d6 d4ff 0820 7a23 b373     (....(.(.. .#zs.
 802b957:	ff73 03c8 2839 e22a 7069 99ff 0128 b179     s...9(*.ip..(.y.
 802b967:	8958 ff08 1191 0813 7830 7c08 c0f7 6800     X.......0x.|...h
 802b977:	1702 2888 4c53 08fd 3701 4c53 2818 9133     ...(SL...7SL.(3.
 802b987:	08fa 280d bd00 3fb8 3f05 fe82 0700 3fca     ...(...?.?.....?
 802b997:	9f01 9ff3 faf4 0900 0082 79d7 033f 083f     ...........y?.?.
 802b9a7:	3fdf 9f07 9003 1110 8b3f 3fff 9001 9608     .?......?..?....
 802b9b7:	3307 bf08 f737 853f c573 5101 ffb6 5803     .3..7.?.s..Q...X
 802b9c7:	1512 5608 1528 15ff 7000 d069 3918 ff04     ...V(....pi..9..
 802b9d7:	09af 4906 033f f9a0 066f 8039 0069 0f15     ...I?...o.9.i...
 802b9e7:	0a00 dd0b 0252 0475 7899 0700 3f38 0897     ....R.u..x..8?..
 802b9f7:	9895 0f10 1806 300f 3845 08fb 0168 75c1     .......0E8..h..u
 802ba07:	0998 590e 10fe 874d 0000 9704 8780 18fe     ...Y..M.........
 802ba17:	2843 9829 9067 9024 25df 0691 0864 af07     C().g.$..%..d...
 802ba27:	1360 07de 3315 3718 0da6 3741 cf65 a0e5     `....3.7..A7e...
 802ba37:	3437 6700 cf27 1990 11bf 2779 90d9 0023     74.g'.....y'..#.
 802ba47:	452f 90cf 9046 18a7 0331 9761 fd37 05b6     /E..F...1.a.7...
 802ba57:	805b 0e3f 5537 77e2 3701 0124 134f 0239     [.?.7U.w.7$.O.9.
 802ba67:	3700 00fa eb09 670d 3f01 90e8 bfa9 7909     .7.....g.?.....y
 802ba77:	3953 4690 3318 ff0f 5398 00e8 37d1 3fa6     S9.F.3...S...7.?
 802ba87:	e87d 2500 1b18 a428 000e ff05 2b48 3ffe     }..%..(.....H+.?
 802ba97:	9099 2910 fadf 604b 0090 0500 2970 fad7     ...)..K`....p)..
 802baa7:	5043 0300 0271 03a5 a7d0 3811 00f9 082b     CP..q......8..+.
 802bab7:	6017 a501 ff80 c080 2040 0400 0404 01ff     .`......@ ......
 802bac7:	2801 902d 3f0d 00de 1300 0118 00f0 01f0     .(-..?..........
 802bad7:	01f0 01f0 01f0 01f0 f000 f001 f001 f001     ................
 802bae7:	f001 f001 f001 f001 0001 01f0 01f0 01f0     ................
 802baf7:	01f0 01f0 01f0 01f0 0138 ffff 00ff ff00     ........8.......
 802bb07:	ffff ffff 0004 9800 054d 0005 9800 008b     ........M.......
 802bb17:	000a 9800 003d 000c 9900 027b 000d 9900     ....=.....{.....
 802bb27:	029f 000e 9800 0427 0010 9700 00a5 0011     ......'.........
 802bb37:	9700 00b5 0016 9900 0139 0017 9900 0419     ........9.......
 802bb47:	0019 9700 0157 001a 9700 023b 001c 9800     ....W.....;.....
 802bb57:	01cf 001d 9800 00ed 001e 9700 001b 001f     ................
 802bb67:	9700 0201 0024 9700 01c1 0028 9700 05d3     ....$.....(.....
 802bb77:	0029 9800 000b 002a 9900 005d 002b 9700     ).....*...].+...
 802bb87:	016b 002c 9700 0587 002e 9900 01b5 0c04     k.,.............
 802bb97:	341c 684c 9880 a8a4 b0ac b8b4 bcbc ffff     .4Lh............
 802bba7:	0020 806d 0000 f20e 0000 8012 ff01 d432      .m...........2.
 802bbb7:	eb28 504d 6d1f 1fff 2825 9fff 03f6 ff63     (.MP.m..%(....c.
 802bbc7:	017b 8028 01d0 1939 7baf 7900 0007 8019     {.(...9..{.y....
 802bbd7:	0300 fb67 0178 0500 7691 2814 fffd 9045     ..g.x....v.(..E.
 802bbe7:	10a0 501b 0092 1bff 2240 3936 ce14 fffe     ...P....@"69....
 802bbf7:	3018 70d0 0c39 0ea5 3fff 1ff9 a517 ce0e     .0.p9....?......
 802bc07:	fffe 5823 fd39 0ea1 2090 28af 3f01 0032     ..#X9.... .(.?2.
 802bc17:	d007 0700 ff1f 7090 3828 4115 ff2b 71ff     .......p(8.A+..q
 802bc27:	2b70 72ff 1171 ff80 0104 0f28 f1cf 611b     p+.rq.....(....a
 802bc37:	12ff 2980 40fd 2804 ff00 00cb 400c 0438     ...).@.(.....@8.
 802bc47:	5091 00fa 092b 6700 2b77 77ff ff75 0490     .P..+..gw+.wu...
 802bc57:	d629 654b 05d2 38df e002 d114 0510 85d0     ).Ke...8........
 802bc67:	08fe dc05 3905 e002 0324 50ff 0028 70c0     .....9..$..P(..p
 802bc77:	0008 5f08 0340 e001 00a1 a133 6108 90fb     ..._@.....3..a..
 802bc87:	0007 3605 0604 06f0 38ff 9004 2880 3f00     ...6.....8...(.?
 802bc97:	bfe2 eb28 9145 4690 0500 ff62 1076 22e0     ..(.E..F..b.v.."
 802bca7:	40d0 1038 9fff 90f4 2d07 2d23 ff10 3406     .@8......-#-...4
 802bcb7:	3005 0704 b637 ffbf 38f4 f006 0007 f02f     .0..7....8..../.
 802bcc7:	00fa ca2f 2900 2d60 2d01 cf02 8114 2104     ../..)`-.-.....!
 802bcd7:	a308 0f00 09a0 00f6 45fb 0070 0589 022d     .........Ep...-.
 802bce7:	1f29 e000 0931 0021 308f 000b d695 0b30     )...1.!..0....0.
 802bcf7:	5203 9500 0072 120b ff3e 2d09 2d03 1404     .R..r...>..-.-..
 802bd07:	0483 43ff 0128 f3cf 3109 f53f 00f6 1115     ...C(....1?.....
 802bd17:	9520 1f97 906c 10ff f529 6049 3b28 dd15      ...l...).I`(;..
 802bd27:	00b6 925b 208c 0500 7552 20bf 0028 00c1     ..[.. ..Ru. (...
 802bd37:	0885 740b 00ea 136d 1908 087a 830d 412d     ...t..m...z...-A
 802bd47:	7aeb 0037 77d9 2508 0090 ff75 f021 3906     .z7..w.%..u.!..9
 802bd57:	9802 0400 01eb 0885 1489 2708 0128 4a72     ...........'(.rJ
 802bd67:	2920 707c 9429 2910 a700 1815 d529 2073      )|p)..)....).s 
 802bd77:	7d29 2970 1092 2129 ea18 c500 0075 8017     )}p)..)!....u...
 802bd87:	b300 3e15 ef37 412d 422d 0f09 007e fff0     ...>7.-A-B..~...
 802bd97:	3900 3f02 0325 1212 c2bf 2008 2008 1878     .9.?%...... . x.
 802bda7:	1d0f 28ff 7404 2802 c300 ff02 02f2 0438     ...(.t.(......8.
 802bdb7:	02f3 0238 3faf 7314 0003 9223 0b09 fd0c     ..8..?.s..#.....
 802bdc7:	0023 0c0f 2208 7028 5fe5 78c2 f022 0002     #...."(p._.x"...
 802bdd7:	052f 1101 f17f 7200 d03f 1003 0900 f07f     /......r?.......
 802bde7:	0790 7191 d332 bd09 2fbf 3fd3 90c6 4810     ...q2..../.?...H
 802bdf7:	900f 20df 103f 0190 2901 9061 01ff 611b     ... ?....)a....a
 802be07:	0f44 ff03 dd1f 026c 1161 0338 6f02 a1fc     D.....l.a.8..o..
 802be17:	0eff 6d1f 2521 fece df29 43fa f084 1014     ...m!%..)..C....
 802be27:	fa13 ffa1 280e 4602 cf14 28d4 02ff 144e     .....(.F...(..N.
 802be37:	d42f 0200 5f00 7100 711e 001e 2405 0508     /...._.q.q...$..
 802be47:	00bf 2800 9d70 0061 0203 09ff 1321 2811     ...(p.a.....!..(
 802be57:	a03f ff01 e128 814e 3090 00f0 38ff 9131     ?...(.N..0...81.
 802be67:	6a01 0901 fb10 1203 bd09 0928 02a0 ff1b     .j........(.....
 802be77:	9252 1b02 f842 3d07 02d7 0790 e502 0832     R...B..=......2.
 802be87:	f0cd bf32 0639 1628 6192 3508 f93f 0218     ..2.9.(..a.5?...
 802be97:	08ff f273 0ea1 2218 28ff d001 3802 1ffd     ..s....".(...8..
 802bea7:	ff5a 7231 2317 2616 8137 3feb 02d7 83bd     Z.1r.#.&7..?....
 802beb7:	2b28 2190 ff3f a1ef 290e 43d6 0080 02fd     (+.!?....).C....
 802bec7:	630b 106a 0109 d332 32af 03d1 0063 0379     .cj...2..2..c.y.
 802bed7:	eb10 bad0 0900 1205 41bf 2694 c72a ff2f     .........A.&*./.
 802bee7:	00d3 9202 9002 3f53 03ff 0294 6390 ca29     ......S?.....c).
 802bef7:	fd4a 0062 7303 d432 d532 fe03 4501 547c     J.b..s2.2....E|T
 802bf07:	1303 0090 f728 8703 0050 8015 03f0 ff28     ....(...P.....(.
 802bf17:	3800 f1a9 2883 3e00 a2fd 6308 2090 0309     .8...(.>...c. ..
 802bf27:	7528 9a3f 3287 03d3 0863 0855 ff8f d32f     (u?..2..c.U.../.
 802bf37:	ca29 7042 60f0 39fb 0012 8007 30f0 0028     ).Bp.`.9.....0(.
 802bf47:	3dfb 038c 706b 2012 30e0 f1ff 2840 3c00     .=..kp. .0..@(.<
 802bf57:	f485 ea10 1300 0082 604f 2100 e060 ff20     ........O`.!`. .
 802bf67:	030c 023d 7a3f ff2b 76ef 7470 0051 9015     ..=.?z+..vptQ...
 802bf77:	0028 c7bf 0cf0 3c10 0807 e03f 10fd 7708     (......<..?....w
 802bf87:	5f3f 0328 5077 e1f1 8710 2708 2108 0128     ?_(.wP.....'.!(.
 802bf97:	517a 03ff 1202 0832 7021 fd11 0203 c01b     zQ....2.!p......
 802bfa7:	0d72 d821 fe01 0902 8049 0340 2872 fb01     r.!.....I.@.r(..
 802bfb7:	5779 3f00 0d71 0810 ce07 7d00 3122 0872     yW.?q......}"1r.
 802bfc7:	016b 1077 c532 01d3 8323 c94b b110 8700     k.w.2...#.K.....
 802bfd7:	0309 03b2 0cd3 7538 7308 10e0 7308 cd3f     ......8u.s...s?.
 802bfe7:	0084 9015 01d8 103d 0579 c781 7050 1840     ......=.y...Pp@.
 802bff7:	0c7f 0821 9883 ff02 020e d132 3928 5515     ..!.......2.(9.U
 802c007:	2fff 70d1 0410 8020 fe10 0b00 e063 2b14     ./.p.. .....c..+
 802c017:	3fff f666 5d28 0790 732a 83f1 ff2b 3def     .?f.(]..*s..+..=
 802c027:	035a 1930 988b 8000 40b7 d52f 491a ff00     Z.0......@/..I..
 802c037:	b503 abfa 504b 0300 0270 6073 0300 ff71     ....KP..p.s`..q.
 802c047:	10d0 0338 11d0 f939 00ef 9002 0800 001b     ..8...9.........
 802c057:	2902 f5df 3841 b97b 4105 3809 03fd 0b00     .)..A8{..A.8....
 802c067:	1b28 28d8 9a01 9877 e81b 9702 a018 0228     (..(..w.......(.
 802c077:	fd97 0018 e837 3f28 0415 f728 9673 052c     ....7.(?..(.s.,.
 802c087:	f94f 19d0 fb28 940f 2d00 0d28 0994 7728     O...(....-(...(w
 802c097:	4c14 2099 0e3d 0128 0f18 00fe 5a45 aa11     .L. =.(.....EZ..
 802c0a7:	0b28 0aac 28ff 9094 9008 3f09 fe07 3500     (....(.....?...5
 802c0b7:	2878 9e30 2809 ab03 0a9d 2100 0088 a903     x(0..(.....!....
 802c0c7:	0300 ffba b875 08d1 0838 0890 29ff 4afa     ....u...8....).J
 802c0d7:	2868 9001 ff08 481b 181f de2f 0300 00be     h(.....H../.....
 802c0e7:	882f 581b 581f 4113 fa59 1f08 004b 4533     /..X.X.AY...K.3E
 802c0f7:	2898 4ce7 e8ff 2028 9893 1428 f74d 9098     .(.L..( ..(.M...
 802c107:	1888 9993 28ec bf0f f89f 681b 6c1f 3908     .....(.....h.l.9
 802c117:	7f00 1f09 28f0 44e7 08e8 7b21 b87b 9700     .....(.D..!{{...
 802c127:	3808 9007 c100 4aff 2878 4df9 3fab bf1e     .8.....Jx(.M.?..
 802c137:	b87c 08f0 0639 1118 ff1f 3f17 7010 28b9     |...9......?.p.(
 802c147:	cc00 09ff 09f8 0538 8918 ff29 e100 3f49     ......8...)...I?
 802c157:	7902 08b9 98ff 1628 084e 7428 fb91 91ec     .y....(.N.(t....
 802c167:	9108 9014 28c8 fd16 104d 3297 21de 9017     .....(..M..2.!..
 802c177:	fe08 0d00 1f08 286d 4616 fb18 b889 5508     ......m(.F.....U
 802c187:	0428 2890 df1b 2148 1f14 0811 9023 ff78     (..(..H!....#.x.
 802c197:	b881 8818 b889 1421 90bb 000c f5b9 6849     ......!.......Ih
 802c1a7:	7910 ef0c de32 3818 e101 f078 cf58 3a38     .y..2..8..x.X.8:
 802c1b7:	18f0 5905 1b18 4514 a8ff 4800 0029 18e4     ...Y...E...H)...
 802c1c7:	ff84 28b8 4414 12e9 1129 a9ef 3818 1012     ...(.D..)....8..
 802c1d7:	1129 0478 89fd 1300 11f8 1368 2b68 ffff     ).x.......h.h+..
 802c1e7:	0a9c a869 fa93 bd6b 02a8 f835 8904 007b     ..i...k...5...{.
 802c1f7:	38c7 02ff 898b f021 0f28 7f9a 1bc8 21e8     .8....!.(......!
 802c207:	2159 0858 ebd5 884b 9f10 0818 28a3 930d     Y!X...K......(..
 802c217:	08be 1197 0428 5d3f 6748 7f77 00b9 0c49     ....(.?]Hgw...I.
 802c227:	3b89 4007 609d 1109 0b20 51f0 5108 1b02     .;.@.`.. ..Q.Q..
 802c237:	d8cf 1b0a 00fe 2f5b de32 fa29 6842 e07d     ......[/2.).Bh}.
 802c247:	5309 f068 3928 3819 be6b 2d07 2929 48fd     .Sh.(9.8k..-)).H
 802c257:	0028 986f 3bfb 000d 390d 29f0 093d b0fb     (.o..;...9.)=...
 802c267:	0019 3913 0228 0945 b0bf 2889 4d02 1909     ...9(.E....(.M..
 802c277:	2959 feff 6841 18d0 0a38 dfcf 29e8 49fe     Y)..Ah..8....).I
 802c287:	0068 7851 d7f0 3828 0105 0b29 1f08 861f     h.Qx..(8..).....
 802c297:	1fdb 0812 a121 0808 3f1d 86f7 8519 0428     ....!....?....(.
 802c2a7:	a109 1738 d138 2b03 ec53 3f0d 0158 d432     ..8.8..+S..?X.2.
 802c2b7:	7907 7b50 ba01 1702 0401 20bd 171f dd06     .yP{....... ....
 802c2c7:	bd9c 0594 1f37 2126 0c87 0385 64df 017b     ....7.&!.....d{.
 802c2d7:	1779 2500 2d81 7067 0303 b100 9503 03cb     y..%.-gp........
 802c2e7:	1506 04db 0491 3f7d 0786 9401 9f2d 1472     ......}?....-.r.
 802c2f7:	0480 0820 0309 0fb3 cf7b 04f2 2209 8014     .. .....{...."..
 802c307:	0403 6fcf f3cf 5090 1700 03a3 b906 4d3b     ...o...P......;M
 802c317:	0777 0413 702d 2708 f506 20d8 0609 20d5     w...-p.'... ... 
 802c327:	0309 0b50 08ef de00 2f08 05dc 0939 5b0f     ..P....../..9..[
 802c337:	8014 08ec 1819 0305 0040 9805 6003 10e2     ........@....`..
 802c347:	980d 0518 070f 6d27 7a05 9537 082d cc21     ......'m.z7.-.!.
 802c357:	db0f 207c 0f0b 7ddb 20a6 7e0b 0f33 1715     ..| ...}. .~3...
 802c367:	2711 1107 fe40 1107 1210 11c1 0811 ff31     .'..@.........1.
 802c377:	1178 01f0 0339 5090 3ff3 041f 16f3 73f5     x...9..P.?.....s
 802c387:	0c16 3526 0838 1611 f906 e177 f91e 0f08     ..&58.....w.....
 802c397:	03fe cfd3 32f0 00d3 2f72 d3d5 ef05 00da     .....2..r/......
 802c3a7:	0511 c105 153b 9757 2090 6306 0051 313b     ....;.W.. .cQ.;1
 802c3b7:	5316 06f6 21c7 1c26 7775 77c6 fec6 0500     .S...!&.uw.w....
 802c3c7:	77d0 16c6 1706 ff04 023f 871f 5222 0739     .w......?..."R9.
 802c3d7:	a5ff 320e 94d1 1b01 ff41 d12f f93f 701b     ...2....A./.?..p
 802c3e7:	881f 006b 0002 114f 1108 712d 1f00 04ff     ..k...O...-q....
 802c3f7:	0ea5 461f fc3f 7f1b 1f71 1688 1716 1e14     ...F?...q.......
 802c407:	bbc5 3037 7d06 440c 00e1 f203 0cff 3c21     ..70.}.D......!<
 802c417:	9103 3ff0 ff0a 0090 5390 1111 1011 08fe     ...?.....S......
 802c427:	e00f 0910 3721 28a3 0c7f 0145 5111 1004     ....!7.(..E..Q..
 802c437:	a91e 0d74 0195 f087 9b05 03d4 1164 2c8b     ..t.........d..,
 802c447:	4781 a908 0392 9705 0663 1eab dca9 a516     .G......c.......
 802c457:	e905 0312 0604 13a9 df2d d830 3900 0531     ........-.0..91.
 802c467:	756d ff03 0d07 0857 f027 3965 05ff 7570     mu....W.'.e9..pu
 802c477:	2512 35e0 ff3f 9202 e005 0945 3d54 047f     .%.5?.....E.T=..
 802c487:	5408 1090 233f 5302 05ff 1471 400c 0239     .T..?#.S..q..@9.
 802c497:	71a8 1a00 0941 00bd 4587 5003 c505 00f6     .q..A....E.P....
 802c4a7:	2f81 98d1 3f83 90ce bf00 04f0 0238 2090     ./...?......8.. 
 802c4b7:	b11d 9f32 32d0 32d1 07d2 0067 3289 d6ff     ..2..2.2..g..2..
 802c4c7:	d732 fece 1819 ff19 90e7 1b00 7410 f0b0     2............t..
 802c4d7:	00f7 0128 cb07 9b7a 9121 02ff 1033 f237     ..(...z.!...3.7.
 802c4e7:	f521 ff1f 21e4 21e5 90e3 1110 c0f5 eb04     !....!.!........
 802c4f7:	15c0 a529 ea29 ff43 d020 3980 d06d 3840     ..).).C. ..9m.@8
 802c507:	04ff 5a28 519a 033f 7f28 9812 1141 0e20     ..(Z.Q?.(...A. .
 802c517:	0101 ffa9 11f1 2881 a220 1b41 a1fd 2508     .......( .A....%
 802c527:	0828 0290 0190 00ba 0a27 bd04 d002 0020     (.......'..... .
 802c537:	f52f 467d 2f08 46f5 0861 0812 ff0f c191     /.}F./.Fa.......
 802c547:	b21b 033f b191 1bbf 03c2 0324 0525 029d     ..?.......$.%...
 802c557:	08ff 0925 0324 0842 ff52 1212 420c 1b38     ..%.$.B.R....B8.
 802c567:	520c 38ff 0219 2812 9020 ef03 431b 231b     .R.8...( ....C.#
 802c577:	7f10 a5a4 ff0e a318 0328 f3cf 10d0 39bf     ........(......9
 802c587:	0304 9036 0183 865b 0cff 3d63 0303 3f24     ..6...[...c=..$?
 802c597:	efe4 2503 e23f bf00 11a3 6f10 0308 3288     ...%?......o...2
 802c5a7:	a910 3810 d306 7fbf 2834 9c7a 00a3 609f     ...8....4(z....`
 802c5b7:	08ff d003 3940 0806 ff24 1211 4208 2212     ....@9..$....B."
 802c5c7:	033f 00f2 1205 2918 4307 4bea 3f20 91f5     ?......).C.K ?..
 802c5d7:	9d00 0071 5003 0428 ffe0 0900 2801 4ef5     ..q..P(......(.N
 802c5e7:	2871 0c5f 0190 1009 0900 0050 5517 0081     q(_.......P..U..
 802c5f7:	6003 1b30 3081 601b 1700 70fd 1f08 1203     .`0..0.`...p....
 802c607:	0208 1213 090f 0920 0021 0015 0011 0023     ...... .!.....#.
 802c617:	bf4d a000 1011 00e0 350a d603 3700 6046     M........5...7F`
 802c627:	0f40 0002 730f ff03 5134 2823 e002 1303     @....s..4Q#(....
 802c637:	a3ff 2308 2411 4309 ff0c 3b13 0302 1113     ...#.$.C...;....
 802c647:	2863 7c67 03c0 6d00 3301 734e 2700 8355     c(g|...m.3Ns.'U.
 802c657:	2700 2013 1327 2710 0023 a527 5023 8327     .'. '..'#.'.#P'.
 802c667:	6509 2101 00f1 6207 00f2 f207 5f08 0300     .e.!...b....._..
 802c677:	0484 0413 24f5 c701 0033 4403 b38b f78c     .....$..3..D....
 802c687:	90b4 0003 c309 a31b ff1f 1fe4 1fe5 d1e3     ................
 802c697:	3907 02c7 f51f 7903 e901 0f02 3f20 07b7     .9.....y.... ?..
 802c6a7:	b07b 0b00 7c30 0508 bf40 e71b d72f d62f     {...0|..@..././.
 802c6b7:	430a ff2f 2fd3 2fd2 2fd1 1bd0 183d cf3d     .C/../././..=.=.
 802c6c7:	0128 5e3f 097d 1765 d7fd b307 1b48 1fd8     (.?^}.e.....H...
 802c6d7:	91e0 48fd 550f 1c21 f11f 0f28 98ff 1b58     ...H.U!...(...X.
 802c6e7:	28e8 7101 ffb8 d928 08a0 1428 384e 09fe     .(.q..(...(.N8..
 802c6f7:	21e3 28e8 46fa 2889 01ff ba70 a703 7f28     .!.(.F.(..p...(.
 802c707:	dd98 014c 7ab7 8aa1 6927 2815 02f7 0aa0     ..L..z..'i.(....
 802c717:	7308 1811 1813 08ef 9089 1728 0077 77c0     .s........(.w..w
 802c727:	f0ff 3837 9704 9087 ff48 123f 8797 0892     ..78....H.?.....
 802c737:	0f3f 1fef 9013 16e8 fd53 6745 90fb 0048     ?.......S.Eg..H.
 802c747:	b94d 09d2 0238 91bb 1008 145b 874c 8d00     M...8.....[.L...
 802c757:	fb57 17d0 1d00 3847 1102 3f47 f028 07c0     W.....G8..G?(...
 802c767:	7804 e900 8500 4dff 1b19 288a 987b e3cc     .x.....M...({...
 802c777:	1c1f f300 1706 7712 9089 700c 431e 931f     .......w...p.C..
 802c787:	af26 cb0e 1f13 2712 77b7 2112 2683 f1d7     &......'.w.!.&..
 802c797:	5818 9300 38df 38f0 053d 2519 063f e0e7     .X...8.8=..%?...
 802c7a7:	8138 3500 3111 3f00 ffc7 851f 0990 8a2d     8..5.1.?......-.
 802c7b7:	9a04 1bff 1f7a 2888 e001 ff09 1028 09f0     ....z..(....(...
 802c7c7:	f83c 8521 04ee 7f61 0d94 0300 1b40 ff30     <.!...a.....@.0.
 802c7d7:	0090 0b03 0c03 f01b 28ff 153d 28f0 9f1f     .........(=..(..
 802c7e7:	dbf0 e01b 2101 911b 8f01 404e 28ef 9260     .....!....N@.(`.
 802c7f7:	0040 80a9 f093 00fe 200d 0928 6096 1428     @........ (..`(.
 802c807:	4faf 9100 0090 1005 1908 e74e 28b0 007f     .O........N..(..
 802c817:	0031 9009 1b10 10f7 fa29 8d03 a028 2800     1.......)...(..(
 802c827:	e1f7 904c 0b00 1130 2840 a057 20a0 0d00     ..L...0.@(W.. ..
 802c837:	01a0 485f 5f08 a5ff ce0e 28fe 45f9 faa4     .._H._.....(.E..
 802c847:	2b04 02fb f903 a04d 0ea1 71ff f041 3911     .+....M....qA..9
 802c857:	700b fe41 d70b 1108 7c28 61eb 7f78 0311     .pA.....(|.ax...
 802c867:	0040 8171 0740 770d e041 0711 410d f221     @.q.@..wA....A!.
 802c877:	1d11 ddff 101f e03f 0000 fd7e 18ba 7501     ......?...~....u
 802c887:	6dba 7e80 bfba d81f f521 b876 f100 ff38     .m.~....!.v...8.
 802c897:	8903 a8f7 073d 1c90 e0ff e038 2b19 91fd     ....=.....8..+..
 802c8a7:	af2a 083f 0c90 bd04 0038 1903 28af 9e02     *.?.....8....(..
 802c8b7:	00ea 5c23 0b03 faf9 0700 0048 2903 fa28     ..#\......H..)(.
 802c8c7:	8a4e 1beb 00d9 1adf 4f01 1bd8 ffe8 f51f     N........O......
 802c8d7:	b877 08f0 0238 3fbb 0109 1477 984e 7310     w...8..?..w.N..s
 802c8e7:	9fd9 4897 0f3f 1a7c 0215 46c9 9867 0828     ...H?.|....Fg.(.
 802c8f7:	4312 1d20 8891 650a 288f 957d 098c 2a9d     .C ....e.(}....*
 802c907:	0085 a827 08f6 8a23 3ab8 70bd d1b8 7308     ..'...#..:.p...s
 802c917:	0639 ad08 6501 1bf8 02e8 7f19 1b28 90d8     9....e......(...
 802c927:	030b 21bc ffd7 1810 280b 4cff 90cb 18f7     ...!.....(.L....
 802c937:	b881 5b10 70de 03b8 89fd 1501 f0f9 3c69     ...[.p........i<
 802c947:	9104 00be 3f15 d220 3808 db01 7f41 f06c     .....? ..8..A.l.
 802c957:	390c 9104 0008 ff11 0817 2899 ef7d 78a9     .9.........(}..x
 802c967:	9cff 08dc 0b38 f31f ff79 18b8 e089 0949     ....8...y.....I.
 802c977:	3e89 02ff 0138 1628 084e ff3f 280b 9084     .>..8.(.N.?..(..
 802c987:	1b08 1848 881f b889 053f 0508 8908 6f08     ..H.....?......o
 802c997:	7eff 7894 7c58 7ec4 ff12 d27a ce72 947e     .~.xX|.~..z.r.~.
 802c9a7:	8918 08bb 0089 292f 0200 5d00 fe38 3d03     ....../)...]8..=
 802c9b7:	28f0 4602 a018 ff28 0228 184e 0128 989a     .(.F..(.(.N.(...
 802c9c7:	00fe faad e843 7e28 6c94 0876 76ed 00b8     ....C.(~.lv..v..
 802c9d7:	f895 6811 df02 b8fd 4b08 0328 0898 581b     ...h.....K(....X
 802c9e7:	90bf 1b28 1f48 2011 17cb 1fff 21f2 f0f3     ..(.H.. .....!..
 802c9f7:	380c bf08 0890 6c00 de32 0900 bf03 1890     .8.....l2.......
 802ca07:	6c00 d879 6107 feff 2100 28d7 440a f067     .ly..a...!.(.Dg.
 802ca17:	ff07 fd39 d779 27e0 d789 05fe 773b 0a28     ..9.y..'....;w(.
 802ca27:	674c d72f 007b 3902 2b31 3fff 1066 fb2f     Lg/.{..91+.?f./.
 802ca37:	7400 5409 0019 0919 7d3f 2109 9061 0020     .t.T....?}.!a. .
 802ca47:	0a02 0cec f0d8 f001 f001 0001 0002 22a5     ..............."
 802ca57:	7f2b 3ffa 2b76 3ffe 0032 5503 0023 520b     +..?v+.?2..U#..R
 802ca67:	1300 00a4 a203 0b00 f955 0300 00d5 9c0b     ........U.......
 802ca77:	0300 0074 5503 0098 7803 0300 007e 9203     ..t..U...x..~...
 802ca87:	2f00 3cff 0302 0a06 130e 3f18 211d 2926     ./.<.......?.!&)
 802ca97:	2e2c 0000 71f0 f030 f001 3001 f801 ff00     ,....q0....0....
 802caa7:	0005 4b06 e406 8007 0000 ffff ffff ffff     ...K............
 802cab7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cac7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cad7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cae7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802caf7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cb07:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cb17:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cb27:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cb37:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cb47:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cb57:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cb67:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cb77:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cb87:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cb97:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cba7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cbb7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cbc7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cbd7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cbe7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cbf7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cc07:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cc17:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cc27:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cc37:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cc47:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cc57:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cc67:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cc77:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cc87:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cc97:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cca7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ccb7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ccc7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ccd7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cce7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ccf7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cd07:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cd17:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cd27:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cd37:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cd47:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cd57:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cd67:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cd77:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cd87:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cd97:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cda7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cdb7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cdc7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cdd7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cde7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802cdf7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ce07:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ce17:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ce27:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ce37:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ce47:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ce57:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ce67:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ce77:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ce87:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802ce97:	ffff ffff ffff ffff 0000 c585 1700 0100     ................
 802cea7:	0010 0100 0004 0200 0002 0001 0001 0001     ................
 802ceb7:	0001 0000 0000 8700 00c5 001a 0000 0000     ................
 802cec7:	ff00 0200 0001 ffff 00ff ffff 0001 0100     ................
 802ced7:	ffff 0001 0001 8a00 007d ff26 0000 0000     ........}.&.....
 802cee7:	fb00 00f0 0000 0000 0000 0000 0000 0000     ................
	...
 802ceff:	fb00 00e8 0000 0000 0000 8d00 006b 001e     ............k...
	...
 802cf1f:	0600 0003 0000 0000 0010 0010 0000 9400     ................
 802cf2f:	00a3 0006 0000 0600 00e4 9a00 00a9 ab11     ................
 802cf3f:	efcd ab01 efcd 0402 0000 05ff 7c58 009c     ............X|..
 802cf4f:	0000 d7a2 0a00 8264 0405 00ff 00ff 00ff     ......d.........
 802cf5f:	0000 75a4 0200 0101 0000 89a6 2000 0000     ...u......... ..
	...
 802cf7f:	2000 0101 2000 0202 2000 0303 2000 0000     . ... ... ... ..
 802cf8f:	eba7 1600 f9ff 80f4 f9ff 80fc 0100 a086     ................
 802cf9f:	0000 0000 0000 ffff ff00 0000 b5a9 0000     ................
 802cfaf:	0000 5daa 0100 0001 ad00 007f 00a0 0000     ...]............
 802cfbf:	0000 ff00 0000 0000 0000 ff00 0000 0000     ................
 802cfcf:	0000 ff00 0500 0000 0000 fe00 fe70 006f     ............p.o.
 802cfdf:	0101 0101 0002 0000 0000 ff00 0000 0000     ................
 802cfef:	0000 ff00 0000 0000 0000 ff00 0500 0008     ................
 802cfff:	0000 fc00 fc08 0007 0a01 0101 0000 0000     ................
 802d00f:	0000 ff00 0000 0000 0000 ff00 0000 0000     ................
 802d01f:	0000 ff00 0500 0010 0000 fc00 fc08 0007     ................
 802d02f:	0101 0101 0003 0000 0000 ff00 0000 0000     ................
 802d03f:	0000 ff00 0000 0000 0000 ff00 0500 0018     ................
 802d04f:	0000 fc00 fc08 0007 0a01 0101 0001 b500     ................
 802d05f:	00e1 ab41 efcd ab01 efcd 0002 ff07 01fe     ..A.............
 802d06f:	0001 1004 0280 0220 09e0 ca0b 05e3 0100     ...... .........
 802d07f:	01f8 00f8 0000 0000 0000 0000 0000 0000     ................
	...
 802d09f:	0600 01ff 0000 a1d0 2400 0001 0100 0005     .........$......
 802d0af:	4000 0400 0004 4b06 4000 0400 0004 e406     .@.....K.@......
 802d0bf:	4000 0400 0004 0000 0000 0000 0000 0000     .@..............
 802d0cf:	33d5 0c00 0700 feff feff 0000 0000 0000     .3..............
	...
 802d507:	0100 0405 0000 0000 0100 8405 0000 0000     ................
 802d517:	0000 80f5 c2e9 d7fa ffff ffff ffff ffff     ................
 802d527:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d537:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d547:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d557:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d567:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d577:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d587:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d597:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d5a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d5b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d5c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d5d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d5e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d5f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d607:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d617:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d627:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d637:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d647:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d657:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d667:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d677:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d687:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d697:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d6a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d6b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d6c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d6d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d6e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d6f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d707:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d717:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d727:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d737:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d747:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d757:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d767:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d777:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d787:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d797:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d7a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d7b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d7c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d7d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d7e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d7f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d807:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d817:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d827:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d837:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d847:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d857:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d867:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d877:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d887:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d897:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d8a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d8b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d8c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d8d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d8e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d8f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d907:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 802d917:	ffff ffff ffff ffff 0525 0df0 0000 a180     ........%.......
 802d927:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 802d937:	0000 9985 0000 fc7b 0525 0214 0000 0000     ......{.%.......
 802d947:	0000 0000 0000 9985 0000 9385 0000 0000     ................
 802d957:	0000 d584 0000 4185 0000 9985 0000 9985     .......A........
 802d967:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 802d977:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 802d987:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 802d997:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 802d9a7:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 802d9b7:	0000 9985 0000 9985 f44f 40c0 f2c2 0000     ........O..@....
 802d9c7:	4685 f000 b801 ffff f44f 5278 2100 f04f     .F......O.xR.!O.
 802d9d7:	2020 f640 344f 47a0 f44f 5200 2100 484f       @.O4.GO..R.!OH
 802d9e7:	47a0 484f 8801 f421 71a1 8001 211b f8a0     .GOH..!..q...!..
 802d9f7:	19be f000 f987 484b 6800 f000 f8f8 2002     ......KH.h..... 
 802da07:	f000 f89a f000 fa1a f000 f912 b570 2302     ............p..#
 802da17:	2200 105b 2b01 d103 f811 3b01 f443 7380     ."[..+.....;C..s
 802da27:	07dc 780c d004 1c49 f800 4b01 1c52 e7f0     ...x..I....KR...
 802da37:	1c49 2cf8 da11 f811 5b01 f004 0607 ea45     I..,.....[....E.
 802da47:	2506 43ed 2603 eb06 04e4 e003 5d46 f800     .%.C.&......F]..
 802da57:	6b01 1c52 1e64 d2f9 e7db 4610 bd70 2800     .kR.d......Fp..(
 802da67:	d009 0b41 d008 2901 d003 2902 d001 2903     ..A....)...)...)
 802da77:	d101 f100 5000 4770 f100 4080 4770 0741     .....PpG...@pGA.
 802da87:	0ec9 08c0 4240 eb01 1040 4927 4408 4770     ....@B..@.'I.DpG
 802da97:	0741 08c0 0ec9 4240 eb01 1040 4922 3180     A.....@B..@."I.1
 802daa7:	4408 4770 b570 f44f 3580 f8d5 20ac 0e11     .DpGp.O..5... ..
 802dab7:	d032 f895 10ab 29ff d02e 2902 d32c f44f     2......)...),.O.
 802dac7:	717a 4348 30c8 4c19 4b19 2100 f853 6021     zqHC.0.L.K.!S.!`
 802dad7:	4296 d809 eb03 0681 6876 4296 d304 4c14     .B......vh.B...L
 802dae7:	f8d5 6130 3c48 1b80 1c89 2904 d3ee 2511     ..0aH<.....)...%
 802daf7:	4b10 2100 eb04 0281 6812 f502 62af 429a     .K.!.....h...b.B
 802db07:	dd03 4282 dc01 4613 460d 1c49 2912 d3f1     ...B...F.FI..)..
 802db17:	4807 385c 5d40 bd70 20f5 bd70 0020 0060     .H\8@]p.. p. .`.
 802db27:	0040 4201 0000 f8fb 0042 6044 0100 5801     @..B....B.D`...X
 802db37:	0000 b8d7 ffff d08a b510 4601 2000 b672     ...........F. r.
 802db47:	060a d512 4a6b 7913 7954 1b1b f003 031f     ....kJ.yTy......
 802db57:	2b1c d21f 7910 4b68 eb03 0380 1c40 7110     .+...yhK....@..q
 802db67:	6019 7910 f000 001f e012 4a62 1f92 7913     .`.y......bJ...y
 802db77:	7954 1b1b f003 033f 2b3c d20b 7910 4b5f     Ty....?.<+...y_K
 802db87:	eb03 0380 1c40 7110 6019 7910 f000 003f     ....@..q.`.y..?.
 802db97:	7110 2001 b662 bf40 bd10 4856 1f80 7901     .q. b.@...VH...y
 802dba7:	7940 1a08 f000 003f 4770 b672 0601 d50a     @y....?.pGr.....
 802dbb7:	4950 794a 1e52 714a 794a f002 021f 714a     PIJyR.JqJy....Jq
 802dbc7:	7949 4a4d e00a 494b 1f89 794a 1e52 714a     IyMJ..KI..JyR.Jq
 802dbd7:	794a f002 023f 714a 7949 4a48 f842 0021     Jy..?.JqIyHJB.!.
 802dbe7:	b662 4770 4943 1fc9 7008 bf40 4770 e92d     b.pGCI...p@.pG-.
 802dbf7:	41f0 4d41 4604 483f 3580 2600 1f80 7106     .AAM.F?H.5.&...q
 802dc07:	7146 6006 1d80 7106 7146 6006 1fc0 7006     Fq.`...qFq.`...p
 802dc17:	4f3b e007 f845 1b04 eb07 4004 4788 88a0     ;O..E......@.G..
 802dc27:	1da4 4404 6821 2900 d1f4 602e e8bd 81f0     ...D!h.)...`....
 802dc37:	4e30 2500 1fb6 1db7 6830 b990 2000 b672     0N.%....0h... r.
 802dc47:	7971 7932 4291 d00a 7970 492c eb01 0180     qy2y.B..py,I....
 802dc57:	1c40 7170 6808 7971 f001 013f 7171 b662     @.pq.hqy..?.qqb.
 802dc67:	6030 6838 b990 2000 b672 7979 793a 4291     0`8h... r.yy:y.B
 802dc77:	d00a 7978 4920 eb01 0180 1c40 7178 6808     ..xy I....@.xq.h
 802dc87:	7979 f001 011f 7179 b662 6038 f8d6 8000     yy....yqb.8`....
 802dc97:	f1b8 0f00 d011 4c18 3480 e005 6830 4788     .......L.4..0h.G
 802dca7:	6030 4540 d104 1d24 6821 2900 d1f6 e002     0`@E..$.!h.)....
 802dcb7:	6820 2800 d1c0 6035 e7be 480e 1fc0 7800      h.(..5`...H...x
 802dcc7:	b9b0 f8d7 8000 f1b8 0f00 d011 4c0a 3480     .............L.4
 802dcd7:	e005 6838 4788 6038 4540 d104 1d24 6821     ..8h.G8`@E..$.!h
 802dce7:	2900 d1f6 e002 6820 2800 d1a5 603d e7a3     .).... h.(..=`..
 802dcf7:	bf20 e7a1 0020 f359 0020 0061 0020 0060      ... .Y. .a. .`.
 802dd07:	0600 0100 b510 22a0 496b 486c f640 3347     ......."kIlH@.G3
 802dd17:	4798 486a f04f 21e0 f8c1 0d08 4868 f8c1     .GjHO..!....hH..
 802dd27:	0d0c 2000 22b0 1843 f883 2400 1c40 2818     ... ."C....$@..(
 802dd37:	dbf9 2080 f881 0d23 20d0 f881 0d22 2240     ... ..#.. ..".@"
 802dd47:	2100 4860 f640 334f 4798 485f 2100 6041     .!`H@.O3.G_H.!A`
 802dd57:	21ff 7001 bd10 4a59 eb02 0080 6401 4770     .!.p..YJ.....dpG
 802dd67:	495a 6808 174a f8c1 2080 4770 4b55 f833     ZI.hJ.... pGUK3.
 802dd77:	2010 b912 f823 1010 4770 1e40 d2f7 4770     . ..#...pG@...pG
 802dd87:	b672 2101 4081 4850 6842 4311 6041 4950     r..!.@PHBh.CA`PI
 802dd97:	f04f 5080 6008 b662 4770 b672 4a4a 6851     O..P.`b.pGr.JJQh
 802dda7:	4301 6051 494a f04f 5080 6008 b662 4770     .CQ`JIO..P.`b.pG
 802ddb7:	4b44 4602 f833 0010 f823 1012 4770 4842     DK.F3...#...pGBH
 802ddc7:	f990 0000 4770 2101 4081 4842 6001 4770     ....pG.!.@BH.`pG
 802ddd7:	f04f 22e0 4410 f880 1400 4770 b672 4a37     O..".D....pGr.7J
 802dde7:	eb02 0280 6c10 6411 b662 4770 b570 4d35     .....l.db.pGp.5M
 802ddf7:	4c35 2601 e017 6860 fab0 f080 f1c0 001f     5L.&..`h........
 802de07:	7020 b672 7820 fa06 f100 6860 4388 6060      pr. x....`h.C``
 802de17:	b662 f994 0000 f835 0010 b120 f994 0000     b.....5... .....
 802de27:	f835 0010 4780 6860 2800 d1e4 20ff 7020     5....G`h.(...  p
 802de37:	bd70 b672 4924 8048 b662 4770 f64b 317f     p.r.$IH.b.pGK..1
 802de47:	f04f 20e0 6141 2107 6101 481f 2105 60c1     O.. Aa.!.a.H.!.`
 802de57:	2100 6081 8041 4770 b510 2004 f7ff fe6c     .!.`A.pG... ..l.
 802de67:	4c19 68e0 1e40 60e0 d11e 2005 60e0 8860     .L.h@..`... .``.
 802de77:	b140 8860 1e40 0400 0c00 8060 d102 f240     @.`.@.....`...@.
 802de87:	105f 4780 68a0 1c40 60a0 68a0 68a1 0900     _..G.h@..`.h.h..
 802de97:	0400 f001 010f ea40 3001 1cc0 f7ff fe4c     ......@..0....L.
 802dea7:	490d f04f 7080 6008 bd10 f240 105f 4700     .IO..p.`..@._..G
 802deb7:	f240 105f 4700 0000 0000 0080 0020 005c     @._..G...... .\.
 802dec7:	fa05 0005 0020 d05a 0020 fc59 00e0 00e1     .... .Z. .Y.....
 802ded7:	00e0 04ed 00e0 00e2 0040 0805 e92d 5ff0     ........@...-.._
 802dee7:	4605 b2c2 4f79 f8df 81e8 0c00 f640 3a47     .F..yO......@.G:
 802def7:	2a01 d008 2a1c d07e 2a3c d043 2a3d d13f     .*...*~.<*C.=*?.
 802df07:	203e e8bd 9ff0 4604 4872 6078 7da0 b110     > .....FrHx`.}..
 802df17:	2080 f000 f8d1 220b 4621 486d 47d0 2000     . ....."!FmH.G. 
 802df27:	f888 000b f898 000a f898 1009 2603 4348     .............&HC
 802df37:	f898 2008 0180 4631 07d2 d100 2102 4348     ... ..1F.....!HC
 802df47:	f000 f8ba f8a8 000c 4861 220b f104 010b     ........aH."....
 802df57:	300e 47d0 4c5e 340e 7aa0 7a61 4348 7a21     .0.G^L.4.zazHC!z
 802df67:	0180 07c9 d100 2602 4370 f000 f8a5 81a0     .......&pC......
 802df77:	20c3 f000 f8a1 4955 1f09 8008 6878 6038     . ....UI....xh8`
 802df87:	4628 e7be f7ff fd6b 4681 6838 6078 4850     (F....k..F8hx`PH
 802df97:	22fc 2100 301c f640 384f 47c0 4f4c 2500     .".!.0@.O8.GLO.%
 802dfa7:	371c f04f 0b15 eb05 0045 fb05 f60b eb09     .7O.....E.......
 802dfb7:	0140 eb07 0446 2206 4620 47d0 f817 0016     @...F.." F.G....
 802dfc7:	78a1 4008 28ff d06a 78e0 2801 d05c 2802     .x.@.(j..x.(\..(
 802dfd7:	d05a 2804 d05b 2805 d115 7920 0140 f000     Z..([..(.. y@...
 802dfe7:	f86b 8260 f817 0016 28ff d003 2030 f000     k.`......(..0 ..
 802dff7:	f863 81a0 e000 e057 78a0 28ff d003 2026     c.....W..x.(..& 
 802e007:	f000 f85a 81e0 7920 1dc0 08c0 f000 f854     ..Z... y......T.
 802e017:	82a0 7920 1dc0 08c2 8aa0 2100 f040 5000     .. y.......!@..P
 802e027:	47c0 7920 1dc0 08c0 f000 f846 82e0 7920     .G y......F... y
 802e037:	1dc0 08c2 8ae0 2100 f040 5000 47c0 7920     .......!@..P.G y
 802e047:	1dc0 08c0 f000 f838 8360 7920 1dc0 08c2     ......8.`. y....
 802e057:	8b60 2100 f040 5000 47c0 2010 f000 f82c     `..!@..P.G. ..,.
 802e067:	8320 b280 2210 f040 5000 2180 47c0 f64f      ...."@..P.!.GO.
 802e077:	70ff 8120 f817 0016 28ff f814 0f24 f020     .p ......(..$. .
 802e087:	0030 d00a 3010 e009 7920 0140 e001 7920     0....0.. y@... y
 802e097:	0180 f000 f811 8260 e7b5 3020 7020 1c6d     ......`... 0 pm.
 802e0a7:	2d06 db80 480c e72c 2001 0c29 d000 2000     .-...H,.. ).... 
 802e0b7:	f888 000b 2000 e724 4a04 4603 6851 1cdb     ..... $..J.FQh..
 802e0c7:	b288 f023 0303 4419 6051 4770 0020 105a     ..#....DQ`pG .Z.
 802e0d7:	0020 a05c 0020 002d 0100 3e00 b510 4604      .\. .-....>...F
 802e0e7:	b2c0 490c 2801 d012 2802 d10e 6808 f100     ...I.(...(...h..
 802e0f7:	010e 7a00 0409 f000 000f f040 0008 ea41     ...z......@...A.
 802e107:	3000 f040 003f f7ff fd17 4620 bd10 0c20     .0@.?..... F.. .
 802e117:	6008 e7fa 0020 185a e92d 4ff8 4dea 4feb     .`.. .Z.-..O.M.O
 802e127:	f895 0028 f8df a3a8 eb00 0140 48e7 f04f     ..(.......@..HO.
 802e137:	0b00 6802 f895 0029 eb02 04c1 3420 1d3f     ...h..)..... 4?.
 802e147:	f107 0808 fa1f f688 b120 2801 d05f 2802     ........ ..(_..(
 802e157:	d15b e07d 7968 79a9 4288 d101 2807 d202     [.}.hy.y.B...(..
 802e167:	f8a5 b026 e005 280f d203 8ce8 f420 607c     ..&....(.... .|`
 802e177:	84e8 f8b5 9026 8853 e020 88a0 fa90 f1a0     ....&.S. .......
 802e187:	fab1 f181 eb05 0141 f9b1 100c f511 6f80     ......A........o
 802e197:	d102 f44f 4180 e001 f44f 5140 ea19 0f00     ..O..A..O.@Q....
 802e1a7:	d001 4208 d10e f10c 0c01 f00c 00ff f885     ...B............
 802e1b7:	0028 eb00 0040 eb02 04c0 3420 f895 c028     (...@..... 4..(.
 802e1c7:	459c d3da f895 0028 46a9 4298 d104 e8bd     .E....(..F.B....
 802e1d7:	4ff8 2063 f7ff bcb0 48bc 6822 1d00 2180     .Oc .....H"h...!
 802e1e7:	ea41 4000 9000 b10a f7ff fca6 6960 b110     A..@........`i..
 802e1f7:	9800 f7ff fca1 9800 f7ff fc9e 2001 f889     ............. ..
 802e207:	0029 6820 b118 e9c7 a000 e8bd 8ff8 68e0     ). h...........h
 802e217:	e9c8 0b00 2002 f885 0029 6960 b1c0 48aa     ..... ..).`i...H
 802e227:	7ae1 380c 7001 79a1 0909 7041 8046 7ae1     .z.8.p.y..ApF..z
 802e237:	f041 0101 7101 79a1 f3c1 0103 7141 79a1     A....q.y....Aq.y
 802e247:	eb08 1111 80c1 f8c0 b008 e9c7 a000 e7dc     ................
 802e257:	f8df c274 7ae0 f1ac 0c0c f88c 0000 79a0     ..t..z.........y
 802e267:	f3c0 0103 eb01 1010 f88c 0001 f8ac 6002     ...............`
 802e277:	f8cc b004 79a0 6961 eb08 1010 6803 400b     .....yai.....h.@
 802e287:	6003 6921 430b 6003 7921 0689 d51e 88a1     .`!i.C.`!y......
 802e297:	79e2 fa91 f1a1 fab1 f181 eb05 0141 f9b1     .y..........A...
 802e2a7:	100c f3c2 1641 f1c6 0603 4131 0616 d500     ....A.....1A....
 802e2b7:	4249 f9b4 6008 4431 7aa6 2401 40b4 1e64     IB...`1D.z.$.@d.
 802e2c7:	400c f3c2 0104 408c 431c 6004 e9c7 ac00     .@.....@.C.`....
 802e2d7:	3528 f885 b001 7828 1c40 7028 e795 e92d     (5....(x@.(p..-.
 802e2e7:	41f0 4c79 b2c3 71a0 7961 4299 d106 e8bd     .AyL...qay.B....
 802e2f7:	41f0 2018 ea40 4001 f7ff bc1e 79e0 2800     .A. @..@.....y.(
 802e307:	d146 4872 4e73 f100 0214 4d73 4f73 6800     F.rHsN....sMsO.h
 802e317:	2903 d020 dc07 b161 2901 d139 b95b 69c0     .) ...a..)9.[..i
 802e327:	6050 486f e02a 2907 d01f 290f d130 6900     P`oH*..)...)0..i
 802e337:	e018 6840 e012 8841 8ca3 eb01 0141 eb00     ..@h..A.....A...
 802e347:	00c1 3020 e002 4299 d003 1d80 8881 2900     .. 0...B.......)
 802e357:	d1f9 6800 e00c 2b03 d203 6980 e9c2 6000     ...h...+...i...`
 802e367:	e00d 6880 e9c2 7000 e009 2b07 d203 6940     ...h...p...+..@i
 802e377:	e9c2 5000 e003 68c0 6050 485a 6010 4853     ...P...hP`ZH.`SH
 802e387:	2180 3014 ea41 4000 f7ff fbd6 2001 71e0     .!.0A..@..... .q
 802e397:	e8bd 81f0 b570 4604 b2c1 f3c0 3203 4d4a     ....p..F.....2JM
 802e3a7:	0c00 291a d02c dc0b 4e48 2901 d013 2904     ...),...HN.)...)
 802e3b7:	d041 2919 d15b f414 4f70 d02b 484a bd70     A..)[...pO+.JHp.
 802e3c7:	291b d022 293f d014 2964 d150 06c8 ea40     .)".?)..d)P...@.
 802e3d7:	4014 60a8 e025 6030 f990 0000 2800 db04     .@.`%.0`.....(..
 802e3e7:	2102 f100 4080 f880 1200 2001 f885 002a     .!...@..... ..*.
 802e3f7:	e03d f3c2 0102 7129 f7ff fb31 6028 e036     =.....)q..1.(`6.
 802e407:	84a8 4610 f7ff ff6b e031 f000 f832 f7ff     ...F..k.1...2...
 802e417:	fe83 e02c b2c0 2818 d005 281b d101 f7ff     ..,....(...(....
 802e427:	fe7b 2000 bd70 2000 71e8 0e20 7168 79a8     {.. p.. .q .hq.y
 802e437:	f7ff ff55 e7f5 6830 f990 0000 2800 db16     ..U...0h.....(..
 802e447:	f7ff fb26 7800 b100 2001 6831 7849 4288     ..&..x... 1hIx.B
 802e457:	d101 2001 e000 2000 f895 102a 4281 d006     ... ... ..*..B..
 802e467:	f885 002a 211c ea41 4000 f7ff fb65 4620     ..*..!A..@..e. F
 802e477:	bd70 b5f0 2700 4d14 4639 84ef 2601 e01c     p....'.M9F...&..
 802e487:	682a eb01 0341 eb02 0243 7954 fa06 f304     *h..A...C.Ty....
 802e497:	4203 d011 7813 2bff d101 7893 1d9b 8cea     .B...x.+...x....
 802e4a7:	fa06 fc03 ea42 020c 84ea 68aa eb05 0343     ....B......h..C.
 802e4b7:	eb02 0244 8812 819a 1c49 792a 428a dcdf     ..D.....I.*y.B..
 802e4c7:	f885 7028 bdf0 0000 0020 1c5b 0020 1c5a     ..(p.... .[. .Z.
 802e4d7:	1b00 1900 1801 1900 1803 1900 1807 1900     ................
 802e4e7:	1800 1900 180f 1900 0100 0500 48ff 7a01     .............H.z
 802e4f7:	2900 d012 2100 7201 6802 6841 6001 6042     .)...!.r.hAh.`B`
 802e507:	f1a0 0324 8199 3312 8199 7a41 7391 6840     ..$....3..Az.s@h
 802e517:	2152 ea41 4000 f7ff bb0f 4770 4bf3 b510     R!A..@....pG.K..
 802e527:	3b24 8898 4af2 f44f 61c0 f040 5000 6011     $;...JO..a@..P.`
 802e537:	4619 f04f 4280 f8a2 1902 8984 317e 7a88     .FO..B......~1.z
 802e547:	895b fb00 4303 f8a2 3610 1c40 b2c0 4ae9     [....C...6@....J
 802e557:	7288 7a92 4290 d101 2000 7288 2001 7308     .r.z.B... .r. .s
 802e567:	bd10 b510 f7ff ffc2 48e0 2100 305a 7301     .........H.!Z0.s
 802e577:	7b40 f04f 24e0 b138 201d f7ff fadd f44f     @{O..$8.. ....O.
 802e587:	5040 f8c4 0180 bd10 f44f 60c0 f8c4 0100     @P......O..`....
 802e597:	bd10 49d6 b510 3924 7888 4ad6 1c40 b2c0     ...I..$9.x.J@...
 802e5a7:	7088 7a93 2200 4298 d100 708a 78c8 4bcf     .p.z.".B...p.x.K
 802e5b7:	1c40 b2c0 70c8 335a 7a5b 4298 d100 70ca     @....pZ3[z.B...p
 802e5c7:	f7ff ffcf bd10 4bc9 b510 3b12 8898 4ac8     .......K...;...J
 802e5d7:	f44f 61c0 f040 5000 6011 4619 f04f 4280     O..a@..P.`.FO..B
 802e5e7:	f8a2 1902 8984 316c 7ac8 895b fb00 4303     ......l1.z[....C
 802e5f7:	f8a2 3614 1c40 b2c0 4abf 72c8 7a92 4290     ...6@....J.r.z.B
 802e607:	d101 2000 72c8 2001 7308 bd10 49b7 b510     ... .r. .s...I..
 802e617:	3912 7888 4ab8 1c40 b2c0 7088 7a93 2200     .9.x.J@....p.z."
 802e627:	4298 d100 708a 78c8 4bb0 1c40 b2c0 70c8     .B...p.x.K@....p
 802e637:	335a 7a5b 4298 d100 70ca f7ff ff92 bd10     Z3[z.B...p......
 802e647:	b5f0 4aaa 2100 325a 7bd4 2615 4bab 4608     ...J.!Z2.{.&.K.F
 802e657:	2701 fb00 f206 f813 e012 fa07 f50e 4225     .'............%B
 802e667:	d008 eb03 0242 7952 fa07 fc02 ea4c 0c01     ....B.Ry....L...
 802e677:	fa1f f18c 1c40 2806 dbeb 489c 3824 81c1     ....@..(...H$8..
 802e687:	bdf0 e92d 5ff0 4605 f8df b260 b2c0 f3c5     ..-.._.F..`.....
 802e697:	3303 ea4f 4a15 f640 344f f04f 0901 f04f     .3O..J@.O4O...O.
 802e6a7:	0800 f10b 075a 281d d07e dc13 4e94 2801     ....Z..(~....N.(
 802e6b7:	d023 2803 d079 2809 d07f 280a d177 b672     #..(y..(...(w.r.
 802e6c7:	0740 f8a0 8602 7b38 2800 d071 f887 900d     @.....8{.(q.....
 802e6d7:	b662 e22f 2829 d06c 282e d06b 2851 d1ed     b./.)(l..(k.Q(..
 802e6e7:	2228 f8db 0004 2100 47a0 f88b 9008 7a38     (".....!.G....8z
 802e6f7:	2800 d1ee f7ff fefa e21c 4881 f640 416c     .(.........H@.lA
 802e707:	1d00 f8c6 a000 8001 f243 01c4 8041 f24d     ........C...A.M.
 802e717:	016e 8081 497b 487c f7ff f978 f04f 2020     n...{I|H..x.O.  
 802e727:	2204 6841 1d00 f640 3347 4798 4c77 f8a4     ."Ah..@.G3.GwL..
 802e737:	8300 f2af 2117 2009 f7ff fb0d f2af 1179     .....!. ......y.
 802e747:	200a f7ff fb08 f2af 11b5 200c f7ff fb03     . ......... ....
 802e757:	f2af 1147 200d f7ff fafe 8820 6832 8ad1     ..G.. .... .2h..
 802e767:	4308 8020 8b10 80e0 8b50 80a0 f5a4 64c0     .C .....P......d
 802e777:	2000 eb02 0140 7c4b b13b 4b65 7c0e 541e     . ..@.K|;.eK.|.T
 802e787:	7c49 eb04 0340 f8a3 1608 1c40 2802 ddf0     I|..@.....@..(..
 802e797:	4856 300a f8cb 0000 f100 0128 f8cb 1004     VH.0......(.....
 802e7a7:	3956 8188 3112 e006 e172 e1c6 e005 e23c     V9...1..r.....<.
 802e7b7:	e168 e18a e18e 8188 e241 484c 2101 3824     h.......A.LH.!$8
 802e7c7:	7001 f8df c130 4a53 f89c 1008 f89c e009     .p..0.SJ........
 802e7d7:	ea4f 79c1 4949 2503 8812 b289 f1b9 0f00     O..yII.%........
 802e7e7:	d101 f04f 0502 fb0e fe05 f00e 05ff f880     ..O.............
 802e7f7:	e001 ea4f 1585 8145 4d3e 8085 80c1 8102     ..O...E.>M......
 802e807:	d002 f04f 0507 e000 2500 4838 f8df e0e8     ..O......%8H....
 802e817:	3824 7405 3012 f880 8000 f89e c009 f89e     $8.t.0..........
 802e827:	e008 2503 ea5f 7ece d100 2502 fb0c fc05     ...%_..~...%....
 802e837:	f00c 05ff f880 c001 01ad 8145 4d2e 8085     ..........E..M..
 802e847:	80c1 8102 f8a0 800e 6831 4e2c 7f49 4319     ........1h,NI..C
 802e857:	7401 78f2 2101 2a04 d002 2a05 d000 2104     .t.x.!.*...*...!
 802e867:	7932 4822 fbb2 f2f1 4920 3812 315a 724a     2y"H.... I.8Z1Jr
 802e877:	2104 7441 3012 f880 8009 f04f 0900 2515     .!At.0....O....%
 802e887:	fb09 fb05 eb06 074b f8a7 a006 78f8 2804     ......K......x.(
 802e897:	d07e 2805 d115 481a 1d00 8178 f816 001b     ~..(...H..x.....
 802e8a7:	28ff d005 89b8 2230 f040 5000 2100 47a0     .(....0"@..P.!.G
 802e8b7:	78b8 28ff d005 89f8 2226 f040 5000 2100     .x.(....&"@..P.!
 802e8c7:	47a0 f816 001b 28ff d105 7878 28ff d102     .G.....(..xx.(..
 802e8d7:	78b8 28ff d003 4905 7a48 1c40 7248 f887     .x.(...IHz@.Hr..
 802e8e7:	901d f897 0024 f040 00c0 e015 0020 6c5b     ....$.@..... .[l
 802e8f7:	00e0 80e1 0020 a05c 0020 ae5c 0020 bc5c     .... .\. .\. .\.
 802e907:	0020 385a 0000 d5d7 0020 0020 0040 0006      .Z8.... . .@...
 802e917:	0040 0a02 0020 0c5a f887 0024 201f 8438     @... .Z...$.. 8.
 802e927:	f109 0901 8478 f1b9 0f06 dba9 f7ff fe88     ....x...........
 802e937:	4ac8 49c9 8993 81cb f8df c320 f8bc 000c     .J.I...... .....
 802e947:	8248 273f 800f f8df a318 f8ba 700a 443b     H.?'.........p;D
 802e957:	81cb f10a 0912 f8b9 300a 18c7 824f 7a92     .........0..O..z
 802e967:	2102 fbb1 f7f2 fb02 1217 f109 076c 72ba     .!..........l..r
 802e977:	f88a 8002 f89c 200a f040 5000 fbb1 fcf2     ....... @..P....
 802e987:	fb02 111c 72f9 435a f889 8002 2100 e000     .....rZC.....!..
 802e997:	e003 47a0 f04f 0b00 e025 88f8 21c8 4ab1     ...GO...%....!.J
 802e9a7:	4341 fbb2 f1f1 292d d900 212d 72b9 f8a7     AC....-)..-!.r..
 802e9b7:	800c f887 800b f8a7 800e f5b0 6fa0 d008     .............o..
 802e9c7:	f5a0 60c0 384b d007 2899 d108 f44f 70b8     ...`K8...(..O..p
 802e9d7:	e007 f24c 0070 e004 f24d 0070 e001 f44f     ..L.p...M.p...O.
 802e9e7:	705c 8238 e76d 49a0 fb0b f005 eb01 0640     \p8.m..I......@.
 802e9f7:	f886 801c 8ab0 b130 7931 f040 5000 1dc9     ......0.1y@..P..
 802ea07:	08ca 2100 47a0 8af0 b130 7931 f040 5000     ...!.G..0.1y@..P
 802ea17:	1dc9 08ca 2100 47a0 f10b 0b01 f1bb 0f06     .....!.G........
 802ea27:	dbe1 f887 800d 4991 f44f 5058 f8c1 01fc     .......IO.XP....
 802ea37:	67c8 b672 4888 3020 8981 8802 f021 013f     .gr..H 0....!.?.
 802ea47:	31ff fbb1 f3f2 fb02 1113 8041 8081 8841     .1........A...A.
 802ea57:	8802 1c49 fbb1 f3f2 fb02 1113 0989 f88a     ..I.............
 802ea67:	1003 8881 8800 3181 fbb1 f2f0 fb00 1012     .......1........
 802ea77:	0980 f889 0003 b662 2002 7238 487c f7ff     ......b.. 8r|H..
 802ea87:	f85b e057 4979 f44f 5058 31fc 6008 b662     [.W.yIO.XP.1.`b.
 802ea97:	2500 4e75 f04f 0915 fb05 f009 f816 1010     .%uNO...........
 802eaa7:	29ff d009 eb06 0040 7901 8a80 1dc9 08ca     .)....@..y......
 802eab7:	f040 5000 2100 47a0 1c6d 2d06 dbec f887     @..P.!.Gm..-....
 802eac7:	8008 200b f7ff f838 e614 4865 3012 f880     ... ..8...eH.0..
 802ead7:	a011 e02f 0e2e f00a 05ff 2000 fa09 f400     ../........ ....
 802eae7:	4234 d022 fa03 f200 b2e1 b2d2 b95d 183c     4B".........].<.
 802eaf7:	f884 8010 7bbc 438c 4314 73bc 7bfc 438c     .....{.C.C.s.{.C
 802eb07:	4314 73fc e011 7bfc 400c 4294 d103 183c     .C.s...{.@.B..<.
 802eb17:	f884 8010 e005 7bbc 400c 4294 d005 183c     .......{.@.B..<.
 802eb27:	7425 7bbc 438c 4314 73bc 1c40 2806 dbd5     %t.{.C.C.s@..(..
 802eb37:	f7ff fd86 2000 e8bd 9ff0 7bfb 2000 1839     ..... .....{. 9.
 802eb47:	7c0a b162 1e52 f012 02ff 740a d107 7bfa     .|b.R......t...{
 802eb57:	fa09 f100 7bbc 438a 400c 4322 73fa 1c40     .....{.C.@"C.s@.
 802eb67:	2806 dbec 7bf8 4298 d001 f7ff fd69 2101     .(...{.B....i..!
 802eb77:	7a38 460c f04f 3bff 2802 d122 f8df e0e8     8z.FO..;.(".....
 802eb87:	2000 f04f 0a15 fb00 f30a eb0e 0243 f892     . O.........C...
 802eb97:	c002 f1bc 0fff d006 8c12 464b 2a1e d800     ..........KF.*..
 802eba7:	2300 4019 e009 f81e 3013 2bff d005 8c12     .#.@.....0.+....
 802ebb7:	464b 2a1e d800 2300 401c 1c40 2806 dbe2     KF.*...#.@@..(..
 802ebc7:	b1b1 6878 1c40 6078 d101 f8c7 b004 6831     ..xh@.x`......1h
 802ebd7:	6878 684a 4290 d104 204d f7fe ffad 2021     xhJh.B..M ....! 
 802ebe7:	e003 68c9 4288 d10e 4822 f7fe ffa5 e00a     ...h.B.."H......
 802ebf7:	6830 68c0 b128 6879 4281 d302 481e f7fe     0h.h(.yh.B...H..
 802ec07:	ff9b f8c7 8004 b1c4 6838 1c40 6038 d101     ........8h@.8`..
 802ec17:	f8c7 b000 6831 6838 680a 4290 d106 204d     ....1h8h.h.B..M 
 802ec27:	f7fe ff8a 2021 f7fe ff87 e008 6889 4288     ....! .......h.B
 802ec37:	d105 480b f880 9011 e001 f8c7 8000 4628     ...H..........(F
 802ec47:	e779 4907 0002 f101 017e 6808 d100 6848     y..I....~..h..Hh
 802ec57:	4770 0000 0020 a05c 0040 0206 0020 ae5c     pG.. .\.@... .\.
 802ec67:	0020 485b e200 0090 0020 bc5c 00e0 84e0      .[H.... .\.....
 802ec77:	0200 0b00 0400 2c30 0500 2c30 e92d 41f0     ......0,..0,-..A
 802ec87:	4daf 6928 2800 d16f 7e28 2700 b130 762f     .M(i.(o.(~.'0./v
 802ec97:	6868 68a9 4008 f000 7080 6068 7ee8 2401     hh.h.@...ph`.~.$
 802eca7:	b140 7f28 b930 78e8 b920 772c f243 004c     @.(.0..x .,wC.L.
 802ecb7:	f7fe ff42 6828 6869 4288 d001 6868 e00a     ..B.(hih.B..hh..
 802ecc7:	68a8 4281 d106 2800 d175 e8bd 41f0 489d     .h.B...(u....A.H
 802ecd7:	f7fe bf32 6068 4e9c 6030 7ee8 b908 8aa8     ..2.h`.N0`.~....
 802ece7:	b900 70f7 7828 07c1 d100 70f7 0780 d501     ...p(x.....p....
 802ecf7:	79e8 70f0 78e8 7831 b918 0789 d503 7034     .y.p.x1x......4p
 802ed07:	e001 07c9 d0fb 78a9 b911 7eaa b102 70b7     .......x...~...p
 802ed17:	78f2 b11a 7e6b b10b 8aeb b90b 70b7 e001     .x..k~.......p..
 802ed27:	78b3 b903 7077 f8d6 3001 f8d5 7001 0a1b     .x..wp...0...p..
 802ed37:	ebb3 2f17 d919 b12a b920 8aa8 210c ea41     .../..*. ....!A.
 802ed47:	4000 e026 78b0 b130 b929 487d 3022 213c     .@&..x0.).}H"0<!
 802ed57:	ea41 4000 e016 7870 b1f0 7868 b9e0 8aa8     A..@..px..hx....
 802ed67:	2109 ea41 4000 e005 e025 7873 b933 786b     .!A..@..%.sx3.kx
 802ed77:	b123 200a f7fe fee0 746c e00d 78b3 b92b     #.. ....lt...x+.
 802ed87:	b121 203d f7fe fed8 74ac e005 b922 b118     !.= .....t.."...
 802ed97:	200d f7fe fed1 74ec 7830 7829 4288 d00a     . .....t0x)x.B..
 802eda7:	8aa9 f000 000f 0409 ea41 3000 f040 001a     ........A..0@...
 802edb7:	f7fe fec2 742c e8bd 81f0 b570 4605 b2c1     ....,t....p..F..
 802edc7:	0c00 2600 4c5e 2201 b2c3 2926 d03a dc0a     ...&^L."..&):...
 802edd7:	2901 d01a 290b d06e 290e d053 2918 d14f     .)...)n..)S..)O.
 802ede7:	7023 7426 e04a 293e d05c 293f d013 2948     #p&tJ.>)\.?)..H)
 802edf7:	d01b 2949 d144 0748 ea40 4015 8841 82a1     ..I)D.H.@..@A...
 802ee07:	8800 82e0 f000 f862 e038 6801 60e1 8880     ......b.8..h.`..
 802ee17:	82a0 76a2 e034 f3c5 3103 f3c1 0102 7761     ...v4....1....aw
 802ee27:	f7fe fe1d f8c4 001e e02a 76e3 b113 7622     ........*..v.."v
 802ee37:	7726 e003 f243 004c f7fe fe7e f7ff ff1e     &w..C.L...~.....
 802ee47:	2000 bd70 2806 d20d e8df f000 0a0c 080a     . p..(..........
 802ee57:	0305 483e e000 483e 60a0 e00b 483d e7fb     ..>H..>H.`..=H..
 802ee67:	68e0 e7f9 6820 b908 6920 b110 483a f7fe     .h.. h.. i..:H..
 802ee77:	fe9c 60a6 6860 68a1 4008 6060 f7ff fefe     ...``h.h.@``....
 802ee87:	4628 bd70 0c28 d009 2801 d009 2809 d002     (Fp.(....(...(..
 802ee97:	280d d1f3 7622 70e2 74e6 e7ef 70e6 e7fb     .(.."v.p.t...p..
 802eea7:	7622 e7eb ebb2 4f15 d101 2001 e000 2000     "v.....O... ... 
 802eeb7:	70a0 74a6 e7e2 2002 ebb0 4f15 d000 2200     .p.t... ...O..."
 802eec7:	7062 7466 e7da 491e 7688 e6d7 e92d 41f0     bpft...I.v..-..A
 802eed7:	2400 4e1b f640 3747 e01e f8d6 101e eb04     .$.N@.G7........
 802eee7:	0044 eb01 0140 eb06 0540 f105 0022 2206     D...@...@...".."
 802eef7:	47b8 f895 0025 2801 d00a 2802 d008 2804     .G..%..(...(...(
 802ef07:	d001 2805 d107 8af0 0980 f885 0026 e002     ...(........&...
 802ef17:	8af0 0900 e7f9 1c64 7f70 42a0 dcdd 7f74     ......d.p..B..t.
 802ef27:	e008 eb04 0044 eb06 0040 3022 2206 490b     ....D...@."0.".I
 802ef37:	47b8 1c64 2c06 dbf4 2001 7670 e73b 0000     .Gd..,... pv;...
 802ef47:	0020 d461 0100 2400 0020 425a 010f 0101      .a....$ .ZB....
 802ef57:	0107 0101 0103 0101 0100 2410 0000 e2e1     ...........$....
 802ef67:	48ff 4770 b672 4aff 80d1 8010 49fe 1450     .HpGr..J.....IP.
 802ef77:	8088 b662 4770 b672 4afa 80d1 8010 49fa     ..b.pGr..J.....I
 802ef87:	1410 8088 b662 4770 b672 2000 49f5 8008     ....b.pGr.. .I..
 802ef97:	80c8 49f5 8088 b662 4770 b672 2112 48f1     ...I..b.pGr..!.H
 802efa7:	3008 80c1 49f0 3112 8001 20ff 3912 8008     .0...I.1... .9..
 802efb7:	b662 4770 b510 4cec 7ae0 7b21 0240 ea40     b.pG...L.z!{@.@.
 802efc7:	2001 79a1 4308 49e7 1e89 8008 48e7 6800     . .y.C.I.....H.h
 802efd7:	f990 0008 2800 db0a f7fe fd51 79a2 79e3     .....(....Q..y.y
 802efe7:	2101 421a d000 2100 7a22 4051 7001 bd10     .!.B...!"zQ@.p..
 802eff7:	b510 b672 4adc 7991 4301 7191 f7ff ffda     ..r..J.y.C.q....
 802f007:	b662 bd10 b510 b672 4ad7 7991 4381 7191     b.....r..J.y.C.q
 802f017:	f7ff ffd0 b662 bd10 b510 460c 21b0 4620     ....b......F.! F
 802f027:	f240 126d 4790 2118 4620 f7ff ff9b 2001     @.m..G.! F..... 
 802f037:	bd10 4608 b500 49ce 6809 6001 49cb 6809     ...F...I.h.`.I.h
 802f047:	680a 6042 6849 6081 210c f7ff ff8b 2001     .hB`Ih.`.!..... 
 802f057:	bd00 b510 b672 7801 f3c1 0200 49c2 720a     ....r..x.....I.r
 802f067:	7840 71c8 f7ff ffa6 b662 2001 bd10 48be     @x.q....b.. ...H
 802f077:	b510 3012 7800 f000 003f f7ff ffc3 2001     ...0.x..?...... 
 802f087:	bd10 b510 7800 460c f3c0 0001 f000 ffcf     .....x.F........
 802f097:	6020 2104 4620 f7ff ff65 2001 bd10 b510      `.! F..e.. ....
 802f0a7:	f8d0 1001 48b0 3012 7800 f3c0 0001 f000     .....H.0.x......
 802f0b7:	ffd6 2020 f7fe fd79 2001 bd10 b510 2013     ..  ..y.. ..... 
 802f0c7:	ea40 4001 f7fe fd38 2000 bd10 b510 2051     @..@..8.. ....Q 
 802f0d7:	f7fe fd32 2000 bd10 b510 7800 2129 ea41     ..2.. .....x)!A.
 802f0e7:	4000 f7fe fd29 2001 bd10 b538 7801 295f     .@..).. ..8..x_)
 802f0f7:	d102 6801 0209 d003 2010 f7ff ff79 e00e     ...h..... ..y...
 802f107:	6801 f990 0004 f341 0117 f361 201f 9000     .h....A...a.. ..
 802f117:	4b98 2201 4992 4668 f240 24bb 47a0 2001     .K.".IhF@..$.G. 
 802f127:	bd38 b510 460c 2204 498d 4620 f640 3347     8....F.".I F@.G3
 802f137:	4798 2104 4620 f7ff ff15 2001 bd10 b510     .G.! F..... ....
 802f147:	6800 2123 f3c0 0013 ea41 3000 f7fe fcf4     .h#!....A..0....
 802f157:	2001 bd10 b510 2053 ea40 4001 f7fe fcec     . ....S @..@....
 802f167:	2000 bd10 b510 4604 f000 fbf8 4a7e f8c2     . .....F....~J..
 802f177:	000e b188 7821 f3c1 0300 7801 f363 0100     ....!x.....xc...
 802f187:	7001 f8d4 1001 f8c0 1001 8811 70d1 1d40     .p...........p@.
 802f197:	2120 f7ff fef0 e002 2010 f7ff ff29 2001      !....... ..).. 
 802f1a7:	bd10 b510 460c 2001 bf00 b1b8 f000 fc05     .....F. ........
 802f1b7:	496d f8c1 000e b130 880a 70ca 7801 2205     mI....0....p.x."
 802f1c7:	eb02 0151 e007 2205 2100 4620 f640 334f     ..Q....".! F@.O3
 802f1d7:	4798 2105 4620 f7ff fec5 e002 2010 f7ff     .G.! F....... ..
 802f1e7:	ff07 2001 bd10 b510 7800 2805 d805 2121     ... .....x.(..!!
 802f1f7:	ea41 4000 f7fe fca0 e002 2010 f7ff fef8     A..@....... ....
 802f207:	2001 bd10 b510 460c 2001 f7ff fd1a 6020     . .....F. .... `
 802f217:	2000 f7ff fd16 6060 f003 ff1a 60a0 f001     . ....``.....`..
 802f227:	f84e 81a0 210e 4620 f7ff fe9c 2001 bd10     N....! F..... ..
 802f237:	b510 4604 7800 f020 000c 7020 484e f7fe     ...F.x ... pNH..
 802f247:	fcb4 2030 ea40 4004 f7fe fcaf 2000 bd10     ..0 @..@..... ..
 802f257:	b510 7800 460c f3c0 0200 f3c0 0140 f3c0     ...x.F......@...
 802f267:	0083 f001 fac5 8020 2102 4620 f7ff fe7a     ...... ..! F..z.
 802f277:	2001 bd10 4608 493b b500 39fe 6809 090a     . ...F;I...9.h..
 802f287:	8841 f362 010e 8041 2104 f7ff fe6b 2001     A.b...A..!..k.. 
 802f297:	bd00 b510 7840 07c1 4833 7b40 d003 b940     ....@x..3H@{..@.
 802f2a7:	4833 3867 e001 b120 2045 f7fe fc45 2000     3Hg8.. .E ..E.. 
 802f2b7:	bd10 2001 bd10 b510 7840 2144 f3c0 0000     ... ....@xD!....
 802f2c7:	ea41 4000 f7fe fc38 2001 bd10 b510 7800     A..@..8.. .....x
 802f2d7:	460c 1e41 2906 d303 2010 f7ff fe89 e00b     .FA..)... ......
 802f2e7:	f001 f82c 4601 220d 4620 f640 3347 4798     ..,..F." F@.G3.G
 802f2f7:	210d 4620 f7ff fe36 2001 bd10 b510 4a1a     .! F..6.. .....J
 802f307:	8810 28ff d006 7990 f040 0010 7190 f7ff     ...(...y@....q..
 802f317:	fe51 bd10 4813 300e 8841 8011 8800 7090     Q....H.0A......p
 802f327:	8890 b138 f7ff fe30 7990 f040 0010 7190     ..8...0..y@....q
 802f337:	f7ff fe40 e8bd 4010 205e f7fe bbfd b510     ..@....@^ ......
 802f347:	f04f 4280 f8b2 0320 4c07 f400 41c0 4620     O..B.. ..L...A F
 802f357:	88a3 7980 4299 f040 0010 d012 71a0 e00d     ...y.B@......q..
 802f367:	0000 e8e1 0040 2203 0020 1a62 0020 485a     ....@.." .b. .ZH
 802f377:	0100 ac00 0525 3713 0200 5700 f7ff fe1a     ....%..7...W....
 802f387:	e00b 78e1 2904 d00b 2905 d104 f8d4 000e     ...x.)...)......
 802f397:	b108 f000 fb20 2000 70e0 f7ff fdf5 bd10     .... .. .p......
 802f3a7:	f8b2 1328 b141 f8d4 000e 7802 f361 0247     ..(.A......xa.G.
 802f3b7:	7002 f000 fae2 e7ee 71a0 f7ff fdfb e7ea     .p.......q......
 802f3c7:	e92d 41f0 4eb5 b2c2 0c05 8833 4604 f3c0     -..A.N....3..F..
 802f3d7:	3103 2a26 d076 dc1d 2a14 d074 dc12 4fb0     .1&*v....*t....O
 802f3e7:	2a01 d046 2a02 d070 2a12 d16a 7371 2b0c     .*F..*p..*j.qs.+
 802f3f7:	d1fb 48aa 3012 7840 07c0 7b70 d07d 2800     ...H.0@x..p{}..(
 802f407:	d05f e0c7 2a16 d079 2a1a d07d 2a1b d1ec     _....*y..*}..*..
 802f417:	2008 e0bb 2a54 d073 dc0d f04f 5000 ea40     . ..T*s...O..P@.
 802f427:	4014 2a46 d06d 2a47 d06c 2a52 d1dd 2b11     .@F*m.G*l.R*...+
 802f437:	d169 2128 e0a2 2a57 d071 2a5e d070 2a82     i.(!..W*q.^*p..*
 802f447:	d1d3 f2af 1147 2006 f7fe fc85 f2af 1111     ....G.. ........
 802f457:	2007 f7fe fc80 21b0 2006 f7fe fcb9 21a0     . .....!. .....!
 802f467:	2007 f7fe fcb5 498f 20c0 f8c1 01fc 67c8     . .....I. .....g
 802f477:	e06f 2000 f04f 4180 603d f8a1 0320 7aa8     o.. O..A=`.. ..z
 802f487:	71f0 7a68 7230 f995 0008 2800 db0f f7fe     .qhz0r.....(....
 802f497:	faf6 683a 2101 7a52 b102 2100 7001 6838     ..:h.!Rz...!.p8h
 802f4a7:	2104 f990 0008 f100 4080 f880 1200 6838     .!.......@....8h
 802f4b7:	f990 000b 2800 db6f 2102 f100 4080 f880     .....(o..!...@..
 802f4c7:	1200 e069 e02d e047 e7ff 6838 f990 000b     ..i.-.G...8h....
 802f4d7:	2800 db0b f7fe fadc 7800 b938 683a f992     .(.......x8.:h..
 802f4e7:	100b f992 000c 320d f000 f87e 2001 f000     .......2..~.. ..
 802f4f7:	f8e1 2082 f7fe fb20 e04e e04a e041 e003     ... .. .N.J.A...
 802f507:	e02e e011 e017 e023 f8b6 0009 ebb0 4f14     ......#........O
 802f517:	d042 2001 f7ff fd6c f8a6 5009 e03c e00d     B.. ..l....P<...
 802f527:	e03d 72f5 2004 e031 2b08 d135 221c 4351     =..r. 1..+5.."QC
 802f537:	f7ff fd18 e02e 2b09 d12e e02b 2d01 d004     .......+..+..-..
 802f547:	2d02 d006 2d03 d14d e003 2002 f7ff fd50     .-...-M.... ..P.
 802f557:	e048 f7ff fd22 e045 2b10 d143 2140 e00b     H...".E..+C.@!..
 802f567:	2b0a d13f 484d 2106 3024 7800 eba1 1010     .+?.MH.!$0.x....
 802f577:	4240 2165 eb01 1100 4848 3024 f7ff fcf2     @Be!....HH$0....
 802f587:	e7e7 0c20 d000 2001 7330 2002 f7ff fd30     .. .... 0s. ..0.
 802f597:	e002 b908 f7ff fd01 4620 e8bd 81f0 2100     ........ F.....!
 802f5a7:	4a41 4608 eb00 0440 f812 4014 429c d104     AJ.F..@....@.B..
 802f5b7:	eb00 0040 eb02 0140 e002 1c40 2817 d3f1     ..@...@...@..(..
 802f5c7:	b119 78b0 794a 4290 d003 2010 f7ff fd10     ...xJy.B... ....
 802f5d7:	e7bf f8d1 2001 4931 3124 f1a1 0012 4790     ..... 1I$1.....G
 802f5e7:	2800 d1b6 2000 e7d8 e92d 41f0 460f 4614     .(... ..-..A.F.F
 802f5f7:	f7fe fa58 4606 4829 308a f001 f97b e02c     ..X..F)H.0..{.,.
 802f607:	4826 2228 2100 308a f640 334f 4798 4923     &H(".!.0@.O3.G#I
 802f617:	2501 318a 700d 2012 7288 f814 0b01 7408     .%.1.p. .r.....t
 802f627:	2004 7508 0340 8348 2003 7708 774e 2000     . .u@.H.. .wNw. 
 802f637:	7788 2107 f001 f994 2101 4638 f000 f812     .w.!.....!8F....
 802f647:	481a 7005 481a f880 520c 2100 4638 f000     .H.p.H...R.!8F..
 802f657:	f809 2108 2000 f001 f983 7820 2800 d1cf     ...!. .... x.(..
 802f667:	1ee4 e7fa e92d 41f0 1e4c 4680 43e6 f04f     ....-..AL..F.CO.
 802f677:	4580 f44f 77c8 e00d f8b5 0b02 f8b5 1b02     .EO..w..........
 802f687:	1a09 b289 42b9 d3f9 4640 f7fe fa01 7800     .....B..@F.....x
 802f697:	ea40 0444 42b4 d1ef e77f 0000 0020 1a62     @.D..B...... .b.
 802f6a7:	0020 485a 00e0 84e0 0000 ece1 0020 967f      .ZH........ ...
 802f6b7:	0142 0040 b510 49f2 f881 0178 49f1 2004     B.@....I..x..I. 
 802f6c7:	70c8 1d09 70c8 2080 f7ff fc9c e8bd 4010     .p...p. .......@
 802f6d7:	2040 f7ff bc8d 2001 4770 4be9 f893 1176     @ ..... pG.K..v.
 802f6e7:	2906 d207 eb03 02c1 1c49 f883 1176 6010     .)......I...v..`
 802f6f7:	2000 6050 4770 b510 4ce1 f894 1176 2900     . P`pG...L..v..)
 802f707:	d011 f000 f9aa f894 2176 eb04 01c2 3908     ........v!.....9
 802f717:	2800 d008 1e52 f884 2176 e8bd 4010 2208     .(..R...v!...@."
 802f727:	f640 3347 4718 bd10 49d5 2000 f881 0176     @.G3.G...I. ..v.
 802f737:	4770 4ad3 f892 1176 b909 2000 4770 f892     pG.J..v.... pG..
 802f747:	0177 1c40 b2c0 f882 0177 4288 d302 2000     w.@.....w..B... 
 802f757:	f882 0177 f892 0177 eb02 00c0 6800 4770     ..w...w......hpG
 802f767:	e92d 41f0 2400 4625 4fc6 4ec5 f04f 0815     -..A.$%F.O.NO...
 802f777:	e015 7878 fb00 f008 eb06 0540 f855 0f30     ..xx......@.U.0.
 802f787:	f000 f96b 0004 d005 79a0 2802 d00a 7968     ..k......y.(..hy
 802f797:	07c0 d107 48bb f000 f93b f000 f947 78b8     .....H..;...G..x
 802f7a7:	2800 d1e6 78b9 2000 b329 f896 1177 eb06     .(...x. )...w...
 802f7b7:	01c1 42a1 d11f 79a1 1d28 2901 d103 7801     ...B...y(..)...x
 802f7c7:	f021 0108 e007 7841 07c9 d0f8 2100 71a1     !.....Ax.....!.q
 802f7d7:	7801 f041 0108 7001 7922 b2c9 f362 0141     .xA....p"y..b.A.
 802f7e7:	7001 7962 b2c9 f362 0100 7001 79e1 e01e     .pby..b....p.y..
 802f7f7:	7001 e8bd 81f0 f896 1176 2900 d0f9 48a2     .p......v..)...H
 802f807:	f896 1177 7842 eb06 01c1 f022 02fe 7042     ..w.Bx...."...Bp
 802f817:	f896 2178 b10a 680a e001 4a9c 6812 f8c0     ..x!...h...J.h..
 802f827:	2002 794b 7802 f363 0200 7002 79c9 2901     . Ky.xc....p.y.)
 802f837:	7801 d102 f041 0104 e7da f021 0104 e7d7     .x..A.....!.....
 802f847:	4890 1d00 7881 78c2 4291 d207 7800 2113     .H...x.x.B...x.!
 802f857:	4348 498b eb01 0040 30d8 4770 2000 4770     HC.I..@..0pG. pG
 802f867:	e92d 47f0 4f87 2113 1d3f 7838 f8df 9210     -..G.O.!?.8x....
 802f877:	4348 eb09 0540 f899 0178 35d8 2800 f8d5     HC..@...x..5.(..
 802f887:	0002 d003 f000 f8e9 4604 e004 497f 6809     .........F...I.h
 802f897:	4288 d137 4c7a 2c00 d034 487a 7881 2601     .B7.zL.,4.zH.x.&
 802f8a7:	f04f 0802 b329 7840 2115 4348 eb09 0040     O...).@x.!HC..@.
 802f8b7:	3034 f8d0 1002 f8d5 2002 4291 d119 7829     40....... .B..)x
 802f8c7:	074a d504 7840 07c0 d001 71a6 e011 79a0     J...@x.....q...y
 802f8d7:	b178 7920 f3c1 0100 4281 d10a f884 8006     x. y.....B......
 802f8e7:	4631 b100 2100 7121 4866 f000 f891 f000     1F...!!qfH......
 802f8f7:	f89d 7828 0700 d507 71e6 7828 f340 0040     ..(x.....q(x@.@.
 802f907:	1c40 7160 e8bd 87f0 79e0 2801 d107 f884     @.`q.....y.(....
 802f917:	8007 7828 f340 0040 1c40 7160 e001 2802     ..(x@.@.@.`q...(
 802f927:	d1f0 7868 0840 d0ed 7828 7961 f3c0 0040     ..hx@...(xay..@.
 802f937:	4281 d0e7 78ba 78f9 1e49 428a dae2 7160     .B...x.xI..B..`q
 802f947:	7868 07c0 d002 2020 f7ff fb52 484d 1d00     hx....  ..R.MH..
 802f957:	f000 f850 e8bd 47f0 f000 b873 4849 7881     ..P....G..s.IH.x
 802f967:	78c2 4291 d207 7800 2115 4348 4944 eb01     .x.B...x.!HCDI..
 802f977:	0040 3035 4770 2000 4770 b510 4841 2115     @.50pG. pG..AH.!
 802f987:	7800 4348 493e eb01 0040 3030 7942 0852     .xHC>I..@.00ByR.
 802f997:	d012 f8d0 2006 6002 2200 7102 f891 1178     ..... .`.".q..x.
 802f9a7:	b919 493a 6809 f8c0 1006 4836 f000 f822     ..:I.h....6H..".
 802f9b7:	e8bd 4010 f000 b83a bd10 4832 1d00 7881     ...@..:...2H...x
 802f9c7:	b139 7840 2113 4348 492d eb01 0040 30d9     9.@x.!HC-I..@..0
 802f9d7:	4770 2000 4770 482b b510 1d00 7880 2800     pG. pG+H.....x.(
 802f9e7:	d007 4828 1d00 f000 f813 e8bd 4010 f000     ..(H.........@..
 802f9f7:	b828 bd10 b672 7801 78c2 1c49 fbb1 f3f2     (...r..x.xI.....
 802fa07:	fb02 1113 7001 7881 1c49 7081 b662 4770     .....p.xI..pb.pG
 802fa17:	b672 7841 78c2 1c49 fbb1 f3f2 fb02 1113     r.Ax.xI.........
 802fa27:	7041 7881 1e49 7081 b662 4770 b672 4815     Ap.xI..pb.pGr..H
 802fa37:	7880 2803 f04f 0040 d201 f7ff bad9 f7ff     .x.(O.@.........
 802fa47:	bae1 b672 480f 1d00 7880 2800 f04f 0080     ..r..H...x.(O...
 802fa57:	d001 f7ff bacd f7ff bad5 b510 4b08 2100     .............K.!
 802fa67:	f893 2176 e008 eb03 04c1 6824 4284 d102     ..v!......$h.B..
 802fa77:	eb03 00c1 bd10 1c49 428a dcf4 2000 bd10     ......I..B... ..
 802fa87:	0020 cc62 0020 4c5a 0020 3c64 0100 ac00      .b. .ZL .d<....
 802fa97:	b510 4604 f990 0000 2800 db12 7861 f3c1     ...F.....(..ax..
 802faa7:	0106 2904 d104 f7fd ffea 7861 09c9 7001     ...)......ax...p
 802fab7:	7860 f3c0 0106 f994 0000 f100 4080 f880     `x...........@..
 802fac7:	1200 bd10 e92d 41f0 f04f 4680 f896 1403     ....-..AO..F....
 802fad7:	2000 f896 2401 f001 01f8 f002 04c7 4aa8     . ...$.........J
 802fae7:	ea4f 0ce1 7811 4da7 1e4b 4607 b2db f1bc     O....x.MK..F....
 802faf7:	0f0c d21b e8df f00c 061a 1e06 1e1c 1832     ..............2.
 802fb07:	1c4b 4337 6868 f024 0104 7803 07db d003     K.7Chh$....x....
 802fb17:	7843 2b01 d900 2701 ea41 0487 7841 7011     Cx.+...'A...Ax.p
 802fb27:	7800 f886 0405 e03e 2001 7568 2002 e02f     .x....>.. hu. /.
 802fb37:	2002 e016 b139 7013 68a8 f810 1b01 f886     . ..9..p.h......
 802fb47:	1405 60a8 e02f 6868 1d00 6068 7800 07c0     ...`/.hh..h`.x..
 802fb57:	d002 f044 0420 e026 2001 e019 2900 d0fb     ..D. .&.. ...)..
 802fb67:	2003 7568 e7f8 7013 2902 d101 f024 0404     . hu...p.)..$...
 802fb77:	f896 1405 68e8 f800 1b01 60e8 e013 f896     .....h.....`....
 802fb87:	0405 68e9 7008 6868 1d00 6068 e7e4 b150     ...h.phh..h`..P.
 802fb97:	f024 0404 07c0 d001 f044 0410 2000 f7fe     $.......D.... ..
 802fba7:	f821 752f e002 6850 7800 7528 f886 4401     !./u..Ph.x(u...D
 802fbb7:	e8bd 81f0 4a73 f04f 4380 6910 b170 f64f     ....sJO..C.ip.O.
 802fbc7:	71c0 4288 da00 4601 1a40 6110 b672 f8b3     .q.B...F@..ar...
 802fbd7:	0b02 4408 f8a3 0b48 b662 4770 2000 f8a3     ...D..H.b.pG. ..
 802fbe7:	0b28 6850 1d00 6050 2000 f7fd bffb e92d     (.Ph..P`. ....-.
 802fbf7:	41f0 4605 b2c0 4e62 4f62 f04f 4480 2803     .A.F..bNbOO..D.(
 802fc07:	d03d dc23 2801 d028 2802 d11e 6870 7840     =.#..((..(..ph@x
 802fc17:	f040 0040 f884 0401 f2af 0167 2013 f7fe     @.@.......g.. ..
 802fc27:	f89a 21e0 2013 f7fe f8d3 4c57 f44f 2000     ...!. ....WLO.. 
 802fc37:	6020 f2af 116f 2008 f7fe f88d 21e0 2008      `..o.. .....!. 
 802fc47:	f7fe f8c6 f44f 7080 6020 e096 f04f 0800     ....O..p `..O...
 802fc57:	2880 d024 2881 d1f8 e02b 0c28 6070 2007     .($..(..+.(.p`. 
 802fc67:	f884 020d f884 020e 2400 6870 eb00 0044     .........$ph..D.
 802fc77:	1c80 f7ff ff0d 1c64 2c04 dbf6 e07d b672     ......d..,..}.r.
 802fc87:	7d38 b150 7d38 1e40 f010 00ff 7538 d104     8}P.8}@.....8u..
 802fc97:	b662 2005 f7fd ff50 e06f b662 e06d f04f     b.. ..P.o.b.m.O.
 802fca7:	5000 ea40 4015 6038 6840 6078 f887 8015     .P@..@8`@hx`....
 802fcb7:	2581 683a 6850 b120 6878 8841 b109 7d7b     .%:hPh .xhA...{}
 802fcc7:	b13b 6810 7d79 ea40 3001 f7fd ff35 2000     ;..hy}@..0..5.. 
 802fcd7:	e76e 7802 b1ea 4608 f7fd fec1 60b8 6878     n..x...F.....`xh
 802fce7:	7901 07c9 d004 88c0 f7fd feb9 60f8 e001     .y...........`..
 802fcf7:	f8c7 800c 6870 7800 7538 2001 f7fd ff72     ....ph.x8u. ..r.
 802fd07:	f894 0401 f000 00c3 f040 0020 f884 0401     ........@. .....
 802fd17:	e031 7842 b9b2 0188 f64f 71c0 6138 4288     1.Bx....O..q8a.B
 802fd27:	da00 4601 1a40 6138 b672 f8b4 0b02 4408     ...F@.8ar......D
 802fd37:	f8a4 0b48 2008 f8a4 0b28 2001 f7fd ff52     ..H.. ..(.. ..R.
 802fd47:	b662 e018 2a01 d103 1c80 f7ff fea1 e006     b....*..........
 802fd57:	2a02 d106 f241 002e eb00 4001 e006 6878     .*..A......@..xh
 802fd67:	e007 2a03 d105 202e ea40 4001 f7fd fee4     ...*... @..@....
 802fd77:	e7f5 1d00 6078 f505 3580 4628 e718 0000     ....x`...5(F....
 802fd87:	0020 545a 0020 dc5b 00e0 00e1 b570 4604      .ZT .[.....p..F
 802fd97:	b2c0 2801 d130 4e19 0c20 6030 4818 f640     ...(0..N .0`.H@.
 802fda7:	3547 7800 b120 4917 4817 f7fd fe2f e004     G5.x ..I.H../...
 802fdb7:	4816 4914 6802 4814 47a8 6830 7840 b968     .H.I.h.H.G0h@xh.
 802fdc7:	4813 2118 8001 8041 f240 113f 8081 1541     .H.!..A.@.?...A.
 802fdd7:	80c1 480f 2210 490f 30d8 47a8 6830 7801     ...H.".I.0.G0h.x
 802fde7:	f04f 4080 b129 2133 f880 1212 2134 f880     O..@).3!....4!..
 802fdf7:	1211 2100 f8a0 1c00 4620 bd70 0020 5c5a     ...!.... Fp. .Z\
 802fe07:	0000 94e2 0000 95e2 0020 806d 0000 90e2     ........ .m.....
 802fe17:	0020 ac7e 0000 76e2 e92d 41f0 4605 b2c0      .~....v-..A.F..
 802fe27:	4e5c 4f5d 2801 d00d 2400 f04f 0c01 2803     \N]O.(...$O....(
 802fe37:	d030 2826 d07e 2828 d12b 6836 2000 f106     0.&(~.((+.6h. ..
 802fe47:	0310 e061 0c28 2400 6030 6830 ebc4 01c4     ..a.(..$0`0h....
 802fe57:	4420 eb07 0841 f810 1f08 f108 0804 f341      D..A.........A.
 802fe67:	0106 2900 db09 4a4d 4411 f8c8 1000 7800     ...)..MJ.D.....x
 802fe77:	f340 0006 f7fd fe03 e003 f04f 4080 f8c8     @.........O..@..
 802fe87:	0000 1c64 f8c8 0004 2c02 dbde 2028 f7fd     ..d......,..( ..
 802fe97:	fe53 e07b f897 0020 2800 d077 2300 6830     S.{... ..(w..#0h
 802fea7:	f04f 0804 eb00 0e03 ebc3 00c3 eb07 0040     O.............@.
 802feb7:	f10e 0e08 1d00 e01d 6881 f990 200c 5c8a     .........h... .\
 802fec7:	2aff d100 7304 f990 200c 5c89 1c52 7341     .*...s... .\R.As
 802fed7:	7302 2900 d0f0 7b01 07c9 d003 6801 f881     .s.)...{.....h..
 802fee7:	8000 e007 f89e 2000 4661 0612 d400 2102     ....... aF.....!
 802fef7:	6802 7011 7b41 2900 d0de 7b41 1c5b 1e49     .h.pA{.)..A{[.I.
 802ff07:	7341 2b02 dbcb e041 ebc0 01c0 eb07 0141     As.+..A.......A.
 802ff17:	1d09 00c2 fa25 f202 f3c2 4207 2a06 d900     ....%......B.*..
 802ff27:	2200 4432 7a92 f8d1 c008 441a 4594 d004     ."2D.z.....D.E..
 802ff37:	608a e000 e005 734c 730c 1c40 2802 dbe3     .`....Ls.s@..(..
 802ff47:	e024 0c28 d000 2001 f887 0020 2000 6831     $.(.... .. .. 1h
 802ff57:	f897 3020 4401 7a09 09ca ebc0 01c0 eb07     .. 0.D.z........
 802ff67:	0141 1d09 b113 6849 700a e00c 4663 4664     A.....Ih.p..cFdF
 802ff77:	2a00 d001 f04f 0400 684a 7014 d101 f04f     .*..O...Jh.p..O.
 802ff87:	0302 6809 700b 1c40 2802 dbe0 4628 e8bd     ...h.p@..(..(F..
 802ff97:	81f0 0000 0020 605a 0020 b85d 0040 0002     .... .Z` .].@...
 802ffa7:	b570 b2c1 4c3d f44f 3680 f44f 457c 2901     p...=LO..6O.|E.)
 802ffb7:	d00a 2920 d107 2210 4620 f640 23f5 6a21     .. )..." F@..#!j
 802ffc7:	4798 bb08 2000 bd70 0c03 4a35 f103 0110     .G... p...5J....
 802ffd7:	6011 6226 6a22 3a10 6222 6811 1c49 d101     .`&b"j.:"b.hI...
 802ffe7:	42aa d8f7 6811 1c49 d000 4613 461d 2100     .B...hI....F.F.!
 802fff7:	eb05 0281 6813 f844 3021 eb04 0281 1c49     .....hD.!0....I.
 8030007:	6113 2904 dbf4 bd70 6a20 3010 6220 42b0     .a.)..p. j.0 b.B
 8030017:	d305 4924 4628 f240 12ad 4790 6225 6a21     ..$I(F@....G%b!j
 8030027:	4b21 2204 481d f240 24bb 47a0 e7ca 491c     !K.".H@..$.G...I
 8030037:	f000 007f 6809 eb01 0180 4818 780a 3010     .....h.....H.x.0
 8030047:	0612 d400 3810 784a eb00 0082 6800 788a     .....8Jx.....h.x
 8030057:	40d0 78ca 2101 4091 1e49 4008 4770 b510     .@.x.!.@I..@pG..
 8030067:	4a0f f000 007f 6812 4b0c eb02 0080 7802     .J.....h.K.....x
 8030077:	3310 0612 d400 3b10 78c4 2201 40a2 7884     .3.....;.x.".@.x
 8030087:	1e52 40a2 40a1 4011 b672 7840 eb03 0080     R..@.@.@r.@x....
 8030097:	6803 4393 430b 6003 b662 bd10 0020 4864     .h.C.C.`b... .dH
 80300a7:	0020 645a 0525 efbe 0525 3713 e92d 41f0      .Zd%...%..7-..A
 80300b7:	2403 4f55 4606 f04f 0801 2502 fa08 f004     .$UO.FO....%....
 80300c7:	4230 d019 4620 f7fd fce3 7801 19e0 7802     0B.. F.....x...x
 80300d7:	2a08 d211 e8df f002 080c 1004 1010 0c04     .*..............
 80300e7:	b951 f880 8000 e007 2901 d105 7005 e003     Q........)...p..
 80300f7:	462a b901 2201 7002 1c64 2c12 ddde e8bd     *F...".pd..,....
 8030107:	81f0 e92d 41f0 4605 b2c0 4e40 2801 d005     ..-..A.F..@N.(..
 8030117:	2400 2804 d00f 2827 d14f e050 0c28 6070     .$.(..'(O.P.(.p`
 8030127:	6800 f7ff ffc3 6870 7d01 2900 d045 6880     .h....ph.}.)E..h
 8030137:	f000 f870 e041 6870 7d00 b390 f000 f870     ..p.A.ph.}....p.
 8030147:	b378 f000 f8bc 4680 f000 f8b9 4f2f 7839     x......F..../O9x
 8030157:	2900 6871 d001 89c9 e000 8989 4288 d801     .)qh.........B..
 8030167:	2021 e026 6870 8a01 4541 d30e f997 1001     ! &.ph..AE......
 8030177:	2904 da0a 2900 da01 707c e01c 1c49 b248     .)...)..|p..I.H.
 8030187:	7078 2804 d117 4822 e013 8a40 4540 d812     xp.(.."H..@.@E..
 8030197:	f997 0001 f110 0f14 dd0d 2800 dd02 707c     ...........(..|p
 80301a7:	e002 e00a 1e40 7078 f997 0001 3014 d102     ....@.xp.....0..
 80301b7:	202d f7fd fcc1 2001 7038 4628 e79f 2000     - ..... 8p(F... 
 80301c7:	f7fd fc66 7800 2800 d0f9 6870 6840 f7ff     ..f..x.(..ph@h..
 80301d7:	ff6d 6870 f990 0015 2800 db0a f7fd fc4f     m.ph.....(....O.
 80301e7:	7004 6870 2104 f990 0015 f100 4080 f880     .pph.!.......@..
 80301f7:	1200 2102 074a f8a2 1100 2000 bf00 1c40     ...!J...... ..@.
 8030207:	280a dbfb bf30 e7f6 0040 0002 0020 685a     .(..0...@... .Zh
 8030217:	0100 2d00 4a2b 6010 8091 200d 80d0 4770     ...-+J.`... ..pG
 8030227:	b570 4928 f644 75c0 88c8 f04f 4380 1e40     p.(ID..u..O..C@.
 8030237:	b280 80c8 280c d840 d105 f04f 0000 8108     .....(@...O.....
 8030247:	f8a3 5a6c e039 4a1f 07c6 8912 f04f 0401     ..lZ9..J....O...
 8030257:	d009 0845 40ac 4322 f44f 4480 ea44 1282     ..E..@"CO..DD...
 8030267:	f8a3 2a6c e009 f8b3 6a6a 05f6 d403 0846     ..l*....jj....F.
 8030277:	40b4 4322 810a f8a3 5a6c b9f0 f44f 4040     .@"C....lZ..O.@@
 8030287:	f8a3 0a6c 4a10 890c e9d2 0300 1a1b 4363     ..l..J........cC
 8030297:	243f fbb3 f3f4 4418 6993 f44f 747a fbb3     ?$.....D.iO.zt..
 80302a7:	f3f4 680c 6912 4422 4402 4353 fbb3 f0f0     ...h.i"D.DSC....
 80302b7:	8148 8888 80c8 2001 bd70 2000 bd70 4801     H...... p.. p..H
 80302c7:	8940 4770 0020 f25b 0100 d000 b2c1 2901     @.pG .[........)
 80302d7:	d007 4b0c 2903 d005 2926 d102 0c01 f883     ...K.)..&)......
 80302e7:	1062 4770 f893 1062 2900 d0fa 2100 b672     b.pG..b..)...!r.
 80302f7:	5c5a b10a 1e52 545a b662 1c49 2906 dbf6     Z\..R.ZTb.I..)..
 8030307:	4770 0000 0020 6c64 b570 4d18 1e44 f895     pG.. .dlp..MD...
 8030317:	0062 2800 d011 7808 f3c0 02c2 f3c0 0002     b..(...x........
 8030327:	4410 2807 d809 200d fb00 5004 1d80 220d     .D.(... ...P..."
 8030337:	f640 3347 4798 200a 5528 bd70 b510 1e40     @.G3.G. (Up...@.
 8030347:	b672 490a 5c0a 2a00 f04f 020d d006 fb00     r..I.\.*O.......
 8030357:	1102 1d89 4806 f640 3347 e003 2100 4804     .....H@.G3...!.H
 8030367:	f640 334f 4798 b662 4801 bd10 0020 6c64     @.O3.Gb..H.. .dl
 8030377:	0020 d95d e92d 41f0 4604 4d39 b2c0 0c21      .].-..A.F9M..!.
 8030387:	2601 f995 2002 2821 d025 dc10 4a34 2801     .&... !(%...4J.(
 8030397:	f1a2 0204 d043 2802 d047 2805 d104 f7fd     ....C..(G..(....
 80303a7:	fcdf f240 105f 4780 4620 e8bd 81f0 2824     ..@._..G F....$(
 80303b7:	d041 2825 d04a 282c d1f6 f3c4 3003 f04f     A.%(J.,(.....0O.
 80303c7:	3701 686b 4087 43bb fa06 f700 1e48 00c0     .7kh.@.C....H...
 80303d7:	4087 431f 606f 2a00 d0e6 f414 4f70 d100     .@.Co`.*....pO..
 80303e7:	70a9 6868 f995 1002 fa90 f0a0 fab0 f080     .phh............
 80303f7:	eb06 00d0 4281 da00 78a8 f995 1003 4281     .....B...x.....B
 8030407:	d0d2 b240 70e8 2126 ea41 4000 f7fd fb94     ..@..p&!A..@....
 8030417:	78e8 2800 d1c8 2025 f7fd fb8e e7c4 f04f     .x.(..% ......O.
 8030427:	30ff 6011 70a8 70e8 e7be 6810 7800 2800     .0.`.p.p...h.x.(
 8030437:	d0ba 480c e7f0 480a f414 4f70 8800 d002     ...H...H..pO....
 8030447:	ea40 4014 e001 ea20 4014 8028 2a00 d1ab     @..@.. ..@(..*..
 8030457:	8828 2800 d1a8 2027 f7fd fba7 2020 e7a4     (..(..' ....  ..
 8030467:	0020 745a 0500 2100 e92d 4ff1 f89d 6000      .Zt...!-..O...`
 8030477:	4af4 f3c6 0000 f3c6 0140 ea40 0041 eb00     .J......@.@.A...
 8030487:	0180 f8df 93c4 6812 eb00 00c0 eb09 0440     .......h......@.
 8030497:	f89d 7001 eb02 05c1 f8bd 0002 f9b4 800c     ...p............
 80304a7:	f3c7 1101 f340 000a 2901 d101 81a0 e015     ....@....)......
 80304b7:	2902 d101 4440 e7f9 2903 d10f f89d 1001     .)..@D...)......
 80304c7:	4be1 f3c1 0103 07f2 eb03 0141 d004 f8a1     .K........A.....
 80304d7:	006e f647 78ff e001 f8a1 004e f017 0f30     n.G..x....N...0.
 80304e7:	f04f 0a00 d012 f9b4 000c 2800 dd02 f8a4     O..........(....
 80304f7:	a00c e005 f9b5 101e 4288 da01 8c28 81a0     .........B..(...
 8030507:	f9b4 100c f895 0027 f7ff fda9 7c60 2101     ......'.....`|.!
 8030517:	ebb1 1f97 d00c 2202 ebb2 1f97 d102 f884     ......."........
 8030527:	a011 e006 2203 ebb2 1f97 d102 b100 2100     .....".........!
 8030537:	7461 07f1 d018 7c62 f240 31ff f44f 437c     at....b|@..1O.|C
 8030547:	4282 d013 b112 f895 0025 e001 f895 0026     .B......%.....&.
 8030557:	7c22 4282 da00 7420 f8b9 004c 07b2 d400     "|.B.. t..L.....
 8030567:	4619 4308 f8a9 004c e8bd 8ff8 f9b4 000c     .F.C..L.........
 8030577:	4540 d0f9 f895 0024 e7ea e92d 5ff0 4fb2     @E....$...-.._.O
 8030587:	f04f 0b00 f8b7 404c f8b7 004a f8a7 b04c     O.....L@..J...L.
 8030597:	4004 48ac f8df 92b4 2601 f8d0 8000 e05b     .@.H.....&....[.
 80305a7:	fa94 f0a4 fab0 f180 2909 4640 dc03 4aa6     .........)@F...J
 80305b7:	3078 3236 e002 4aa4 3028 3212 eb07 0541     x062...J(0.2..A.
 80305c7:	f9b5 308e 454b d102 f9b0 3020 e004 f8b0     ...0KE.... 0....
 80305d7:	c01c eba3 030c b21b f892 c011 f1bc 0f00     ................
 80305e7:	d112 f9b2 c00c f9b0 e01e 45f4 db0c f8b5     ...........E....
 80305f7:	a06e 44d4 fa0f fc8c f1bc 0f00 dd02 f04f     n..D..........O.
 8030607:	0c00 e003 45e6 dd01 f9b0 c020 ebac 0e03     .....E.... .....
 8030617:	f892 c010 fb9e f2fc f897 e0af 441a b212     .............D..
 8030627:	f1be 0f00 d104 429a d102 f1bc 0f01 d910     .......B........
 8030637:	f9b0 c01e 464b 4594 dc02 f9b0 001c 1883     ....KF.E........
 8030647:	f8a5 308e f8b7 004c fa06 f201 4310 f8a7     ...0..L......C..
 8030657:	004c fa06 f001 4384 2c00 d1a1 f897 0046     L......C.,....F.
 8030667:	2801 d902 1e40 f887 0046 f897 0022 2801     .(..@...F..."..(
 8030677:	d902 1e40 f887 0022 f8b7 004c 2800 d008     ..@..."...L..(..
 8030687:	211b ea41 4000 f7fd fa57 f887 60ae f887     .!A..@..W....`..
 8030697:	b0af e8bd 9ff0 e92d 43f8 4604 b2c1 4a69     ......-..C.F..iJ
 80306a7:	2700 2601 4d68 0c00 2926 d071 dc10 2901     .'.&hM..&)q....)
 80306b7:	d019 2903 d061 2918 d112 2801 d069 2807     ...)a..)...(i..(
 80306c7:	d068 280f d10c f64f 70ff f000 f8af e007     h..(..O..p......
 80306d7:	2930 d060 293f d036 2963 d101 f885 70ae     0)`.?)6.c).....p
 80306e7:	4620 e8bd 83f8 f8df 8164 2100 6010 eb05      F......d..!.`..
 80306f7:	0241 1c49 f8a2 808e 290f ddf8 2100 eb01     A.I......)...!..
 8030707:	0281 eb00 03c2 f8b3 9018 eb01 02c1 eb05     ................
 8030717:	0242 46be ea5f 69c9 d400 46c6 f8a2 e00c     B..F_..i...F....
 8030727:	8b1b 46bc 06db d400 46c4 f8a2 c00e 1c49     ...F.....F....I.
 8030737:	7416 2904 dbe3 4844 2164 308e ea41 4000     .t.)..DHd!.0A..@
 8030747:	f7fd f9fa e7cc f3c4 3103 f3c1 0802 f7fd     .........1......
 8030757:	f986 f8a5 704a 2100 e00c eb01 0341 eb00     ....Jp.!....A...
 8030767:	0343 795b f8b5 204a fa06 f303 431a f8a5     C.[y..J .....C..
 8030777:	204a 1c49 4541 dbf0 e7b2 f895 0048 2800     J I.AE......H..(
 8030787:	d0ae f895 00ae 2800 d1aa f7ff fef6 e7a7     .......(........
 8030797:	e025 e01e e020 f04f 5000 ea40 4014 6800     %... .O..P@..@.h
 80307a7:	9000 f89d 1000 6812 f3c1 0300 f3c1 0440     .......h......@.
 80307b7:	ea43 0344 eb03 0383 eb02 02c3 f3c1 0181     C.D.............
 80307c7:	8b12 3108 408e 4232 d001 f7ff fe4d 2000     ...1.@2B....M.. 
 80307d7:	e787 f885 6048 e783 f240 30ff e775 0c20     ....H`..@..0u. .
 80307e7:	d002 f885 6049 e77b f805 7f48 706f e777     ....I`{...H.opw.
 80307f7:	ea42 0041 4a13 eb00 0180 6812 eb00 00c0     B.A..J.....h....
 8030807:	eb02 02c1 4910 f9b2 201e eb01 0140 f9b1     .....I... ..@...
 8030817:	000c 4290 db02 7c49 2900 d000 480b 4770     ...B..I|.)...HpG
 8030827:	4909 eb01 0040 f9b0 004e 4770 4906 f8a1     .I..@...N.pG.I..
 8030837:	004c 2001 f881 00af f881 0046 f881 0022     L.. ......F...".
 8030847:	4770 0000 0020 7c5a 0020 e864 ffff 00fc     pG.. .Z| .d.....
 8030857:	4a53 8810 2800 d014 8810 4b52 fa90 f0a0     SJ...(....RK....
 8030867:	fab0 f180 689b eb01 0081 eb03 0040 7843     .....h......@.Cx
 8030877:	2300 7043 4b4c 8018 8810 2301 408b 4398     .#CpLK.....#.@.C
 8030887:	8010 4770 e92d 41f0 2701 4d45 4e47 e018     ..pG-..A.'EMGN..
 8030897:	79a8 1c40 71a8 8868 b198 8868 88a9 fa90     .y@..qh...h.....
 80308a7:	f0a0 fab0 f080 fa07 f400 4221 d006 483d     ..........!B..=H
 80308b7:	7800 f7fd fa65 79e8 1c40 71e8 8868 43a0     .x..e..y@..qh..C
 80308c7:	8068 79a8 f896 1f94 4288 d1e1 e8bd 81f0     h..y.....B......
 80308d7:	b510 4c34 6860 4780 4931 7a08 1c40 b2c0     ..4L`h.G1I.z@...
 80308e7:	7208 79c9 4288 d004 7820 e8bd 4010 f7fd     .r.y.B.. x...@..
 80308f7:	ba47 bd10 b510 4c2b 2209 60a0 2100 4828     G.....+L.".`.!(H
 8030907:	f640 334f 4798 492a 2000 7008 f2af 01bf     @.O3.G*I. .p....
 8030917:	f7fd fa21 f2af 0193 2001 f7fd fa1c 2160     ..!...... ....`!
 8030927:	2000 f7fd fa55 2150 2001 f7fd fa51 f2af     . ..U.P!. ..Q...
 8030937:	015f 201f f7fd fa1a 7020 481e 2101 6001     _.. .... p.H.!.`
 8030947:	2102 6001 bd10 4917 2201 6048 4814 71c2     .!.`...I."H`.H.q
 8030957:	2200 7202 7808 f7fd ba13 4912 6048 4770     .".r.x.....IH`pG
 8030967:	4a0f 4301 8011 8051 8090 2000 f7fd ba2b     .J.C..Q.... ..+.
 8030977:	b570 4606 460d b672 4c09 8820 4210 d102     p..F.Fr..L ..B..
 8030987:	480d f7fd f8d9 8820 4335 4328 8020 8860     .H.... .5C(C .`.
 8030997:	4328 8060 88a0 4330 80a0 b662 bd70 0000     (C`...0C..b.p...
 80309a7:	0020 e65d 0020 805a 0040 020c 0020 0070      .]. .Z.@... .p.
 80309b7:	0020 947f 00e0 00e1 0200 0500 b510 4823      .............#H
 80309c7:	2240 6c00 4921 f640 3347 4798 2240 2100     @".l!I@.G3.G@".!
 80309d7:	481e f640 334f 4798 e8bd 4010 2014 f7fd     .H@.O3.G...@. ..
 80309e7:	b8ab 491a 6408 481a 7800 f7fd b9c9 b510     ...I.d.H.x......
 80309f7:	f2af 0137 2018 f7fd f9b9 4915 7008 bd10     ..7.. .....I.p..
 8030a07:	4a12 eb02 0080 6802 1851 d301 f04f 31ff     .J.....hQ...O..1
 8030a17:	6001 4770 490d eb01 0180 6808 1c40 d000     .`pG.I.....h@...
 8030a27:	6008 4770 4909 eb01 0140 8808 1c40 0400     .`pG.I..@...@...
 8030a37:	0c00 d000 8008 4770 4904 4401 7808 1c40     ......pG.I.D.x@.
 8030a47:	f010 00ff d000 7008 4770 0000 0020 9865     .......ppG.. .e.
 8030a57:	0020 8c5a f000 3155 f000 30aa eb01 0050      .Z...U1...0..P.
 8030a67:	f000 3133 f000 30cc eb01 0090 f000 310f     ..31...0.......1
 8030a77:	f000 30f0 eb01 1010 f000 11ff f000 20ff     ...0........... 
 8030a87:	eb01 2010 b281 eb01 4010 4770 4851 4952     ... .....@pGQHRI
 8030a97:	6800 6008 4770 b510 4c4f 21c5 6820 4788     .h.`pG..OL.! h.G
 8030aa7:	6020 bd10 b510 4604 f7ff fff5 4602 4620      `.....F.....F F
 8030ab7:	f7ff ffd0 fbb2 f1f0 fb00 2011 2301 e006     ........... .#..
 8030ac7:	fa94 f1a4 fab1 f281 fa03 f102 438c 1e40     .............C@.
 8030ad7:	d2f6 fa94 f0a4 fab0 f080 bd10 7981 0689     .............y..
 8030ae7:	d501 1dc0 4770 2000 4770 7981 2203 ebb2     ....pG. pG.y."..
 8030af7:	1f91 d006 06ca d504 1dc0 f3c1 1140 4408     ............@..D
 8030b07:	4770 2000 4770 7981 2203 ebb2 1f91 d009     pG. pG.y."......
 8030b17:	070a d507 f3c1 1240 1dc0 4410 f3c1 1100     ......@....D....
 8030b27:	4408 4770 2000 4770 7981 2203 ebb2 1f91     .DpG. pG.y."....
 8030b37:	d00a 1dc0 f3c1 1240 4410 f3c1 1200 4410     ......@..D.....D
 8030b47:	f3c1 01c0 4408 4770 2000 4770 7981 098a     .....DpG. pG.y..
 8030b57:	d10e 1dc0 f3c1 1240 4410 f3c1 1200 4410     ......@..D.....D
 8030b67:	f3c1 02c0 4410 f3c1 0102 eb00 0041 4770     .....D......A.pG
 8030b77:	2000 4770 b570 7984 1dc2 210b 06a3 d502     . pGp..y...!....
 8030b87:	f812 1b01 310f 06e3 d504 f812 3b01 1d09     .....1.......;..
 8030b97:	4419 b289 0723 d504 f812 3b01 1d09 4419     .D..#......;...D
 8030ba7:	b289 2300 f3c4 0502 e008 eb02 0643 8836     ...#........C.6.
 8030bb7:	f3c6 0608 4431 1c89 b289 1c5b 429d dcf4     ....1D....[..B..
 8030bc7:	09a2 d101 1c89 b289 8802 f361 020b 8002     ..........a.....
 8030bd7:	bd70 0000 0100 ac00 0020 905a e92d 43f0     p....... .Z.-..C
 8030be7:	4684 e9dd 7808 9807 4293 d201 440b 3320     .F...x...B...D 3
 8030bf7:	4614 f04f 0e01 17e5 eb04 65d5 116d eb0c     .FO........em...
 8030c07:	0585 682d 4294 ea05 0508 d10a f002 061f     ..-h.B..........
 8030c17:	1ba4 1b16 f1c6 0920 fa0e f609 1e76 4035     ...... .....v.5@
 8030c27:	e019 1b1e 2e1f d216 f1c6 091f fa0e f609     ................
 8030c37:	1e76 43b5 e00f 683e 2e00 d017 1e76 603e     v..C..>h....v.>`
 8030c47:	fab5 f685 f1c6 091f fa0e f909 4426 ea25     ............&D%.
 8030c57:	0509 f800 6b01 2d00 d1ed 3420 429c d805     .....k.-.. 4.B..
 8030c67:	428c d3c8 2400 1a5b 3b20 e7c4 e8bd 83f0     .B...$[. ;......
 8030c77:	e92d 41f0 1c5b fbb3 f4f1 fb01 3414 440a     -..A[........4.D
 8030c87:	1e52 fbb2 f3f1 fb01 2313 2200 f04f 3eff     R........#."O..>
 8030c97:	2701 f8dd c018 e062 2500 4294 d321 f102     .'....b..%.B!...
 8030ca7:	0620 42b4 d21d 4293 d316 1e75 42ab d213      ..B...B..u..B..
 8030cb7:	429c d207 1b1d 1c6d fa07 f505 1e6d 1aa6     .B....m.....m...
 8030cc7:	40b5 e019 1ae6 1e76 fa07 f506 1e6d 1a9e     .@....v.....m...
 8030cd7:	1c76 40b5 43ed e00f 1aa5 fa07 f505 1e6d     v..@.C........m.
 8030ce7:	e7f8 4293 d30b f102 061f 42b3 d207 1a9d     ...B.......B....
 8030cf7:	1c6d fa07 f505 1e6d fa95 f5a5 e00d 429c     m.....m........B
 8030d07:	d203 42a2 d301 429a d905 42a3 d205 429a     ...B...B...B...B
 8030d17:	d301 42a2 d901 fa9e f5ae ea4f 1652 eb00     ...B......O.R...
 8030d27:	0686 f8d6 8000 f1bc 0f00 d002 ea48 0805     ............H...
 8030d37:	e001 ea28 0805 1a8d f8c6 8000 2d20 d20d     ..(......... -..
 8030d47:	0955 1a56 eb00 0585 3620 f8d5 8000 fa07     U.V..... 6......
 8030d57:	f606 1e76 ea28 0806 f8c5 8000 3220 428a     ..v.(....... 2.B
 8030d67:	d39a e8bd 81f0 e92d 4ff0 b087 460d 4617     ......-..O...F.F
 8030d77:	4604 aa05 a906 f001 fa11 8aa0 f894 b004     .F..............
 8030d87:	f040 5300 8ae0 4a52 f040 5600 2000 eb03     @..S..RJ@..V. ..
 8030d97:	0180 eb06 0c80 6809 f8dc c000 ea01 010c     .......h........
 8030da7:	f842 1020 1c40 2804 d3f1 2300 9300 e9dd     B. .@..(...#....
 8030db7:	3205 4659 4846 f7ff ff5b 2301 9300 e9dd     .2YFFH..[..#....
 8030dc7:	3205 4659 4630 f7ff ff53 f04f 0a24 fb95     .2YF0F..S.O.$...
 8030dd7:	f2fa 8b20 78e1 2600 f040 5000 f04f 39ff     .. ..x.&@..PO..9
 8030de7:	f04f 0880 2901 d001 2902 d10e 9204 f04f     O....)...)....O.
 8030df7:	33aa aa04 e88d 000d e9dd 3205 4659 4834     .3.........2YF4H
 8030e07:	f7ff feec f04f 3355 e003 2905 d111 464b     ....O.U3...)..KF
 8030e17:	9204 aa04 e88d 000d e9dd 3205 4659 482c     ...........2YF,H
 8030e27:	f7ff fedc 8b21 f041 5100 1a46 fb06 f60a     ....!.A..QF.....
 8030e37:	e022 2904 d120 aa04 e88d 0205 210f 9104     "..) ........!..
 8030e47:	e9dd 3205 4659 4822 f7ff fec8 f880 8000     ...2YF"H........
 8030e57:	8a60 2307 f040 5200 8b20 f040 5000 e008     `..#@..R .@..P..
 8030e67:	eb02 1181 7809 eb03 0191 1a6d d404 440e     .....x....m....D
 8030e77:	1c40 7801 2980 d1f3 f880 8000 8b22 7839     @..x.)......".9x
 8030e87:	1a80 4408 7038 8b20 f040 5100 7808 2880     ...D8p .@..Q.x.(
 8030e97:	d01a 1e40 b240 2800 da02 7922 4410 b240     ..@.@..(.."y.D@.
 8030ea7:	8aa2 f042 5200 eb02 02e0 f000 0007 f1c0     ..B..R..........
 8030eb7:	0307 7812 2001 4098 4202 d002 f884 9029     ...x. .@.B....).
 8030ec7:	e002 7808 f884 0029 4630 b007 e8bd 8ff0     ...x..).0F......
 8030ed7:	0020 dc65 b510 485f 2265 495d 6840 f640      .e..._He"]I@h@.
 8030ee7:	3347 4798 e8bd 4010 2054 f7fc be25 4959     G3.G...@T ..%.YI
 8030ef7:	6048 7808 f7fc bf44 e92d 41f0 4604 b2c1     H`.x..D.-..A.F..
 8030f07:	f3c0 3703 2501 4e53 0768 4b51 360c 0c22     ...7.%SNh.QK.6".
 8030f17:	ea40 4014 2917 d03d dc0a 2901 d013 2910     @..@.)=....)...)
 8030f27:	d07b 2911 d06e 2913 d132 f7ff fd5a e007     {..)n..)2...Z...
 8030f37:	2922 d02a 293f d020 2953 d129 f7ff ffd7     ")*.?) .S)).....
 8030f47:	2000 e8bd 81f0 4d43 60aa 7d91 7858 f361     . ....CM.`.}Xxa.
 8030f57:	1007 7058 4840 f8c3 0067 f7ff fd48 f7ff     ..Xp@H..g...H...
 8030f67:	fd95 f2af 018f 2018 f7fc ff00 7028 f000     ....... ....(p..
 8030f77:	f920 483a f7ff fcbe e00a 4610 f7fc fd6f      .:H.......F..o.
 8030f87:	f3c7 0102 f000 ffe0 e002 0b20 f8c3 0067     .......... ...g.
 8030f97:	4620 e7d6 4610 f7fc fd62 4f2d 0004 f107      F...F..b.-O....
 8030fa7:	076c d013 2220 2100 4638 f640 334f 4798     l... ".!8F@.O3.G
 8030fb7:	2100 2315 fb01 f003 eb04 0240 7950 280f     .!.#......@.Py.(
 8030fc7:	dc04 1c49 f827 2010 2906 dbf3 b672 7930     ..I.'.. .)..r.0y
 8030fd7:	b990 78b0 b980 b662 b114 481d 306c e000     ...x..b....Hl0..
 8030fe7:	2000 f000 f8c9 b10c 2001 e000 2000 f887     . ....... ... ..
 8030ff7:	0020 f241 004c e01b 2c00 d004 f04f 0001      .A.L....,..O...
 8031007:	e003 e00a e021 f04f 0000 f887 0021 d001     ....!.O.....!...
 8031017:	f04f 0500 f887 5022 e00e b97f b672 78f0     O....."P....r..x
 8031027:	b148 b662 2000 70b0 70f0 f000 fdfb 204c     H.b.. .p.p....L 
 8031037:	f7fc fd82 e784 7175 b662 e781 2f02 d1f9     ......uqb..../..
 8031047:	7077 7135 f000 ff5d e77a f001 f835 e777     wp5q..].z...5.w.
 8031057:	0020 ec65 0020 945a 0700 feff 0020 7c66      .e. .Z..... .f|
 8031067:	4840 f04f 4180 6800 f990 203e 2a00 db0a     @HO..A.h..> .*..
 8031077:	220a f8a1 2b2a f990 003e 2158 f100 4080     ."..*+..>.X!...@
 8031087:	f880 1200 4770 f990 003f 2800 dbfa 4b36     ....pG..?..(..6K
 8031097:	f04f 32ff 601a f8a1 0128 200d f8a1 0b2a     O..2.`..(.. ..*.
 80310a7:	4770 e92d 41f0 482f 237d 6800 7d81 f890     pG-..A/H}#.h.}..
 80310b7:	203c 4359 b90a 011a e001 f44f 727a eb02     < YC......O.zr..
 80310c7:	0141 0449 0c0a 4929 4d29 f990 603e 880b     A.I...)I)M..>`..
 80310d7:	8829 f04f 4480 2e00 db06 0998 07c0 d03e     ).O..D........>.
 80310e7:	1888 f8a4 0b4a e03a f990 003f 2800 db36     ....J.:...?..(6.
 80310f7:	f8b4 0b4a 4e1c 6834 2c00 db0b 4284 d009     ..J..N4h.,...B..
 8031107:	1a44 3408 b2a4 fbb4 f7f2 fb02 4217 3a08     D..4.........B.:
 8031117:	4411 8029 6030 4817 7800 2801 d11f eb00     .D).0`.H.x.(....
 8031127:	1093 f44f 717f fbb0 f2f1 fb01 0412 200a     ..O..q......... 
 8031137:	fb94 f1f0 fb00 4011 2505 b930 f7ff fcab     .......@.%0.....
 8031147:	fbb0 f1f5 fb05 0011 7130 fb94 f0f5 fb05     ........0q......
 8031157:	4010 7931 4288 d102 2001 e8bd 81f0 2000     .@1y.B... ..... 
 8031167:	e7fb 0000 0020 9c5a 0020 a75a 0020 a267     .... .Z. .Z. .g.
 8031177:	0020 ac5a 0020 a05a b510 4aff b283 8193      .Z. .Z....J....
 8031187:	2102 ebc1 04c1 eb02 0444 1c49 81a3 2908     .!......D.I....)
 8031197:	ddf7 2800 d00c 210a 2380 eb00 0241 8812     ...(...!.#..A...
 80311a7:	b11a f042 5200 f882 3025 1c49 290f ddf4     ..B..R..%0I..)..
 80311b7:	bd10 e92d 47f0 4ef1 49f1 6830 f890 003c     ..-..G.N.I0h..<.
 80311c7:	0100 7008 48ec 2282 2100 3882 f640 374f     ...p.H.".!.8@.O7
 80311d7:	47b8 4ce9 3c82 7820 f020 00c0 b2c0 f020     .G.L.< x ..... .
 80311e7:	000f 1c40 7020 7960 2004 7160 7aa0 f020     ..@. p`y. `q.z .
 80311f7:	00c0 b2c0 f040 0010 b2c0 f020 000f 1c80     ....@..... .....
 8031207:	72a0 7d20 f020 00c0 3080 f040 0010 b2c0     .r } ....0@.....
 8031217:	f020 000f 1cc0 7520 f7fd fea2 7801 0609      ..... u.....x..
 8031227:	d503 6830 f990 001a e001 f990 0003 f7fc     ..0h............
 8031237:	fc39 f814 1f1e 4dd0 f021 01c0 3180 f041     9......M!....1A.
 8031247:	0120 b2c9 f041 0110 b2c9 f021 010f 1d09      ...A.....!.....
 8031257:	7021 6831 f44f 7387 f891 2040 7a21 f362     !p1hO..s..@ !zb.
 8031267:	0102 7221 7260 48c4 80e0 3c1e 2004 eb00     ..!r`r.H...<. ..
 8031277:	0180 f814 2011 f022 02c0 3280 f042 0210     ..... "....2B...
 8031287:	f804 2011 f814 2011 f022 020f 1d52 f804     ... ... "...R...
 8031297:	2011 ebc0 02c0 eb05 0242 3a2a eb04 0141     . ......B.*:..A.
 80312a7:	80ca 1c40 810b 280b dde1 f814 0f78 227e     ..@....(....x.~"
 80312b7:	f020 00c0 b2c0 f020 000f 7020 2100 48ae      ..... ... p.!.H
 80312c7:	47b8 48ad f8df c2bc 308a 8068 301a 80a8     .G.H.....0h..0..
 80312d7:	301a 8168 3840 b283 81eb 308a 8228 301a     .0h.@8.....0(..0
 80312e7:	8268 2005 240d f10c 0e9c f10c 08ea ebc0     h.. .$..........
 80312f7:	01c0 fb00 f204 eb05 0141 eb0c 0942 f821     ........A...B.!.
 8031307:	3d2a f1a9 0982 f8a1 9002 eb02 090e f1a9     *=..............
 8031317:	0941 eb08 0282 f8a1 9004 f5a2 7282 1c40     A............r@.
 8031327:	814a 280b dde3 4894 220c 2100 307e 47b8     J..(...H.".!~0.G
 8031337:	4891 f44f 3880 307e f8d8 10ac 6001 7981     .HO..8~0.....`.y
 8031347:	251a f041 0104 b2c9 f041 0103 7181 71c5     .%A.....A....q.q
 8031357:	8084 2126 7281 2134 72c1 2100 462a 300c     ..&!.r4!.r.!*F.0
 8031367:	47b8 6830 f890 203c 4883 308a 7801 f362     .G0h..< .H.0.xb.
 8031377:	1105 7001 f8d8 10ac f8c0 1002 7981 221a     ...p.........y."
 8031387:	f021 01c0 3140 f041 0120 7181 71c5 2100     !...@1A. ..q.q.!
 8031397:	301a 47b8 487b 6831 388c 7d8b 7b02 f363     .0.G{H1h.8.}.{c.
 80313a7:	1207 7302 7b8b 7c02 f363 1245 7402 7b0b     ...s.{.|c.E..t.{
 80313b7:	7c42 f363 0200 7442 7ecb 7c02 f363 02c3     B|c...Bt.~.|c...
 80313c7:	7402 7b4a 7c01 f362 1104 7401 e8bd 87f0     .tJ{.|b....t....
 80313d7:	486d 8800 496d 8008 4770 e92d 47f0 f001     mH..mI..pG-..G..
 80313e7:	fac0 f8df 9198 4607 f8d9 1000 4d65 8a08     .......F....eM..
 80313f7:	3d88 b284 07f8 f04f 0800 d015 f891 003c     .=....O.......<.
 8031407:	2800 4620 d102 f2a0 4074 e000 388c 17c1     .( F....t@...8..
 8031417:	eb00 60d1 f3c0 104f f805 0b01 f8d9 0000     ...`..O.........
 8031427:	8a40 4420 b284 e001 f805 8b01 2602 4237     @. D.........&7B
 8031437:	d033 f8d9 0000 f890 003c 2800 4620 d102     3.......<..( F..
 8031447:	f2a0 4074 e000 388c 17c1 eb00 60d1 f3c0     ..t@...8.....`..
 8031457:	104f f805 0b01 f8d9 0000 8a80 4420 b284     O........... D..
 8031467:	fa96 f0a6 fab0 f080 f001 fa26 8980 f8d9     ..........&.....
 8031477:	3000 f400 417c 2001 e00c fa91 f2a1 fab2     .0..|A. ........
 8031487:	f282 fa00 fc02 eb03 0242 8b92 ea21 010c     ........B...!...
 8031497:	4422 b294 2900 d1f0 e001 f805 8b01 0670     "D...)........p.
 80314a7:	0e06 d1c4 f8d9 0000 7b00 2800 d08e 2001     .........{.(... 
 80314b7:	bf00 2800 d08a f7fe f93c 0005 d086 4e2e     ...(....<......N
 80314c7:	2401 4620 f001 f9f8 6800 42a8 d107 f7fe     .$ F.....h.B....
 80314d7:	f9b7 ebc4 01c4 eb06 0141 82c8 e005 ebc4     ........A.......
 80314e7:	00c4 eb06 0040 f8a0 8016 1c64 2c07 dde8     ....@.....d..,..
 80314f7:	e76c 4822 227d 6800 f890 103c 7d80 4350     l."H}".h..<..}PC
 8031507:	b909 0111 e001 f44f 717a eb01 0040 491f     ......O.zq..@..I
 8031517:	0440 880a eb02 4010 8008 491d 4a16 f8b1     @......@...I.J..
 8031527:	1065 1a40 f5a0 71be 3a82 82d1 388c 8410     e.@....q.:...8..
 8031537:	4770 b5f0 4a11 4913 6814 4a14 3988 2004     pG...J.I.h.J.9. 
 8031547:	8815 f240 4684 279c f5a1 7c95 780a f894     ..@..F.'...|.x..
 8031557:	303c b913 eb06 1242 e001 eb07 1242 b292     <0....B.....B...
 8031567:	442a eb00 0380 3afa eb0c 0343 805a 1c49     *D.....:..C.Z.I.
 8031577:	1c40 280b ddea bdf0 0020 fe66 0020 9c5a     @..(.... .f. .Z.
 8031587:	0020 407f 0020 2e68 0040 020b 0020 ac5a      ..@ .h.@... .Z.
 8031597:	0020 ec65 4810 227d 6800 f890 103c 7d80      .e..H}".h..<..}
 80315a7:	4350 b909 0111 e001 f44f 717a eb01 0040     PC......O.zq..@.
 80315b7:	490a 0440 880a eb02 4010 8008 4770 b500     .I@......@..pG..
 80315c7:	f7ff ffe8 4805 4906 8800 388c 82c8 bd00     .....H.I...8....
 80315d7:	4802 8800 4770 0000 0020 9c5a 0020 ac5a     .H..pG.. .Z. .Z.
 80315e7:	0020 7c66 48ff 2101 8800 eb01 1090 2105      .f|.H.!.......!
 80315f7:	fbb0 f2f1 fb01 0012 49fb 2804 da02 4408     .........I.(...D
 8031607:	7e00 4770 48f8 7c49 301c 5c08 4770 e92d     .~pG.HI|.0.\pG-.
 8031617:	5ff0 2500 4681 4688 462c f1c0 0706 f04f     ._.%.F.F,F....O.
 8031627:	0b01 f8df a3c4 e01d eb0a 0004 7f06 eb06     ................
 8031637:	0046 eb0a 0140 3140 7848 788a 78c9 4310     F...@.@1Hx.x.x.C
 8031647:	4308 fa0b f109 1e49 4201 d10a f7ff fa02     .C....I..B......
 8031657:	2100 2f00 dd00 4639 4288 da02 fa0b f006     .!./..9F.B......
 8031667:	4305 1c64 f89a 0010 42a0 dcdd 48de f89a     .Cd......B...H..
 8031677:	1011 301c 5c08 fa0b fb00 48dc ea25 050b     ...0.\.....H%...
 8031687:	f8d0 1067 4029 f1b8 0f01 db14 f8da 0000     ..g.)@..........
 8031697:	0043 ea40 0280 ea43 0350 431a ea42 0090     C.@...C.P..CB...
 80316a7:	ea21 0200 f8da 000c 0043 ea43 0350 4303     !.......C.C.P..C
 80316b7:	ea32 0003 d129 f1b8 0f02 db0f f8da 0000     2...)...........
 80316c7:	0043 ea40 0280 ea43 0350 431a ea42 0290     C.@...C.P..CB...
 80316d7:	ea21 0002 f8da 200c 4390 d116 f1b8 0f03     !...... .C......
 80316e7:	db0b f8da 0000 0042 ea42 0250 4302 ea21     ......B.B.P..C!.
 80316f7:	0002 f8da 200c 4390 d107 f1b8 0f04 db0d     ..... .C........
 8031707:	f8da 200c ea31 0002 d008 f7ff f9cb eb00     ... 1...........
 8031717:	0040 eb0a 0040 3040 e8bd 9ff0 2000 e7fb     @...@.@0..... ..
 8031727:	e92d 47f0 22b8 2100 48af f640 334f 4798     -..G.".!.H@.O3.G
 8031737:	49af 7e88 f020 000f 1d80 7688 48ad 6800     .I.~ ......v.H.h
 8031747:	6880 4605 f7ff f986 4607 f8df 829c 1f00     .h.F.....F......
 8031757:	f8df a298 f888 0010 f8da 0067 f04f 0901     ..........g.O...
 8031767:	43c6 2400 e030 2c04 4628 da15 43b0 d103     .C.$0..,(F...C..
 8031777:	f8da 0067 4028 43c6 ea25 0006 f7ff f992     ..g.(@.C%.......
 8031787:	f8d8 1000 fa09 f200 4311 f8c8 1000 2107     .........C.....!
 8031797:	4081 ea46 0661 e008 f7ff f984 f8d8 1004     .@F.a...........
 80317a7:	fa09 f200 4311 f8c8 1004 fa09 f100 438d     .....C.........C
 80317b7:	eb08 0104 7608 f881 002c eb00 0040 eb08     .....v..,...@...
 80317c7:	0040 f880 4040 1c64 42bc dbcc e8bd 87f0     @...@@d..B......
 80317d7:	b510 4603 f7ff ff06 2154 eb01 0280 4984     ...F....T!.....I
 80317e7:	300c 740a 76cb e8bd 4010 f7ff b91b e92d     .0.t.v...@....-.
 80317f7:	4ff8 f8df 91f4 f8df b1f4 f899 7016 f899     .O...........p..
 8031807:	5012 eb07 0047 eb09 0440 f899 6013 3440     .P..G...@....`@4
 8031817:	b1f5 42ae d103 78a0 f040 0001 70a0 4630     ...B...x@....p0F
 8031827:	f7ff f918 eb00 0840 4628 f7ff f913 4580     ......@.(F.....E
 8031837:	db03 78e0 f040 0001 70e0 b94e 486d f89b     ...x@....pN.mH..
 8031847:	1000 6800 7bc0 ebb0 1f11 d101 2000 e003     ...h.{....... ..
 8031857:	f899 0014 b110 1e40 f889 0014 f04f 0a01     ......@.....O...
 8031867:	f8d9 0000 4d60 fa0a f607 4206 f105 051c     ....`M.....B....
 8031877:	d04b f899 0014 2800 d17b 7867 f894 8002     K......({.gx....
 8031887:	78e0 9000 ea47 0008 f000 001f f7ff f8e2     .x..G...........
 8031897:	43f9 fa91 f1a1 fab1 f181 2902 d211 ea6f     .C.........)..o.
 80318a7:	0108 fa91 f1a1 fab1 f181 2903 d209 9900     ...........)....
 80318b7:	43c9 fa91 f1a1 fab1 f181 2904 d201 2803     .C.........)...(
 80318c7:	d306 4652 2804 d200 2202 4610 2104 e005     ..RF.(...".F.!..
 80318d7:	f8d9 000c 4206 d004 2103 2004 f7ff fe97     .....B...!. ....
 80318e7:	b940 f8db 0067 4206 d14c 2104 2000 f7ff     @...g..BL..!. ..
 80318f7:	fe8e b3f0 4601 4620 f000 f96e 200b f7ff     .....F F..n.. ..
 8031907:	f891 2005 f889 0014 e03c f899 0010 f899     ... ....<.......
 8031917:	1011 1c49 fbb1 f2f0 fb00 1112 b2c9 f889     ..I.............
 8031927:	1011 5d49 f8db 2067 fa0a f101 4211 d0ee     ..I]..g .....B..
 8031937:	f899 0017 b110 1e40 f889 0017 7860 07c0     ......@.....`x..
 8031947:	d020 f899 0017 b9a0 f7ff f8a5 f000 000f      ...............
 8031957:	3008 f889 0017 f8d9 0004 43b0 f7ff f8a2     .0.........C....
 8031967:	eb00 0140 eb09 0341 f994 1000 f993 2040     ..@...A.......@ 
 8031977:	e000 e007 7022 f883 1040 4449 7608 eb09     ...."p..@.ID.v..
 8031987:	0002 7607 f7ff fe2e b2c0 4c16 f889 0016     ...v.......L....
 8031997:	8821 f44f 737f eb0a 1291 fbb2 f6f3 fb03     !.O..s..........
 80319a7:	2216 f362 118f 4b12 8021 7f9a f899 6015     ."b....K!......`
 80319b7:	f042 0120 b10e f022 0120 eb00 0040 eb09     B. ...". ...@...
 80319c7:	0040 7799 3040 7841 0049 7041 7881 0049     @..w@0AxI.Ap.xI.
 80319d7:	7081 78c1 0049 70c1 f000 ffc3 f020 0001     .p.xI..p.... ...
 80319e7:	e00a 0000 0020 a267 0020 506a 0020 ec65     .... .g. .jP .e.
 80319f7:	0020 7c66 0020 9c5a f889 0012 2100 f889      .f| .Z......!..
 8031a07:	0013 4608 2214 eb09 0300 7e1b 1c40 4419     ...F.".....~@..D
 8031a17:	4351 2804 dbf7 f899 0011 5d40 4408 6821     QC.(......@].D!h
 8031a27:	f360 0115 6021 e8bd 8ff8 e92d 41f0 4e78     `...!`....-..AxN
 8031a37:	4d78 7db4 eb04 0044 eb06 0240 f995 0018     xM.}..D...@.....
 8031a47:	3240 4975 2300 6809 27fe f991 1017 1a41     @2uI.#.h.'....A.
 8031a57:	316e 4618 ebb7 0f41 db04 ea4f 0c41 f1bc     n1.F..A...O.A...
 8031a67:	0f00 dd04 4638 ebb7 0f41 db00 0048 f995     ....8F..A...H...
 8031a77:	1018 f995 501b 42a9 dd05 7851 f041 0101     .....P.B..QxA...
 8031a87:	7051 2102 e002 7d71 b109 1e49 7571 4963     Qp.!..q}..I.qucI
 8031a97:	f240 35f9 8809 ebb5 1f91 d101 2103 7571     @..5.........!qu
 8031aa7:	4d5f 68b1 f8d5 5067 2701 4029 60b1 7915     _M.h..gP.')@.`.y
 8031ab7:	4285 da0a 283c dd08 7955 2d08 d203 fa07     .B..<(..Uy.-....
 8031ac7:	f504 4329 60b1 7153 e00d 7951 2920 d20a     ..)C.`Sq..Qy )..
 8031ad7:	1c49 b2c9 7151 2920 d105 68b5 fa07 f104     I...Qq )...h....
 8031ae7:	438d 60b5 7110 7911 1f80 f1a1 0c01 4605     .C.`.q.y.......F
 8031af7:	4584 dd00 1e48 2800 dd03 462b 45ac dd00     .E..H..(..+F.E..
 8031b07:	1e4b 7113 2300 f896 c010 1e58 4619 f10c     K..q.#....X..F..
 8031b17:	0e04 e013 1875 f895 502c 42a5 d100 460b     ....u...,P.B...F
 8031b27:	2800 da0a eb05 0545 eb06 0545 f892 8004     .(....E...E.....
 8031b37:	f895 5044 45a8 d900 4608 1c49 458e dce9     ..DP.E...FI..E..
 8031b47:	2800 da01 f10c 0004 4298 dc08 e004 18f1     .(.......B......
 8031b57:	f811 2f2b 704a 1e5b 4283 dcf8 e008 1e40     ..+/Jp[..B....@.
 8031b67:	e004 18f1 312c 784a 700a 1c5b 4283 dbf8     ....,1Jx.p[..B..
 8031b77:	4430 2100 f880 402c 460b 4608 1832 f892     0D.!..,@.F.F2...
 8031b87:	402c fa07 f204 68b4 4222 d003 4311 1c5b     ,@.....h"B...C[.
 8031b97:	2b04 d002 1c40 2814 dbf0 60f1 e8bd 81f0     .+..@..(...`....
 8031ba7:	b510 4604 f000 fe88 4a1a eb04 0184 eb02     ...F.....J......
 8031bb7:	0141 f891 3029 2101 4a15 40a1 2b02 d103     A...)0.!.J.@.+..
 8031bc7:	7cd0 4388 74d0 bd10 b110 7b80 280a d9fa     .|.C.t.....{.(..
 8031bd7:	7c90 4388 7490 e7f3 b530 f990 3000 f991     .|.C.t..0....0..
 8031be7:	2000 7002 480a 700b 4403 1884 7e19 7e22     . .p.H.p.D...~"~
 8031bf7:	761a 7621 2401 6845 fa04 f302 439d 408c     .v!v.$Eh.....C.@
 8031c07:	4325 6045 6801 43a1 4319 6001 bd30 0000     %CE`.h.C.C.`0...
 8031c17:	0020 506a 0020 7c66 0020 9c5a 0020 a267      .jP .f| .Z. .g.
 8031c27:	0020 ec65 49be 780a 4282 d00f 4abd 7008      .e..I.x.B...J.p
 8031c37:	7811 f360 0103 7011 4611 0409 f000 000f     .x`....p.F......
 8031c47:	ea41 3000 f040 0012 f7fb bf76 4770 e92d     A..0@.....v.pG-.
 8031c57:	41f0 f000 fe8a 4eb4 4fb2 0005 d123 f000     .A.....N.O..#...
 8031c67:	fbda 2800 d060 48b1 8a40 f040 5400 4620     ...(`..H@.@..T F
 8031c77:	f000 fdaa 2014 f7fe fedf 7c30 f020 0080     ..... ....0| ...
 8031c87:	7430 7838 7c31 0900 0400 09c9 ea40 3001     0t8x1|......@..0
 8031c97:	f040 0016 f7fb ff50 7b20 07c0 d044 6820     @.....P. {..D. h
 8031ca7:	f7fd fd1b e040 48a2 7fc0 2810 d03c 2001     ....@..H...(<.. 
 8031cb7:	f7fe feb0 4c9f 2003 7821 f7fe fea1 f04f     .....L. !x....O.
 8031cc7:	0800 f884 8000 4628 f000 fdf6 4604 4628     ......(F.....F(F
 8031cd7:	f000 fbd0 b128 f884 800e 4628 f000 fbe4     ....(.....(F....
 8031ce7:	e01f 2002 f7fe fe96 7ba0 1c40 b2c0 73a0     ... .....{@....s
 8031cf7:	2880 d916 2015 f7fe fe9f 7be0 07c0 d002     .(... .....{....
 8031d07:	6820 f7fd fcf8 4628 f000 fde1 7838 7c31      h....(F....8x1|
 8031d17:	0900 0400 09c9 ea40 3001 f040 0016 f7fb     ......@..0@.....
 8031d27:	ff0b b2e8 f7ff ff3c f000 fe27 2800 d106     ......<...'..(..
 8031d37:	f000 fcaf e8bd 41f0 487f f7fe be0e e8bd     .......A.H......
 8031d47:	81f0 b510 f7ff fe71 f2af 00fd e8bd 4010     ......q........@
 8031d57:	f7fe be03 b510 f7ff fe68 e8bd 4010 4876     ........h....@vH
 8031d67:	f7fe bdfb e92d 47f0 4d74 f895 1021 2601     ....-..GtM..!..&
 8031d77:	f241 004c 2400 b139 f885 4021 f885 6020     A.L..$9...!@.. `
 8031d87:	f7fb feda 4628 e009 f895 1022 b141 f885     ....(F....".A...
 8031d97:	4022 f885 4020 f7fb fecf 2000 f7ff f9ec     "@.. @..... ....
 8031da7:	485f 7941 4f5f b1b9 7144 7084 2000 f7fc     _HAy_O..Dq.p. ..
 8031db7:	f840 2000 f7ff ff36 f7fd fcb6 7838 0901     @.. ..6.....8x..
 8031dc7:	d005 f020 00f0 7038 2016 f7fb feb5 e8bd     .. ...8p. ......
 8031dd7:	47f0 204c f7fb beb0 7901 b1c9 7104 7086     .GL .....y...q.p
 8031de7:	f7ff f93e f000 fc92 f7ff fc9a 2001 f7ff     ..>.......... ..
 8031df7:	ff19 204c f7fb fea0 f2af 0097 f7fe fdad     ..L ............
 8031e07:	2100 2001 f7fe fdac e8bd 47f0 f7ff bae0     .!. .......G....
 8031e17:	2002 f7fc f80e f7ff f944 4e49 0004 6830     . ......D.IN..0h
 8031e27:	d002 f990 0019 e001 f990 0018 f7ff fcd0     ................
 8031e37:	f8df 80f4 f240 31fa f8b8 0000 ebb1 1f90     ....@..1........
 8031e47:	d108 f7ff fba7 f7ff fcd2 2100 2001 f7fe     ...........!. ..
 8031e57:	fd87 e00e f241 0904 b174 f7ff fbb0 f7ff     ....A...t.......
 8031e67:	fcc6 2102 4648 f7fe fd7b f2af 1017 f7fe     ...!HF..{.......
 8031e77:	fd74 f000 f9f0 e02e 6830 4c32 f890 003c     t.......0h2L..<.
 8031e87:	f080 0101 7820 f361 1005 7020 f7ff fb31     .... xa... p..1.
 8031e97:	210a 4648 f7fe fd64 f000 fc51 f7ff fca7     .!HF..d...Q.....
 8031ea7:	f7ff fa9b f7ff fb45 f000 fd5b 0100 f44f     ......E...[...O.
 8031eb7:	5280 2100 f7fe fd5c f2af 1079 f7fe fd4d     .R.!..\...y...M.
 8031ec7:	f000 f9c9 6830 f890 103c 7820 f361 1005     ....0h..<. xa...
 8031ed7:	7020 f000 fbbd 7838 0900 d101 2001 e009      p....8x..... ..
 8031ee7:	f895 0020 b118 f898 0010 0640 d501 2002     .. .......@.... 
 8031ef7:	e000 200c f7ff fe96 e8bd 47f0 2000 f7fe     ... .......G. ..
 8031f07:	bd89 4907 2000 4a07 7008 7811 f360 0103     ...I. .J.p.x`...
 8031f17:	7011 4908 7008 f2af 10b3 f7fe bd14 0000     .p.I.p..........
 8031f27:	0020 a05a 0020 ec65 0020 a267 0020 fe66      .Z. .e. .g. .f.
 8031f37:	0020 7c66 0020 ae5a 0000 4dc4 0020 5866      .f| .Z....M .fX
 8031f47:	0020 9c5a 0020 8867 b570 4604 460d 2228      .Z. .g.p..F.F("
 8031f57:	2100 488d f640 334f 4798 488c 4b8a 6800     .!.H@.O3.G.H.K.h
 8031f67:	f890 203d 488a 7d81 f362 1186 7581 761d     ..= .H.}b....u.v
 8031f77:	7c01 f365 0102 7401 2000 e00d eb03 0180     .|e....t. ......
 8031f87:	7966 784a 1c40 f366 0203 704a 78e6 78ca     fyJx@.f...Jp.x.x
 8031f97:	1da4 f366 0202 70ca 42a8 dbef bd70 b570     ..f....p.B..p.p.
 8031fa7:	4a79 7e51 b141 1e49 7651 2000 f000 fc84     yJQ~A.I.Qv. ....
 8031fb7:	7bc0 f3c0 0042 bd70 8b51 f060 03fe 4019     .{..B.p.Q.`....@
 8031fc7:	8351 b289 2301 b9f9 f244 0101 f020 0001     Q....#..D... ...
 8031fd7:	4301 7e10 b28c fa03 f100 f06f 05ff eb05     .C.~......o.....
 8031fe7:	2101 430c 496b 8354 7809 2402 eb04 1111     .!.CkIT..x.$....
 8031ff7:	4408 2105 fbb0 f4f1 fb01 0014 b908 2001     .D.!........... 
 8032007:	e000 2000 f882 0027 f892 0027 b118 2000     ... ..'...'.... 
 8032017:	f882 0027 bd70 8b51 fa91 f0a1 fab0 f080     ..'.p.Q.........
 8032027:	4083 4399 8351 bd70 b570 4c59 280f 7ba1     .@.CQ.p.p.YL.(.{
 8032037:	f360 1107 73a1 4955 6809 d238 e8df f000     `....sUI.h8.....
 8032047:	0a08 0a0a 0a0a 0a0a 0f0f 0f0f 0f0f 0038     ..............8.
 8032057:	6808 e02e f000 fc30 b358 6800 e029 494a     .h....0.X..h).JI
 8032067:	3808 eb01 0180 7848 2204 f3c0 0503 4848     .8....Hx."....HH
 8032077:	f640 3347 3012 4798 4846 f8b0 1003 7d60     @.G3.0.GFH....`}
 8032087:	40e9 f361 1004 2101 7560 2d0a da00 2100     .@a....!`u.-...!
 8032097:	2200 4610 f7fe fbac 8a61 f360 114f 8261     .".F....a.`.O.a.
 80320a7:	4628 f7fe fbbd 8aa1 f360 114f 82a1 bd70     (F......`.O...p.
 80320b7:	6848 f8c4 0012 bd70 79c3 4933 2201 b13b     Hh....p..y3I.";.
 80320c7:	b672 f881 2023 8803 838b 8843 83cb b662     r...# ....C...b.
 80320d7:	7a03 b133 b672 f881 2024 7903 f881 3020     .z3.r...$ .y.. 0
 80320e7:	b662 7a43 b133 b672 f881 2025 7943 f881     b.Cz3.r...% Cy..
 80320f7:	3021 b662 7a83 2b00 d005 b672 3122 710a     !0b..z.+..r."1.q
 8032107:	7980 7008 b662 4770 b530 4b1f 4a20 f893     .y.pb.pG0..K J..
 8032117:	0023 2100 b190 f883 1023 4c1e 8b98 f8b4     #..!....#..L....
 8032127:	5001 f360 050b f8a4 5001 8994 f360 040b     .P`......P..`...
 8032137:	8194 8bdc 89d0 f364 000b 81d0 f893 0024     ......d.......$.
 8032147:	b138 f883 1024 f893 4020 7c10 f364 10c7     8...$... @.|d...
 8032157:	7410 f893 0025 b150 4c0f f883 1025 79a0     .t..%.P..L..%..y
 8032167:	f893 5021 f020 00c0 b905 3040 71a0 f893     ..!P .....@0.q..
 8032177:	0026 2800 d006 3322 7119 7819 7c10 f361     &..(.."3.q.x.|a.
 8032187:	1086 7410 bd30 0000 0020 086b 0020 9c5a     ...t0... .k. .Z.
 8032197:	0020 a267 0020 ec65 0020 8867 e92d 47f0      .g. .e. .g.-..G
 80321a7:	4681 460f 88c0 2119 4348 49fd 4690 fbb1     .F.F...!HC.I.F..
 80321b7:	f6f0 b672 48fb 8985 f8b0 a4e0 b662 8804     ..r..H......b...
 80321c7:	f7ff fa06 f899 2003 eba0 000a b280 4629     ....... ......)F
 80321d7:	f04f 0c64 2a04 d008 fb00 f10c fbb1 f1f6     O.d..*..........
 80321e7:	4429 fbb1 f3f4 fb04 1113 b28b 49ee 6809     )D...........I.h
 80321f7:	f8b1 e010 7ec9 4470 b280 fb00 f00c fbb0     .....~pD........
 8032207:	f0f6 4428 fbb0 f5f4 fb04 0015 b280 3080     ..(D...........0
 8032217:	fbb0 f5f4 fb04 0015 0980 2590 b901 2580     ...........%...%
 8032227:	18e1 1b49 fb91 f3f4 fb04 1113 17cb eb01     ..I.............
 8032237:	6193 1189 2a04 d001 2a05 d104 6038 f8c8     .a...*...*..8`..
 8032247:	1000 e8bd 87f0 0080 6038 2003 eb00 0081     ........8`. ....
 8032257:	f8c8 0000 e7f5 e92d 5ff0 f7ff ff55 f000     ......-.._..U...
 8032267:	fb80 f7ff fe9c f7ff fedf f7fd fa79 f8df     ............y...
 8032277:	8338 4604 f8d8 0000 7b00 b180 b17c 48cb     8..F.....{..|..H
 8032287:	7981 f041 0110 7181 48c9 8104 48c7 f7fe     .yA....q.H...H..
 8032297:	fc2c 7861 2206 eb02 0151 7001 e004 48c3     ,.ax."..Q..p...H
 80322a7:	7981 f021 0110 7181 f8df b308 2600 f89b     .y!....q.....&..
 80322b7:	0020 f8df a304 f04f 0901 b380 f8ba 0003      .....O.........
 80322c7:	f400 457c e047 fa95 f0a5 fab0 f480 fa09     ..|EG...........
 80322d7:	f704 43bd f83b 0014 f7fb fbc1 b3d8 2300     ...C;..........#
 80322e7:	4619 f89a e000 e00c eb0a 1201 1d52 f8b2     .F..........R...
 80322f7:	c00c ea17 0f0c d003 7bd1 f3c1 0342 e003     .........{..B...
 8032307:	1c49 ebb1 1f1e dbef 4aac ea44 1103 5591     I........JD....U
 8032317:	f890 1025 1c76 297b d902 2100 e00d e01c     ..%.v.{)...!....
 8032327:	f8d8 1000 eb01 0344 8b9c f891 1040 2305     ......D.....@..#
 8032337:	2901 d000 2302 435c 0a21 5591 7901 8a80     .)...#\C!..U.y..
 8032347:	1dc9 08cc 1c76 f040 5100 1990 4622 f640     ....v.@..Q.."F@.
 8032357:	3347 4798 4426 2d00 d1b5 4898 2180 4f93     G3.G&D.-...H.!.O
 8032367:	5581 79b8 1c76 f040 0008 71b8 4638 f7fe     .U.yv.@....q8F..
 8032377:	fbca 7006 79b8 f020 0007 71b8 f89b 0020     ...p.y ....q.. .
 8032387:	b3f0 f8ba 0003 b3d8 498d 2000 7008 4638     .........I. .p8F
 8032397:	f7fe fbca 4604 f8ba 0003 f3c0 0609 e033     .....F........3.
 80323a7:	4630 f7fe fb7f fa09 f100 438e f83b 0010     0F.........C;...
 80323b7:	f7fb fb55 0005 d027 7968 f8d8 1000 eb01     ..U...'.hy......
 80323c7:	0040 8b81 f5b1 7f00 db01 f240 11ff 4a7c     @.........@...|J
 80323d7:	4628 f7fe fcc8 8821 f360 0108 8021 7969     (F....!.`...!.iy
 80323e7:	7820 f361 1007 7020 78e9 b2c0 f361 0043      xa... p.x..a.C.
 80323f7:	f804 0b02 79b8 f04f 5100 eb01 00f0 e000     .....yO..Q......
 8032407:	e004 ea4f 7070 71b8 2e00 d1c9 e8bd 5ff0     ..O.pp.q......._
 8032417:	4866 f7fe bbaf b530 4965 486a 8a0a 8a49     fH....0.eIjH..I.
 8032427:	7843 f042 5200 f041 5100 2b02 d11a 7940     CxB..RA..Q.+..@y
 8032437:	0600 d517 7990 2203 ebb2 1f90 d112 485a     .....y."......ZH
 8032447:	6800 7b82 b11a 684a 6800 4282 d10a 4b5a     .h.{..Jh.h.B..ZK
 8032457:	2000 781a e009 eb03 1400 f8d4 4005 680d     . .x.........@.h
 8032467:	42ac d101 2000 bd30 1c40 ebb0 1f12 dbf2     .B... 0.@.......
 8032477:	2001 bd30 4a53 eb00 0180 3a28 eb02 0141     . 0.SJ....(:..A.
 8032487:	4a4b ebc0 00c0 eb02 0040 8a00 f891 1029     KJ......@.....).
 8032497:	f040 5000 2902 d105 7980 ebb1 1f90 d101     @..P.)...y......
 80324a7:	2001 4770 2000 4770 e92d 5ff0 4945 4606     . pG. pG-.._EI.F
 80324b7:	eb00 0080 3928 eb01 0a40 493d ebc6 00c6     ....(9..@.=I....
 80324c7:	eb01 0440 340e 8860 f10a 0a28 f040 5700     ..@..4`...(.@..W
 80324d7:	4630 f000 f9f1 4605 4833 6800 7b40 b168     0F.....F3H.h@{h.
 80324e7:	88a0 b158 79b9 0689 d508 f89a 1005 0609     ..X..y..........
 80324f7:	d504 f040 5100 4630 f7fd ff06 2001 bf00     ..@..Q0F..... ..
 8032507:	b150 8920 b140 79b8 06c0 d505 f89a 0005     P. .@..y........
 8032517:	0640 d501 f7fd f9a4 79b8 0700 d403 89a8     @........y......
 8032527:	f36f 0009 81a8 f8df 908c f899 0020 f04f     o........... .O.
 8032537:	0801 b3a0 79b8 0700 d557 f89a 0005 0680     .....y..W.......
 8032547:	d553 8960 f040 5400 4638 f7fe fadc 7802     S.`.@..T8F.....x
 8032557:	89a8 f36f 0009 81a8 e042 1c64 280a d244     ..o.....B.d..(D.
 8032567:	f839 1010 b1d9 1e52 89ab fa08 fc00 f3cc     9.....R.........
 8032577:	0c09 ea43 030c 81ab f839 0010 fa08 f106     ..C.....9.......
 8032587:	f040 5000 f890 3026 430b f880 3026 7901     @..P..&0.C..&0.y
 8032597:	8b40 1dc9 08cb f040 5000 2100 e01d e024     @.....@..P.!..$.
 80325a7:	eb0b 00c2 0040 2206 0020 9c5a 0020 8867     ....@.." .Z. .g.
 80325b7:	0020 fe66 0020 5866 0020 ec65 0020 bc67      .f. .fX .e. .g.
 80325c7:	0020 ae5a 0020 a466 f810 c001 f814 eb01      .Z. .f.........
 80325d7:	ea0c 0c0e f800 c001 1c49 4299 dbf4 1ad2     ........I..B....
 80325e7:	7820 2880 d001 2a00 dcb7 f899 0020 2800      x.(...*.... ..(
 80325f7:	d02c 4638 f7fe fa98 2400 4682 46a3 e020     ,.8F.....$.F.F .
 8032607:	f81a 0014 0900 fa08 f600 f416 4f7c d017     ............|O..
 8032617:	f839 0010 f7fb fa23 b190 89a9 420e d002     9.....#......B..
 8032627:	f880 b025 e00c 4a37 f8b2 3003 421e d107     ..%...7J...0.B..
 8032637:	4331 81a9 f8b2 1003 4331 f8a2 1003 e7ef     1C......1C......
 8032647:	1c64 79b8 f3c0 0002 42a0 dcd9 e8bd 9ff0     d..y.....B......
 8032657:	e92d 41f0 4e2c f896 0020 2800 d017 2500     -..A,N.. ..(...%
 8032667:	462f f640 384f f836 0015 b168 f040 5400     /F@.O86...h.@..T
 8032677:	7920 1dc0 08c2 8b60 21ff f040 5000 47c0      y....`..!@..P.G
 8032687:	f814 0f26 7060 7027 1c6d 2d09 ddeb e8bd     ..&.`p'pm..-....
 8032697:	81f0 b5f0 4e1c f896 0020 2800 d031 2100     .....N.. ..(1..!
 80326a7:	f836 0011 b330 f040 5000 8ac2 f890 3028     6...0.@..P....(0
 80326b7:	f042 5200 b113 1e5b f880 3028 f890 3026     B..R..[...(0..&0
 80326c7:	b1cb f890 4028 b91c f890 4027 439c d112     ....(@....'@.C..
 80326d7:	7903 8b40 331f 095b f040 5400 2000 e007     .y@..3[.@..T. ..
 80326e7:	eb04 0580 682d eb02 0780 43ed 603d 1c40     ....-h.....C=`@.
 80326f7:	4298 dbf5 e002 2203 f880 2028 1c49 2909     .B....."..( I..)
 8032707:	ddce bdf0 0020 ec65 0020 5866 b570 4ca3     .... .e. .fXp..L
 8032717:	2260 7820 2100 f020 00f0 7020 1d60 f640     `" x.! ... p`.@.
 8032727:	354f 47a8 2208 f04f 31ff 489d 47a8 2000     O5.G."O..1.H.G. 
 8032737:	f8a4 0003 499a 2001 1e89 7008 bd70 b5f0     .....I. ...pp...
 8032747:	4997 4e96 1e89 7808 7048 4996 0842 7c48     .I.N...xHp.IB.H|
 8032757:	f8df c254 f362 0047 7448 2000 f8a6 0003     ..T.b.G.Ht. ....
 8032767:	4603 2701 e02b eb06 1103 f89c 0020 1d49     .F.'+....... .I.
 8032777:	b1f0 8988 f400 407c e018 fa90 f2a0 fab2     ......|@........
 8032787:	f282 fa07 f402 f83c 2012 43a0 f052 5200     ......<.. .CR..R
 8032797:	d00c f892 5025 2d80 d208 1c6d b2ed f882     ....%P.-..m.....
 80327a7:	5025 2d80 d102 898a 43a2 818a 2800 d1e4     %P.-.....C...(..
 80327b7:	f8b6 0003 8989 4308 f8a6 0003 1c5b 7830     .......C....[.0x
 80327c7:	ebb3 1f10 dbcf bdf0 b5f0 4974 6802 780b     ..........tI.h.x
 80327d7:	f023 030f 440b f8c3 2005 780b 6842 f023     #....D... .xBh#.
 80327e7:	030f 440b f8c3 2009 780b 6882 f023 030f     ...D... .x.h#...
 80327f7:	440b f8c3 200d 7b02 f3c2 0400 780a f022     .D... .{.....x".
 8032807:	020f 440a 7d13 f364 0300 7513 7b02 f3c2     ...D.}d....u.{..
 8032817:	0440 780a f022 020f 440a 7d13 f364 1304     @..x"....D.}d...
 8032827:	7513 780b 2200 f023 030f 440b f8a3 2011     .u.x."#....D... 
 8032837:	780b f023 030f 440b 74da 7b00 0780 d50c     .x#....D.t.{....
 8032847:	20c0 f8a1 0065 4857 7d82 f042 0280 7582     . ..e.WH.}B....u
 8032857:	4856 7802 f042 0220 7002 4d51 780b 1ead     VH.xB. ..pQM.x..
 8032867:	782a f023 030f f042 0001 43c0 440b fa90     *x#...B....C.D..
 8032877:	f0a0 7d1c fab0 f080 f360 0443 751c 2601     ...}....`.C..u.&
 8032887:	fa06 f300 4313 b2db 702b 780a 1caf 0914     .....C..+p.x....
 8032897:	543c 703c 4c46 2008 7660 eb06 1012 f360     <T<pFL. `v....`.
 80328a7:	1207 4844 700a 6800 7bc0 ebb0 1f12 d802     ..DH.p.h.{......
 80328b7:	f023 0001 7028 bdf0 4939 5608 2800 da01     #...(p..9I.V.(..
 80328c7:	2000 4770 4935 eb01 1000 1d40 4770 e92d     . pG5I....@.pG-.
 80328d7:	41f0 2201 4605 4082 4831 4c30 1e80 7801     .A.".F.@1H0L...x
 80328e7:	f04f 36ff 4391 b2c9 f041 0101 7001 7820     O..6.C..A....p x
 80328f7:	eb06 1110 f361 1007 7020 4628 f7ff ffdc     ....a... p(F....
 8032907:	4607 7820 f640 3347 f020 000f 1901 1d49     .F x@.G3 .....I.
 8032917:	2210 4638 4798 4822 7bfa 5d41 f3c2 0242     ."8F.G"H.{A]..B.
 8032927:	5481 5546 2100 4608 7822 e006 eb04 1300     .TFU.!.F"x......
 8032937:	7d1b 06db d500 1c49 1c40 ebb0 1f12 dbf5     .}....I.@.......
 8032947:	2900 d10c 2000 f8a4 0065 4816 7d81 f021     .)... ..e..H.}!.
 8032957:	0180 7581 4815 7801 f021 0120 7001 e8bd     ...u.H.x!. ..p..
 8032967:	81f0 480f 1e80 7800 4770 480d 1e80 7840     ...H...xpG.H..@x
 8032977:	fa90 f0a0 fab0 f080 4770 4909 1e89 7848     ........pG.I..Hx
 8032987:	fa90 f2a0 fab2 f382 2201 409a 4390 7048     .........".@.CHp
 8032997:	b2c0 2800 d000 2001 4770 0000 0020 ec65     ...(... pG.. .e.
 80329a7:	0020 b15a 0020 a267 0020 5866 0020 a266      .Z. .g. .fX .f.
 80329b7:	0020 086b 0020 9c5a e92d 4ff8 4681 b2c1      .k. .Z.-..O.F..
 80329c7:	4e77 0c00 f04f 4480 2901 d013 2700 f04f     wN..O..D.)...'O.
 80329d7:	0a03 f04f 0b04 f64f 78ff f106 0508 2904     ..O...O..x.....)
 80329e7:	d05c 290c d02b 290d d115 f000 f95a 200a     \..)+..)....Z.. 
 80329f7:	71a8 e050 6030 7802 2107 b16a f8b4 0600     .qP.0`.x.!j.....
 8032a07:	f000 0004 1c40 f8a4 0600 f884 1208 f884     ....@...........
 8032a17:	1209 f8a4 1144 e0b8 f8b4 2600 f002 0204     ....D......&....
 8032a27:	1c92 f8a4 2600 f884 1208 f884 1209 7840     .....&........@x
 8032a37:	b108 f884 1207 2006 f8a4 0144 e0a5 6831     ....... ..D...1h
 8032a47:	780a b13a 2005 f8a4 0144 806f 2002 8028     .x:.. ..D.o.. (.
 8032a57:	71a8 e016 1d09 f000 f962 6070 6831 78ca     .q......b.p`1h.x
 8032a67:	7889 f000 f8ac b148 6870 8801 8069 88c0     .x....H.ph..i...
 8032a77:	8028 f8a5 a004 f885 b006 e002 200d f000     (............ ..
 8032a87:	f886 f8a4 8624 f8a4 8626 8828 f8a4 0622     ....$...&.(...".
 8032a97:	2001 f8a4 061a 2000 e8bd 8ff8 4a40 79ab     . ..... ....@J.y
 8032aa7:	3208 8891 f04f 0c49 1e48 ea4c 4202 b280     .2..O.I.H.L..B..
 8032ab7:	9200 2b0b d269 e8df f003 6868 1306 6836     ...+i.....hh..6h
 8032ac7:	6868 4c68 0063 f8b4 061e 2800 d05d 2019     hhhLc......(].. 
 8032ad7:	80a8 f64f 70f7 f8a4 0618 f885 a006 e054     ..O..p........T.
 8032ae7:	80a8 2900 d151 f8b4 0618 0700 d419 f8b4     ...)Q...........
 8032af7:	061e 2103 f000 f900 8068 6831 b280 1d09     ...!....h.1h....
 8032b07:	f000 f90d 6070 8869 b159 8802 4291 d108     ....p`i.Y....B..
 8032b17:	f8a4 7618 f8a4 862c 88c0 8028 f8a4 0622     ...v..,...(...".
 8032b27:	e012 200d e029 80a8 b151 2901 d12d f8a4     ... )...Q..)-...
 8032b37:	b144 f8b4 0800 f040 0001 f8a4 0800 e024     D.....@.......$.
 8032b47:	f8a4 7618 f8a4 862c 9800 f7fa fff5 2009     ...v..,........ 
 8032b57:	e013 f8b4 061e 2104 f000 f8ce 8869 4288     .......!....i..B
 8032b67:	d10a f8b4 062c 2104 f000 f8c6 8869 4288     ....,..!....i..B
 8032b77:	d102 f8b4 0618 b140 2001 f000 f808 e004     ......@.. ......
 8032b87:	f000 f8a7 b108 2000 e7f7 4648 e784 4904     ....... ..HF...I
 8032b97:	3108 7188 210e ea41 4000 f7fa bfcd 0000     .1.q.!A..@......
 8032ba7:	0020 bc5a 2219 fbb0 f2f2 4962 e002 4282      .Z.."....bI...B
 8032bb7:	d003 1c89 8808 2800 d1f9 8808 4770 b5f0     .......(....pG..
 8032bc7:	4603 8800 2519 460c 4616 4368 f7ff ffea     .F...%.F.FhC....
 8032bd7:	2800 d065 8818 07aa f5a0 61c0 394b d10c     .(e........aK9..
 8032be7:	2060 f8a2 080a f640 60bf f8a2 0808 8818     ` ....@..`......
 8032bf7:	8859 4348 4368 4950 e01f f240 11b9 fbb0     Y.HChCPI..@.....
 8032c07:	f7f1 fb01 0017 b960 205a f8a2 080a f241     ......`.Z ....A.
 8032c17:	4046 f8a2 0808 8818 8859 4348 4368 4947     F@......Y.HChCGI
 8032c27:	e00b 2062 f8a2 080a f241 3075 f8a2 0808     ..b ....A.u0....
 8032c37:	8818 8859 4348 4942 4368 fbb1 f0f0 f8a2     ..Y.HCBIhC......
 8032c47:	0804 f8b2 0804 8899 fbb0 f0f1 f8a2 0802     ................
 8032c57:	8859 2001 b104 2000 1a09 1c60 fb91 f0f0     Y.. ... ..`.....
 8032c67:	f8a2 0806 00f0 ea40 0044 f040 00f0 f8a2     ......@.D.@.....
 8032c77:	0800 f44f 3180 f8d1 00ac 0e00 d009 f891     ..O..1..........
 8032c87:	00ab 2802 d305 28ff d003 f891 01a8 0040     ...(...(......@.
 8032c97:	e000 200e f8a2 0a68 201f f8a2 0a66 2001     ... ..h.. ..f.. 
 8032ca7:	bdf0 4828 f8b0 16bc f021 0101 f8a0 16bc     ..(H....!.......
 8032cb7:	2200 8002 f64f 71ff f8a0 14e0 f8a0 14e2     ."..O..q........
 8032cc7:	f200 40d4 8042 2101 8041 f64f 71f7 8001     ...@B..!A.O..q..
 8032cd7:	4770 f04f 4080 f8b0 1618 0709 d50a 2102     pGO..@.........!
 8032ce7:	f8a0 1144 2101 f8a0 1a68 2100 f8a0 161a     ..D..!..h..!....
 8032cf7:	2001 4770 2000 4770 b530 4a0e 4c12 e009     . pG. pG0..J.L..
 8032d07:	fbb4 f3f3 b29b 1a5d 4285 dc02 440b 4283     ......]..B...D.B
 8032d17:	da03 1c92 8813 2b00 d1f2 8810 bd30 4602     .......+....0..F
 8032d27:	4608 e002 4291 d003 3008 8801 2900 d1f9     .F...B...0...)..
 8032d37:	4770 0000 0000 88f1 9a08 008a 1308 0030     pG............0.
 8032d47:	ca08 0000 0040 4401 0e00 00a6 b430 4cc2     ....@..D....0..L
 8032d57:	2000 79a2 f104 0112 2304 7909 2a01 d00f     . .y.....#.y.*..
 8032d67:	2a02 d012 2a0c d102 4618 b901 2003 7c61     .*...*...F... a|
 8032d77:	b1c9 49ba 6809 79c9 07ca d00b 2005 e012     ...I.h.y..... ..
 8032d87:	4618 2900 d1f3 2001 e7f1 4618 2900 d1ee     .F.)... ...F.)..
 8032d97:	2002 e7ec 078a d502 f440 60a0 e003 0749     . ......@..`..I.
 8032da7:	d501 0600 0c00 2128 bc30 ea41 4000 f7fa     ......(!0.A..@..
 8032db7:	bec3 b570 4da8 2601 4629 7968 78c9 2400     ..p..M.&)Fhy.x.$
 8032dc7:	b110 b951 4630 e005 b139 7928 b928 7c28     ..Q.0F..9.(y(.(|
 8032dd7:	b918 4620 70e8 f7fc f876 7ae8 2800 d118     .. F.p..v..z.(..
 8032de7:	7c28 2800 d115 7a28 4621 b110 7aa8 b100     (|.(..(z!F...z..
 8032df7:	2101 7928 796a 4290 d00c 712a b2d0 b108     .!(yjy.B..*q....
 8032e07:	4997 e000 2100 2017 ea40 4001 f7fa fe94     .I...!. @..@....
 8032e17:	742e bd70 b111 7a68 b900 2401 79e8 4284     .tp...hz...$.y.B
 8032e27:	d00b 71e9 b109 2002 e000 2000 2110 ea41     ...q... ... .!A.
 8032e37:	3000 f7fa fe81 72ee bd70 78a8 2800 d1fb     .0.....rp..x.(..
 8032e47:	e8bd 4070 4887 f7fa be77 e92d 47f0 4604     ..p@.H..w.-..G.F
 8032e57:	f8df 9204 f8df a204 2711 b2c0 ea4f 4c14     .........'..O..L
 8032e67:	f109 0912 2600 4d7c f8da 2000 f00c 01ff     .....&|M... ....
 8032e77:	f3c4 3303 f04f 0801 ea47 4709 2826 d07d     ...3O...G..G&(}.
 8032e87:	dc25 2812 d07b dc15 2801 d040 2803 d065     %..({....(@..(e.
 8032e97:	280e d10e f8c9 6007 2009 f889 8009 ebb0     .(.....`. ......
 8032ea7:	4f14 d001 f04f 0800 f889 8005 4638 f7fa     .O..O.......8F..
 8032eb7:	fe7c e0be 2816 d039 2823 d1fa 6810 ea00     |....(9.#(...h..
 8032ec7:	3014 f7fd fdc7 2806 db73 2001 e0b5 2845     .0.....(s.. ..E(
 8032ed7:	d070 dc0f 282d d021 283e d079 2844 d1e8     p...-(!.>(y.D(..
 8032ee7:	f8c9 6007 f889 8008 f889 1004 b1c1 f9b2     ...`............
 8032ef7:	0004 e016 2849 d022 284c d1da 2b00 d071     ....I(".L(...+q.
 8032f07:	2b01 d072 2b02 d101 f885 8009 e08f f8ca     .+r..+..........
 8032f17:	c000 f885 8003 f885 800a e08a 7469 e00b     ............it..
 8032f27:	2000 8028 4638 f7fa fe40 e005 f414 4f70     . (.8F..@.....pO
 8032f37:	d17f 802e f889 6004 f7ff ff08 e079 f04f     .......`....y.O.
 8032f47:	5000 f8c9 6007 ea40 4014 f889 8007 8841     .P...`@..@....A.
 8032f57:	f8a9 1000 8800 f8a9 0002 e7a7 f9b5 0000     ................
 8032f67:	2800 dd11 1e40 b200 8028 b968 f8c9 6007     .(..@...(.h....`
 8032f77:	f889 8008 f889 6004 4638 e001 e039 e036     .......`8F..9.6.
 8032f87:	f7fa fe13 f7ff fee2 79a8 2802 d214 68e8     .........y.(...h
 8032f97:	1c40 60e8 d001 68e8 e002 f04f 30ff 60e8     @..`...h..O..0.`
 8032fa7:	f8da 1000 6889 4288 d143 482f f7fa fdc4     .....h.BC./H....
 8032fb7:	e03f e041 e036 e00b f8da 0000 6880 b128     ?.A.6........h(.
 8032fc7:	68e9 4281 d302 4829 f7fa fdb6 60ee e030     .h.B..)H.....`0.
 8032fd7:	ebb8 4f14 d101 2001 e000 2000 7168 e026     ...O... ... hq&.
 8032fe7:	e000 e002 72ee 726e e021 742e e01f 71ab     .....rnr!..t...q
 8032ff7:	e7a2 70a9 b921 481e f7fa fdd7 722e e003     ...p!..H.....r..
 8033007:	7990 b108 f885 8008 f7ff fed3 78a9 4640     .y...........x@F
 8033017:	2902 d900 2000 f889 0006 f8c9 6007 f889     .)... .......`..
 8033027:	800a e743 7990 b920 78a8 b110 7229 f7ff     ..C..y ..x..)r..
 8033037:	fec0 4620 e8bd 87f0 2000 72a8 b2c0 2800     .. F..... .r...(
 8033047:	d0f5 0b20 0300 f040 0022 f7fa fd75 e7ee     .. ...@."...u...
 8033057:	4801 68c0 4770 0000 0020 306b 0020 cc5a     .H.hpG.. .k0 .Z.
 8033067:	0020 bc5c 0400 2400 0300 2c10 0500 2c10      .\....$...,...,
 8033077:	0400 2410 faff e5f5 c5d5 a5b5 8595 6575     ...$..........ue
 8033087:	4555 2535 0515 0000 0000 e70d 0000 ec0b     UE5%............
 8033097:	0000 4c09 0000 0000 ffff a7f8 ffff eff2     ...L............
 80330a7:	ffff c3ee ffff 46e8 ffff fae0 ffff 0bdc     .......F........
 80330b7:	ffff fed5 ffff 6acf ffff 82c7 ffff 9abe     .......j........
 80330c7:	ffff 97b5 ffff 7daf ffff 9ca7 ffff 22a0     .......}......."
 80330d7:	0f20 805e 1120 220e 1820 8920 1820 f8b9      .^. .." . . ...
 80330e7:	0020 0020 0000 0d0a 0000 000d ff01 0528      . ...........(.
 80330f7:	183f 0100 b000 32ff 28d0 7801 03b8 ff89     ?......2.(.x....
 8033107:	3800 8813 0028 f9cf 27ff 2708 9019 2808     .8..(....'.'...(
 8033117:	ff8b 684b 1028 3a15 0803 f0ff 2f00 39d0     ..Kh(..:...../.9
 8033127:	0310 fb21 b87e 2100 8e18 e0b8 eaa9 1b00     ..!.~..!........
 8033137:	0069 861b 1b08 0339 ff98 3f00 0302 7e80     i.....9....?...~
 8033147:	28b8 01ff b972 3800 9808 df09 1108 6c18     .(..r..8.......l
 8033157:	08a8 f829 ff00 0439 1428 9e15 033f 00fe     ..)...9.(...?...
 8033167:	9605 0328 b33f 0664 90ff 9002 9003 9404     ..(.?.d.........
 8033177:	fe05 4300 6577 e006 0d30 ff76 8613 b627     ...Cwe..0.v...'.
 8033187:	c627 8611 03ff 6468 0d06 1378 ff88 8960     '.....hd..x...`.
 8033197:	a900 9208 b926 09b5 0708 0893 2623 10c9     ....&.......#&..
 80331a7:	940b 00ff 3628 90e5 2805 ff60 8998 9603     ....(6...(`.....
 80331b7:	0128 06e0 90ff 0c08 3c32 9012 ff15 3203     (.......2<.....2
 80331c7:	2628 989b 0928 99ff 0c89 3c42 9007 df25     (&..(.....B<..%.
 80331d7:	4203 2628 109c 030f bd96 0029 2827 4d44     .B(&......).'(DM
 80331e7:	0028 3903 28ef 4f44 0058 6603 6212 0efb     (..9.(DOX..f.b..
 80331f7:	0052 257f 4528 a24f 29ef ec00 0030 459f     R..%(EO..)..0..E
 8033207:	a247 28ff 438b 9169 6643 ff28 8309 0890     G..(.Ci.Cf(.....
 8033217:	8369 b87e 0ebf 2832 c000 0072 b6d5 00fe     i.~...2(..r.....
 8033227:	68f7 9809 6808 0029 e0ff 11a8 6c28 1218     .h...h).....(l..
 8033237:	ff28 1811 2228 a8ef 8478 03fd 0900 18e1     (...("..x.......
 8033247:	485c 8403 90ff 09e8 0e38 9084 ff88 8208     \H......8.......
 8033257:	320d 380d 4812 08ff 9082 f005 3ef4 ff0a     .2.8.H.......>..
 8033267:	4591 4866 8509 1890 0dff 1258 0818 0e84     .EfH......X.....
 8033277:	ff54 046c 2890 8468 426e 0eff f252 3c12     T.l..(h.nB..R..<
 8033287:	1204 ff12 15e0 fc3f 2866 7991 09bf 2789     ......?.f(.y...'
 8033297:	66f9 0043 8361 09fb 0053 839b da32 db32     .fC.a...S...2.2.
 80332a7:	32bf 03d1 0d47 0057 1713 12ff 9117 2708     .2..G.W........'
 80332b7:	03e8 ff86 8890 3868 8609 0894 00fe 2813     ......h8.......(
 80332c7:	d827 0864 0990 27ff 2789 2799 65a9 bf08     '.d....'.'.'.e..
 80332d7:	30e0 21e0 8953 c300 ff73 380d 8267 4990     .0.!S...s..8g..I
 80332e7:	926a 00fe 1223 8813 8903 290d 6cff 0fb9     j...#......).l..
 80332f7:	7f69 00ba ff3a 690d 290f 9809 ab03 26ff     i...:..i.).....&
 8033307:	5f0a 098a 26ab ff1a 8a5f b927 c927 290d     ._...&.._.'.'..)
 8033317:	0fdf 9169 0908 7d01 8952 32ff 00d2 65d1     ..i....}R..2...e
 8033327:	9306 dff2 30e0 6803 020d 600f af88 0000     .....0.h...`....
 8033337:	b809 5500 022b a81f 0eff 6cb8 6eb8 0e48     ...U+......l.nH.
 8033347:	ff58 d100 866d 4e3e d100 3aff 5845 0d48     X...m.>N...:EXH.
 8033357:	0858 ff78 b80d 09f0 0e53 023b 00fb 00b8     X.x.....S.;.....
 8033367:	3b13 0664 8909 107a 9a63 6310 659a 6106     .;d...z.c..c.e.a
 8033377:	4500 00ff 3528 2662 f0a8 ff08 0738 0890     .E..(5b&....8...
 8033387:	6853 c100 3afb 0027 2503 d62f d22f 27ff     Sh...:'..%/./..'
 8033397:	27a8 2788 2f98 ffdb ba6c ba8f da2f 1003     .'.'./..l.../...
 80333a7:	09fb 0020 30b9 5053 30e0 00fc 0229 4387     .. ..0SP.0..)..C
 80333b7:	5329 5319 ff34 3553 f826 2853 4890 27ff     )S.S4.S5&.S(.H.'
 80333c7:	53d8 5316 0023 ffd2 2878 a626 0491 6409     .S.S#...x(&....d
 80333d7:	52ff 0048 00d2 0302 fe29 4908 db2f da2f     .RH.....)..I/./.
 80333e7:	0090 d500 0002 f885 0300 00f6 833b 2d52     ............;.R-
 80333f7:	0938 3f13 02aa 057d 8500 0110 63ff 59b0     8..?..}......c.Y
 8033407:	50bc 48c7 ffb7 7541 ec3a 0b35 bf2f 2aff     .P.H..Au:.5./..*
 8033417:	26fb 22b1 1fd4 ff5a 391c 6819 df16 9614     .&."..Z..9.h....
 8033427:	12ff 1088 0faf 0d04 ff85 2b0c f40a dc09     ...........+....
 8033437:	e008 07ff 07fe 0631 057a ffd4 3f05 b904     ......1.z....?..
 8033447:	4004 d403 03ff 0372 021a 02cb ff83 4302     .@....r........C
 8033457:	0902 d501 a601 01ff 017c 0156 0134 ff15     ........|.V.4...
 8033467:	fa00 e100 ca00 b600 00ff 00a4 0094 0085     ................
 8033477:	ff78 6c00 6100 5700 4f00 00ff 0047 0040     x..l.a.W.O..G.@.
 8033487:	0039 ff34 2e00 2a00 2600 2200 09fe 7edb     9.4....*.&."...~
 8033497:	7dba 32b6 32dc d1ff 4ae2 a464 a465 ffe0     .}.2.2...Jd.e...
 80334a7:	643a 65a5 32a5 03d6 01ff 46e0 6978 da32     :d.e.2.....Fxi2.
 80334b7:	df94 2807 9625 0022 c303 ff27 0078 2739     ...(%."...'.x.9'
 80334c7:	90b9 9009 8cff 1b90 0a94 1228 7f15 2f9d     ..........(..../
 80334d7:	62da 63a5 01a5 ff23 623a 63a4 2fa4 29d6     .b.c..#.:b.c./.)
 80334e7:	005f 4ae2 1792 c702 0000 bf3d 9206 2815     _..J......=....(
 80334f7:	9025 3900 dd92 0023 442b 9ae0 1908 d0eb     %..9..#.+D......
 8033507:	0052 2619 0f08 3500 009a 2603 f50a e20f     R..&...5...&....
 8033517:	32aa 38d6 187b 2879 0875 ff73 da32 0c90     .2.8{.y(u.s.2...
 8033527:	7927 0b92 10f2 9975 7558 7300 2faa e1d6     'y....u.Xu.s./..
 8033537:	baab 0091 e55d 5d10 5091 2977 00df bae1     ....]..].Pw)....
 8033547:	2ae1 1d08 26e0 2fff 29d0 e600 2891 6b24     .*...&./.)...($k
 8033557:	629f 2100 08e3 2f1d 09dc eea9 1314 3f01     .b.!.../.......?
 8033567:	00a9 d6ef 9803 13fb 0289 c88b a964 a965     ............d.e.
 8033577:	00ee ab8f ab65 0500 65ac ffac da32 9a03     ....e....e..2...
 8033587:	6200 8903 26ff 09b6 5fb9 0896 efa6 8a03     .b...&..._......
 8033597:	6803 0d00 09c6 eec9 0d00 03b6 008b 6c1b     .h.............l
 80335a7:	6300 37ef 0307 00a9 ac9f ac63 10ee ab9f     .c.7......c.....
 80335b7:	ab63 0710 63a9 ffa9 d62f 0200 182f 3800     c....c../.../..8
 80335c7:	03ff 0889 1348 0318 ff94 043f 1864 1865     ....H.....?.d.e.
 80335d7:	31e0 f1bf 3e17 35e4 1057 610b 0cff 3e57     .1...>.5W..a..W>
 80335e7:	34de 08f7 bf86 1613 b66c 0633 1f18 ff3f     .4......l.3...?.
 80335f7:	6cd7 11b6 6286 6306 06df 60e0 d13f 0710     .l...b.c...`?...
 8033607:	3fc0 cdff 1964 1965 31e0 ff90 2617 51b6     .?..d.e..1...&.Q
 8033617:	1346 5186 56ff 5603 6200 8cd0 ff39 0803     F..Q.V.V.b..9...
 8033627:	1398 5118 038a 45ff 7426 7427 4608 ff13     ...Q...E&t't.F..
 8033637:	0066 3663 36f7 00ab 02ad 4b08 c80f 4d00     f.c6.6.....K...M
 8033647:	10ee 3041 3fff 7cf5 28c0 7001 ffa1 c271     ..A0.?.|.(.p..q.
 8033657:	c87d c972 9858 7ebf 08a3 0083 0102 ba11     }.r.X..~........
 8033667:	70ef 71b4 13b5 dcf1 11d0 39ff 900d 2727     .p.q.......9..''
 8033677:	9007 ff17 1128 8698 7828 8894 93ff 2889     ....(...(x.....(
 8033687:	4d4c e089 ef19 0d3f 3790 1700 9007 7f06     LM....?..7......
 8033697:	6428 8894 6528 1094 aa17 e900 00f9 d907     (d..(e..........
 80336a7:	0300 0078 f80b 00fe c807 21d0 0738 a228     ..x........!8.(.
 80336b7:	40ff d008 3818 9103 be86 4900 4d4c 08a6     .@...8.....ILM..
 80336c7:	0076 f605 ffbf 39f5 280a 0026 263d 93ff     v......9.(&.=&..
 80336d7:	0966 1368 2818 ef3f 08e0 023f ed05 4d4c     f.h..(?...?...LM
 80336e7:	ffb8 0726 7458 3408 5603 587f 0876 2863     ..&.Xt.4.V.Xv.c(
 80336f7:	7301 4b09 1cff ba7c 0690 7627 df90 9485     .s.K..|...'v....
 8033707:	7807 0548 24db ff11 3f88 7809 0039 0839     .xH..$...?.x9.9.
 8033717:	23ff 1900 1813 1913 ff08 6c98 06f8 62c8     .#.........l...b
 8033727:	6308 04fe 677f 6a89 9095 0019 a8ff 786c     .c...g.j......lx
 8033737:	8668 8951 f536 0087 153f e919 0390 1328     h.Q.6...?.....(.
 8033747:	156f 907b 0823 3f05 087c afef b472 0990     o.{.#..?|...r...
 8033757:	a500 200b 07a5 91bf 2858 4f4d 0018 10fb     ... ....X(MO....
 8033767:	3feb 0007 1909 0900 280b 7b13 5998 0b00     .?.......(.{.Y..
 8033777:	2829 9488 1d08 387f 4408 0b3f 6228 0b10     )(.....8.D?.(b..
 8033787:	28f7 6328 1318 3990 9458 08fe 08a1 9434     .((c...9X.....4.
 8033797:	6407 6505 05f5 b704 3858 0083 0015 bf00     .d.e....X8......
 80337a7:	4588 2408 3737 8118 ff28 3f00 908e 0800     .E.$77..(..?....
 80337b7:	083a 3bff 7226 6103 a87a ff0c 3d82 780e     :..;&r.az....=.x
 80337c7:	0ca8 3d81 0bff 0228 b878 18e0 df28 f001     ...=..(.x...(...
 80337d7:	3c08 0006 18b7 fd90 1110 0215 b888 8212     .<..............
 80337e7:	ff12 0981 093a 003b 1802 0cff ca7a cb7b     ....:.;.....z.{.
 80337f7:	4028 5f44 0328 1287 0647 f71b 990d 11ff     (@D_(...G.......
 8033807:	9017 0619 2889 ffa2 0948 8812 58f8 0238     .....(..H....X8.
 8033817:	90ef 7007 00c8 46d1 f7d0 38ff 3241 70d7     ...p...F...8A2.p
 8033827:	ffb8 fff8 3838 ff2b 0e3f 10d0 38ff 7306     ....88+.?....8.s
 8033837:	f0b8 3948 ef03 0890 b88e 6f00 28b9 bf02     ..H9.......o.(..
 8033847:	c871 19f0 043d 6708 7f81 75c8 7fb4 0ec9     q...=..g...u....
 8033857:	0049 ff55 0419 2898 7404 03b4 49ff 7912     I.U....(.t...I.y
 8033867:	890c 1038 ffc7 11f4 0478 2884 8404 b4ff     ..8.....x..(....
 8033877:	04d8 0938 0128 ff7a 74b0 90b9 e008 1279     ..8.(.z..t....y.
 8033887:	39df 0831 f937 4303 d810 04ff 0739 0228     .91.7..C....9.(.
 8033897:	c770 ff6a 2857 9828 3fe0 e262 abf7 d72f     p.j.W((..?b.../.
 80338a7:	9908 c139 5125 03ca 085f 8900 0818 006b     ..9.%Q.._.....k.
 80338b7:	18a3 efd0 3848 cf04 7d00 c881 7f32 72d7     ....H8...}..2..r
 80338c7:	ffb4 38f4 0008 9733 3f20 0048 35a1 4b08     ...8..3. ?H..5.K
 80338d7:	3b08 f737 2537 0150 ec29 0328 ff75 90b9     .;7.7%P.).(.u...
 80338e7:	7e48 5cc3 e198 03ff 8308 3978 9168 ff88     H~.\......x9h...
 80338f7:	7931 9138 5e09 9f29 01ff 815e 1908 3989     1y8..^)...^....9
 8033907:	ff00 3202 7edc 08cc 788c c87d 0702 8838     ...2.~...x}...8.
 8033917:	2fc8 28dc fd11 0079 8911 78c8 13c9 ff88     ./.(..y....x....
 8033927:	8813 8908 c988 8913 1367 3889 af07 5b09     ........g..8...[
 8033937:	c889 2918 0dfe 2889 28e8 28ec 22ea eef7     ...)...(.(.(."..
 8033947:	f828 0b00 28b8 28d6 d4ff 0820 7a23 b373     (....(.(.. .#zs.
 8033957:	ff73 03c8 2839 e22a 7069 99ff 0128 b179     s...9(*.ip..(.y.
 8033967:	8958 ff08 1191 0813 7830 7c08 c0f7 6800     X.......0x.|...h
 8033977:	1702 2888 4c53 08fd 3701 4c53 2818 9133     ...(SL...7SL.(3.
 8033987:	08fa 280d bd00 3fb8 3f05 fe82 0700 3fca     ...(...?.?.....?
 8033997:	9f01 9ff3 faf4 0900 0082 79d7 033f 083f     ...........y?.?.
 80339a7:	3fdf 9f07 9003 1110 8b3f 3fff 9001 9608     .?......?..?....
 80339b7:	3307 bf08 f737 853f c573 5101 ffb6 5803     .3..7.?.s..Q...X
 80339c7:	1512 5608 1528 15ff 7000 d069 3918 ff04     ...V(....pi..9..
 80339d7:	09af 4906 033f f9a0 066f 8039 0069 0f15     ...I?...o.9.i...
 80339e7:	0a00 dd0b 0252 0475 7899 0700 3f38 0897     ....R.u..x..8?..
 80339f7:	9895 0f10 1806 300f 3845 08fb 0168 75c1     .......0E8..h..u
 8033a07:	0998 590e 10fe 874d 0000 9704 8780 18fe     ...Y..M.........
 8033a17:	2843 9829 9067 9024 25df 0691 0864 af07     C().g.$..%..d...
 8033a27:	1360 07de 3315 3718 0da6 3741 cf65 a0e5     `....3.7..A7e...
 8033a37:	3437 6700 cf27 1990 11bf 2779 90d9 0023     74.g'.....y'..#.
 8033a47:	452f 90cf 9046 18a7 0331 9761 fd37 05b6     /E..F...1.a.7...
 8033a57:	805b 0e3f 5537 77e2 3701 0124 134f 0239     [.?.7U.w.7$.O.9.
 8033a67:	3700 00fa eb09 670d 3f01 90e8 bfa9 7909     .7.....g.?.....y
 8033a77:	3953 4690 3318 ff0f 5398 00e8 37d1 3fa6     S9.F.3...S...7.?
 8033a87:	e87d 2500 1b18 a428 000e ff05 2b48 3ffe     }..%..(.....H+.?
 8033a97:	9099 2910 fadf 604b 0090 0500 2970 fad7     ...)..K`....p)..
 8033aa7:	5043 0300 0271 03a5 a7d0 3811 00f9 082b     CP..q......8..+.
 8033ab7:	6017 a501 ff80 c080 2040 0400 0404 01ff     .`......@ ......
 8033ac7:	2801 902d 3f0d 00de 1300 0118 00f0 01f0     .(-..?..........
 8033ad7:	01f0 01f0 01f0 01f0 f000 f001 f001 f001     ................
 8033ae7:	f001 f001 f001 f001 0001 01f0 01f0 01f0     ................
 8033af7:	01f0 01f0 01f0 01f0 0138 ffff 00ff ff00     ........8.......
 8033b07:	ffff ffff 0004 9800 054d 0005 9800 008b     ........M.......
 8033b17:	000a 9800 003d 000c 9900 027b 000d 9900     ....=.....{.....
 8033b27:	029f 000e 9800 0427 0010 9700 00a5 0011     ......'.........
 8033b37:	9700 00b5 0016 9900 0139 0017 9900 0419     ........9.......
 8033b47:	0019 9700 0157 001a 9700 023b 001c 9800     ....W.....;.....
 8033b57:	01cf 001d 9800 00ed 001e 9700 001b 001f     ................
 8033b67:	9700 0201 0024 9700 01c1 0028 9700 05d3     ....$.....(.....
 8033b77:	0029 9800 000b 002a 9900 005d 002b 9700     ).....*...].+...
 8033b87:	016b 002c 9700 0587 002e 9900 01b5 0c04     k.,.............
 8033b97:	341c 684c 9880 a8a4 b0ac b8b4 bcbc ffff     .4Lh............
 8033ba7:	0020 806d 0000 f20e 0000 8012 ff01 d432      .m...........2.
 8033bb7:	eb28 504d 6d1f 1fff 2825 9fff 03f6 ff63     (.MP.m..%(....c.
 8033bc7:	017b 8028 01d0 1939 7baf 7900 0007 8019     {.(...9..{.y....
 8033bd7:	0300 fb67 0178 0500 7691 2814 fffd 9045     ..g.x....v.(..E.
 8033be7:	10a0 501b 0092 1bff 2240 3936 ce14 fffe     ...P....@"69....
 8033bf7:	3018 70d0 0c39 0ea5 3fff 1ff9 a517 ce0e     .0.p9....?......
 8033c07:	fffe 5823 fd39 0ea1 2090 28af 3f01 0032     ..#X9.... .(.?2.
 8033c17:	d007 0700 ff1f 7090 3828 4115 ff2b 71ff     .......p(8.A+..q
 8033c27:	2b70 72ff 1171 ff80 0104 0f28 f1cf 611b     p+.rq.....(....a
 8033c37:	12ff 2980 40fd 2804 ff00 00cb 400c 0438     ...).@.(.....@8.
 8033c47:	5091 00fa 092b 6700 2b77 77ff ff75 0490     .P..+..gw+.wu...
 8033c57:	d629 654b 05d2 38df e002 d114 0510 85d0     ).Ke...8........
 8033c67:	08fe dc05 3905 e002 0324 50ff 0028 70c0     .....9..$..P(..p
 8033c77:	0008 5f08 0340 e001 00a1 a133 6108 90fb     ..._@.....3..a..
 8033c87:	0007 3605 0604 06f0 38ff 9004 2880 3f00     ...6.....8...(.?
 8033c97:	bfe2 eb28 9145 4690 0500 ff62 1076 22e0     ..(.E..F..b.v.."
 8033ca7:	40d0 1038 9fff 90f4 2d07 2d23 ff10 3406     .@8......-#-...4
 8033cb7:	3005 0704 b637 ffbf 38f4 f006 0007 f02f     .0..7....8..../.
 8033cc7:	00fa ca2f 2900 2d60 2d01 cf02 8114 2104     ../..)`-.-.....!
 8033cd7:	a308 0f00 09a0 00f6 45fb 0070 0589 022d     .........Ep...-.
 8033ce7:	1f29 e000 0931 0021 308f 000b d695 0b30     )...1.!..0....0.
 8033cf7:	5203 9500 0072 120b ff3e 2d09 2d03 1404     .R..r...>..-.-..
 8033d07:	0483 43ff 0128 f3cf 3109 f53f 00f6 1115     ...C(....1?.....
 8033d17:	9520 1f97 906c 10ff f529 6049 3b28 dd15      ...l...).I`(;..
 8033d27:	00b6 925b 208c 0500 7552 20bf 0028 00c1     ..[.. ..Ru. (...
 8033d37:	0885 740b 00ea 136d 1908 087a 830d 412d     ...t..m...z...-A
 8033d47:	7aeb 0037 77d9 2508 0090 ff75 f021 3906     .z7..w.%..u.!..9
 8033d57:	9802 0400 01eb 0885 1489 2708 0128 4a72     ...........'(.rJ
 8033d67:	2920 707c 9429 2910 a700 1815 d529 2073      )|p)..)....).s 
 8033d77:	7d29 2970 1092 2129 ea18 c500 0075 8017     )}p)..)!....u...
 8033d87:	b300 3e15 ef37 412d 422d 0f09 007e fff0     ...>7.-A-B..~...
 8033d97:	3900 3f02 0325 1212 c2bf 2008 2008 1878     .9.?%...... . x.
 8033da7:	1d0f 28ff 7404 2802 c300 ff02 02f2 0438     ...(.t.(......8.
 8033db7:	02f3 0238 3faf 7314 0003 9223 0b09 fd0c     ..8..?.s..#.....
 8033dc7:	0023 0c0f 2208 7028 5fe5 78c2 f022 0002     #...."(p._.x"...
 8033dd7:	052f 1101 f17f 7200 d03f 1003 0900 f07f     /......r?.......
 8033de7:	0790 7191 d332 bd09 2fbf 3fd3 90c6 4810     ...q2..../.?...H
 8033df7:	900f 20df 103f 0190 2901 9061 01ff 611b     ... ?....)a....a
 8033e07:	0f44 ff03 dd1f 026c 1161 0338 6f02 a1fc     D.....l.a.8..o..
 8033e17:	0eff 6d1f 2521 fece df29 43fa f084 1014     ...m!%..)..C....
 8033e27:	fa13 ffa1 280e 4602 cf14 28d4 02ff 144e     .....(.F...(..N.
 8033e37:	d42f 0200 5f00 7100 711e 001e 2405 0508     /...._.q.q...$..
 8033e47:	00bf 2800 9d70 0061 0203 09ff 1321 2811     ...(p.a.....!..(
 8033e57:	a03f ff01 e128 814e 3090 00f0 38ff 9131     ?...(.N..0...81.
 8033e67:	6a01 0901 fb10 1203 bd09 0928 02a0 ff1b     .j........(.....
 8033e77:	9252 1b02 f842 3d07 02d7 0790 e502 0832     R...B..=......2.
 8033e87:	f0cd bf32 0639 1628 6192 3508 f93f 0218     ..2.9.(..a.5?...
 8033e97:	08ff f273 0ea1 2218 28ff d001 3802 1ffd     ..s....".(...8..
 8033ea7:	ff5a 7231 2317 2616 8137 3feb 02d7 83bd     Z.1r.#.&7..?....
 8033eb7:	2b28 2190 ff3f a1ef 290e 43d6 0080 02fd     (+.!?....).C....
 8033ec7:	630b 106a 0109 d332 32af 03d1 0063 0379     .cj...2..2..c.y.
 8033ed7:	eb10 bad0 0900 1205 41bf 2694 c72a ff2f     .........A.&*./.
 8033ee7:	00d3 9202 9002 3f53 03ff 0294 6390 ca29     ......S?.....c).
 8033ef7:	fd4a 0062 7303 d432 d532 fe03 4501 547c     J.b..s2.2....E|T
 8033f07:	1303 0090 f728 8703 0050 8015 03f0 ff28     ....(...P.....(.
 8033f17:	3800 f1a9 2883 3e00 a2fd 6308 2090 0309     .8...(.>...c. ..
 8033f27:	7528 9a3f 3287 03d3 0863 0855 ff8f d32f     (u?..2..c.U.../.
 8033f37:	ca29 7042 60f0 39fb 0012 8007 30f0 0028     ).Bp.`.9.....0(.
 8033f47:	3dfb 038c 706b 2012 30e0 f1ff 2840 3c00     .=..kp. .0..@(.<
 8033f57:	f485 ea10 1300 0082 604f 2100 e060 ff20     ........O`.!`. .
 8033f67:	030c 023d 7a3f ff2b 76ef 7470 0051 9015     ..=.?z+..vptQ...
 8033f77:	0028 c7bf 0cf0 3c10 0807 e03f 10fd 7708     (......<..?....w
 8033f87:	5f3f 0328 5077 e1f1 8710 2708 2108 0128     ?_(.wP.....'.!(.
 8033f97:	517a 03ff 1202 0832 7021 fd11 0203 c01b     zQ....2.!p......
 8033fa7:	0d72 d821 fe01 0902 8049 0340 2872 fb01     r.!.....I.@.r(..
 8033fb7:	5779 3f00 0d71 0810 ce07 7d00 3122 0872     yW.?q......}"1r.
 8033fc7:	016b 1077 c532 01d3 8323 c94b b110 8700     k.w.2...#.K.....
 8033fd7:	0309 03b2 0cd3 7538 7308 10e0 7308 cd3f     ......8u.s...s?.
 8033fe7:	0084 9015 01d8 103d 0579 c781 7050 1840     ......=.y...Pp@.
 8033ff7:	0c7f 0821 9883 ff02 020e d132 3928 5515     ..!.......2.(9.U
 8034007:	2fff 70d1 0410 8020 fe10 0b00 e063 2b14     ./.p.. .....c..+
 8034017:	3fff f666 5d28 0790 732a 83f1 ff2b 3def     .?f.(]..*s..+..=
 8034027:	035a 1930 988b 8000 40b7 d52f 491a ff00     Z.0......@/..I..
 8034037:	b503 abfa 504b 0300 0270 6073 0300 ff71     ....KP..p.s`..q.
 8034047:	10d0 0338 11d0 f939 00ef 9002 0800 001b     ..8...9.........
 8034057:	2902 f5df 3841 b97b 4105 3809 03fd 0b00     .)..A8{..A.8....
 8034067:	1b28 28d8 9a01 9877 e81b 9702 a018 0228     (..(..w.......(.
 8034077:	fd97 0018 e837 3f28 0415 f728 9673 052c     ....7.(?..(.s.,.
 8034087:	f94f 19d0 fb28 940f 2d00 0d28 0994 7728     O...(....-(...(w
 8034097:	4c14 2099 0e3d 0128 0f18 00fe 5a45 aa11     .L. =.(.....EZ..
 80340a7:	0b28 0aac 28ff 9094 9008 3f09 fe07 3500     (....(.....?...5
 80340b7:	2878 9e30 2809 ab03 0a9d 2100 0088 a903     x(0..(.....!....
 80340c7:	0300 ffba b875 08d1 0838 0890 29ff 4afa     ....u...8....).J
 80340d7:	2868 9001 ff08 481b 181f de2f 0300 00be     h(.....H../.....
 80340e7:	882f 581b 581f 4113 fa59 1f08 004b 4533     /..X.X.AY...K.3E
 80340f7:	2898 4ce7 e8ff 2028 9893 1428 f74d 9098     .(.L..( ..(.M...
 8034107:	1888 9993 28ec bf0f f89f 681b 6c1f 3908     .....(.....h.l.9
 8034117:	7f00 1f09 28f0 44e7 08e8 7b21 b87b 9700     .....(.D..!{{...
 8034127:	3808 9007 c100 4aff 2878 4df9 3fab bf1e     .8.....Jx(.M.?..
 8034137:	b87c 08f0 0639 1118 ff1f 3f17 7010 28b9     |...9......?.p.(
 8034147:	cc00 09ff 09f8 0538 8918 ff29 e100 3f49     ......8...)...I?
 8034157:	7902 08b9 98ff 1628 084e 7428 fb91 91ec     .y....(.N.(t....
 8034167:	9108 9014 28c8 fd16 104d 3297 21de 9017     .....(..M..2.!..
 8034177:	fe08 0d00 1f08 286d 4616 fb18 b889 5508     ......m(.F.....U
 8034187:	0428 2890 df1b 2148 1f14 0811 9023 ff78     (..(..H!....#.x.
 8034197:	b881 8818 b889 1421 90bb 000c f5b9 6849     ......!.......Ih
 80341a7:	7910 ef0c de32 3818 e101 f078 cf58 3a38     .y..2..8..x.X.8:
 80341b7:	18f0 5905 1b18 4514 a8ff 4800 0029 18e4     ...Y...E...H)...
 80341c7:	ff84 28b8 4414 12e9 1129 a9ef 3818 1012     ...(.D..)....8..
 80341d7:	1129 0478 89fd 1300 11f8 1368 2b68 ffff     ).x.......h.h+..
 80341e7:	0a9c a869 fa93 bd6b 02a8 f835 8904 007b     ..i...k...5...{.
 80341f7:	38c7 02ff 898b f021 0f28 7f9a 1bc8 21e8     .8....!.(......!
 8034207:	2159 0858 ebd5 884b 9f10 0818 28a3 930d     Y!X...K......(..
 8034217:	08be 1197 0428 5d3f 6748 7f77 00b9 0c49     ....(.?]Hgw...I.
 8034227:	3b89 4007 609d 1109 0b20 51f0 5108 1b02     .;.@.`.. ..Q.Q..
 8034237:	d8cf 1b0a 00fe 2f5b de32 fa29 6842 e07d     ......[/2.).Bh}.
 8034247:	5309 f068 3928 3819 be6b 2d07 2929 48fd     .Sh.(9.8k..-)).H
 8034257:	0028 986f 3bfb 000d 390d 29f0 093d b0fb     (.o..;...9.)=...
 8034267:	0019 3913 0228 0945 b0bf 2889 4d02 1909     ...9(.E....(.M..
 8034277:	2959 feff 6841 18d0 0a38 dfcf 29e8 49fe     Y)..Ah..8....).I
 8034287:	0068 7851 d7f0 3828 0105 0b29 1f08 861f     h.Qx..(8..).....
 8034297:	1fdb 0812 a121 0808 3f1d 86f7 8519 0428     ....!....?....(.
 80342a7:	a109 1738 d138 2b03 ec53 3f0d 0158 d432     ..8.8..+S..?X.2.
 80342b7:	7907 7b50 ba01 1702 0401 20bd 171f dd06     .yP{....... ....
 80342c7:	bd9c 0594 1f37 2126 0c87 0385 64df 017b     ....7.&!.....d{.
 80342d7:	1779 2500 2d81 7067 0303 b100 9503 03cb     y..%.-gp........
 80342e7:	1506 04db 0491 3f7d 0786 9401 9f2d 1472     ......}?....-.r.
 80342f7:	0480 0820 0309 0fb3 cf7b 04f2 2209 8014     .. .....{...."..
 8034307:	0403 6fcf f3cf 5090 1700 03a3 b906 4d3b     ...o...P......;M
 8034317:	0777 0413 702d 2708 f506 20d8 0609 20d5     w...-p.'... ... 
 8034327:	0309 0b50 08ef de00 2f08 05dc 0939 5b0f     ..P....../..9..[
 8034337:	8014 08ec 1819 0305 0040 9805 6003 10e2     ........@....`..
 8034347:	980d 0518 070f 6d27 7a05 9537 082d cc21     ......'m.z7.-.!.
 8034357:	db0f 207c 0f0b 7ddb 20a6 7e0b 0f33 1715     ..| ...}. .~3...
 8034367:	2711 1107 fe40 1107 1210 11c1 0811 ff31     .'..@.........1.
 8034377:	1178 01f0 0339 5090 3ff3 041f 16f3 73f5     x...9..P.?.....s
 8034387:	0c16 3526 0838 1611 f906 e177 f91e 0f08     ..&58.....w.....
 8034397:	03fe cfd3 32f0 00d3 2f72 d3d5 ef05 00da     .....2..r/......
 80343a7:	0511 c105 153b 9757 2090 6306 0051 313b     ....;.W.. .cQ.;1
 80343b7:	5316 06f6 21c7 1c26 7775 77c6 fec6 0500     .S...!&.uw.w....
 80343c7:	77d0 16c6 1706 ff04 023f 871f 5222 0739     .w......?..."R9.
 80343d7:	a5ff 320e 94d1 1b01 ff41 d12f f93f 701b     ...2....A./.?..p
 80343e7:	881f 006b 0002 114f 1108 712d 1f00 04ff     ..k...O...-q....
 80343f7:	0ea5 461f fc3f 7f1b 1f71 1688 1716 1e14     ...F?...q.......
 8034407:	bbc5 3037 7d06 440c 00e1 f203 0cff 3c21     ..70.}.D......!<
 8034417:	9103 3ff0 ff0a 0090 5390 1111 1011 08fe     ...?.....S......
 8034427:	e00f 0910 3721 28a3 0c7f 0145 5111 1004     ....!7.(..E..Q..
 8034437:	a91e 0d74 0195 f087 9b05 03d4 1164 2c8b     ..t.........d..,
 8034447:	4781 a908 0392 9705 0663 1eab dca9 a516     .G......c.......
 8034457:	e905 0312 0604 13a9 df2d d830 3900 0531     ........-.0..91.
 8034467:	756d ff03 0d07 0857 f027 3965 05ff 7570     mu....W.'.e9..pu
 8034477:	2512 35e0 ff3f 9202 e005 0945 3d54 047f     .%.5?.....E.T=..
 8034487:	5408 1090 233f 5302 05ff 1471 400c 0239     .T..?#.S..q..@9.
 8034497:	71a8 1a00 0941 00bd 4587 5003 c505 00f6     .q..A....E.P....
 80344a7:	2f81 98d1 3f83 90ce bf00 04f0 0238 2090     ./...?......8.. 
 80344b7:	b11d 9f32 32d0 32d1 07d2 0067 3289 d6ff     ..2..2.2..g..2..
 80344c7:	d732 fece 1819 ff19 90e7 1b00 7410 f0b0     2............t..
 80344d7:	00f7 0128 cb07 9b7a 9121 02ff 1033 f237     ..(...z.!...3.7.
 80344e7:	f521 ff1f 21e4 21e5 90e3 1110 c0f5 eb04     !....!.!........
 80344f7:	15c0 a529 ea29 ff43 d020 3980 d06d 3840     ..).).C. ..9m.@8
 8034507:	04ff 5a28 519a 033f 7f28 9812 1141 0e20     ..(Z.Q?.(...A. .
 8034517:	0101 ffa9 11f1 2881 a220 1b41 a1fd 2508     .......( .A....%
 8034527:	0828 0290 0190 00ba 0a27 bd04 d002 0020     (.......'..... .
 8034537:	f52f 467d 2f08 46f5 0861 0812 ff0f c191     /.}F./.Fa.......
 8034547:	b21b 033f b191 1bbf 03c2 0324 0525 029d     ..?.......$.%...
 8034557:	08ff 0925 0324 0842 ff52 1212 420c 1b38     ..%.$.B.R....B8.
 8034567:	520c 38ff 0219 2812 9020 ef03 431b 231b     .R.8...( ....C.#
 8034577:	7f10 a5a4 ff0e a318 0328 f3cf 10d0 39bf     ........(......9
 8034587:	0304 9036 0183 865b 0cff 3d63 0303 3f24     ..6...[...c=..$?
 8034597:	efe4 2503 e23f bf00 11a3 6f10 0308 3288     ...%?......o...2
 80345a7:	a910 3810 d306 7fbf 2834 9c7a 00a3 609f     ...8....4(z....`
 80345b7:	08ff d003 3940 0806 ff24 1211 4208 2212     ....@9..$....B."
 80345c7:	033f 00f2 1205 2918 4307 4bea 3f20 91f5     ?......).C.K ?..
 80345d7:	9d00 0071 5003 0428 ffe0 0900 2801 4ef5     ..q..P(......(.N
 80345e7:	2871 0c5f 0190 1009 0900 0050 5517 0081     q(_.......P..U..
 80345f7:	6003 1b30 3081 601b 1700 70fd 1f08 1203     .`0..0.`...p....
 8034607:	0208 1213 090f 0920 0021 0015 0011 0023     ...... .!.....#.
 8034617:	bf4d a000 1011 00e0 350a d603 3700 6046     M........5...7F`
 8034627:	0f40 0002 730f ff03 5134 2823 e002 1303     @....s..4Q#(....
 8034637:	a3ff 2308 2411 4309 ff0c 3b13 0302 1113     ...#.$.C...;....
 8034647:	2863 7c67 03c0 6d00 3301 734e 2700 8355     c(g|...m.3Ns.'U.
 8034657:	2700 2013 1327 2710 0023 a527 5023 8327     .'. '..'#.'.#P'.
 8034667:	6509 2101 00f1 6207 00f2 f207 5f08 0300     .e.!...b....._..
 8034677:	0484 0413 24f5 c701 0033 4403 b38b f78c     .....$..3..D....
 8034687:	90b4 0003 c309 a31b ff1f 1fe4 1fe5 d1e3     ................
 8034697:	3907 02c7 f51f 7903 e901 0f02 3f20 07b7     .9.....y.... ?..
 80346a7:	b07b 0b00 7c30 0508 bf40 e71b d72f d62f     {...0|..@..././.
 80346b7:	430a ff2f 2fd3 2fd2 2fd1 1bd0 183d cf3d     .C/../././..=.=.
 80346c7:	0128 5e3f 097d 1765 d7fd b307 1b48 1fd8     (.?^}.e.....H...
 80346d7:	91e0 48fd 550f 1c21 f11f 0f28 98ff 1b58     ...H.U!...(...X.
 80346e7:	28e8 7101 ffb8 d928 08a0 1428 384e 09fe     .(.q..(...(.N8..
 80346f7:	21e3 28e8 46fa 2889 01ff ba70 a703 7f28     .!.(.F.(..p...(.
 8034707:	dd98 014c 7ab7 8aa1 6927 2815 02f7 0aa0     ..L..z..'i.(....
 8034717:	7308 1811 1813 08ef 9089 1728 0077 77c0     .s........(.w..w
 8034727:	f0ff 3837 9704 9087 ff48 123f 8797 0892     ..78....H.?.....
 8034737:	0f3f 1fef 9013 16e8 fd53 6745 90fb 0048     ?.......S.Eg..H.
 8034747:	b94d 09d2 0238 91bb 1008 145b 874c 8d00     M...8.....[.L...
 8034757:	fb57 17d0 1d00 3847 1102 3f47 f028 07c0     W.....G8..G?(...
 8034767:	7804 e900 8500 4dff 1b19 288a 987b e3cc     .x.....M...({...
 8034777:	1c1f f300 1706 7712 9089 700c 431e 931f     .......w...p.C..
 8034787:	af26 cb0e 1f13 2712 77b7 2112 2683 f1d7     &......'.w.!.&..
 8034797:	5818 9300 38df 38f0 053d 2519 063f e0e7     .X...8.8=..%?...
 80347a7:	8138 3500 3111 3f00 ffc7 851f 0990 8a2d     8..5.1.?......-.
 80347b7:	9a04 1bff 1f7a 2888 e001 ff09 1028 09f0     ....z..(....(...
 80347c7:	f83c 8521 04ee 7f61 0d94 0300 1b40 ff30     <.!...a.....@.0.
 80347d7:	0090 0b03 0c03 f01b 28ff 153d 28f0 9f1f     .........(=..(..
 80347e7:	dbf0 e01b 2101 911b 8f01 404e 28ef 9260     .....!....N@.(`.
 80347f7:	0040 80a9 f093 00fe 200d 0928 6096 1428     @........ (..`(.
 8034807:	4faf 9100 0090 1005 1908 e74e 28b0 007f     .O........N..(..
 8034817:	0031 9009 1b10 10f7 fa29 8d03 a028 2800     1.......)...(..(
 8034827:	e1f7 904c 0b00 1130 2840 a057 20a0 0d00     ..L...0.@(W.. ..
 8034837:	01a0 485f 5f08 a5ff ce0e 28fe 45f9 faa4     .._H._.....(.E..
 8034847:	2b04 02fb f903 a04d 0ea1 71ff f041 3911     .+....M....qA..9
 8034857:	700b fe41 d70b 1108 7c28 61eb 7f78 0311     .pA.....(|.ax...
 8034867:	0040 8171 0740 770d e041 0711 410d f221     @.q.@..wA....A!.
 8034877:	1d11 ddff 101f e03f 0000 fd7e 18ba 7501     ......?...~....u
 8034887:	6dba 7e80 bfba d81f f521 b876 f100 ff38     .m.~....!.v...8.
 8034897:	8903 a8f7 073d 1c90 e0ff e038 2b19 91fd     ....=.....8..+..
 80348a7:	af2a 083f 0c90 bd04 0038 1903 28af 9e02     *.?.....8....(..
 80348b7:	00ea 5c23 0b03 faf9 0700 0048 2903 fa28     ..#\......H..)(.
 80348c7:	8a4e 1beb 00d9 1adf 4f01 1bd8 ffe8 f51f     N........O......
 80348d7:	b877 08f0 0238 3fbb 0109 1477 984e 7310     w...8..?..w.N..s
 80348e7:	9fd9 4897 0f3f 1a7c 0215 46c9 9867 0828     ...H?.|....Fg.(.
 80348f7:	4312 1d20 8891 650a 288f 957d 098c 2a9d     .C ....e.(}....*
 8034907:	0085 a827 08f6 8a23 3ab8 70bd d1b8 7308     ..'...#..:.p...s
 8034917:	0639 ad08 6501 1bf8 02e8 7f19 1b28 90d8     9....e......(...
 8034927:	030b 21bc ffd7 1810 280b 4cff 90cb 18f7     ...!.....(.L....
 8034937:	b881 5b10 70de 03b8 89fd 1501 f0f9 3c69     ...[.p........i<
 8034947:	9104 00be 3f15 d220 3808 db01 7f41 f06c     .....? ..8..A.l.
 8034957:	390c 9104 0008 ff11 0817 2899 ef7d 78a9     .9.........(}..x
 8034967:	9cff 08dc 0b38 f31f ff79 18b8 e089 0949     ....8...y.....I.
 8034977:	3e89 02ff 0138 1628 084e ff3f 280b 9084     .>..8.(.N.?..(..
 8034987:	1b08 1848 881f b889 053f 0508 8908 6f08     ..H.....?......o
 8034997:	7eff 7894 7c58 7ec4 ff12 d27a ce72 947e     .~.xX|.~..z.r.~.
 80349a7:	8918 08bb 0089 292f 0200 5d00 fe38 3d03     ....../)...]8..=
 80349b7:	28f0 4602 a018 ff28 0228 184e 0128 989a     .(.F..(.(.N.(...
 80349c7:	00fe faad e843 7e28 6c94 0876 76ed 00b8     ....C.(~.lv..v..
 80349d7:	f895 6811 df02 b8fd 4b08 0328 0898 581b     ...h.....K(....X
 80349e7:	90bf 1b28 1f48 2011 17cb 1fff 21f2 f0f3     ..(.H.. .....!..
 80349f7:	380c bf08 0890 6c00 de32 0900 bf03 1890     .8.....l2.......
 8034a07:	6c00 d879 6107 feff 2100 28d7 440a f067     .ly..a...!.(.Dg.
 8034a17:	ff07 fd39 d779 27e0 d789 05fe 773b 0a28     ..9.y..'....;w(.
 8034a27:	674c d72f 007b 3902 2b31 3fff 1066 fb2f     Lg/.{..91+.?f./.
 8034a37:	7400 5409 0019 0919 7d3f 2109 9061 0020     .t.T....?}.!a. .
 8034a47:	0a02 0cec f0d8 f001 f001 0001 0002 22a5     ..............."
 8034a57:	7f2b 3ffa 2b76 3ffe 0032 5503 0023 520b     +..?v+.?2..U#..R
 8034a67:	1300 00a4 a203 0b00 f955 0300 00d5 9c0b     ........U.......
 8034a77:	0300 0074 5503 0098 7803 0300 007e 9203     ..t..U...x..~...
 8034a87:	2f00 3cff 0302 0a06 130e 3f18 211d 2926     ./.<.......?.!&)
 8034a97:	2e2c 0000 71f0 f030 f001 3001 f801 ff00     ,....q0....0....
 8034aa7:	0005 4b06 e406 8007 0000 ffff ffff ffff     ...K............
 8034ab7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034ac7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034ad7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034ae7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034af7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034b07:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034b17:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034b27:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034b37:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034b47:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034b57:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034b67:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034b77:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034b87:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034b97:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034ba7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034bb7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034bc7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034bd7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034be7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034bf7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034c07:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034c17:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034c27:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034c37:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034c47:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034c57:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034c67:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034c77:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034c87:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034c97:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034ca7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034cb7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034cc7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034cd7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034ce7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034cf7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034d07:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034d17:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034d27:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034d37:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034d47:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034d57:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034d67:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034d77:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034d87:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034d97:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034da7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034db7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034dc7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034dd7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034de7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034df7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034e07:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034e17:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034e27:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034e37:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034e47:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034e57:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034e67:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034e77:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034e87:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8034e97:	ffff ffff ffff ffff 0000 c585 1700 0100     ................
 8034ea7:	0010 0100 0004 0300 0002 0001 0001 0001     ................
 8034eb7:	0001 0000 0000 8700 00c5 0020 0000 0000     .......... .....
 8034ec7:	ff00 0300 0001 ffff 00ff ffff 0001 0100     ................
 8034ed7:	ffff 0001 0201 ffff 0001 0002 8a00 007d     ..............}.
 8034ee7:	ff26 0000 0000 fb00 00f0 0000 0000 0000     &...............
	...
 8034f03:	0000 fb00 00e8 0000 0000 0000 8d00 006b     ..............k.
 8034f13:	001e 0000 0000 0000 0000 0000 0000 0000     ................
 8034f23:	0000 0600 0007 0000 0000 0010 0010 0000     ................
 8034f33:	9400 00a3 0006 0000 0600 00e4 9a00 00a9     ................
 8034f43:	ab11 efcd ab01 efcd 0402 0000 05ff 7c58     ..............X|
 8034f53:	009c 0000 d7a2 0a00 8264 0405 00ff 00ff     ........d.......
 8034f63:	00ff 0000 75a4 0200 0101 0000 89a6 2000     .....u......... 
	...
 8034f83:	0000 2000 0101 2000 0202 2000 0303 2000     ... ... ... ... 
 8034f93:	0000 eba7 1600 f9ff 80f4 f9ff 80fc 0100     ................
 8034fa3:	a086 0000 0000 0000 ffff ff00 0000 b5a9     ................
 8034fb3:	0000 0000 5daa 0100 0001 ad00 007f 00a0     .....]..........
 8034fc3:	0000 0000 ff00 0000 0000 0000 ff00 0000     ................
 8034fd3:	0000 0000 ff00 0500 0000 0000 fe00 fe70     ..............p.
 8034fe3:	006f 0101 0101 0002 0000 0000 ff00 0000     o...............
 8034ff3:	0000 0000 ff00 0000 0000 0000 ff00 0500     ................
 8035003:	0008 0000 fc00 fc08 0007 0a01 0101 0000     ................
 8035013:	0000 0000 ff00 0000 0000 0000 ff00 0000     ................
 8035023:	0000 0000 ff00 0500 0010 0000 fc00 fc08     ................
 8035033:	0007 0101 0101 0003 0000 0000 ff00 0000     ................
 8035043:	0000 0000 ff00 0000 0000 0000 ff00 0500     ................
 8035053:	0018 0000 fc00 fc08 0007 0a01 0101 0001     ................
 8035063:	b500 00e1 ab41 efcd ab01 efcd 0002 ff07     ....A...........
 8035073:	01fe 0001 1501 0280 0320 0700 ca0b 05e3     ........ .......
 8035083:	0100 01d4 01d4 00d4 0000 0000 0000 0000     ................
	...
 80350a3:	0000 ff00 0106 0000 a1d0 2c00 0001 0100     ...........,....
 80350b3:	0005 4000 0400 0004 4b06 4000 0400 0004     ...@.....K.@....
 80350c3:	e406 4000 0400 0004 8007 4000 0400 0004     ...@.......@....
	...
 80350db:	0000 33d5 0c00 0700 feff feff 0000 0000     ...3............
	...
 8035507:	0100 0405 0000 0000 0100 8405 0000 0000     ................
 8035517:	0000 80f5 b23f 62c6 ffff ffff ffff ffff     ....?..b........
 8035527:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035537:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035547:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035557:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035567:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035577:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035587:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035597:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80355a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80355b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80355c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80355d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80355e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80355f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035607:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035617:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035627:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035637:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035647:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035657:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035667:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035677:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035687:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035697:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80356a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80356b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80356c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80356d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80356e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80356f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035707:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035717:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035727:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035737:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035747:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035757:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035767:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035777:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035787:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035797:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80357a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80357b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80357c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80357d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80357e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80357f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035807:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035817:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035827:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035837:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035847:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035857:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035867:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035877:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035887:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035897:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80358a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80358b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80358c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80358d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80358e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 80358f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035907:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 8035917:	ffff ffff ffff ffff 0525 0df0 0000 a180     ........%.......
 8035927:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 8035937:	0000 9985 0000 fc7b 0525 0214 0000 0000     ......{.%.......
 8035947:	0000 0000 0000 9985 0000 9385 0000 0000     ................
 8035957:	0000 d584 0000 4185 0000 9985 0000 9985     .......A........
 8035967:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 8035977:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 8035987:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 8035997:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 80359a7:	0000 9985 0000 9985 0000 9985 0000 9985     ................
 80359b7:	0000 9985 0000 9985 f44f 40c0 f2c2 0000     ........O..@....
 80359c7:	4685 f000 b801 ffff f44f 5278 2100 f04f     .F......O.xR.!O.
 80359d7:	2020 f640 344f 47a0 f44f 5200 2100 484f       @.O4.GO..R.!OH
 80359e7:	47a0 484f 8801 f421 71a1 8001 211b f8a0     .GOH..!..q...!..
 80359f7:	19be f000 f987 484b 6800 f000 f8f8 2002     ......KH.h..... 
 8035a07:	f000 f89a f000 fa1a f000 f912 b570 2302     ............p..#
 8035a17:	2200 105b 2b01 d103 f811 3b01 f443 7380     ."[..+.....;C..s
 8035a27:	07dc 780c d004 1c49 f800 4b01 1c52 e7f0     ...x..I....KR...
 8035a37:	1c49 2cf8 da11 f811 5b01 f004 0607 ea45     I..,.....[....E.
 8035a47:	2506 43ed 2603 eb06 04e4 e003 5d46 f800     .%.C.&......F]..
 8035a57:	6b01 1c52 1e64 d2f9 e7db 4610 bd70 2800     .kR.d......Fp..(
 8035a67:	d009 0b41 d008 2901 d003 2902 d001 2903     ..A....)...)...)
 8035a77:	d101 f100 5000 4770 f100 4080 4770 0741     .....PpG...@pGA.
 8035a87:	0ec9 08c0 4240 eb01 1040 4927 4408 4770     ....@B..@.'I.DpG
 8035a97:	0741 08c0 0ec9 4240 eb01 1040 4922 3180     A.....@B..@."I.1
 8035aa7:	4408 4770 b570 f44f 3580 f8d5 20ac 0e11     .DpGp.O..5... ..
 8035ab7:	d032 f895 10ab 29ff d02e 2902 d32c f44f     2......)...),.O.
 8035ac7:	717a 4348 30c8 4c19 4b19 2100 f853 6021     zqHC.0.L.K.!S.!`
 8035ad7:	4296 d809 eb03 0681 6876 4296 d304 4c14     .B......vh.B...L
 8035ae7:	f8d5 6130 3c48 1b80 1c89 2904 d3ee 2511     ..0aH<.....)...%
 8035af7:	4b10 2100 eb04 0281 6812 f502 62af 429a     .K.!.....h...b.B
 8035b07:	dd03 4282 dc01 4613 460d 1c49 2912 d3f1     ...B...F.FI..)..
 8035b17:	4807 385c 5d40 bd70 20f5 bd70 0020 0060     .H\8@]p.. p. .`.
 8035b27:	0040 4201 0000 f8fb 0042 6044 0100 5801     @..B....B.D`...X
 8035b37:	0000 b8d7 ffff d08a b510 4601 2000 b672     ...........F. r.
 8035b47:	060a d512 4a6b 7913 7954 1b1b f003 031f     ....kJ.yTy......
 8035b57:	2b1c d21f 7910 4b68 eb03 0380 1c40 7110     .+...yhK....@..q
 8035b67:	6019 7910 f000 001f e012 4a62 1f92 7913     .`.y......bJ...y
 8035b77:	7954 1b1b f003 033f 2b3c d20b 7910 4b5f     Ty....?.<+...y_K
 8035b87:	eb03 0380 1c40 7110 6019 7910 f000 003f     ....@..q.`.y..?.
 8035b97:	7110 2001 b662 bf40 bd10 4856 1f80 7901     .q. b.@...VH...y
 8035ba7:	7940 1a08 f000 003f 4770 b672 0601 d50a     @y....?.pGr.....
 8035bb7:	4950 794a 1e52 714a 794a f002 021f 714a     PIJyR.JqJy....Jq
 8035bc7:	7949 4a4d e00a 494b 1f89 794a 1e52 714a     IyMJ..KI..JyR.Jq
 8035bd7:	794a f002 023f 714a 7949 4a48 f842 0021     Jy..?.JqIyHJB.!.
 8035be7:	b662 4770 4943 1fc9 7008 bf40 4770 e92d     b.pGCI...p@.pG-.
 8035bf7:	41f0 4d41 4604 483f 3580 2600 1f80 7106     .AAM.F?H.5.&...q
 8035c07:	7146 6006 1d80 7106 7146 6006 1fc0 7006     Fq.`...qFq.`...p
 8035c17:	4f3b e007 f845 1b04 eb07 4004 4788 88a0     ;O..E......@.G..
 8035c27:	1da4 4404 6821 2900 d1f4 602e e8bd 81f0     ...D!h.)...`....
 8035c37:	4e30 2500 1fb6 1db7 6830 b990 2000 b672     0N.%....0h... r.
 8035c47:	7971 7932 4291 d00a 7970 492c eb01 0180     qy2y.B..py,I....
 8035c57:	1c40 7170 6808 7971 f001 013f 7171 b662     @.pq.hqy..?.qqb.
 8035c67:	6030 6838 b990 2000 b672 7979 793a 4291     0`8h... r.yy:y.B
 8035c77:	d00a 7978 4920 eb01 0180 1c40 7178 6808     ..xy I....@.xq.h
 8035c87:	7979 f001 011f 7179 b662 6038 f8d6 8000     yy....yqb.8`....
 8035c97:	f1b8 0f00 d011 4c18 3480 e005 6830 4788     .......L.4..0h.G
 8035ca7:	6030 4540 d104 1d24 6821 2900 d1f6 e002     0`@E..$.!h.)....
 8035cb7:	6820 2800 d1c0 6035 e7be 480e 1fc0 7800      h.(..5`...H...x
 8035cc7:	b9b0 f8d7 8000 f1b8 0f00 d011 4c0a 3480     .............L.4
 8035cd7:	e005 6838 4788 6038 4540 d104 1d24 6821     ..8h.G8`@E..$.!h
 8035ce7:	2900 d1f6 e002 6820 2800 d1a5 603d e7a3     .).... h.(..=`..
 8035cf7:	bf20 e7a1 0020 f359 0020 0061 0020 0060      ... .Y. .a. .`.
 8035d07:	0600 0100 b510 22a0 496b 486c f640 3347     ......."kIlH@.G3
 8035d17:	4798 486a f04f 21e0 f8c1 0d08 4868 f8c1     .GjHO..!....hH..
 8035d27:	0d0c 2000 22b0 1843 f883 2400 1c40 2818     ... ."C....$@..(
 8035d37:	dbf9 2080 f881 0d23 20d0 f881 0d22 2240     ... ..#.. ..".@"
 8035d47:	2100 4860 f640 334f 4798 485f 2100 6041     .!`H@.O3.G_H.!A`
 8035d57:	21ff 7001 bd10 4a59 eb02 0080 6401 4770     .!.p..YJ.....dpG
 8035d67:	495a 6808 174a f8c1 2080 4770 4b55 f833     ZI.hJ.... pGUK3.
 8035d77:	2010 b912 f823 1010 4770 1e40 d2f7 4770     . ..#...pG@...pG
 8035d87:	b672 2101 4081 4850 6842 4311 6041 4950     r..!.@PHBh.CA`PI
 8035d97:	f04f 5080 6008 b662 4770 b672 4a4a 6851     O..P.`b.pGr.JJQh
 8035da7:	4301 6051 494a f04f 5080 6008 b662 4770     .CQ`JIO..P.`b.pG
 8035db7:	4b44 4602 f833 0010 f823 1012 4770 4842     DK.F3...#...pGBH
 8035dc7:	f990 0000 4770 2101 4081 4842 6001 4770     ....pG.!.@BH.`pG
 8035dd7:	f04f 22e0 4410 f880 1400 4770 b672 4a37     O..".D....pGr.7J
 8035de7:	eb02 0280 6c10 6411 b662 4770 b570 4d35     .....l.db.pGp.5M
 8035df7:	4c35 2601 e017 6860 fab0 f080 f1c0 001f     5L.&..`h........
 8035e07:	7020 b672 7820 fa06 f100 6860 4388 6060      pr. x....`h.C``
 8035e17:	b662 f994 0000 f835 0010 b120 f994 0000     b.....5... .....
 8035e27:	f835 0010 4780 6860 2800 d1e4 20ff 7020     5....G`h.(...  p
 8035e37:	bd70 b672 4924 8048 b662 4770 f64b 317f     p.r.$IH.b.pGK..1
 8035e47:	f04f 20e0 6141 2107 6101 481f 2105 60c1     O.. Aa.!.a.H.!.`
 8035e57:	2100 6081 8041 4770 b510 2004 f7ff fe6c     .!.`A.pG... ..l.
 8035e67:	4c19 68e0 1e40 60e0 d11e 2005 60e0 8860     .L.h@..`... .``.
 8035e77:	b140 8860 1e40 0400 0c00 8060 d102 f240     @.`.@.....`...@.
 8035e87:	105f 4780 68a0 1c40 60a0 68a0 68a1 0900     _..G.h@..`.h.h..
 8035e97:	0400 f001 010f ea40 3001 1cc0 f7ff fe4c     ......@..0....L.
 8035ea7:	490d f04f 7080 6008 bd10 f240 105f 4700     .IO..p.`..@._..G
 8035eb7:	f240 105f 4700 0000 0000 0080 0020 005c     @._..G...... .\.
 8035ec7:	fa05 0005 0020 d05a 0020 fc59 00e0 00e1     .... .Z. .Y.....
 8035ed7:	00e0 04ed 00e0 00e2 0040 0805 e92d 5ff0     ........@...-.._
 8035ee7:	4605 b2c2 4f79 f8df 81e8 0c00 f640 3a47     .F..yO......@.G:
 8035ef7:	2a01 d008 2a1c d07e 2a3c d043 2a3d d13f     .*...*~.<*C.=*?.
 8035f07:	203e e8bd 9ff0 4604 4872 6078 7da0 b110     > .....FrHx`.}..
 8035f17:	2080 f000 f8d1 220b 4621 486d 47d0 2000     . ....."!FmH.G. 
 8035f27:	f888 000b f898 000a f898 1009 2603 4348     .............&HC
 8035f37:	f898 2008 0180 4631 07d2 d100 2102 4348     ... ..1F.....!HC
 8035f47:	f000 f8ba f8a8 000c 4861 220b f104 010b     ........aH."....
 8035f57:	300e 47d0 4c5e 340e 7aa0 7a61 4348 7a21     .0.G^L.4.zazHC!z
 8035f67:	0180 07c9 d100 2602 4370 f000 f8a5 81a0     .......&pC......
 8035f77:	20c3 f000 f8a1 4955 1f09 8008 6878 6038     . ....UI....xh8`
 8035f87:	4628 e7be f7ff fd6b 4681 6838 6078 4850     (F....k..F8hx`PH
 8035f97:	22fc 2100 301c f640 384f 47c0 4f4c 2500     .".!.0@.O8.GLO.%
 8035fa7:	371c f04f 0b15 eb05 0045 fb05 f60b eb09     .7O.....E.......
 8035fb7:	0140 eb07 0446 2206 4620 47d0 f817 0016     @...F.." F.G....
 8035fc7:	78a1 4008 28ff d06a 78e0 2801 d05c 2802     .x.@.(j..x.(\..(
 8035fd7:	d05a 2804 d05b 2805 d115 7920 0140 f000     Z..([..(.. y@...
 8035fe7:	f86b 8260 f817 0016 28ff d003 2030 f000     k.`......(..0 ..
 8035ff7:	f863 81a0 e000 e057 78a0 28ff d003 2026     c.....W..x.(..& 
 8036007:	f000 f85a 81e0 7920 1dc0 08c0 f000 f854     ..Z... y......T.
 8036017:	82a0 7920 1dc0 08c2 8aa0 2100 f040 5000     .. y.......!@..P
 8036027:	47c0 7920 1dc0 08c0 f000 f846 82e0 7920     .G y......F... y
 8036037:	1dc0 08c2 8ae0 2100 f040 5000 47c0 7920     .......!@..P.G y
 8036047:	1dc0 08c0 f000 f838 8360 7920 1dc0 08c2     ......8.`. y....
 8036057:	8b60 2100 f040 5000 47c0 2010 f000 f82c     `..!@..P.G. ..,.
 8036067:	8320 b280 2210 f040 5000 2180 47c0 f64f      ...."@..P.!.GO.
 8036077:	70ff 8120 f817 0016 28ff f814 0f24 f020     .p ......(..$. .
 8036087:	0030 d00a 3010 e009 7920 0140 e001 7920     0....0.. y@... y
 8036097:	0180 f000 f811 8260 e7b5 3020 7020 1c6d     ......`... 0 pm.
 80360a7:	2d06 db80 480c e72c 2001 0c29 d000 2000     .-...H,.. ).... 
 80360b7:	f888 000b 2000 e724 4a04 4603 6851 1cdb     ..... $..J.FQh..
 80360c7:	b288 f023 0303 4419 6051 4770 0020 105a     ..#....DQ`pG .Z.
 80360d7:	0020 a05c 0020 002d 0100 3e00 b510 4604      .\. .-....>...F
 80360e7:	b2c0 490c 2801 d012 2802 d10e 6808 f100     ...I.(...(...h..
 80360f7:	010e 7a00 0409 f000 000f f040 0008 ea41     ...z......@...A.
 8036107:	3000 f040 003f f7ff fd17 4620 bd10 0c20     .0@.?..... F.. .
 8036117:	6008 e7fa 0020 185a e92d 4ff8 4dea 4feb     .`.. .Z.-..O.M.O
 8036127:	f895 0028 f8df a3a8 eb00 0140 48e7 f04f     ..(.......@..HO.
 8036137:	0b00 6802 f895 0029 eb02 04c1 3420 1d3f     ...h..)..... 4?.
 8036147:	f107 0808 fa1f f688 b120 2801 d05f 2802     ........ ..(_..(
 8036157:	d15b e07d 7968 79a9 4288 d101 2807 d202     [.}.hy.y.B...(..
 8036167:	f8a5 b026 e005 280f d203 8ce8 f420 607c     ..&....(.... .|`
 8036177:	84e8 f8b5 9026 8853 e020 88a0 fa90 f1a0     ....&.S. .......
 8036187:	fab1 f181 eb05 0141 f9b1 100c f511 6f80     ......A........o
 8036197:	d102 f44f 4180 e001 f44f 5140 ea19 0f00     ..O..A..O.@Q....
 80361a7:	d001 4208 d10e f10c 0c01 f00c 00ff f885     ...B............
 80361b7:	0028 eb00 0040 eb02 04c0 3420 f895 c028     (...@..... 4..(.
 80361c7:	459c d3da f895 0028 46a9 4298 d104 e8bd     .E....(..F.B....
 80361d7:	4ff8 2063 f7ff bcb0 48bc 6822 1d00 2180     .Oc .....H"h...!
 80361e7:	ea41 4000 9000 b10a f7ff fca6 6960 b110     A..@........`i..
 80361f7:	9800 f7ff fca1 9800 f7ff fc9e 2001 f889     ............. ..
 8036207:	0029 6820 b118 e9c7 a000 e8bd 8ff8 68e0     ). h...........h
 8036217:	e9c8 0b00 2002 f885 0029 6960 b1c0 48aa     ..... ..).`i...H
 8036227:	7ae1 380c 7001 79a1 0909 7041 8046 7ae1     .z.8.p.y..ApF..z
 8036237:	f041 0101 7101 79a1 f3c1 0103 7141 79a1     A....q.y....Aq.y
 8036247:	eb08 1111 80c1 f8c0 b008 e9c7 a000 e7dc     ................
 8036257:	f8df c274 7ae0 f1ac 0c0c f88c 0000 79a0     ..t..z.........y
 8036267:	f3c0 0103 eb01 1010 f88c 0001 f8ac 6002     ...............`
 8036277:	f8cc b004 79a0 6961 eb08 1010 6803 400b     .....yai.....h.@
 8036287:	6003 6921 430b 6003 7921 0689 d51e 88a1     .`!i.C.`!y......
 8036297:	79e2 fa91 f1a1 fab1 f181 eb05 0141 f9b1     .y..........A...
 80362a7:	100c f3c2 1641 f1c6 0603 4131 0616 d500     ....A.....1A....
 80362b7:	4249 f9b4 6008 4431 7aa6 2401 40b4 1e64     IB...`1D.z.$.@d.
 80362c7:	400c f3c2 0104 408c 431c 6004 e9c7 ac00     .@.....@.C.`....
 80362d7:	3528 f885 b001 7828 1c40 7028 e795 e92d     (5....(x@.(p..-.
 80362e7:	41f0 4c79 b2c3 71a0 7961 4299 d106 e8bd     .AyL...qay.B....
 80362f7:	41f0 2018 ea40 4001 f7ff bc1e 79e0 2800     .A. @..@.....y.(
 8036307:	d146 4872 4e73 f100 0214 4d73 4f73 6800     F.rHsN....sMsO.h
 8036317:	2903 d020 dc07 b161 2901 d139 b95b 69c0     .) ...a..)9.[..i
 8036327:	6050 486f e02a 2907 d01f 290f d130 6900     P`oH*..)...)0..i
 8036337:	e018 6840 e012 8841 8ca3 eb01 0141 eb00     ..@h..A.....A...
 8036347:	00c1 3020 e002 4299 d003 1d80 8881 2900     .. 0...B.......)
 8036357:	d1f9 6800 e00c 2b03 d203 6980 e9c2 6000     ...h...+...i...`
 8036367:	e00d 6880 e9c2 7000 e009 2b07 d203 6940     ...h...p...+..@i
 8036377:	e9c2 5000 e003 68c0 6050 485a 6010 4853     ...P...hP`ZH.`SH
 8036387:	2180 3014 ea41 4000 f7ff fbd6 2001 71e0     .!.0A..@..... .q
 8036397:	e8bd 81f0 b570 4604 b2c1 f3c0 3203 4d4a     ....p..F.....2JM
 80363a7:	0c00 291a d02c dc0b 4e48 2901 d013 2904     ...),...HN.)...)
 80363b7:	d041 2919 d15b f414 4f70 d02b 484a bd70     A..)[...pO+.JHp.
 80363c7:	291b d022 293f d014 2964 d150 06c8 ea40     .)".?)..d)P...@.
 80363d7:	4014 60a8 e025 6030 f990 0000 2800 db04     .@.`%.0`.....(..
 80363e7:	2102 f100 4080 f880 1200 2001 f885 002a     .!...@..... ..*.
 80363f7:	e03d f3c2 0102 7129 f7ff fb31 6028 e036     =.....)q..1.(`6.
 8036407:	84a8 4610 f7ff ff6b e031 f000 f832 f7ff     ...F..k.1...2...
 8036417:	fe83 e02c b2c0 2818 d005 281b d101 f7ff     ..,....(...(....
 8036427:	fe7b 2000 bd70 2000 71e8 0e20 7168 79a8     {.. p.. .q .hq.y
 8036437:	f7ff ff55 e7f5 6830 f990 0000 2800 db16     ..U...0h.....(..
 8036447:	f7ff fb26 7800 b100 2001 6831 7849 4288     ..&..x... 1hIx.B
 8036457:	d101 2001 e000 2000 f895 102a 4281 d006     ... ... ..*..B..
 8036467:	f885 002a 211c ea41 4000 f7ff fb65 4620     ..*..!A..@..e. F
 8036477:	bd70 b5f0 2700 4d14 4639 84ef 2601 e01c     p....'.M9F...&..
 8036487:	682a eb01 0341 eb02 0243 7954 fa06 f304     *h..A...C.Ty....
 8036497:	4203 d011 7813 2bff d101 7893 1d9b 8cea     .B...x.+...x....
 80364a7:	fa06 fc03 ea42 020c 84ea 68aa eb05 0343     ....B......h..C.
 80364b7:	eb02 0244 8812 819a 1c49 792a 428a dcdf     ..D.....I.*y.B..
 80364c7:	f885 7028 bdf0 0000 0020 1c5b 0020 1c5a     ..(p.... .[. .Z.
 80364d7:	1b00 1900 1801 1900 1803 1900 1807 1900     ................
 80364e7:	1800 1900 180f 1900 0100 0500 48ff 7a01     .............H.z
 80364f7:	2900 d012 2100 7201 6802 6841 6001 6042     .)...!.r.hAh.`B`
 8036507:	f1a0 0324 8199 3312 8199 7a41 7391 6840     ..$....3..Az.s@h
 8036517:	2152 ea41 4000 f7ff bb0f 4770 4bf3 b510     R!A..@....pG.K..
 8036527:	3b24 8898 4af2 f44f 61c0 f040 5000 6011     $;...JO..a@..P.`
 8036537:	4619 f04f 4280 f8a2 1902 8984 317e 7a88     .FO..B......~1.z
 8036547:	895b fb00 4303 f8a2 3610 1c40 b2c0 4ae9     [....C...6@....J
 8036557:	7288 7a92 4290 d101 2000 7288 2001 7308     .r.z.B... .r. .s
 8036567:	bd10 b510 f7ff ffc2 48e0 2100 305a 7301     .........H.!Z0.s
 8036577:	7b40 f04f 24e0 b138 201d f7ff fadd f44f     @{O..$8.. ....O.
 8036587:	5040 f8c4 0180 bd10 f44f 60c0 f8c4 0100     @P......O..`....
 8036597:	bd10 49d6 b510 3924 7888 4ad6 1c40 b2c0     ...I..$9.x.J@...
 80365a7:	7088 7a93 2200 4298 d100 708a 78c8 4bcf     .p.z.".B...p.x.K
 80365b7:	1c40 b2c0 70c8 335a 7a5b 4298 d100 70ca     @....pZ3[z.B...p
 80365c7:	f7ff ffcf bd10 4bc9 b510 3b12 8898 4ac8     .......K...;...J
 80365d7:	f44f 61c0 f040 5000 6011 4619 f04f 4280     O..a@..P.`.FO..B
 80365e7:	f8a2 1902 8984 316c 7ac8 895b fb00 4303     ......l1.z[....C
 80365f7:	f8a2 3614 1c40 b2c0 4abf 72c8 7a92 4290     ...6@....J.r.z.B
 8036607:	d101 2000 72c8 2001 7308 bd10 49b7 b510     ... .r. .s...I..
 8036617:	3912 7888 4ab8 1c40 b2c0 7088 7a93 2200     .9.x.J@....p.z."
 8036627:	4298 d100 708a 78c8 4bb0 1c40 b2c0 70c8     .B...p.x.K@....p
 8036637:	335a 7a5b 4298 d100 70ca f7ff ff92 bd10     Z3[z.B...p......
 8036647:	b5f0 4aaa 2100 325a 7bd4 2615 4bab 4608     ...J.!Z2.{.&.K.F
 8036657:	2701 fb00 f206 f813 e012 fa07 f50e 4225     .'............%B
 8036667:	d008 eb03 0242 7952 fa07 fc02 ea4c 0c01     ....B.Ry....L...
 8036677:	fa1f f18c 1c40 2806 dbeb 489c 3824 81c1     ....@..(...H$8..
 8036687:	bdf0 e92d 5ff0 4605 f8df b260 b2c0 f3c5     ..-.._.F..`.....
 8036697:	3303 ea4f 4a15 f640 344f f04f 0901 f04f     .3O..J@.O4O...O.
 80366a7:	0800 f10b 075a 281d d07e dc13 4e94 2801     ....Z..(~....N.(
 80366b7:	d023 2803 d079 2809 d07f 280a d177 b672     #..(y..(...(w.r.
 80366c7:	0740 f8a0 8602 7b38 2800 d071 f887 900d     @.....8{.(q.....
 80366d7:	b662 e22f 2829 d06c 282e d06b 2851 d1ed     b./.)(l..(k.Q(..
 80366e7:	2228 f8db 0004 2100 47a0 f88b 9008 7a38     (".....!.G....8z
 80366f7:	2800 d1ee f7ff fefa e21c 4881 f640 416c     .(.........H@.lA
 8036707:	1d00 f8c6 a000 8001 f243 01c4 8041 f24d     ........C...A.M.
 8036717:	016e 8081 497b 487c f7ff f978 f04f 2020     n...{I|H..x.O.  
 8036727:	2204 6841 1d00 f640 3347 4798 4c77 f8a4     ."Ah..@.G3.GwL..
 8036737:	8300 f2af 2117 2009 f7ff fb0d f2af 1179     .....!. ......y.
 8036747:	200a f7ff fb08 f2af 11b5 200c f7ff fb03     . ......... ....
 8036757:	f2af 1147 200d f7ff fafe 8820 6832 8ad1     ..G.. .... .2h..
 8036767:	4308 8020 8b10 80e0 8b50 80a0 f5a4 64c0     .C .....P......d
 8036777:	2000 eb02 0140 7c4b b13b 4b65 7c0e 541e     . ..@.K|;.eK.|.T
 8036787:	7c49 eb04 0340 f8a3 1608 1c40 2802 ddf0     I|..@.....@..(..
 8036797:	4856 300a f8cb 0000 f100 0128 f8cb 1004     VH.0......(.....
 80367a7:	3956 8188 3112 e006 e172 e1c6 e005 e23c     V9...1..r.....<.
 80367b7:	e168 e18a e18e 8188 e241 484c 2101 3824     h.......A.LH.!$8
 80367c7:	7001 f8df c130 4a53 f89c 1008 f89c e009     .p..0.SJ........
 80367d7:	ea4f 79c1 4949 2503 8812 b289 f1b9 0f00     O..yII.%........
 80367e7:	d101 f04f 0502 fb0e fe05 f00e 05ff f880     ..O.............
 80367f7:	e001 ea4f 1585 8145 4d3e 8085 80c1 8102     ..O...E.>M......
 8036807:	d002 f04f 0507 e000 2500 4838 f8df e0e8     ..O......%8H....
 8036817:	3824 7405 3012 f880 8000 f89e c009 f89e     $8.t.0..........
 8036827:	e008 2503 ea5f 7ece d100 2502 fb0c fc05     ...%_..~...%....
 8036837:	f00c 05ff f880 c001 01ad 8145 4d2e 8085     ..........E..M..
 8036847:	80c1 8102 f8a0 800e 6831 4e2c 7f49 4319     ........1h,NI..C
 8036857:	7401 78f2 2101 2a04 d002 2a05 d000 2104     .t.x.!.*...*...!
 8036867:	7932 4822 fbb2 f2f1 4920 3812 315a 724a     2y"H.... I.8Z1Jr
 8036877:	2104 7441 3012 f880 8009 f04f 0900 2515     .!At.0....O....%
 8036887:	fb09 fb05 eb06 074b f8a7 a006 78f8 2804     ......K......x.(
 8036897:	d07e 2805 d115 481a 1d00 8178 f816 001b     ~..(...H..x.....
 80368a7:	28ff d005 89b8 2230 f040 5000 2100 47a0     .(....0"@..P.!.G
 80368b7:	78b8 28ff d005 89f8 2226 f040 5000 2100     .x.(....&"@..P.!
 80368c7:	47a0 f816 001b 28ff d105 7878 28ff d102     .G.....(..xx.(..
 80368d7:	78b8 28ff d003 4905 7a48 1c40 7248 f887     .x.(...IHz@.Hr..
 80368e7:	901d f897 0024 f040 00c0 e015 0020 6c5b     ....$.@..... .[l
 80368f7:	00e0 80e1 0020 a05c 0020 ae5c 0020 bc5c     .... .\. .\. .\.
 8036907:	0020 385a 0000 d5d7 0020 0020 0040 0006      .Z8.... . .@...
 8036917:	0040 0a02 0020 0c5a f887 0024 201f 8438     @... .Z...$.. 8.
 8036927:	f109 0901 8478 f1b9 0f06 dba9 f7ff fe88     ....x...........
 8036937:	4ac8 49c9 8993 81cb f8df c320 f8bc 000c     .J.I...... .....
 8036947:	8248 273f 800f f8df a318 f8ba 700a 443b     H.?'.........p;D
 8036957:	81cb f10a 0912 f8b9 300a 18c7 824f 7a92     .........0..O..z
 8036967:	2102 fbb1 f7f2 fb02 1217 f109 076c 72ba     .!..........l..r
 8036977:	f88a 8002 f89c 200a f040 5000 fbb1 fcf2     ....... @..P....
 8036987:	fb02 111c 72f9 435a f889 8002 2100 e000     .....rZC.....!..
 8036997:	e003 47a0 f04f 0b00 e025 88f8 21c8 4ab1     ...GO...%....!.J
 80369a7:	4341 fbb2 f1f1 292d d900 212d 72b9 f8a7     AC....-)..-!.r..
 80369b7:	800c f887 800b f8a7 800e f5b0 6fa0 d008     .............o..
 80369c7:	f5a0 60c0 384b d007 2899 d108 f44f 70b8     ...`K8...(..O..p
 80369d7:	e007 f24c 0070 e004 f24d 0070 e001 f44f     ..L.p...M.p...O.
 80369e7:	705c 8238 e76d 49a0 fb0b f005 eb01 0640     \p8.m..I......@.
 80369f7:	f886 801c 8ab0 b130 7931 f040 5000 1dc9     ......0.1y@..P..
 8036a07:	08ca 2100 47a0 8af0 b130 7931 f040 5000     ...!.G..0.1y@..P
 8036a17:	1dc9 08ca 2100 47a0 f10b 0b01 f1bb 0f06     .....!.G........
 8036a27:	dbe1 f887 800d 4991 f44f 5058 f8c1 01fc     .......IO.XP....
 8036a37:	67c8 b672 4888 3020 8981 8802 f021 013f     .gr..H 0....!.?.
 8036a47:	31ff fbb1 f3f2 fb02 1113 8041 8081 8841     .1........A...A.
 8036a57:	8802 1c49 fbb1 f3f2 fb02 1113 0989 f88a     ..I.............
 8036a67:	1003 8881 8800 3181 fbb1 f2f0 fb00 1012     .......1........
 8036a77:	0980 f889 0003 b662 2002 7238 487c f7ff     ......b.. 8r|H..
 8036a87:	f85b e057 4979 f44f 5058 31fc 6008 b662     [.W.yIO.XP.1.`b.
 8036a97:	2500 4e75 f04f 0915 fb05 f009 f816 1010     .%uNO...........
 8036aa7:	29ff d009 eb06 0040 7901 8a80 1dc9 08ca     .)....@..y......
 8036ab7:	f040 5000 2100 47a0 1c6d 2d06 dbec f887     @..P.!.Gm..-....
 8036ac7:	8008 200b f7ff f838 e614 4865 3012 f880     ... ..8...eH.0..
 8036ad7:	a011 e02f 0e2e f00a 05ff 2000 fa09 f400     ../........ ....
 8036ae7:	4234 d022 fa03 f200 b2e1 b2d2 b95d 183c     4B".........].<.
 8036af7:	f884 8010 7bbc 438c 4314 73bc 7bfc 438c     .....{.C.C.s.{.C
 8036b07:	4314 73fc e011 7bfc 400c 4294 d103 183c     .C.s...{.@.B..<.
 8036b17:	f884 8010 e005 7bbc 400c 4294 d005 183c     .......{.@.B..<.
 8036b27:	7425 7bbc 438c 4314 73bc 1c40 2806 dbd5     %t.{.C.C.s@..(..
 8036b37:	f7ff fd86 2000 e8bd 9ff0 7bfb 2000 1839     ..... .....{. 9.
 8036b47:	7c0a b162 1e52 f012 02ff 740a d107 7bfa     .|b.R......t...{
 8036b57:	fa09 f100 7bbc 438a 400c 4322 73fa 1c40     .....{.C.@"C.s@.
 8036b67:	2806 dbec 7bf8 4298 d001 f7ff fd69 2101     .(...{.B....i..!
 8036b77:	7a38 460c f04f 3bff 2802 d122 f8df e0e8     8z.FO..;.(".....
 8036b87:	2000 f04f 0a15 fb00 f30a eb0e 0243 f892     . O.........C...
 8036b97:	c002 f1bc 0fff d006 8c12 464b 2a1e d800     ..........KF.*..
 8036ba7:	2300 4019 e009 f81e 3013 2bff d005 8c12     .#.@.....0.+....
 8036bb7:	464b 2a1e d800 2300 401c 1c40 2806 dbe2     KF.*...#.@@..(..
 8036bc7:	b1b1 6878 1c40 6078 d101 f8c7 b004 6831     ..xh@.x`......1h
 8036bd7:	6878 684a 4290 d104 204d f7fe ffad 2021     xhJh.B..M ....! 
 8036be7:	e003 68c9 4288 d10e 4822 f7fe ffa5 e00a     ...h.B.."H......
 8036bf7:	6830 68c0 b128 6879 4281 d302 481e f7fe     0h.h(.yh.B...H..
 8036c07:	ff9b f8c7 8004 b1c4 6838 1c40 6038 d101     ........8h@.8`..
 8036c17:	f8c7 b000 6831 6838 680a 4290 d106 204d     ....1h8h.h.B..M 
 8036c27:	f7fe ff8a 2021 f7fe ff87 e008 6889 4288     ....! .......h.B
 8036c37:	d105 480b f880 9011 e001 f8c7 8000 4628     ...H..........(F
 8036c47:	e779 4907 0002 f101 017e 6808 d100 6848     y..I....~..h..Hh
 8036c57:	4770 0000 0020 a05c 0040 0206 0020 ae5c     pG.. .\.@... .\.
 8036c67:	0020 485b e200 0090 0020 bc5c 00e0 84e0      .[H.... .\.....
 8036c77:	0200 0b00 0400 2c30 0500 2c30 e92d 41f0     ......0,..0,-..A
 8036c87:	4daf 6928 2800 d16f 7e28 2700 b130 762f     .M(i.(o.(~.'0./v
 8036c97:	6868 68a9 4008 f000 7080 6068 7ee8 2401     hh.h.@...ph`.~.$
 8036ca7:	b140 7f28 b930 78e8 b920 772c f243 004c     @.(.0..x .,wC.L.
 8036cb7:	f7fe ff42 6828 6869 4288 d001 6868 e00a     ..B.(hih.B..hh..
 8036cc7:	68a8 4281 d106 2800 d175 e8bd 41f0 489d     .h.B...(u....A.H
 8036cd7:	f7fe bf32 6068 4e9c 6030 7ee8 b908 8aa8     ..2.h`.N0`.~....
 8036ce7:	b900 70f7 7828 07c1 d100 70f7 0780 d501     ...p(x.....p....
 8036cf7:	79e8 70f0 78e8 7831 b918 0789 d503 7034     .y.p.x1x......4p
 8036d07:	e001 07c9 d0fb 78a9 b911 7eaa b102 70b7     .......x...~...p
 8036d17:	78f2 b11a 7e6b b10b 8aeb b90b 70b7 e001     .x..k~.......p..
 8036d27:	78b3 b903 7077 f8d6 3001 f8d5 7001 0a1b     .x..wp...0...p..
 8036d37:	ebb3 2f17 d919 b12a b920 8aa8 210c ea41     .../..*. ....!A.
 8036d47:	4000 e026 78b0 b130 b929 487d 3022 213c     .@&..x0.).}H"0<!
 8036d57:	ea41 4000 e016 7870 b1f0 7868 b9e0 8aa8     A..@..px..hx....
 8036d67:	2109 ea41 4000 e005 e025 7873 b933 786b     .!A..@..%.sx3.kx
 8036d77:	b123 200a f7fe fee0 746c e00d 78b3 b92b     #.. ....lt...x+.
 8036d87:	b121 203d f7fe fed8 74ac e005 b922 b118     !.= .....t.."...
 8036d97:	200d f7fe fed1 74ec 7830 7829 4288 d00a     . .....t0x)x.B..
 8036da7:	8aa9 f000 000f 0409 ea41 3000 f040 001a     ........A..0@...
 8036db7:	f7fe fec2 742c e8bd 81f0 b570 4605 b2c1     ....,t....p..F..
 8036dc7:	0c00 2600 4c5e 2201 b2c3 2926 d03a dc0a     ...&^L."..&):...
 8036dd7:	2901 d01a 290b d06e 290e d053 2918 d14f     .)...)n..)S..)O.
 8036de7:	7023 7426 e04a 293e d05c 293f d013 2948     #p&tJ.>)\.?)..H)
 8036df7:	d01b 2949 d144 0748 ea40 4015 8841 82a1     ..I)D.H.@..@A...
 8036e07:	8800 82e0 f000 f862 e038 6801 60e1 8880     ......b.8..h.`..
 8036e17:	82a0 76a2 e034 f3c5 3103 f3c1 0102 7761     ...v4....1....aw
 8036e27:	f7fe fe1d f8c4 001e e02a 76e3 b113 7622     ........*..v.."v
 8036e37:	7726 e003 f243 004c f7fe fe7e f7ff ff1e     &w..C.L...~.....
 8036e47:	2000 bd70 2806 d20d e8df f000 0a0c 080a     . p..(..........
 8036e57:	0305 483e e000 483e 60a0 e00b 483d e7fb     ..>H..>H.`..=H..
 8036e67:	68e0 e7f9 6820 b908 6920 b110 483a f7fe     .h.. h.. i..:H..
 8036e77:	fe9c 60a6 6860 68a1 4008 6060 f7ff fefe     ...``h.h.@``....
 8036e87:	4628 bd70 0c28 d009 2801 d009 2809 d002     (Fp.(....(...(..
 8036e97:	280d d1f3 7622 70e2 74e6 e7ef 70e6 e7fb     .(.."v.p.t...p..
 8036ea7:	7622 e7eb ebb2 4f15 d101 2001 e000 2000     "v.....O... ... 
 8036eb7:	70a0 74a6 e7e2 2002 ebb0 4f15 d000 2200     .p.t... ...O..."
 8036ec7:	7062 7466 e7da 491e 7688 e6d7 e92d 41f0     bpft...I.v..-..A
 8036ed7:	2400 4e1b f640 3747 e01e f8d6 101e eb04     .$.N@.G7........
 8036ee7:	0044 eb01 0140 eb06 0540 f105 0022 2206     D...@...@...".."
 8036ef7:	47b8 f895 0025 2801 d00a 2802 d008 2804     .G..%..(...(...(
 8036f07:	d001 2805 d107 8af0 0980 f885 0026 e002     ...(........&...
 8036f17:	8af0 0900 e7f9 1c64 7f70 42a0 dcdd 7f74     ......d.p..B..t.
 8036f27:	e008 eb04 0044 eb06 0040 3022 2206 490b     ....D...@."0.".I
 8036f37:	47b8 1c64 2c06 dbf4 2001 7670 e73b 0000     .Gd..,... pv;...
 8036f47:	0020 d461 0100 2400 0020 425a 010f 0101      .a....$ .ZB....
 8036f57:	0107 0101 0103 0101 0100 2410 0000 e2e1     ...........$....
 8036f67:	48ff 4770 b672 4aff 80d1 8010 49fe 1450     .HpGr..J.....IP.
 8036f77:	8088 b662 4770 b672 4afa 80d1 8010 49fa     ..b.pGr..J.....I
 8036f87:	1410 8088 b662 4770 b672 2000 49f5 8008     ....b.pGr.. .I..
 8036f97:	80c8 49f5 8088 b662 4770 b672 2112 48f1     ...I..b.pGr..!.H
 8036fa7:	3008 80c1 49f0 3112 8001 20ff 3912 8008     .0...I.1... .9..
 8036fb7:	b662 4770 b510 4cec 7ae0 7b21 0240 ea40     b.pG...L.z!{@.@.
 8036fc7:	2001 79a1 4308 49e7 1e89 8008 48e7 6800     . .y.C.I.....H.h
 8036fd7:	f990 0008 2800 db0a f7fe fd51 79a2 79e3     .....(....Q..y.y
 8036fe7:	2101 421a d000 2100 7a22 4051 7001 bd10     .!.B...!"zQ@.p..
 8036ff7:	b510 b672 4adc 7991 4301 7191 f7ff ffda     ..r..J.y.C.q....
 8037007:	b662 bd10 b510 b672 4ad7 7991 4381 7191     b.....r..J.y.C.q
 8037017:	f7ff ffd0 b662 bd10 b510 460c 21b0 4620     ....b......F.! F
 8037027:	f240 126d 4790 2118 4620 f7ff ff9b 2001     @.m..G.! F..... 
 8037037:	bd10 4608 b500 49ce 6809 6001 49cb 6809     ...F...I.h.`.I.h
 8037047:	680a 6042 6849 6081 210c f7ff ff8b 2001     .hB`Ih.`.!..... 
 8037057:	bd00 b510 b672 7801 f3c1 0200 49c2 720a     ....r..x.....I.r
 8037067:	7840 71c8 f7ff ffa6 b662 2001 bd10 48be     @x.q....b.. ...H
 8037077:	b510 3012 7800 f000 003f f7ff ffc3 2001     ...0.x..?...... 
 8037087:	bd10 b510 7800 460c f3c0 0001 f000 ffcf     .....x.F........
 8037097:	6020 2104 4620 f7ff ff65 2001 bd10 b510      `.! F..e.. ....
 80370a7:	f8d0 1001 48b0 3012 7800 f3c0 0001 f000     .....H.0.x......
 80370b7:	ffd6 2020 f7fe fd79 2001 bd10 b510 2013     ..  ..y.. ..... 
 80370c7:	ea40 4001 f7fe fd38 2000 bd10 b510 2051     @..@..8.. ....Q 
 80370d7:	f7fe fd32 2000 bd10 b510 7800 2129 ea41     ..2.. .....x)!A.
 80370e7:	4000 f7fe fd29 2001 bd10 b538 7801 295f     .@..).. ..8..x_)
 80370f7:	d102 6801 0209 d003 2010 f7ff ff79 e00e     ...h..... ..y...
 8037107:	6801 f990 0004 f341 0117 f361 201f 9000     .h....A...a.. ..
 8037117:	4b98 2201 4992 4668 f240 24bb 47a0 2001     .K.".IhF@..$.G. 
 8037127:	bd38 b510 460c 2204 498d 4620 f640 3347     8....F.".I F@.G3
 8037137:	4798 2104 4620 f7ff ff15 2001 bd10 b510     .G.! F..... ....
 8037147:	6800 2123 f3c0 0013 ea41 3000 f7fe fcf4     .h#!....A..0....
 8037157:	2001 bd10 b510 2053 ea40 4001 f7fe fcec     . ....S @..@....
 8037167:	2000 bd10 b510 4604 f000 fbf8 4a7e f8c2     . .....F....~J..
 8037177:	000e b188 7821 f3c1 0300 7801 f363 0100     ....!x.....xc...
 8037187:	7001 f8d4 1001 f8c0 1001 8811 70d1 1d40     .p...........p@.
 8037197:	2120 f7ff fef0 e002 2010 f7ff ff29 2001      !....... ..).. 
 80371a7:	bd10 b510 460c 2001 bf00 b1b8 f000 fc05     .....F. ........
 80371b7:	496d f8c1 000e b130 880a 70ca 7801 2205     mI....0....p.x."
 80371c7:	eb02 0151 e007 2205 2100 4620 f640 334f     ..Q....".! F@.O3
 80371d7:	4798 2105 4620 f7ff fec5 e002 2010 f7ff     .G.! F....... ..
 80371e7:	ff07 2001 bd10 b510 7800 2805 d805 2121     ... .....x.(..!!
 80371f7:	ea41 4000 f7fe fca0 e002 2010 f7ff fef8     A..@....... ....
 8037207:	2001 bd10 b510 460c 2001 f7ff fd1a 6020     . .....F. .... `
 8037217:	2000 f7ff fd16 6060 f003 ff1a 60a0 f001     . ....``.....`..
 8037227:	f84e 81a0 210e 4620 f7ff fe9c 2001 bd10     N....! F..... ..
 8037237:	b510 4604 7800 f020 000c 7020 484e f7fe     ...F.x ... pNH..
 8037247:	fcb4 2030 ea40 4004 f7fe fcaf 2000 bd10     ..0 @..@..... ..
 8037257:	b510 7800 460c f3c0 0200 f3c0 0140 f3c0     ...x.F......@...
 8037267:	0083 f001 fac5 8020 2102 4620 f7ff fe7a     ...... ..! F..z.
 8037277:	2001 bd10 4608 493b b500 39fe 6809 090a     . ...F;I...9.h..
 8037287:	8841 f362 010e 8041 2104 f7ff fe6b 2001     A.b...A..!..k.. 
 8037297:	bd00 b510 7840 07c1 4833 7b40 d003 b940     ....@x..3H@{..@.
 80372a7:	4833 3867 e001 b120 2045 f7fe fc45 2000     3Hg8.. .E ..E.. 
 80372b7:	bd10 2001 bd10 b510 7840 2144 f3c0 0000     ... ....@xD!....
 80372c7:	ea41 4000 f7fe fc38 2001 bd10 b510 7800     A..@..8.. .....x
 80372d7:	460c 1e41 2906 d303 2010 f7ff fe89 e00b     .FA..)... ......
 80372e7:	f001 f82c 4601 220d 4620 f640 3347 4798     ..,..F." F@.G3.G
 80372f7:	210d 4620 f7ff fe36 2001 bd10 b510 4a1a     .! F..6.. .....J
 8037307:	8810 28ff d006 7990 f040 0010 7190 f7ff     ...(...y@....q..
 8037317:	fe51 bd10 4813 300e 8841 8011 8800 7090     Q....H.0A......p
 8037327:	8890 b138 f7ff fe30 7990 f040 0010 7190     ..8...0..y@....q
 8037337:	f7ff fe40 e8bd 4010 205e f7fe bbfd b510     ..@....@^ ......
 8037347:	f04f 4280 f8b2 0320 4c07 f400 41c0 4620     O..B.. ..L...A F
 8037357:	88a3 7980 4299 f040 0010 d012 71a0 e00d     ...y.B@......q..
 8037367:	0000 e8e1 0040 2203 0020 1a62 0020 485a     ....@.." .b. .ZH
 8037377:	0100 ac00 0525 3713 0200 5700 f7ff fe1a     ....%..7...W....
 8037387:	e00b 78e1 2904 d00b 2905 d104 f8d4 000e     ...x.)...)......
 8037397:	b108 f000 fb20 2000 70e0 f7ff fdf5 bd10     .... .. .p......
 80373a7:	f8b2 1328 b141 f8d4 000e 7802 f361 0247     ..(.A......xa.G.
 80373b7:	7002 f000 fae2 e7ee 71a0 f7ff fdfb e7ea     .p.......q......
 80373c7:	e92d 41f0 4eb5 b2c2 0c05 8833 4604 f3c0     -..A.N....3..F..
 80373d7:	3103 2a26 d076 dc1d 2a14 d074 dc12 4fb0     .1&*v....*t....O
 80373e7:	2a01 d046 2a02 d070 2a12 d16a 7371 2b0c     .*F..*p..*j.qs.+
 80373f7:	d1fb 48aa 3012 7840 07c0 7b70 d07d 2800     ...H.0@x..p{}..(
 8037407:	d05f e0c7 2a16 d079 2a1a d07d 2a1b d1ec     _....*y..*}..*..
 8037417:	2008 e0bb 2a54 d073 dc0d f04f 5000 ea40     . ..T*s...O..P@.
 8037427:	4014 2a46 d06d 2a47 d06c 2a52 d1dd 2b11     .@F*m.G*l.R*...+
 8037437:	d169 2128 e0a2 2a57 d071 2a5e d070 2a82     i.(!..W*q.^*p..*
 8037447:	d1d3 f2af 1147 2006 f7fe fc85 f2af 1111     ....G.. ........
 8037457:	2007 f7fe fc80 21b0 2006 f7fe fcb9 21a0     . .....!. .....!
 8037467:	2007 f7fe fcb5 498f 20c0 f8c1 01fc 67c8     . .....I. .....g
 8037477:	e06f 2000 f04f 4180 603d f8a1 0320 7aa8     o.. O..A=`.. ..z
 8037487:	71f0 7a68 7230 f995 0008 2800 db0f f7fe     .qhz0r.....(....
 8037497:	faf6 683a 2101 7a52 b102 2100 7001 6838     ..:h.!Rz...!.p8h
 80374a7:	2104 f990 0008 f100 4080 f880 1200 6838     .!.......@....8h
 80374b7:	f990 000b 2800 db6f 2102 f100 4080 f880     .....(o..!...@..
 80374c7:	1200 e069 e02d e047 e7ff 6838 f990 000b     ..i.-.G...8h....
 80374d7:	2800 db0b f7fe fadc 7800 b938 683a f992     .(.......x8.:h..
 80374e7:	100b f992 000c 320d f000 f87e 2001 f000     .......2..~.. ..
 80374f7:	f8e1 2082 f7fe fb20 e04e e04a e041 e003     ... .. .N.J.A...
 8037507:	e02e e011 e017 e023 f8b6 0009 ebb0 4f14     ......#........O
 8037517:	d042 2001 f7ff fd6c f8a6 5009 e03c e00d     B.. ..l....P<...
 8037527:	e03d 72f5 2004 e031 2b08 d135 221c 4351     =..r. 1..+5.."QC
 8037537:	f7ff fd18 e02e 2b09 d12e e02b 2d01 d004     .......+..+..-..
 8037547:	2d02 d006 2d03 d14d e003 2002 f7ff fd50     .-...-M.... ..P.
 8037557:	e048 f7ff fd22 e045 2b10 d143 2140 e00b     H...".E..+C.@!..
 8037567:	2b0a d13f 484d 2106 3024 7800 eba1 1010     .+?.MH.!$0.x....
 8037577:	4240 2165 eb01 1100 4848 3024 f7ff fcf2     @Be!....HH$0....
 8037587:	e7e7 0c20 d000 2001 7330 2002 f7ff fd30     .. .... 0s. ..0.
 8037597:	e002 b908 f7ff fd01 4620 e8bd 81f0 2100     ........ F.....!
 80375a7:	4a41 4608 eb00 0440 f812 4014 429c d104     AJ.F..@....@.B..
 80375b7:	eb00 0040 eb02 0140 e002 1c40 2817 d3f1     ..@...@...@..(..
 80375c7:	b119 78b0 794a 4290 d003 2010 f7ff fd10     ...xJy.B... ....
 80375d7:	e7bf f8d1 2001 4931 3124 f1a1 0012 4790     ..... 1I$1.....G
 80375e7:	2800 d1b6 2000 e7d8 e92d 41f0 460f 4614     .(... ..-..A.F.F
 80375f7:	f7fe fa58 4606 4829 308a f001 f97b e02c     ..X..F)H.0..{.,.
 8037607:	4826 2228 2100 308a f640 334f 4798 4923     &H(".!.0@.O3.G#I
 8037617:	2501 318a 700d 2012 7288 f814 0b01 7408     .%.1.p. .r.....t
 8037627:	2004 7508 0340 8348 2003 7708 774e 2000     . .u@.H.. .wNw. 
 8037637:	7788 2107 f001 f994 2101 4638 f000 f812     .w.!.....!8F....
 8037647:	481a 7005 481a f880 520c 2100 4638 f000     .H.p.H...R.!8F..
 8037657:	f809 2108 2000 f001 f983 7820 2800 d1cf     ...!. .... x.(..
 8037667:	1ee4 e7fa e92d 41f0 1e4c 4680 43e6 f04f     ....-..AL..F.CO.
 8037677:	4580 f44f 77c8 e00d f8b5 0b02 f8b5 1b02     .EO..w..........
 8037687:	1a09 b289 42b9 d3f9 4640 f7fe fa01 7800     .....B..@F.....x
 8037697:	ea40 0444 42b4 d1ef e77f 0000 0020 1a62     @.D..B...... .b.
 80376a7:	0020 485a 00e0 84e0 0000 ece1 0020 967f      .ZH........ ...
 80376b7:	0142 0040 b510 49f2 f881 0178 49f1 2004     B.@....I..x..I. 
 80376c7:	70c8 1d09 70c8 2080 f7ff fc9c e8bd 4010     .p...p. .......@
 80376d7:	2040 f7ff bc8d 2001 4770 4be9 f893 1176     @ ..... pG.K..v.
 80376e7:	2906 d207 eb03 02c1 1c49 f883 1176 6010     .)......I...v..`
 80376f7:	2000 6050 4770 b510 4ce1 f894 1176 2900     . P`pG...L..v..)
 8037707:	d011 f000 f9aa f894 2176 eb04 01c2 3908     ........v!.....9
 8037717:	2800 d008 1e52 f884 2176 e8bd 4010 2208     .(..R...v!...@."
 8037727:	f640 3347 4718 bd10 49d5 2000 f881 0176     @.G3.G...I. ..v.
 8037737:	4770 4ad3 f892 1176 b909 2000 4770 f892     pG.J..v.... pG..
 8037747:	0177 1c40 b2c0 f882 0177 4288 d302 2000     w.@.....w..B... 
 8037757:	f882 0177 f892 0177 eb02 00c0 6800 4770     ..w...w......hpG
 8037767:	e92d 41f0 2400 4625 4fc6 4ec5 f04f 0815     -..A.$%F.O.NO...
 8037777:	e015 7878 fb00 f008 eb06 0540 f855 0f30     ..xx......@.U.0.
 8037787:	f000 f96b 0004 d005 79a0 2802 d00a 7968     ..k......y.(..hy
 8037797:	07c0 d107 48bb f000 f93b f000 f947 78b8     .....H..;...G..x
 80377a7:	2800 d1e6 78b9 2000 b329 f896 1177 eb06     .(...x. )...w...
 80377b7:	01c1 42a1 d11f 79a1 1d28 2901 d103 7801     ...B...y(..)...x
 80377c7:	f021 0108 e007 7841 07c9 d0f8 2100 71a1     !.....Ax.....!.q
 80377d7:	7801 f041 0108 7001 7922 b2c9 f362 0141     .xA....p"y..b.A.
 80377e7:	7001 7962 b2c9 f362 0100 7001 79e1 e01e     .pby..b....p.y..
 80377f7:	7001 e8bd 81f0 f896 1176 2900 d0f9 48a2     .p......v..)...H
 8037807:	f896 1177 7842 eb06 01c1 f022 02fe 7042     ..w.Bx...."...Bp
 8037817:	f896 2178 b10a 680a e001 4a9c 6812 f8c0     ..x!...h...J.h..
 8037827:	2002 794b 7802 f363 0200 7002 79c9 2901     . Ky.xc....p.y.)
 8037837:	7801 d102 f041 0104 e7da f021 0104 e7d7     .x..A.....!.....
 8037847:	4890 1d00 7881 78c2 4291 d207 7800 2113     .H...x.x.B...x.!
 8037857:	4348 498b eb01 0040 30d8 4770 2000 4770     HC.I..@..0pG. pG
 8037867:	e92d 47f0 4f87 2113 1d3f 7838 f8df 9210     -..G.O.!?.8x....
 8037877:	4348 eb09 0540 f899 0178 35d8 2800 f8d5     HC..@...x..5.(..
 8037887:	0002 d003 f000 f8e9 4604 e004 497f 6809     .........F...I.h
 8037897:	4288 d137 4c7a 2c00 d034 487a 7881 2601     .B7.zL.,4.zH.x.&
 80378a7:	f04f 0802 b329 7840 2115 4348 eb09 0040     O...).@x.!HC..@.
 80378b7:	3034 f8d0 1002 f8d5 2002 4291 d119 7829     40....... .B..)x
 80378c7:	074a d504 7840 07c0 d001 71a6 e011 79a0     J...@x.....q...y
 80378d7:	b178 7920 f3c1 0100 4281 d10a f884 8006     x. y.....B......
 80378e7:	4631 b100 2100 7121 4866 f000 f891 f000     1F...!!qfH......
 80378f7:	f89d 7828 0700 d507 71e6 7828 f340 0040     ..(x.....q(x@.@.
 8037907:	1c40 7160 e8bd 87f0 79e0 2801 d107 f884     @.`q.....y.(....
 8037917:	8007 7828 f340 0040 1c40 7160 e001 2802     ..(x@.@.@.`q...(
 8037927:	d1f0 7868 0840 d0ed 7828 7961 f3c0 0040     ..hx@...(xay..@.
 8037937:	4281 d0e7 78ba 78f9 1e49 428a dae2 7160     .B...x.xI..B..`q
 8037947:	7868 07c0 d002 2020 f7ff fb52 484d 1d00     hx....  ..R.MH..
 8037957:	f000 f850 e8bd 47f0 f000 b873 4849 7881     ..P....G..s.IH.x
 8037967:	78c2 4291 d207 7800 2115 4348 4944 eb01     .x.B...x.!HCDI..
 8037977:	0040 3035 4770 2000 4770 b510 4841 2115     @.50pG. pG..AH.!
 8037987:	7800 4348 493e eb01 0040 3030 7942 0852     .xHC>I..@.00ByR.
 8037997:	d012 f8d0 2006 6002 2200 7102 f891 1178     ..... .`.".q..x.
 80379a7:	b919 493a 6809 f8c0 1006 4836 f000 f822     ..:I.h....6H..".
 80379b7:	e8bd 4010 f000 b83a bd10 4832 1d00 7881     ...@..:...2H...x
 80379c7:	b139 7840 2113 4348 492d eb01 0040 30d9     9.@x.!HC-I..@..0
 80379d7:	4770 2000 4770 482b b510 1d00 7880 2800     pG. pG+H.....x.(
 80379e7:	d007 4828 1d00 f000 f813 e8bd 4010 f000     ..(H.........@..
 80379f7:	b828 bd10 b672 7801 78c2 1c49 fbb1 f3f2     (...r..x.xI.....
 8037a07:	fb02 1113 7001 7881 1c49 7081 b662 4770     .....p.xI..pb.pG
 8037a17:	b672 7841 78c2 1c49 fbb1 f3f2 fb02 1113     r.Ax.xI.........
 8037a27:	7041 7881 1e49 7081 b662 4770 b672 4815     Ap.xI..pb.pGr..H
 8037a37:	7880 2803 f04f 0040 d201 f7ff bad9 f7ff     .x.(O.@.........
 8037a47:	bae1 b672 480f 1d00 7880 2800 f04f 0080     ..r..H...x.(O...
 8037a57:	d001 f7ff bacd f7ff bad5 b510 4b08 2100     .............K.!
 8037a67:	f893 2176 e008 eb03 04c1 6824 4284 d102     ..v!......$h.B..
 8037a77:	eb03 00c1 bd10 1c49 428a dcf4 2000 bd10     ......I..B... ..
 8037a87:	0020 cc62 0020 4c5a 0020 3c64 0100 ac00      .b. .ZL .d<....
 8037a97:	b510 4604 f990 0000 2800 db12 7861 f3c1     ...F.....(..ax..
 8037aa7:	0106 2904 d104 f7fd ffea 7861 09c9 7001     ...)......ax...p
 8037ab7:	7860 f3c0 0106 f994 0000 f100 4080 f880     `x...........@..
 8037ac7:	1200 bd10 e92d 41f0 f04f 4680 f896 1403     ....-..AO..F....
 8037ad7:	2000 f896 2401 f001 01f8 f002 04c7 4aa8     . ...$.........J
 8037ae7:	ea4f 0ce1 7811 4da7 1e4b 4607 b2db f1bc     O....x.MK..F....
 8037af7:	0f0c d21b e8df f00c 061a 1e06 1e1c 1832     ..............2.
 8037b07:	1c4b 4337 6868 f024 0104 7803 07db d003     K.7Chh$....x....
 8037b17:	7843 2b01 d900 2701 ea41 0487 7841 7011     Cx.+...'A...Ax.p
 8037b27:	7800 f886 0405 e03e 2001 7568 2002 e02f     .x....>.. hu. /.
 8037b37:	2002 e016 b139 7013 68a8 f810 1b01 f886     . ..9..p.h......
 8037b47:	1405 60a8 e02f 6868 1d00 6068 7800 07c0     ...`/.hh..h`.x..
 8037b57:	d002 f044 0420 e026 2001 e019 2900 d0fb     ..D. .&.. ...)..
 8037b67:	2003 7568 e7f8 7013 2902 d101 f024 0404     . hu...p.)..$...
 8037b77:	f896 1405 68e8 f800 1b01 60e8 e013 f896     .....h.....`....
 8037b87:	0405 68e9 7008 6868 1d00 6068 e7e4 b150     ...h.phh..h`..P.
 8037b97:	f024 0404 07c0 d001 f044 0410 2000 f7fe     $.......D.... ..
 8037ba7:	f821 752f e002 6850 7800 7528 f886 4401     !./u..Ph.x(u...D
 8037bb7:	e8bd 81f0 4a73 f04f 4380 6910 b170 f64f     ....sJO..C.ip.O.
 8037bc7:	71c0 4288 da00 4601 1a40 6110 b672 f8b3     .q.B...F@..ar...
 8037bd7:	0b02 4408 f8a3 0b48 b662 4770 2000 f8a3     ...D..H.b.pG. ..
 8037be7:	0b28 6850 1d00 6050 2000 f7fd bffb e92d     (.Ph..P`. ....-.
 8037bf7:	41f0 4605 b2c0 4e62 4f62 f04f 4480 2803     .A.F..bNbOO..D.(
 8037c07:	d03d dc23 2801 d028 2802 d11e 6870 7840     =.#..((..(..ph@x
 8037c17:	f040 0040 f884 0401 f2af 0167 2013 f7fe     @.@.......g.. ..
 8037c27:	f89a 21e0 2013 f7fe f8d3 4c57 f44f 2000     ...!. ....WLO.. 
 8037c37:	6020 f2af 116f 2008 f7fe f88d 21e0 2008      `..o.. .....!. 
 8037c47:	f7fe f8c6 f44f 7080 6020 e096 f04f 0800     ....O..p `..O...
 8037c57:	2880 d024 2881 d1f8 e02b 0c28 6070 2007     .($..(..+.(.p`. 
 8037c67:	f884 020d f884 020e 2400 6870 eb00 0044     .........$ph..D.
 8037c77:	1c80 f7ff ff0d 1c64 2c04 dbf6 e07d b672     ......d..,..}.r.
 8037c87:	7d38 b150 7d38 1e40 f010 00ff 7538 d104     8}P.8}@.....8u..
 8037c97:	b662 2005 f7fd ff50 e06f b662 e06d f04f     b.. ..P.o.b.m.O.
 8037ca7:	5000 ea40 4015 6038 6840 6078 f887 8015     .P@..@8`@hx`....
 8037cb7:	2581 683a 6850 b120 6878 8841 b109 7d7b     .%:hPh .xhA...{}
 8037cc7:	b13b 6810 7d79 ea40 3001 f7fd ff35 2000     ;..hy}@..0..5.. 
 8037cd7:	e76e 7802 b1ea 4608 f7fd fec1 60b8 6878     n..x...F.....`xh
 8037ce7:	7901 07c9 d004 88c0 f7fd feb9 60f8 e001     .y...........`..
 8037cf7:	f8c7 800c 6870 7800 7538 2001 f7fd ff72     ....ph.x8u. ..r.
 8037d07:	f894 0401 f000 00c3 f040 0020 f884 0401     ........@. .....
 8037d17:	e031 7842 b9b2 0188 f64f 71c0 6138 4288     1.Bx....O..q8a.B
 8037d27:	da00 4601 1a40 6138 b672 f8b4 0b02 4408     ...F@.8ar......D
 8037d37:	f8a4 0b48 2008 f8a4 0b28 2001 f7fd ff52     ..H.. ..(.. ..R.
 8037d47:	b662 e018 2a01 d103 1c80 f7ff fea1 e006     b....*..........
 8037d57:	2a02 d106 f241 002e eb00 4001 e006 6878     .*..A......@..xh
 8037d67:	e007 2a03 d105 202e ea40 4001 f7fd fee4     ...*... @..@....
 8037d77:	e7f5 1d00 6078 f505 3580 4628 e718 0000     ....x`...5(F....
 8037d87:	0020 545a 0020 dc5b 00e0 00e1 b570 4604      .ZT .[.....p..F
 8037d97:	b2c0 2801 d130 4e19 0c20 6030 4818 f640     ...(0..N .0`.H@.
 8037da7:	3547 7800 b120 4917 4817 f7fd fe2f e004     G5.x ..I.H../...
 8037db7:	4816 4914 6802 4814 47a8 6830 7840 b968     .H.I.h.H.G0h@xh.
 8037dc7:	4813 2118 8001 8041 f240 113f 8081 1541     .H.!..A.@.?...A.
 8037dd7:	80c1 480f 2210 490f 30d8 47a8 6830 7801     ...H.".I.0.G0h.x
 8037de7:	f04f 4080 b129 2133 f880 1212 2134 f880     O..@).3!....4!..
 8037df7:	1211 2100 f8a0 1c00 4620 bd70 0020 5c5a     ...!.... Fp. .Z\
 8037e07:	0000 94e2 0000 95e2 0020 806d 0000 90e2     ........ .m.....
 8037e17:	0020 ac7e 0000 76e2 e92d 41f0 4605 b2c0      .~....v-..A.F..
 8037e27:	4e5c 4f5d 2801 d00d 2400 f04f 0c01 2803     \N]O.(...$O....(
 8037e37:	d030 2826 d07e 2828 d12b 6836 2000 f106     0.&(~.((+.6h. ..
 8037e47:	0310 e061 0c28 2400 6030 6830 ebc4 01c4     ..a.(..$0`0h....
 8037e57:	4420 eb07 0841 f810 1f08 f108 0804 f341      D..A.........A.
 8037e67:	0106 2900 db09 4a4d 4411 f8c8 1000 7800     ...)..MJ.D.....x
 8037e77:	f340 0006 f7fd fe03 e003 f04f 4080 f8c8     @.........O..@..
 8037e87:	0000 1c64 f8c8 0004 2c02 dbde 2028 f7fd     ..d......,..( ..
 8037e97:	fe53 e07b f897 0020 2800 d077 2300 6830     S.{... ..(w..#0h
 8037ea7:	f04f 0804 eb00 0e03 ebc3 00c3 eb07 0040     O.............@.
 8037eb7:	f10e 0e08 1d00 e01d 6881 f990 200c 5c8a     .........h... .\
 8037ec7:	2aff d100 7304 f990 200c 5c89 1c52 7341     .*...s... .\R.As
 8037ed7:	7302 2900 d0f0 7b01 07c9 d003 6801 f881     .s.)...{.....h..
 8037ee7:	8000 e007 f89e 2000 4661 0612 d400 2102     ....... aF.....!
 8037ef7:	6802 7011 7b41 2900 d0de 7b41 1c5b 1e49     .h.pA{.)..A{[.I.
 8037f07:	7341 2b02 dbcb e041 ebc0 01c0 eb07 0141     As.+..A.......A.
 8037f17:	1d09 00c2 fa25 f202 f3c2 4207 2a06 d900     ....%......B.*..
 8037f27:	2200 4432 7a92 f8d1 c008 441a 4594 d004     ."2D.z.....D.E..
 8037f37:	608a e000 e005 734c 730c 1c40 2802 dbe3     .`....Ls.s@..(..
 8037f47:	e024 0c28 d000 2001 f887 0020 2000 6831     $.(.... .. .. 1h
 8037f57:	f897 3020 4401 7a09 09ca ebc0 01c0 eb07     .. 0.D.z........
 8037f67:	0141 1d09 b113 6849 700a e00c 4663 4664     A.....Ih.p..cFdF
 8037f77:	2a00 d001 f04f 0400 684a 7014 d101 f04f     .*..O...Jh.p..O.
 8037f87:	0302 6809 700b 1c40 2802 dbe0 4628 e8bd     ...h.p@..(..(F..
 8037f97:	81f0 0000 0020 605a 0020 b85d 0040 0002     .... .Z` .].@...
 8037fa7:	b570 b2c1 4c3d f44f 3680 f44f 457c 2901     p...=LO..6O.|E.)
 8037fb7:	d00a 2920 d107 2210 4620 f640 23f5 6a21     .. )..." F@..#!j
 8037fc7:	4798 bb08 2000 bd70 0c03 4a35 f103 0110     .G... p...5J....
 8037fd7:	6011 6226 6a22 3a10 6222 6811 1c49 d101     .`&b"j.:"b.hI...
 8037fe7:	42aa d8f7 6811 1c49 d000 4613 461d 2100     .B...hI....F.F.!
 8037ff7:	eb05 0281 6813 f844 3021 eb04 0281 1c49     .....hD.!0....I.
 8038007:	6113 2904 dbf4 bd70 6a20 3010 6220 42b0     .a.)..p. j.0 b.B
 8038017:	d305 4924 4628 f240 12ad 4790 6225 6a21     ..$I(F@....G%b!j
 8038027:	4b21 2204 481d f240 24bb 47a0 e7ca 491c     !K.".H@..$.G...I
 8038037:	f000 007f 6809 eb01 0180 4818 780a 3010     .....h.....H.x.0
 8038047:	0612 d400 3810 784a eb00 0082 6800 788a     .....8Jx.....h.x
 8038057:	40d0 78ca 2101 4091 1e49 4008 4770 b510     .@.x.!.@I..@pG..
 8038067:	4a0f f000 007f 6812 4b0c eb02 0080 7802     .J.....h.K.....x
 8038077:	3310 0612 d400 3b10 78c4 2201 40a2 7884     .3.....;.x.".@.x
 8038087:	1e52 40a2 40a1 4011 b672 7840 eb03 0080     R..@.@.@r.@x....
 8038097:	6803 4393 430b 6003 b662 bd10 0020 4864     .h.C.C.`b... .dH
 80380a7:	0020 645a 0525 efbe 0525 3713 e92d 41f0      .Zd%...%..7-..A
 80380b7:	2403 4f55 4606 f04f 0801 2502 fa08 f004     .$UO.FO....%....
 80380c7:	4230 d019 4620 f7fd fce3 7801 19e0 7802     0B.. F.....x...x
 80380d7:	2a08 d211 e8df f002 080c 1004 1010 0c04     .*..............
 80380e7:	b951 f880 8000 e007 2901 d105 7005 e003     Q........)...p..
 80380f7:	462a b901 2201 7002 1c64 2c12 ddde e8bd     *F...".pd..,....
 8038107:	81f0 e92d 41f0 4605 b2c0 4e40 2801 d005     ..-..A.F..@N.(..
 8038117:	2400 2804 d00f 2827 d14f e050 0c28 6070     .$.(..'(O.P.(.p`
 8038127:	6800 f7ff ffc3 6870 7d01 2900 d045 6880     .h....ph.}.)E..h
 8038137:	f000 f870 e041 6870 7d00 b390 f000 f870     ..p.A.ph.}....p.
 8038147:	b378 f000 f8bc 4680 f000 f8b9 4f2f 7839     x......F..../O9x
 8038157:	2900 6871 d001 89c9 e000 8989 4288 d801     .)qh.........B..
 8038167:	2021 e026 6870 8a01 4541 d30e f997 1001     ! &.ph..AE......
 8038177:	2904 da0a 2900 da01 707c e01c 1c49 b248     .)...)..|p..I.H.
 8038187:	7078 2804 d117 4822 e013 8a40 4540 d812     xp.(.."H..@.@E..
 8038197:	f997 0001 f110 0f14 dd0d 2800 dd02 707c     ...........(..|p
 80381a7:	e002 e00a 1e40 7078 f997 0001 3014 d102     ....@.xp.....0..
 80381b7:	202d f7fd fcc1 2001 7038 4628 e79f 2000     - ..... 8p(F... 
 80381c7:	f7fd fc66 7800 2800 d0f9 6870 6840 f7ff     ..f..x.(..ph@h..
 80381d7:	ff6d 6870 f990 0015 2800 db0a f7fd fc4f     m.ph.....(....O.
 80381e7:	7004 6870 2104 f990 0015 f100 4080 f880     .pph.!.......@..
 80381f7:	1200 2102 074a f8a2 1100 2000 bf00 1c40     ...!J...... ..@.
 8038207:	280a dbfb bf30 e7f6 0040 0002 0020 685a     .(..0...@... .Zh
 8038217:	0100 2d00 4a2b 6010 8091 200d 80d0 4770     ...-+J.`... ..pG
 8038227:	b570 4928 f644 75c0 88c8 f04f 4380 1e40     p.(ID..u..O..C@.
 8038237:	b280 80c8 280c d840 d105 f04f 0000 8108     .....(@...O.....
 8038247:	f8a3 5a6c e039 4a1f 07c6 8912 f04f 0401     ..lZ9..J....O...
 8038257:	d009 0845 40ac 4322 f44f 4480 ea44 1282     ..E..@"CO..DD...
 8038267:	f8a3 2a6c e009 f8b3 6a6a 05f6 d403 0846     ..l*....jj....F.
 8038277:	40b4 4322 810a f8a3 5a6c b9f0 f44f 4040     .@"C....lZ..O.@@
 8038287:	f8a3 0a6c 4a10 890c e9d2 0300 1a1b 4363     ..l..J........cC
 8038297:	243f fbb3 f3f4 4418 6993 f44f 747a fbb3     ?$.....D.iO.zt..
 80382a7:	f3f4 680c 6912 4422 4402 4353 fbb3 f0f0     ...h.i"D.DSC....
 80382b7:	8148 8888 80c8 2001 bd70 2000 bd70 4801     H...... p.. p..H
 80382c7:	8940 4770 0020 f25b 0100 d000 b2c1 2901     @.pG .[........)
 80382d7:	d007 4b0c 2903 d005 2926 d102 0c01 f883     ...K.)..&)......
 80382e7:	1062 4770 f893 1062 2900 d0fa 2100 b672     b.pG..b..)...!r.
 80382f7:	5c5a b10a 1e52 545a b662 1c49 2906 dbf6     Z\..R.ZTb.I..)..
 8038307:	4770 0000 0020 6c64 b570 4d18 1e44 f895     pG.. .dlp..MD...
 8038317:	0062 2800 d011 7808 f3c0 02c2 f3c0 0002     b..(...x........
 8038327:	4410 2807 d809 200d fb00 5004 1d80 220d     .D.(... ...P..."
 8038337:	f640 3347 4798 200a 5528 bd70 b510 1e40     @.G3.G. (Up...@.
 8038347:	b672 490a 5c0a 2a00 f04f 020d d006 fb00     r..I.\.*O.......
 8038357:	1102 1d89 4806 f640 3347 e003 2100 4804     .....H@.G3...!.H
 8038367:	f640 334f 4798 b662 4801 bd10 0020 6c64     @.O3.Gb..H.. .dl
 8038377:	0020 d95d e92d 41f0 4604 4d39 b2c0 0c21      .].-..A.F9M..!.
 8038387:	2601 f995 2002 2821 d025 dc10 4a34 2801     .&... !(%...4J.(
 8038397:	f1a2 0204 d043 2802 d047 2805 d104 f7fd     ....C..(G..(....
 80383a7:	fcdf f240 105f 4780 4620 e8bd 81f0 2824     ..@._..G F....$(
 80383b7:	d041 2825 d04a 282c d1f6 f3c4 3003 f04f     A.%(J.,(.....0O.
 80383c7:	3701 686b 4087 43bb fa06 f700 1e48 00c0     .7kh.@.C....H...
 80383d7:	4087 431f 606f 2a00 d0e6 f414 4f70 d100     .@.Co`.*....pO..
 80383e7:	70a9 6868 f995 1002 fa90 f0a0 fab0 f080     .phh............
 80383f7:	eb06 00d0 4281 da00 78a8 f995 1003 4281     .....B...x.....B
 8038407:	d0d2 b240 70e8 2126 ea41 4000 f7fd fb94     ..@..p&!A..@....
 8038417:	78e8 2800 d1c8 2025 f7fd fb8e e7c4 f04f     .x.(..% ......O.
 8038427:	30ff 6011 70a8 70e8 e7be 6810 7800 2800     .0.`.p.p...h.x.(
 8038437:	d0ba 480c e7f0 480a f414 4f70 8800 d002     ...H...H..pO....
 8038447:	ea40 4014 e001 ea20 4014 8028 2a00 d1ab     @..@.. ..@(..*..
 8038457:	8828 2800 d1a8 2027 f7fd fba7 2020 e7a4     (..(..' ....  ..
 8038467:	0020 745a 0500 2100 e92d 4ff1 f89d 6000      .Zt...!-..O...`
 8038477:	4af4 f3c6 0000 f3c6 0140 ea40 0041 eb00     .J......@.@.A...
 8038487:	0180 f8df 93c4 6812 eb00 00c0 eb09 0440     .......h......@.
 8038497:	f89d 7001 eb02 05c1 f8bd 0002 f9b4 800c     ...p............
 80384a7:	f3c7 1101 f340 000a 2901 d101 81a0 e015     ....@....)......
 80384b7:	2902 d101 4440 e7f9 2903 d10f f89d 1001     .)..@D...)......
 80384c7:	4be1 f3c1 0103 07f2 eb03 0141 d004 f8a1     .K........A.....
 80384d7:	006e f647 78ff e001 f8a1 004e f017 0f30     n.G..x....N...0.
 80384e7:	f04f 0a00 d012 f9b4 000c 2800 dd02 f8a4     O..........(....
 80384f7:	a00c e005 f9b5 101e 4288 da01 8c28 81a0     .........B..(...
 8038507:	f9b4 100c f895 0027 f7ff fda9 7c60 2101     ......'.....`|.!
 8038517:	ebb1 1f97 d00c 2202 ebb2 1f97 d102 f884     ......."........
 8038527:	a011 e006 2203 ebb2 1f97 d102 b100 2100     .....".........!
 8038537:	7461 07f1 d018 7c62 f240 31ff f44f 437c     at....b|@..1O.|C
 8038547:	4282 d013 b112 f895 0025 e001 f895 0026     .B......%.....&.
 8038557:	7c22 4282 da00 7420 f8b9 004c 07b2 d400     "|.B.. t..L.....
 8038567:	4619 4308 f8a9 004c e8bd 8ff8 f9b4 000c     .F.C..L.........
 8038577:	4540 d0f9 f895 0024 e7ea e92d 5ff0 4fb2     @E....$...-.._.O
 8038587:	f04f 0b00 f8b7 404c f8b7 004a f8a7 b04c     O.....L@..J...L.
 8038597:	4004 48ac f8df 92b4 2601 f8d0 8000 e05b     .@.H.....&....[.
 80385a7:	fa94 f0a4 fab0 f180 2909 4640 dc03 4aa6     .........)@F...J
 80385b7:	3078 3236 e002 4aa4 3028 3212 eb07 0541     x062...J(0.2..A.
 80385c7:	f9b5 308e 454b d102 f9b0 3020 e004 f8b0     ...0KE.... 0....
 80385d7:	c01c eba3 030c b21b f892 c011 f1bc 0f00     ................
 80385e7:	d112 f9b2 c00c f9b0 e01e 45f4 db0c f8b5     ...........E....
 80385f7:	a06e 44d4 fa0f fc8c f1bc 0f00 dd02 f04f     n..D..........O.
 8038607:	0c00 e003 45e6 dd01 f9b0 c020 ebac 0e03     .....E.... .....
 8038617:	f892 c010 fb9e f2fc f897 e0af 441a b212     .............D..
 8038627:	f1be 0f00 d104 429a d102 f1bc 0f01 d910     .......B........
 8038637:	f9b0 c01e 464b 4594 dc02 f9b0 001c 1883     ....KF.E........
 8038647:	f8a5 308e f8b7 004c fa06 f201 4310 f8a7     ...0..L......C..
 8038657:	004c fa06 f001 4384 2c00 d1a1 f897 0046     L......C.,....F.
 8038667:	2801 d902 1e40 f887 0046 f897 0022 2801     .(..@...F..."..(
 8038677:	d902 1e40 f887 0022 f8b7 004c 2800 d008     ..@..."...L..(..
 8038687:	211b ea41 4000 f7fd fa57 f887 60ae f887     .!A..@..W....`..
 8038697:	b0af e8bd 9ff0 e92d 43f8 4604 b2c1 4a69     ......-..C.F..iJ
 80386a7:	2700 2601 4d68 0c00 2926 d071 dc10 2901     .'.&hM..&)q....)
 80386b7:	d019 2903 d061 2918 d112 2801 d069 2807     ...)a..)...(i..(
 80386c7:	d068 280f d10c f64f 70ff f000 f8af e007     h..(..O..p......
 80386d7:	2930 d060 293f d036 2963 d101 f885 70ae     0)`.?)6.c).....p
 80386e7:	4620 e8bd 83f8 f8df 8164 2100 6010 eb05      F......d..!.`..
 80386f7:	0241 1c49 f8a2 808e 290f ddf8 2100 eb01     A.I......)...!..
 8038707:	0281 eb00 03c2 f8b3 9018 eb01 02c1 eb05     ................
 8038717:	0242 46be ea5f 69c9 d400 46c6 f8a2 e00c     B..F_..i...F....
 8038727:	8b1b 46bc 06db d400 46c4 f8a2 c00e 1c49     ...F.....F....I.
 8038737:	7416 2904 dbe3 4844 2164 308e ea41 4000     .t.)..DHd!.0A..@
 8038747:	f7fd f9fa e7cc f3c4 3103 f3c1 0802 f7fd     .........1......
 8038757:	f986 f8a5 704a 2100 e00c eb01 0341 eb00     ....Jp.!....A...
 8038767:	0343 795b f8b5 204a fa06 f303 431a f8a5     C.[y..J .....C..
 8038777:	204a 1c49 4541 dbf0 e7b2 f895 0048 2800     J I.AE......H..(
 8038787:	d0ae f895 00ae 2800 d1aa f7ff fef6 e7a7     .......(........
 8038797:	e025 e01e e020 f04f 5000 ea40 4014 6800     %... .O..P@..@.h
 80387a7:	9000 f89d 1000 6812 f3c1 0300 f3c1 0440     .......h......@.
 80387b7:	ea43 0344 eb03 0383 eb02 02c3 f3c1 0181     C.D.............
 80387c7:	8b12 3108 408e 4232 d001 f7ff fe4d 2000     ...1.@2B....M.. 
 80387d7:	e787 f885 6048 e783 f240 30ff e775 0c20     ....H`..@..0u. .
 80387e7:	d002 f885 6049 e77b f805 7f48 706f e777     ....I`{...H.opw.
 80387f7:	ea42 0041 4a13 eb00 0180 6812 eb00 00c0     B.A..J.....h....
 8038807:	eb02 02c1 4910 f9b2 201e eb01 0140 f9b1     .....I... ..@...
 8038817:	000c 4290 db02 7c49 2900 d000 480b 4770     ...B..I|.)...HpG
 8038827:	4909 eb01 0040 f9b0 004e 4770 4906 f8a1     .I..@...N.pG.I..
 8038837:	004c 2001 f881 00af f881 0046 f881 0022     L.. ......F...".
 8038847:	4770 0000 0020 7c5a 0020 e864 ffff 00fc     pG.. .Z| .d.....
 8038857:	4a53 8810 2800 d014 8810 4b52 fa90 f0a0     SJ...(....RK....
 8038867:	fab0 f180 689b eb01 0081 eb03 0040 7843     .....h......@.Cx
 8038877:	2300 7043 4b4c 8018 8810 2301 408b 4398     .#CpLK.....#.@.C
 8038887:	8010 4770 e92d 41f0 2701 4d45 4e47 e018     ..pG-..A.'EMGN..
 8038897:	79a8 1c40 71a8 8868 b198 8868 88a9 fa90     .y@..qh...h.....
 80388a7:	f0a0 fab0 f080 fa07 f400 4221 d006 483d     ..........!B..=H
 80388b7:	7800 f7fd fa65 79e8 1c40 71e8 8868 43a0     .x..e..y@..qh..C
 80388c7:	8068 79a8 f896 1f94 4288 d1e1 e8bd 81f0     h..y.....B......
 80388d7:	b510 4c34 6860 4780 4931 7a08 1c40 b2c0     ..4L`h.G1I.z@...
 80388e7:	7208 79c9 4288 d004 7820 e8bd 4010 f7fd     .r.y.B.. x...@..
 80388f7:	ba47 bd10 b510 4c2b 2209 60a0 2100 4828     G.....+L.".`.!(H
 8038907:	f640 334f 4798 492a 2000 7008 f2af 01bf     @.O3.G*I. .p....
 8038917:	f7fd fa21 f2af 0193 2001 f7fd fa1c 2160     ..!...... ....`!
 8038927:	2000 f7fd fa55 2150 2001 f7fd fa51 f2af     . ..U.P!. ..Q...
 8038937:	015f 201f f7fd fa1a 7020 481e 2101 6001     _.. .... p.H.!.`
 8038947:	2102 6001 bd10 4917 2201 6048 4814 71c2     .!.`...I."H`.H.q
 8038957:	2200 7202 7808 f7fd ba13 4912 6048 4770     .".r.x.....IH`pG
 8038967:	4a0f 4301 8011 8051 8090 2000 f7fd ba2b     .J.C..Q.... ..+.
 8038977:	b570 4606 460d b672 4c09 8820 4210 d102     p..F.Fr..L ..B..
 8038987:	480d f7fd f8d9 8820 4335 4328 8020 8860     .H.... .5C(C .`.
 8038997:	4328 8060 88a0 4330 80a0 b662 bd70 0000     (C`...0C..b.p...
 80389a7:	0020 e65d 0020 805a 0040 020c 0020 0070      .]. .Z.@... .p.
 80389b7:	0020 947f 00e0 00e1 0200 0500 b510 4823      .............#H
 80389c7:	2240 6c00 4921 f640 3347 4798 2240 2100     @".l!I@.G3.G@".!
 80389d7:	481e f640 334f 4798 e8bd 4010 2014 f7fd     .H@.O3.G...@. ..
 80389e7:	b8ab 491a 6408 481a 7800 f7fd b9c9 b510     ...I.d.H.x......
 80389f7:	f2af 0137 2018 f7fd f9b9 4915 7008 bd10     ..7.. .....I.p..
 8038a07:	4a12 eb02 0080 6802 1851 d301 f04f 31ff     .J.....hQ...O..1
 8038a17:	6001 4770 490d eb01 0180 6808 1c40 d000     .`pG.I.....h@...
 8038a27:	6008 4770 4909 eb01 0140 8808 1c40 0400     .`pG.I..@...@...
 8038a37:	0c00 d000 8008 4770 4904 4401 7808 1c40     ......pG.I.D.x@.
 8038a47:	f010 00ff d000 7008 4770 0000 0020 9865     .......ppG.. .e.
 8038a57:	0020 8c5a f000 3155 f000 30aa eb01 0050      .Z...U1...0..P.
 8038a67:	f000 3133 f000 30cc eb01 0090 f000 310f     ..31...0.......1
 8038a77:	f000 30f0 eb01 1010 f000 11ff f000 20ff     ...0........... 
 8038a87:	eb01 2010 b281 eb01 4010 4770 4851 4952     ... .....@pGQHRI
 8038a97:	6800 6008 4770 b510 4c4f 21c5 6820 4788     .h.`pG..OL.! h.G
 8038aa7:	6020 bd10 b510 4604 f7ff fff5 4602 4620      `.....F.....F F
 8038ab7:	f7ff ffd0 fbb2 f1f0 fb00 2011 2301 e006     ........... .#..
 8038ac7:	fa94 f1a4 fab1 f281 fa03 f102 438c 1e40     .............C@.
 8038ad7:	d2f6 fa94 f0a4 fab0 f080 bd10 7981 0689     .............y..
 8038ae7:	d501 1dc0 4770 2000 4770 7981 2203 ebb2     ....pG. pG.y."..
 8038af7:	1f91 d006 06ca d504 1dc0 f3c1 1140 4408     ............@..D
 8038b07:	4770 2000 4770 7981 2203 ebb2 1f91 d009     pG. pG.y."......
 8038b17:	070a d507 f3c1 1240 1dc0 4410 f3c1 1100     ......@....D....
 8038b27:	4408 4770 2000 4770 7981 2203 ebb2 1f91     .DpG. pG.y."....
 8038b37:	d00a 1dc0 f3c1 1240 4410 f3c1 1200 4410     ......@..D.....D
 8038b47:	f3c1 01c0 4408 4770 2000 4770 7981 098a     .....DpG. pG.y..
 8038b57:	d10e 1dc0 f3c1 1240 4410 f3c1 1200 4410     ......@..D.....D
 8038b67:	f3c1 02c0 4410 f3c1 0102 eb00 0041 4770     .....D......A.pG
 8038b77:	2000 4770 b570 7984 1dc2 210b 06a3 d502     . pGp..y...!....
 8038b87:	f812 1b01 310f 06e3 d504 f812 3b01 1d09     .....1.......;..
 8038b97:	4419 b289 0723 d504 f812 3b01 1d09 4419     .D..#......;...D
 8038ba7:	b289 2300 f3c4 0502 e008 eb02 0643 8836     ...#........C.6.
 8038bb7:	f3c6 0608 4431 1c89 b289 1c5b 429d dcf4     ....1D....[..B..
 8038bc7:	09a2 d101 1c89 b289 8802 f361 020b 8002     ..........a.....
 8038bd7:	bd70 0000 0100 ac00 0020 905a e92d 43f0     p....... .Z.-..C
 8038be7:	4684 e9dd 7808 9807 4293 d201 440b 3320     .F...x...B...D 3
 8038bf7:	4614 f04f 0e01 17e5 eb04 65d5 116d eb0c     .FO........em...
 8038c07:	0585 682d 4294 ea05 0508 d10a f002 061f     ..-h.B..........
 8038c17:	1ba4 1b16 f1c6 0920 fa0e f609 1e76 4035     ...... .....v.5@
 8038c27:	e019 1b1e 2e1f d216 f1c6 091f fa0e f609     ................
 8038c37:	1e76 43b5 e00f 683e 2e00 d017 1e76 603e     v..C..>h....v.>`
 8038c47:	fab5 f685 f1c6 091f fa0e f909 4426 ea25     ............&D%.
 8038c57:	0509 f800 6b01 2d00 d1ed 3420 429c d805     .....k.-.. 4.B..
 8038c67:	428c d3c8 2400 1a5b 3b20 e7c4 e8bd 83f0     .B...$[. ;......
 8038c77:	e92d 41f0 1c5b fbb3 f4f1 fb01 3414 440a     -..A[........4.D
 8038c87:	1e52 fbb2 f3f1 fb01 2313 2200 f04f 3eff     R........#."O..>
 8038c97:	2701 f8dd c018 e062 2500 4294 d321 f102     .'....b..%.B!...
 8038ca7:	0620 42b4 d21d 4293 d316 1e75 42ab d213      ..B...B..u..B..
 8038cb7:	429c d207 1b1d 1c6d fa07 f505 1e6d 1aa6     .B....m.....m...
 8038cc7:	40b5 e019 1ae6 1e76 fa07 f506 1e6d 1a9e     .@....v.....m...
 8038cd7:	1c76 40b5 43ed e00f 1aa5 fa07 f505 1e6d     v..@.C........m.
 8038ce7:	e7f8 4293 d30b f102 061f 42b3 d207 1a9d     ...B.......B....
 8038cf7:	1c6d fa07 f505 1e6d fa95 f5a5 e00d 429c     m.....m........B
 8038d07:	d203 42a2 d301 429a d905 42a3 d205 429a     ...B...B...B...B
 8038d17:	d301 42a2 d901 fa9e f5ae ea4f 1652 eb00     ...B......O.R...
 8038d27:	0686 f8d6 8000 f1bc 0f00 d002 ea48 0805     ............H...
 8038d37:	e001 ea28 0805 1a8d f8c6 8000 2d20 d20d     ..(......... -..
 8038d47:	0955 1a56 eb00 0585 3620 f8d5 8000 fa07     U.V..... 6......
 8038d57:	f606 1e76 ea28 0806 f8c5 8000 3220 428a     ..v.(....... 2.B
 8038d67:	d39a e8bd 81f0 e92d 4ff0 b087 460d 4617     ......-..O...F.F
 8038d77:	4604 aa05 a906 f001 fa11 8aa0 f894 b004     .F..............
 8038d87:	f040 5300 8ae0 4a52 f040 5600 2000 eb03     @..S..RJ@..V. ..
 8038d97:	0180 eb06 0c80 6809 f8dc c000 ea01 010c     .......h........
 8038da7:	f842 1020 1c40 2804 d3f1 2300 9300 e9dd     B. .@..(...#....
 8038db7:	3205 4659 4846 f7ff ff5b 2301 9300 e9dd     .2YFFH..[..#....
 8038dc7:	3205 4659 4630 f7ff ff53 f04f 0a24 fb95     .2YF0F..S.O.$...
 8038dd7:	f2fa 8b20 78e1 2600 f040 5000 f04f 39ff     .. ..x.&@..PO..9
 8038de7:	f04f 0880 2901 d001 2902 d10e 9204 f04f     O....)...)....O.
 8038df7:	33aa aa04 e88d 000d e9dd 3205 4659 4834     .3.........2YF4H
 8038e07:	f7ff feec f04f 3355 e003 2905 d111 464b     ....O.U3...)..KF
 8038e17:	9204 aa04 e88d 000d e9dd 3205 4659 482c     ...........2YF,H
 8038e27:	f7ff fedc 8b21 f041 5100 1a46 fb06 f60a     ....!.A..QF.....
 8038e37:	e022 2904 d120 aa04 e88d 0205 210f 9104     "..) ........!..
 8038e47:	e9dd 3205 4659 4822 f7ff fec8 f880 8000     ...2YF"H........
 8038e57:	8a60 2307 f040 5200 8b20 f040 5000 e008     `..#@..R .@..P..
 8038e67:	eb02 1181 7809 eb03 0191 1a6d d404 440e     .....x....m....D
 8038e77:	1c40 7801 2980 d1f3 f880 8000 8b22 7839     @..x.)......".9x
 8038e87:	1a80 4408 7038 8b20 f040 5100 7808 2880     ...D8p .@..Q.x.(
 8038e97:	d01a 1e40 b240 2800 da02 7922 4410 b240     ..@.@..(.."y.D@.
 8038ea7:	8aa2 f042 5200 eb02 02e0 f000 0007 f1c0     ..B..R..........
 8038eb7:	0307 7812 2001 4098 4202 d002 f884 9029     ...x. .@.B....).
 8038ec7:	e002 7808 f884 0029 4630 b007 e8bd 8ff0     ...x..).0F......
 8038ed7:	0020 dc65 b510 485f 2265 495d 6840 f640      .e..._He"]I@h@.
 8038ee7:	3347 4798 e8bd 4010 2054 f7fc be25 4959     G3.G...@T ..%.YI
 8038ef7:	6048 7808 f7fc bf44 e92d 41f0 4604 b2c1     H`.x..D.-..A.F..
 8038f07:	f3c0 3703 2501 4e53 0768 4b51 360c 0c22     ...7.%SNh.QK.6".
 8038f17:	ea40 4014 2917 d03d dc0a 2901 d013 2910     @..@.)=....)...)
 8038f27:	d07b 2911 d06e 2913 d132 f7ff fd5a e007     {..)n..)2...Z...
 8038f37:	2922 d02a 293f d020 2953 d129 f7ff ffd7     ")*.?) .S)).....
 8038f47:	2000 e8bd 81f0 4d43 60aa 7d91 7858 f361     . ....CM.`.}Xxa.
 8038f57:	1007 7058 4840 f8c3 0067 f7ff fd48 f7ff     ..Xp@H..g...H...
 8038f67:	fd95 f2af 018f 2018 f7fc ff00 7028 f000     ....... ....(p..
 8038f77:	f920 483a f7ff fcbe e00a 4610 f7fc fd6f      .:H.......F..o.
 8038f87:	f3c7 0102 f000 ffe0 e002 0b20 f8c3 0067     .......... ...g.
 8038f97:	4620 e7d6 4610 f7fc fd62 4f2d 0004 f107      F...F..b.-O....
 8038fa7:	076c d013 2220 2100 4638 f640 334f 4798     l... ".!8F@.O3.G
 8038fb7:	2100 2315 fb01 f003 eb04 0240 7950 280f     .!.#......@.Py.(
 8038fc7:	dc04 1c49 f827 2010 2906 dbf3 b672 7930     ..I.'.. .)..r.0y
 8038fd7:	b990 78b0 b980 b662 b114 481d 306c e000     ...x..b....Hl0..
 8038fe7:	2000 f000 f8c9 b10c 2001 e000 2000 f887     . ....... ... ..
 8038ff7:	0020 f241 004c e01b 2c00 d004 f04f 0001      .A.L....,..O...
 8039007:	e003 e00a e021 f04f 0000 f887 0021 d001     ....!.O.....!...
 8039017:	f04f 0500 f887 5022 e00e b97f b672 78f0     O....."P....r..x
 8039027:	b148 b662 2000 70b0 70f0 f000 fdfb 204c     H.b.. .p.p....L 
 8039037:	f7fc fd82 e784 7175 b662 e781 2f02 d1f9     ......uqb..../..
 8039047:	7077 7135 f000 ff5d e77a f001 f835 e777     wp5q..].z...5.w.
 8039057:	0020 ec65 0020 945a 0700 feff 0020 7c66      .e. .Z..... .f|
 8039067:	4840 f04f 4180 6800 f990 203e 2a00 db0a     @HO..A.h..> .*..
 8039077:	220a f8a1 2b2a f990 003e 2158 f100 4080     ."..*+..>.X!...@
 8039087:	f880 1200 4770 f990 003f 2800 dbfa 4b36     ....pG..?..(..6K
 8039097:	f04f 32ff 601a f8a1 0128 200d f8a1 0b2a     O..2.`..(.. ..*.
 80390a7:	4770 e92d 41f0 482f 237d 6800 7d81 f890     pG-..A/H}#.h.}..
 80390b7:	203c 4359 b90a 011a e001 f44f 727a eb02     < YC......O.zr..
 80390c7:	0141 0449 0c0a 4929 4d29 f990 603e 880b     A.I...)I)M..>`..
 80390d7:	8829 f04f 4480 2e00 db06 0998 07c0 d03e     ).O..D........>.
 80390e7:	1888 f8a4 0b4a e03a f990 003f 2800 db36     ....J.:...?..(6.
 80390f7:	f8b4 0b4a 4e1c 6834 2c00 db0b 4284 d009     ..J..N4h.,...B..
 8039107:	1a44 3408 b2a4 fbb4 f7f2 fb02 4217 3a08     D..4.........B.:
 8039117:	4411 8029 6030 4817 7800 2801 d11f eb00     .D).0`.H.x.(....
 8039127:	1093 f44f 717f fbb0 f2f1 fb01 0412 200a     ..O..q......... 
 8039137:	fb94 f1f0 fb00 4011 2505 b930 f7ff fcab     .......@.%0.....
 8039147:	fbb0 f1f5 fb05 0011 7130 fb94 f0f5 fb05     ........0q......
 8039157:	4010 7931 4288 d102 2001 e8bd 81f0 2000     .@1y.B... ..... 
 8039167:	e7fb 0000 0020 9c5a 0020 a75a 0020 a267     .... .Z. .Z. .g.
 8039177:	0020 ac5a 0020 a05a b510 4aff b283 8193      .Z. .Z....J....
 8039187:	2102 ebc1 04c1 eb02 0444 1c49 81a3 2908     .!......D.I....)
 8039197:	ddf7 2800 d00c 210a 2380 eb00 0241 8812     ...(...!.#..A...
 80391a7:	b11a f042 5200 f882 3025 1c49 290f ddf4     ..B..R..%0I..)..
 80391b7:	bd10 e92d 47f0 4ef1 49f1 6830 f890 003c     ..-..G.N.I0h..<.
 80391c7:	0100 7008 48ec 2282 2100 3882 f640 374f     ...p.H.".!.8@.O7
 80391d7:	47b8 4ce9 3c82 7820 f020 00c0 b2c0 f020     .G.L.< x ..... .
 80391e7:	000f 1c40 7020 7960 2004 7160 7aa0 f020     ..@. p`y. `q.z .
 80391f7:	00c0 b2c0 f040 0010 b2c0 f020 000f 1c80     ....@..... .....
 8039207:	72a0 7d20 f020 00c0 3080 f040 0010 b2c0     .r } ....0@.....
 8039217:	f020 000f 1cc0 7520 f7fd fea2 7801 0609      ..... u.....x..
 8039227:	d503 6830 f990 001a e001 f990 0003 f7fc     ..0h............
 8039237:	fc39 f814 1f1e 4dd0 f021 01c0 3180 f041     9......M!....1A.
 8039247:	0120 b2c9 f041 0110 b2c9 f021 010f 1d09      ...A.....!.....
 8039257:	7021 6831 f44f 7387 f891 2040 7a21 f362     !p1hO..s..@ !zb.
 8039267:	0102 7221 7260 48c4 80e0 3c1e 2004 eb00     ..!r`r.H...<. ..
 8039277:	0180 f814 2011 f022 02c0 3280 f042 0210     ..... "....2B...
 8039287:	f804 2011 f814 2011 f022 020f 1d52 f804     ... ... "...R...
 8039297:	2011 ebc0 02c0 eb05 0242 3a2a eb04 0141     . ......B.*:..A.
 80392a7:	80ca 1c40 810b 280b dde1 f814 0f78 227e     ..@....(....x.~"
 80392b7:	f020 00c0 b2c0 f020 000f 7020 2100 48ae      ..... ... p.!.H
 80392c7:	47b8 48ad f8df c2bc 308a 8068 301a 80a8     .G.H.....0h..0..
 80392d7:	301a 8168 3840 b283 81eb 308a 8228 301a     .0h.@8.....0(..0
 80392e7:	8268 2005 240d f10c 0e9c f10c 08ea ebc0     h.. .$..........
 80392f7:	01c0 fb00 f204 eb05 0141 eb0c 0942 f821     ........A...B.!.
 8039307:	3d2a f1a9 0982 f8a1 9002 eb02 090e f1a9     *=..............
 8039317:	0941 eb08 0282 f8a1 9004 f5a2 7282 1c40     A............r@.
 8039327:	814a 280b dde3 4894 220c 2100 307e 47b8     J..(...H.".!~0.G
 8039337:	4891 f44f 3880 307e f8d8 10ac 6001 7981     .HO..8~0.....`.y
 8039347:	251a f041 0104 b2c9 f041 0103 7181 71c5     .%A.....A....q.q
 8039357:	8084 2126 7281 2134 72c1 2100 462a 300c     ..&!.r4!.r.!*F.0
 8039367:	47b8 6830 f890 203c 4883 308a 7801 f362     .G0h..< .H.0.xb.
 8039377:	1105 7001 f8d8 10ac f8c0 1002 7981 221a     ...p.........y."
 8039387:	f021 01c0 3140 f041 0120 7181 71c5 2100     !...@1A. ..q.q.!
 8039397:	301a 47b8 487b 6831 388c 7d8b 7b02 f363     .0.G{H1h.8.}.{c.
 80393a7:	1207 7302 7b8b 7c02 f363 1245 7402 7b0b     ...s.{.|c.E..t.{
 80393b7:	7c42 f363 0200 7442 7ecb 7c02 f363 02c3     B|c...Bt.~.|c...
 80393c7:	7402 7b4a 7c01 f362 1104 7401 e8bd 87f0     .tJ{.|b....t....
 80393d7:	486d 8800 496d 8008 4770 e92d 47f0 f001     mH..mI..pG-..G..
 80393e7:	fac0 f8df 9198 4607 f8d9 1000 4d65 8a08     .......F....eM..
 80393f7:	3d88 b284 07f8 f04f 0800 d015 f891 003c     .=....O.......<.
 8039407:	2800 4620 d102 f2a0 4074 e000 388c 17c1     .( F....t@...8..
 8039417:	eb00 60d1 f3c0 104f f805 0b01 f8d9 0000     ...`..O.........
 8039427:	8a40 4420 b284 e001 f805 8b01 2602 4237     @. D.........&7B
 8039437:	d033 f8d9 0000 f890 003c 2800 4620 d102     3.......<..( F..
 8039447:	f2a0 4074 e000 388c 17c1 eb00 60d1 f3c0     ..t@...8.....`..
 8039457:	104f f805 0b01 f8d9 0000 8a80 4420 b284     O........... D..
 8039467:	fa96 f0a6 fab0 f080 f001 fa26 8980 f8d9     ..........&.....
 8039477:	3000 f400 417c 2001 e00c fa91 f2a1 fab2     .0..|A. ........
 8039487:	f282 fa00 fc02 eb03 0242 8b92 ea21 010c     ........B...!...
 8039497:	4422 b294 2900 d1f0 e001 f805 8b01 0670     "D...)........p.
 80394a7:	0e06 d1c4 f8d9 0000 7b00 2800 d08e 2001     .........{.(... 
 80394b7:	bf00 2800 d08a f7fe f93c 0005 d086 4e2e     ...(....<......N
 80394c7:	2401 4620 f001 f9f8 6800 42a8 d107 f7fe     .$ F.....h.B....
 80394d7:	f9b7 ebc4 01c4 eb06 0141 82c8 e005 ebc4     ........A.......
 80394e7:	00c4 eb06 0040 f8a0 8016 1c64 2c07 dde8     ....@.....d..,..
 80394f7:	e76c 4822 227d 6800 f890 103c 7d80 4350     l."H}".h..<..}PC
 8039507:	b909 0111 e001 f44f 717a eb01 0040 491f     ......O.zq..@..I
 8039517:	0440 880a eb02 4010 8008 491d 4a16 f8b1     @......@...I.J..
 8039527:	1065 1a40 f5a0 71be 3a82 82d1 388c 8410     e.@....q.:...8..
 8039537:	4770 b5f0 4a11 4913 6814 4a14 3988 2004     pG...J.I.h.J.9. 
 8039547:	8815 f240 4684 279c f5a1 7c95 780a f894     ..@..F.'...|.x..
 8039557:	303c b913 eb06 1242 e001 eb07 1242 b292     <0....B.....B...
 8039567:	442a eb00 0380 3afa eb0c 0343 805a 1c49     *D.....:..C.Z.I.
 8039577:	1c40 280b ddea bdf0 0020 fe66 0020 9c5a     @..(.... .f. .Z.
 8039587:	0020 407f 0020 2e68 0040 020b 0020 ac5a      ..@ .h.@... .Z.
 8039597:	0020 ec65 4810 227d 6800 f890 103c 7d80      .e..H}".h..<..}
 80395a7:	4350 b909 0111 e001 f44f 717a eb01 0040     PC......O.zq..@.
 80395b7:	490a 0440 880a eb02 4010 8008 4770 b500     .I@......@..pG..
 80395c7:	f7ff ffe8 4805 4906 8800 388c 82c8 bd00     .....H.I...8....
 80395d7:	4802 8800 4770 0000 0020 9c5a 0020 ac5a     .H..pG.. .Z. .Z.
 80395e7:	0020 7c66 48ff 2101 8800 eb01 1090 2105      .f|.H.!.......!
 80395f7:	fbb0 f2f1 fb01 0012 49fb 2804 da02 4408     .........I.(...D
 8039607:	7e00 4770 48f8 7c49 301c 5c08 4770 e92d     .~pG.HI|.0.\pG-.
 8039617:	5ff0 2500 4681 4688 462c f1c0 0706 f04f     ._.%.F.F,F....O.
 8039627:	0b01 f8df a3c4 e01d eb0a 0004 7f06 eb06     ................
 8039637:	0046 eb0a 0140 3140 7848 788a 78c9 4310     F...@.@1Hx.x.x.C
 8039647:	4308 fa0b f109 1e49 4201 d10a f7ff fa02     .C....I..B......
 8039657:	2100 2f00 dd00 4639 4288 da02 fa0b f006     .!./..9F.B......
 8039667:	4305 1c64 f89a 0010 42a0 dcdd 48de f89a     .Cd......B...H..
 8039677:	1011 301c 5c08 fa0b fb00 48dc ea25 050b     ...0.\.....H%...
 8039687:	f8d0 1067 4029 f1b8 0f01 db14 f8da 0000     ..g.)@..........
 8039697:	0043 ea40 0280 ea43 0350 431a ea42 0090     C.@...C.P..CB...
 80396a7:	ea21 0200 f8da 000c 0043 ea43 0350 4303     !.......C.C.P..C
 80396b7:	ea32 0003 d129 f1b8 0f02 db0f f8da 0000     2...)...........
 80396c7:	0043 ea40 0280 ea43 0350 431a ea42 0290     C.@...C.P..CB...
 80396d7:	ea21 0002 f8da 200c 4390 d116 f1b8 0f03     !...... .C......
 80396e7:	db0b f8da 0000 0042 ea42 0250 4302 ea21     ......B.B.P..C!.
 80396f7:	0002 f8da 200c 4390 d107 f1b8 0f04 db0d     ..... .C........
 8039707:	f8da 200c ea31 0002 d008 f7ff f9cb eb00     ... 1...........
 8039717:	0040 eb0a 0040 3040 e8bd 9ff0 2000 e7fb     @...@.@0..... ..
 8039727:	e92d 47f0 22b8 2100 48af f640 334f 4798     -..G.".!.H@.O3.G
 8039737:	49af 7e88 f020 000f 1d80 7688 48ad 6800     .I.~ ......v.H.h
 8039747:	6880 4605 f7ff f986 4607 f8df 829c 1f00     .h.F.....F......
 8039757:	f8df a298 f888 0010 f8da 0067 f04f 0901     ..........g.O...
 8039767:	43c6 2400 e030 2c04 4628 da15 43b0 d103     .C.$0..,(F...C..
 8039777:	f8da 0067 4028 43c6 ea25 0006 f7ff f992     ..g.(@.C%.......
 8039787:	f8d8 1000 fa09 f200 4311 f8c8 1000 2107     .........C.....!
 8039797:	4081 ea46 0661 e008 f7ff f984 f8d8 1004     .@F.a...........
 80397a7:	fa09 f200 4311 f8c8 1004 fa09 f100 438d     .....C.........C
 80397b7:	eb08 0104 7608 f881 002c eb00 0040 eb08     .....v..,...@...
 80397c7:	0040 f880 4040 1c64 42bc dbcc e8bd 87f0     @...@@d..B......
 80397d7:	b510 4603 f7ff ff06 2154 eb01 0280 4984     ...F....T!.....I
 80397e7:	300c 740a 76cb e8bd 4010 f7ff b91b e92d     .0.t.v...@....-.
 80397f7:	4ff8 f8df 91f4 f8df b1f4 f899 7016 f899     .O...........p..
 8039807:	5012 eb07 0047 eb09 0440 f899 6013 3440     .P..G...@....`@4
 8039817:	b1f5 42ae d103 78a0 f040 0001 70a0 4630     ...B...x@....p0F
 8039827:	f7ff f918 eb00 0840 4628 f7ff f913 4580     ......@.(F.....E
 8039837:	db03 78e0 f040 0001 70e0 b94e 486d f89b     ...x@....pN.mH..
 8039847:	1000 6800 7bc0 ebb0 1f11 d101 2000 e003     ...h.{....... ..
 8039857:	f899 0014 b110 1e40 f889 0014 f04f 0a01     ......@.....O...
 8039867:	f8d9 0000 4d60 fa0a f607 4206 f105 051c     ....`M.....B....
 8039877:	d04b f899 0014 2800 d17b 7867 f894 8002     K......({.gx....
 8039887:	78e0 9000 ea47 0008 f000 001f f7ff f8e2     .x..G...........
 8039897:	43f9 fa91 f1a1 fab1 f181 2902 d211 ea6f     .C.........)..o.
 80398a7:	0108 fa91 f1a1 fab1 f181 2903 d209 9900     ...........)....
 80398b7:	43c9 fa91 f1a1 fab1 f181 2904 d201 2803     .C.........)...(
 80398c7:	d306 4652 2804 d200 2202 4610 2104 e005     ..RF.(...".F.!..
 80398d7:	f8d9 000c 4206 d004 2103 2004 f7ff fe97     .....B...!. ....
 80398e7:	b940 f8db 0067 4206 d14c 2104 2000 f7ff     @...g..BL..!. ..
 80398f7:	fe8e b3f0 4601 4620 f000 f96e 200b f7ff     .....F F..n.. ..
 8039907:	f891 2005 f889 0014 e03c f899 0010 f899     ... ....<.......
 8039917:	1011 1c49 fbb1 f2f0 fb00 1112 b2c9 f889     ..I.............
 8039927:	1011 5d49 f8db 2067 fa0a f101 4211 d0ee     ..I]..g .....B..
 8039937:	f899 0017 b110 1e40 f889 0017 7860 07c0     ......@.....`x..
 8039947:	d020 f899 0017 b9a0 f7ff f8a5 f000 000f      ...............
 8039957:	3008 f889 0017 f8d9 0004 43b0 f7ff f8a2     .0.........C....
 8039967:	eb00 0140 eb09 0341 f994 1000 f993 2040     ..@...A.......@ 
 8039977:	e000 e007 7022 f883 1040 4449 7608 eb09     ...."p..@.ID.v..
 8039987:	0002 7607 f7ff fe2e b2c0 4c16 f889 0016     ...v.......L....
 8039997:	8821 f44f 737f eb0a 1291 fbb2 f6f3 fb03     !.O..s..........
 80399a7:	2216 f362 118f 4b12 8021 7f9a f899 6015     ."b....K!......`
 80399b7:	f042 0120 b10e f022 0120 eb00 0040 eb09     B. ...". ...@...
 80399c7:	0040 7799 3040 7841 0049 7041 7881 0049     @..w@0AxI.Ap.xI.
 80399d7:	7081 78c1 0049 70c1 f000 ffc3 f020 0001     .p.xI..p.... ...
 80399e7:	e00a 0000 0020 a267 0020 506a 0020 ec65     .... .g. .jP .e.
 80399f7:	0020 7c66 0020 9c5a f889 0012 2100 f889      .f| .Z......!..
 8039a07:	0013 4608 2214 eb09 0300 7e1b 1c40 4419     ...F.".....~@..D
 8039a17:	4351 2804 dbf7 f899 0011 5d40 4408 6821     QC.(......@].D!h
 8039a27:	f360 0115 6021 e8bd 8ff8 e92d 41f0 4e78     `...!`....-..AxN
 8039a37:	4d78 7db4 eb04 0044 eb06 0240 f995 0018     xM.}..D...@.....
 8039a47:	3240 4975 2300 6809 27fe f991 1017 1a41     @2uI.#.h.'....A.
 8039a57:	316e 4618 ebb7 0f41 db04 ea4f 0c41 f1bc     n1.F..A...O.A...
 8039a67:	0f00 dd04 4638 ebb7 0f41 db00 0048 f995     ....8F..A...H...
 8039a77:	1018 f995 501b 42a9 dd05 7851 f041 0101     .....P.B..QxA...
 8039a87:	7051 2102 e002 7d71 b109 1e49 7571 4963     Qp.!..q}..I.qucI
 8039a97:	f240 35f9 8809 ebb5 1f91 d101 2103 7571     @..5.........!qu
 8039aa7:	4d5f 68b1 f8d5 5067 2701 4029 60b1 7915     _M.h..gP.')@.`.y
 8039ab7:	4285 da0a 283c dd08 7955 2d08 d203 fa07     .B..<(..Uy.-....
 8039ac7:	f504 4329 60b1 7153 e00d 7951 2920 d20a     ..)C.`Sq..Qy )..
 8039ad7:	1c49 b2c9 7151 2920 d105 68b5 fa07 f104     I...Qq )...h....
 8039ae7:	438d 60b5 7110 7911 1f80 f1a1 0c01 4605     .C.`.q.y.......F
 8039af7:	4584 dd00 1e48 2800 dd03 462b 45ac dd00     .E..H..(..+F.E..
 8039b07:	1e4b 7113 2300 f896 c010 1e58 4619 f10c     K..q.#....X..F..
 8039b17:	0e04 e013 1875 f895 502c 42a5 d100 460b     ....u...,P.B...F
 8039b27:	2800 da0a eb05 0545 eb06 0545 f892 8004     .(....E...E.....
 8039b37:	f895 5044 45a8 d900 4608 1c49 458e dce9     ..DP.E...FI..E..
 8039b47:	2800 da01 f10c 0004 4298 dc08 e004 18f1     .(.......B......
 8039b57:	f811 2f2b 704a 1e5b 4283 dcf8 e008 1e40     ..+/Jp[..B....@.
 8039b67:	e004 18f1 312c 784a 700a 1c5b 4283 dbf8     ....,1Jx.p[..B..
 8039b77:	4430 2100 f880 402c 460b 4608 1832 f892     0D.!..,@.F.F2...
 8039b87:	402c fa07 f204 68b4 4222 d003 4311 1c5b     ,@.....h"B...C[.
 8039b97:	2b04 d002 1c40 2814 dbf0 60f1 e8bd 81f0     .+..@..(...`....
 8039ba7:	b510 4604 f000 fe88 4a1a eb04 0184 eb02     ...F.....J......
 8039bb7:	0141 f891 3029 2101 4a15 40a1 2b02 d103     A...)0.!.J.@.+..
 8039bc7:	7cd0 4388 74d0 bd10 b110 7b80 280a d9fa     .|.C.t.....{.(..
 8039bd7:	7c90 4388 7490 e7f3 b530 f990 3000 f991     .|.C.t..0....0..
 8039be7:	2000 7002 480a 700b 4403 1884 7e19 7e22     . .p.H.p.D...~"~
 8039bf7:	761a 7621 2401 6845 fa04 f302 439d 408c     .v!v.$Eh.....C.@
 8039c07:	4325 6045 6801 43a1 4319 6001 bd30 0000     %CE`.h.C.C.`0...
 8039c17:	0020 506a 0020 7c66 0020 9c5a 0020 a267      .jP .f| .Z. .g.
 8039c27:	0020 ec65 49be 780a 4282 d00f 4abd 7008      .e..I.x.B...J.p
 8039c37:	7811 f360 0103 7011 4611 0409 f000 000f     .x`....p.F......
 8039c47:	ea41 3000 f040 0012 f7fb bf76 4770 e92d     A..0@.....v.pG-.
 8039c57:	41f0 f000 fe8a 4eb4 4fb2 0005 d123 f000     .A.....N.O..#...
 8039c67:	fbda 2800 d060 48b1 8a40 f040 5400 4620     ...(`..H@.@..T F
 8039c77:	f000 fdaa 2014 f7fe fedf 7c30 f020 0080     ..... ....0| ...
 8039c87:	7430 7838 7c31 0900 0400 09c9 ea40 3001     0t8x1|......@..0
 8039c97:	f040 0016 f7fb ff50 7b20 07c0 d044 6820     @.....P. {..D. h
 8039ca7:	f7fd fd1b e040 48a2 7fc0 2810 d03c 2001     ....@..H...(<.. 
 8039cb7:	f7fe feb0 4c9f 2003 7821 f7fe fea1 f04f     .....L. !x....O.
 8039cc7:	0800 f884 8000 4628 f000 fdf6 4604 4628     ......(F.....F(F
 8039cd7:	f000 fbd0 b128 f884 800e 4628 f000 fbe4     ....(.....(F....
 8039ce7:	e01f 2002 f7fe fe96 7ba0 1c40 b2c0 73a0     ... .....{@....s
 8039cf7:	2880 d916 2015 f7fe fe9f 7be0 07c0 d002     .(... .....{....
 8039d07:	6820 f7fd fcf8 4628 f000 fde1 7838 7c31      h....(F....8x1|
 8039d17:	0900 0400 09c9 ea40 3001 f040 0016 f7fb     ......@..0@.....
 8039d27:	ff0b b2e8 f7ff ff3c f000 fe27 2800 d106     ......<...'..(..
 8039d37:	f000 fcaf e8bd 41f0 487f f7fe be0e e8bd     .......A.H......
 8039d47:	81f0 b510 f7ff fe71 f2af 00fd e8bd 4010     ......q........@
 8039d57:	f7fe be03 b510 f7ff fe68 e8bd 4010 4876     ........h....@vH
 8039d67:	f7fe bdfb e92d 47f0 4d74 f895 1021 2601     ....-..GtM..!..&
 8039d77:	f241 004c 2400 b139 f885 4021 f885 6020     A.L..$9...!@.. `
 8039d87:	f7fb feda 4628 e009 f895 1022 b141 f885     ....(F....".A...
 8039d97:	4022 f885 4020 f7fb fecf 2000 f7ff f9ec     "@.. @..... ....
 8039da7:	485f 7941 4f5f b1b9 7144 7084 2000 f7fc     _HAy_O..Dq.p. ..
 8039db7:	f840 2000 f7ff ff36 f7fd fcb6 7838 0901     @.. ..6.....8x..
 8039dc7:	d005 f020 00f0 7038 2016 f7fb feb5 e8bd     .. ...8p. ......
 8039dd7:	47f0 204c f7fb beb0 7901 b1c9 7104 7086     .GL .....y...q.p
 8039de7:	f7ff f93e f000 fc92 f7ff fc9a 2001 f7ff     ..>.......... ..
 8039df7:	ff19 204c f7fb fea0 f2af 0097 f7fe fdad     ..L ............
 8039e07:	2100 2001 f7fe fdac e8bd 47f0 f7ff bae0     .!. .......G....
 8039e17:	2002 f7fc f80e f7ff f944 4e49 0004 6830     . ......D.IN..0h
 8039e27:	d002 f990 0019 e001 f990 0018 f7ff fcd0     ................
 8039e37:	f8df 80f4 f240 31fa f8b8 0000 ebb1 1f90     ....@..1........
 8039e47:	d108 f7ff fba7 f7ff fcd2 2100 2001 f7fe     ...........!. ..
 8039e57:	fd87 e00e f241 0904 b174 f7ff fbb0 f7ff     ....A...t.......
 8039e67:	fcc6 2102 4648 f7fe fd7b f2af 1017 f7fe     ...!HF..{.......
 8039e77:	fd74 f000 f9f0 e02e 6830 4c32 f890 003c     t.......0h2L..<.
 8039e87:	f080 0101 7820 f361 1005 7020 f7ff fb31     .... xa... p..1.
 8039e97:	210a 4648 f7fe fd64 f000 fc51 f7ff fca7     .!HF..d...Q.....
 8039ea7:	f7ff fa9b f7ff fb45 f000 fd5b 0100 f44f     ......E...[...O.
 8039eb7:	5280 2100 f7fe fd5c f2af 1079 f7fe fd4d     .R.!..\...y...M.
 8039ec7:	f000 f9c9 6830 f890 103c 7820 f361 1005     ....0h..<. xa...
 8039ed7:	7020 f000 fbbd 7838 0900 d101 2001 e009      p....8x..... ..
 8039ee7:	f895 0020 b118 f898 0010 0640 d501 2002     .. .......@.... 
 8039ef7:	e000 200c f7ff fe96 e8bd 47f0 2000 f7fe     ... .......G. ..
 8039f07:	bd89 4907 2000 4a07 7008 7811 f360 0103     ...I. .J.p.x`...
 8039f17:	7011 4908 7008 f2af 10b3 f7fe bd14 0000     .p.I.p..........
 8039f27:	0020 a05a 0020 ec65 0020 a267 0020 fe66      .Z. .e. .g. .f.
 8039f37:	0020 7c66 0020 ae5a 0000 4dc4 0020 5866      .f| .Z....M .fX
 8039f47:	0020 9c5a 0020 8867 b570 4604 460d 2228      .Z. .g.p..F.F("
 8039f57:	2100 488d f640 334f 4798 488c 4b8a 6800     .!.H@.O3.G.H.K.h
 8039f67:	f890 203d 488a 7d81 f362 1186 7581 761d     ..= .H.}b....u.v
 8039f77:	7c01 f365 0102 7401 2000 e00d eb03 0180     .|e....t. ......
 8039f87:	7966 784a 1c40 f366 0203 704a 78e6 78ca     fyJx@.f...Jp.x.x
 8039f97:	1da4 f366 0202 70ca 42a8 dbef bd70 b570     ..f....p.B..p.p.
 8039fa7:	4a79 7e51 b141 1e49 7651 2000 f000 fc84     yJQ~A.I.Qv. ....
 8039fb7:	7bc0 f3c0 0042 bd70 8b51 f060 03fe 4019     .{..B.p.Q.`....@
 8039fc7:	8351 b289 2301 b9f9 f244 0101 f020 0001     Q....#..D... ...
 8039fd7:	4301 7e10 b28c fa03 f100 f06f 05ff eb05     .C.~......o.....
 8039fe7:	2101 430c 496b 8354 7809 2402 eb04 1111     .!.CkIT..x.$....
 8039ff7:	4408 2105 fbb0 f4f1 fb01 0014 b908 2001     .D.!........... 
 803a007:	e000 2000 f882 0027 f892 0027 b118 2000     ... ..'...'.... 
 803a017:	f882 0027 bd70 8b51 fa91 f0a1 fab0 f080     ..'.p.Q.........
 803a027:	4083 4399 8351 bd70 b570 4c59 280f 7ba1     .@.CQ.p.p.YL.(.{
 803a037:	f360 1107 73a1 4955 6809 d238 e8df f000     `....sUI.h8.....
 803a047:	0a08 0a0a 0a0a 0a0a 0f0f 0f0f 0f0f 0038     ..............8.
 803a057:	6808 e02e f000 fc30 b358 6800 e029 494a     .h....0.X..h).JI
 803a067:	3808 eb01 0180 7848 2204 f3c0 0503 4848     .8....Hx."....HH
 803a077:	f640 3347 3012 4798 4846 f8b0 1003 7d60     @.G3.0.GFH....`}
 803a087:	40e9 f361 1004 2101 7560 2d0a da00 2100     .@a....!`u.-...!
 803a097:	2200 4610 f7fe fbac 8a61 f360 114f 8261     .".F....a.`.O.a.
 803a0a7:	4628 f7fe fbbd 8aa1 f360 114f 82a1 bd70     (F......`.O...p.
 803a0b7:	6848 f8c4 0012 bd70 79c3 4933 2201 b13b     Hh....p..y3I.";.
 803a0c7:	b672 f881 2023 8803 838b 8843 83cb b662     r...# ....C...b.
 803a0d7:	7a03 b133 b672 f881 2024 7903 f881 3020     .z3.r...$ .y.. 0
 803a0e7:	b662 7a43 b133 b672 f881 2025 7943 f881     b.Cz3.r...% Cy..
 803a0f7:	3021 b662 7a83 2b00 d005 b672 3122 710a     !0b..z.+..r."1.q
 803a107:	7980 7008 b662 4770 b530 4b1f 4a20 f893     .y.pb.pG0..K J..
 803a117:	0023 2100 b190 f883 1023 4c1e 8b98 f8b4     #..!....#..L....
 803a127:	5001 f360 050b f8a4 5001 8994 f360 040b     .P`......P..`...
 803a137:	8194 8bdc 89d0 f364 000b 81d0 f893 0024     ......d.......$.
 803a147:	b138 f883 1024 f893 4020 7c10 f364 10c7     8...$... @.|d...
 803a157:	7410 f893 0025 b150 4c0f f883 1025 79a0     .t..%.P..L..%..y
 803a167:	f893 5021 f020 00c0 b905 3040 71a0 f893     ..!P .....@0.q..
 803a177:	0026 2800 d006 3322 7119 7819 7c10 f361     &..(.."3.q.x.|a.
 803a187:	1086 7410 bd30 0000 0020 086b 0020 9c5a     ...t0... .k. .Z.
 803a197:	0020 a267 0020 ec65 0020 8867 e92d 47f0      .g. .e. .g.-..G
 803a1a7:	4681 460f 88c0 2119 4348 49fd 4690 fbb1     .F.F...!HC.I.F..
 803a1b7:	f6f0 b672 48fb 8985 f8b0 a4e0 b662 8804     ..r..H......b...
 803a1c7:	f7ff fa06 f899 2003 eba0 000a b280 4629     ....... ......)F
 803a1d7:	f04f 0c64 2a04 d008 fb00 f10c fbb1 f1f6     O.d..*..........
 803a1e7:	4429 fbb1 f3f4 fb04 1113 b28b 49ee 6809     )D...........I.h
 803a1f7:	f8b1 e010 7ec9 4470 b280 fb00 f00c fbb0     .....~pD........
 803a207:	f0f6 4428 fbb0 f5f4 fb04 0015 b280 3080     ..(D...........0
 803a217:	fbb0 f5f4 fb04 0015 0980 2590 b901 2580     ...........%...%
 803a227:	18e1 1b49 fb91 f3f4 fb04 1113 17cb eb01     ..I.............
 803a237:	6193 1189 2a04 d001 2a05 d104 6038 f8c8     .a...*...*..8`..
 803a247:	1000 e8bd 87f0 0080 6038 2003 eb00 0081     ........8`. ....
 803a257:	f8c8 0000 e7f5 e92d 5ff0 f7ff ff55 f000     ......-.._..U...
 803a267:	fb80 f7ff fe9c f7ff fedf f7fd fa79 f8df     ............y...
 803a277:	8338 4604 f8d8 0000 7b00 b180 b17c 48cb     8..F.....{..|..H
 803a287:	7981 f041 0110 7181 48c9 8104 48c7 f7fe     .yA....q.H...H..
 803a297:	fc2c 7861 2206 eb02 0151 7001 e004 48c3     ,.ax."..Q..p...H
 803a2a7:	7981 f021 0110 7181 f8df b308 2600 f89b     .y!....q.....&..
 803a2b7:	0020 f8df a304 f04f 0901 b380 f8ba 0003      .....O.........
 803a2c7:	f400 457c e047 fa95 f0a5 fab0 f480 fa09     ..|EG...........
 803a2d7:	f704 43bd f83b 0014 f7fb fbc1 b3d8 2300     ...C;..........#
 803a2e7:	4619 f89a e000 e00c eb0a 1201 1d52 f8b2     .F..........R...
 803a2f7:	c00c ea17 0f0c d003 7bd1 f3c1 0342 e003     .........{..B...
 803a307:	1c49 ebb1 1f1e dbef 4aac ea44 1103 5591     I........JD....U
 803a317:	f890 1025 1c76 297b d902 2100 e00d e01c     ..%.v.{)...!....
 803a327:	f8d8 1000 eb01 0344 8b9c f891 1040 2305     ......D.....@..#
 803a337:	2901 d000 2302 435c 0a21 5591 7901 8a80     .)...#\C!..U.y..
 803a347:	1dc9 08cc 1c76 f040 5100 1990 4622 f640     ....v.@..Q.."F@.
 803a357:	3347 4798 4426 2d00 d1b5 4898 2180 4f93     G3.G&D.-...H.!.O
 803a367:	5581 79b8 1c76 f040 0008 71b8 4638 f7fe     .U.yv.@....q8F..
 803a377:	fbca 7006 79b8 f020 0007 71b8 f89b 0020     ...p.y ....q.. .
 803a387:	b3f0 f8ba 0003 b3d8 498d 2000 7008 4638     .........I. .p8F
 803a397:	f7fe fbca 4604 f8ba 0003 f3c0 0609 e033     .....F........3.
 803a3a7:	4630 f7fe fb7f fa09 f100 438e f83b 0010     0F.........C;...
 803a3b7:	f7fb fb55 0005 d027 7968 f8d8 1000 eb01     ..U...'.hy......
 803a3c7:	0040 8b81 f5b1 7f00 db01 f240 11ff 4a7c     @.........@...|J
 803a3d7:	4628 f7fe fcc8 8821 f360 0108 8021 7969     (F....!.`...!.iy
 803a3e7:	7820 f361 1007 7020 78e9 b2c0 f361 0043      xa... p.x..a.C.
 803a3f7:	f804 0b02 79b8 f04f 5100 eb01 00f0 e000     .....yO..Q......
 803a407:	e004 ea4f 7070 71b8 2e00 d1c9 e8bd 5ff0     ..O.pp.q......._
 803a417:	4866 f7fe bbaf b530 4965 486a 8a0a 8a49     fH....0.eIjH..I.
 803a427:	7843 f042 5200 f041 5100 2b02 d11a 7940     CxB..RA..Q.+..@y
 803a437:	0600 d517 7990 2203 ebb2 1f90 d112 485a     .....y."......ZH
 803a447:	6800 7b82 b11a 684a 6800 4282 d10a 4b5a     .h.{..Jh.h.B..ZK
 803a457:	2000 781a e009 eb03 1400 f8d4 4005 680d     . .x.........@.h
 803a467:	42ac d101 2000 bd30 1c40 ebb0 1f12 dbf2     .B... 0.@.......
 803a477:	2001 bd30 4a53 eb00 0180 3a28 eb02 0141     . 0.SJ....(:..A.
 803a487:	4a4b ebc0 00c0 eb02 0040 8a00 f891 1029     KJ......@.....).
 803a497:	f040 5000 2902 d105 7980 ebb1 1f90 d101     @..P.)...y......
 803a4a7:	2001 4770 2000 4770 e92d 5ff0 4945 4606     . pG. pG-.._EI.F
 803a4b7:	eb00 0080 3928 eb01 0a40 493d ebc6 00c6     ....(9..@.=I....
 803a4c7:	eb01 0440 340e 8860 f10a 0a28 f040 5700     ..@..4`...(.@..W
 803a4d7:	4630 f000 f9f1 4605 4833 6800 7b40 b168     0F.....F3H.h@{h.
 803a4e7:	88a0 b158 79b9 0689 d508 f89a 1005 0609     ..X..y..........
 803a4f7:	d504 f040 5100 4630 f7fd ff06 2001 bf00     ..@..Q0F..... ..
 803a507:	b150 8920 b140 79b8 06c0 d505 f89a 0005     P. .@..y........
 803a517:	0640 d501 f7fd f9a4 79b8 0700 d403 89a8     @........y......
 803a527:	f36f 0009 81a8 f8df 908c f899 0020 f04f     o........... .O.
 803a537:	0801 b3a0 79b8 0700 d557 f89a 0005 0680     .....y..W.......
 803a547:	d553 8960 f040 5400 4638 f7fe fadc 7802     S.`.@..T8F.....x
 803a557:	89a8 f36f 0009 81a8 e042 1c64 280a d244     ..o.....B.d..(D.
 803a567:	f839 1010 b1d9 1e52 89ab fa08 fc00 f3cc     9.....R.........
 803a577:	0c09 ea43 030c 81ab f839 0010 fa08 f106     ..C.....9.......
 803a587:	f040 5000 f890 3026 430b f880 3026 7901     @..P..&0.C..&0.y
 803a597:	8b40 1dc9 08cb f040 5000 2100 e01d e024     @.....@..P.!..$.
 803a5a7:	eb0b 00c2 0040 2206 0020 9c5a 0020 8867     ....@.." .Z. .g.
 803a5b7:	0020 fe66 0020 5866 0020 ec65 0020 bc67      .f. .fX .e. .g.
 803a5c7:	0020 ae5a 0020 a466 f810 c001 f814 eb01      .Z. .f.........
 803a5d7:	ea0c 0c0e f800 c001 1c49 4299 dbf4 1ad2     ........I..B....
 803a5e7:	7820 2880 d001 2a00 dcb7 f899 0020 2800      x.(...*.... ..(
 803a5f7:	d02c 4638 f7fe fa98 2400 4682 46a3 e020     ,.8F.....$.F.F .
 803a607:	f81a 0014 0900 fa08 f600 f416 4f7c d017     ............|O..
 803a617:	f839 0010 f7fb fa23 b190 89a9 420e d002     9.....#......B..
 803a627:	f880 b025 e00c 4a37 f8b2 3003 421e d107     ..%...7J...0.B..
 803a637:	4331 81a9 f8b2 1003 4331 f8a2 1003 e7ef     1C......1C......
 803a647:	1c64 79b8 f3c0 0002 42a0 dcd9 e8bd 9ff0     d..y.....B......
 803a657:	e92d 41f0 4e2c f896 0020 2800 d017 2500     -..A,N.. ..(...%
 803a667:	462f f640 384f f836 0015 b168 f040 5400     /F@.O86...h.@..T
 803a677:	7920 1dc0 08c2 8b60 21ff f040 5000 47c0      y....`..!@..P.G
 803a687:	f814 0f26 7060 7027 1c6d 2d09 ddeb e8bd     ..&.`p'pm..-....
 803a697:	81f0 b5f0 4e1c f896 0020 2800 d031 2100     .....N.. ..(1..!
 803a6a7:	f836 0011 b330 f040 5000 8ac2 f890 3028     6...0.@..P....(0
 803a6b7:	f042 5200 b113 1e5b f880 3028 f890 3026     B..R..[...(0..&0
 803a6c7:	b1cb f890 4028 b91c f890 4027 439c d112     ....(@....'@.C..
 803a6d7:	7903 8b40 331f 095b f040 5400 2000 e007     .y@..3[.@..T. ..
 803a6e7:	eb04 0580 682d eb02 0780 43ed 603d 1c40     ....-h.....C=`@.
 803a6f7:	4298 dbf5 e002 2203 f880 2028 1c49 2909     .B....."..( I..)
 803a707:	ddce bdf0 0020 ec65 0020 5866 b570 4ca3     .... .e. .fXp..L
 803a717:	2260 7820 2100 f020 00f0 7020 1d60 f640     `" x.! ... p`.@.
 803a727:	354f 47a8 2208 f04f 31ff 489d 47a8 2000     O5.G."O..1.H.G. 
 803a737:	f8a4 0003 499a 2001 1e89 7008 bd70 b5f0     .....I. ...pp...
 803a747:	4997 4e96 1e89 7808 7048 4996 0842 7c48     .I.N...xHp.IB.H|
 803a757:	f8df c254 f362 0047 7448 2000 f8a6 0003     ..T.b.G.Ht. ....
 803a767:	4603 2701 e02b eb06 1103 f89c 0020 1d49     .F.'+....... .I.
 803a777:	b1f0 8988 f400 407c e018 fa90 f2a0 fab2     ......|@........
 803a787:	f282 fa07 f402 f83c 2012 43a0 f052 5200     ......<.. .CR..R
 803a797:	d00c f892 5025 2d80 d208 1c6d b2ed f882     ....%P.-..m.....
 803a7a7:	5025 2d80 d102 898a 43a2 818a 2800 d1e4     %P.-.....C...(..
 803a7b7:	f8b6 0003 8989 4308 f8a6 0003 1c5b 7830     .......C....[.0x
 803a7c7:	ebb3 1f10 dbcf bdf0 b5f0 4974 6802 780b     ..........tI.h.x
 803a7d7:	f023 030f 440b f8c3 2005 780b 6842 f023     #....D... .xBh#.
 803a7e7:	030f 440b f8c3 2009 780b 6882 f023 030f     ...D... .x.h#...
 803a7f7:	440b f8c3 200d 7b02 f3c2 0400 780a f022     .D... .{.....x".
 803a807:	020f 440a 7d13 f364 0300 7513 7b02 f3c2     ...D.}d....u.{..
 803a817:	0440 780a f022 020f 440a 7d13 f364 1304     @..x"....D.}d...
 803a827:	7513 780b 2200 f023 030f 440b f8a3 2011     .u.x."#....D... 
 803a837:	780b f023 030f 440b 74da 7b00 0780 d50c     .x#....D.t.{....
 803a847:	20c0 f8a1 0065 4857 7d82 f042 0280 7582     . ..e.WH.}B....u
 803a857:	4856 7802 f042 0220 7002 4d51 780b 1ead     VH.xB. ..pQM.x..
 803a867:	782a f023 030f f042 0001 43c0 440b fa90     *x#...B....C.D..
 803a877:	f0a0 7d1c fab0 f080 f360 0443 751c 2601     ...}....`.C..u.&
 803a887:	fa06 f300 4313 b2db 702b 780a 1caf 0914     .....C..+p.x....
 803a897:	543c 703c 4c46 2008 7660 eb06 1012 f360     <T<pFL. `v....`.
 803a8a7:	1207 4844 700a 6800 7bc0 ebb0 1f12 d802     ..DH.p.h.{......
 803a8b7:	f023 0001 7028 bdf0 4939 5608 2800 da01     #...(p..9I.V.(..
 803a8c7:	2000 4770 4935 eb01 1000 1d40 4770 e92d     . pG5I....@.pG-.
 803a8d7:	41f0 2201 4605 4082 4831 4c30 1e80 7801     .A.".F.@1H0L...x
 803a8e7:	f04f 36ff 4391 b2c9 f041 0101 7001 7820     O..6.C..A....p x
 803a8f7:	eb06 1110 f361 1007 7020 4628 f7ff ffdc     ....a... p(F....
 803a907:	4607 7820 f640 3347 f020 000f 1901 1d49     .F x@.G3 .....I.
 803a917:	2210 4638 4798 4822 7bfa 5d41 f3c2 0242     ."8F.G"H.{A]..B.
 803a927:	5481 5546 2100 4608 7822 e006 eb04 1300     .TFU.!.F"x......
 803a937:	7d1b 06db d500 1c49 1c40 ebb0 1f12 dbf5     .}....I.@.......
 803a947:	2900 d10c 2000 f8a4 0065 4816 7d81 f021     .)... ..e..H.}!.
 803a957:	0180 7581 4815 7801 f021 0120 7001 e8bd     ...u.H.x!. ..p..
 803a967:	81f0 480f 1e80 7800 4770 480d 1e80 7840     ...H...xpG.H..@x
 803a977:	fa90 f0a0 fab0 f080 4770 4909 1e89 7848     ........pG.I..Hx
 803a987:	fa90 f2a0 fab2 f382 2201 409a 4390 7048     .........".@.CHp
 803a997:	b2c0 2800 d000 2001 4770 0000 0020 ec65     ...(... pG.. .e.
 803a9a7:	0020 b15a 0020 a267 0020 5866 0020 a266      .Z. .g. .fX .f.
 803a9b7:	0020 086b 0020 9c5a e92d 4ff8 4681 b2c1      .k. .Z.-..O.F..
 803a9c7:	4e77 0c00 f04f 4480 2901 d013 2700 f04f     wN..O..D.)...'O.
 803a9d7:	0a03 f04f 0b04 f64f 78ff f106 0508 2904     ..O...O..x.....)
 803a9e7:	d05c 290c d02b 290d d115 f000 f95a 200a     \..)+..)....Z.. 
 803a9f7:	71a8 e050 6030 7802 2107 b16a f8b4 0600     .qP.0`.x.!j.....
 803aa07:	f000 0004 1c40 f8a4 0600 f884 1208 f884     ....@...........
 803aa17:	1209 f8a4 1144 e0b8 f8b4 2600 f002 0204     ....D......&....
 803aa27:	1c92 f8a4 2600 f884 1208 f884 1209 7840     .....&........@x
 803aa37:	b108 f884 1207 2006 f8a4 0144 e0a5 6831     ....... ..D...1h
 803aa47:	780a b13a 2005 f8a4 0144 806f 2002 8028     .x:.. ..D.o.. (.
 803aa57:	71a8 e016 1d09 f000 f962 6070 6831 78ca     .q......b.p`1h.x
 803aa67:	7889 f000 f8ac b148 6870 8801 8069 88c0     .x....H.ph..i...
 803aa77:	8028 f8a5 a004 f885 b006 e002 200d f000     (............ ..
 803aa87:	f886 f8a4 8624 f8a4 8626 8828 f8a4 0622     ....$...&.(...".
 803aa97:	2001 f8a4 061a 2000 e8bd 8ff8 4a40 79ab     . ..... ....@J.y
 803aaa7:	3208 8891 f04f 0c49 1e48 ea4c 4202 b280     .2..O.I.H.L..B..
 803aab7:	9200 2b0b d269 e8df f003 6868 1306 6836     ...+i.....hh..6h
 803aac7:	6868 4c68 0063 f8b4 061e 2800 d05d 2019     hhhLc......(].. 
 803aad7:	80a8 f64f 70f7 f8a4 0618 f885 a006 e054     ..O..p........T.
 803aae7:	80a8 2900 d151 f8b4 0618 0700 d419 f8b4     ...)Q...........
 803aaf7:	061e 2103 f000 f900 8068 6831 b280 1d09     ...!....h.1h....
 803ab07:	f000 f90d 6070 8869 b159 8802 4291 d108     ....p`i.Y....B..
 803ab17:	f8a4 7618 f8a4 862c 88c0 8028 f8a4 0622     ...v..,...(...".
 803ab27:	e012 200d e029 80a8 b151 2901 d12d f8a4     ... )...Q..)-...
 803ab37:	b144 f8b4 0800 f040 0001 f8a4 0800 e024     D.....@.......$.
 803ab47:	f8a4 7618 f8a4 862c 9800 f7fa fff5 2009     ...v..,........ 
 803ab57:	e013 f8b4 061e 2104 f000 f8ce 8869 4288     .......!....i..B
 803ab67:	d10a f8b4 062c 2104 f000 f8c6 8869 4288     ....,..!....i..B
 803ab77:	d102 f8b4 0618 b140 2001 f000 f808 e004     ......@.. ......
 803ab87:	f000 f8a7 b108 2000 e7f7 4648 e784 4904     ....... ..HF...I
 803ab97:	3108 7188 210e ea41 4000 f7fa bfcd 0000     .1.q.!A..@......
 803aba7:	0020 bc5a 2219 fbb0 f2f2 4962 e002 4282      .Z.."....bI...B
 803abb7:	d003 1c89 8808 2800 d1f9 8808 4770 b5f0     .......(....pG..
 803abc7:	4603 8800 2519 460c 4616 4368 f7ff ffea     .F...%.F.FhC....
 803abd7:	2800 d065 8818 07aa f5a0 61c0 394b d10c     .(e........aK9..
 803abe7:	2060 f8a2 080a f640 60bf f8a2 0808 8818     ` ....@..`......
 803abf7:	8859 4348 4368 4950 e01f f240 11b9 fbb0     Y.HChCPI..@.....
 803ac07:	f7f1 fb01 0017 b960 205a f8a2 080a f241     ......`.Z ....A.
 803ac17:	4046 f8a2 0808 8818 8859 4348 4368 4947     F@......Y.HChCGI
 803ac27:	e00b 2062 f8a2 080a f241 3075 f8a2 0808     ..b ....A.u0....
 803ac37:	8818 8859 4348 4942 4368 fbb1 f0f0 f8a2     ..Y.HCBIhC......
 803ac47:	0804 f8b2 0804 8899 fbb0 f0f1 f8a2 0802     ................
 803ac57:	8859 2001 b104 2000 1a09 1c60 fb91 f0f0     Y.. ... ..`.....
 803ac67:	f8a2 0806 00f0 ea40 0044 f040 00f0 f8a2     ......@.D.@.....
 803ac77:	0800 f44f 3180 f8d1 00ac 0e00 d009 f891     ..O..1..........
 803ac87:	00ab 2802 d305 28ff d003 f891 01a8 0040     ...(...(......@.
 803ac97:	e000 200e f8a2 0a68 201f f8a2 0a66 2001     ... ..h.. ..f.. 
 803aca7:	bdf0 4828 f8b0 16bc f021 0101 f8a0 16bc     ..(H....!.......
 803acb7:	2200 8002 f64f 71ff f8a0 14e0 f8a0 14e2     ."..O..q........
 803acc7:	f200 40d4 8042 2101 8041 f64f 71f7 8001     ...@B..!A.O..q..
 803acd7:	4770 f04f 4080 f8b0 1618 0709 d50a 2102     pGO..@.........!
 803ace7:	f8a0 1144 2101 f8a0 1a68 2100 f8a0 161a     ..D..!..h..!....
 803acf7:	2001 4770 2000 4770 b530 4a0e 4c12 e009     . pG. pG0..J.L..
 803ad07:	fbb4 f3f3 b29b 1a5d 4285 dc02 440b 4283     ......]..B...D.B
 803ad17:	da03 1c92 8813 2b00 d1f2 8810 bd30 4602     .......+....0..F
 803ad27:	4608 e002 4291 d003 3008 8801 2900 d1f9     .F...B...0...)..
 803ad37:	4770 0000 0000 88f1 9a08 008a 1308 0030     pG............0.
 803ad47:	ca08 0000 0040 4401 0e00 00a6 b430 4cc2     ....@..D....0..L
 803ad57:	2000 79a2 f104 0112 2304 7909 2a01 d00f     . .y.....#.y.*..
 803ad67:	2a02 d012 2a0c d102 4618 b901 2003 7c61     .*...*...F... a|
 803ad77:	b1c9 49ba 6809 79c9 07ca d00b 2005 e012     ...I.h.y..... ..
 803ad87:	4618 2900 d1f3 2001 e7f1 4618 2900 d1ee     .F.)... ...F.)..
 803ad97:	2002 e7ec 078a d502 f440 60a0 e003 0749     . ......@..`..I.
 803ada7:	d501 0600 0c00 2128 bc30 ea41 4000 f7fa     ......(!0.A..@..
 803adb7:	bec3 b570 4da8 2601 4629 7968 78c9 2400     ..p..M.&)Fhy.x.$
 803adc7:	b110 b951 4630 e005 b139 7928 b928 7c28     ..Q.0F..9.(y(.(|
 803add7:	b918 4620 70e8 f7fc f876 7ae8 2800 d118     .. F.p..v..z.(..
 803ade7:	7c28 2800 d115 7a28 4621 b110 7aa8 b100     (|.(..(z!F...z..
 803adf7:	2101 7928 796a 4290 d00c 712a b2d0 b108     .!(yjy.B..*q....
 803ae07:	4997 e000 2100 2017 ea40 4001 f7fa fe94     .I...!. @..@....
 803ae17:	742e bd70 b111 7a68 b900 2401 79e8 4284     .tp...hz...$.y.B
 803ae27:	d00b 71e9 b109 2002 e000 2000 2110 ea41     ...q... ... .!A.
 803ae37:	3000 f7fa fe81 72ee bd70 78a8 2800 d1fb     .0.....rp..x.(..
 803ae47:	e8bd 4070 4887 f7fa be77 e92d 47f0 4604     ..p@.H..w.-..G.F
 803ae57:	f8df 9204 f8df a204 2711 b2c0 ea4f 4c14     .........'..O..L
 803ae67:	f109 0912 2600 4d7c f8da 2000 f00c 01ff     .....&|M... ....
 803ae77:	f3c4 3303 f04f 0801 ea47 4709 2826 d07d     ...3O...G..G&(}.
 803ae87:	dc25 2812 d07b dc15 2801 d040 2803 d065     %..({....(@..(e.
 803ae97:	280e d10e f8c9 6007 2009 f889 8009 ebb0     .(.....`. ......
 803aea7:	4f14 d001 f04f 0800 f889 8005 4638 f7fa     .O..O.......8F..
 803aeb7:	fe7c e0be 2816 d039 2823 d1fa 6810 ea00     |....(9.#(...h..
 803aec7:	3014 f7fd fdc7 2806 db73 2001 e0b5 2845     .0.....(s.. ..E(
 803aed7:	d070 dc0f 282d d021 283e d079 2844 d1e8     p...-(!.>(y.D(..
 803aee7:	f8c9 6007 f889 8008 f889 1004 b1c1 f9b2     ...`............
 803aef7:	0004 e016 2849 d022 284c d1da 2b00 d071     ....I(".L(...+q.
 803af07:	2b01 d072 2b02 d101 f885 8009 e08f f8ca     .+r..+..........
 803af17:	c000 f885 8003 f885 800a e08a 7469 e00b     ............it..
 803af27:	2000 8028 4638 f7fa fe40 e005 f414 4f70     . (.8F..@.....pO
 803af37:	d17f 802e f889 6004 f7ff ff08 e079 f04f     .......`....y.O.
 803af47:	5000 f8c9 6007 ea40 4014 f889 8007 8841     .P...`@..@....A.
 803af57:	f8a9 1000 8800 f8a9 0002 e7a7 f9b5 0000     ................
 803af67:	2800 dd11 1e40 b200 8028 b968 f8c9 6007     .(..@...(.h....`
 803af77:	f889 8008 f889 6004 4638 e001 e039 e036     .......`8F..9.6.
 803af87:	f7fa fe13 f7ff fee2 79a8 2802 d214 68e8     .........y.(...h
 803af97:	1c40 60e8 d001 68e8 e002 f04f 30ff 60e8     @..`...h..O..0.`
 803afa7:	f8da 1000 6889 4288 d143 482f f7fa fdc4     .....h.BC./H....
 803afb7:	e03f e041 e036 e00b f8da 0000 6880 b128     ?.A.6........h(.
 803afc7:	68e9 4281 d302 4829 f7fa fdb6 60ee e030     .h.B..)H.....`0.
 803afd7:	ebb8 4f14 d101 2001 e000 2000 7168 e026     ...O... ... hq&.
 803afe7:	e000 e002 72ee 726e e021 742e e01f 71ab     .....rnr!..t...q
 803aff7:	e7a2 70a9 b921 481e f7fa fdd7 722e e003     ...p!..H.....r..
 803b007:	7990 b108 f885 8008 f7ff fed3 78a9 4640     .y...........x@F
 803b017:	2902 d900 2000 f889 0006 f8c9 6007 f889     .)... .......`..
 803b027:	800a e743 7990 b920 78a8 b110 7229 f7ff     ..C..y ..x..)r..
 803b037:	fec0 4620 e8bd 87f0 2000 72a8 b2c0 2800     .. F..... .r...(
 803b047:	d0f5 0b20 0300 f040 0022 f7fa fd75 e7ee     .. ...@."...u...
 803b057:	4801 68c0 4770 0000 0020 306b 0020 cc5a     .H.hpG.. .k0 .Z.
 803b067:	0020 bc5c 0400 2400 0300 2c10 0500 2c10      .\....$...,...,
 803b077:	0400 2410 faff e5f5 c5d5 a5b5 8595 6575     ...$..........ue
 803b087:	4555 2535 0515 0000 0000 e70d 0000 ec0b     UE5%............
 803b097:	0000 4c09 0000 0000 ffff a7f8 ffff eff2     ...L............
 803b0a7:	ffff c3ee ffff 46e8 ffff fae0 ffff 0bdc     .......F........
 803b0b7:	ffff fed5 ffff 6acf ffff 82c7 ffff 9abe     .......j........
 803b0c7:	ffff 97b5 ffff 7daf ffff 9ca7 ffff 22a0     .......}......."
 803b0d7:	0f20 805e 1120 220e 1820 8920 1820 f8b9      .^. .." . . ...
 803b0e7:	0020 0020 0000 0d0a 0000 000d ff01 0528      . ...........(.
 803b0f7:	183f 0100 b000 32ff 28d0 7801 03b8 ff89     ?......2.(.x....
 803b107:	3800 8813 0028 f9cf 27ff 2708 9019 2808     .8..(....'.'...(
 803b117:	ff8b 684b 1028 3a15 0803 f0ff 2f00 39d0     ..Kh(..:...../.9
 803b127:	0310 fb21 b87e 2100 8e18 e0b8 eaa9 1b00     ..!.~..!........
 803b137:	0069 861b 1b08 0339 ff98 3f00 0302 7e80     i.....9....?...~
 803b147:	28b8 01ff b972 3800 9808 df09 1108 6c18     .(..r..8.......l
 803b157:	08a8 f829 ff00 0439 1428 9e15 033f 00fe     ..)...9.(...?...
 803b167:	9605 0328 b33f 0664 90ff 9002 9003 9404     ..(.?.d.........
 803b177:	fe05 4300 6577 e006 0d30 ff76 8613 b627     ...Cwe..0.v...'.
 803b187:	c627 8611 03ff 6468 0d06 1378 ff88 8960     '.....hd..x...`.
 803b197:	a900 9208 b926 09b5 0708 0893 2623 10c9     ....&.......#&..
 803b1a7:	940b 00ff 3628 90e5 2805 ff60 8998 9603     ....(6...(`.....
 803b1b7:	0128 06e0 90ff 0c08 3c32 9012 ff15 3203     (.......2<.....2
 803b1c7:	2628 989b 0928 99ff 0c89 3c42 9007 df25     (&..(.....B<..%.
 803b1d7:	4203 2628 109c 030f bd96 0029 2827 4d44     .B(&......).'(DM
 803b1e7:	0028 3903 28ef 4f44 0058 6603 6212 0efb     (..9.(DOX..f.b..
 803b1f7:	0052 257f 4528 a24f 29ef ec00 0030 459f     R..%(EO..)..0..E
 803b207:	a247 28ff 438b 9169 6643 ff28 8309 0890     G..(.Ci.Cf(.....
 803b217:	8369 b87e 0ebf 2832 c000 0072 b6d5 00fe     i.~...2(..r.....
 803b227:	68f7 9809 6808 0029 e0ff 11a8 6c28 1218     .h...h).....(l..
 803b237:	ff28 1811 2228 a8ef 8478 03fd 0900 18e1     (...("..x.......
 803b247:	485c 8403 90ff 09e8 0e38 9084 ff88 8208     \H......8.......
 803b257:	320d 380d 4812 08ff 9082 f005 3ef4 ff0a     .2.8.H.......>..
 803b267:	4591 4866 8509 1890 0dff 1258 0818 0e84     .EfH......X.....
 803b277:	ff54 046c 2890 8468 426e 0eff f252 3c12     T.l..(h.nB..R..<
 803b287:	1204 ff12 15e0 fc3f 2866 7991 09bf 2789     ......?.f(.y...'
 803b297:	66f9 0043 8361 09fb 0053 839b da32 db32     .fC.a...S...2.2.
 803b2a7:	32bf 03d1 0d47 0057 1713 12ff 9117 2708     .2..G.W........'
 803b2b7:	03e8 ff86 8890 3868 8609 0894 00fe 2813     ......h8.......(
 803b2c7:	d827 0864 0990 27ff 2789 2799 65a9 bf08     '.d....'.'.'.e..
 803b2d7:	30e0 21e0 8953 c300 ff73 380d 8267 4990     .0.!S...s..8g..I
 803b2e7:	926a 00fe 1223 8813 8903 290d 6cff 0fb9     j...#......).l..
 803b2f7:	7f69 00ba ff3a 690d 290f 9809 ab03 26ff     i...:..i.).....&
 803b307:	5f0a 098a 26ab ff1a 8a5f b927 c927 290d     ._...&.._.'.'..)
 803b317:	0fdf 9169 0908 7d01 8952 32ff 00d2 65d1     ..i....}R..2...e
 803b327:	9306 dff2 30e0 6803 020d 600f af88 0000     .....0.h...`....
 803b337:	b809 5500 022b a81f 0eff 6cb8 6eb8 0e48     ...U+......l.nH.
 803b347:	ff58 d100 866d 4e3e d100 3aff 5845 0d48     X...m.>N...:EXH.
 803b357:	0858 ff78 b80d 09f0 0e53 023b 00fb 00b8     X.x.....S.;.....
 803b367:	3b13 0664 8909 107a 9a63 6310 659a 6106     .;d...z.c..c.e.a
 803b377:	4500 00ff 3528 2662 f0a8 ff08 0738 0890     .E..(5b&....8...
 803b387:	6853 c100 3afb 0027 2503 d62f d22f 27ff     Sh...:'..%/./..'
 803b397:	27a8 2788 2f98 ffdb ba6c ba8f da2f 1003     .'.'./..l.../...
 803b3a7:	09fb 0020 30b9 5053 30e0 00fc 0229 4387     .. ..0SP.0..)..C
 803b3b7:	5329 5319 ff34 3553 f826 2853 4890 27ff     )S.S4.S5&.S(.H.'
 803b3c7:	53d8 5316 0023 ffd2 2878 a626 0491 6409     .S.S#...x(&....d
 803b3d7:	52ff 0048 00d2 0302 fe29 4908 db2f da2f     .RH.....)..I/./.
 803b3e7:	0090 d500 0002 f885 0300 00f6 833b 2d52     ............;.R-
 803b3f7:	0938 3f13 02aa 057d 8500 0110 63ff 59b0     8..?..}......c.Y
 803b407:	50bc 48c7 ffb7 7541 ec3a 0b35 bf2f 2aff     .P.H..Au:.5./..*
 803b417:	26fb 22b1 1fd4 ff5a 391c 6819 df16 9614     .&."..Z..9.h....
 803b427:	12ff 1088 0faf 0d04 ff85 2b0c f40a dc09     ...........+....
 803b437:	e008 07ff 07fe 0631 057a ffd4 3f05 b904     ......1.z....?..
 803b447:	4004 d403 03ff 0372 021a 02cb ff83 4302     .@....r........C
 803b457:	0902 d501 a601 01ff 017c 0156 0134 ff15     ........|.V.4...
 803b467:	fa00 e100 ca00 b600 00ff 00a4 0094 0085     ................
 803b477:	ff78 6c00 6100 5700 4f00 00ff 0047 0040     x..l.a.W.O..G.@.
 803b487:	0039 ff34 2e00 2a00 2600 2200 09fe 7edb     9.4....*.&."...~
 803b497:	7dba 32b6 32dc d1ff 4ae2 a464 a465 ffe0     .}.2.2...Jd.e...
 803b4a7:	643a 65a5 32a5 03d6 01ff 46e0 6978 da32     :d.e.2.....Fxi2.
 803b4b7:	df94 2807 9625 0022 c303 ff27 0078 2739     ...(%."...'.x.9'
 803b4c7:	90b9 9009 8cff 1b90 0a94 1228 7f15 2f9d     ..........(..../
 803b4d7:	62da 63a5 01a5 ff23 623a 63a4 2fa4 29d6     .b.c..#.:b.c./.)
 803b4e7:	005f 4ae2 1792 c702 0000 bf3d 9206 2815     _..J......=....(
 803b4f7:	9025 3900 dd92 0023 442b 9ae0 1908 d0eb     %..9..#.+D......
 803b507:	0052 2619 0f08 3500 009a 2603 f50a e20f     R..&...5...&....
 803b517:	32aa 38d6 187b 2879 0875 ff73 da32 0c90     .2.8{.y(u.s.2...
 803b527:	7927 0b92 10f2 9975 7558 7300 2faa e1d6     'y....u.Xu.s./..
 803b537:	baab 0091 e55d 5d10 5091 2977 00df bae1     ....]..].Pw)....
 803b547:	2ae1 1d08 26e0 2fff 29d0 e600 2891 6b24     .*...&./.)...($k
 803b557:	629f 2100 08e3 2f1d 09dc eea9 1314 3f01     .b.!.../.......?
 803b567:	00a9 d6ef 9803 13fb 0289 c88b a964 a965     ............d.e.
 803b577:	00ee ab8f ab65 0500 65ac ffac da32 9a03     ....e....e..2...
 803b587:	6200 8903 26ff 09b6 5fb9 0896 efa6 8a03     .b...&..._......
 803b597:	6803 0d00 09c6 eec9 0d00 03b6 008b 6c1b     .h.............l
 803b5a7:	6300 37ef 0307 00a9 ac9f ac63 10ee ab9f     .c.7......c.....
 803b5b7:	ab63 0710 63a9 ffa9 d62f 0200 182f 3800     c....c../.../..8
 803b5c7:	03ff 0889 1348 0318 ff94 043f 1864 1865     ....H.....?.d.e.
 803b5d7:	31e0 f1bf 3e17 35e4 1057 610b 0cff 3e57     .1...>.5W..a..W>
 803b5e7:	34de 08f7 bf86 1613 b66c 0633 1f18 ff3f     .4......l.3...?.
 803b5f7:	6cd7 11b6 6286 6306 06df 60e0 d13f 0710     .l...b.c...`?...
 803b607:	3fc0 cdff 1964 1965 31e0 ff90 2617 51b6     .?..d.e..1...&.Q
 803b617:	1346 5186 56ff 5603 6200 8cd0 ff39 0803     F..Q.V.V.b..9...
 803b627:	1398 5118 038a 45ff 7426 7427 4608 ff13     ...Q...E&t't.F..
 803b637:	0066 3663 36f7 00ab 02ad 4b08 c80f 4d00     f.c6.6.....K...M
 803b647:	10ee 3041 3fff 7cf5 28c0 7001 ffa1 c271     ..A0.?.|.(.p..q.
 803b657:	c87d c972 9858 7ebf 08a3 0083 0102 ba11     }.r.X..~........
 803b667:	70ef 71b4 13b5 dcf1 11d0 39ff 900d 2727     .p.q.......9..''
 803b677:	9007 ff17 1128 8698 7828 8894 93ff 2889     ....(...(x.....(
 803b687:	4d4c e089 ef19 0d3f 3790 1700 9007 7f06     LM....?..7......
 803b697:	6428 8894 6528 1094 aa17 e900 00f9 d907     (d..(e..........
 803b6a7:	0300 0078 f80b 00fe c807 21d0 0738 a228     ..x........!8.(.
 803b6b7:	40ff d008 3818 9103 be86 4900 4d4c 08a6     .@...8.....ILM..
 803b6c7:	0076 f605 ffbf 39f5 280a 0026 263d 93ff     v......9.(&.=&..
 803b6d7:	0966 1368 2818 ef3f 08e0 023f ed05 4d4c     f.h..(?...?...LM
 803b6e7:	ffb8 0726 7458 3408 5603 587f 0876 2863     ..&.Xt.4.V.Xv.c(
 803b6f7:	7301 4b09 1cff ba7c 0690 7627 df90 9485     .s.K..|...'v....
 803b707:	7807 0548 24db ff11 3f88 7809 0039 0839     .xH..$...?.x9.9.
 803b717:	23ff 1900 1813 1913 ff08 6c98 06f8 62c8     .#.........l...b
 803b727:	6308 04fe 677f 6a89 9095 0019 a8ff 786c     .c...g.j......lx
 803b737:	8668 8951 f536 0087 153f e919 0390 1328     h.Q.6...?.....(.
 803b747:	156f 907b 0823 3f05 087c afef b472 0990     o.{.#..?|...r...
 803b757:	a500 200b 07a5 91bf 2858 4f4d 0018 10fb     ... ....X(MO....
 803b767:	3feb 0007 1909 0900 280b 7b13 5998 0b00     .?.......(.{.Y..
 803b777:	2829 9488 1d08 387f 4408 0b3f 6228 0b10     )(.....8.D?.(b..
 803b787:	28f7 6328 1318 3990 9458 08fe 08a1 9434     .((c...9X.....4.
 803b797:	6407 6505 05f5 b704 3858 0083 0015 bf00     .d.e....X8......
 803b7a7:	4588 2408 3737 8118 ff28 3f00 908e 0800     .E.$77..(..?....
 803b7b7:	083a 3bff 7226 6103 a87a ff0c 3d82 780e     :..;&r.az....=.x
 803b7c7:	0ca8 3d81 0bff 0228 b878 18e0 df28 f001     ...=..(.x...(...
 803b7d7:	3c08 0006 18b7 fd90 1110 0215 b888 8212     .<..............
 803b7e7:	ff12 0981 093a 003b 1802 0cff ca7a cb7b     ....:.;.....z.{.
 803b7f7:	4028 5f44 0328 1287 0647 f71b 990d 11ff     (@D_(...G.......
 803b807:	9017 0619 2889 ffa2 0948 8812 58f8 0238     .....(..H....X8.
 803b817:	90ef 7007 00c8 46d1 f7d0 38ff 3241 70d7     ...p...F...8A2.p
 803b827:	ffb8 fff8 3838 ff2b 0e3f 10d0 38ff 7306     ....88+.?....8.s
 803b837:	f0b8 3948 ef03 0890 b88e 6f00 28b9 bf02     ..H9.......o.(..
 803b847:	c871 19f0 043d 6708 7f81 75c8 7fb4 0ec9     q...=..g...u....
 803b857:	0049 ff55 0419 2898 7404 03b4 49ff 7912     I.U....(.t...I.y
 803b867:	890c 1038 ffc7 11f4 0478 2884 8404 b4ff     ..8.....x..(....
 803b877:	04d8 0938 0128 ff7a 74b0 90b9 e008 1279     ..8.(.z..t....y.
 803b887:	39df 0831 f937 4303 d810 04ff 0739 0228     .91.7..C....9.(.
 803b897:	c770 ff6a 2857 9828 3fe0 e262 abf7 d72f     p.j.W((..?b.../.
 803b8a7:	9908 c139 5125 03ca 085f 8900 0818 006b     ..9.%Q.._.....k.
 803b8b7:	18a3 efd0 3848 cf04 7d00 c881 7f32 72d7     ....H8...}..2..r
 803b8c7:	ffb4 38f4 0008 9733 3f20 0048 35a1 4b08     ...8..3. ?H..5.K
 803b8d7:	3b08 f737 2537 0150 ec29 0328 ff75 90b9     .;7.7%P.).(.u...
 803b8e7:	7e48 5cc3 e198 03ff 8308 3978 9168 ff88     H~.\......x9h...
 803b8f7:	7931 9138 5e09 9f29 01ff 815e 1908 3989     1y8..^)...^....9
 803b907:	ff00 3202 7edc 08cc 788c c87d 0702 8838     ...2.~...x}...8.
 803b917:	2fc8 28dc fd11 0079 8911 78c8 13c9 ff88     ./.(..y....x....
 803b927:	8813 8908 c988 8913 1367 3889 af07 5b09     ........g..8...[
 803b937:	c889 2918 0dfe 2889 28e8 28ec 22ea eef7     ...)...(.(.(."..
 803b947:	f828 0b00 28b8 28d6 d4ff 0820 7a23 b373     (....(.(.. .#zs.
 803b957:	ff73 03c8 2839 e22a 7069 99ff 0128 b179     s...9(*.ip..(.y.
 803b967:	8958 ff08 1191 0813 7830 7c08 c0f7 6800     X.......0x.|...h
 803b977:	1702 2888 4c53 08fd 3701 4c53 2818 9133     ...(SL...7SL.(3.
 803b987:	08fa 280d bd00 3fb8 3f05 fe82 0700 3fca     ...(...?.?.....?
 803b997:	9f01 9ff3 faf4 0900 0082 79d7 033f 083f     ...........y?.?.
 803b9a7:	3fdf 9f07 9003 1110 8b3f 3fff 9001 9608     .?......?..?....
 803b9b7:	3307 bf08 f737 853f c573 5101 ffb6 5803     .3..7.?.s..Q...X
 803b9c7:	1512 5608 1528 15ff 7000 d069 3918 ff04     ...V(....pi..9..
 803b9d7:	09af 4906 033f f9a0 066f 8039 0069 0f15     ...I?...o.9.i...
 803b9e7:	0a00 dd0b 0252 0475 7899 0700 3f38 0897     ....R.u..x..8?..
 803b9f7:	9895 0f10 1806 300f 3845 08fb 0168 75c1     .......0E8..h..u
 803ba07:	0998 590e 10fe 874d 0000 9704 8780 18fe     ...Y..M.........
 803ba17:	2843 9829 9067 9024 25df 0691 0864 af07     C().g.$..%..d...
 803ba27:	1360 07de 3315 3718 0da6 3741 cf65 a0e5     `....3.7..A7e...
 803ba37:	3437 6700 cf27 1990 11bf 2779 90d9 0023     74.g'.....y'..#.
 803ba47:	452f 90cf 9046 18a7 0331 9761 fd37 05b6     /E..F...1.a.7...
 803ba57:	805b 0e3f 5537 77e2 3701 0124 134f 0239     [.?.7U.w.7$.O.9.
 803ba67:	3700 00fa eb09 670d 3f01 90e8 bfa9 7909     .7.....g.?.....y
 803ba77:	3953 4690 3318 ff0f 5398 00e8 37d1 3fa6     S9.F.3...S...7.?
 803ba87:	e87d 2500 1b18 a428 000e ff05 2b48 3ffe     }..%..(.....H+.?
 803ba97:	9099 2910 fadf 604b 0090 0500 2970 fad7     ...)..K`....p)..
 803baa7:	5043 0300 0271 03a5 a7d0 3811 00f9 082b     CP..q......8..+.
 803bab7:	6017 a501 ff80 c080 2040 0400 0404 01ff     .`......@ ......
 803bac7:	2801 902d 3f0d 00de 1300 0118 00f0 01f0     .(-..?..........
 803bad7:	01f0 01f0 01f0 01f0 f000 f001 f001 f001     ................
 803bae7:	f001 f001 f001 f001 0001 01f0 01f0 01f0     ................
 803baf7:	01f0 01f0 01f0 01f0 0138 ffff 00ff ff00     ........8.......
 803bb07:	ffff ffff 0004 9800 054d 0005 9800 008b     ........M.......
 803bb17:	000a 9800 003d 000c 9900 027b 000d 9900     ....=.....{.....
 803bb27:	029f 000e 9800 0427 0010 9700 00a5 0011     ......'.........
 803bb37:	9700 00b5 0016 9900 0139 0017 9900 0419     ........9.......
 803bb47:	0019 9700 0157 001a 9700 023b 001c 9800     ....W.....;.....
 803bb57:	01cf 001d 9800 00ed 001e 9700 001b 001f     ................
 803bb67:	9700 0201 0024 9700 01c1 0028 9700 05d3     ....$.....(.....
 803bb77:	0029 9800 000b 002a 9900 005d 002b 9700     ).....*...].+...
 803bb87:	016b 002c 9700 0587 002e 9900 01b5 0c04     k.,.............
 803bb97:	341c 684c 9880 a8a4 b0ac b8b4 bcbc ffff     .4Lh............
 803bba7:	0020 806d 0000 f20e 0000 8012 ff01 d432      .m...........2.
 803bbb7:	eb28 504d 6d1f 1fff 2825 9fff 03f6 ff63     (.MP.m..%(....c.
 803bbc7:	017b 8028 01d0 1939 7baf 7900 0007 8019     {.(...9..{.y....
 803bbd7:	0300 fb67 0178 0500 7691 2814 fffd 9045     ..g.x....v.(..E.
 803bbe7:	10a0 501b 0092 1bff 2240 3936 ce14 fffe     ...P....@"69....
 803bbf7:	3018 70d0 0c39 0ea5 3fff 1ff9 a517 ce0e     .0.p9....?......
 803bc07:	fffe 5823 fd39 0ea1 2090 28af 3f01 0032     ..#X9.... .(.?2.
 803bc17:	d007 0700 ff1f 7090 3828 4115 ff2b 71ff     .......p(8.A+..q
 803bc27:	2b70 72ff 1171 ff80 0104 0f28 f1cf 611b     p+.rq.....(....a
 803bc37:	12ff 2980 40fd 2804 ff00 00cb 400c 0438     ...).@.(.....@8.
 803bc47:	5091 00fa 092b 6700 2b77 77ff ff75 0490     .P..+..gw+.wu...
 803bc57:	d629 654b 05d2 38df e002 d114 0510 85d0     ).Ke...8........
 803bc67:	08fe dc05 3905 e002 0324 50ff 0028 70c0     .....9..$..P(..p
 803bc77:	0008 5f08 0340 e001 00a1 a133 6108 90fb     ..._@.....3..a..
 803bc87:	0007 3605 0604 06f0 38ff 9004 2880 3f00     ...6.....8...(.?
 803bc97:	bfe2 eb28 9145 4690 0500 ff62 1076 22e0     ..(.E..F..b.v.."
 803bca7:	40d0 1038 9fff 90f4 2d07 2d23 ff10 3406     .@8......-#-...4
 803bcb7:	3005 0704 b637 ffbf 38f4 f006 0007 f02f     .0..7....8..../.
 803bcc7:	00fa ca2f 2900 2d60 2d01 cf02 8114 2104     ../..)`-.-.....!
 803bcd7:	a308 0f00 09a0 00f6 45fb 0070 0589 022d     .........Ep...-.
 803bce7:	1f29 e000 0931 0021 308f 000b d695 0b30     )...1.!..0....0.
 803bcf7:	5203 9500 0072 120b ff3e 2d09 2d03 1404     .R..r...>..-.-..
 803bd07:	0483 43ff 0128 f3cf 3109 f53f 00f6 1115     ...C(....1?.....
 803bd17:	9520 1f97 906c 10ff f529 6049 3b28 dd15      ...l...).I`(;..
 803bd27:	00b6 925b 208c 0500 7552 20bf 0028 00c1     ..[.. ..Ru. (...
 803bd37:	0885 740b 00ea 136d 1908 087a 830d 412d     ...t..m...z...-A
 803bd47:	7aeb 0037 77d9 2508 0090 ff75 f021 3906     .z7..w.%..u.!..9
 803bd57:	9802 0400 01eb 0885 1489 2708 0128 4a72     ...........'(.rJ
 803bd67:	2920 707c 9429 2910 a700 1815 d529 2073      )|p)..)....).s 
 803bd77:	7d29 2970 1092 2129 ea18 c500 0075 8017     )}p)..)!....u...
 803bd87:	b300 3e15 ef37 412d 422d 0f09 007e fff0     ...>7.-A-B..~...
 803bd97:	3900 3f02 0325 1212 c2bf 2008 2008 1878     .9.?%...... . x.
 803bda7:	1d0f 28ff 7404 2802 c300 ff02 02f2 0438     ...(.t.(......8.
 803bdb7:	02f3 0238 3faf 7314 0003 9223 0b09 fd0c     ..8..?.s..#.....
 803bdc7:	0023 0c0f 2208 7028 5fe5 78c2 f022 0002     #...."(p._.x"...
 803bdd7:	052f 1101 f17f 7200 d03f 1003 0900 f07f     /......r?.......
 803bde7:	0790 7191 d332 bd09 2fbf 3fd3 90c6 4810     ...q2..../.?...H
 803bdf7:	900f 20df 103f 0190 2901 9061 01ff 611b     ... ?....)a....a
 803be07:	0f44 ff03 dd1f 026c 1161 0338 6f02 a1fc     D.....l.a.8..o..
 803be17:	0eff 6d1f 2521 fece df29 43fa f084 1014     ...m!%..)..C....
 803be27:	fa13 ffa1 280e 4602 cf14 28d4 02ff 144e     .....(.F...(..N.
 803be37:	d42f 0200 5f00 7100 711e 001e 2405 0508     /...._.q.q...$..
 803be47:	00bf 2800 9d70 0061 0203 09ff 1321 2811     ...(p.a.....!..(
 803be57:	a03f ff01 e128 814e 3090 00f0 38ff 9131     ?...(.N..0...81.
 803be67:	6a01 0901 fb10 1203 bd09 0928 02a0 ff1b     .j........(.....
 803be77:	9252 1b02 f842 3d07 02d7 0790 e502 0832     R...B..=......2.
 803be87:	f0cd bf32 0639 1628 6192 3508 f93f 0218     ..2.9.(..a.5?...
 803be97:	08ff f273 0ea1 2218 28ff d001 3802 1ffd     ..s....".(...8..
 803bea7:	ff5a 7231 2317 2616 8137 3feb 02d7 83bd     Z.1r.#.&7..?....
 803beb7:	2b28 2190 ff3f a1ef 290e 43d6 0080 02fd     (+.!?....).C....
 803bec7:	630b 106a 0109 d332 32af 03d1 0063 0379     .cj...2..2..c.y.
 803bed7:	eb10 bad0 0900 1205 41bf 2694 c72a ff2f     .........A.&*./.
 803bee7:	00d3 9202 9002 3f53 03ff 0294 6390 ca29     ......S?.....c).
 803bef7:	fd4a 0062 7303 d432 d532 fe03 4501 547c     J.b..s2.2....E|T
 803bf07:	1303 0090 f728 8703 0050 8015 03f0 ff28     ....(...P.....(.
 803bf17:	3800 f1a9 2883 3e00 a2fd 6308 2090 0309     .8...(.>...c. ..
 803bf27:	7528 9a3f 3287 03d3 0863 0855 ff8f d32f     (u?..2..c.U.../.
 803bf37:	ca29 7042 60f0 39fb 0012 8007 30f0 0028     ).Bp.`.9.....0(.
 803bf47:	3dfb 038c 706b 2012 30e0 f1ff 2840 3c00     .=..kp. .0..@(.<
 803bf57:	f485 ea10 1300 0082 604f 2100 e060 ff20     ........O`.!`. .
 803bf67:	030c 023d 7a3f ff2b 76ef 7470 0051 9015     ..=.?z+..vptQ...
 803bf77:	0028 c7bf 0cf0 3c10 0807 e03f 10fd 7708     (......<..?....w
 803bf87:	5f3f 0328 5077 e1f1 8710 2708 2108 0128     ?_(.wP.....'.!(.
 803bf97:	517a 03ff 1202 0832 7021 fd11 0203 c01b     zQ....2.!p......
 803bfa7:	0d72 d821 fe01 0902 8049 0340 2872 fb01     r.!.....I.@.r(..
 803bfb7:	5779 3f00 0d71 0810 ce07 7d00 3122 0872     yW.?q......}"1r.
 803bfc7:	016b 1077 c532 01d3 8323 c94b b110 8700     k.w.2...#.K.....
 803bfd7:	0309 03b2 0cd3 7538 7308 10e0 7308 cd3f     ......8u.s...s?.
 803bfe7:	0084 9015 01d8 103d 0579 c781 7050 1840     ......=.y...Pp@.
 803bff7:	0c7f 0821 9883 ff02 020e d132 3928 5515     ..!.......2.(9.U
 803c007:	2fff 70d1 0410 8020 fe10 0b00 e063 2b14     ./.p.. .....c..+
 803c017:	3fff f666 5d28 0790 732a 83f1 ff2b 3def     .?f.(]..*s..+..=
 803c027:	035a 1930 988b 8000 40b7 d52f 491a ff00     Z.0......@/..I..
 803c037:	b503 abfa 504b 0300 0270 6073 0300 ff71     ....KP..p.s`..q.
 803c047:	10d0 0338 11d0 f939 00ef 9002 0800 001b     ..8...9.........
 803c057:	2902 f5df 3841 b97b 4105 3809 03fd 0b00     .)..A8{..A.8....
 803c067:	1b28 28d8 9a01 9877 e81b 9702 a018 0228     (..(..w.......(.
 803c077:	fd97 0018 e837 3f28 0415 f728 9673 052c     ....7.(?..(.s.,.
 803c087:	f94f 19d0 fb28 940f 2d00 0d28 0994 7728     O...(....-(...(w
 803c097:	4c14 2099 0e3d 0128 0f18 00fe 5a45 aa11     .L. =.(.....EZ..
 803c0a7:	0b28 0aac 28ff 9094 9008 3f09 fe07 3500     (....(.....?...5
 803c0b7:	2878 9e30 2809 ab03 0a9d 2100 0088 a903     x(0..(.....!....
 803c0c7:	0300 ffba b875 08d1 0838 0890 29ff 4afa     ....u...8....).J
 803c0d7:	2868 9001 ff08 481b 181f de2f 0300 00be     h(.....H../.....
 803c0e7:	882f 581b 581f 4113 fa59 1f08 004b 4533     /..X.X.AY...K.3E
 803c0f7:	2898 4ce7 e8ff 2028 9893 1428 f74d 9098     .(.L..( ..(.M...
 803c107:	1888 9993 28ec bf0f f89f 681b 6c1f 3908     .....(.....h.l.9
 803c117:	7f00 1f09 28f0 44e7 08e8 7b21 b87b 9700     .....(.D..!{{...
 803c127:	3808 9007 c100 4aff 2878 4df9 3fab bf1e     .8.....Jx(.M.?..
 803c137:	b87c 08f0 0639 1118 ff1f 3f17 7010 28b9     |...9......?.p.(
 803c147:	cc00 09ff 09f8 0538 8918 ff29 e100 3f49     ......8...)...I?
 803c157:	7902 08b9 98ff 1628 084e 7428 fb91 91ec     .y....(.N.(t....
 803c167:	9108 9014 28c8 fd16 104d 3297 21de 9017     .....(..M..2.!..
 803c177:	fe08 0d00 1f08 286d 4616 fb18 b889 5508     ......m(.F.....U
 803c187:	0428 2890 df1b 2148 1f14 0811 9023 ff78     (..(..H!....#.x.
 803c197:	b881 8818 b889 1421 90bb 000c f5b9 6849     ......!.......Ih
 803c1a7:	7910 ef0c de32 3818 e101 f078 cf58 3a38     .y..2..8..x.X.8:
 803c1b7:	18f0 5905 1b18 4514 a8ff 4800 0029 18e4     ...Y...E...H)...
 803c1c7:	ff84 28b8 4414 12e9 1129 a9ef 3818 1012     ...(.D..)....8..
 803c1d7:	1129 0478 89fd 1300 11f8 1368 2b68 ffff     ).x.......h.h+..
 803c1e7:	0a9c a869 fa93 bd6b 02a8 f835 8904 007b     ..i...k...5...{.
 803c1f7:	38c7 02ff 898b f021 0f28 7f9a 1bc8 21e8     .8....!.(......!
 803c207:	2159 0858 ebd5 884b 9f10 0818 28a3 930d     Y!X...K......(..
 803c217:	08be 1197 0428 5d3f 6748 7f77 00b9 0c49     ....(.?]Hgw...I.
 803c227:	3b89 4007 609d 1109 0b20 51f0 5108 1b02     .;.@.`.. ..Q.Q..
 803c237:	d8cf 1b0a 00fe 2f5b de32 fa29 6842 e07d     ......[/2.).Bh}.
 803c247:	5309 f068 3928 3819 be6b 2d07 2929 48fd     .Sh.(9.8k..-)).H
 803c257:	0028 986f 3bfb 000d 390d 29f0 093d b0fb     (.o..;...9.)=...
 803c267:	0019 3913 0228 0945 b0bf 2889 4d02 1909     ...9(.E....(.M..
 803c277:	2959 feff 6841 18d0 0a38 dfcf 29e8 49fe     Y)..Ah..8....).I
 803c287:	0068 7851 d7f0 3828 0105 0b29 1f08 861f     h.Qx..(8..).....
 803c297:	1fdb 0812 a121 0808 3f1d 86f7 8519 0428     ....!....?....(.
 803c2a7:	a109 1738 d138 2b03 ec53 3f0d 0158 d432     ..8.8..+S..?X.2.
 803c2b7:	7907 7b50 ba01 1702 0401 20bd 171f dd06     .yP{....... ....
 803c2c7:	bd9c 0594 1f37 2126 0c87 0385 64df 017b     ....7.&!.....d{.
 803c2d7:	1779 2500 2d81 7067 0303 b100 9503 03cb     y..%.-gp........
 803c2e7:	1506 04db 0491 3f7d 0786 9401 9f2d 1472     ......}?....-.r.
 803c2f7:	0480 0820 0309 0fb3 cf7b 04f2 2209 8014     .. .....{...."..
 803c307:	0403 6fcf f3cf 5090 1700 03a3 b906 4d3b     ...o...P......;M
 803c317:	0777 0413 702d 2708 f506 20d8 0609 20d5     w...-p.'... ... 
 803c327:	0309 0b50 08ef de00 2f08 05dc 0939 5b0f     ..P....../..9..[
 803c337:	8014 08ec 1819 0305 0040 9805 6003 10e2     ........@....`..
 803c347:	980d 0518 070f 6d27 7a05 9537 082d cc21     ......'m.z7.-.!.
 803c357:	db0f 207c 0f0b 7ddb 20a6 7e0b 0f33 1715     ..| ...}. .~3...
 803c367:	2711 1107 fe40 1107 1210 11c1 0811 ff31     .'..@.........1.
 803c377:	1178 01f0 0339 5090 3ff3 041f 16f3 73f5     x...9..P.?.....s
 803c387:	0c16 3526 0838 1611 f906 e177 f91e 0f08     ..&58.....w.....
 803c397:	03fe cfd3 32f0 00d3 2f72 d3d5 ef05 00da     .....2..r/......
 803c3a7:	0511 c105 153b 9757 2090 6306 0051 313b     ....;.W.. .cQ.;1
 803c3b7:	5316 06f6 21c7 1c26 7775 77c6 fec6 0500     .S...!&.uw.w....
 803c3c7:	77d0 16c6 1706 ff04 023f 871f 5222 0739     .w......?..."R9.
 803c3d7:	a5ff 320e 94d1 1b01 ff41 d12f f93f 701b     ...2....A./.?..p
 803c3e7:	881f 006b 0002 114f 1108 712d 1f00 04ff     ..k...O...-q....
 803c3f7:	0ea5 461f fc3f 7f1b 1f71 1688 1716 1e14     ...F?...q.......
 803c407:	bbc5 3037 7d06 440c 00e1 f203 0cff 3c21     ..70.}.D......!<
 803c417:	9103 3ff0 ff0a 0090 5390 1111 1011 08fe     ...?.....S......
 803c427:	e00f 0910 3721 28a3 0c7f 0145 5111 1004     ....!7.(..E..Q..
 803c437:	a91e 0d74 0195 f087 9b05 03d4 1164 2c8b     ..t.........d..,
 803c447:	4781 a908 0392 9705 0663 1eab dca9 a516     .G......c.......
 803c457:	e905 0312 0604 13a9 df2d d830 3900 0531     ........-.0..91.
 803c467:	756d ff03 0d07 0857 f027 3965 05ff 7570     mu....W.'.e9..pu
 803c477:	2512 35e0 ff3f 9202 e005 0945 3d54 047f     .%.5?.....E.T=..
 803c487:	5408 1090 233f 5302 05ff 1471 400c 0239     .T..?#.S..q..@9.
 803c497:	71a8 1a00 0941 00bd 4587 5003 c505 00f6     .q..A....E.P....
 803c4a7:	2f81 98d1 3f83 90ce bf00 04f0 0238 2090     ./...?......8.. 
 803c4b7:	b11d 9f32 32d0 32d1 07d2 0067 3289 d6ff     ..2..2.2..g..2..
 803c4c7:	d732 fece 1819 ff19 90e7 1b00 7410 f0b0     2............t..
 803c4d7:	00f7 0128 cb07 9b7a 9121 02ff 1033 f237     ..(...z.!...3.7.
 803c4e7:	f521 ff1f 21e4 21e5 90e3 1110 c0f5 eb04     !....!.!........
 803c4f7:	15c0 a529 ea29 ff43 d020 3980 d06d 3840     ..).).C. ..9m.@8
 803c507:	04ff 5a28 519a 033f 7f28 9812 1141 0e20     ..(Z.Q?.(...A. .
 803c517:	0101 ffa9 11f1 2881 a220 1b41 a1fd 2508     .......( .A....%
 803c527:	0828 0290 0190 00ba 0a27 bd04 d002 0020     (.......'..... .
 803c537:	f52f 467d 2f08 46f5 0861 0812 ff0f c191     /.}F./.Fa.......
 803c547:	b21b 033f b191 1bbf 03c2 0324 0525 029d     ..?.......$.%...
 803c557:	08ff 0925 0324 0842 ff52 1212 420c 1b38     ..%.$.B.R....B8.
 803c567:	520c 38ff 0219 2812 9020 ef03 431b 231b     .R.8...( ....C.#
 803c577:	7f10 a5a4 ff0e a318 0328 f3cf 10d0 39bf     ........(......9
 803c587:	0304 9036 0183 865b 0cff 3d63 0303 3f24     ..6...[...c=..$?
 803c597:	efe4 2503 e23f bf00 11a3 6f10 0308 3288     ...%?......o...2
 803c5a7:	a910 3810 d306 7fbf 2834 9c7a 00a3 609f     ...8....4(z....`
 803c5b7:	08ff d003 3940 0806 ff24 1211 4208 2212     ....@9..$....B."
 803c5c7:	033f 00f2 1205 2918 4307 4bea 3f20 91f5     ?......).C.K ?..
 803c5d7:	9d00 0071 5003 0428 ffe0 0900 2801 4ef5     ..q..P(......(.N
 803c5e7:	2871 0c5f 0190 1009 0900 0050 5517 0081     q(_.......P..U..
 803c5f7:	6003 1b30 3081 601b 1700 70fd 1f08 1203     .`0..0.`...p....
 803c607:	0208 1213 090f 0920 0021 0015 0011 0023     ...... .!.....#.
 803c617:	bf4d a000 1011 00e0 350a d603 3700 6046     M........5...7F`
 803c627:	0f40 0002 730f ff03 5134 2823 e002 1303     @....s..4Q#(....
 803c637:	a3ff 2308 2411 4309 ff0c 3b13 0302 1113     ...#.$.C...;....
 803c647:	2863 7c67 03c0 6d00 3301 734e 2700 8355     c(g|...m.3Ns.'U.
 803c657:	2700 2013 1327 2710 0023 a527 5023 8327     .'. '..'#.'.#P'.
 803c667:	6509 2101 00f1 6207 00f2 f207 5f08 0300     .e.!...b....._..
 803c677:	0484 0413 24f5 c701 0033 4403 b38b f78c     .....$..3..D....
 803c687:	90b4 0003 c309 a31b ff1f 1fe4 1fe5 d1e3     ................
 803c697:	3907 02c7 f51f 7903 e901 0f02 3f20 07b7     .9.....y.... ?..
 803c6a7:	b07b 0b00 7c30 0508 bf40 e71b d72f d62f     {...0|..@..././.
 803c6b7:	430a ff2f 2fd3 2fd2 2fd1 1bd0 183d cf3d     .C/../././..=.=.
 803c6c7:	0128 5e3f 097d 1765 d7fd b307 1b48 1fd8     (.?^}.e.....H...
 803c6d7:	91e0 48fd 550f 1c21 f11f 0f28 98ff 1b58     ...H.U!...(...X.
 803c6e7:	28e8 7101 ffb8 d928 08a0 1428 384e 09fe     .(.q..(...(.N8..
 803c6f7:	21e3 28e8 46fa 2889 01ff ba70 a703 7f28     .!.(.F.(..p...(.
 803c707:	dd98 014c 7ab7 8aa1 6927 2815 02f7 0aa0     ..L..z..'i.(....
 803c717:	7308 1811 1813 08ef 9089 1728 0077 77c0     .s........(.w..w
 803c727:	f0ff 3837 9704 9087 ff48 123f 8797 0892     ..78....H.?.....
 803c737:	0f3f 1fef 9013 16e8 fd53 6745 90fb 0048     ?.......S.Eg..H.
 803c747:	b94d 09d2 0238 91bb 1008 145b 874c 8d00     M...8.....[.L...
 803c757:	fb57 17d0 1d00 3847 1102 3f47 f028 07c0     W.....G8..G?(...
 803c767:	7804 e900 8500 4dff 1b19 288a 987b e3cc     .x.....M...({...
 803c777:	1c1f f300 1706 7712 9089 700c 431e 931f     .......w...p.C..
 803c787:	af26 cb0e 1f13 2712 77b7 2112 2683 f1d7     &......'.w.!.&..
 803c797:	5818 9300 38df 38f0 053d 2519 063f e0e7     .X...8.8=..%?...
 803c7a7:	8138 3500 3111 3f00 ffc7 851f 0990 8a2d     8..5.1.?......-.
 803c7b7:	9a04 1bff 1f7a 2888 e001 ff09 1028 09f0     ....z..(....(...
 803c7c7:	f83c 8521 04ee 7f61 0d94 0300 1b40 ff30     <.!...a.....@.0.
 803c7d7:	0090 0b03 0c03 f01b 28ff 153d 28f0 9f1f     .........(=..(..
 803c7e7:	dbf0 e01b 2101 911b 8f01 404e 28ef 9260     .....!....N@.(`.
 803c7f7:	0040 80a9 f093 00fe 200d 0928 6096 1428     @........ (..`(.
 803c807:	4faf 9100 0090 1005 1908 e74e 28b0 007f     .O........N..(..
 803c817:	0031 9009 1b10 10f7 fa29 8d03 a028 2800     1.......)...(..(
 803c827:	e1f7 904c 0b00 1130 2840 a057 20a0 0d00     ..L...0.@(W.. ..
 803c837:	01a0 485f 5f08 a5ff ce0e 28fe 45f9 faa4     .._H._.....(.E..
 803c847:	2b04 02fb f903 a04d 0ea1 71ff f041 3911     .+....M....qA..9
 803c857:	700b fe41 d70b 1108 7c28 61eb 7f78 0311     .pA.....(|.ax...
 803c867:	0040 8171 0740 770d e041 0711 410d f221     @.q.@..wA....A!.
 803c877:	1d11 ddff 101f e03f 0000 fd7e 18ba 7501     ......?...~....u
 803c887:	6dba 7e80 bfba d81f f521 b876 f100 ff38     .m.~....!.v...8.
 803c897:	8903 a8f7 073d 1c90 e0ff e038 2b19 91fd     ....=.....8..+..
 803c8a7:	af2a 083f 0c90 bd04 0038 1903 28af 9e02     *.?.....8....(..
 803c8b7:	00ea 5c23 0b03 faf9 0700 0048 2903 fa28     ..#\......H..)(.
 803c8c7:	8a4e 1beb 00d9 1adf 4f01 1bd8 ffe8 f51f     N........O......
 803c8d7:	b877 08f0 0238 3fbb 0109 1477 984e 7310     w...8..?..w.N..s
 803c8e7:	9fd9 4897 0f3f 1a7c 0215 46c9 9867 0828     ...H?.|....Fg.(.
 803c8f7:	4312 1d20 8891 650a 288f 957d 098c 2a9d     .C ....e.(}....*
 803c907:	0085 a827 08f6 8a23 3ab8 70bd d1b8 7308     ..'...#..:.p...s
 803c917:	0639 ad08 6501 1bf8 02e8 7f19 1b28 90d8     9....e......(...
 803c927:	030b 21bc ffd7 1810 280b 4cff 90cb 18f7     ...!.....(.L....
 803c937:	b881 5b10 70de 03b8 89fd 1501 f0f9 3c69     ...[.p........i<
 803c947:	9104 00be 3f15 d220 3808 db01 7f41 f06c     .....? ..8..A.l.
 803c957:	390c 9104 0008 ff11 0817 2899 ef7d 78a9     .9.........(}..x
 803c967:	9cff 08dc 0b38 f31f ff79 18b8 e089 0949     ....8...y.....I.
 803c977:	3e89 02ff 0138 1628 084e ff3f 280b 9084     .>..8.(.N.?..(..
 803c987:	1b08 1848 881f b889 053f 0508 8908 6f08     ..H.....?......o
 803c997:	7eff 7894 7c58 7ec4 ff12 d27a ce72 947e     .~.xX|.~..z.r.~.
 803c9a7:	8918 08bb 0089 292f 0200 5d00 fe38 3d03     ....../)...]8..=
 803c9b7:	28f0 4602 a018 ff28 0228 184e 0128 989a     .(.F..(.(.N.(...
 803c9c7:	00fe faad e843 7e28 6c94 0876 76ed 00b8     ....C.(~.lv..v..
 803c9d7:	f895 6811 df02 b8fd 4b08 0328 0898 581b     ...h.....K(....X
 803c9e7:	90bf 1b28 1f48 2011 17cb 1fff 21f2 f0f3     ..(.H.. .....!..
 803c9f7:	380c bf08 0890 6c00 de32 0900 bf03 1890     .8.....l2.......
 803ca07:	6c00 d879 6107 feff 2100 28d7 440a f067     .ly..a...!.(.Dg.
 803ca17:	ff07 fd39 d779 27e0 d789 05fe 773b 0a28     ..9.y..'....;w(.
 803ca27:	674c d72f 007b 3902 2b31 3fff 1066 fb2f     Lg/.{..91+.?f./.
 803ca37:	7400 5409 0019 0919 7d3f 2109 9061 0020     .t.T....?}.!a. .
 803ca47:	0a02 0cec f0d8 f001 f001 0001 0002 22a5     ..............."
 803ca57:	7f2b 3ffa 2b76 3ffe 0032 5503 0023 520b     +..?v+.?2..U#..R
 803ca67:	1300 00a4 a203 0b00 f955 0300 00d5 9c0b     ........U.......
 803ca77:	0300 0074 5503 0098 7803 0300 007e 9203     ..t..U...x..~...
 803ca87:	2f00 3cff 0302 0a06 130e 3f18 211d 2926     ./.<.......?.!&)
 803ca97:	2e2c 0000 71f0 f030 f001 3001 f801 ff00     ,....q0....0....
 803caa7:	0005 4b06 e406 8007 0000 ffff ffff ffff     ...K............
 803cab7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cac7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cad7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cae7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803caf7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cb07:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cb17:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cb27:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cb37:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cb47:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cb57:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cb67:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cb77:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cb87:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cb97:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cba7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cbb7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cbc7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cbd7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cbe7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cbf7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cc07:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cc17:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cc27:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cc37:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cc47:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cc57:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cc67:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cc77:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cc87:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cc97:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cca7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ccb7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ccc7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ccd7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cce7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ccf7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cd07:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cd17:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cd27:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cd37:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cd47:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cd57:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cd67:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cd77:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cd87:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cd97:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cda7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cdb7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cdc7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cdd7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cde7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803cdf7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ce07:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ce17:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ce27:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ce37:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ce47:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ce57:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ce67:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ce77:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ce87:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803ce97:	ffff ffff ffff ffff 0000 c585 1700 0100     ................
 803cea7:	0010 0100 0004 0300 0002 0001 0001 0001     ................
 803ceb7:	0001 0000 0000 8700 00c5 0020 0000 0000     .......... .....
 803cec7:	ff00 0300 0001 ffff 00ff ffff 0001 0100     ................
 803ced7:	ffff 0001 0201 ffff 0001 0002 8a00 007d     ..............}.
 803cee7:	ff26 0000 0000 fb00 00f0 0000 0000 0000     &...............
	...
 803cf03:	0000 fb00 00e8 0000 0000 0000 8d00 006b     ..............k.
 803cf13:	001e 0000 0000 0000 0000 0000 0000 0000     ................
 803cf23:	0000 0600 0007 0000 0000 0010 0010 0000     ................
 803cf33:	9400 00a3 0006 0000 0600 00e4 9a00 00a9     ................
 803cf43:	ab11 efcd ab01 efcd 0402 0000 05ff 7c58     ..............X|
 803cf53:	009c 0000 d7a2 0a00 8264 0405 00ff 00ff     ........d.......
 803cf63:	00ff 0000 75a4 0200 0101 0000 89a6 2000     .....u......... 
	...
 803cf83:	0000 2000 0101 2000 0202 2000 0303 2000     ... ... ... ... 
 803cf93:	0000 eba7 1600 f9ff 80f4 f9ff 80fc 0100     ................
 803cfa3:	a086 0000 0000 0000 ffff ff00 0000 b5a9     ................
 803cfb3:	0000 0000 5daa 0100 0001 ad00 007f 00a0     .....]..........
 803cfc3:	0000 0000 ff00 0000 0000 0000 ff00 0000     ................
 803cfd3:	0000 0000 ff00 0500 0000 0000 fe00 fe70     ..............p.
 803cfe3:	006f 0101 0101 0002 0000 0000 ff00 0000     o...............
 803cff3:	0000 0000 ff00 0000 0000 0000 ff00 0500     ................
 803d003:	0008 0000 fc00 fc08 0007 0a01 0101 0000     ................
 803d013:	0000 0000 ff00 0000 0000 0000 ff00 0000     ................
 803d023:	0000 0000 ff00 0500 0010 0000 fc00 fc08     ................
 803d033:	0007 0101 0101 0003 0000 0000 ff00 0000     ................
 803d043:	0000 0000 ff00 0000 0000 0000 ff00 0500     ................
 803d053:	0018 0000 fc00 fc08 0007 0a01 0101 0001     ................
 803d063:	b500 00e1 ab41 efcd ab01 efcd 0002 ff07     ....A...........
 803d073:	01fe 0000 1501 0280 0220 07c0 ca0b 05e3     ........ .......
 803d083:	0100 01d4 01d4 00d4 0000 0000 0000 0000     ................
	...
 803d0a3:	0000 0600 01ff 0000 a1d0 2c00 0001 0100     ...........,....
 803d0b3:	0005 4000 0400 0004 4b06 4000 0400 0004     ...@.....K.@....
 803d0c3:	e406 4000 0400 0004 8007 4000 0400 0004     ...@.......@....
	...
 803d0db:	0000 33d5 0c00 0700 feff feff 0000 0000     ...3............
	...
 803d507:	0100 0405 0000 0000 0100 8405 0000 0000     ................
 803d517:	0000 80f5 b197 3533 ffff ffff ffff ffff     ......35........
 803d527:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d537:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d547:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d557:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d567:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d577:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d587:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d597:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d5a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d5b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d5c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d5d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d5e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d5f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d607:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d617:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d627:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d637:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d647:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d657:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d667:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d677:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d687:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d697:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d6a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d6b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d6c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d6d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d6e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d6f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d707:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d717:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d727:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d737:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d747:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d757:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d767:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d777:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d787:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d797:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d7a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d7b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d7c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d7d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d7e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d7f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d807:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d817:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d827:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d837:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d847:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d857:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d867:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d877:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d887:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d897:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d8a7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d8b7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d8c7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d8d7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d8e7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d8f7:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d907:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 803d917:	ffff ffff ffff ffff 3d00                         .........

0803d920 <commands>:
 803d920:	c53d 0800 c9cd 0800 cf01 0800 6f70 7472     =...........port
 803d930:	6144 6174 7854 7852 6f43 706d 656c 6574     DataTxRxComplete
 803d940:	7028 726f 4e74 6d75 202c 4f50 5452 545f     (portNum, PORT_T
 803d950:	5059 5f45 5053 2c49 5220 5458 5f58 4f43     YPE_SPI, RXTX_CO
 803d960:	504d 454c 4554 525f 2958 3e20 203d 0030     MPLETE_RX) >= 0.
 803d970:	6d28 7475 7865 3d20 7820 6553 616d 6870     (mutex = xSemaph
 803d980:	726f 4365 6572 7461 4d65 7475 7865 2928     oreCreateMutex()
 803d990:	0029 7073 0069 6f4e 6d20 7461 6863 6e69     ).spi.No matchin
 803d9a0:	2067 6f70 7472 6620 726f 6d20 7365 6173     g port for messa
 803d9b0:	6567 7720 7469 2068 6461 7264 7365 2073     ge with address 
 803d9c0:	7825 6620 756f 646e 0a2e 7000 726f 4474     %x found...portD
 803d9d0:	7461 5461 5278 4378 6d6f 6c70 7465 2865     ataTxRxComplete(
 803d9e0:	2c70 5020 524f 5f54 5954 4550 535f 4950     p, PORT_TYPE_SPI
 803d9f0:	202c 5852 5854 435f 4d4f 4c50 5445 5f45     , RXTX_COMPLETE_
 803da00:	5852 2029 3d3e 3020 5600 6c6f 6d75 2065     RX) >= 0.Volume 
 803da10:	6168 2073 6863 6e61 6567 0a64 5000 776f     has changed..Pow
 803da20:	7265 7320 6174 6574 6820 7361 6320 6168     er state has cha
 803da30:	676e 6465 7420 206f 7825 000a 654e 7774     nged to %x..Netw
 803da40:	726f 206b 7473 7461 2065 6168 2073 6863     ork state has ch
 803da50:	6e61 6567 0a64 5300 6d61 6c70 2065 6172     anged..Sample ra
 803da60:	6574 6820 7361 6320 6168 676e 6465 000a     te has changed..
 803da70:	6f43 6e6e 6365 6974 6e6f 7720 7469 2068     Connection with 
 803da80:	6570 7265 2820 3025 7838 253a 3830 3a78     peer (%08x:%08x:
 803da90:	3025 7838 2029 6f6c 7473 0a2e 4300 6261     %08x) lost...Cab
 803daa0:	656c 6320 6e6f 656e 7463 6f69 206e 6977     le connection wi
 803dab0:	6874 7020 6565 2072 2528 3830 3a78 3025     th peer (%08x:%0
 803dac0:	7838 253a 3830 2978 6c20 736f 2e74 000a     8x:%08x) lost...
 803dad0:	6144 6174 7267 6d61 6320 6e6f 656e 7463     Datagram connect
 803dae0:	6f69 206e 6977 6874 7020 6565 2072 2528     ion with peer (%
 803daf0:	3830 3a78 3025 7838 253a 3830 2978 6c20     08x:%08x:%08x) l
 803db00:	736f 2e74 000a 7325 203a 6144 6174 7267     ost...%s: Datagr
 803db10:	6d61 6320 6e6f 656e 7463 6f69 206e 6977     am connection wi
 803db20:	6874 7020 6565 2072 2528 3830 3a78 3025     th peer (%08x:%0
 803db30:	7838 253a 3830 2978 6520 7473 6261 696c     8x:%08x) establi
 803db40:	6873 6465 0a2e 2500 3a73 4320 6261 656c     shed...%s: Cable
 803db50:	6320 6e6f 656e 7463 6f69 206e 6977 6874      connection with
 803db60:	7020 6565 2072 6520 7473 6261 696c 6873      peer  establish
 803db70:	6465 0a2e 2500 3a73 4320 6e6f 656e 7463     ed...%s: Connect
 803db80:	6f69 206e 6977 6874 7320 616c 6576 2820     ion with slave (
 803db90:	3025 7838 253a 3830 3a78 3025 7838 2d29     %08x:%08x:%08x)-
 803dba0:	283e 3025 7838 253a 3830 3a78 3025 7838     >(%08x:%08x:%08x
 803dbb0:	2029 7365 6174 6c62 7369 6568 2e64 000a     ) established...
 803dbc0:	7325 203a 6f4c 7473 6320 6e6f 656e 7463     %s: Lost connect
 803dbd0:	6f69 206e 6977 6874 7320 616c 6576 2820     ion with slave (
 803dbe0:	3025 7838 253a 3830 3a78 3025 7838 2e29     %08x:%08x:%08x).
 803dbf0:	000a 6568 706c 7265 2620 2026 6568 706c     ..helper && help
 803dc00:	7265 3e2d 6172 6964 4d6f 646f 6c75 0065     er->radioModule.
 803dc10:	6f70 7472 6144 6174 7854 7852 6f43 706d     portDataTxRxComp
 803dc20:	656c 6574 6d28 7365 6173 6567 3e2d 6f70     lete(message->po
 803dc30:	7472 754e 2c6d 5020 524f 5f54 5954 4550     rtNum, PORT_TYPE
 803dc40:	535f 4950 202c 5852 5854 435f 4d4f 4c50     _SPI, RXTX_COMPL
 803dc50:	5445 5f45 5854 2029 3d3e 3020 4900 696e     ETE_TX) >= 0.Ini
 803dc60:	6974 6c61 7a69 6e69 2067 6152 6964 206f     tializing Radio 
 803dc70:	6f4d 7564 656c 2520 0a64 1b00 335b 6d31     Module %d...[31m
 803dc80:	6152 6964 206f 6c66 7361 2068 6e69 6176     Radio flash inva
 803dc90:	696c 2e64 5220 7061 616c 6963 676e 1b2e     lid. Raplacing..
 803dca0:	6d5b 000a 6152 6964 206f 6c66 7361 2068     [m..Radio flash 
 803dcb0:	6176 696c 2e64 000a 6f46 6e75 2064 6152     valid...Found Ra
 803dcc0:	6964 206f 6f4d 7564 656c 2820 3025 7838     dio Module (%08x
 803dcd0:	253a 3830 3a78 3025 7838 0a29 4d00 7361     :%08x:%08x)..Mas
 803dce0:	6574 2072 6e69 7469 6169 696c 657a 2e64     ter initialized.
 803dcf0:	5320 6174 7574 2073 3025 7834 0a20 4400      Status %04x ..D
 803dd00:	6469 6e20 746f 6620 6e69 2064 6152 6964     id not find Radi
 803dd10:	206f 6f4d 7564 656c 2520 0a64 4400 7369     o Module %d..Dis
 803dd20:	6f63 6e6e 6365 6974 676e 7020 6565 2072     connecting peer 
 803dd30:	2528 3830 3a78 3025 7838 253a 3830 2978     (%08x:%08x:%08x)
 803dd40:	0a2e 4800 4357 6d6f 536d 4950 6548 706c     ...HWCommSPIHelp
 803dd50:	7265 0000                                   er..

0803dd54 <commands>:
 803dd54:	d1b9 0800 d18d 0800 454c 2044 6c62 6e69     ........LED blin
 803dd64:	656b 0072                                   ker.

0803dd68 <__FUNCTION__.8057>:
 803dd68:	7874 5053 0049 0000                         txSPI...

0803dd70 <__FUNCTION__.8082>:
 803dd70:	6f63 666e 6769 7275 4465 414d 6f66 5372     configureDMAforS
 803dd80:	4950 4100                                        PI.

0803dd83 <__FUNCTION__.8101>:
 803dd83:	4441 5f43 7768 6e49 7469 0000 7800 6553     ADC_hwInit...xSe
 803dd93:	616d 6870 726f 5465 6b61 2865 7073 4469     maphoreTake(spiD
 803dda3:	7461 5b61 7073 4e69 6d75 2e5d 5378 6d65     ata[spiNum].xSem
 803ddb3:	7061 6f68 6572 202c 6f70 7472 414d 5f58     aphore, portMAX_
 803ddc3:	4544 414c 2059 2029 3d3d 7020 5464 5552     DELAY ) == pdTRU
 803ddd3:	0045 0000 6100 7373 7265 2074 6e69 2520     E....assert in %
 803dde3:	2873 6425 3a29 2520 0a73 0000 4e00               s(%d): %s....

0803ddf0 <conTypeCh>:
 803ddf0:	464e 5550                                   NFPU

0803ddf4 <__FUNCTION__.8927>:
 803ddf4:	6564 7562 4967 696e 0074 7852 7c00 2520     debugInit.Rx.| %
 803de04:	3230 0078 2520 7c64 2500 6433 007c 7854     02x. %d|.%3d|.Tx
 803de14:	3100 3a39 3734 303a 0034 614a 206e 3531     .19:47:04.Jan 15
 803de24:	3220 3130 0038 7542 6c69 2064 6974 656d      2018.Build time
 803de34:	2520 2073 7325 7220 7665 7369 6f69 3a6e      %s %s revision:
 803de44:	7325 000a 414d 3434 565f 5245 6800 6165     %s..MA44_VER.hea
 803de54:	3a70 6120 6c6c 636f 3a73 6425 6620 6572     p: allocs:%d fre
 803de64:	7365 253a 2064 6c61 6f6c 6163 6574 3a64     es:%d allocated:
 803de74:	6425 6c20 7361 2074 6c61 6f6c 2063 6973     %d last alloc si
 803de84:	657a 253a 2064 000a 2d2b 2d2d 2d2d 2d2d     ze:%d ..+-------
 803de94:	2d2d 712d 6575 6575 2d2b 2d2d 6f63 6e75     ---queue+---coun
 803dea4:	2b74 642d 7165 6575 6575 2d2b 6e65 7571     t+-dequeue+-enqu
 803deb4:	7565 2b65 2d2d 2d2d 6d2d 7861 2d2b 2d2d     eue+-----max+---
 803dec4:	662d 6c75 2b6c 2d2d 652d 706d 7974 0a2b     -full+---empty+.
 803ded4:	6900 516e 6575 6575 5355 3142 7c00 3125     .inQueueUSB1.|%1
 803dee4:	7335 257c 6438 257c 6438 257c 6438 257c     5s|%8d|%8d|%8d|%
 803def4:	6438 257c 6438 257c 6438 0a7c 6900 516e     8d|%8d|%8d|..inQ
 803df04:	6575 6575 5355 3242 6900 516e 6575 6575     ueueUSB2.inQueue
 803df14:	5053 3149 6900 516e 6575 6575 5053 3249     SPI1.inQueueSPI2
 803df24:	6900 516e 6575 6575 3249 0053 6e69 7551     .inQueueI2S.inQu
 803df34:	7565 5465 7365 0074 756f 5174 6575 6575     eueTest.outQueue
 803df44:	4153 3149 6f00 7475 7551 7565 5365 4941     SAI1.outQueueSAI
 803df54:	0032 2d2b 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     2.+-------------
 803df64:	2d2d 2d2b 2d2d 2d2d 2d2d 2b2d 2d2d 2d2d     --+--------+----
 803df74:	2d2d 2d2d 2d2b 2d2d 2d2d 2d2d 2b2d 2d2d     ----+--------+--
 803df84:	2d2d 2d2d 2d2d 2d2b 2d2d 2d2d 2d2d 2b2d     ------+--------+
 803df94:	2d2d 2d2d 2d2d 2d2d 0a2b 6800 6165 5f70     --------+..heap_
 803dfa4:	5f31 3233 6800 6165 5f70 3333 315f 3239     1_32.heap_33_192
 803dfb4:	6800 6165 5f70 3135 5f32 3135 0032 6568     .heap_512_512.he
 803dfc4:	7061 355f 3331 315f 3230 0034 6568 7061     ap_513_1024.heap
 803dfd4:	315f 3230 5f35 3132 3231 2500 3a64 6420     _1025_2112.%d: d
 803dfe4:	7665 6449 253d 3830 2078 616d 496e 3d64     evId=%08x manId=
 803dff4:	3025 7838 7020 6f72 4964 3d64 3025 7838     %08x prodId=%08x
 803e004:	7320 706d 526c 7461 3d65 3625 4864 207a      smplRate=%6dHz 
 803e014:	7374 6550 6972 646f 253d 6434 7375 6420     tsPeriod=%4dus d
 803e024:	7874 7546 6c6c 253d 6438 7420 4e78 436f     txFull=%8d txNoC
 803e034:	6e6f 3d6e 3825 2064 7473 7461 7375 253d     onn=%8d status=%
 803e044:	3430 0a78 2b00 2d2d 2d2d 2d2b 2d2d 2d2b     04x..+----+---+-
 803e054:	2b2d 2d2d 2d2b 2b2d 2b2d 2b2d 2d2d 2d2d     -+--+--+-+-+----
 803e064:	2d2b 722d 642e 7665 2b2e 2d2d 2e72 616d     +--r.dev.+--r.ma
 803e074:	2e6e 2d2b 2e72 7270 646f 2b2e 752d 4370     n.+-r.prod.+-upC
 803e084:	6e6f 2d6e 752b 4370 6e6f 446e 2b61 752d     onn-+upConnDa+-u
 803e094:	7470 6d69 2d65 6c2b 7361 5374 6565 2b6e     ptime-+lastSeen+
 803e0a4:	7874 7546 6c6c 7244 642b 6373 7352 5274     txFullDr+dscRstR
 803e0b4:	2b78 7364 5263 7473 7854 0a2b 7c00 3425     x+dscRstTx+..|%4
 803e0c4:	7c73 6325 6325 6325 257c 3230 7c78 3025     s|%c%c%c|%02x|%0
 803e0d4:	7832 007c 6325 6325 257c 7c63 6325 257c     2x|.%c%c|%c|%c|%
 803e0e4:	3430 7c78 3025 7838 257c 3830 7c78 3025     04x|%08x|%08x|%0
 803e0f4:	7838 257c 6438 257c 6438 257c 6438 257c     8x|%8d|%8d|%8d|%
 803e104:	6438 257c 6438 257c 6438 257c 6438 0a7c     8d|%8d|%8d|%8d|.
 803e114:	2000 7c20 7c20 7c20 2020 2020 207c 2020     .  | | |    |   
 803e124:	2020 2020 7c20 2020 2020 2020 2020 207c          |        | 
 803e134:	2020 2020 2020 7c20 2020 2020 2020 2020            |        
 803e144:	207c 2020 2020 2020 7c20 2020 2020 2020     |        |      
 803e154:	2020 207c 2020 2020 2020 7c20 2020 2020       |        |    
 803e164:	2020 2020 207c 2020 2020 2020 7c20 2020         |        |  
 803e174:	2020 2020 2020 0a7c 2b00 2d2d 2d2d 2d2b           |..+----+-
 803e184:	2d2d 2d2b 2b2d 2d2d 2d2b 2b2d 2b2d 2b2d     --+--+--+--+-+-+
 803e194:	2d2d 2d2d 2d2b 2d2d 2d2d 2d2d 2b2d 2d2d     ----+--------+--
 803e1a4:	2d2d 2d2d 2d2d 2d2b 2d2d 2d2d 2d2d 2b2d     ------+--------+
 803e1b4:	2d2d 2d2d 2d2d 2d2d 2d2b 2d2d 2d2d 2d2d     --------+-------
 803e1c4:	2b2d 2d2d 2d2d 2d2d 2d2d 2d2b 2d2d 2d2d     -+--------+-----
 803e1d4:	2d2d 2b2d 2d2d 2d2d 2d2d 2d2d 2d2b 2d2d     ---+--------+---
 803e1e4:	2d2d 2d2d 2b2d 2d2d 2d2d 2d2d 2d2d 0a2b     -----+--------+.
 803e1f4:	5500 4253 4920 3a6e 6425 202c 754f 3a74     .USB In:%d, Out:
 803e204:	6425 202c 6e49 6e49 7063 746c 253a 2c64     %d, InIncplt:%d,
 803e214:	4f20 7475 6e49 6d63 6c70 3a74 6425 202c      OutIncmplt:%d, 
 803e224:	4f53 3a46 6425 6620 6565 6264 6361 3a6b     SOF:%d feedback:
 803e234:	3025 7836 253a 2064 6c61 5374 7465 6974     %06x:%d altSetti
 803e244:	676e 253a 2064 6678 7265 253a 0a64 2d00     ng:%d xfer:%d..-
 803e254:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 803e264:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 803e274:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 803e284:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 803e294:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 803e2a4:	000a 7325 2500 6433 203b 3925 3b64 2520     ..%s.%3d; %9d; %
 803e2b4:	6439 203b 7830 3025 7838 203b 7830 3025     9d; 0x%08x; 0x%0
 803e2c4:	7838 0a3b 4400 4f49 5944 203a 205b 5b5d     8x;..DIODY: [ ][
 803e2d4:	5d20 205b 5b5d 5d20 205b 5b5d 5d20 000a      ][ ][ ][ ][ ]..
 803e2e4:	5478 7361 436b 6572 7461 2865 5464 7361     xTaskCreate(dTas
 803e2f4:	2c6b 2820 6973 6e67 6465 6320 6168 2072     k, (signed char 
 803e304:	292a 4422 2c22 3020 3178 3030 2030 202f     *)"D", 0x1000 / 
 803e314:	2c34 4e20 4c55 2c4c 3120 202c 554e 4c4c     4, NULL, 1, NULL
 803e324:	2029 3d3d 7020 5064 5341 0053               ) == pdPASS.

0803e330 <__FUNCTION__.7450>:
 803e330:	6177 6374 6468 676f 6e49 7469 0a00 2121     watchdogInit..!!
 803e340:	2121 2121 6f53 656d 7420 7361 736b 6420     !!!!Some tasks d
 803e350:	6469 6e20 746f 7220 7365 6f70 646e 2820     id not respond (
 803e360:	6566 2064 616d 6b73 2520 2978 202e 7554     fed mask %x). Tu
 803e370:	6e72 6f20 6666 7420 6568 7020 776f 7265     rn off the power
 803e380:	2121 2121 0a21 5700 7461 6863 6f64 0067     !!!!!..Watchdog.
 803e390:	5478 7361 436b 6572 7461 2865 6177 6374     xTaskCreate(watc
 803e3a0:	6468 676f 6154 6b73 202c 7328 6769 656e     hdogTask, (signe
 803e3b0:	2064 6863 7261 2a20 2229 6157 6374 6468     d char *)"Watchd
 803e3c0:	676f 2c22 3120 3230 2034 202f 2c34 4e20     og", 1024 / 4, N
 803e3d0:	4c55 2c4c 3120 202c 554e 4c4c 2029 3d3d     ULL, 1, NULL) ==
 803e3e0:	7020 5064 5341 0053                          pdPASS.

0803e3e8 <__FUNCTION__.9043>:
 803e3e8:	7073 5469 536f 6970 754e 006d               spiToSpiNum.

0803e3f4 <ledsProto>:
	...
 803e404:	1800 4002 2000 0000 1800 4002 4000 0000     ...@. .....@.@..
 803e414:	0400 4002 2000 0000 0800 4002 0020 0000     ...@. .....@ ...

0803e424 <__FUNCTION__.9142>:
 803e424:	7768 6f42 7261 4964 696e 0074               hwBoardInit.

0803e430 <portCompl>:
 803e430:	0200 0401 0603 0805 0007                         .........

0803e439 <wm880x>:
 803e439:	1800 4002 0100 1800 4002 0200 1800 4002     ...@.....@.....@
 803e449:	0400 1800 4002 0800                         .....@..

0803e451 <dmaStreamconstSettings>:
 803e451:	6040 4002 0000 0000 0000 0020 000d 2080     @`.@...... .... 
 803e461:	0010 0820 0010 0100 0090 0410 0010 2000     .. ............ 
 803e471:	0010 0800 0010 0100 0010 0400 4910 3144     .............ID1
 803e481:	203a 7825 4920 3244 203a 7825 5220 5645     : %x ID2: %x REV
 803e491:	203a 7825 000a 5b1b 3133 436d 6968 2070     : %x...[31mChip 
 803e4a1:	6425 6e20 746f 6620 756f 646e 5b1b 0a6d     %d not found.[m.
 803e4b1:	4500 616e 6c62 2065 5053 4944 2046 6552     .Enable SPDIF Re
 803e4c1:	6563 7669 7265 6320 6968 3a70 2520 0a64     ceiver chip: %d.
 803e4d1:	4500 616e 6c62 2065 5053 4944 2046 7254     .Enable SPDIF Tr
 803e4e1:	6e61 6d73 7469 6574 2072 6863 7069 203a     ansmitter chip: 
 803e4f1:	6425 000a 4c50 204c 6573 0a74 7300 6970     %d..PLL set..spi
 803e501:	754e 206d 3d3e 3020 4900 6564 746e 6669     Num >= 0.Identif
 803e511:	6465 6320 6968 2070 6425 000a 6556 2072     ed chip %d..Ver 
 803e521:	2e30 3030 3030 3130 000a 6f43 666e 6769     0.000001..Config
 803e531:	6620 726f 5720 384d 3038 5f35 0a31 4300      for WM8805_1..C
 803e541:	6e6f 6966 2067 6f66 2072 4d57 3838 3530     onfig for WM8805
 803e551:	325f 000a 6f43 666e 6769 6620 726f 5720     _2..Config for W
 803e561:	384d 3038 5f34 0a31 4300 6e6f 6966 2067     M8804_1..Config 
 803e571:	6f66 2072 4d57 3838 3430 325f 000a 7073     for WM8804_2..sp
 803e581:	4469 7461 5b61 7073 5469 536f 6970 754e     iData[spiToSpiNu
 803e591:	286d 2828 5053 5f49 7954 6570 6544 2066     m(((SPI_TypeDef 
 803e5a1:	292a 2820 2828 7528 6e69 3374 5f32 2974     *) ((((uint32_t)
 803e5b1:	7830 3034 3030 3030 3030 2029 202b 7830     0x40000000) + 0x
 803e5c1:	3030 3130 3030 3030 2029 202b 7830 3033     00010000) + 0x30
 803e5d1:	3030 2929 5d29 782e 6553 616d 6870 726f     00)))].xSemaphor
 803e5e1:	2065 3d21 4e20 4c55 004c 5378 6d65 7061     e != NULL.xSemap
 803e5f1:	6f68 6572 6154 656b 7328 6970 6144 6174     horeTake(spiData
 803e601:	735b 6970 6f54 7053 4e69 6d75 2828 5328     [spiToSpiNum(((S
 803e611:	4950 545f 7079 4465 6665 2a20 2029 2828     PI_TypeDef *) ((
 803e621:	2828 6975 746e 3233 745f 3029 3478 3030     ((uint32_t)0x400
 803e631:	3030 3030 2930 2b20 3020 3078 3030 3031     00000) + 0x00010
 803e641:	3030 2930 2b20 3020 3378 3030 2930 2929     000) + 0x3000)))
 803e651:	2e5d 5378 6d65 7061 6f68 6572 202c 6f70     ].xSemaphore, po
 803e661:	7472 414d 5f58 4544 414c 2059 2029 3d3d     rtMAX_DELAY ) ==
 803e671:	7020 5464 5552 0045 5366 7a69 0065 6663      pdTRUE.fSize.cf
 803e681:	2e67 7325 303d 2578 3230 2078 000a 4366     g.%s=0x%02x ..fC
 803e691:	4352 7300 6f6d 5f6b 616d 6b73 6500 706d     RC.smok_mask.emp
 803e6a1:	7974 625f 6675 6566 7372 7400 6172 6563     ty_buffers.trace
 803e6b1:	6d5f 7365 6173 6567 0073 616b 705f 7265     _messages.ka_per
 803e6c1:	6f69 0064 616b 745f 6d69 6f65 7475 6d00     iod.ka_timeout.m
 803e6d1:	6e61 6449 6b00 6e6f 5064 6d6f 6b00 6e6f     anId.kondPom.kon
 803e6e1:	5064 6d6f 5053 5b4b 5d30 6b00 6e6f 5064     dPomSPK[0].kondP
 803e6f1:	6d6f 5053 5b4b 5d31 6b00 6e6f 5064 6d6f     omSPK[1].kondPom
 803e701:	5053 5b4b 5d32 6b00 6e6f 5064 6d6f 5053     SPK[2].kondPomSP
 803e711:	5b4b 5d33 7000 6f72 6f74 6300 6870 0061     K[3].proto.cpha.
 803e721:	7473 7461 0073 6c64 7665 6c65 6600 726f     stats.dlevel.for
 803e731:	6563 736d 7000 6c6c 6d5f 6100 6b63 3035     cems.pll_m.ack50
 803e741:	6400 7369 6261 656c 615f 656c 7472 0073     .disable_alerts.
 803e751:	6e75 756d 6574 6749 6f6e 6572 5300 4941     unmuteIgnore.SAI
 803e761:	6c63 5b6b 5d30 5300 4941 6c63 5b6b 5d31     clk[0].SAIclk[1]
 803e771:	5300 4941 6c63 5b6b 5d32 5300 4941 6c63     .SAIclk[2].SAIcl
 803e781:	5b6b 5d33 5300 4941 6c63 5b6b 5d34 5300     k[3].SAIclk[4].S
 803e791:	4941 6c63 5b6b 5d35 5300 4941 6c63 5b6b     AIclk[5].SAIclk[
 803e7a1:	5d36 5300 4941 6c63 5b6b 5d37 7400 6d69     6].SAIclk[7].tim
 803e7b1:	6f65 7475 3035 4300 4e45 5000 5245 0031     eout50.CEN.PER1.
 803e7c1:	4550 3252 5000 5245 0033 4550 3452 5000     PER2.PER3.PER4.P
 803e7d1:	5245 0035 4550 3652 5000 5245 0037 4550     ER5.PER6.PER7.PE
 803e7e1:	3852 5700                                        R8.

0803e7e4 <__FUNCTION__.8651>:
 803e7e4:	4d57 3838 5858 6e49 7469 0000               WM88XXInit..

0803e7f0 <FreqHz>:
 803e7f0:	b110 0002 0000 0000 ee00 0002 0000 0000     ................
	...
 803e810:	5888 0001 0000 0000 7700 0001 0000 0000     .X.......w......
 803e820:	b110 0002 0000 0000 0000 0000 ee00 0002     ................
 803e830:	5888 0001 0000 0000 7700 0001 0000 0000     .X.......w......
	...
 803e850:	5888 0001 0000 0000 7700 0001 0000 0000     .X.......w......
 803e860:	b110 0002 0000 0000 0000 0000 ee00 0002     ................
 803e870:	ac44 0000 0000 0000 bb80 0000 0000 0000     D...............
	...
 803e890:	5888 0001 0000 0000 7700 0001 0000 0000     .X.......w......
 803e8a0:	b110 0002 0000 0000 0000 0000 ee00 0002     ................
	...

0803e8f0 <wmStr>:
 803e8f0:	e96c 0803 e975 0803 e97e 0803 e987 0803     l...u...~.......

0803e900 <__FUNCTION__.8788>:
 803e900:	4d57 3838 5858 415f 6475 6f69 6e49 6574     WM88XX_AudioInte
 803e910:	6672 6361 5365 7465 7453 7461 0065 4d57     rfaceSetState.WM
 803e920:	3838 3530 255f 2064 3025 7832 2520 3230     8805_%d %02x %02
 803e930:	2078 3025 7832 2520 3230 2078 3025 7832     x %02x %02x %02x
 803e940:	2520 3230 2078 3025 7832 000a 6553 2074      %02x %02x..Set 
 803e950:	6572 6563 7669 7265 6320 6168 6e6e 6c65     receiver channel
 803e960:	203a 6425 6920 206e 7325 000a 4d57 3838     : %d in %s..WM88
 803e970:	3530 315f 5700 384d 3038 5f35 0032 4d57     05_1.WM8805_2.WM
 803e980:	3838 3430 315f 5700 384d 3038 5f34 0032     8804_1.WM8804_2.

0803e990 <__FUNCTION__.8595>:
 803e990:	7571 7565 5465 0058 6f50 6577 2072 7473     queueTX.Power st
 803e9a0:	7461 2065 6168 2073 6863 6e61 6567 0a64     ate has changed.
 803e9b0:	6400 7461 4c61 6e65 7467 2068 3d3c 4d20     .dataLength <= M
 803e9c0:	5841 505f 5941 4f4c 4441 0100                    AX_PAYLOAD.

0803e9cb <pF.4962>:
 803e9cb:	0001                                        ..

0803e9cd <pF.4965>:
 803e9cd:	0005                                        ..

0803e9cf <pF.4967>:
 803e9cf:	0f02 3d00                                        ...

0803e9d2 <pF.4969>:
 803e9d2:	003d                                        =.

0803e9d4 <pF.4971>:
 803e9d4:	0005                                        ..

0803e9d6 <pF.4973>:
 803e9d6:	0005                                        ..

0803e9d8 <pF.4975>:
 803e9d8:	0003                                        ..

0803e9da <pF.4977>:
 803e9da:	0621 0100                                        !..

0803e9dd <pF.4979>:
 803e9dd:	0001                                        ..

0803e9df <pF.4981>:
 803e9df:	0003                                        ..

0803e9e1 <pF.4983>:
 803e9e1:	0301 0100                                        ...

0803e9e4 <pF.4985>:
 803e9e4:	0301 0200                                        ...

0803e9e7 <pF.4987>:
 803e9e7:	0302 0005                                   ....

0803e9eb <pF.4989>:
 803e9eb:	0009                                        ..

0803e9ed <pF.4991>:
 803e9ed:	0009                                        ..

0803e9ef <pF.4993>:
 803e9ef:	0005                                        ..

0803e9f1 <pF.4995>:
 803e9f1:	150e 0900                                        ...

0803e9f4 <pF.4997>:
 803e9f4:	0209 0700                                        ...

0803e9f7 <pF.4999>:
 803e9f7:	0007                                        ..

0803e9f9 <pF.5011>:
	...

0803e9fa <pF.5014>:
 803e9fa:	0002                                        ..

0803e9fc <pF.5016>:
 803e9fc:	0001                                        ..

0803e9fe <pF.5018>:
	...

0803e9ff <pF.5020>:
	...

0803ea00 <pF.5022>:
 803ea00:	0001                                        ..

0803ea02 <pF.5024>:
	...

0803ea03 <pF.5026>:
	...

0803ea04 <pF.5028>:
	...

0803ea05 <pF.5030>:
 803ea05:	0001                                        ..

0803ea07 <pF.5032>:
 803ea07:	0702 0001                                   ....

0803ea0b <pF.5034>:
 803ea0b:	0001                                        ..

0803ea0d <pF.5036>:
 803ea0d:	0001                                        ..

0803ea0f <pF.5038>:
 803ea0f:	0003                                        ..

0803ea11 <pF.5042>:
 803ea11:	000b                                        ..

0803ea13 <pF.5045>:
 803ea13:	0f06 0006                                   ....

0803ea17 <pF.5047>:
 803ea17:	0002                                        ..

0803ea19 <pF.5049>:
 803ea19:	0513 0052                                   ..R.

0803ea1d <pF.5051>:
 803ea1d:	020b 0605 21ff                                   .....

0803ea22 <pF.5053>:
 803ea22:	0621 0b00                                        !..

0803ea25 <pF.5055>:
 803ea25:	020b 0300                                        ...

0803ea28 <pF.5057>:
 803ea28:	0003                                        ..

0803ea2a <pF.5059>:
 803ea2a:	0003                                        ..

0803ea2c <pF.5061>:
 803ea2c:	0003                                        ..

0803ea2e <pF.5063>:
 803ea2e:	0a17 0103 01fd                                   .....

0803ea33 <pF.5065>:
 803ea33:	0001                                        ..

0803ea35 <pF.5067>:
 803ea35:	0006                                        ..

0803ea37 <pF.5069>:
 803ea37:	0003                                        ..

0803ea39 <pF.5081>:
 803ea39:	0b02 0005                                   ....

0803ea3d <pF.5084>:
	...

0803ea3e <pF.5086>:
	...

0803ea3f <pF.5088>:
	...

0803ea40 <pF.5092>:
 803ea40:	010b 2102 fb06                              ...!..

0803ea46 <pF.5095>:
 803ea46:	0601 020b fd05                              ......

0803ea4c <pF.5097>:
 803ea4c:	010b 2102 fb0a                              ...!..

0803ea52 <pF.5099>:
 803ea52:	0301 ff01                                   ....

0803ea56 <pF.5111>:
 803ea56:	0301 0100                                        ...

0803ea59 <pF.5116>:
 803ea59:	ff01                                        ..

0803ea5b <pParams.4550>:
 803ea5b:	0525 07b0                                   %...

0803ea5f <pParams.4554>:
 803ea5f:	0525 3713 6100                                   %..7.

0803ea64 <__FUNCTION__.7857>:
 803ea64:	7561 6964 446f 616d 5249 4851 6e61 6c64     audioDmaIRQHandl
 803ea74:	7265 0000                                   er..

0803ea78 <CSWTCH.26>:
 803ea78:	7d00 0000 9c40 0000 ac44 0000 bb80 0000     .}..@...D.......
 803ea88:	5888 0001 7700 0001 b110 0002 ee00 0002     .X...w..........

0803ea98 <__FUNCTION__.7887>:
 803ea98:	6573 7574 4170 6475 6f69 6c43 636f 736b     setupAudioClocks
	...

0803eaa9 <__FUNCTION__.7821>:
 803eaa9:	4153 5f49 5249 4851 6e61 6c64 7265 2800          SAI_IRQHandler.

0803eab8 <dmaStreamConstSettings_sai>:
 803eab8:	6428 4002 0000 0000 0000 0040 0039 0088     (d.@......@.9...
 803eac8:	0010 0022 4010 0000 0090 0011 0010 0008     .."..@..........
 803ead8:	0010 0002 4010 0000 0010 0001 8310 013e     .....@........>.
 803eae8:	8808 0264 0040 0000 0000 4000 4400 8800     ..d.@......@.D..
 803eaf8:	2000 2200 2000 0040 a000 1100 2000 0800     . .". @...... ..
 803eb08:	2000 0200 2000 0040 2000 0100 2000 3e7d     . ... @.. ... }>
 803eb18:	0801 0000                                   ....

0803eb1c <saiClkTable>:
 803eb1c:	0000 0000 0000 0010 0000 0020 0000 0000     .......... .....
 803eb2c:	0000 0040 0000 0080                         ..@.....

0803eb34 <saiDefs>:
 803eb34:	0bdd 0801 0c11 0801                         ........

0803eb3c <saiPllTable>:
	...
 803eb54:	010f 0000 000c 0000 0007 0000 0158 0000     ............X...
 803eb64:	000e 0000 0007 0000 010f 0000 0006 0000     ................
 803eb74:	0007 0000 0158 0000 0007 0000 0007 0000     ....X...........
	...

0803eb9c <tableOfSaiSettings>:
 803eb9c:	0080 0000 0000 0000 0000 0008 0000 0000     ................
 803ebac:	0040 0000 0020 0000 0000 0001 0000 0004     @... ...........
 803ebbc:	0080 0000 0002 0000 0000 0003 0080 0000     ................
	...
 803ebd8:	0040 0000 0001 0000 0000 0000 0000 0000     @...............
 803ebe8:	0040 0000 0004 0000 0000 000f 6c63 466b     @...........clkF
 803ebf8:	6572 2071 3d3d 5f20 3434 6b5f 7a48 7c20     req == _44_kHz |
 803ec08:	207c 6c63 466b 6572 2071 3d3d 5f20 3834     | clkFreq == _48
 803ec18:	6b5f 7a48 7c20 207c 6c63 466b 6572 2071     _kHz || clkFreq 
 803ec28:	3d3d 5f20 3838 6b5f 7a48 7c20 207c 6c63     == _88_kHz || cl
 803ec38:	466b 6572 2071 3d3d 5f20 3639 6b5f 7a48     kFreq == _96_kHz
 803ec48:	2500 2073 6974 656d 756f 0a74 5300 4941     .%s timeout..SAI
 803ec58:	6220 6675 6566 7372 2020 3a20 0020 7c20      buffers   : . |
 803ec68:	0020 2020 2020 2020 2020 2020 0a00 4153      .          ..SA
 803ec78:	2049 6e69 6574 6672 6361 7365 203a 4900          I interfaces: .

0803ec87 <__FUNCTION__.7778>:
 803ec87:	3249 5f53 7541 6964 496f 746e 7265 6166     I2S_AudioInterfa
 803ec97:	6563 6e49 7469 4900                              ceInit.

0803ec9e <__FUNCTION__.7795>:
 803ec9e:	3249 5f53 6144 6174 7453 6572 6d61 6e49     I2S_DataStreamIn
 803ecae:	7469 5300 4950 0078 7369 3a32 0020 7020     it.SPIx.is2: . p
 803ecbe:	7265 6f69 2064 203d 7525 736e 6620 6572     eriod = %uns fre
 803ecce:	2071 203d 7525 7a48 000a 756f 4274 6675     q = %uHz..outBuf
 803ecde:	6566 3172 3e2d 6973 657a 3c20 203d 756f     fer1->size <= ou
 803ecee:	4274 6675 6566 3172 3e2d 616d 5378 7a69     tBuffer1->maxSiz
 803ecfe:	0065 756e 496d 006e                         e.numIn.

0803ed06 <__FUNCTION__.8455>:
 803ed06:	6f63 766e 6e5f 5f73 3631 314c 5036 745f     conv_ns_16L16P_t
 803ed16:	5f6f 3631 314c 5036 3233 004e               o_16L16P32N.

0803ed22 <__FUNCTION__.8478>:
 803ed22:	6f63 766e 6e5f 5f73 3631 314c 4e36 3631     conv_ns_16L16N16
 803ed32:	3150 4e36 745f 5f6f 3631 314c 5036 3233     P16N_to_16L16P32
 803ed42:	004e                                        N.

0803ed44 <__FUNCTION__.8502>:
 803ed44:	6f63 766e 645f 5f73 3631 314c 5036 745f     conv_ds_16L16P_t
 803ed54:	5f6f 3631 314c 4c36 3233 5f4e 3631 3150     o_16L16L32N_16P1
 803ed64:	5036 3233 004e                              6P32N.

0803ed6a <__FUNCTION__.8526>:
 803ed6a:	6f63 766e 645f 5f73 3631 314c 4e36 3631     conv_ds_16L16N16
 803ed7a:	3150 4e36 745f 5f6f 3631 314c 4c36 3233     P16N_to_16L16L32
 803ed8a:	5f4e 3631 3150 5036 3233 004e               N_16P16P32N.

0803ed96 <__FUNCTION__.8549>:
 803ed96:	6f63 766e 6e5f 5f73 3432 324c 5034 745f     conv_ns_24L24P_t
 803eda6:	5f6f 3631 314c 5036 3233 004e               o_16L16P32N.

0803edb2 <__FUNCTION__.8572>:
 803edb2:	6f63 766e 6e5f 5f73 3432 384c 324e 5034     conv_ns_24L8N24P
 803edc2:	4e38 745f 5f6f 3631 314c 5036 3233 004e     8N_to_16L16P32N.

0803edd2 <__FUNCTION__.8596>:
 803edd2:	6f63 766e 645f 5f73 3432 324c 5034 745f     conv_ds_24L24P_t
 803ede2:	5f6f 3631 314c 4c36 3233 5f4e 3631 3150     o_16L16L32N_16P1
 803edf2:	5036 3233 004e                              6P32N.

0803edf8 <__FUNCTION__.8620>:
 803edf8:	6f63 766e 645f 5f73 3432 384c 324e 5034     conv_ds_24L8N24P
 803ee08:	4e38 745f 5f6f 3631 314c 4c36 3233 5f4e     8N_to_16L16L32N_
 803ee18:	3631 3150 5036 3233 004e                    16P16P32N.

0803ee22 <__FUNCTION__.8643>:
 803ee22:	6f63 766e 6e5f 5f73 3631 384c 384c 314e     conv_ns_16L8L8N1
 803ee32:	5036 5038 4e38 745f 5f6f 3631 314c 5036     6P8P8N_to_16L16P
 803ee42:	3233 004e                                   32N.

0803ee46 <__FUNCTION__.8667>:
 803ee46:	6f63 766e 645f 5f73 3631 384c 384c 314e     conv_ds_16L8L8N1
 803ee56:	5036 5038 4e38 745f 5f6f 3631 314c 4c36     6P8P8N_to_16L16L
 803ee66:	3233 5f4e 3631 3150 5036 3233 004e          32N_16P16P32N.

0803ee74 <__FUNCTION__.8690>:
 803ee74:	6f63 766e 6e5f 5f73 3432 324c 5034 745f     conv_ns_24L24P_t
 803ee84:	5f6f 3432 324c 5034 3631 004e               o_24L24P16N.

0803ee90 <__FUNCTION__.8713>:
 803ee90:	6f63 766e 6e5f 5f73 3432 324c 5034 745f     conv_ns_24L24P_t
 803eea0:	5f6f 3631 314c 5036 4c38 5038 3631 5f4e     o_16L16P8L8P16N_
 803eeb0:	3631 314c 5036 4c38 5038 3631 004e          16L16P8L8P16N.

0803eebe <__FUNCTION__.8736>:
 803eebe:	6f63 766e 6e5f 5f73 3432 384c 324e 5034     conv_ns_24L8N24P
 803eece:	4e38 745f 5f6f 3432 324c 5034 3631 004e     8N_to_24L24P16N.

0803eede <__FUNCTION__.8759>:
 803eede:	6f63 766e 6e5f 5f73 3631 384c 384c 314e     conv_ns_16L8L8N1
 803eeee:	5036 5038 4e38 745f 5f6f 3432 324c 5034     6P8P8N_to_24L24P
 803eefe:	3631 004e                                   16N.

0803ef02 <__FUNCTION__.8782>:
 803ef02:	6f63 766e 6e5f 5f73 3631 384c 384c 314e     conv_ns_16L8L8N1
 803ef12:	5036 5038 4e38 745f 5f6f 3631 314c 5036     6P8P8N_to_16L16P
 803ef22:	4c38 5038 3631 5f4e 3631 314c 5036 4c38     8L8P16N_16L16P8L
 803ef32:	5038 3631 004e                              8P16N.

0803ef38 <__FUNCTION__.8806>:
 803ef38:	6f63 766e 645f 5f73 3432 324c 5034 745f     conv_ds_24L24P_t
 803ef48:	5f6f 3432 324c 4c34 3631 5f4e 3432 3250     o_24L24L16N_24P2
 803ef58:	5034 3631 004e                              4P16N.

0803ef5e <__FUNCTION__.8830>:
 803ef5e:	6f63 766e 645f 5f73 3432 324c 5034 745f     conv_ds_24L24P_t
 803ef6e:	5f6f 3631 314c 4c36 4c38 4c38 3631 5f4e     o_16L16L8L8L16N_
 803ef7e:	3631 3150 5036 5038 5038 3631 004e          16P16P8P8P16N.

0803ef8c <__FUNCTION__.8854>:
 803ef8c:	6f63 766e 645f 5f73 3432 384c 324e 5034     conv_ds_24L8N24P
 803ef9c:	4e38 745f 5f6f 3432 324c 4c34 3631 5f4e     8N_to_24L24L16N_
 803efac:	3432 3250 5034 3631 004e                    24P24P16N.

0803efb6 <__FUNCTION__.8878>:
 803efb6:	6f63 766e 645f 5f73 3432 384c 324e 5034     conv_ds_24L8N24P
 803efc6:	4e38 745f 5f6f 3631 314c 4c36 4c38 4c38     8N_to_16L16L8L8L
 803efd6:	3631 5f4e 3631 3150 5036 5038 5038 3631     16N_16P16P8P8P16
 803efe6:	004e                                        N.

0803efe8 <__FUNCTION__.8902>:
 803efe8:	6f63 766e 645f 5f73 3631 384c 384c 314e     conv_ds_16L8L8N1
 803eff8:	5036 5038 4e38 745f 5f6f 3432 324c 4c34     6P8P8N_to_24L24L
 803f008:	3631 5f4e 3432 3250 5034 3631 004e          16N_24P24P16N.

0803f016 <__FUNCTION__.8926>:
 803f016:	6f63 766e 645f 5f73 3631 384c 384c 314e     conv_ds_16L8L8N1
 803f026:	5036 5038 4e38 745f 5f6f 3631 314c 4c36     6P8P8N_to_16L16L
 803f036:	4c38 4c38 3631 5f4e 3631 3150 5036 5038     8L8L16N_16P16P8P
 803f046:	5038 3631 004e                              8P16N.

0803f04c <commands>:
 803f04c:	6a51 0801 5e71 0801 607d 0801 5f81 0801     Qj..q^..}`..._..
 803f05c:	6001 0801 61bd 0801 6f63 766e 7265 6574     .`...a..converte
 803f06c:	0072                                        r.

0803f06e <outputFormatMap>:
 803f06e:	0301 0301 0301 0301 0301 0302 0302 0605     ................
 803f07e:	0605 0605 0302 0302 0302 0302 0302 0302     ................
 803f08e:	0302 0605 0605 0605 0302 0302 0807 0807     ................
 803f09e:	0807 0302 0302 0605 0605 0605 0000          ..............

0803f0ac <convertTable>:
 803f0ac:	a625 0801 0001 0000 6cdd 0801 0000 0000     %........l......
 803f0bc:	6cdd 0801 0001 0000 7185 0801 0001 0000     .l.......q......
 803f0cc:	a625 0801 0000 0000 a625 0801 0001 0000     %.......%.......
 803f0dc:	a625 0801 0001 0000 a625 0801 0001 0000     %.......%.......
 803f0ec:	a625 0801 0001 0000 a625 0801 0001 0000     %.......%.......
 803f0fc:	6f31 0801 0000 0000 6f31 0801 0001 0000     1o......1o......
 803f10c:	7445 0801 0001 0000 a625 0801 0000 0000     Et......%.......
 803f11c:	a625 0801 0001 0000 a625 0801 0001 0000     %.......%.......
 803f12c:	a625 0801 0001 0000 a625 0801 0001 0000     %.......%.......
 803f13c:	a625 0801 0001 0000 7705 0801 0000 0000     %........w......
 803f14c:	7705 0801 0001 0000 7be5 0801 0001 0000     .w.......{......
 803f15c:	85c1 0801 0000 0000 85c1 0801 0001 0000     ................
 803f16c:	92bd 0801 0001 0000 8885 0801 0001 0000     ................
 803f17c:	9649 0801 0001 0000 a625 0801 0001 0000     I.......%.......
 803f18c:	7991 0801 0000 0000 7991 0801 0001 0000     .y.......y......
 803f19c:	7e8d 0801 0001 0000 8b49 0801 0000 0000     .~......I.......
 803f1ac:	a625 0801 0001 0000 99d5 0801 0001 0000     %...............
 803f1bc:	a625 0801 0001 0000 9ce9 0801 0001 0000     %...............
 803f1cc:	a625 0801 0001 0000 80fd 0801 0000 0000     %...............
 803f1dc:	80fd 0801 0001 0000 8351 0801 0001 0000     ........Q.......
 803f1ec:	8dc5 0801 0000 0000 8dc5 0801 0001 0000     ................
 803f1fc:	9ffd 0801 0001 0000 9041 0801 0001 0000     ........A.......
 803f20c:	a311 0801 0001 0000                         ........

0803f214 <freqDiv>:
 803f214:	0000 0000 0001 0000 0001 0000 0002 0000     ................
 803f224:	0002 0000 0004 0000 0004 0000 0000 0000     ................
 803f234:	0001 0000 0001 0000 0002 0000 0002 0000     ................
 803f244:	0002 0000 0002 0000                         ........

0803f24c <skipRatio>:
 803f24c:	0000 0000 0001 0000 0001 0000 0001 0000     ................
 803f25c:	0001 0000 0002 0000 0002 0000 0000 0000     ................
 803f26c:	0001 0000 0001 0000 0001 0000 0001 0000     ................
 803f27c:	0001 0000 0001 0000 4153 0049 3249 0053     ........SAI.I2S.
 803f28c:	5845 0054                                   EXT.

0803f290 <clkSrcStr>:
 803f290:	f284 0803 f288 0803 f28c 0803 6f4e 656e     ............None
 803f2a0:	5500 4253 5300 4950 0031 5053 3249 5700     .USB.SPI1.SPI2.W
 803f2b0:	314d 5700 324d 5400 5345 0054               M1.WM2.TEST.

0803f2bc <inQ>:
 803f2bc:	f29c 0803 f2a1 0803 f2a1 0803 f2a5 0803     ................
 803f2cc:	f2aa 0803 f2af 0803 f2b3 0803 f2b7 0803     ................
 803f2dc:	3631 314c 5036 3100 4c36 3631 314e 5036     16L16P.16L16N16P
 803f2ec:	3631 004e 3432 324c 5034 3200 4c34 4e38     16N.24L24P.24L8N
 803f2fc:	3432 3850 004e 3631 384c 384c 314e 5036     24P8N.16L8L8N16P
 803f30c:	5038 4e38 0000 0000                         8P8N....

0803f314 <inFormat>:
 803f314:	f2dc 0803 f2e3 0803 f2f0 0803 f2f7 0803     ................
 803f324:	f302 0803 6152 6964 006f 6143 6c62 0065     ....Radio.Cable.

0803f334 <outMode>:
 803f334:	f328 0803 f32e 0803 4f4e 454e 3100 4c36     (.......NONE.16L
 803f344:	3631 3350 4e32 3100 4c36 3631 3350 4e32     16P32N.16L16P32N
 803f354:	315f 4c36 3631 3350 4e32 3100 4c36 3631     _16L16P32N.16L16
 803f364:	334c 4e32 315f 5036 3631 3350 4e32 3200     L32N_16P16P32N.2
 803f374:	4c34 3432 3150 4e36 3200 4c34 3432 3150     4L24P16N.24L24P1
 803f384:	4e36 325f 4c34 3432 3150 4e36 3200 4c34     6N_24L24P16N.24L
 803f394:	3432 314c 4e36 325f 5034 3432 3150 4e36     24L16N_24P24P16N
 803f3a4:	3100 4c36 3631 3850 384c 3150 4e36 315f     .16L16P8L8P16N_1
 803f3b4:	4c36 3631 3850 384c 3150 4e36 3100 4c36     6L16P8L8P16N.16L
 803f3c4:	3631 384c 384c 314c 4e36 315f 5036 3631     16L8L8L16N_16P16
 803f3d4:	3850 3850 3150 4e36 0000 0000               P8P8P16N....

0803f3e0 <outFormat>:
 803f3e0:	f33c 0803 f341 0803 f34b 0803 f35f 0803     <...A...K..._...
 803f3f0:	f373 0803 f37d 0803 f391 0803 f3a5 0803     s...}...........
 803f400:	f3c1 0803                                   ....

0803f404 <inQueues>:
 803f404:	0000 0000 2644 1000 2678 1000 26ac 1000     ....D&..x&...&..
 803f414:	26e0 1000 0000 0000 2714 1000 2748 1000     .&.......'..H'..

0803f424 <outQueues>:
 803f424:	0000 0000 25dc 1000 2610 1000               .....%...&..

0803f430 <audioOutputType>:
	...
 803f438:	0000 0101 0100 0001 0000 0200 0002 0202     ................
 803f448:	0000 0000 0000 000a 0c00 0c00 0000 0b00     ................
 803f458:	0000 000d 000d 0000 0011 1300 1300 0000     ................
 803f468:	1200 0000 0014 5014 7069 2065 6f66 2072     .......Pipe for 
 803f478:	7073 536b 7465 2520 2078 6f6e 2074 6f66     spkSet %x not fo
 803f488:	6e75 2e64 000a 6e49 7570 2074 6f66 6d72     und...Input form
 803f498:	7461 2520 4073 6425 6620 6f72 206d 7325     at %s@%d from %s
 803f4a8:	0a20 4600 726f 616d 2074 6863 6e61 6567      ..Format change
 803f4b8:	203a 6e49 7570 2074 7325 6e20 746f 6120     : Input %s not a
 803f4c8:	7463 7669 2e65 000a 6970 6570 3e2d 6e69     ctive...pipe->in
 803f4d8:	7570 4674 726f 616d 2074 203c 4649 4e5f     putFormat < IF_N
 803f4e8:	4d55 7000                                        UM.

0803f4eb <__FUNCTION__.8330>:
 803f4eb:	6970 6570 6f43 666e 6769 7275 0065 7361     pipeConfigure.as
 803f4fb:	6573 7472 6920 206e 7325 2528 2964 203a     sert in %s(%d): 
 803f50b:	7325 000a 6970 6570 3e2d 756f 7074 7475     %s..pipe->output
 803f51b:	6f4d 6564 3c20 4f20 5f4d 554e 004d 6970     Mode < OM_NUM.pi
 803f52b:	6570 3e2d 6e69 7570 2074 203c 4e49 5550     pe->input < INPU
 803f53b:	5f54 554e 004d 754f 7074 7475 6620 726f     T_NUM.Output for
 803f54b:	616d 2074 6f6e 2074 6f66 6e75 2064 6f66     mat not found fo
 803f55b:	2072 6e69 7570 2074 6f66 6d72 7461 253a     r input format:%
 803f56b:	2073 756f 7074 7475 6f4d 6564 253a 2073     s outputMode:%s 
 803f57b:	6e69 7570 3a74 7325 6620 6572 3a71 6425     input:%s freq:%d
 803f58b:	0a20 7300 6165 6372 6968 676e 6620 726f      ..searching for
 803f59b:	6320 6e6f 6576 7472 6f69 206e 6f72 7475      convertion rout
 803f5ab:	6e69 2065 7325 2520 2073 000a 6f43 766e     ine %s %s ..Conv
 803f5bb:	7265 6974 6e6f 7220 756f 6974 656e 6e20     ertion routine n
 803f5cb:	746f 6620 756f 646e 6620 726f 2520 2073     ot found for %s 
 803f5db:	7325 0a20 4e00 4c55 204c 6f43 766e 7265     %s ..NULL Conver
 803f5eb:	6974 6e6f 7220 756f 6974 656e 6620 726f     tion routine for
 803f5fb:	2520 2073 7325 0a20 5000 6972 616d 7972      %s %s ..Primary
 803f60b:	6f20 7475 7570 2074 7571 7565 2065 7369      output queue is
 803f61b:	6e20 746f 6120 6176 6c69 6261 656c 0a2e      not available..
 803f62b:	000a 6553 6f63 646e 7261 2079 756f 7074     ..Secondary outp
 803f63b:	7475 7120 6575 6575 6920 2073 6f6e 2074     ut queue is not 
 803f64b:	7661 6961 616c 6c62 2e65 0a0a 5000 6425     available....P%d
 803f65b:	6120 6475 6f69 6920 516e 2520 2e73 6425      audio inQ %s.%d
 803f66b:	6920 466e 726f 616d 2074 7325 2540 4864      inFormat %s@%dH
 803f67b:	207a 756f 4674 726f 616d 2074 7325 2540     z outFormat %s@%
 803f68b:	4864 207a 000a 0041 0049 004d 2550 2864     dHz ..A.I.M.P%d(
 803f69b:	7325 2029 007c 3025 7832 007c 2020 007c     %s) |.%02x|.  |.
 803f6ab:	6920 516e 253a 2e73 6425 6920 3a66 7325      inQ:%s.%d if:%s
 803f6bb:	2540 4864 207a 666f 253a 4073 6425 7a48     @%dHz of:%s@%dHz
 803f6cb:	6d20 646f 3a65 7325 6320 6b6c 7253 3a63      mode:%s clkSrc:
 803f6db:	7325 000a 4920 706e 7475 6220 6675 6566     %s.. Input buffe
 803f6eb:	7372 203a 0020 3025 7832 2000 0020 2020     rs:  .%02x.  .  
 803f6fb:	2020 0020 200a 754f 7074 7475 6220 6675        .. Output buf
 803f70b:	6566 7372 203a 0a00 5320 4941 6920 746e     fers: .. SAI int
 803f71b:	7265 6166 6563 3a73 0020 0020 000a 0000     erfaces: . .....
	...

0803f72c <usbFmt>:
 803f72c:	0002 0000 ac44 0000 013e 0000 0018 0000     ....D...>.......
 803f73c:	0006 0000 c000 000a 4000 000b 0002 0000     .........@......
 803f74c:	ac44 0000 013e 0000 0018 0000 0006 0000     D...>...........
 803f75c:	c000 000a 4000 000b 0002 0000 bb80 0000     .....@..........
 803f76c:	0156 0000 0018 0000 0006 0000 c000 000b     V...............
 803f77c:	4000 000c 0002 0000 5888 0001 0246 0000     .@.......X..F...
 803f78c:	0018 0000 0006 0000 c000 0015 4000 0016     .............@..
 803f79c:	0002 0000 7700 0001 0276 0000 0018 0000     .....w..v.......
 803f7ac:	0006 0000 c000 0017 4000 0018 0002 0000     .........@......
 803f7bc:	b110 0002 0400 0000 0018 0000 0006 0000     ................
 803f7cc:	c000 002b 4000 002c 0002 0000 ee00 0002     ..+..@,.........
 803f7dc:	0400 0000 0018 0000 0006 0000 c000 002f     ............../.
 803f7ec:	4000 0030 0000 0000 ac44 0000 0192 0000     .@0.....D.......
 803f7fc:	0010 0000 0004 0000 c000 000a 4000 000b     .............@..
 803f80c:	0000 0000 bb80 0000 01b6 0000 0010 0000     ................
 803f81c:	0004 0000 c000 000b 4000 000c 0000 0000     .........@......
 803f82c:	5888 0001 02f4 0000 0010 0000 0004 0000     .X..............
 803f83c:	c000 0015 4000 0016 0000 0000 7700 0001     .....@.......w..
 803f84c:	0336 0000 0010 0000 0004 0000 c000 0017     6...............
 803f85c:	4000 0018 0002 0000 b110 0002 0400 0000     .@..............
 803f86c:	0018 0000 0006 0000 c000 002b 4000 002c     ..........+..@,.
 803f87c:	0002 0000 ee00 0002 0400 0000 0018 0000     ................
 803f88c:	0006 0000 c000 002f 4000 0030 2020 2020     ....../..@0.    
 803f89c:	2020 2020 2020 2020 2020 2020 0020 0000                  ...
	...
 803f8b8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 803f8c8:	5300 4d54 3233 4120 6475 6f69 4320 616c     .STM32 Audio Cla
 803f8d8:	7373 4100 4455 4f49 4320 6e6f 6966 0067     ss.AUDIO Config.
 803f8e8:	5541 4944 204f 6e49 6574 6672 6361 0065     AUDIO Interface.

0803f8f8 <__EH_FRAME_BEGIN__>:
 803f8f8:	0000 0000                                   ....
