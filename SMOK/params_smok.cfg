   MS PER1      MS PER2      MS PER3      MS PER4      MS PER5      MS PER6      MS PER7      MS PER8     SS PER1      SS PER2      default
 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00   // fSize
 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00   // CRC
 ;       0x01 ;       0x01 ;       0x01 ;       0x01 ;       0x01 ;       0x01 ;       0x01 ;       0x01 ;       0x01 ;       0x01 ;       0x01   // ack150; //0 - ACK jest wysylane bez czekania na sharka/PWMa
 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00   // fout22; // 1 - tylko jedna czestotliwosc wyjsciowa PLLa
 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00   // ckin141; //1 -  zwiekszona czestotliwosc wejsciowa
 ;      0xFFF ;      0xFFF ;      0xFFF ;      0xFFF ;      0xFFF ;      0xFFF ;      0xFFF ;      0xFFF ;      0x061 ;      0x061 ;       0x00   // disable_alerts;    // wylacz reakcje na alert - maska (0x01 - Uwy=10%Uwe, 0x02 - watchdog, 0x04 - Uwe, 0x08 - Uwy, 0x10 - PWM_STAT, 0x20 - PB3, 0x40 - PB4, 0x80 - PC14, 0x100 - PC15, 0x200 - Imax, 0x400 - tAir, 0x800 - tFET, 0x1000 -PLL;, 0x2000 - PE13
 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00   // empty_buffers;//1 uzywaj czystych buforow
 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00   // trace_messages; // 1 - wyswietlaj komunikaty bez 0x55, 0xb0, 0xCC, 2 - wyswietlaj tez 0x55, 0xb0, 0xCC
 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       4000 ;       4000 ;       1000   // ka_period;         // okres wysylania keep aliveow
 ;       5000 ;       5000 ;       5000 ;       5000 ;       5000 ;       5000 ;       5000 ;       5000 ;      12000 ;      12000 ;       5000   // ka_timeout;        // czas alarmowania po nieotrzymaniu keepalive
 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00   // do_not_send_status; // 1 - nie wysylaj 0xb0
 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00   // no_rst_amp; //
 ; 0x01020300 ; 0x01020300 ; 0x01020300 ; 0x01020300 ; 0x01020300 ; 0x01020300 ; 0x01020300 ; 0x01020300 ; 0x01020300 ; 0x01020300 ; 0xFFFFFF00  //manID;
 ;       0x13 ;       0x13 ;       0x11 ;       0x11 ;       0x22 ;       0x22 ;       0x11 ;       0x11 ;       0xEE ;       0xEE ;       0xFF   // kondPom; // domyslna kondPom
 ;       0x40 ;       0x01 ;       0x44 ;       0x45 ;       0x44 ;       0x45 ;       0x40 ;       0x40 ;       0x00 ;       0x01 ;       0x00   // flags; // bit 0 - left/right, bit 1 - wspiera tryb stereo w Multislave,  bit2 - podstawowy stream 0/1, bit 6 - omin ustaianie PLLki, bit 7 - power cycle dla Vari
 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00   // x92delay; // wartosc opoznienia w ms pomiedzy otrzymaniem 0x92 a ustawieniem PLL
 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00   // xPLLdelay; // wartosc opoznienia w ms pomiedzy PLL a wyslaniem 0x92 do sharka
 ;       0x0F ;       0x0F ;       0x01 ;       0x01 ;       0x01 ;       0x01 ;       0x01 ;       0x01 ;       0x0F ;       0x0F ;       0x0F   // stats // pokaz statystyki
 ;       0xFF ;       0xFF ;       0xFF ;       0xFF ;       0xFF ;       0xFF ;       0xFF ;       0xFF ;       0xFF ;       0xFF ;       0xFF   // conDelay //opoznienie polaczenia SMOKa fo MADO
 ;       0x00 ;       0x00 ;       0x01 ;       0x01 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00 ;       0x00   // proto //0-SMOK lub eval, 1-MADO Proto emulujacy SMOKa, 2-wylaczony (radio w resecie)
 ;       0x05 ;       0x05 ;       0x05 ;       0x01 ;       0x05 ;       0x01 ;       0x01 ;       0x01 ;       0x05 ;       0x05 ;       0x05   // dlevel // traces level
 ;       0x05 ;       0x05 ;       0x05 ;       0x05 ;       0x05 ;       0x05 ;       0x05 ;       0x05 ;       0x01 ;       0x01 ;       0x01   // sharcSPISpeed //predkosc programowania sharca
 ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF   // sharcProgramRetry//liczba powtorzen programowania sharca
 ;       0x49 ;       0x49 ;       0x49 ;       0x49 ;       0x49 ;       0x49 ;       0x49 ;       0x49 ;       0x49 ;       0x49 ;       0x49   // temp1Addr //adres i2c termometru air
 ;       0x4A ;       0x4A ;       0x4A ;       0x4A ;       0x4A ;       0x4A ;       0x4A ;       0x4A ;       0x4A ;       0x4A ;       0x4A   // temp1Addr //adres i2c termometru fet
 ;         31 ;         31 ;         31 ;         31 ;         31 ;         31 ;         31 ;         31 ;         31 ;         31 ;          4   // msgRoundMax[0];    // liczba slotow rundy algorytmu wysylania komunikatow B0
 ;         31 ;         31 ;         31 ;         31 ;         31 ;         31 ;         31 ;         31 ;         31 ;         31 ;          4   // msgRoundMax[1];    // liczba slotow rundy algorytmu wysylania komunikatow B0
 ;       1500 ;       1500 ;       1500 ;       1500 ;       1500 ;       1500 ;       1500 ;       1500 ;       2000 ;       2000 ;       500   // msgRoundTime[0];   // czas jednego slotu
 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       4000;        4000 ;       700   // msgRoundTime[1];   // czas jednego slotu
 ; 0x00000001 ; 0x00000001 ; 0x00000001 ; 0x00000001 ; 0x00000001 ; 0x00000001 ; 0x00000001 ; 0x00000001 ; 0x11111111 ; 0x11111111 ; 0x00000001   // msgUwe[0];         // maska wysylanie Uwe
 ; 0x00000001 ; 0x00000001 ; 0x00000001 ; 0x00000001 ; 0x00000001 ; 0x00000001 ; 0x00000001 ; 0x00000001 ; 0x11111111 ; 0x11111111 ; 0x00000001   // msgUwe[1];         // maska wysylanie Uwe
 ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0xFFFFFFFF ; 0x22222222 ; 0x22222222 ; 0x00000002   // msgUwy[0];         // maska wysylanie Uwy
 ; 0x00000002 ; 0x00000002 ; 0x00000002 ; 0x00000002 ; 0x00000002 ; 0x00000002 ; 0x00000002 ; 0x00000002 ; 0x22222222 ; 0x22222222 ; 0x00000002   // msgUwy[1];         // maska wysylanie Uwy
 ; 0x00000000 ; 0x00000000 ; 0x00000000 ; 0x00000000 ; 0x00000000 ; 0x00000000 ; 0x00000000 ; 0xFFFFFFFF ; 0x44444444 ; 0x44444444 ; 0x00000004   // msgIavg[0];        // maska wysylanie Iavg
 ; 0x00000003 ; 0x00000003 ; 0x00000003 ; 0x00000003 ; 0x00000003 ; 0x00000003 ; 0x00000003 ; 0x00000003 ; 0x44444444 ; 0x44444444 ; 0x00000004   // msgIavg[1];        // maska wysylanie Iavg
 ; 0x00000004 ; 0x00000004 ; 0x00000004 ; 0x00000004 ; 0x00000004 ; 0x00000004 ; 0x00000004 ; 0x00000004 ; 0x44444444 ; 0x44444444 ; 0x00000004   // msgImax[0];        // maska wysylanie Imax
 ; 0x00000004 ; 0x00000004 ; 0x00000004 ; 0x00000004 ; 0x00000004 ; 0x00000004 ; 0x00000004 ; 0x00000004 ; 0x44444444 ; 0x44444444 ; 0x00000004   // msgImax[1];        // maska wysylanie Imax
 ; 0x00000010 ; 0x00000010 ; 0x00000010 ; 0x00000010 ; 0x00000010 ; 0x00000010 ; 0x00000010 ; 0x00000010 ; 0x88888888 ; 0x88888888 ; 0x00000008   // msgTemp[0];        // maska wysylanie temperatur
 ; 0x00000010 ; 0x00000010 ; 0x00000010 ; 0x00000010 ; 0x00000010 ; 0x00000010 ; 0x00000010 ; 0x00000010 ; 0x88888888 ; 0x88888888 ; 0x00000008   // msgTemp[1];        // maska wysylanie temperatur
 ;       6000 ;       6000 ;       6000 ;       6000 ;       6000 ;       6000 ;       6000 ;       6000 ;       1000 ;       1000 ;       6000   // imax_alarm;        // wartosc alarmu Imax
 ;         80 ;         80 ;         80 ;         80 ;         80 ;         80 ;         80 ;         80 ;         80 ;         80 ;         25   // t_air_max;         // wartosc alarmu temperatuy air w wielokrotnosci 0.5C
 ;        100 ;        100 ;        100 ;        100 ;        100 ;        100 ;        100 ;        100 ;        100 ;        100 ;        100   // t_fet_max;         // wartosc alarmu temperatuy fet
 ;        500 ;        500 ;        500 ;        500 ;        500 ;        500 ;        500 ;        500 ;        500 ;        500 ;        500   // temp_time;         // okres pomiaru temperatury
 ;       2000 ;       2000 ;       2000 ;       2000 ;       2000 ;       2000 ;       2000 ;       2000 ;       2000 ;       2000 ;       2000   // uwyRange;          // wartosc napiecie przelaczania wzmocnienia
 ;      35000 ;      35000 ;      35000 ;      35000 ;      35000 ;      35000 ;      35000 ;      35000 ;      35000 ;      35000 ;      35000   // uwe_alarm;          // max Uwe przy starcie
 ;       2000 ;       2000 ;       2000 ;       2000 ;       2000 ;       2000 ;       2000 ;       2000 ;       4000 ;       4000 ;       2000   // uwy_alarm;          // max Uwy przy starcie
 ;       2244 ;       2244 ;       2244 ;       2244 ;       2244 ;       2244 ;       2244 ;       2244 ;          1 ;          1 ;       2356   // a_nom;             // wspolczynnik a (licznik) a = a_nom/aden
 ;    1000000 ;    1000000 ;    1000000 ;    1000000 ;    1000000 ;    1000000 ;    1000000 ;    1000000 ;    1000000 ;    1000000 ;    1000000   // a_den;             // wspolczynnik a (mianownik)
 ;         14 ;         14 ;         14 ;         14 ;         14 ;         14 ;         14 ;         14 ;         14 ;         14 ;         14   // b;                 // wspolczynnik b[mA]
 ;         30 ;         30 ;         30 ;         30 ;         30 ;         30 ;         30 ;         30 ;         30 ;         30 ;         33   // c;                 // wspolczynnik c[mA]
 ;       1600 ;       1600 ;       1600 ;       1600 ;       1600 ;       1600 ;       1600 ;       1600 ;       1600 ;       1600 ;       1600   // powerOnDelay;      //opoznienie od wlaczenia zasilania do przeslania komunikatu 50 do sharka/pwma
 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000   // ampEnableDelay50;    //opoznienie przed zalaczeniem wzmacniacza rst_amp
 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000   // ampEnableDelay92;    //opoznienie przed zalaczeniem wzmacniacza rst_amp
 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000 ;       1000   // ampEnableDelay58;    //opoznienie przed zalaczeniem wzmacniacza rst_amp
 ;          1 ;          1 ;          1 ;          1 ;          1 ;          1 ;          1 ;          1 ;          1 ;          1 ;          1   // plli2c - numer I2C, do ktorego jest podlaczony PLL
 ;          2 ;          2 ;          2 ;          2 ;          2 ;          2 ;          2 ;          2 ;          2 ;          2 ;          2   // pllRetryNum - liczba prob ustawienia PLL
 ;        0x0 ;        0x0 ;        0x0 ;        0x0 ;        0x0 ;        0x0 ;        0x0 ;        0x0 ;        0x0 ;        0x0 ;        0x0   // polar1 - bit0, polar2 - bit1
 ;        500 ;        500 ;        500 ;        500 ;        500 ;        500 ;        500 ;        500 ;        500 ;        500 ;        500   // timeout50; //Czas na odpowiedz na komunikat 50
